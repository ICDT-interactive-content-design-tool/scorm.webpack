/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={7914:(t,e,n)=>{t.exports=function t(e,n,i){function r(a,u){if(!n[a]){if(!e[a]){if(o)return o(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var s=n[a]={exports:{}};e[a][0].call(s.exports,(function(t){return r(e[a][1][t]||t)}),s,s.exports,t,e,n,i)}return n[a].exports}for(var o=void 0,a=0;a<i.length;a++)r(i[a]);return r}({1:[function(t,e,i){(function(t){"use strict";var n,i,r=t.MutationObserver||t.WebKitMutationObserver;if(r){var o=0,a=new r(l),u=t.document.createTextNode("");a.observe(u,{characterData:!0}),n=function(){u.data=o=++o%2}}else if(t.setImmediate||void 0===t.MessageChannel)n="document"in t&&"onreadystatechange"in t.document.createElement("script")?function(){var e=t.document.createElement("script");e.onreadystatechange=function(){l(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null},t.document.documentElement.appendChild(e)}:function(){setTimeout(l,0)};else{var c=new t.MessageChannel;c.port1.onmessage=l,n=function(){c.port2.postMessage(0)}}var s=[];function l(){var t,e;i=!0;for(var n=s.length;n;){for(e=s,s=[],t=-1;++t<n;)e[t]();n=s.length}i=!1}e.exports=function(t){1!==s.push(t)||i||n()}}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(t,e,n){"use strict";var i=t(1);function r(){}var o={},a=["REJECTED"],u=["FULFILLED"],c=["PENDING"];function s(t){if("function"!=typeof t)throw new TypeError("resolver must be a function");this.state=c,this.queue=[],this.outcome=void 0,t!==r&&h(this,t)}function l(t,e,n){this.promise=t,"function"==typeof e&&(this.onFulfilled=e,this.callFulfilled=this.otherCallFulfilled),"function"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function d(t,e,n){i((function(){var i;try{i=e(n)}catch(e){return o.reject(t,e)}i===t?o.reject(t,new TypeError("Cannot resolve promise with itself")):o.resolve(t,i)}))}function f(t){var e=t&&t.then;if(t&&("object"==typeof t||"function"==typeof t)&&"function"==typeof e)return function(){e.apply(t,arguments)}}function h(t,e){var n=!1;function i(e){n||(n=!0,o.reject(t,e))}function r(e){n||(n=!0,o.resolve(t,e))}var a=v((function(){e(r,i)}));"error"===a.status&&i(a.value)}function v(t,e){var n={};try{n.value=t(e),n.status="success"}catch(t){n.status="error",n.value=t}return n}e.exports=s,s.prototype.catch=function(t){return this.then(null,t)},s.prototype.then=function(t,e){if("function"!=typeof t&&this.state===u||"function"!=typeof e&&this.state===a)return this;var n=new this.constructor(r);return this.state!==c?d(n,this.state===u?t:e,this.outcome):this.queue.push(new l(n,t,e)),n},l.prototype.callFulfilled=function(t){o.resolve(this.promise,t)},l.prototype.otherCallFulfilled=function(t){d(this.promise,this.onFulfilled,t)},l.prototype.callRejected=function(t){o.reject(this.promise,t)},l.prototype.otherCallRejected=function(t){d(this.promise,this.onRejected,t)},o.resolve=function(t,e){var n=v(f,e);if("error"===n.status)return o.reject(t,n.value);var i=n.value;if(i)h(t,i);else{t.state=u,t.outcome=e;for(var r=-1,a=t.queue.length;++r<a;)t.queue[r].callFulfilled(e)}return t},o.reject=function(t,e){t.state=a,t.outcome=e;for(var n=-1,i=t.queue.length;++n<i;)t.queue[n].callRejected(e);return t},s.resolve=function(t){return t instanceof this?t:o.resolve(new this(r),t)},s.reject=function(t){var e=new this(r);return o.reject(e,t)},s.all=function(t){var e=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var n=t.length,i=!1;if(!n)return this.resolve([]);for(var a=new Array(n),u=0,c=-1,s=new this(r);++c<n;)l(t[c],c);return s;function l(t,r){e.resolve(t).then((function(t){a[r]=t,++u!==n||i||(i=!0,o.resolve(s,a))}),(function(t){i||(i=!0,o.reject(s,t))}))}},s.race=function(t){var e=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var n,i=t.length,a=!1;if(!i)return this.resolve([]);for(var u=-1,c=new this(r);++u<i;)n=t[u],e.resolve(n).then((function(t){a||(a=!0,o.resolve(c,t))}),(function(t){a||(a=!0,o.reject(c,t))}));return c}},{1:1}],3:[function(t,e,i){(function(e){"use strict";"function"!=typeof e.Promise&&(e.Promise=t(2))}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{2:2}],4:[function(t,e,n){"use strict";var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};var r=function(){try{if("undefined"!=typeof indexedDB)return indexedDB;if("undefined"!=typeof webkitIndexedDB)return webkitIndexedDB;if("undefined"!=typeof mozIndexedDB)return mozIndexedDB;if("undefined"!=typeof OIndexedDB)return OIndexedDB;if("undefined"!=typeof msIndexedDB)return msIndexedDB}catch(t){return}}();function o(t,e){t=t||[],e=e||{};try{return new Blob(t,e)}catch(r){if("TypeError"!==r.name)throw r;for(var n=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),i=0;i<t.length;i+=1)n.append(t[i]);return n.getBlob(e.type)}}"undefined"==typeof Promise&&t(3);var a=Promise;function u(t,e){e&&t.then((function(t){e(null,t)}),(function(t){e(t)}))}function c(t,e,n){"function"==typeof e&&t.then(e),"function"==typeof n&&t.catch(n)}function s(t){return"string"!=typeof t&&(console.warn(t+" used as a key, but it is not a string."),t=String(t)),t}function l(){if(arguments.length&&"function"==typeof arguments[arguments.length-1])return arguments[arguments.length-1]}var d="local-forage-detect-blob-support",f=void 0,h={},v=Object.prototype.toString,p="readonly",g="readwrite";function y(t){for(var e=t.length,n=new ArrayBuffer(e),i=new Uint8Array(n),r=0;r<e;r++)i[r]=t.charCodeAt(r);return n}function _(t){return"boolean"==typeof f?a.resolve(f):function(t){return new a((function(e){var n=t.transaction(d,g),i=o([""]);n.objectStore(d).put(i,"key"),n.onabort=function(t){t.preventDefault(),t.stopPropagation(),e(!1)},n.oncomplete=function(){var t=navigator.userAgent.match(/Chrome\/(\d+)/),n=navigator.userAgent.match(/Edge\//);e(n||!t||parseInt(t[1],10)>=43)}})).catch((function(){return!1}))}(t).then((function(t){return f=t}))}function b(t){var e=h[t.name],n={};n.promise=new a((function(t,e){n.resolve=t,n.reject=e})),e.deferredOperations.push(n),e.dbReady?e.dbReady=e.dbReady.then((function(){return n.promise})):e.dbReady=n.promise}function m(t){var e=h[t.name].deferredOperations.pop();if(e)return e.resolve(),e.promise}function w(t,e){var n=h[t.name].deferredOperations.pop();if(n)return n.reject(e),n.promise}function x(t,e){return new a((function(n,i){if(h[t.name]=h[t.name]||{forages:[],db:null,dbReady:null,deferredOperations:[]},t.db){if(!e)return n(t.db);b(t),t.db.close()}var o=[t.name];e&&o.push(t.version);var a=r.open.apply(r,o);e&&(a.onupgradeneeded=function(e){var n=a.result;try{n.createObjectStore(t.storeName),e.oldVersion<=1&&n.createObjectStore(d)}catch(n){if("ConstraintError"!==n.name)throw n;console.warn('The database "'+t.name+'" has been upgraded from version '+e.oldVersion+" to version "+e.newVersion+', but the storage "'+t.storeName+'" already exists.')}}),a.onerror=function(t){t.preventDefault(),i(a.error)},a.onsuccess=function(){var e=a.result;e.onversionchange=function(t){t.target.close()},n(e),m(t)}}))}function S(t){return x(t,!1)}function M(t){return x(t,!0)}function E(t,e){if(!t.db)return!0;var n=!t.db.objectStoreNames.contains(t.storeName),i=t.version<t.db.version,r=t.version>t.db.version;if(i&&(t.version!==e&&console.warn('The database "'+t.name+"\" can't be downgraded from version "+t.db.version+" to version "+t.version+"."),t.version=t.db.version),r||n){if(n){var o=t.db.version+1;o>t.version&&(t.version=o)}return!0}return!1}function k(t){return o([y(atob(t.data))],{type:t.type})}function T(t){return t&&t.__local_forage_encoded_blob}function N(t){var e=this,n=e._initReady().then((function(){var t=h[e._dbInfo.name];if(t&&t.dbReady)return t.dbReady}));return c(n,t,t),n}function A(t,e,n,i){void 0===i&&(i=1);try{var r=t.db.transaction(t.storeName,e);n(null,r)}catch(r){if(i>0&&(!t.db||"InvalidStateError"===r.name||"NotFoundError"===r.name))return a.resolve().then((function(){if(!t.db||"NotFoundError"===r.name&&!t.db.objectStoreNames.contains(t.storeName)&&t.version<=t.db.version)return t.db&&(t.version=t.db.version+1),M(t)})).then((function(){return function(t){b(t);for(var e=h[t.name],n=e.forages,i=0;i<n.length;i++){var r=n[i];r._dbInfo.db&&(r._dbInfo.db.close(),r._dbInfo.db=null)}return t.db=null,S(t).then((function(e){return t.db=e,E(t)?M(t):e})).then((function(i){t.db=e.db=i;for(var r=0;r<n.length;r++)n[r]._dbInfo.db=i})).catch((function(e){throw w(t,e),e}))}(t).then((function(){A(t,e,n,i-1)}))})).catch(n);n(r)}}var O={_driver:"asyncStorage",_initStorage:function(t){var e=this,n={db:null};if(t)for(var i in t)n[i]=t[i];var r=h[n.name];r||(r={forages:[],db:null,dbReady:null,deferredOperations:[]},h[n.name]=r),r.forages.push(e),e._initReady||(e._initReady=e.ready,e.ready=N);var o=[];function u(){return a.resolve()}for(var c=0;c<r.forages.length;c++){var s=r.forages[c];s!==e&&o.push(s._initReady().catch(u))}var l=r.forages.slice(0);return a.all(o).then((function(){return n.db=r.db,S(n)})).then((function(t){return n.db=t,E(n,e._defaultConfig.version)?M(n):t})).then((function(t){n.db=r.db=t,e._dbInfo=n;for(var i=0;i<l.length;i++){var o=l[i];o!==e&&(o._dbInfo.db=n.db,o._dbInfo.version=n.version)}}))},_support:function(){try{if(!r||!r.open)return!1;var t="undefined"!=typeof openDatabase&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),e="function"==typeof fetch&&-1!==fetch.toString().indexOf("[native code");return(!t||e)&&"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(t){return!1}}(),iterate:function(t,e){var n=this,i=new a((function(e,i){n.ready().then((function(){A(n._dbInfo,p,(function(r,o){if(r)return i(r);try{var a=o.objectStore(n._dbInfo.storeName).openCursor(),u=1;a.onsuccess=function(){var n=a.result;if(n){var i=n.value;T(i)&&(i=k(i));var r=t(i,n.key,u++);void 0!==r?e(r):n.continue()}else e()},a.onerror=function(){i(a.error)}}catch(t){i(t)}}))})).catch(i)}));return u(i,e),i},getItem:function(t,e){var n=this;t=s(t);var i=new a((function(e,i){n.ready().then((function(){A(n._dbInfo,p,(function(r,o){if(r)return i(r);try{var a=o.objectStore(n._dbInfo.storeName).get(t);a.onsuccess=function(){var t=a.result;void 0===t&&(t=null),T(t)&&(t=k(t)),e(t)},a.onerror=function(){i(a.error)}}catch(t){i(t)}}))})).catch(i)}));return u(i,e),i},setItem:function(t,e,n){var i=this;t=s(t);var r=new a((function(n,r){var o;i.ready().then((function(){return o=i._dbInfo,"[object Blob]"===v.call(e)?_(o.db).then((function(t){return t?e:(n=e,new a((function(t,e){var i=new FileReader;i.onerror=e,i.onloadend=function(e){var i=btoa(e.target.result||"");t({__local_forage_encoded_blob:!0,data:i,type:n.type})},i.readAsBinaryString(n)})));var n})):e})).then((function(e){A(i._dbInfo,g,(function(o,a){if(o)return r(o);try{var u=a.objectStore(i._dbInfo.storeName);null===e&&(e=void 0);var c=u.put(e,t);a.oncomplete=function(){void 0===e&&(e=null),n(e)},a.onabort=a.onerror=function(){var t=c.error?c.error:c.transaction.error;r(t)}}catch(t){r(t)}}))})).catch(r)}));return u(r,n),r},removeItem:function(t,e){var n=this;t=s(t);var i=new a((function(e,i){n.ready().then((function(){A(n._dbInfo,g,(function(r,o){if(r)return i(r);try{var a=o.objectStore(n._dbInfo.storeName).delete(t);o.oncomplete=function(){e()},o.onerror=function(){i(a.error)},o.onabort=function(){var t=a.error?a.error:a.transaction.error;i(t)}}catch(t){i(t)}}))})).catch(i)}));return u(i,e),i},clear:function(t){var e=this,n=new a((function(t,n){e.ready().then((function(){A(e._dbInfo,g,(function(i,r){if(i)return n(i);try{var o=r.objectStore(e._dbInfo.storeName).clear();r.oncomplete=function(){t()},r.onabort=r.onerror=function(){var t=o.error?o.error:o.transaction.error;n(t)}}catch(t){n(t)}}))})).catch(n)}));return u(n,t),n},length:function(t){var e=this,n=new a((function(t,n){e.ready().then((function(){A(e._dbInfo,p,(function(i,r){if(i)return n(i);try{var o=r.objectStore(e._dbInfo.storeName).count();o.onsuccess=function(){t(o.result)},o.onerror=function(){n(o.error)}}catch(t){n(t)}}))})).catch(n)}));return u(n,t),n},key:function(t,e){var n=this,i=new a((function(e,i){t<0?e(null):n.ready().then((function(){A(n._dbInfo,p,(function(r,o){if(r)return i(r);try{var a=o.objectStore(n._dbInfo.storeName),u=!1,c=a.openKeyCursor();c.onsuccess=function(){var n=c.result;n?0===t||u?e(n.key):(u=!0,n.advance(t)):e(null)},c.onerror=function(){i(c.error)}}catch(t){i(t)}}))})).catch(i)}));return u(i,e),i},keys:function(t){var e=this,n=new a((function(t,n){e.ready().then((function(){A(e._dbInfo,p,(function(i,r){if(i)return n(i);try{var o=r.objectStore(e._dbInfo.storeName).openKeyCursor(),a=[];o.onsuccess=function(){var e=o.result;e?(a.push(e.key),e.continue()):t(a)},o.onerror=function(){n(o.error)}}catch(t){n(t)}}))})).catch(n)}));return u(n,t),n},dropInstance:function(t,e){e=l.apply(this,arguments);var n,i=this.config();if((t="function"!=typeof t&&t||{}).name||(t.name=t.name||i.name,t.storeName=t.storeName||i.storeName),t.name){var o=t.name===i.name&&this._dbInfo.db?a.resolve(this._dbInfo.db):S(t).then((function(e){var n=h[t.name],i=n.forages;n.db=e;for(var r=0;r<i.length;r++)i[r]._dbInfo.db=e;return e}));n=t.storeName?o.then((function(e){if(e.objectStoreNames.contains(t.storeName)){var n=e.version+1;b(t);var i=h[t.name],o=i.forages;e.close();for(var u=0;u<o.length;u++){var c=o[u];c._dbInfo.db=null,c._dbInfo.version=n}var s=new a((function(e,i){var o=r.open(t.name,n);o.onerror=function(t){o.result.close(),i(t)},o.onupgradeneeded=function(){o.result.deleteObjectStore(t.storeName)},o.onsuccess=function(){var t=o.result;t.close(),e(t)}}));return s.then((function(t){i.db=t;for(var e=0;e<o.length;e++){var n=o[e];n._dbInfo.db=t,m(n._dbInfo)}})).catch((function(e){throw(w(t,e)||a.resolve()).catch((function(){})),e}))}})):o.then((function(e){b(t);var n=h[t.name],i=n.forages;e.close();for(var o=0;o<i.length;o++)i[o]._dbInfo.db=null;var u=new a((function(e,n){var i=r.deleteDatabase(t.name);i.onerror=function(){var t=i.result;t&&t.close(),n(i.error)},i.onblocked=function(){console.warn('dropInstance blocked for database "'+t.name+'" until all open connections are closed')},i.onsuccess=function(){var t=i.result;t&&t.close(),e(t)}}));return u.then((function(t){n.db=t;for(var e=0;e<i.length;e++)m(i[e]._dbInfo)})).catch((function(e){throw(w(t,e)||a.resolve()).catch((function(){})),e}))}))}else n=a.reject("Invalid arguments");return u(n,e),n}};var R="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",C=/^~~local_forage_type~([^~]+)~/,I="__lfsc__:",j="arbf",P="blob",z="si08",D="ui08",V="uic8",L="si16",B="si32",F="ur16",G="ui32",U="fl32",K="fl64",Q=Object.prototype.toString;function H(t){var e,n,i,r,o,a=.75*t.length,u=t.length,c=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var s=new ArrayBuffer(a),l=new Uint8Array(s);for(e=0;e<u;e+=4)n=R.indexOf(t[e]),i=R.indexOf(t[e+1]),r=R.indexOf(t[e+2]),o=R.indexOf(t[e+3]),l[c++]=n<<2|i>>4,l[c++]=(15&i)<<4|r>>2,l[c++]=(3&r)<<6|63&o;return s}function $(t){var e,n=new Uint8Array(t),i="";for(e=0;e<n.length;e+=3)i+=R[n[e]>>2],i+=R[(3&n[e])<<4|n[e+1]>>4],i+=R[(15&n[e+1])<<2|n[e+2]>>6],i+=R[63&n[e+2]];return n.length%3==2?i=i.substring(0,i.length-1)+"=":n.length%3==1&&(i=i.substring(0,i.length-2)+"=="),i}var q={serialize:function(t,e){var n="";if(t&&(n=Q.call(t)),t&&("[object ArrayBuffer]"===n||t.buffer&&"[object ArrayBuffer]"===Q.call(t.buffer))){var i,r=I;t instanceof ArrayBuffer?(i=t,r+=j):(i=t.buffer,"[object Int8Array]"===n?r+=z:"[object Uint8Array]"===n?r+=D:"[object Uint8ClampedArray]"===n?r+=V:"[object Int16Array]"===n?r+=L:"[object Uint16Array]"===n?r+=F:"[object Int32Array]"===n?r+=B:"[object Uint32Array]"===n?r+=G:"[object Float32Array]"===n?r+=U:"[object Float64Array]"===n?r+=K:e(new Error("Failed to get type for BinaryArray"))),e(r+$(i))}else if("[object Blob]"===n){var o=new FileReader;o.onload=function(){var n="~~local_forage_type~"+t.type+"~"+$(this.result);e(I+P+n)},o.readAsArrayBuffer(t)}else try{e(JSON.stringify(t))}catch(n){console.error("Couldn't convert value into a JSON string: ",t),e(null,n)}},deserialize:function(t){if(t.substring(0,9)!==I)return JSON.parse(t);var e,n=t.substring(13),i=t.substring(9,13);if(i===P&&C.test(n)){var r=n.match(C);e=r[1],n=n.substring(r[0].length)}var a=H(n);switch(i){case j:return a;case P:return o([a],{type:e});case z:return new Int8Array(a);case D:return new Uint8Array(a);case V:return new Uint8ClampedArray(a);case L:return new Int16Array(a);case F:return new Uint16Array(a);case B:return new Int32Array(a);case G:return new Uint32Array(a);case U:return new Float32Array(a);case K:return new Float64Array(a);default:throw new Error("Unkown type: "+i)}},stringToBuffer:H,bufferToString:$};function Y(t,e,n,i){t.executeSql("CREATE TABLE IF NOT EXISTS "+e.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],n,i)}function W(t,e,n,i,r,o){t.executeSql(n,i,r,(function(t,a){a.code===a.SYNTAX_ERR?t.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?",[e.storeName],(function(t,u){u.rows.length?o(t,a):Y(t,e,(function(){t.executeSql(n,i,r,o)}),o)}),o):o(t,a)}),o)}function X(t,e,n,i){var r=this;t=s(t);var o=new a((function(o,a){r.ready().then((function(){void 0===e&&(e=null);var u=e,c=r._dbInfo;c.serializer.serialize(e,(function(e,s){s?a(s):c.db.transaction((function(n){W(n,c,"INSERT OR REPLACE INTO "+c.storeName+" (key, value) VALUES (?, ?)",[t,e],(function(){o(u)}),(function(t,e){a(e)}))}),(function(e){if(e.code===e.QUOTA_ERR){if(i>0)return void o(X.apply(r,[t,u,n,i-1]));a(e)}}))}))})).catch(a)}));return u(o,n),o}var J={_driver:"webSQLStorage",_initStorage:function(t){var e=this,n={db:null};if(t)for(var i in t)n[i]="string"!=typeof t[i]?t[i].toString():t[i];var r=new a((function(t,i){try{n.db=openDatabase(n.name,String(n.version),n.description,n.size)}catch(t){return i(t)}n.db.transaction((function(r){Y(r,n,(function(){e._dbInfo=n,t()}),(function(t,e){i(e)}))}),i)}));return n.serializer=q,r},_support:"function"==typeof openDatabase,iterate:function(t,e){var n=this,i=new a((function(e,i){n.ready().then((function(){var r=n._dbInfo;r.db.transaction((function(n){W(n,r,"SELECT * FROM "+r.storeName,[],(function(n,i){for(var o=i.rows,a=o.length,u=0;u<a;u++){var c=o.item(u),s=c.value;if(s&&(s=r.serializer.deserialize(s)),void 0!==(s=t(s,c.key,u+1)))return void e(s)}e()}),(function(t,e){i(e)}))}))})).catch(i)}));return u(i,e),i},getItem:function(t,e){var n=this;t=s(t);var i=new a((function(e,i){n.ready().then((function(){var r=n._dbInfo;r.db.transaction((function(n){W(n,r,"SELECT * FROM "+r.storeName+" WHERE key = ? LIMIT 1",[t],(function(t,n){var i=n.rows.length?n.rows.item(0).value:null;i&&(i=r.serializer.deserialize(i)),e(i)}),(function(t,e){i(e)}))}))})).catch(i)}));return u(i,e),i},setItem:function(t,e,n){return X.apply(this,[t,e,n,1])},removeItem:function(t,e){var n=this;t=s(t);var i=new a((function(e,i){n.ready().then((function(){var r=n._dbInfo;r.db.transaction((function(n){W(n,r,"DELETE FROM "+r.storeName+" WHERE key = ?",[t],(function(){e()}),(function(t,e){i(e)}))}))})).catch(i)}));return u(i,e),i},clear:function(t){var e=this,n=new a((function(t,n){e.ready().then((function(){var i=e._dbInfo;i.db.transaction((function(e){W(e,i,"DELETE FROM "+i.storeName,[],(function(){t()}),(function(t,e){n(e)}))}))})).catch(n)}));return u(n,t),n},length:function(t){var e=this,n=new a((function(t,n){e.ready().then((function(){var i=e._dbInfo;i.db.transaction((function(e){W(e,i,"SELECT COUNT(key) as c FROM "+i.storeName,[],(function(e,n){var i=n.rows.item(0).c;t(i)}),(function(t,e){n(e)}))}))})).catch(n)}));return u(n,t),n},key:function(t,e){var n=this,i=new a((function(e,i){n.ready().then((function(){var r=n._dbInfo;r.db.transaction((function(n){W(n,r,"SELECT key FROM "+r.storeName+" WHERE id = ? LIMIT 1",[t+1],(function(t,n){var i=n.rows.length?n.rows.item(0).key:null;e(i)}),(function(t,e){i(e)}))}))})).catch(i)}));return u(i,e),i},keys:function(t){var e=this,n=new a((function(t,n){e.ready().then((function(){var i=e._dbInfo;i.db.transaction((function(e){W(e,i,"SELECT key FROM "+i.storeName,[],(function(e,n){for(var i=[],r=0;r<n.rows.length;r++)i.push(n.rows.item(r).key);t(i)}),(function(t,e){n(e)}))}))})).catch(n)}));return u(n,t),n},dropInstance:function(t,e){e=l.apply(this,arguments);var n=this.config();(t="function"!=typeof t&&t||{}).name||(t.name=t.name||n.name,t.storeName=t.storeName||n.storeName);var i,r=this;return u(i=t.name?new a((function(e){var i;i=t.name===n.name?r._dbInfo.db:openDatabase(t.name,"","",0),t.storeName?e({db:i,storeNames:[t.storeName]}):e(function(t){return new a((function(e,n){t.transaction((function(i){i.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",[],(function(n,i){for(var r=[],o=0;o<i.rows.length;o++)r.push(i.rows.item(o).name);e({db:t,storeNames:r})}),(function(t,e){n(e)}))}),(function(t){n(t)}))}))}(i))})).then((function(t){return new a((function(e,n){t.db.transaction((function(i){function r(t){return new a((function(e,n){i.executeSql("DROP TABLE IF EXISTS "+t,[],(function(){e()}),(function(t,e){n(e)}))}))}for(var o=[],u=0,c=t.storeNames.length;u<c;u++)o.push(r(t.storeNames[u]));a.all(o).then((function(){e()})).catch((function(t){n(t)}))}),(function(t){n(t)}))}))})):a.reject("Invalid arguments"),e),i}};function Z(t,e){var n=t.name+"/";return t.storeName!==e.storeName&&(n+=t.storeName+"/"),n}function tt(){return!function(){var t="_localforage_support_test";try{return localStorage.setItem(t,!0),localStorage.removeItem(t),!1}catch(t){return!0}}()||localStorage.length>0}var et={_driver:"localStorageWrapper",_initStorage:function(t){var e={};if(t)for(var n in t)e[n]=t[n];return e.keyPrefix=Z(t,this._defaultConfig),tt()?(this._dbInfo=e,e.serializer=q,a.resolve()):a.reject()},_support:function(){try{return"undefined"!=typeof localStorage&&"setItem"in localStorage&&!!localStorage.setItem}catch(t){return!1}}(),iterate:function(t,e){var n=this,i=n.ready().then((function(){for(var e=n._dbInfo,i=e.keyPrefix,r=i.length,o=localStorage.length,a=1,u=0;u<o;u++){var c=localStorage.key(u);if(0===c.indexOf(i)){var s=localStorage.getItem(c);if(s&&(s=e.serializer.deserialize(s)),void 0!==(s=t(s,c.substring(r),a++)))return s}}}));return u(i,e),i},getItem:function(t,e){var n=this;t=s(t);var i=n.ready().then((function(){var e=n._dbInfo,i=localStorage.getItem(e.keyPrefix+t);return i&&(i=e.serializer.deserialize(i)),i}));return u(i,e),i},setItem:function(t,e,n){var i=this;t=s(t);var r=i.ready().then((function(){void 0===e&&(e=null);var n=e;return new a((function(r,o){var a=i._dbInfo;a.serializer.serialize(e,(function(e,i){if(i)o(i);else try{localStorage.setItem(a.keyPrefix+t,e),r(n)}catch(t){"QuotaExceededError"!==t.name&&"NS_ERROR_DOM_QUOTA_REACHED"!==t.name||o(t),o(t)}}))}))}));return u(r,n),r},removeItem:function(t,e){var n=this;t=s(t);var i=n.ready().then((function(){var e=n._dbInfo;localStorage.removeItem(e.keyPrefix+t)}));return u(i,e),i},clear:function(t){var e=this,n=e.ready().then((function(){for(var t=e._dbInfo.keyPrefix,n=localStorage.length-1;n>=0;n--){var i=localStorage.key(n);0===i.indexOf(t)&&localStorage.removeItem(i)}}));return u(n,t),n},length:function(t){var e=this.keys().then((function(t){return t.length}));return u(e,t),e},key:function(t,e){var n=this,i=n.ready().then((function(){var e,i=n._dbInfo;try{e=localStorage.key(t)}catch(t){e=null}return e&&(e=e.substring(i.keyPrefix.length)),e}));return u(i,e),i},keys:function(t){var e=this,n=e.ready().then((function(){for(var t=e._dbInfo,n=localStorage.length,i=[],r=0;r<n;r++){var o=localStorage.key(r);0===o.indexOf(t.keyPrefix)&&i.push(o.substring(t.keyPrefix.length))}return i}));return u(n,t),n},dropInstance:function(t,e){if(e=l.apply(this,arguments),!(t="function"!=typeof t&&t||{}).name){var n=this.config();t.name=t.name||n.name,t.storeName=t.storeName||n.storeName}var i,r=this;return i=t.name?new a((function(e){t.storeName?e(Z(t,r._defaultConfig)):e(t.name+"/")})).then((function(t){for(var e=localStorage.length-1;e>=0;e--){var n=localStorage.key(e);0===n.indexOf(t)&&localStorage.removeItem(n)}})):a.reject("Invalid arguments"),u(i,e),i}},nt=function(t,e){for(var n=t.length,i=0;i<n;){if((r=t[i])===(o=e)||"number"==typeof r&&"number"==typeof o&&isNaN(r)&&isNaN(o))return!0;i++}var r,o;return!1},it=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)},rt={},ot={},at={INDEXEDDB:O,WEBSQL:J,LOCALSTORAGE:et},ut=[at.INDEXEDDB._driver,at.WEBSQL._driver,at.LOCALSTORAGE._driver],ct=["dropInstance"],st=["clear","getItem","iterate","key","keys","length","removeItem","setItem"].concat(ct),lt={description:"",driver:ut.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1};function dt(t,e){t[e]=function(){var n=arguments;return t.ready().then((function(){return t[e].apply(t,n)}))}}function ft(){for(var t=1;t<arguments.length;t++){var e=arguments[t];if(e)for(var n in e)e.hasOwnProperty(n)&&(it(e[n])?arguments[0][n]=e[n].slice():arguments[0][n]=e[n])}return arguments[0]}var ht=function(){function t(e){for(var n in function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),at)if(at.hasOwnProperty(n)){var i=at[n],r=i._driver;this[n]=r,rt[r]||this.defineDriver(i)}this._defaultConfig=ft({},lt),this._config=ft({},this._defaultConfig,e),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch((function(){}))}return t.prototype.config=function(t){if("object"===(void 0===t?"undefined":i(t))){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var e in t){if("storeName"===e&&(t[e]=t[e].replace(/\W/g,"_")),"version"===e&&"number"!=typeof t[e])return new Error("Database version must be a number.");this._config[e]=t[e]}return!("driver"in t)||!t.driver||this.setDriver(this._config.driver)}return"string"==typeof t?this._config[t]:this._config},t.prototype.defineDriver=function(t,e,n){var i=new a((function(e,n){try{var i=t._driver,r=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");if(!t._driver)return void n(r);for(var o=st.concat("_initStorage"),c=0,s=o.length;c<s;c++){var l=o[c];if((!nt(ct,l)||t[l])&&"function"!=typeof t[l])return void n(r)}!function(){for(var e=function(t){return function(){var e=new Error("Method "+t+" is not implemented by the current driver"),n=a.reject(e);return u(n,arguments[arguments.length-1]),n}},n=0,i=ct.length;n<i;n++){var r=ct[n];t[r]||(t[r]=e(r))}}();var d=function(n){rt[i]&&console.info("Redefining LocalForage driver: "+i),rt[i]=t,ot[i]=n,e()};"_support"in t?t._support&&"function"==typeof t._support?t._support().then(d,n):d(!!t._support):d(!0)}catch(t){n(t)}}));return c(i,e,n),i},t.prototype.driver=function(){return this._driver||null},t.prototype.getDriver=function(t,e,n){var i=rt[t]?a.resolve(rt[t]):a.reject(new Error("Driver not found."));return c(i,e,n),i},t.prototype.getSerializer=function(t){var e=a.resolve(q);return c(e,t),e},t.prototype.ready=function(t){var e=this,n=e._driverSet.then((function(){return null===e._ready&&(e._ready=e._initDriver()),e._ready}));return c(n,t,t),n},t.prototype.setDriver=function(t,e,n){var i=this;it(t)||(t=[t]);var r=this._getSupportedDrivers(t);function o(){i._config.driver=i.driver()}function u(t){return i._extend(t),o(),i._ready=i._initStorage(i._config),i._ready}var s=null!==this._driverSet?this._driverSet.catch((function(){return a.resolve()})):a.resolve();return this._driverSet=s.then((function(){var t=r[0];return i._dbInfo=null,i._ready=null,i.getDriver(t).then((function(t){i._driver=t._driver,o(),i._wrapLibraryMethodsWithReady(),i._initDriver=function(t){return function(){var e=0;return function n(){for(;e<t.length;){var r=t[e];return e++,i._dbInfo=null,i._ready=null,i.getDriver(r).then(u).catch(n)}o();var c=new Error("No available storage method found.");return i._driverSet=a.reject(c),i._driverSet}()}}(r)}))})).catch((function(){o();var t=new Error("No available storage method found.");return i._driverSet=a.reject(t),i._driverSet})),c(this._driverSet,e,n),this._driverSet},t.prototype.supports=function(t){return!!ot[t]},t.prototype._extend=function(t){ft(this,t)},t.prototype._getSupportedDrivers=function(t){for(var e=[],n=0,i=t.length;n<i;n++){var r=t[n];this.supports(r)&&e.push(r)}return e},t.prototype._wrapLibraryMethodsWithReady=function(){for(var t=0,e=st.length;t<e;t++)dt(this,st[t])},t.prototype.createInstance=function(e){return new t(e)},t}(),vt=new ht;e.exports=vt},{3:3}]},{},[4])(4)},9753:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.svgSetIdx_RectNodeAttribute=e.svgInteractive_RectCenterAttribute=e.svgInteractive_LineAttribute=e.svgSelect_RectNodeAttribute=e.svgDesign_RectCenterAttribute=e.svgDesign_RectAttribute=e.svgDesign_LineAttribute=e.svgCreate_RectCenterAttribute=void 0,e.svgCreate_RectCenterAttribute={fill:"transparent",stroke:"#129bff",strokeWidth:1},e.svgDesign_LineAttribute={stroke:"#5F6CE1",strokeWidth:1,strokeLinecap:"round",strokeDasharrays:[4,2,1,2]},e.svgDesign_RectAttribute={fill:"#FFFFFF",stroke:"#5F6CE1",strokeWidth:1,width:7,height:7},e.svgDesign_RectCenterAttribute={fill:"transparent",stroke:"transparent",strokeWidth:1},e.svgSelect_RectNodeAttribute={fill:"none",stroke:"#5F6CE1",strokeWidth:1},e.svgInteractive_LineAttribute={stroke:"#129bff",strokeWidth:1,strokeLinecap:"round",strokeDasharray:8},e.svgInteractive_RectCenterAttribute={fill:"transparent"},e.svgSetIdx_RectNodeAttribute={fill:"none",stroke:"#999",strokeWidth:1,strokeDasharray:2}},9922:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Adapter_Map_PathD_Matrix=e.icdt_Adapter_extract_matrix=e.icdt_Adapter_Ratios_2_PolygonPoints=e.icdt_Adapter_Points_2_Ratios=e.icdt_Adapter_Points_Extract_MinMaxXY=e.icdt_Adapter_PolygonPoints_2_Points=e.icdt_Adapter_RatioMaps_2_PathD=e.icdt_Adapter_PointMaps_2_RatioMaps=e.icdt_Adapter_PointMaps_Extract_MinMaxXY=e.icdt_Adapter_PointMaps_2_PathD=e.icdt_Adapter_PathD_2_PointMaps=void 0;var i=n(5877);e.icdt_Adapter_PathD_2_PointMaps=function(t){var e;return null===(e=t.split(/(?=[MLCSQTAHVZmlcsqtahvz])/))||void 0===e?void 0:e.map((function(t){var e,n={type:t.substring(0,1)},r=(e=t.replace(/\s?\-?[0-9\.]+e-[0-9]+/g," 0").replace(/\,/g," ").replace(/\s?\-/g," -").replace(/(\.[0-9]+)(\.[0-9]+)/g,"$1 0$2").replace(/\-\./g,"-0.").replace(/[^0-9\.\-]/g," ").replace(/\s+/g," ").trim())?e.split(/\s/).map((function(t){return(0,i.icdt_RoundNumber)(parseFloat(t),1e6)})):[];return r.length&&(n.points=r),n}))},e.icdt_Adapter_PointMaps_2_PathD=function(t){return t.map((function(t){var e,n;return"".concat(t.type).concat(null!==(n=null===(e=t.points)||void 0===e?void 0:e.join(" "))&&void 0!==n?n:"")})).join("")},e.icdt_Adapter_PointMaps_Extract_MinMaxXY=function(t){var e=[],n=[],i=[],r=[];return t.forEach((function(t){var o,a,u,c,s,l,d,f;switch(["M","L","C","S","Q","T"].includes(t.type)&&t.points&&t.points.forEach((function(t,i){i%2==0?e.push(t):n.push(t)})),t.type){case"A":7==(null===(o=t.points)||void 0===o?void 0:o.length)&&(i.push(t.points[5]),r.push(t.points[6]));break;case"H":(null===(a=t.points)||void 0===a?void 0:a.length)&&(e.push(t.points[0]),i.push(t.points[0]));break;case"V":(null===(u=t.points)||void 0===u?void 0:u.length)&&(n.push(t.points[0]),r.push(t.points[0]));break;case"a":if(7==(null===(c=t.points)||void 0===c?void 0:c.length)){var h=e[e.length-1];e.push(h+t.points[5]),i.push(h+t.points[5]);var v=n[n.length-1];n.push(v+t.points[6]),r.push(v+t.points[6])}break;case"h":if(null===(s=t.points)||void 0===s?void 0:s.length){var p=e[e.length-1];e.push(p+t.points[0]),i.push(p+t.points[0])}break;case"v":(null===(l=t.points)||void 0===l?void 0:l.length)&&(p=n[n.length-1],n.push(p+t.points[0]),r.push(p+t.points[0]));break;case"M":case"L":case"C":case"S":case"Q":case"T":null===(d=t.points)||void 0===d||d.forEach((function(t,e){e%2==0?i.push(t):r.push(t)}));break;case"m":case"l":case"c":case"s":case"q":case"t":null===(f=t.points)||void 0===f||f.forEach((function(t,o){if(o%2==0){var a=e[e.length-1];e.push(a+t),i.push(a+t)}else a=n[n.length-1],n.push(a+t),r.push(a+t)}))}})),{minX:Math.min.apply(null,i),minY:Math.min.apply(null,r),maxX:Math.max.apply(null,i),maxY:Math.max.apply(null,r)}},e.icdt_Adapter_PointMaps_2_RatioMaps=function(t,e){return e.map((function(e){var n,r,o,a,u,c,s,l,d=[];switch(e.type){case"a":7==(null===(n=e.points)||void 0===n?void 0:n.length)&&d.push([(0,i.icdt_RoundNumber)(e.points[0]/t.width,1e6),(0,i.icdt_RoundNumber)(e.points[1]/t.height,1e6),e.points[2],e.points[3],e.points[4],(0,i.icdt_RoundNumber)(e.points[5]/t.width,1e6),(0,i.icdt_RoundNumber)(e.points[6]/t.height,1e6)]);break;case"A":7==(null===(r=e.points)||void 0===r?void 0:r.length)&&d.push([(0,i.icdt_RoundNumber)(e.points[0]/t.width,1e6),(0,i.icdt_RoundNumber)(e.points[1]/t.height,1e6),e.points[2],e.points[3],e.points[4],(0,i.icdt_RoundNumber)((e.points[5]-t.x)/t.width,1e6),(0,i.icdt_RoundNumber)((e.points[6]-t.y)/t.height,1e6)]);break;case"h":(null===(o=e.points)||void 0===o?void 0:o.length)&&d.push([(0,i.icdt_RoundNumber)(e.points[0]/t.width,1e6)]);break;case"H":(null===(a=e.points)||void 0===a?void 0:a.length)&&d.push([(0,i.icdt_RoundNumber)((e.points[0]-t.x)/t.width,1e6)]);break;case"v":(null===(u=e.points)||void 0===u?void 0:u.length)&&d.push([(0,i.icdt_RoundNumber)(e.points[0]/t.height,1e6)]);break;case"V":(null===(c=e.points)||void 0===c?void 0:c.length)&&d.push([(0,i.icdt_RoundNumber)((e.points[0]-t.y)/t.height,1e6)]);break;case"z":case"Z":break;case"M":case"L":case"C":case"S":case"Q":case"T":if(null===(s=e.points)||void 0===s?void 0:s.length)for(var f=0,h=e.points.length-1;f<h;f+=2)d.push([(0,i.icdt_RoundNumber)((e.points[f]-t.x)/t.width,1e6),(0,i.icdt_RoundNumber)((e.points[f+1]-t.y)/t.height,1e6)]);break;case"m":case"l":case"c":case"s":case"q":case"t":if(null===(l=e.points)||void 0===l?void 0:l.length)for(f=0,h=e.points.length-1;f<h;f+=2)d.push([(0,i.icdt_RoundNumber)(e.points[f]/t.width,1e6),(0,i.icdt_RoundNumber)(e.points[f+1]/t.height,1e6)])}return d.length?{type:e.type,ratios:d}:{type:e.type}}))},e.icdt_Adapter_RatioMaps_2_PathD=function(t,e){return e.map((function(e){var n,r,o,a,u,c,s,l,d,f,h,v,p,g,y,_,b,m,w,x,S,M,E,k,T,N,A,O;switch(e.type){case"a":return"".concat(e.type).concat(null!==(a=null===(o=null===(r=null===(n=e.ratios)||void 0===n?void 0:n.map((function(e){var n,r,o,a,u,c,s;return[(0,i.icdt_RoundNumber)(t.width*(null!==(n=e[0])&&void 0!==n?n:0),1e6),(0,i.icdt_RoundNumber)(t.height*(null!==(r=e[1])&&void 0!==r?r:0),1e6),null!==(o=e[2])&&void 0!==o?o:0,null!==(a=e[3])&&void 0!==a?a:0,null!==(u=e[4])&&void 0!==u?u:0,(0,i.icdt_RoundNumber)(t.width*(null!==(c=e[5])&&void 0!==c?c:0),1e6),(0,i.icdt_RoundNumber)(t.height*(null!==(s=e[6])&&void 0!==s?s:0),1e6)]})))||void 0===r?void 0:r.map((function(t){return t.join(" ")})))||void 0===o?void 0:o.join(" "))&&void 0!==a?a:"");case"A":return"".concat(e.type).concat(null!==(l=null===(s=null===(c=null===(u=e.ratios)||void 0===u?void 0:u.map((function(e){var n,r,o,a,u,c,s;return[(0,i.icdt_RoundNumber)(t.width*(null!==(n=e[0])&&void 0!==n?n:0),1e6),(0,i.icdt_RoundNumber)(t.height*(null!==(r=e[1])&&void 0!==r?r:0),1e6),null!==(o=e[2])&&void 0!==o?o:0,null!==(a=e[3])&&void 0!==a?a:0,null!==(u=e[4])&&void 0!==u?u:0,(0,i.icdt_RoundNumber)(t.x+t.width*(null!==(c=e[5])&&void 0!==c?c:0),1e6),(0,i.icdt_RoundNumber)(t.y+t.height*(null!==(s=e[6])&&void 0!==s?s:0),1e6)]})))||void 0===c?void 0:c.map((function(t){return t.join(" ")})))||void 0===s?void 0:s.join(" "))&&void 0!==l?l:"");case"h":return"".concat(e.type).concat(null!==(h=null===(f=null===(d=e.ratios)||void 0===d?void 0:d.map((function(e){var n;return(0,i.icdt_RoundNumber)(t.width*(null!==(n=e[0])&&void 0!==n?n:0),1e6)})))||void 0===f?void 0:f.join(" "))&&void 0!==h?h:"");case"H":return"".concat(e.type).concat(null!==(g=null===(p=null===(v=e.ratios)||void 0===v?void 0:v.map((function(e){var n;return(0,i.icdt_RoundNumber)(t.x+t.width*(null!==(n=e[0])&&void 0!==n?n:0),1e6)})))||void 0===p?void 0:p.join(" "))&&void 0!==g?g:"");case"v":return"".concat(e.type).concat(null!==(b=null===(_=null===(y=e.ratios)||void 0===y?void 0:y.map((function(e){var n;return(0,i.icdt_RoundNumber)(t.height*(null!==(n=e[0])&&void 0!==n?n:0),1e6)})))||void 0===_?void 0:_.join(" "))&&void 0!==b?b:"");case"V":return"".concat(e.type).concat(null!==(x=null===(w=null===(m=e.ratios)||void 0===m?void 0:m.map((function(e){var n;return(0,i.icdt_RoundNumber)(t.y+t.height*(null!==(n=e[0])&&void 0!==n?n:0),1e6)})))||void 0===w?void 0:w.join(" "))&&void 0!==x?x:"");case"z":case"Z":return e.type;case"M":case"L":case"C":case"S":case"Q":case"T":return"".concat(e.type).concat(null!==(k=null===(E=null===(M=null===(S=e.ratios)||void 0===S?void 0:S.map((function(e){var n,r;return[(0,i.icdt_RoundNumber)(t.x+t.width*(null!==(n=e[0])&&void 0!==n?n:0),1e6),(0,i.icdt_RoundNumber)(t.y+t.height*(null!==(r=e[1])&&void 0!==r?r:0),1e6)]})))||void 0===M?void 0:M.map((function(t){return t.join(" ")})))||void 0===E?void 0:E.join(" "))&&void 0!==k?k:"");case"m":case"l":case"c":case"s":case"q":case"t":return"".concat(e.type).concat(null!==(O=null===(A=null===(N=null===(T=e.ratios)||void 0===T?void 0:T.map((function(e){var n,r;return[(0,i.icdt_RoundNumber)(t.width*(null!==(n=e[0])&&void 0!==n?n:0),1e6),(0,i.icdt_RoundNumber)(t.height*(null!==(r=e[1])&&void 0!==r?r:0),1e6)]})))||void 0===N?void 0:N.map((function(t){return t.join(" ")})))||void 0===A?void 0:A.join(" "))&&void 0!==O?O:"");default:return""}})).join("")},e.icdt_Adapter_PolygonPoints_2_Points=function(t){return(e=t.replace(/\,/g," ").replace(/\-/g," -").replace(/[^0-9\.\-]/g," ").replace(/\s+/g," ").trim())?e.split(/\s/).map((function(t){return parseFloat(t)})):[];var e},e.icdt_Adapter_Points_Extract_MinMaxXY=function(t){var e=[],n=[];return t.forEach((function(t,i){i%2==0?e.push(t):n.push(t)})),{minX:Math.min.apply(null,e),minY:Math.min.apply(null,n),maxX:Math.max.apply(null,e),maxY:Math.max.apply(null,n)}},e.icdt_Adapter_Points_2_Ratios=function(t,e){for(var n=[],i=0,r=e.length-1;i<r;i+=2)n.push([(e[i]-t.x)/t.width,(e[i+1]-t.y)/t.height]);return n},e.icdt_Adapter_Ratios_2_PolygonPoints=function(t,e){return e.map((function(e){return[(0,i.icdt_RoundNumber)(t.x+t.width*e[0],1e6),(0,i.icdt_RoundNumber)(t.y+t.height*e[1],1e6)]})).map((function(t){return t.join(" ")})).join(" ")},e.icdt_Adapter_extract_matrix=function(t){var e=t.replace(/\s?\-?[0-9\.]+e-[0-9]+/g," 0").replace(/\,/g," ").replace(/\s?\-/g," -").replace(/(\.[0-9]+)(\.[0-9]+)/g,"$1 0$2").replace(/\-\./g,"-0.").replace(/[^0-9\.\-]/g," ").replace(/\s+/g," ").trim().split(" ").map((function(t){return(0,i.icdt_RoundNumber)(parseFloat(t),1e6)}));if(6==e.length)return{a:e[0],b:e[1],c:e[2],d:e[3],e:e[4],f:e[5]}},e.icdt_Adapter_Map_PathD_Matrix=function(t,n){var i=(0,e.icdt_Adapter_extract_matrix)(n);return i?window.Snap.path.map(t,new window.Snap.Matrix(i.a,i.b,i.c,i.d,i.e,i.f)).toString():t}},2866:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.extractFromDataV1=e.extractSourceV1=void 0;var i=n(9427),r=n(2121),o=n(2977);e.extractSourceV1=function(t){return a(null==t?void 0:t.url,null==t?void 0:t.path,null==t?void 0:t.src)};var a=function(t,e,n){var r,o,a,u,c;return t&&(a=t.replace(/\\/g,"/")),e&&(u=e.replace(/\\/g,"/")),n&&(c=n.replace(/\\/g,"/")),u&&!a&&(a=(null===(r=i.icdt.config)||void 0===r?void 0:r.readfileuploadurl)+u),!c||u||a||(u=c.replace(/^[a-zA-Z0-9\-\_\/\\\:\.]+(upload|FileUpload|files|readfileupload|filereader|readfile)\//g,""),a=(null===(o=i.icdt.config)||void 0===o?void 0:o.readfileuploadurl)+u),{url:a,path:u,name:(null!=a?a:"").split("/").pop()||(null!=u?u:"").split("/").pop()||""}};e.extractFromDataV1=function(t){var n={x:0,y:0,width:t.screen.w,height:t.screen.h},u=[];return t.data.forEach((function(t,c){var s,l,d,f,h={id:"number"==typeof t.id?t.id:i.icdt.data.newSlideId,code:null===(s=t.id)||void 0===s?void 0:s.toString(),name:"string"==typeof t.id?t.id:"Trang ".concat(c+1),svg:{viewBox:n,nodes:[]},test:(d=t.test2,d?(d.audiotrue&&(d.audiotrue=(0,e.extractSourceV1)({path:d.audiotrue.path})),d.audiofalse&&(d.audiofalse=(0,e.extractSourceV1)({path:d.audiofalse.path})),d.effecttrue&&(d.effecttrue=(0,e.extractSourceV1)({path:d.effecttrue.path})),d.effectfalse&&(d.effectfalse=(0,e.extractSourceV1)({path:d.effectfalse.path})),d.icontrue&&(d.icontrue=(0,e.extractSourceV1)({path:d.icontrue.path})),d.iconfalse&&(d.iconfalse=(0,e.extractSourceV1)({path:d.iconfalse.path})),d):{})};t.background&&h.svg&&(!(f=t.background)||null===f.match(/#([a-zA-Z0-9]+)/)&&null===f.match(/rgb\([0-9]+,[0-9]+,[0-9]+\)/)&&null===f.match(/rgba\([0-9]+,[0-9]+,[0-9]+,[0-9]+\)/)?function(t){return t&&null!==t.match(/data:[^;]+;base64,/)}(t.background)?h.svg.background={base64:t.background}:function(t){return t&&null!==t.match(/http(s)?:\/\//)}(t.background)?h.svg.background=a(t.background):h.svg.background=a(void 0,t.background):h.svg.background={color:t.background}),jQuery(null!==(l=t.svg)&&void 0!==l?l:"").find(".svg-node").each((function(e,n){var i,u,c=jQuery(n).parents(".indexs"),s=c.attr("data-index"),l=c.attr("data-time"),d=null!==(i=n.getAttribute("id"))&&void 0!==i?i:"0",f={id:parseInt(d),code:"".concat(n.nodeName,"-").concat(n.getAttribute("id")),name:n.nodeName,idx:s?parseInt(s):0,time:l?parseFloat(l):0,type:function(){switch(n.nodeName){case"polygon":return r.V_ShapeType.POLYGON;case"circle":return r.V_ShapeType.CIRCLE;case"ellipse":return r.V_ShapeType.ELLIPSE;case"line":return r.V_ShapeType.LINE;case"rect":return r.V_ShapeType.RECT;case"foreignObject":return r.V_ShapeType.FOREIGNOBJECT}return 0}(),size:function(){var t,e,i,r=0,o=0,a=0,u=0,c=null,s=null,l=parseFloat((null===(t=n.getAttribute("transform"))||void 0===t?void 0:t.replace("rotate(","").replace(")",""))||"0")||null;switch(n.nodeName){case"polygon":var d=[],f=[],h=999999999,v=999999999;c=JSON.parse(n.getAttribute("ratios")||"[]"),(s=null!==(i=null===(e=n.getAttribute("points"))||void 0===e?void 0:e.split(",").map((function(t){return t.split(" ").map((function(t){return parseFloat(t)}))})))&&void 0!==i?i:[]).forEach((function(t){d.push(t[0]),f.push(t[1])})),h=Math.min.apply(null,d),v=Math.min.apply(null,f),a=Math.max.apply(null,d)-(r=h),u=Math.max.apply(null,f)-(o=v);break;case"circle":var p=parseFloat(n.getAttribute("cx")||"0"),g=parseFloat(n.getAttribute("cy")||"0"),y=parseFloat(n.getAttribute("r")||"0");r=p-y,o=g-y,a=2*y,u=2*y;break;case"ellipse":var _=parseFloat(n.getAttribute("cx")||"0"),b=parseFloat(n.getAttribute("cy")||"0"),m=parseFloat(n.getAttribute("rx")||"0"),w=parseFloat(n.getAttribute("ry")||"0");r=_-m,o=b-w,a=2*m,u=2*w;break;case"line":var x=parseFloat(n.getAttribute("x1")||"0"),S=parseFloat(n.getAttribute("y1")||"0"),M=parseFloat(n.getAttribute("x2")||"0"),E=parseFloat(n.getAttribute("y2")||"0");h=999999999,v=999999999,h=Math.min(x,M),v=Math.min(S,E),c=[[(x-(r=h))/((a=Math.max(x,M)-r)||1),(S-(o=v))/((u=Math.max(S,E)-o)||1)],[(M-r)/(a||1),(E-o)/(u||1)]];break;case"rect":case"foreignObject":r=parseFloat(n.getAttribute("x")||"0"),o=parseFloat(n.getAttribute("y")||"0"),a=parseFloat(n.getAttribute("width")||"0"),u=parseFloat(n.getAttribute("height")||"0")}return Object.assign({},{x:r,y:o,width:a,height:u,ratios:c,points:s,rotate:l})}(),attribute:function(){var t,e,i,r,o,a,u={};switch(n.nodeName){case"polygon":case"circle":case"ellipse":case"line":case"rect":var c=null!==(t=n.getAttribute("fill"))&&void 0!==t?t:null,s=null!==(e=n.getAttribute("stroke"))&&void 0!==e?e:null,l=null!==(i=parseFloat(n.getAttribute("stroke-width")||"0"))&&void 0!==i?i:null,d=null!==(r=n.getAttribute("stroke-linecap"))&&void 0!==r?r:null,f=null!==(o=n.getAttribute("stroke-linejoin"))&&void 0!==o?o:null,h=null!==(a=parseFloat(n.getAttribute("stroke-dasharray")||"0"))&&void 0!==a?a:null;Object.assign(u,{fill:c,stroke:s,strokeWidth:l,strokeLinecap:d,strokeLinejoin:f,strokeDasharray:h})}return u}(),style:function(){var t,e,i={};switch(n.nodeName){case"polygon":case"circle":case"ellipse":case"line":case"rect":break;case"foreignObject":var r=jQuery(n).find(".svg-container");if(r.length){var a=parseFloat(r.css("border-width")||"0")||null,u=r.css("border-style")||null,c=r.css("border-color")||null,s=null,l=r.css("background-color")||null,d=null;!function(){var t=(0,o.lib_color_extract2HexAlpha)(c),e=t.hex,n=t.alpha;c=e,s=n}(),function(){var t=(0,o.lib_color_extract2HexAlpha)(l),e=t.hex,n=t.alpha;l=e,d=n}(),Object.assign(i,{borderWidth:a,borderStyle:u,borderColor:c,borderOpacity:s,backgroundColor:l,backgroundOpacity:d})}var f=jQuery(n).find(".svg-editor-content");if(f.length){var h=JSON.parse((f.attr("data-style")||"{}").replace(/\&quot\;/gm,'"')),v=(0,o.lib_color_extract2HexAlpha)(h.TextColor),p=v.hex,g=v.alpha;Object.assign(i,{fontFamily:null!==(t=h.FontFamily)&&void 0!==t?t:null,fontSize:null!==(e=h.FontSize)&&void 0!==e?e:null,color:p,opacity:g})}}return i}(),source:function(){var e,i,r,o,u,s,l,f,h,v,p,g,y,_,b,m,w={};switch(n.nodeName){case"polygon":case"circle":case"ellipse":case"line":case"rect":break;case"foreignObject":if(c.hasClass("editors")){var x=jQuery(n).find(".svg-editor-content");if(x.length){var S=null!==(e=(null!=(k=x.html())?k:"").match(/\{[a-zA-Z0-9_]+\}/gm))&&void 0!==e?e:[];Object.assign(w,{type:"html",html:{htmlContent:k,variableKeywords:S}})}}else if(c.hasClass("inputs")||c.hasClass("textareas"))Object.assign(w,{type:"input",input:{input:!!jQuery(n).find("input").length,textarea:!!jQuery(n).find("textarea").length}});else if(c.hasClass("tests")){var M=jQuery(n).find(".svg-test");if(c.hasClass("tests-truefalse"))S=null!==(i=(null!=(k=M.find(".svg-editor-content").html())?k:"").match(/\{[a-zA-Z0-9_]+\}/gm))&&void 0!==i?i:[],Object.assign(w,{type:"test",test:{type:"truefalse",truefalse:{iscorrect:null===(r=t.test2.truefalse)||void 0===r?void 0:r.includes(d)}},html:{htmlContent:k,variableKeywords:S}});else if(c.hasClass("tests-singlechoice"))S=null!==(o=(null!=(k=M.find(".svg-editor-content").html())?k:"").match(/\{[a-zA-Z0-9_]+\}/gm))&&void 0!==o?o:[],Object.assign(w,{type:"test",test:{type:"singlechoice",singlechoice:{iscorrect:null===(u=t.test2.singlechoice)||void 0===u?void 0:u.includes(d)}},html:{htmlContent:k,variableKeywords:S}});else if(c.hasClass("tests-multichoice"))S=null!==(s=(null!=(k=M.find(".svg-editor-content").html())?k:"").match(/\{[a-zA-Z0-9_]+\}/gm))&&void 0!==s?s:[],Object.assign(w,{type:"test",test:{type:"multichoice",multichoice:{iscorrect:null===(l=t.test2.multichoice)||void 0===l?void 0:l.includes(d)}},html:{htmlContent:k,variableKeywords:S}});else if(c.hasClass("tests-fill")){S=null!==(f=(null!=(k=M.find(".svg-editor-content").html())?k:"").match(/\{[a-zA-Z0-9_]+\}/gm))&&void 0!==f?f:[];var E=null!==(h=(null!=k?k:"").match(/\[\[[a-zA-Z0-9]+\]\]/gm))&&void 0!==h?h:[];E=E.filter((function(t,e,n){return n.indexOf(t)==e})),Object.assign(w,{type:"test",test:{type:"fill",fill:E.map((function(e){var n,i,r;return{key:e,value:null===(r=null===(i=null===(n=t.test2.fill)||void 0===n?void 0:n.find((function(t){return t.id==d})))||void 0===i?void 0:i.vals)||void 0===r?void 0:r.map((function(t){return t.text})).filter((function(t){return!["",null,void 0,NaN].includes(t)}))}}))},html:{htmlContent:k,variableKeywords:S,fillKeywords:E}})}else if(c.hasClass("tests-matching")){if(M.hasClass("svg-test-empty"))Object.assign(w,{type:"test",test:{type:"matching-empty",matching:{key:M.attr("data-name")||null}}});else if(M.hasClass("svg-test-content")){var k;S=null!==(v=(null!=(k=M.find(".svg-editor-content").html())?k:"").match(/\{[a-zA-Z0-9_]+\}/gm))&&void 0!==v?v:[],Object.assign(w,{type:"test",test:{type:"matching-content",matching:{key:M.attr("data-name")||null}},html:{htmlContent:k,variableKeywords:S}})}}else if(c.hasClass("tests-speech"))Object.assign(w,{type:"speech",speech:{value:null===(y=null===(g=null===(p=t.test2.speech)||void 0===p?void 0:p.find((function(t){return t.id==d})))||void 0===g?void 0:g.vals)||void 0===y?void 0:y.map((function(t){return t.text})).filter((function(t){return!["",null,void 0,NaN].includes(t)}))}});else if(c.hasClass("tests-submit")){var T=jQuery(n).find(".svg-container img");Object.assign(w,{type:"test",test:{type:"submit"},image:a(T.attr("url"),T.attr("path"),T.attr("src"))})}}else if(c.hasClass("images"))if((T=jQuery(n).find(".svg-editor-content img")).length)Object.assign(w,{type:"image",image:a(T.attr("url"),T.attr("path"),T.attr("src"))});else{var N=jQuery(n).find("iframe");Object.assign(w,{type:"iframe",iframe:a(N.attr("url"),N.attr("path"),N.attr("src"))})}else if(c.hasClass("sounds"))(T=jQuery(n).find(".svg-editor-content img")).length&&Object.assign(w,{type:"image",image:a(T.attr("url"),T.attr("path"),T.attr("src"))});else if(c.hasClass("htmls"))(N=jQuery(n).find("iframe")).length&&Object.assign(w,{type:"iframe",iframe:a(N.attr("url"),N.attr("path"),N.attr("src"))});else if(c.hasClass("svgs")){var A=jQuery(n).find("svg");A.length&&Object.assign(w,{type:"svg",svg:Object.assign(a(A.attr("url"),A.attr("path"),A.attr("src")),{svgContent:null!==(b=null===(_=A.get(0))||void 0===_?void 0:_.outerHTML)&&void 0!==b?b:null})})}else if(c.hasClass("medias")){var O=jQuery(n).find(".media-item");if(O.length)switch(O.attr("type")){case"audio":Object.assign(w,{type:"audio",audio:a(O.attr("url"),O.attr("path"),O.attr("src"))});break;case"video":Object.assign(w,{type:"video",video:a(O.attr("url"),O.attr("path"),O.attr("src"))});break;case"file":Object.assign(w,{type:"file",file:a(O.attr("url"),O.attr("path"),O.attr("src"))});break;default:Object.assign(w,{type:"link",link:{url:null!==(m=O.attr("url"))&&void 0!==m?m:null}})}var R=jQuery(n).find("img");R.length&&(Object.assign(w,{image:a(R.attr("url"),R.attr("path"),R.attr("src"))}),w.type||Object.assign(w,{type:"image"}))}}return w}(),animate:function(){var e,n={},i=null===(e=t.animates)||void 0===e?void 0:e.find((function(t){return t.elementId==d}));return i&&Object.assign(n,{value:i.value}),n}(),interactive:function(){var e={},n=t.actions.show.filter((function(t){return t.elementId==d&&t.active}));n.length&&(e.show={},n.forEach((function(t){var n,i,r,o,u,c,s,l,d,f,h,v,p,g,y,_,b,m,w,x,S,M,E,k=t.source;switch(null==k?void 0:k.type){case"work":e.show.action={},Object.assign(e.show.action,{value:null!==(n=k.value)&&void 0!==n?n:null,iteration:null!==(i=k.iteration)&&void 0!==i?i:null,finish:null!==(r=k.end)&&void 0!==r?r:null,time:null!==(o=k.time)&&void 0!==o?o:null,points:null!==(u=k.points)&&void 0!==u?u:null});break;case"audio":e.show.audio={},Object.assign(e.show.audio,{source:a(null,null,k.url),iteration:null!==(c=k.iteration)&&void 0!==c?c:null,finish:null!==(s=k.end)&&void 0!==s?s:null,time:null!==(l=k.time)&&void 0!==l?l:null,async:-1==k.iteration?"change-slide":"change-node"});break;case"node":case"node2":k.options.includes("show")&&(e.show.triggershow={},Object.assign(e.show.triggershow,{id:null!==(f=parseInt(null!==(d=k.id)&&void 0!==d?d:"0"))&&void 0!==f?f:null,ids:null===(h=k.ids)||void 0===h?void 0:h.map((function(t){return parseInt(t)})),async:null!==(v=k.async)&&void 0!==v?v:null,time:null!==(p=k.time)&&void 0!==p?p:null})),k.options.includes("run")&&(e.show.triggerrun={},Object.assign(e.show.triggerrun,{id:null!==(y=parseInt(null!==(g=k.id)&&void 0!==g?g:"0"))&&void 0!==y?y:null,ids:null===(_=k.ids)||void 0===_?void 0:_.map((function(t){return parseInt(t)})),async:null!==(b=k.async)&&void 0!==b?b:null,time:null!==(m=k.time)&&void 0!==m?m:null})),k.options.includes("hide")&&(e.show.triggerhide={},Object.assign(e.show.triggerhide,{id:null!==(x=parseInt(null!==(w=k.id)&&void 0!==w?w:"0"))&&void 0!==x?x:null,ids:null===(S=k.ids)||void 0===S?void 0:S.map((function(t){return parseInt(t)})),async:null!==(M=k.async)&&void 0!==M?M:null,time:null!==(E=k.time)&&void 0!==E?E:null}))}})));var i=t.actions.click.filter((function(t){return t.elementId==d&&t.active}));return i&&(e.click={},i.forEach((function(t){var n,i,r,o,u,c,s,l,d,f,h,v,p,g,y,_,b,m,w,x,S,M,E,k,T=t.source;switch(null==T?void 0:T.type){case"work":e.click.action={},Object.assign(e.click.action,{value:null!==(n=T.value)&&void 0!==n?n:null,iteration:null!==(i=T.iteration)&&void 0!==i?i:null,finish:null!==(r=T.end)&&void 0!==r?r:null,time:null!==(o=T.time)&&void 0!==o?o:null,points:null!==(u=T.points)&&void 0!==u?u:null});break;case"audio":e.click.audio={},Object.assign(e.click.audio,{source:a(null,null,T.url),iteration:null!==(c=T.iteration)&&void 0!==c?c:null,finish:null!==(s=T.end)&&void 0!==s?s:null,time:null!==(l=T.time)&&void 0!==l?l:null,async:-1==T.iteration?"change-slide":"change-node"});break;case"node":case"node2":T.options.includes("show")&&(e.click.triggershow={},Object.assign(e.click.triggershow,{id:null!==(f=parseInt(null!==(d=T.id)&&void 0!==d?d:"0"))&&void 0!==f?f:null,ids:null===(h=T.ids)||void 0===h?void 0:h.map((function(t){return parseInt(t)})),async:null!==(v=T.async)&&void 0!==v?v:null,time:null!==(p=T.time)&&void 0!==p?p:null})),T.options.includes("run")&&(e.click.triggerrun={},Object.assign(e.click.triggerrun,{id:null!==(y=parseInt(null!==(g=T.id)&&void 0!==g?g:"0"))&&void 0!==y?y:null,ids:null===(_=T.ids)||void 0===_?void 0:_.map((function(t){return parseInt(t)})),async:null!==(b=T.async)&&void 0!==b?b:null,time:null!==(m=T.time)&&void 0!==m?m:null})),T.options.includes("hide")&&(e.click.triggerhide={},Object.assign(e.click.triggerhide,{id:null!==(x=parseInt(null!==(w=T.id)&&void 0!==w?w:"0"))&&void 0!==x?x:null,ids:null===(S=T.ids)||void 0===S?void 0:S.map((function(t){return parseInt(t)})),async:null!==(M=T.async)&&void 0!==M?M:null,time:null!==(E=T.time)&&void 0!==E?E:null}));break;case"slide":e.click.slide={},Object.assign(e.click.slide,{id:parseInt(null!==(k=T.id)&&void 0!==k?k:"0")||T.num||null,code:T.id})}}))),e}(),variable:function(){var e,i,r,o,a,u,c,s={};n.getAttribute("data-variable")&&(s.input={},Object.assign(s.input,{variable:null!==(e=n.getAttribute("data-variable"))&&void 0!==e?e:null}));var l=null===(r=null===(i=t.nodes)||void 0===i?void 0:i.find((function(t){return t.id==d})))||void 0===r?void 0:r.variable;return l&&(s.click={},Object.assign(s.click,{variable:null!==(o=l.variable)&&void 0!==o?o:null,operator:null!==(a=l.operator)&&void 0!==a?a:null,valuetype:null!==(u=l.valuetype)&&void 0!==u?u:null,value:null!==(c=l.value)&&void 0!==c?c:null})),s}()};null===(u=h.svg)||void 0===u||u.nodes.push(f)})),u.push(h)})),{screen:{width:t.screen.w,height:t.screen.h},data:{slides:u},variable:t.variable}}},2977:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.lib_color_extract2HexAlpha=void 0;var i=n(5877),r=/^#[a-fA-F0-9]+$/i,o=/^rgba\((\d+),(\d+),(\d+),(\d+)\)$/i,a=/^rgb\((\d+),(\d+),(\d+)\)$/i;e.lib_color_extract2HexAlpha=function(t){var e=null,n=null;if(t)if("transparent"==t)e="#000000",n=0;else if(t.match(r))e=t;else{var u=(t=t.replace(/\s+/g,"")).match(o);if(u)e="#"+(256|u[1]).toString(16).slice(1)+(256|u[2]).toString(16).slice(1)+(256|u[3]).toString(16).slice(1),n=(0,i.icdt_RoundNumber)(parseFloat(u[4]),100);else{var c=t.match(a);c&&(e="#"+(256|c[1]).toString(16).slice(1)+(256|c[2]).toString(16).slice(1)+(256|c[3]).toString(16).slice(1))}}return{hex:e,alpha:n}}},1380:(t,e)=>{"use strict";function n(t,e,n,i){return Math.sqrt(Math.pow(n-t,2)+Math.pow(i-e,2))}function i(t,e,i,r,o){return n(t,e,i,r)<o?1:0}function r(t,e,n,r,o,a,u){var c=[];return c.push(i(t,e,n,r,u)),c.push(i(t,e,o,a,u)),c.push(function(t,e,n,i,r,o,a){var u=[r-n,o-i],c=[t-n,e-i],s=[-u[1],u[0]],l=Math.sqrt(Math.pow(s[0],2)+Math.pow(s[1],2)),d=[s[0]/l,s[1]/l],f=Math.sqrt(Math.pow(u[0],2)+Math.pow(u[1],2)),h=[u[0]/f,u[1]/f],v=c[0]*h[0]+c[1]*h[1];if(v<=0||v>=f)return 0;var p=c[0]*d[0]+c[1]*d[1];return p>=a||p<=-a?0:1}(t,e,n,r,o,a,u)),c}function o(t,e,n,i,r){var o=[n-t,i-e],a=[-o[1],o[0]],u=Math.sqrt(Math.pow(a[0],2)+Math.pow(a[1],2)),c=[a[0]/u,a[1]/u];return[[t+r*c[0],e+r*c[1]],[t-r*c[0],e-r*c[1]],[n-r*c[0],i-r*c[1]],[n+r*c[0],i+r*c[1]]]}function a(t,e,n,i,r,o,a){var u,c=[r-t,o-e],s=[n-t,i-e],l=Math.sqrt(Math.pow(s[0],2)+Math.pow(s[1],2)),d=[s[0]/l,s[1]/l],f=c[0]*d[0]+c[1]*d[1],h=[t+f*d[0],e+f*d[1]],v=Math.sqrt(Math.pow(r-h[0],2)+Math.pow(o-h[1],2));u=0===v?a:Math.sqrt(Math.pow(a,2)-Math.pow(v,2));var p=[t+f*d[0]+u*d[0],e+f*d[1]+u*d[1]];return p[0]===t&&p[1]===e?null:p}function u(t,e,n,i,r,o,a){var u=[r-t,o-e],c=[n-t,i-e],s=[-c[1],c[0]],l=Math.sqrt(Math.pow(s[0],2)+Math.pow(s[1],2)),h=[s[0]/l,s[1]/l],v=u[0]*h[0]+u[1]*h[1],p=f([t,e],[n,i],[r,o]);if(d([p[0]-r,p[1]-o])>=a)return null;var g=Math.sqrt(Math.pow(a,2)-Math.pow(v,2)),y=[r-v*h[0],o-v*h[1]],_=Math.sqrt(Math.pow(c[0],2)+Math.pow(c[1],2)),b=[c[0]/_,c[1]/_],m=[[y[0]-b[0]*g,y[1]-b[1]*g],[y[0]+b[0]*g,y[1]+b[1]*g]];return m[0][0]===t&&m[0][1]===e?null:m}function c(t,e,n,i,r,o,a,u){var c,s,l,d,f,h;return-(l=a-r)*(s=i-e)+(c=n-t)*(d=u-o)==0?null:(h=(l*(e-o)-d*(t-r))/(-l*s+c*d),(f=(-s*(t-r)+c*(e-o))/(-l*s+c*d))>=0&&f<=1&&h>=0&&h<=1?[t+h*c,e+h*s]:null)}function s(t,e,i,r,s,l,d,f,h,v){var p=o(l,d,f,h,v),g=[];if(i[0]&&!i[1])g.push(a(t,e,r,s,l,d,v)),g.push(c(t,e,r,s,p[0][0],p[0][1],p[3][0],p[3][1])),g.push(c(t,e,r,s,p[1][0],p[1][1],p[2][0],p[2][1])),(y=u(t,e,r,s,f,h,v))&&g.push(y[0],y[1]);else if(!i[0]&&i[1])g.push(a(t,e,r,s,f,h,v)),g.push(c(t,e,r,s,p[0][0],p[0][1],p[3][0],p[3][1])),g.push(c(t,e,r,s,p[1][0],p[1][1],p[2][0],p[2][1])),(y=u(t,e,r,s,l,d,v))&&g.push(y[0],y[1]);else if(i[0]&&i[1])g.push(a(t,e,r,s,l,d,v)),g.push(c(t,e,r,s,p[0][0],p[0][1],p[3][0],p[3][1])),g.push(c(t,e,r,s,p[1][0],p[1][1],p[2][0],p[2][1])),g.push(a(t,e,r,s,f,h,v));else{var y=u(t,e,r,s,f,h,v),_=u(t,e,r,s,l,d,v);y&&g.push(y[0],y[1]),_&&g.push(_[0],_[1]),g.push(c(t,e,r,s,p[0][0],p[0][1],p[3][0],p[3][1])),g.push(c(t,e,r,s,p[1][0],p[1][1],p[2][0],p[2][1]))}for(var b=[t,e],m=0;m<g.length;m++)g[m]&&n(g[m][0],g[m][1],r,s)<n(b[0],b[1],r,s)&&(b=g[m]);return b[0]===t&&b[1]===e?null:b}function l(t,e,i,r,a,s,l,d,f){var h=o(a,s,l,d,f),v=[],p=u(t,e,i,r,a,s,f);p&&v.push(p[0],p[1]),(p=u(t,e,i,r,l,d,f))&&v.push(p[0],p[1]),v.push(c(t,e,i,r,h[0][0],h[0][1],h[3][0],h[3][1])),v.push(c(t,e,i,r,h[1][0],h[1][1],h[2][0],h[2][1]));for(var g=[i,r],y=[t,e],_=0;_<v.length;_++)v[_]&&n(v[_][0],v[_][1],t,e)<n(g[0],g[1],t,e)&&(g=v[_]);for(var b=0;b<v.length;b++)v[b]&&n(v[b][0],v[b][1],i,r)<n(y[0],y[1],i,r)&&(y=v[b]);return g[0]===i&&g[1]===r||y[0]===t&&y[1]===e?null:[g,y]}Object.defineProperty(e,"__esModule",{value:!0}),e.lib_erase=void 0,e.lib_erase=function(t,e,n){n=n||20;var o=[],c=function(t){var r=e[0][0],c=e[0][1],s=0,l=0;if(1!==t.length||i(t[0][0],t[0][1],r,c,n)){for(var d;s<t.length-1;){var f=t[s],h=t[s+1],v=i(f[0],f[1],r,c,n),p=i(h[0],h[1],r,c,n);if(v&&p)l=++s;else if(v&&!p)(g=a(f[0],f[1],h[0],h[1],r,c,n))?(t[s]=g,l=s):s++;else if(!v&&p){var g;(g=a(h[0],h[1],f[0],f[1],r,c,n))&&((d=t.slice(l,s+1)).push(g),o.push(d)),l=++s}else{var y=u(f[0],f[1],h[0],h[1],r,c,n);y?((d=t.slice(l,s+1))[d.length-1][0]===y[0][0]&&d[d.length-1][1]===y[0][1]||d.push(y[0]),d.length>1&&o.push(d),t[s]=y[1],t[s+1]&&t[s+1][0]==y[1][0]&&t[s+1][1]==y[1][1]&&s++,l=s):s++}}l!==s&&(d=t.slice(l,t.length))&&o.push(d)}else o.push(t)},d=function(t,i){var a,u=e[i],c=e[i+1],d=0,f=0;if(1!==t.length||-1!==(p=r(t[0][0],t[0][1],u[0],u[1],c[0],c[1],n)).indexOf(1)){for(;d<t.length-1;){var h=t[d],v=t[d+1],p=r(h[0],h[1],u[0],u[1],c[0],c[1],n),g=r(v[0],v[1],u[0],u[1],c[0],c[1],n);if(-1!==p.indexOf(1)&&-1!==g.indexOf(1))f=++d;else if(-1!==p.indexOf(1)&&-1===g.indexOf(1))(y=s(h[0],h[1],p,v[0],v[1],u[0],u[1],c[0],c[1],n))?(t[d]=y,f=d):d++;else if(-1===p.indexOf(1)&&-1!==g.indexOf(1)){var y;(y=s(v[0],v[1],g,h[0],h[1],u[0],u[1],c[0],c[1],n))?((a=t.slice(f,d+1)).push(y),o.push(a),f=++d):d++}else{var _=l(h[0],h[1],v[0],v[1],u[0],u[1],c[0],c[1],n);_?((a=t.slice(f,d+1))[a.length-1][0]===_[0][0]&&a[a.length-1][1]===_[0][1]||a.push(_[0]),a.length>1&&o.push(a),t[d]=_[1],t[d+1]&&t[d+1][0]==_[1][0]&&t[d+1][1]==_[1][1]&&d++,f=d):d++}}f!==d&&(a=t.slice(f,t.length))&&o.push(a)}else o.push(t)};if(1===(e=function(t){var e=[];if(1===t.length)e=t;else{for(var n=0;n<t.length-1;)t[n][0]===t[n+1][0]&&t[n][1]===t[n+1][1]||e.push(t[n]),n++;0!==t.length&&0===e.length&&e.push(t[0]),t[t.length-1][0]===t[e.length-1][0]&&t[t.length-1][1]===t[e.length-1][1]||e.push(t[n])}return e}(e)).length){for(var f=0;f<t.length;f++)c(t[f]);t=o}else for(var h=0;h<e.length-1;h++){for(f=0;f<t.length;f++)d(t[f],h);t=o,o=[]}for(var v=0;v<t.length;v++)for(var p=0;p<t[v].length;p++)t[v][p][0]=Math.round(t[v][p][0]),t[v][p][1]=Math.round(t[v][p][1]);return t};var d=function(t){return Math.sqrt(t[0]*t[0]+t[1]*t[1])},f=function(t,e,n){var i=[e[0]-t[0],e[1]-t[1]],r=d(i);if(r<1e-6)return t;var o=[n[0]-t[0],n[1]-t[1]],a=(i[0]*o[0]+i[1]*o[1])/r;return a<0?t:a>r?e:[t[0]+i[0]*a/r,t[1]+i[1]*a/r]}},4225:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.lib_hex2rgba=void 0;var i=n(8001),r=/^#?[a-fA-F0-9]+$/;e.lib_hex2rgba=function(t,e){if("none"==(t=null!=t?t:""))return"none";if("transparent"==t)return"rgba(0,0,0,0)";if(t.includes("rgba("))return t;if(t.includes("rgb(")&&(t=(0,i.lib_rgba2hex)(t)),!(t=t.replace(/[^0-9a-fA-F]/g,"")))return"";if(!r.test(t))return console.error("hex2rgba -> ".concat(t,": first argument has invalid hexadecimal characters")),"";if("#"===t[0]&&(t=t.slice(1)),3===t.length){var n=t.split("");n.splice(2,0,t[2]),n.splice(1,0,t[1]),n.splice(0,0,t[0]),t=n.join("")}if(6!==t.length)return console.error("hex2rgba: first argument has invalid hexadecimal length"),"";var o=[parseInt(t.slice(0,2),16),parseInt(t.slice(2,4),16),parseInt(t.slice(4,6),16)];return(e="number"==typeof e?e:parseFloat(e))>=0&&e<=1?o.push(e):o.push(1),"rgba("+o.join(",")+")"}},7645:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(r,o){function a(t){try{c(i.next(t))}catch(t){o(t)}}function u(t){try{c(i.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,u)}c((i=i.apply(t,e||[])).next())}))},r=this&&this.__generator||function(t,e){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,u[0]&&(a=0)),a;)try{if(n=1,i&&(r=2&u[0]?i.return:u[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,u[1])).done)return r;switch(i=0,r&&(u=[2&u[0],r.value]),u[0]){case 0:case 1:r=u;break;case 4:return a.label++,{value:u[1],done:!1};case 5:a.label++,i=u[1],u=[0];continue;case 7:u=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==u[0]&&2!==u[0])){a=0;continue}if(3===u[0]&&(!r||u[1]>r[0]&&u[1]<r[3])){a.label=u[1];break}if(6===u[0]&&a.label<r[1]){a.label=r[1],r=u;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(u);break}r[2]&&a.ops.pop(),a.trys.pop();continue}u=e.call(t,a)}catch(t){u=[6,t],i=0}finally{n=r=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.LocalStorage_SetClipboard=e.LocalStorage_GetClipboard=e.LocalStorage_SetConfig=e.LocalStorage_GetConfig=e.LocalStorage_SetData=e.LocalStorage_GetData=void 0;var o=n(7914);o.config({driver:[o.INDEXEDDB,o.LOCALSTORAGE,o.WEBSQL],name:"_localDataDB",version:1});var a=function(){return i(void 0,void 0,void 0,(function(){return r(this,(function(t){return[2,o]}))}))},u=function(t){return i(void 0,void 0,void 0,(function(){return r(this,(function(e){return[2,o.getItem(t)]}))}))},c=function(t,e){return i(void 0,void 0,void 0,(function(){return r(this,(function(n){return[2,o.setItem(t,e)]}))}))};e.LocalStorage_GetData=function(t){return i(void 0,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return[4,a()];case 1:return n.sent(),[4,u("icdt-data")];case 2:return e=n.sent()||[],"function"==typeof t.callback&&t.callback(e),[2]}}))}))},e.LocalStorage_SetData=function(t){return i(void 0,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return[4,a()];case 1:n.sent(),t.params=t.params||{},n.label=2;case 2:return n.trys.push([2,4,,5]),[4,c("icdt-data",t.params)];case 3:return n.sent(),"function"==typeof t.callback&&t.callback(t.params),[3,5];case 4:return e=n.sent(),"function"==typeof t.callback&&t.callback(null),console.error(e),[3,5];case 5:return[2]}}))}))},e.LocalStorage_GetConfig=function(t){return i(void 0,void 0,void 0,(function(){var e,n;return r(this,(function(i){switch(i.label){case 0:return[4,a()];case 1:i.sent(),i.label=2;case 2:return i.trys.push([2,4,,5]),[4,u("icdt-config")];case 3:return e=i.sent()||{},"function"==typeof t.callback&&t.callback(e),[3,5];case 4:return n=i.sent(),"function"==typeof t.callback&&t.callback(null),console.error(n),[3,5];case 5:return[2]}}))}))},e.LocalStorage_SetConfig=function(t){return i(void 0,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return[4,a()];case 1:n.sent(),t.params=t.params||{},n.label=2;case 2:return n.trys.push([2,4,,5]),[4,c("icdt-config",t.params)];case 3:return n.sent(),"function"==typeof t.callback&&t.callback(t.params),[3,5];case 4:return e=n.sent(),"function"==typeof t.callback&&t.callback(null),console.error(e),[3,5];case 5:return[2]}}))}))},e.LocalStorage_GetClipboard=function(t){return i(void 0,void 0,void 0,(function(){var e,n;return r(this,(function(i){switch(i.label){case 0:return[4,a()];case 1:i.sent(),i.label=2;case 2:return i.trys.push([2,4,,5]),[4,u("icdt-clipboard")];case 3:return e=i.sent()||{},"function"==typeof t.callback&&t.callback(e),[3,5];case 4:return n=i.sent(),"function"==typeof t.callback&&t.callback(null),console.error(n),[3,5];case 5:return[2]}}))}))},e.LocalStorage_SetClipboard=function(t){return i(void 0,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return[4,a()];case 1:n.sent(),t.params=t.params||{},n.label=2;case 2:return n.trys.push([2,4,,5]),[4,c("icdt-clipboard",t.params)];case 3:return n.sent(),"function"==typeof t.callback&&t.callback(t.params),[3,5];case 4:return e=n.sent(),"function"==typeof t.callback&&t.callback(null),console.error(e),[3,5];case 5:return[2]}}))}))}},8001:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.lib_rgba2hex=void 0,e.lib_rgba2hex=function(t,e){if(!t)return"";var n=t.replace(/\s/g,"").match(/^rgba?\((\d+),(\d+),(\d+),?([^,\s)]+)?/i),i=(n&&n[4]||"").trim(),r=n?(256|n[1]).toString(16).slice(1)+(256|n[2]).toString(16).slice(1)+(256|n[3]).toString(16).slice(1):t;return"0"==i?"transparent":(e&&(r+=(255*(""!==i?i:"01")|256).toString(16).slice(1)),console.log("lib_rgba2hex: ".concat(t," -> ").concat(r)),"#".concat(r))}},3331:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.V_ID=void 0,e.V_ID={RESIZE_GROUP:"icdt-resize-g",SELECT_GROUP:"icdt-select-g",SCAN_GROUP:"icdt-scan-g",CREATE_GROUP:"icdt-create-g",INTERACTIVE_GROUP:"icdt-interactive-g",INDEX_GROUP:"icdt-index-g",BACKGROUND_GROUP:"icdt-background-g",TEST_GROUP:"icdt-test-g"}},1167:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.V_Keyboard=void 0,e.V_Keyboard={Digit1:49,Digit2:50,Digit3:51,Digit4:52,Digit5:53,Digit6:54,Digit7:55,Digit8:56,Digit9:57,Digit0:48,KeyA:65,KeyB:66,KeyC:67,KeyD:68,KeyE:69,KeyF:70,KeyG:71,KeyH:72,KeyI:73,KeyJ:74,KeyK:75,KeyL:76,KeyM:77,KeyN:78,KeyO:79,KeyP:80,KeyQ:81,KeyR:82,KeyS:83,KeyT:84,KeyU:85,KeyV:86,KeyW:87,KeyX:88,KeyY:89,KeyZ:90,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,Insert:45,Delete:46,Home:36,End:35,PageUp:33,PageDown:34,ArrowUp:38,ArrowDown:40,ArrowLeft:37,ArrowRight:39,Escape:27,Tab:9,Backspace:8,Enter:13,Space:32,BracketLeft:219,BracketRight:221}},8947:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.V_PenType=void 0,e.V_PenType={DRAW:1,HIGHTLIGH:2,INTERACTIVE:3}},797:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.V_PointerType=void 0,e.V_PointerType={POINTER:0,HAND:1,PEN:2,SHAPE:3,FOREIGNOBJECT:6,IMAGE:7,TEXT:4,ERASER:5,INDEX:8}},5611:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.V_PolygonRatio=void 0;var i=n(5126);e.V_PolygonRatio=[{name:"tam giác vuông",type:i.V_PolygonType.TRIANGLE_ISOSCELES,ratios:[[0,0],[1,1],[0,1]]},{name:"tam giác cân",type:i.V_PolygonType.TRIANGLE_EQUILATERAL,ratios:[[.5,0],[0,1],[1,1]]},{name:"hình chữ nhật",type:i.V_PolygonType.RECTANGLE,ratios:[[0,0],[1,0],[1,1],[0,1]]},{name:"hình ngũ giác đều",type:i.V_PolygonType.PENTAGON,ratios:[[.5,0],[1,.4],[.8,1],[.2,1],[0,.4]]},{name:"hình lục giác đều",type:i.V_PolygonType.HEXAGON,ratios:[[.5,0],[1,.25],[1,.75],[.5,1],[0,.75],[0,.25]]},{name:"khung đánh dấu vị trí",type:i.V_PolygonType.BOOKMARK,ratios:[[0,0],[1,0],[1,.8],[.5,1],[0,.8]]},{name:"khung đánh trò chuyện",type:i.V_PolygonType.COMMENT,ratios:[[0,0],[1,0],[1,.9],[.3,.9],[.2,1],[.1,.9],[0,.9]]},{name:"hình chữ thập",type:i.V_PolygonType.CROSS,ratios:[[0,.3],[.3,.3],[.3,0],[.7,0],[.7,.3],[1,.3],[1,.7],[.7,.7],[.7,1],[.3,1],[.3,.7],[0,.7]]},{name:"hình mũi tên 1 chiều",type:i.V_PolygonType.ARROW_ONEWAY,ratios:[[0,.2],[.8,.2],[.8,0],[1,.5],[.8,1],[.8,.8],[0,.8]]},{name:"hình mũi tên 2 chiều",type:i.V_PolygonType.ARROW_TWOWAY,ratios:[[.2,0],[.2,.2],[.8,.2],[.8,0],[1,.5],[.8,1],[.8,.8],[.2,.8],[.2,1],[0,.5]]},{name:"hình ngôi sao 4 cánh",type:i.V_PolygonType.STAR_FOUR,ratios:[[.5,0],[.65,.35],[1,.5],[.65,.65],[.5,1],[.35,.65],[0,.5],[.35,.35]]},{name:"hình ngôi sao 5 cánh",type:i.V_PolygonType.STAR_FIVE,ratios:[[.5,0],[.625,.4],[1,.4],[.675,.625],[.8,1],[.5,.775],[.2,1],[.325,.625],[0,.4],[.375,.4]]},{name:"hình ngôi sao 6 cánh",type:i.V_PolygonType.STAR_SIX,ratios:[[.5,0],[.667,.25],[1,.25],[.5+.334,.5],[1,.75],[.667,.75],[.5,1],[.334,.75],[0,.75],[.167,.5],[0,.25],[.334,.25]]}]},5126:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.V_PolygonType=void 0,e.V_PolygonType={TRIANGLE_ISOSCELES:3,TRIANGLE_EQUILATERAL:31,RECTANGLE:4,PENTAGON:5,HEXAGON:6,BOOKMARK:101,COMMENT:102,CROSS:104,ARROW_ONEWAY:201,ARROW_TWOWAY:202,STAR_FOUR:304,STAR_FIVE:305,STAR_SIX:306}},2121:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.V_ShapeType=void 0,e.V_ShapeType={GROUP:0,CIRCLE:1,ELLIPSE:2,LINE:5,RECT:3,POLYGON:4,FOREIGNOBJECT:6,IMAGE:9,TEXT:7,PATH:8}},7144:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.v_mediatype=void 0,e.v_mediatype={TEXT:900,IMAGE:901,AUDIO:902,VIDEO:903,LINK:904,ZIP:905,HTML:906,TRACK:907,OFFICE:908,PDF:909,PHET:910,IMAGE_ANIMATION:911,SCORM:912}},8271:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.v_osstype=void 0,e.v_osstype={ONEDRIVE:1e3,GOOGLEDRIVE:1001,YOUTUBE:1002,SCORM:1003,PHET:1005,OTHER:1004}},9427:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt=void 0;var i=n(6428),r=n(463),o=n(8378),a=n(26),u=n(6408),c=n(4634),s=n(194),l=n(2634),d=n(2140),f=function(){function t(){var t=this;this._container="",this._svg="",this._screen=c.icdt_Screen_MoKam.prototype,this._data=a.icdt_DataSource.prototype,this._dataSelect=r.icdt_DataSelect.prototype,this._slide=o.icdt_DataSlide.prototype,this._history=u.icdt_History.prototype,this._attribute=s.icdt_SvgNodeAttribute_TrumCuoiXaHoi.prototype,this._pointer=d.icdt_PointerType_ChiChiChoCho.prototype,this._variable=l.icdt_Variable_TrumCuoi.prototype,this._data=new a.icdt_DataSource,this._dataSelect=new r.icdt_DataSelect,this._slide=new o.icdt_DataSlide,this._history=new u.icdt_History,this._attribute=new s.icdt_SvgNodeAttribute_TrumCuoiXaHoi,this._pointer=new d.icdt_PointerType_ChiChiChoCho,this._variable=new l.icdt_Variable_TrumCuoi,this._pointer.onchangePointerType=function(){t._dataSelect.ids.length&&(t._dataSelect.ids=[])},this._pointer.onchangePointerTypeTemp=function(){t._dataSelect.ids.length&&(t._dataSelect.ids=[])},this._data.onChangeSlide=function(){t._dataSelect.ids.length&&(t._dataSelect.ids=[])}}return Object.defineProperty(t.prototype,"config",{get:function(){return this._config},set:function(t){this._config=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dataSource",{get:function(){return{modules:"icdtV2",screen:this._screen.get,data:this._data.get,resources:this._data.getResource,variable:this._variable.get,info:{}}},set:function(t){this._screen.set=t.screen||{width:1080,height:1080},this._data.set=t.data||{},this._variable.set=t.variable||{}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"container",{get:function(){return this._container},set:function(t){this._container=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"svg",{get:function(){return this._svg},set:function(t){this._svg=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"target",{get:function(){return window.document.querySelector(this._svg)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"screen",{get:function(){return this._screen},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"data",{get:function(){return this._data},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dataSelect",{get:function(){return this._dataSelect},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slide",{get:function(){return this._slide},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"history",{get:function(){return this._history},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"attribute",{get:function(){return this._attribute},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"pointer",{get:function(){return this._pointer},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"variable",{get:function(){return this._variable},enumerable:!1,configurable:!0}),t.prototype.reloadView=function(){var t,e,n,i,r;this._screen.screen=(t=jQuery(this._container).offset(),e=jQuery(this._container).width(),n=jQuery(this._container).height(),console.log("reloadView",JSON.stringify({offset:t,width:e,height:n})),{offset:{x:null!==(i=null==t?void 0:t.left)&&void 0!==i?i:0,y:null!==(r=null==t?void 0:t.top)&&void 0!==r?r:0},width:null!=e?e:0,height:null!=n?n:0})},t.prototype.init=function(t){this._container=t.container,this._svg=t.target,this._screen=new c.icdt_Screen_MoKam,(0,i.icdt_Init)({container:t.container,target:t.target,iskeyboard:t.iskeyboard})},t}();e.icdt=new f},4123:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_EraserComponent=void 0;var i=n(670),r=n(5300);e.icdt_EraserComponent=function(t){(0,i.icdt_PointerEvents)(t,new r.icdt_Eraser)}},5300:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Eraser=void 0;var i=n(2121),r=n(1380),o=n(9427),a=n(184),u=n(2613),c=n(5932);e.icdt_Eraser=function(){var t=(0,u.icdt_SvgPath)(Math.ceil(1e9*Math.random())),e=(t.nodeId,t.element);t.attribute,t.size,(0,c.icdt_SyncSvgNodeAttribute)(e,{stroke:"#ddd",strokeWidth:10,strokeLinecap:"round",strokeLinejoin:"round"});var n="";return{start:function(t){n="M ".concat(t.x," ").concat(t.y," L ").concat(t.x," ").concat(t.y)},move:function(t,i){var r,o;r=t.x,o=t.y,n+=" ".concat(r," ").concat(o),e.setAttribute("d",n)},end:function(t,n){e.remove(),function(t){var e=9999,n=9999,u=-9999,c=-9999;t.forEach((function(t){e=Math.min(e,t[0]),n=Math.min(n,t[1]),u=Math.max(u,t[0]),c=Math.max(c,t[1])})),(0,a.icdt_Offset2Size)(e,n,u,c,{points:t}),o.icdt.data.getNodeInArea(0,0,1920,1920,i.V_ShapeType.PATH).forEach((function(e){var n=o.icdt.data.getNode(e),i=(0,r.lib_erase)(n.size.points,t,2);console.log(i)}))}(n)}}}},8669:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_ForeignObjectComponent=void 0;var i=n(670),r=n(2376);e.icdt_ForeignObjectComponent=function(t){(0,i.icdt_PointerEvents)(t,new r.icdt_SvgForeignObjectCreate)}},1381:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_HandComponent=void 0;var i=n(9427),r=n(670);e.icdt_HandComponent=function(t){(0,r.icdt_PointerEvents)(t,new o,1,{x:0,y:0})};var o=function(){var t=i.icdt.screen.dislocation,e=t.x,n=t.y,r=function(t,r,o,a){i.icdt.screen.move({x:e,y:n},{x:o-t,y:a-r})};return{start:function(t){},move:function(t,e){r(e[0][0],e[0][1],t.x,t.y)},end:function(t,e){r(e[0][0],e[0][1],t.x,t.y)}}}},1929:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_ImageComponent=void 0;var i=n(670),r=n(3124);e.icdt_ImageComponent=function(t){(0,i.icdt_PointerEvents)(t,new r.icdt_SvgImageCreate)}},2293:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SlideClearNodeIndex=e.icdt_IndexComponent=void 0;var i=n(3331),r=n(9427),o=n(4112),a=n(5932);e.icdt_IndexComponent=function(t){var e,n,a,c,s,l,d,f=(null===(e=t.mouseEvent)||void 0===e?void 0:e.target)||(null===(n=t.touchEvent)||void 0===n?void 0:n.target),h=(null==f?void 0:f.getAttribute("id"))||"",v=null==f?void 0:f.nodeName,p=jQuery(f).parents("g[id]").attr("id")||"";if(![i.V_ID.INDEX_GROUP].includes(p))if((null===(a=t.mouseEvent)||void 0===a?void 0:a.altKey)||(null===(c=t.touchEvent)||void 0===c?void 0:c.altKey)||!h||h.match(/[^0-9]/)||!r.icdt.dataSelect.nodeName.includes(v))r.icdt.dataSelect.ids.length&&(r.icdt.dataSelect.ids=[]),(0==(null===(s=t.mouseEvent)||void 0===s?void 0:s.button)||t.touchEvent)&&(0,o.icdt_Scan)(t,u);else{var g=parseFloat(h||"0");(null===(l=t.mouseEvent)||void 0===l?void 0:l.shiftKey)||(null===(d=t.touchEvent)||void 0===d?void 0:d.shiftKey)?r.icdt.dataSelect.ids=[g].concat(r.icdt.dataSelect.ids).filter((function(t,e,n){return n.indexOf(t)==e})):r.icdt.dataSelect.ids=[g];var y=r.icdt.dataSelect.nodes;u(y)}};var u=function(t){var e,n,o,u,c,s,l=1;if(t.length&&(l=Math.max.apply(null,null!==(o=null===(n=null===(e=r.icdt.data.slide)||void 0===e?void 0:e.svg)||void 0===n?void 0:n.nodes.map((function(t){var e;return null!==(e=t.idx)&&void 0!==e?e:0})))&&void 0!==o?o:[0])+1),1==t.length)t[0].idx||(t[0].idx=l,t[0].time=0);else if(t.length>=0){var d=t.map((function(t){var e;return null!==(e=t.idx)&&void 0!==e?e:0})).filter((function(t){return t>0})),f=d.length?Math.min.apply(null,d):l;t.forEach((function(t){var e;t.idx=f,t.time=null!==(e=t.time)&&void 0!==e?e:0}))}var h=(0,a.icdt_SyncSvgNode4Design)(i.V_ID.INDEX_GROUP,"g");(0,a.syncNodeIndex)(h,null!==(s=null===(c=null===(u=r.icdt.data.slide)||void 0===u?void 0:u.svg)||void 0===c?void 0:c.nodes)&&void 0!==s?s:[])};e.icdt_SlideClearNodeIndex=function(t){var e,n,o,u;(null===(e=null==t?void 0:t.svg)||void 0===e?void 0:e.nodes)&&t.svg.nodes.forEach((function(t){t.idx=0,t.time=null}));var c=(0,a.icdt_SyncSvgNode4Design)(i.V_ID.INDEX_GROUP,"g");(0,a.syncNodeIndex)(c,null!==(u=null===(o=null===(n=r.icdt.data.slide)||void 0===n?void 0:n.svg)||void 0===o?void 0:o.nodes)&&void 0!==u?u:[])}},4112:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Scan=void 0;var i=n(3331),r=n(9427),o=n(184),a=n(670),u=n(5932);e.icdt_Scan=function(t,e){var n=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.SCAN_GROUP,"g"),r=(0,o.icdt_Offset2Size)(0,0,1,1);(0,u.syncNodeScan)(n,r),c(t,r,n,e)};var c=function(t,e,n,i){var c={start:function(t){},move:function(t,i){var r,a,c,s;r=i[0][0],a=i[0][1],c=t.x,s=t.y,e=(0,o.icdt_Offset2Size)(r,a,c,s),(0,u.syncNodeScan)(n,e)},end:function(t,e){null==n||n.remove(),r.icdt.dataSelect.ids=r.icdt.data.getNodeInArea(Math.min(e[0][0],t.x),Math.min(e[0][1],t.y),Math.max(e[0][0],t.x),Math.max(e[0][1],t.y));var o=r.icdt.dataSelect.nodes;i(o)}};(0,a.icdt_PointerEvents)(t,c)}},8397:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_KeyboardComponent=e.icdt_Keyboard=void 0;var i=n(7645),r=n(1167),o=n(797),a=n(9427),u=n(6511),c=n(4255),s=n(1724),l=n(4355),d=n(5877),f=n(4654),h=function(){function t(){this._fnChanges=[],this.onchange={type:"keydown",key:r.V_Keyboard.Escape,fn:function(){a.icdt.dataSelect.ids.length&&(a.icdt.dataSelect.ids=[])}},this.onchange={type:"keydown",key:r.V_Keyboard.Delete,fn:function(){a.icdt.dataSelect.deleteNode()}},this.onchange={type:"keydown",key:r.V_Keyboard.Space,fn:function(){a.icdt.pointer.pointer_type_temp=o.V_PointerType.HAND}},this.onchange={type:"keyup",key:r.V_Keyboard.Space,fn:function(){a.icdt.pointer.pointer_type_temp=o.V_PointerType.POINTER}},this.onchange={type:"keydown",key:r.V_Keyboard.ArrowLeft,fn:function(){a.icdt.dataSelect.ids.length||a.icdt.data.backSlide()}},this.onchange={type:"keydown",key:r.V_Keyboard.ArrowRight,fn:function(){a.icdt.dataSelect.ids.length||a.icdt.data.nextSlide()}},this.onchange={type:"keydown",key:r.V_Keyboard.ArrowLeft,fn:function(){a.icdt.dataSelect.ids.length&&(a.icdt.dataSelect.nodes.forEach((function(t){(0,f.sizeX)(t,(0,d.icdt_RoundNumber)(t.size.x-(0,l.icdt_ScaleNumber)(1)))})),1==a.icdt.dataSelect.ids.length?(0,u.icdt_Resize)(a.icdt.dataSelect.nodes[0]):(0,c.icdt_Select)(a.icdt.dataSelect.nodes))}},this.onchange={type:"keydown",key:r.V_Keyboard.ArrowRight,fn:function(){a.icdt.dataSelect.ids.length&&(a.icdt.dataSelect.nodes.forEach((function(t){(0,f.sizeX)(t,(0,d.icdt_RoundNumber)(t.size.x+(0,l.icdt_ScaleNumber)(1)))})),1==a.icdt.dataSelect.ids.length?(0,u.icdt_Resize)(a.icdt.dataSelect.nodes[0]):(0,c.icdt_Select)(a.icdt.dataSelect.nodes))}},this.onchange={type:"keydown",key:r.V_Keyboard.ArrowUp,fn:function(){a.icdt.dataSelect.ids.length&&(a.icdt.dataSelect.nodes.forEach((function(t){(0,f.sizeY)(t,(0,d.icdt_RoundNumber)(t.size.y-(0,l.icdt_ScaleNumber)(1)))})),1==a.icdt.dataSelect.ids.length?(0,u.icdt_Resize)(a.icdt.dataSelect.nodes[0]):(0,c.icdt_Select)(a.icdt.dataSelect.nodes))}},this.onchange={type:"keydown",key:r.V_Keyboard.ArrowDown,fn:function(){a.icdt.dataSelect.ids.length&&(a.icdt.dataSelect.nodes.forEach((function(t){(0,f.sizeY)(t,(0,d.icdt_RoundNumber)(t.size.y+(0,l.icdt_ScaleNumber)(1)))})),1==a.icdt.dataSelect.ids.length?(0,u.icdt_Resize)(a.icdt.dataSelect.nodes[0]):(0,c.icdt_Select)(a.icdt.dataSelect.nodes))}},this.onchange={type:"keydown",key:r.V_Keyboard.Digit1,fn:function(t){t.shiftKey&&(a.icdt.reloadView(),a.icdt.screen.zoomTo="fit")}},this.onchange={type:"keydown",key:r.V_Keyboard.KeyA,fn:function(t){if(t.ctrlKey){a.icdt.dataSelect.ids=a.icdt.data.getNodeAll();var e=a.icdt.dataSelect.nodes;1==e.length?(0,u.icdt_Resize)(e[0]):e.length>1&&(0,c.icdt_Select)(e)}}},this.onchange={type:"keydown",key:r.V_Keyboard.KeyC,fn:function(t){if(t.ctrlKey){var e=a.icdt.dataSelect.nodes;e&&(0,i.LocalStorage_SetClipboard)({params:{type:"nodes",nodes:e}})}}},this.onchange={type:"keydown",key:r.V_Keyboard.KeyV,fn:function(t){t.ctrlKey&&(0,i.LocalStorage_GetClipboard)({callback:function(t){var e,n;"nodes"==(null==t?void 0:t.type)&&(null===(e=null==t?void 0:t.nodes)||void 0===e?void 0:e.length)&&(null===(n=null==t?void 0:t.nodes)||void 0===n||n.forEach((function(t){t.id=Math.ceil(1e9*Math.random()),a.icdt.data.node=t})),(0,s.icdt_RenderComponent)(a.icdt.data.slide))}})}},this.onchange={type:"keydown",key:r.V_Keyboard.KeyZ,fn:function(t){t.ctrlKey&&t.shiftKey?a.icdt.history.redo():t.ctrlKey&&a.icdt.history.undo()}},this.onchange={type:"keydown",key:r.V_Keyboard.BracketLeft,fn:function(t){t.ctrlKey&&t.shiftKey?a.icdt.data.sendToBack(a.icdt.dataSelect.ids):t.ctrlKey?a.icdt.data.sendToBackStep(a.icdt.dataSelect.ids,-2):a.icdt.data.sendToBackArea(a.icdt.dataSelect.ids)}},this.onchange={type:"keydown",key:r.V_Keyboard.BracketRight,fn:function(t){t.ctrlKey&&t.shiftKey?a.icdt.data.bringToFront(a.icdt.dataSelect.ids):t.ctrlKey?a.icdt.data.bringToFrontStep(a.icdt.dataSelect.ids,1):a.icdt.data.bringToFrontArea(a.icdt.dataSelect.ids)}}}return Object.defineProperty(t.prototype,"onchange",{set:function(t){var e=this._fnChanges.find((function(e){return e.eventType==t.type&&e.eventKey==t.key}));e?e.fns.push(t.fn):this._fnChanges.push({eventType:t.type,eventKey:t.key,fns:[t.fn]})},enumerable:!1,configurable:!0}),t.prototype.change=function(t,e,n){var i;null===(i=this._fnChanges.find((function(n){return n.eventType==t&&n.eventKey==e})))||void 0===i||i.fns.forEach((function(t){return t(n)}))},t}();e.icdt_Keyboard=new h,e.icdt_KeyboardComponent=function(t){e.icdt_Keyboard.change(t.type,t.keyCode||t.which||t.charCode||0,t)}},1933:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Draw=void 0;var i=n(7508),r=n(2613),o=n(2121),a=n(5932),u=n(9427),c=n(9922);e.icdt_Draw=function(){var t={stroke:u.icdt.attribute.stroke,strokeWidth:u.icdt.attribute.strokeWidth,strokeLinecap:"round",strokeLinejoin:"round"},e=(0,r.icdt_SvgPath)(Math.ceil(1e9*Math.random()),{attribute:t}),n=e.nodeId,s=e.element,l=e.attribute,d=e.size;(0,a.icdt_SyncSvgNodeAttribute)(s,l);var f="",h="";return{start:function(t){f="M ".concat(t.x," ").concat(t.y," L ").concat(t.x," ").concat(t.y)},move:function(t,e){var n,i;n=t.x,i=t.y,f+=" ".concat(n," ").concat(i),s.setAttribute("d",f)},end:function(t,e){var r;if(e.length>=3){var a=i.line().x((function(t){return t[0]})).y((function(t){return t[1]})).curve(i.curveBasis);h=null!==(r=a(e))&&void 0!==r?r:"",s.setAttribute("d",h)}else s.setAttribute("d",f);var v=(0,c.icdt_Adapter_PathD_2_PointMaps)(h||f),p=(0,c.icdt_Adapter_PointMaps_Extract_MinMaxXY)(v),g=p.minX,y=p.minY,_=p.maxX,b=p.maxY;d.x=g,d.y=y,d.width=_-g||1,d.height=b-y||1,d.ratioMaps=(0,c.icdt_Adapter_PointMaps_2_RatioMaps)(d,v),u.icdt.data.node=Object.assign({id:n,type:o.V_ShapeType.PATH,name:"Path"},{size:d,attribute:l})}}}},223:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Highlight=void 0;var i=n(2613),r=n(2121),o=n(5932),a=n(9427),u=n(9922);e.icdt_Highlight=function(){var t={stroke:a.icdt.attribute.stroke,strokeOpacity:.4,strokeWidth:a.icdt.attribute.strokeWidth,strokeLinecap:"round",strokeLinejoin:"round"},e=(0,i.icdt_SvgPath)(Math.ceil(1e9*Math.random()),{attribute:t}),n=e.nodeId,c=e.element,s=e.attribute,l=e.size;(0,o.icdt_SyncSvgNodeAttribute)(c,s);var d="";return{start:function(t){d="M ".concat(t.x," ").concat(t.y," L ").concat(t.x," ").concat(t.y)},move:function(t,e){var n,i;n=t.x,i=t.y,d+=" ".concat(n," ").concat(i),c.setAttribute("d",d)},end:function(t,e){var i=(0,u.icdt_Adapter_PathD_2_PointMaps)(d),o=(0,u.icdt_Adapter_PointMaps_Extract_MinMaxXY)(i),c=o.minX,f=o.minY,h=o.maxX,v=o.maxY;l.x=c,l.y=f,l.width=h-c||1,l.height=v-f||1,l.ratioMaps=(0,u.icdt_Adapter_PointMaps_2_RatioMaps)(l,i),a.icdt.data.node=Object.assign({id:n,type:r.V_ShapeType.PATH,name:"Path"},{size:l,attribute:s})}}}},2103:function(t,e,n){"use strict";var i=this&&this.__spreadArray||function(t,e,n){if(n||2===arguments.length)for(var i,r=0,o=e.length;r<o;r++)!i&&r in e||(i||(i=Array.prototype.slice.call(e,0,r)),i[r]=e[r]);return t.concat(i||Array.prototype.slice.call(e))};Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Interactive=void 0;var r=n(2613),o=n(5932),a=n(7508),u=n(4355),c=n(3331),s=n(9427),l=n(303);e.icdt_Interactive=function(t,e){var n,d,f={stroke:"#FF0000",strokeWidth:(0,u.icdt_ScaleNumber)(2),strokeLinecap:"round",strokeLinejoin:"round",strokeDasharray:(0,u.icdt_ScaleNumber)(8)},h=(0,r.icdt_SvgPath)(Math.ceil(1e9*Math.random()),{size:e}),v=h.element;h.attribute,h.size,window.document.getElementById(c.V_ID.INTERACTIVE_GROUP).querySelectorAll("path").forEach((function(t){return null==t?void 0:t.remove()})),window.document.getElementById(c.V_ID.INTERACTIVE_GROUP).querySelectorAll("circle").forEach((function(t){return null==t?void 0:t.remove()})),null===(n=window.document.getElementById(c.V_ID.INTERACTIVE_GROUP))||void 0===n||n.appendChild(v);var p=function(e){var n;if(e.length){var r=[];if(1==e.length){var o=(null!==(n=null!=t?t:s.icdt.dataSelect.nodes[0])&&void 0!==n?n:{}).size;if(!o)return;r=[[o.x+o.width/2,o.y+o.height/2],e[0]]}else r=i([],e,!0);y(r),g(r[0],"start"),g(r[r.length-1],"end")}},g=function(e,n){e&&(function(){var t,i=(0,l.icdt_SvgCircle)(Math.ceil(1e9*Math.random()),{attribute:{fill:"start"==n?"#FF0000":"#00BA00",strokeWidth:(0,u.icdt_ScaleNumber)(1)},size:{x:e[0]-5,y:e[1]-5,width:10,height:10}}).element;null===(t=window.document.getElementById(c.V_ID.INTERACTIVE_GROUP))||void 0===t||t.prepend(i)}(),function(){var n,i,o=(null!==(n=null!=t?t:s.icdt.dataSelect.nodes[0])&&void 0!==n?n:{}).size;if(o){var a=[[e[0]-o.width/2,e[1]-o.height/2],[e[0]+o.width/2,e[1]-o.height/2],[e[0]+o.width/2,e[1]+o.height/2],[e[0]-o.width/2,e[1]+o.height/2],[e[0]-o.width/2,e[1]-o.height/2]],l=(0,r.icdt_SvgPath)(Math.ceil(1e9*Math.random()),{attribute:{fill:"#FFFFFF",fillOpacity:.6,stroke:"#5f6ce1",strokeWidth:(0,u.icdt_ScaleNumber)(1),strokeLinecap:"round",strokeLinejoin:"round",strokeDasharray:(0,u.icdt_ScaleNumber)(8)},size:{x:0,y:0,width:10,height:10,points:a}}).element;null===(i=window.document.getElementById(c.V_ID.INTERACTIVE_GROUP))||void 0===i||i.prepend(l)}}())},y=function(t){var e=a.line().x((function(t){return t[0]})).y((function(t){return t[1]})).curve(a.curveBasis),n=e(t);v.setAttribute("d",n)};(0,o.icdt_SyncSvgNodeAttribute)(v,f),p(null!==(d=null==e?void 0:e.points)&&void 0!==d?d:[]);var _="";return{start:function(t){_="M ".concat(t.x," ").concat(t.y," L ").concat(t.x," ").concat(t.y)},move:function(t,e){_+=" ".concat(t.x," ").concat(t.y),v.setAttribute("d",_)},end:function(t,e){p(e),e.length&&(window.interactivePoints=e)}}}},4685:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_InteractiveComponent=e.icdt_PenComponent=void 0;var i=n(3331),r=n(8947),o=n(9427),a=n(670),u=n(5932),c=n(1933),s=n(223),l=n(2103);e.icdt_PenComponent=function(t){switch(o.icdt.pointer.pen_type){case r.V_PenType.DRAW:(0,a.icdt_PointerEvents)(t,new c.icdt_Draw);break;case r.V_PenType.HIGHTLIGH:(0,a.icdt_PointerEvents)(t,new s.icdt_Highlight);break;case r.V_PenType.INTERACTIVE:(0,e.icdt_InteractiveComponent)(t)}},e.icdt_InteractiveComponent=function(t){var e,n,r,c=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.INTERACTIVE_GROUP,"g"),s=null!==(r=null===(n=null===(e=o.icdt.data.slide)||void 0===e?void 0:e.svg)||void 0===n?void 0:n.viewBox)&&void 0!==r?r:function(){var t=o.icdt.screen.get;return{x:0,y:0,width:t.width,height:t.height}}();(0,u.syncNodeInteractive)(c,s),t&&(0,a.icdt_PointerEvents)(t,new l.icdt_Interactive)}},1785:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_PointerComponent=void 0;var i=n(3331),r=n(9427),o=n(2769),a=n(6511),u=n(4255);e.icdt_PointerComponent=function(t){var e,n,c,s,l,d,f,h,v,p,g=(null===(e=t.mouseEvent)||void 0===e?void 0:e.target)||(null===(n=t.touchEvent)||void 0===n?void 0:n.target),y=(null==g?void 0:g.getAttribute("id"))||"",_=null==g?void 0:g.nodeName;r.icdt.dataSelect.nodeName.includes(_)||(g=jQuery(g).parents("foreignObject").get(0))&&(y=g.getAttribute("id")||"",_=g.nodeName);var b=(null===(c=null==g?void 0:g.parentNode)||void 0===c?void 0:c.getAttribute("id"))||"";if([i.V_ID.RESIZE_GROUP,i.V_ID.SELECT_GROUP].includes(b))return null===(s=t.mouseEvent)||void 0===s||s.stopPropagation(),void(null===(l=t.mouseEvent)||void 0===l||l.preventDefault());if((null===(d=t.mouseEvent)||void 0===d?void 0:d.altKey)||(null===(f=t.touchEvent)||void 0===f?void 0:f.altKey)||!y||y.match(/[^0-9]/)||!r.icdt.dataSelect.nodeName.includes(_))r.icdt.dataSelect.ids.length&&(r.icdt.dataSelect.ids=[]),(0==(null===(h=t.mouseEvent)||void 0===h?void 0:h.button)||t.touchEvent)&&(0,o.icdt_Scan)(t);else{var m=parseFloat(y||"0");(null===(v=t.mouseEvent)||void 0===v?void 0:v.shiftKey)||(null===(p=t.touchEvent)||void 0===p?void 0:p.shiftKey)?r.icdt.dataSelect.ids=[m].concat(r.icdt.dataSelect.ids).filter((function(t,e,n){return n.indexOf(t)==e})):r.icdt.dataSelect.ids=[m];var w=r.icdt.dataSelect.nodes;w.length>1?(0,u.icdt_Select)(w):1==w.length&&(0,a.icdt_Resize)(w[0])}}},6511:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Resize=void 0;var i=n(3331),r=n(9427),o=n(184),a=n(670),u=n(5932),c=n(5877);e.icdt_Resize=function(t){var e=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.RESIZE_GROUP,"g");(0,u.syncNodeResize)(e,t).forEach((function(n){s(n.element,n.posType,t,e)}))};var s=function(t,e,n,i){var r=!1;null==t||t.addEventListener("touchstart",(function(t){r=!0,l({touchEvent:t},e,n,i)})),null==t||t.addEventListener("mousedown",(function(t){0==t.button&&(r?r=!1:l({mouseEvent:t},e,n,i))}))},l=function(t,e,n,i){var s,l=n.id,d=n.type,f=n.size,h=n.attribute,v=f.x,p=f.y,g=f.width,y=f.height,_=(g||1)/(y||1),b=null,m=!1,w={start:function(t){b=JSON.parse(JSON.stringify({id:l,size:f,attribute:h}))},move:function(r,a){!function(r,a,b,m){var w,x,S,M,E,k,T,N,A,O,R,C,I,j,P,z,D,V,L,B,F,G,U,K,Q,H,$,q,Y,W,X,J,Z,tt,et,nt,it,rt,ot,at,ut,ct,st,lt,dt,ft,ht,vt,pt,gt,yt=b-r,_t=m-a;switch(e){case"rect-center":s=(null===(w=t.mouseEvent)||void 0===w?void 0:w.shiftKey)||(null===(x=t.touchEvent)||void 0===x?void 0:x.shiftKey)?Math.abs(b-r)>=Math.abs(m-a)?{x:v+b-r,y:p,width:g,height:y}:{x:v,y:p+m-a,width:g,height:y}:{x:v+b-r,y:p+m-a,width:g,height:y};break;case"rect-top-left":s=((null===(S=t.mouseEvent)||void 0===S?void 0:S.shiftKey)||(null===(M=t.touchEvent)||void 0===M?void 0:M.shiftKey))&&((null===(E=t.mouseEvent)||void 0===E?void 0:E.altKey)||(null===(k=t.touchEvent)||void 0===k?void 0:k.altKey))?_>=1?{x:v+(b-r),y:p+(b-r)/_,width:g-2*(b-r),height:y-2*(b-r)/_}:{x:v+(m-a)*_,y:p+(m-a),width:g-2*(m-a)*_,height:y-2*(m-a)}:(null===(T=t.mouseEvent)||void 0===T?void 0:T.shiftKey)||(null===(N=t.touchEvent)||void 0===N?void 0:N.shiftKey)?_>=1?{x:v+(b-r),y:p+(b-r)/_,width:g-(b-r),height:y-(b-r)/_}:{x:v+(m-a)*_,y:p+(m-a),width:g-(m-a)*_,height:y-(m-a)}:(null===(A=t.mouseEvent)||void 0===A?void 0:A.altKey)||(null===(O=t.touchEvent)||void 0===O?void 0:O.altKey)?{x:v+(b-r),y:p+(m-a),width:g-2*(b-r),height:y-2*(m-a)}:{x:v+(b-r),y:p+(m-a),width:g-(b-r),height:y-(m-a)};break;case"rect-top-right":s=((null===(R=t.mouseEvent)||void 0===R?void 0:R.shiftKey)||(null===(C=t.touchEvent)||void 0===C?void 0:C.shiftKey))&&((null===(I=t.mouseEvent)||void 0===I?void 0:I.altKey)||(null===(j=t.touchEvent)||void 0===j?void 0:j.altKey))?_>=1?{x:v-(b-r),y:p-(b-r)/_,width:g+2*(b-r),height:y+2*(b-r)/_}:{x:v+(m-a)*_,y:p+(m-a),width:g-2*(m-a)*_,height:y-2*(m-a)}:(null===(P=t.mouseEvent)||void 0===P?void 0:P.shiftKey)||(null===(z=t.touchEvent)||void 0===z?void 0:z.shiftKey)?_>=1?{x:v,y:p-(b-r)/_,width:g+(b-r),height:y+(b-r)/_}:{x:v,y:p+(m-a),width:g-(m-a)*_,height:y-(m-a)}:(null===(D=t.mouseEvent)||void 0===D?void 0:D.altKey)||(null===(V=t.touchEvent)||void 0===V?void 0:V.altKey)?{x:v-(b-r),y:p+(m-a),width:g+2*(b-r),height:y-2*(m-a)}:{x:v,y:p+(m-a),width:g+(b-r),height:y-(m-a)};break;case"rect-bottom-left":s=((null===(L=t.mouseEvent)||void 0===L?void 0:L.shiftKey)||(null===(B=t.touchEvent)||void 0===B?void 0:B.shiftKey))&&((null===(F=t.mouseEvent)||void 0===F?void 0:F.altKey)||(null===(G=t.touchEvent)||void 0===G?void 0:G.altKey))?_>=1?{x:v+(b-r),y:p+(b-r)/_,width:g-2*(b-r),height:y-2*(b-r)/_}:{x:v-(m-a)*_,y:p-(m-a),width:g+2*(m-a)*_,height:y+2*(m-a)}:(null===(U=t.mouseEvent)||void 0===U?void 0:U.shiftKey)||(null===(K=t.touchEvent)||void 0===K?void 0:K.shiftKey)?_>=1?{x:v+(b-r),y:p,width:g-(b-r),height:y-(b-r)/_}:{x:v-(m-a)*_,y:p,width:g+(m-a)*_,height:y+(m-a)}:(null===(Q=t.mouseEvent)||void 0===Q?void 0:Q.altKey)||(null===(H=t.touchEvent)||void 0===H?void 0:H.altKey)?{x:v+(b-r),y:p-(m-a),width:g-2*(b-r),height:y+2*(m-a)}:{x:v+(b-r),y:p,width:g-(b-r),height:y+(m-a)};break;case"rect-bottom-right":s=((null===($=t.mouseEvent)||void 0===$?void 0:$.shiftKey)||(null===(q=t.touchEvent)||void 0===q?void 0:q.shiftKey))&&((null===(Y=t.mouseEvent)||void 0===Y?void 0:Y.altKey)||(null===(W=t.touchEvent)||void 0===W?void 0:W.altKey))?_>=1?{x:v-(b-r),y:p-(b-r)/_,width:g+2*(b-r),height:y+2*(b-r)/_}:{x:v-(m-a)*_,y:p-(m-a),width:g+2*(m-a)*_,height:y+2*(m-a)}:(null===(X=t.mouseEvent)||void 0===X?void 0:X.shiftKey)||(null===(J=t.touchEvent)||void 0===J?void 0:J.shiftKey)?_>=1?{x:v,y:p,width:g+(b-r),height:y+(b-r)/_}:{x:v,y:p,width:g+(m-a)*_,height:y+(m-a)}:(null===(Z=t.mouseEvent)||void 0===Z?void 0:Z.altKey)||(null===(tt=t.touchEvent)||void 0===tt?void 0:tt.altKey)?{x:v-(b-r),y:p-(m-a),width:g+2*(b-r),height:y+2*(m-a)}:{x:v,y:p,width:g+(b-r),height:y+(m-a)};break;case"rect-top":s=(null===(et=t.mouseEvent)||void 0===et?void 0:et.shiftKey)||(null===(nt=t.touchEvent)||void 0===nt?void 0:nt.shiftKey)?{x:v+_t/2*_,y:p+_t,width:g-_t*_,height:y-_t}:(null===(it=t.mouseEvent)||void 0===it?void 0:it.altKey)||(null===(rt=t.touchEvent)||void 0===rt?void 0:rt.altKey)?{x:v,y:p+_t,width:g,height:y-2*_t}:{x:v,y:p+_t,width:g,height:y-_t};break;case"rect-bottom":s=(null===(ot=t.mouseEvent)||void 0===ot?void 0:ot.shiftKey)||(null===(at=t.touchEvent)||void 0===at?void 0:at.shiftKey)?{x:v-_t/2*_,y:p,width:g+_t*_,height:y+_t}:(null===(ut=t.mouseEvent)||void 0===ut?void 0:ut.altKey)||(null===(ct=t.touchEvent)||void 0===ct?void 0:ct.altKey)?{x:v,y:p-_t,width:g,height:y+2*_t}:{x:v,y:p,width:g,height:y+_t};break;case"rect-left":s=(null===(st=t.mouseEvent)||void 0===st?void 0:st.shiftKey)||(null===(lt=t.touchEvent)||void 0===lt?void 0:lt.shiftKey)?{x:v+yt,y:p+yt/2/_,width:g-yt,height:y-yt/_}:(null===(dt=t.mouseEvent)||void 0===dt?void 0:dt.altKey)||(null===(ft=t.touchEvent)||void 0===ft?void 0:ft.altKey)?{x:v+yt,y:p,width:g-2*yt,height:y}:{x:v+yt,y:p,width:g-yt,height:y};break;case"rect-right":s=(null===(ht=t.mouseEvent)||void 0===ht?void 0:ht.shiftKey)||(null===(vt=t.touchEvent)||void 0===vt?void 0:vt.shiftKey)?{x:v,y:p-yt/2/_,width:g+yt,height:y+yt/_}:(null===(pt=t.mouseEvent)||void 0===pt?void 0:pt.altKey)||(null===(gt=t.touchEvent)||void 0===gt?void 0:gt.altKey)?{x:v-yt,y:p,width:g+2*yt,height:y}:{x:v,y:p,width:g+yt,height:y};break;default:s={x:v+b-r,y:p+m-a,width:g,height:y}}s.width<0&&(s.width=0),s.height<0&&(s.height=0),s.x=(0,c.icdt_RoundNumber)(s.x),s.y=(0,c.icdt_RoundNumber)(s.y),s.width=(0,c.icdt_RoundNumber)(s.width),s.height=(0,c.icdt_RoundNumber)(s.height),Object.assign(f,s),Object.assign(h,(0,o.icdt_Size2Attribute)(d,f,h)),(0,u.icdt_SyncSvgNodeAttribute)(window.document.getElementById(l),h),(0,u.syncNodeResize)(i,n)}(a[0][0],a[0][1],r.x,r.y),m=!0},end:function(t,e){m&&b&&r.icdt.history.push([{type:"size",from:b,to:JSON.parse(JSON.stringify({id:l,size:f,attribute:h}))}])}};(0,a.icdt_PointerEvents)(t,w)}},2769:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Scan=void 0;var i=n(3331),r=n(9427),o=n(184),a=n(670),u=n(5932),c=n(6511),s=n(4255);e.icdt_Scan=function(t){var e=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.SCAN_GROUP,"g"),n=(0,o.icdt_Offset2Size)(0,0,1,1);(0,u.syncNodeScan)(e,n),l(t,n,e)};var l=function(t,e,n){var i={start:function(t){},move:function(t,i){var r,a,c,s;r=i[0][0],a=i[0][1],c=t.x,s=t.y,e=(0,o.icdt_Offset2Size)(r,a,c,s),(0,u.syncNodeScan)(n,e)},end:function(t,e){null==n||n.remove(),r.icdt.dataSelect.ids=r.icdt.data.getNodeInArea(Math.min(e[0][0],t.x),Math.min(e[0][1],t.y),Math.max(e[0][0],t.x),Math.max(e[0][1],t.y));var i=r.icdt.dataSelect.nodes;1==i.length?(0,c.icdt_Resize)(i[0]):i.length>1&&(0,s.icdt_Select)(i)}};(0,a.icdt_PointerEvents)(t,i)}},4255:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Select=void 0;var i=n(3331),r=n(9427),o=n(184),a=n(670),u=n(5932),c=n(5877);e.icdt_Select=function(t){var e=999999,n=999999,r=-999999,a=-999999;null==t||t.forEach((function(t){e=Math.min(e,t.size.x),n=Math.min(n,t.size.y),r=Math.max(r,t.size.x+t.size.width),a=Math.max(a,t.size.y+t.size.height)}));var c=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.SELECT_GROUP,"g"),l=(0,o.icdt_Offset2Size)(e,n,r,a);(0,u.syncNodeSelect)(c,t,l).forEach((function(e){s(e.element,e.posType,l,t,c)}))};var s=function(t,e,n,i,r){var o=!1;null==t||t.addEventListener("touchstart",(function(t){o=!0,l({touchEvent:t},e,n,i,r)})),null==t||t.addEventListener("mousedown",(function(t){0==t.button&&(o?o=!1:l({mouseEvent:t},e,n,i,r))}))},l=function(t,e,n,i,s){var l=n.x,d=n.y,f=n.width,h=n.height,v=i.map((function(t){return Object.assign({},t.size)})),p=[],g={start:function(t){i.forEach((function(t,e){var n=t.id,i=(t.type,t.size),r=t.attribute;p.push(JSON.parse(JSON.stringify({id:n,size:i,attribute:r})))}))},move:function(t,r){var a,p,g,y,_;a=r[0][0],p=r[0][1],g=t.x,y=t.y,(_="rect-center"===e?{x:l+g-a,y:d+y-p,width:f,height:h}:{x:l,y:d,width:f,height:h}).width<0&&(_.width=0),_.height<0&&(_.height=0),Object.assign(n,_),(0,u.syncNodeSelect)(s,i,n),i.forEach((function(t,n){var i,r=v[n],s=r.x,l=r.y,d=r.width,f=r.height,h=t.id,_=t.type,b=t.size,m=t.attribute;(i="rect-center"===e?{x:s+g-a,y:l+y-p,width:d,height:f}:{x:s,y:l,width:d,height:f}).width<0&&(i.width=0),i.height<0&&(i.height=0),i.x=(0,c.icdt_RoundNumber)(i.x),i.y=(0,c.icdt_RoundNumber)(i.y),i.width=(0,c.icdt_RoundNumber)(i.width),i.height=(0,c.icdt_RoundNumber)(i.height),Object.assign(b,i),Object.assign(m,(0,o.icdt_Size2Attribute)(_,b,m)),(0,u.icdt_SyncSvgNodeAttribute)(window.document.getElementById(h),m)}))},end:function(t,e){p.length&&r.icdt.history.push(i.map((function(t,e){var n=t.id,i=(t.type,t.size),r=t.attribute;return{type:"size",from:p[e],to:JSON.parse(JSON.stringify({id:n,size:i,attribute:r}))}})))}};(0,a.icdt_PointerEvents)(t,g)}},1724:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SortComponent=e.icdt_RenderComponent=void 0;var i=n(3331),r=n(303),o=n(4644),a=n(8539),u=n(5127),c=n(4971),s=n(2263),l=n(2121),d=n(2613),f=n(5677),h=n(6383),v=n(451),p=n(9427),g=n(5932);e.icdt_RenderComponent=function(t,e,n){var y;if(!e||(null!=n?n:window).document.getElementById(e)){if("localhost"==location.hostname&&console.log("áááááá sợ quá điiiiiiiiiiiiiiiiiiiiiiiiiii!",e),e){var _=(null!=n?n:window).document.getElementById(e);jQuery(_).find("#"+i.V_ID.BACKGROUND_GROUP).empty();var b=(0,g.icdt_SyncSvgNode4Design)(i.V_ID.BACKGROUND_GROUP,"g",void 0,_);(0,g.syncBackground)(b,t)}else jQuery(p.icdt.target).find("#"+i.V_ID.BACKGROUND_GROUP).empty(),b=(0,g.icdt_SyncSvgNode4Design)(i.V_ID.BACKGROUND_GROUP,"g",void 0,p.icdt.target),(0,g.syncBackground)(b,t);var m=function(t,i){i=e&&i?"".concat(e,"-").concat(i):null!=e?e:i,null==t||t.forEach((function(t){var p,g=e?"".concat(e,"-").concat(t.id):t.id;if(t.isdeleted)null===(p=(null!=n?n:window).document.getElementById(g))||void 0===p||p.remove();else switch(t.type){case l.V_ShapeType.GROUP:(0,s.icdt_SvgGroup)(g,{},i?(null!=n?n:window).document.getElementById(i):null),m(t.nodes,t.id);break;case l.V_ShapeType.CIRCLE:(0,r.icdt_SvgCircle)(g,{size:t.size,attribute:t.attribute},i?(null!=n?n:window).document.getElementById(i):null);break;case l.V_ShapeType.ELLIPSE:(0,o.icdt_SvgEllipse)(g,{size:t.size,attribute:t.attribute},i?(null!=n?n:window).document.getElementById(i):null);break;case l.V_ShapeType.LINE:(0,c.icdt_SvgLine)(g,{size:t.size,attribute:t.attribute},i?(null!=n?n:window).document.getElementById(i):null);break;case l.V_ShapeType.RECT:(0,u.icdt_SvgRect)(g,{size:t.size,attribute:t.attribute},i?(null!=n?n:window).document.getElementById(i):null);break;case l.V_ShapeType.POLYGON:(0,a.icdt_SvgPolygon)(g,{size:t.size,attribute:t.attribute},i?(null!=n?n:window).document.getElementById(i):null);break;case l.V_ShapeType.FOREIGNOBJECT:(0,h.icdt_SvgForeignObject)(g,{size:t.size,attribute:t.attribute,style:t.style,source:t.source},i?(null!=n?n:window).document.getElementById(i):null);break;case l.V_ShapeType.IMAGE:(0,v.icdt_SvgImage)(g,{size:t.size,attribute:t.attribute,source:t.source},i?(null!=n?n:window).document.getElementById(i):null);break;case l.V_ShapeType.TEXT:(0,f.icdt_SvgText)(g,{size:t.size,attribute:t.attribute,source:t.source},i?(null!=n?n:window).document.getElementById(i):null);break;case l.V_ShapeType.PATH:(0,d.icdt_SvgPath)(g,{size:t.size,attribute:t.attribute},i?(null!=n?n:window).document.getElementById(i):null)}}))};m(null===(y=null==t?void 0:t.svg)||void 0===y?void 0:y.nodes)}},e.icdt_SortComponent=function(t,e){var n;if(!e||window.document.getElementById(e)){var i=function(t,n){n=n?"".concat(e,"-").concat(n):e,null==t||t.forEach((function(t){var r=e?"".concat(e,"-").concat(t.id):t.id;jQuery("#"+r).appendTo(n?window.document.getElementById(n):p.icdt.target),t.type==l.V_ShapeType.GROUP&&i(t.nodes,t.id)}))};i(null===(n=null==t?void 0:t.svg)||void 0===n?void 0:n.nodes)}}},6633:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_ShapeComponent=void 0;var i=n(2121),r=n(5611),o=n(9427),a=n(440),u=n(9904),c=n(7520),s=n(220),l=n(4828),d=n(670),f=n(8338),h=n(2376),v=n(3124);e.icdt_ShapeComponent=function(t){var e,n=null;switch(o.icdt.pointer.shape_type){case i.V_ShapeType.CIRCLE:n=new a.icdt_SvgCircleCreate;break;case i.V_ShapeType.ELLIPSE:n=new u.icdt_SvgEllipseCreate;break;case i.V_ShapeType.LINE:n=new l.icdt_SvgLineCreate;break;case i.V_ShapeType.RECT:n=new c.icdt_SvgRectCreate;break;case i.V_ShapeType.POLYGON:n=new s.icdt_SvgPolygonCreate(null===(e=r.V_PolygonRatio.find((function(t){return t.type==o.icdt.pointer.polygon_type})))||void 0===e?void 0:e.ratios);break;case i.V_ShapeType.FOREIGNOBJECT:n=new h.icdt_SvgForeignObjectCreate;break;case i.V_ShapeType.IMAGE:n=new v.icdt_SvgImageCreate;break;case i.V_ShapeType.TEXT:case i.V_ShapeType.PATH:n=new f.icdt_SvgPathCreate}n&&(0,d.icdt_PointerEvents)(t,n)}},440:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgCircleCreate=void 0;var i=n(3331),r=n(2121),o=n(9427),a=n(184),u=n(5932),c=n(303),s=n(5877);e.icdt_SvgCircleCreate=function(){var t=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.CREATE_GROUP,"g"),e=(0,c.icdt_SvgCircle)(Math.ceil(1e9*Math.random())),n=e.nodeId,l=e.element,d=e.attribute,f=e.size,h=function(e,n,i,o){(f=(0,a.icdt_Offset2Size)(e,n,i,o,{ratio:1})).x=(0,s.icdt_RoundNumber)(f.x),f.y=(0,s.icdt_RoundNumber)(f.y),f.width=(0,s.icdt_RoundNumber)(f.width),f.height=(0,s.icdt_RoundNumber)(f.height),Object.assign(d,(0,a.icdt_Size2Attribute)(r.V_ShapeType.CIRCLE,f,d)),(0,u.icdt_SyncSvgNodeAttribute)(l,d),(0,u.syncNodeCreate)(t,f)};return{start:function(t){h(t.x,t.y,t.x+f.width,t.y+f.height)},move:function(t,e){h(e[0][0],e[0][1],t.x,t.y)},end:function(e,i){(f.width<=16||f.height<=16)&&(f.width=80,f.height=80,f.x=f.x-f.width/2,f.y=f.y-f.height/2,Object.assign(d,(0,a.icdt_Size2Attribute)(r.V_ShapeType.CIRCLE,f,d)),(0,u.icdt_SyncSvgNodeAttribute)(l,d)),o.icdt.data.node=Object.assign({id:n,type:r.V_ShapeType.CIRCLE,name:"Circle"},{size:f,attribute:d}),null==t||t.remove()}}}},303:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgCircle=void 0;var i=n(2121),r=n(9427),o=n(184),a=n(5932);e.icdt_SvgCircle=function(t,e,n){var u=(null==e?void 0:e.size)||{x:0,y:0,width:10,height:10},c=(null==e?void 0:e.attribute)||{fill:r.icdt.attribute.fill,stroke:r.icdt.attribute.stroke,strokeWidth:r.icdt.attribute.strokeWidth};return Object.assign(c,(0,o.icdt_Size2Attribute)(i.V_ShapeType.CIRCLE,u,c)),{nodeId:t,element:(0,a.icdt_SyncSvgNode)(t,i.V_ShapeType.CIRCLE,"circle",{size:u,attribute:c},n),size:u,attribute:c}}},9904:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgEllipseCreate=void 0;var i=n(3331),r=n(2121),o=n(9427),a=n(184),u=n(5932),c=n(4644),s=n(5877);e.icdt_SvgEllipseCreate=function(){var t=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.CREATE_GROUP,"g"),e=(0,c.icdt_SvgEllipse)(Math.ceil(1e9*Math.random())),n=e.nodeId,l=e.element,d=e.attribute,f=e.size,h=function(e,n,i,o){(f=(0,a.icdt_Offset2Size)(e,n,i,o)).x=(0,s.icdt_RoundNumber)(f.x),f.y=(0,s.icdt_RoundNumber)(f.y),f.width=(0,s.icdt_RoundNumber)(f.width),f.height=(0,s.icdt_RoundNumber)(f.height),Object.assign(d,(0,a.icdt_Size2Attribute)(r.V_ShapeType.ELLIPSE,f,d)),(0,u.icdt_SyncSvgNodeAttribute)(l,d),(0,u.syncNodeCreate)(t,f)};return{start:function(t){h(t.x,t.y,t.x+f.width,t.y+f.height)},move:function(t,e){h(e[0][0],e[0][1],t.x,t.y)},end:function(e,i){(f.width<=16||f.height<=16)&&(f.width=90,f.height=60,f.x=f.x-f.width/2,f.y=f.y-f.height/2,Object.assign(d,(0,a.icdt_Size2Attribute)(r.V_ShapeType.ELLIPSE,f,d)),(0,u.icdt_SyncSvgNodeAttribute)(l,d)),o.icdt.data.node=Object.assign({id:n,type:r.V_ShapeType.ELLIPSE,name:"Ellipse"},{size:f,attribute:d}),null==t||t.remove()}}}},4644:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgEllipse=void 0;var i=n(2121),r=n(9427),o=n(184),a=n(5932);e.icdt_SvgEllipse=function(t,e,n){var u=(null==e?void 0:e.size)||{x:0,y:0,width:10,height:10},c=(null==e?void 0:e.attribute)||{fill:r.icdt.attribute.fill,stroke:r.icdt.attribute.stroke,strokeWidth:r.icdt.attribute.strokeWidth};return Object.assign(c,(0,o.icdt_Size2Attribute)(i.V_ShapeType.ELLIPSE,u,c)),{nodeId:t,element:(0,a.icdt_SyncSvgNode)(t,i.V_ShapeType.ELLIPSE,"ellipse",{size:u,attribute:c},n),size:u,attribute:c}}},2376:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgForeignObjectCreate=void 0;var i=n(3331),r=n(2121),o=n(9427),a=n(184),u=n(5932),c=n(6383),s=n(5877);e.icdt_SvgForeignObjectCreate=function(){var t=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.CREATE_GROUP,"g"),e=(0,c.icdt_SvgForeignObject)(Math.ceil(1e9*Math.random())),n=e.nodeId,l=e.element,d=e.size,f=e.attribute,h=e.style,v=e.source,p=function(e,n,i,o){(d=(0,a.icdt_Offset2Size)(e,n,i,o)).x=(0,s.icdt_RoundNumber)(d.x),d.y=(0,s.icdt_RoundNumber)(d.y),d.width=(0,s.icdt_RoundNumber)(d.width),d.height=(0,s.icdt_RoundNumber)(d.height),Object.assign(f,(0,a.icdt_Size2Attribute)(r.V_ShapeType.FOREIGNOBJECT,d,f)),(0,u.icdt_SyncSvgNodeAttribute)(l,f),(0,u.syncNodeCreate)(t,d)};return{start:function(t){p(t.x,t.y,t.x+d.width,t.y+d.height)},move:function(t,e){p(e[0][0],e[0][1],t.x,t.y)},end:function(e,i){(d.width<=16||d.height<=16)&&(d.width=90,d.height=60,d.x=d.x-d.width/2,d.y=d.y-d.height/2,Object.assign(f,(0,a.icdt_Size2Attribute)(r.V_ShapeType.FOREIGNOBJECT,d,f)),(0,u.icdt_SyncSvgNodeAttribute)(l,f)),o.icdt.data.node=Object.assign({id:n,type:r.V_ShapeType.FOREIGNOBJECT,name:"ForeignObject"},{size:d,attribute:f,style:h,source:v}),null==t||t.remove()}}}},6383:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgForeignObject=void 0;var i=n(2121),r=n(184),o=n(5932);e.icdt_SvgForeignObject=function(t,e,n){var a=(null==e?void 0:e.size)||{x:0,y:0,width:320,height:80},u=(null==e?void 0:e.attribute)||{};Object.assign(u,(0,r.icdt_Size2Attribute)(i.V_ShapeType.FOREIGNOBJECT,a,u));var c=(null==e?void 0:e.source)||{type:"html",html:{htmlContent:'<span style="font-family: Roboto; font-size: 24px;">Hãy nhập nội dung của bạn!</span>'}},s=(null==e?void 0:e.style)||{};return{nodeId:t,element:(0,o.icdt_SyncSvgNode)(t,i.V_ShapeType.FOREIGNOBJECT,"foreignObject",{size:a,attribute:u,style:s,source:c},n),size:a,attribute:u,style:s,source:c}}},2263:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgGroup2=e.icdt_SvgGroup=void 0;var i=n(2121),r=n(184),o=n(5932);e.icdt_SvgGroup=function(t,e,n){var a=(null==e?void 0:e.size)||{x:0,y:0,width:10,height:10},u=(null==e?void 0:e.attribute)||{};return Object.assign(u,(0,r.icdt_Size2Attribute)(i.V_ShapeType.GROUP,a,u)),{nodeId:t,element:(0,o.icdt_SyncSvgNode)(t,i.V_ShapeType.GROUP,"g",{size:a,attribute:u},n),size:a,attribute:u}},e.icdt_SvgGroup2=function(t,e,n){var a=(null==e?void 0:e.size)||{x:0,y:0,width:10,height:10},u=(null==e?void 0:e.attribute)||{};return Object.assign(u,(0,r.icdt_Size2Attribute)(i.V_ShapeType.GROUP,a,u)),{nodeId:t,element:(0,o.icdt_SyncSvgNode)(t,i.V_ShapeType.GROUP,"g",{size:a,attribute:u},n),size:a,attribute:u}}},3124:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgImageCreate=void 0;var i=n(3331),r=n(2121),o=n(9427),a=n(184),u=n(5932),c=n(5877),s=n(451);e.icdt_SvgImageCreate=function(){var t,e,n=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.CREATE_GROUP,"g"),l=(0,s.icdt_SvgImage)(Math.ceil(1e9*Math.random())),d=l.nodeId,f=l.element,h=l.size,v=l.attribute,p=l.source,g=1;!function(t){if(t){var e=new Image;e.onload=function(){g=(0,c.icdt_RoundNumber)(e.naturalWidth/e.naturalHeight,100)},e.onerror=function(e){console.error("ImgSrc load failed -> ".concat(t),e)},e.src=t}}(null!==(e=null===(t=p.image)||void 0===t?void 0:t.url)&&void 0!==e?e:"");var y=function(t,e,i,o){(h=(0,a.icdt_Offset2Size)(t,e,i,o,{ratio:g})).x=(0,c.icdt_RoundNumber)(h.x),h.y=(0,c.icdt_RoundNumber)(h.y),h.width=(0,c.icdt_RoundNumber)(h.width),h.height=(0,c.icdt_RoundNumber)(h.height),Object.assign(v,(0,a.icdt_Size2Attribute)(r.V_ShapeType.IMAGE,h,v)),(0,u.icdt_SyncSvgNodeAttribute)(f,v),(0,u.syncNodeCreate)(n,h)};return{start:function(t){y(t.x,t.y,t.x+h.width,t.y+h.height)},move:function(t,e){y(e[0][0],e[0][1],t.x,t.y)},end:function(t,e){(h.width<=16||h.height<=16)&&(h.width=80,h.height=80,h.x=h.x-h.width/2,h.y=h.y-h.height/2,Object.assign(v,(0,a.icdt_Size2Attribute)(r.V_ShapeType.IMAGE,h,v)),(0,u.icdt_SyncSvgNodeAttribute)(f,v)),o.icdt.data.node=Object.assign({id:d,type:r.V_ShapeType.IMAGE,name:"Image"},{size:h,attribute:v,source:p}),null==n||n.remove()}}}},451:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgImage=void 0;var i=n(2121),r=n(184),o=n(5932);e.icdt_SvgImage=function(t,e,n){var a=(null==e?void 0:e.size)||{x:0,y:0,width:10,height:10},u=(null==e?void 0:e.attribute)||{preserveAspectRatio:"none"};Object.assign(u,(0,r.icdt_Size2Attribute)(i.V_ShapeType.IMAGE,a,u));var c=(null==e?void 0:e.source)||{type:"image",image:{url:"../../assets/image-svg/logo.svg",path:"assets/image-svg/logo.svg",name:"logo.svg"}};return{nodeId:t,element:(0,o.icdt_SyncSvgNode)(t,i.V_ShapeType.IMAGE,"image",{size:a,attribute:u,source:c},n),size:a,attribute:u,source:c}}},4828:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgLineCreate=void 0;var i=n(3331),r=n(2121),o=n(9427),a=n(184),u=n(5932),c=n(4971),s=n(5877);e.icdt_SvgLineCreate=function(){var t=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.CREATE_GROUP,"g"),e=(0,c.icdt_SvgLine)(Math.ceil(1e9*Math.random())),n=e.nodeId,l=e.element,d=e.attribute,f=e.size;return{start:function(t){},move:function(e,n){var i,o,c,h;i=n[0][0],o=n[0][1],c=e.x,h=e.y,(f=(0,a.icdt_Offset2Size)(i,o,c,h)).x=(0,s.icdt_RoundNumber)(f.x),f.y=(0,s.icdt_RoundNumber)(f.y),f.width=(0,s.icdt_RoundNumber)(f.width),f.height=(0,s.icdt_RoundNumber)(f.height),Object.assign(d,(0,a.icdt_Size2Attribute)(r.V_ShapeType.LINE,f,d)),(0,u.icdt_SyncSvgNodeAttribute)(l,d),(0,u.syncNodeCreate)(t,f)},end:function(e,i){i.length>=2?((f.width<=16||f.height<=16)&&(f.width=80,f.height=80,f.x=f.x-f.width/2,f.y=f.y-f.height/2,Object.assign(d,(0,a.icdt_Size2Attribute)(r.V_ShapeType.LINE,f,d)),(0,u.icdt_SyncSvgNodeAttribute)(l,d)),o.icdt.data.node=Object.assign({id:n,type:r.V_ShapeType.LINE,name:"Line"},{size:f,attribute:d})):null==l||l.remove(),null==t||t.remove()}}}},4971:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgLine=void 0;var i=n(2121),r=n(9427),o=n(184),a=n(5932);e.icdt_SvgLine=function(t,e,n){var u=(null==e?void 0:e.size)||{x:0,y:0,width:10,height:10},c=(null==e?void 0:e.attribute)||{stroke:r.icdt.attribute.stroke,strokeWidth:r.icdt.attribute.strokeWidth,strokeLinecap:r.icdt.attribute.strokeLinecap};return Object.assign(c,(0,o.icdt_Size2Attribute)(i.V_ShapeType.LINE,u,c)),{nodeId:t,element:(0,a.icdt_SyncSvgNode)(t,i.V_ShapeType.LINE,"line",{size:u,attribute:c},n),size:u,attribute:c}}},8338:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgPathCreate=void 0;var i=n(9922),r=n(2121),o=n(9427),a=(n(184),n(5932),n(2613));e.icdt_SvgPathCreate=function(){var t=(0,a.icdt_SvgPath)(Math.ceil(1e9*Math.random())),e=t.nodeId,n=t.element,u=t.attribute,c=t.size,s="";return{start:function(t){s="M ".concat(t.x," ").concat(t.y," L ").concat(t.x," ").concat(t.y)},move:function(t,e){var i,r;i=t.x,r=t.y,s+=" ".concat(i," ").concat(r),n.setAttribute("d",s)},end:function(t,n){var a=(0,i.icdt_Adapter_PathD_2_PointMaps)(s),l=(0,i.icdt_Adapter_PointMaps_Extract_MinMaxXY)(a),d=l.minX,f=l.minY,h=l.maxX,v=l.maxY;c.x=d,c.y=f,c.width=h-d||1,c.height=v-f||1,c.ratioMaps=(0,i.icdt_Adapter_PointMaps_2_RatioMaps)(c,a),o.icdt.data.node=Object.assign({id:e,type:r.V_ShapeType.PATH,name:"Path"},{size:c,attribute:u})}}}},2613:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgPath=void 0;var i=n(2121),r=n(9427),o=n(184),a=n(5932);e.icdt_SvgPath=function(t,e,n){var u=(null==e?void 0:e.size)||{x:0,y:0,width:10,height:10},c=(null==e?void 0:e.attribute)||{stroke:r.icdt.attribute.stroke,strokeWidth:r.icdt.attribute.strokeWidth};return Object.assign(c,(0,o.icdt_Size2Attribute)(i.V_ShapeType.PATH,u,c)),{nodeId:t,element:(0,a.icdt_SyncSvgNode)(t,i.V_ShapeType.PATH,"path",{size:u,attribute:c},n),size:u,attribute:c}}},220:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgPolygonCreate=void 0;var i=n(3331),r=n(2121),o=n(9427),a=n(184),u=n(5932),c=n(8539),s=n(5877);e.icdt_SvgPolygonCreate=function(t){var e=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.CREATE_GROUP,"g"),n=t||[[0,0],[1,1],[0,1]],l=(0,c.icdt_SvgPolygon)(Math.ceil(1e9*Math.random())),d=l.nodeId,f=l.element,h=l.attribute,v=l.size;v.ratios=n;var p=function(t,i,o,c){(v=(0,a.icdt_Offset2Size)(t,i,o,c,{ratios:n})).x=(0,s.icdt_RoundNumber)(v.x),v.y=(0,s.icdt_RoundNumber)(v.y),v.width=(0,s.icdt_RoundNumber)(v.width),v.height=(0,s.icdt_RoundNumber)(v.height),Object.assign(h,(0,a.icdt_Size2Attribute)(r.V_ShapeType.POLYGON,v,h)),(0,u.icdt_SyncSvgNodeAttribute)(f,h),(0,u.syncNodeCreate)(e,v)};return{start:function(t){p(t.x,t.y,t.x+v.width,t.y+v.height)},move:function(t,e){p(e[0][0],e[0][1],t.x,t.y)},end:function(t,n){(v.width<=16||v.height<=16)&&(v.width=80,v.height=80,v.x=v.x-v.width/2,v.y=v.y-v.height/2,Object.assign(h,(0,a.icdt_Size2Attribute)(r.V_ShapeType.POLYGON,v,h)),(0,u.icdt_SyncSvgNodeAttribute)(f,h)),o.icdt.data.node=Object.assign({id:d,type:r.V_ShapeType.POLYGON,name:"Polygon"},{size:v,attribute:h}),null==e||e.remove()}}}},8539:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgPolygon=void 0;var i=n(2121),r=n(9427),o=n(184),a=n(5932);e.icdt_SvgPolygon=function(t,e,n){var u=(null==e?void 0:e.size)||{x:0,y:0,width:10,height:10},c=(null==e?void 0:e.attribute)||{fill:r.icdt.attribute.fill,stroke:r.icdt.attribute.stroke,strokeWidth:r.icdt.attribute.strokeWidth};return Object.assign(c,(0,o.icdt_Size2Attribute)(i.V_ShapeType.POLYGON,u,c)),{nodeId:t,element:(0,a.icdt_SyncSvgNode)(t,i.V_ShapeType.POLYGON,"polygon",{size:u,attribute:c},n),size:u,attribute:c}}},7520:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgRectCreate=void 0;var i=n(3331),r=n(2121),o=n(9427),a=n(184),u=n(5932),c=n(5127),s=n(5877);e.icdt_SvgRectCreate=function(){var t=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.CREATE_GROUP,"g"),e=(0,c.icdt_SvgRect)(Math.ceil(1e9*Math.random())),n=e.nodeId,l=e.element,d=e.attribute,f=e.size,h=function(e,n,i,o){(f=(0,a.icdt_Offset2Size)(e,n,i,o)).x=(0,s.icdt_RoundNumber)(f.x),f.y=(0,s.icdt_RoundNumber)(f.y),f.width=(0,s.icdt_RoundNumber)(f.width),f.height=(0,s.icdt_RoundNumber)(f.height),Object.assign(d,(0,a.icdt_Size2Attribute)(r.V_ShapeType.RECT,f,d)),(0,u.icdt_SyncSvgNodeAttribute)(l,d),(0,u.syncNodeCreate)(t,f)};return{start:function(t){h(t.x,t.y,t.x+f.width,t.y+f.height)},move:function(t,e){h(e[0][0],e[0][1],t.x,t.y)},end:function(e,i){(f.width<=16||f.height<=16)&&(f.width=80,f.height=80,f.x=f.x-f.width/2,f.y=f.y-f.height/2,Object.assign(d,(0,a.icdt_Size2Attribute)(r.V_ShapeType.RECT,f,d)),(0,u.icdt_SyncSvgNodeAttribute)(l,d)),o.icdt.data.node=Object.assign({id:n,type:r.V_ShapeType.RECT,name:"Rect"},{size:f,attribute:d}),null==t||t.remove()}}}},5127:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgRect=void 0;var i=n(2121),r=n(9427),o=n(184),a=n(5932);e.icdt_SvgRect=function(t,e,n){var u=(null==e?void 0:e.size)||{x:0,y:0,width:10,height:10},c=(null==e?void 0:e.attribute)||{fill:r.icdt.attribute.fill,stroke:r.icdt.attribute.stroke,strokeWidth:r.icdt.attribute.strokeWidth};return Object.assign(c,(0,o.icdt_Size2Attribute)(i.V_ShapeType.RECT,u,c)),{nodeId:t,element:(0,a.icdt_SyncSvgNode)(t,i.V_ShapeType.RECT,"rect",{size:u,attribute:c},n),size:u,attribute:c}}},2026:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgTextCreate=void 0;var i=n(3331),r=n(2121),o=n(9427),a=n(184),u=n(5932),c=n(5677),s=n(5877);e.icdt_SvgTextCreate=function(){var t=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.CREATE_GROUP,"g"),e=(0,c.icdt_SvgText)(Math.ceil(1e9*Math.random())),n=e.nodeId,l=e.element,d=e.attribute,f=e.size,h=e.source,v=function(e,n,i,o){(f=(0,a.icdt_Offset2Size)(e,n,i,o)).x=(0,s.icdt_RoundNumber)(f.x),f.y=(0,s.icdt_RoundNumber)(f.y),f.width=(0,s.icdt_RoundNumber)(f.width),f.height=(0,s.icdt_RoundNumber)(f.height),Object.assign(d,(0,a.icdt_Size2Attribute)(r.V_ShapeType.TEXT,f,d)),(0,u.icdt_SyncSvgNodeAttribute)(l,d),(0,u.syncNodeCreate)(t,f)};return{start:function(t){v(t.x,t.y,t.x+f.width,t.y+f.height)},move:function(t,e){v(e[0][0],e[0][1],t.x,t.y)},end:function(e,i){(f.width<=16||f.height<=16)&&(f.width=80,f.height=80,f.x=f.x-f.width/2,f.y=f.y-f.height/2,Object.assign(d,(0,a.icdt_Size2Attribute)(r.V_ShapeType.TEXT,f,d)),(0,u.icdt_SyncSvgNodeAttribute)(l,d)),o.icdt.data.node=Object.assign({id:n,type:r.V_ShapeType.TEXT,name:"Text"},{size:f,attribute:d,source:h}),null==t||t.remove()}}}},5677:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgText=void 0;var i=n(2121),r=n(9427),o=n(184),a=n(5932);e.icdt_SvgText=function(t,e,n){var u=(null==e?void 0:e.size)||{x:0,y:0,width:320,height:80},c=(null==e?void 0:e.attribute)||{fill:r.icdt.attribute.stroke,fontFamily:r.icdt.attribute.fontFamily,fontSize:r.icdt.attribute.fontSize,textLength:r.icdt.attribute.textLength};Object.assign(c,(0,o.icdt_Size2Attribute)(i.V_ShapeType.TEXT,u,c));var s=(null==e?void 0:e.source)||{type:"text",text:{textContent:"Hãy nhập nội dung của bạn!"}};return{nodeId:t,element:(0,a.icdt_SyncSvgNode)(t,i.V_ShapeType.TEXT,"text",{size:u,attribute:c,source:s},n),size:u,attribute:c,source:s}}},4897:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_TextComponent=void 0;var i=n(670),r=n(2026);e.icdt_TextComponent=function(t){(0,i.icdt_PointerEvents)(t,new r.icdt_SvgTextCreate)}},184:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_OffsetSwitch=e.icdt_Size2Attribute=e.icdt_Offset2Size=void 0;var i=n(2121),r=n(9922);e.icdt_Offset2Size=function(t,e,n,i,r){var o={x:Math.min(t,n),y:Math.min(e,i),width:Math.abs(n-t)||1,height:Math.abs(i-e)||1};return(null==r?void 0:r.ratio)&&(o.width<=o.height?o.height=o.width*(null==r?void 0:r.ratio):o.width=o.height/(null==r?void 0:r.ratio)),Object.assign(o,{ratios:(null==r?void 0:r.ratios)||[[(t-o.x)/(o.width||1),(e-o.y)/(o.height||1)],[(n-o.x)/(o.width||1),(i-o.y)/(o.height||1)]]}),(null==r?void 0:r.points)&&(o.points=null==r?void 0:r.points),o},e.icdt_Size2Attribute=function(t,e,n){var o,a=function(){var o,a,u,c,s,l;switch(t){case i.V_ShapeType.CIRCLE:return{cx:e.x+e.width/2,cy:e.y+e.height/2,r:Math.min(e.width/2,e.height/2)};case i.V_ShapeType.ELLIPSE:return{cx:e.x+e.width/2,cy:e.y+e.height/2,rx:e.width/2,ry:e.height/2};case i.V_ShapeType.LINE:var d={};return null===(o=e.ratios)||void 0===o||o.forEach((function(t,n){d["x".concat(n+1)]=e.x+e.width*t[0],d["y".concat(n+1)]=e.y+e.height*t[1]})),d;case i.V_ShapeType.RECT:case i.V_ShapeType.FOREIGNOBJECT:case i.V_ShapeType.IMAGE:return{x:e.x,y:e.y,width:e.width,height:e.height};case i.V_ShapeType.TEXT:return{x:e.x,y:e.y+(null!==(a=n.fontSize)&&void 0!==a?a:16)};case i.V_ShapeType.POLYGON:if(null===(u=e.ratios)||void 0===u?void 0:u.length)return{points:(0,r.icdt_Adapter_Ratios_2_PolygonPoints)(e,e.ratios)};break;case i.V_ShapeType.PATH:if(null===(c=e.ratioMaps)||void 0===c?void 0:c.length)return{d:(0,r.icdt_Adapter_RatioMaps_2_PathD)(e,e.ratioMaps)};if(null===(s=e.points)||void 0===s?void 0:s.length)return l=e.points,{d:"M ".concat(l[0][0]," ").concat(l[0][1]," L ").concat((l.map((function(t){return[t[0],t[1]]}))||[]).map((function(t){return t.join(" ")})).join(" "))}}return{}}();return e.rotate?(a.transform="rotate(".concat(e.rotate,")"),a.transformOrigin="".concat(e.x+e.width/2," ").concat(e.y+e.height/2)):(null===(o=n.transform)||void 0===o?void 0:o.match(/^rotate/))&&(n.transform=null,n.transformOrigin=null),a},e.icdt_OffsetSwitch=function(t,e,n,r,o,a){switch(t){case i.V_ShapeType.CIRCLE:return{cx:(e+r)/2,cy:(n+o)/2,r:Math.min(Math.abs(e-r)/2,Math.abs(n-o)/2)};case i.V_ShapeType.ELLIPSE:return{cx:(e+r)/2,cy:(n+o)/2,rx:Math.abs(r-e)||1,ry:Math.abs(o-n)||1};case i.V_ShapeType.RECT:return{x:Math.min(e,r),y:Math.min(n,o),w:Math.abs(r-e)||1,h:Math.abs(o-n)||1};case i.V_ShapeType.POLYGON:var u={x:Math.min(e,r),y:Math.min(n,o),width:Math.abs(r-e)||1,height:Math.abs(o-n)||1};return{points:((null==a?void 0:a.map((function(t){return[u.x+u.width*t[0],u.y+u.height*t[1]]})))||[]).map((function(t){return t.join(" ")})).join(",")};case i.V_ShapeType.FOREIGNOBJECT:case i.V_ShapeType.IMAGE:return{x:Math.min(e,r),y:Math.min(n,o),w:Math.abs(r-e)||1,h:Math.abs(o-n)||1};case i.V_ShapeType.TEXT:return{x:Math.min(e,r),y:Math.min(n,o)};case i.V_ShapeType.PATH:return u={x:Math.min(e,r),y:Math.min(n,o),width:Math.abs(r-e)||1,height:Math.abs(o-n)||1},{d:"M ".concat(u.x," ").concat(u.y," L ").concat(u.x+u.width," ").concat(u.y+u.height)}}return{}}},5877:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_RoundNumber=void 0,e.icdt_RoundNumber=function(t,e){return e=null!=e?e:100,Math.round((t+Number.EPSILON)*e)/e}},4355:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_ScaleNumber=void 0;var i=n(9427),r=n(5877);e.icdt_ScaleNumber=function(t){return(0,r.icdt_RoundNumber)(t/i.icdt.screen.scale)}},4654:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.sizeRotate=e.sizeHeight=e.sizeWidth=e.sizeY=e.sizeX=void 0;var i=n(9427),r=n(5932),o=n(184),a=n(5877);e.sizeX=function(t,e){var n=t.id,u=t.type,c=t.size,s=t.attribute,l=JSON.parse(JSON.stringify({id:n,size:c,attribute:s}));c.x=(0,a.icdt_RoundNumber)(e),Object.assign(s,(0,o.icdt_Size2Attribute)(u,c,s)),(0,r.icdt_SyncSvgNodeAttribute)(window.document.getElementById(n),s),i.icdt.history.push([{type:"size",from:l,to:JSON.parse(JSON.stringify({id:n,size:c,attribute:s}))}])},e.sizeY=function(t,e){var n=t.id,u=t.type,c=t.size,s=t.attribute,l=JSON.parse(JSON.stringify({id:n,size:c,attribute:s}));c.y=(0,a.icdt_RoundNumber)(e),Object.assign(s,(0,o.icdt_Size2Attribute)(u,c,s)),(0,r.icdt_SyncSvgNodeAttribute)(window.document.getElementById(n),s),i.icdt.history.push([{type:"size",from:l,to:JSON.parse(JSON.stringify({id:n,size:c,attribute:s}))}])},e.sizeWidth=function(t,e,n){var u=t.id,c=t.type,s=t.size,l=t.attribute,d=JSON.parse(JSON.stringify({id:u,size:s,attribute:l}));n&&(s.height=(0,a.icdt_RoundNumber)(e*s.height/s.width)),s.width=(0,a.icdt_RoundNumber)(e),Object.assign(l,(0,o.icdt_Size2Attribute)(c,s,l)),(0,r.icdt_SyncSvgNodeAttribute)(window.document.getElementById(u),l),i.icdt.history.push([{type:"size",from:d,to:JSON.parse(JSON.stringify({id:u,size:s,attribute:l}))}])},e.sizeHeight=function(t,e,n){var u=t.id,c=t.type,s=t.size,l=t.attribute,d=JSON.parse(JSON.stringify({id:u,size:s,attribute:l}));n&&(s.width=(0,a.icdt_RoundNumber)(e*s.width/s.height)),s.height=(0,a.icdt_RoundNumber)(e),Object.assign(l,(0,o.icdt_Size2Attribute)(c,s,l)),(0,r.icdt_SyncSvgNodeAttribute)(window.document.getElementById(u),l),i.icdt.history.push([{type:"size",from:d,to:JSON.parse(JSON.stringify({id:u,size:s,attribute:l}))}])},e.sizeRotate=function(t,e){var n=t.id,u=t.type,c=t.size,s=t.attribute,l=JSON.parse(JSON.stringify({id:n,size:c,attribute:s}));c.rotate="number"==typeof e?(0,a.icdt_RoundNumber)(e,100):void 0,Object.assign(s,(0,o.icdt_Size2Attribute)(u,c,s)),(0,r.icdt_SyncSvgNodeAttribute)(window.document.getElementById(n),s),i.icdt.history.push([{type:"size",from:l,to:JSON.parse(JSON.stringify({id:n,size:c,attribute:s}))}])}},6428:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Init=void 0;var i=n(797),r=n(9427),o=n(5932),a=n(1785),u=n(1381),c=n(6633),s=(n(670),n(8397)),l=n(4685),d=n(4123),f=n(4897),h=n(8669),v=n(1929),p=n(2293),g=n(8947),y=n(9536);e.icdt_Init=function(t){new o.icdt_Svg(t.container,t.target),r.icdt.pointer.onchange=function(e,n,r){switch(e){case i.V_PointerType.POINTER:jQuery(t.target).css({cursor:"auto"});break;case i.V_PointerType.HAND:jQuery(t.target).css({cursor:"grab"});break;case i.V_PointerType.PEN:switch(n){case g.V_PenType.DRAW:jQuery(t.target).css({cursor:"url(assets/images/svg/icon/viet.png) 12 32,default"});break;case g.V_PenType.HIGHTLIGH:jQuery(t.target).css({cursor:"url(assets/images/svg/icon/highlight1.png) 12 32,default"})}break;case i.V_PointerType.ERASER:jQuery(t.target).css({cursor:"url(assets/images/svg/icon/gom.png) 22 22,default"});break;case i.V_PointerType.SHAPE:jQuery(t.target).css({cursor:"url(assets/images/svg/icon/point.png) 22 22,default"});break;case i.V_PointerType.TEXT:case i.V_PointerType.FOREIGNOBJECT:jQuery(t.target).css({cursor:"url(assets/images/svg/icon/textmouse.png) 22 22,default"})}},jQuery(t.container).off("mousedown.icdt-init-icon").on("mousedown.icdt-init-icon",(function(e){r.icdt.pointer.pointer_type==i.V_PointerType.HAND&&jQuery(t.target).css({cursor:"grabbing"})})).off("mouseup.icdt-init-icon").on("mouseup.icdt-init-icon",(function(e){r.icdt.pointer.pointer_type==i.V_PointerType.HAND&&jQuery(t.target).css({cursor:"grab"})})),jQuery(t.container).off("wheel.icdt-init").on("wheel.icdt-init",(function(t){var e;t.preventDefault();var n=null!==(e=t.originalEvent)&&void 0!==e?e:t;if(console.log(n),!n.deltaX&&n.deltaY!=Math.floor(n.deltaY)||n.ctrlKey){var i=r.icdt.screen.scale,o=.04*i*(n.deltaY>0?1:-1);r.icdt.screen.scaleTo(i-o,(0,y.icdt_PointerScale)({x:t.clientX,y:t.clientY},1,{x:0,y:0},r.icdt.screen.offset))}else r.icdt.screen.move(r.icdt.screen.dislocation,{x:-n.deltaX,y:-n.deltaY})})),jQuery(window).off("mousedown.icdt-init").on("mousedown.icdt-init",(function(t){r.icdt.screen.actived=!!jQuery(t.target).parents(r.icdt.container).length})),jQuery(t.container).off("mouseenter.icdt-init").on("mouseenter.icdt-init",(function(t){r.icdt.screen.actived=!0})),jQuery(t.container).off("mouseleave.icdt-init").on("mouseleave.icdt-init",(function(t){r.icdt.screen.actived=!1,r.icdt.pointer.pointer_type_temp==i.V_PointerType.HAND&&(r.icdt.pointer.pointer_type_temp=i.V_PointerType.POINTER)})),jQuery(t.container).off("mousedown.icdt-init").on("mousedown.icdt-init",(function(e){0==e.button&&(t.container.includes("#")&&t.container.includes(e.target.getAttribute("id"))||t.container.includes(".")&&t.container.includes(e.target.getAttribute("class"))||t.container.includes(e.target.nodeName))&&(r.icdt.pointer.pointer_type_temp||r.icdt.pointer.pointer_type)===i.V_PointerType.POINTER&&(r.icdt.dataSelect.ids=[])})),jQuery(t.container).off("touchmove.icdt-init").on("touchmove.icdt-init",(function(t){t.preventDefault()}));var e=function(t){switch(r.icdt.pointer.pointer_type_temp||r.icdt.pointer.pointer_type){case i.V_PointerType.POINTER:(0,a.icdt_PointerComponent)(t);break;case i.V_PointerType.HAND:(0,u.icdt_HandComponent)(t);break;case i.V_PointerType.PEN:(0,l.icdt_PenComponent)(t);break;case i.V_PointerType.SHAPE:(0,c.icdt_ShapeComponent)(t);break;case i.V_PointerType.FOREIGNOBJECT:(0,h.icdt_ForeignObjectComponent)(t);break;case i.V_PointerType.IMAGE:(0,v.icdt_ImageComponent)(t);break;case i.V_PointerType.TEXT:(0,f.icdt_TextComponent)(t);break;case i.V_PointerType.ERASER:(0,d.icdt_EraserComponent)(t);break;case i.V_PointerType.INDEX:(0,p.icdt_IndexComponent)(t)}},n=!1;jQuery(t.target).off("touchstart.icdt-init").on("touchstart.icdt-init",(function(t){n=!0,e({touchEvent:t})})),jQuery(t.target).off("mousedown.icdt-init").on("mousedown.icdt-init",(function(t){1!=t.button&&(n?n=!1:e({mouseEvent:t}))})),t.iskeyboard&&(jQuery(window).off("keydown.icdt-init").on("keydown.icdt-init",(function(t){t.keyCode||t.which||t.charCode,r.icdt.screen.actived&&((t.ctrlKey||t.altKey)&&(t.stopPropagation(),t.preventDefault()),(0,s.icdt_KeyboardComponent)(t))})),jQuery(window).off("keyup.icdt-init").on("keyup.icdt-init",(function(t){t.keyCode||t.which||t.charCode,r.icdt.screen.actived&&((t.ctrlKey||t.altKey)&&(t.stopPropagation(),t.preventDefault()),(0,s.icdt_KeyboardComponent)(t))})))}},463:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_DataSelect=void 0;var i=n(2121),r=n(3331),o=n(9427),a=n(2263),u=n(6511),c=n(4255),s=function(){function t(){this._nodeName=["circle","ellipse","line","polygon","rect","text","path","image","foreignObject"],this._selected_Ids=[],this._fnChanges=[]}return Object.defineProperty(t.prototype,"nodeName",{get:function(){return this._nodeName},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"ids",{get:function(){return this._selected_Ids},set:function(t){this._selected_Ids=t,this.change(this.ids)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"nodes",{get:function(){return this._selected_Ids.map((function(t){return o.icdt.data.getNode(t)})).filter((function(t){return!t.isfake}))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onchange",{set:function(t){this._fnChanges.push(t)},enumerable:!1,configurable:!0}),t.prototype.change=function(t){var e,n,i,o,a;null===(e=window.document.getElementById(r.V_ID.RESIZE_GROUP))||void 0===e||e.remove(),null===(n=window.document.getElementById(r.V_ID.SELECT_GROUP))||void 0===n||n.remove(),null===(i=window.document.getElementById(r.V_ID.SCAN_GROUP))||void 0===i||i.remove(),null===(o=window.document.getElementById(r.V_ID.CREATE_GROUP))||void 0===o||o.remove(),null===(a=window.document.getElementById(r.V_ID.INTERACTIVE_GROUP))||void 0===a||a.remove(),jQuery('[id^="icdt-temp-"]').remove(),this._fnChanges.forEach((function(e){return e(t)}))},t.prototype.deleteNode=function(){for(var t=0,e=this._selected_Ids;t<e.length;t++){var n=e[t],i=o.icdt.data.deleteNode(n);o.icdt.history.push([{type:"delete",from:{id:i},to:{id:i}}])}o.icdt.dataSelect.ids=[]},t.prototype.groupNode=function(){var t=[];if(o.icdt.dataSelect.ids.length>=2){var e=o.icdt.data.getNode(o.icdt.dataSelect.ids[0]),n=(0,a.icdt_SvgGroup)(Math.ceil(1e9*Math.random()),void 0,e.pid?window.document.getElementById(e.pid):null),r=n.nodeId,s=n.attribute,l=n.size;o.icdt.data.node=Object.assign({id:r,type:i.V_ShapeType.GROUP,name:"G"},{size:l,attribute:s});for(var d=0,f=o.icdt.dataSelect.ids;d<f.length;d++){var h=f[d];t.push(o.icdt.data.addGroup(h,r))}}if(t.length){o.icdt.dataSelect.ids=t;var v=o.icdt.dataSelect.nodes;1==v.length?(0,u.icdt_Resize)(v[0]):v.length>1&&(0,c.icdt_Select)(v)}},t.prototype.ungroupNode=function(){for(var t=[],e=0,n=o.icdt.dataSelect.ids;e<n.length;e++){var i=n[e];t.push(o.icdt.data.unGroup(i))}if(t.length){o.icdt.dataSelect.ids=t;var r=o.icdt.dataSelect.nodes;1==r.length?(0,u.icdt_Resize)(r[0]):r.length>1&&(0,c.icdt_Select)(r)}},t}();e.icdt_DataSelect=s},8378:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_DataSlide=void 0;var i=n(2121),r=n(9427),o=n(451),a=n(5877),u=n(184),c=n(5932),s=n(6383),l=n(2866),d=n(5127),f=function(){function t(){}return t.prototype.createNodeImage=function(t,e){var n,s,d,f,h=(0,o.icdt_SvgImage)(Math.ceil(1e9*Math.random()),{size:{x:(null!==(n=null==e?void 0:e.x)&&void 0!==n?n:50)-50,y:(null!==(s=null==e?void 0:e.y)&&void 0!==s?s:50)-50,width:100,height:100},source:{type:"image",image:(0,l.extractSourceV1)(t)}}),v=h.nodeId,p=h.element,g=h.size,y=h.attribute,_=h.source;!function(t){if(t){var e=new Image;e.onload=function(){var t=(0,a.icdt_RoundNumber)(e.naturalWidth/e.naturalHeight,100);t>=1?(g.width=Math.min(e.naturalWidth,512),g.height=(0,a.icdt_RoundNumber)(g.width/t,100)):(g.height=Math.min(e.naturalHeight,512),g.width=(0,a.icdt_RoundNumber)(g.height*t,100)),g.x=(0,a.icdt_RoundNumber)(g.x+50-g.width/2,100),g.y=(0,a.icdt_RoundNumber)(g.y+50-g.height/2,100),Object.assign(y,(0,u.icdt_Size2Attribute)(i.V_ShapeType.IMAGE,g,y)),(0,c.icdt_SyncSvgNodeAttribute)(p,y),r.icdt.data.node=Object.assign({id:v,type:i.V_ShapeType.IMAGE,name:"Image"},{size:g,attribute:y,source:_})},e.onerror=function(e){console.error("ImgSrc load failed -> ".concat(t),e),null==p||p.remove()},e.src=t}}(null!==(f=null===(d=_.image)||void 0===d?void 0:d.url)&&void 0!==f?f:"")},t.prototype.createNodeIframe=function(t,e){var n,o,d=(0,s.icdt_SvgForeignObject)(Math.ceil(1e9*Math.random()),{size:{x:(null!==(n=null==e?void 0:e.x)&&void 0!==n?n:50)-50,y:(null!==(o=null==e?void 0:e.y)&&void 0!==o?o:50)-50,width:100,height:100},style:{},source:{type:"iframe",iframe:(0,l.extractSourceV1)(t)}}),f=d.nodeId,h=d.element,v=d.size,p=d.attribute,g=d.style,y=d.source;!function(){var t,e,n=(null===(e=null===(t=r.icdt.data.slide)||void 0===t?void 0:t.svg)||void 0===e?void 0:e.viewBox)||{x:0,y:0,width:100,height:100},o=(0,a.icdt_RoundNumber)(n.width/n.height,100);o>=1?(v.width=Math.min(n.width,512),v.height=(0,a.icdt_RoundNumber)(v.width/o,100)):(v.height=Math.min(n.height,512),v.width=(0,a.icdt_RoundNumber)(v.height*o,100)),v.x=(0,a.icdt_RoundNumber)(v.x+50-v.width/2,100),v.y=(0,a.icdt_RoundNumber)(v.y+50-v.height/2,100),Object.assign(p,(0,u.icdt_Size2Attribute)(i.V_ShapeType.IMAGE,v,p)),(0,c.icdt_SyncSvgNodeAttribute)(h,p),r.icdt.data.node=Object.assign({id:f,type:i.V_ShapeType.FOREIGNOBJECT,name:"ForeignObject"},{size:v,attribute:p,style:g,source:y})}()},t.prototype.createNodeEmbed=function(t,e){var n,o,d=(0,s.icdt_SvgForeignObject)(Math.ceil(1e9*Math.random()),{size:{x:(null!==(n=null==e?void 0:e.x)&&void 0!==n?n:50)-50,y:(null!==(o=null==e?void 0:e.y)&&void 0!==o?o:50)-50,width:100,height:100},style:{},source:{type:"embed",embed:Object.assign(t,(0,l.extractSourceV1)(t))}}),f=d.nodeId,h=d.element,v=d.size,p=d.attribute,g=d.style,y=d.source;!function(){var t,e,n=(null===(e=null===(t=r.icdt.data.slide)||void 0===t?void 0:t.svg)||void 0===e?void 0:e.viewBox)||{x:0,y:0,width:100,height:100},o=(0,a.icdt_RoundNumber)(n.width/n.height,100);o>=1?(v.width=Math.min(n.width,512),v.height=(0,a.icdt_RoundNumber)(v.width/o,100)):(v.height=Math.min(n.height,512),v.width=(0,a.icdt_RoundNumber)(v.height*o,100)),v.x=(0,a.icdt_RoundNumber)(v.x+50-v.width/2,100),v.y=(0,a.icdt_RoundNumber)(v.y+50-v.height/2,100),Object.assign(p,(0,u.icdt_Size2Attribute)(i.V_ShapeType.IMAGE,v,p)),(0,c.icdt_SyncSvgNodeAttribute)(h,p),r.icdt.data.node=Object.assign({id:f,type:i.V_ShapeType.FOREIGNOBJECT,name:"ForeignObject"},{size:v,attribute:p,style:g,source:y})}()},t.prototype.createNodeMedia=function(t,e){var n,s,d,f,h=(0,o.icdt_SvgImage)(Math.ceil(1e9*Math.random()),{size:{x:(null!==(n=null==e?void 0:e.x)&&void 0!==n?n:50)-50,y:(null!==(s=null==e?void 0:e.y)&&void 0!==s?s:50)-50,width:100,height:100},source:{type:"image",image:(0,l.extractSourceV1)(t.cover)}}),v=h.nodeId,p=h.element,g=h.size,y=h.attribute,_=h.source,b={click:{media:t.media}};!function(t){if(t){var e=new Image;e.onload=function(){var t=(0,a.icdt_RoundNumber)(e.naturalWidth/e.naturalHeight,100);t>=1?(g.width=Math.min(e.naturalWidth,512),g.height=(0,a.icdt_RoundNumber)(g.width/t,100)):(g.height=Math.min(e.naturalHeight,512),g.width=(0,a.icdt_RoundNumber)(g.height*t,100)),g.x=(0,a.icdt_RoundNumber)(g.x+50-g.width/2,100),g.y=(0,a.icdt_RoundNumber)(g.y+50-g.height/2,100),Object.assign(y,(0,u.icdt_Size2Attribute)(i.V_ShapeType.IMAGE,g,y)),(0,c.icdt_SyncSvgNodeAttribute)(p,y),r.icdt.data.node=Object.assign({id:v,type:i.V_ShapeType.IMAGE,name:"Image"},{size:g,attribute:y,source:_,interactive:b})},e.onerror=function(e){console.error("ImgSrc load failed -> ".concat(t),e),null==p||p.remove()},e.src=t}}(null!==(f=null===(d=_.image)||void 0===d?void 0:d.url)&&void 0!==f?f:"")},t.prototype.insert=function(t){var e;if(r.icdt.data.insertSlide(r.icdt.data.slideId,1),t.title){var n=(0,s.icdt_SvgForeignObject)(Math.ceil(1e9*Math.random()),{size:{x:100,y:100,width:800,height:150},source:{type:"html",html:{htmlContent:'<span style="font-size: 40px;">'.concat(t.title,"</span>")}}}),o=n.nodeId,a=n.size,u=n.attribute,c=n.style,l=n.source;r.icdt.data.node=Object.assign({id:o,type:i.V_ShapeType.FOREIGNOBJECT,name:"ForeignObject"},{size:a,attribute:u,style:c,source:l})}if(t.description){var f=(0,s.icdt_SvgForeignObject)(Math.ceil(1e9*Math.random()),{size:{x:100,y:300,width:600,height:300},source:{type:"html",html:{htmlContent:'<span style="font-size: 24px;">'.concat(t.description.replace(/\n/g,"<br/>"),"</span>")}}});o=f.nodeId,a=f.size,u=f.attribute,c=f.style,l=f.source,r.icdt.data.node=Object.assign({id:o,type:i.V_ShapeType.FOREIGNOBJECT,name:"ForeignObject"},{size:a,attribute:u,style:c,source:l})}(null===(e=t.media)||void 0===e?void 0:e.prompt)&&(function(){var t=(0,d.icdt_SvgRect)(Math.ceil(1e9*Math.random()),{size:{x:775,y:275,width:350,height:350},attribute:{fill:"#FFFFFF",stroke:"#E6E6E6",strokeWidth:1,strokeDasharray:1,rx:4}}),e=t.nodeId,n=t.size,o=t.attribute;r.icdt.data.node=Object.assign({id:e,type:i.V_ShapeType.RECT,name:"Rect"},{size:n,attribute:o})}(),function(){var e,n=(0,s.icdt_SvgForeignObject)(Math.ceil(1e9*Math.random()),{size:{x:800,y:300,width:300,height:300},source:{type:"html",html:{htmlContent:'<span style="font-size: 18px; color: #6633cc"><i>'.concat(null===(e=t.media)||void 0===e?void 0:e.prompt,"</i></span>")}}}),o=n.nodeId,a=n.size,u=n.attribute,c=n.style,l=n.source;r.icdt.data.node=Object.assign({id:o,type:i.V_ShapeType.FOREIGNOBJECT,name:"ForeignObject"},{size:a,attribute:u,style:c,source:l})}())},t}();e.icdt_DataSlide=f},26:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_DataSource=void 0;var i=n(9427),r=n(2121),o=n(1724),a=n(5932),u=n(4255),c=n(3331),s=n(6511),l=function(){function t(){var t=this;this._dataSource={slides:[],resources:[]},this._slideIdx=0,this._fnChangeSlides=[],this.getNodeAll=function(){var e,n=null===(e=t._dataSource.slides)||void 0===e?void 0:e.find((function(e,n){return n==t._slideIdx})),i=null==n?void 0:n.svg,o=function(t){var e=[];return t.filter((function(t){return!t.isdeleted})).forEach((function(t){t.type==r.V_ShapeType.GROUP?e=e.concat(o(t.nodes||[])):e.push(t.id)})),e};return o((null==i?void 0:i.nodes)||[])}}return Object.defineProperty(t.prototype,"newSlideId",{get:function(){return Math.ceil(1e9*Math.random())},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_defaultSlide",{get:function(){return JSON.parse(JSON.stringify({id:this.newSlideId,name:"Trang mới",svg:{viewBox:i.icdt.screen.frameSize,nodes:[]}}))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"get",{get:function(){var t,e=function(t){return null==t||t.filter((function(t){return t.type==r.V_ShapeType.GROUP})).forEach((function(t){var n;t.nodes=e(null===(n=t.nodes)||void 0===n?void 0:n.filter((function(t){return!t.isdeleted})))})),t=null==t?void 0:t.filter((function(t){var e,n;return t.type!=r.V_ShapeType.GROUP||(null!==(n=null===(e=t.nodes)||void 0===e?void 0:e.length)&&void 0!==n?n:0)>0})),t||[]};return null===(t=this._dataSource.slides)||void 0===t||t.forEach((function(t){var n,i;t.svg&&(t.svg.nodes=e(null===(i=null===(n=t.svg)||void 0===n?void 0:n.nodes)||void 0===i?void 0:i.filter((function(t){return!t.isdeleted}))))})),this._dataSource},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"getResource",{get:function(){var t,e=[];return null===(t=this._dataSource.slides)||void 0===t||t.forEach((function(t){var n,i,r,o,a,u,c,s,l,d,f,h,v,p,g;e.push(null===(i=null===(n=t.svg)||void 0===n?void 0:n.background)||void 0===i?void 0:i.path),null===(r=t.svg)||void 0===r||r.nodes.forEach((function(t){var n,i,r,o,a,u,c,s,l,d,f,h,v,p,g,y,_,b,m,w,x,S,M,E,k,T,N,A;e.push(null===(i=null===(n=t.source)||void 0===n?void 0:n.image)||void 0===i?void 0:i.path),e.push(null===(o=null===(r=t.source)||void 0===r?void 0:r.audio)||void 0===o?void 0:o.path),e.push(null===(u=null===(a=t.source)||void 0===a?void 0:a.video)||void 0===u?void 0:u.path),e.push(null===(s=null===(c=t.source)||void 0===c?void 0:c.file)||void 0===s?void 0:s.path),e.push(null===(d=null===(l=t.source)||void 0===l?void 0:l.iframe)||void 0===d?void 0:d.path),e.push(null===(h=null===(f=t.source)||void 0===f?void 0:f.track)||void 0===h?void 0:h.path),e.push(null===(y=null===(g=null===(p=null===(v=t.interactive)||void 0===v?void 0:v.show)||void 0===p?void 0:p.audio)||void 0===g?void 0:g.source)||void 0===y?void 0:y.path),e.push(null===(w=null===(m=null===(b=null===(_=t.interactive)||void 0===_?void 0:_.click)||void 0===b?void 0:b.audio)||void 0===m?void 0:m.source)||void 0===w?void 0:w.path),e.push(null===(E=null===(M=null===(S=null===(x=t.interactive)||void 0===x?void 0:x.click)||void 0===S?void 0:S.image)||void 0===M?void 0:M.source)||void 0===E?void 0:E.path),e.push(null===(A=null===(N=null===(T=null===(k=t.interactive)||void 0===k?void 0:k.click)||void 0===T?void 0:T.video)||void 0===N?void 0:N.source)||void 0===A?void 0:A.path)})),e.push(null===(a=null===(o=t.test)||void 0===o?void 0:o.audiotrue)||void 0===a?void 0:a.path),e.push(null===(c=null===(u=t.test)||void 0===u?void 0:u.audiofalse)||void 0===c?void 0:c.path),e.push(null===(l=null===(s=t.test)||void 0===s?void 0:s.effecttrue)||void 0===l?void 0:l.path),e.push(null===(f=null===(d=t.test)||void 0===d?void 0:d.effectfalse)||void 0===f?void 0:f.path),e.push(null===(v=null===(h=t.test)||void 0===h?void 0:h.icontrue)||void 0===v?void 0:v.path),e.push(null===(g=null===(p=t.test)||void 0===p?void 0:p.iconfalse)||void 0===g?void 0:g.path)})),e.filter((function(t){return t})).map((function(t){return t.replace(/(\?|\#)[^\?\#]+/g,"").toLowerCase()})).filter((function(t,e,n){return n.indexOf(t)==e}))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"set",{set:function(t){this._dataSource=t,this._dataSource.slides||(this._dataSource.slides=[]),this._dataSource.slides.length||(this._slideIdx=0,this._dataSource.slides.push(JSON.parse(JSON.stringify(this._defaultSlide)))),(0,a.icdt_SvgRenew)(),this.changeSlide(this.slides,this.slideIdx,this._dataSource.slides.length,this.slide)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dataSource",{get:function(){var t,e=function(t){return null==t||t.filter((function(t){return t.type==r.V_ShapeType.GROUP})).forEach((function(t){var n;t.nodes=e(null===(n=t.nodes)||void 0===n?void 0:n.filter((function(t){return!t.isdeleted})))})),t=null==t?void 0:t.filter((function(t){var e,n;return t.type!=r.V_ShapeType.GROUP||(null!==(n=null===(e=t.nodes)||void 0===e?void 0:e.length)&&void 0!==n?n:0)>0})),t||[]};return null===(t=this._dataSource.slides)||void 0===t||t.forEach((function(t){var n,i;t.svg&&(t.svg.nodes=e(null===(i=null===(n=t.svg)||void 0===n?void 0:n.nodes)||void 0===i?void 0:i.filter((function(t){return!t.isdeleted}))))})),this._dataSource.resources=this.getResource,this._dataSource},set:function(t){this._dataSource=t,this._dataSource.slides||(this._dataSource.slides=[]),this._dataSource.slides.length||(this._slideIdx=0,this._dataSource.slides.push(JSON.parse(JSON.stringify(this._defaultSlide)))),(0,a.icdt_SvgRenew)(),this.changeSlide(this.slides,this.slideIdx,this._dataSource.slides.length,this.slide)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slideId",{get:function(){var t,e;return null!==(e=null===(t=this.slide)||void 0===t?void 0:t.id)&&void 0!==e?e:0},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slideIdx",{get:function(){return this._slideIdx},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slide",{get:function(){var t,e=this;return null===(t=this._dataSource.slides)||void 0===t?void 0:t.find((function(t,n){return n==e._slideIdx}))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slides",{get:function(){return this._dataSource.slides||[]},enumerable:!1,configurable:!0}),t.prototype.backSlide=function(){this._slideIdx>0&&(this._slideIdx-=1,this.openSlide(void 0,this._slideIdx))},t.prototype.nextSlide=function(){var t,e;this._slideIdx<(null!==(e=null===(t=this._dataSource.slides)||void 0===t?void 0:t.length)&&void 0!==e?e:0)-1&&(this._slideIdx+=1,this.openSlide(void 0,this._slideIdx))},t.prototype.refreshSlide=function(){(0,a.icdt_SvgRenew)(),(0,o.icdt_RenderComponent)(this.slide)},t.prototype.openSlide=function(t,e){var n,r,u,c,s,l,d,f,h,v;if(t){for(var p=0,g=null!==(r=null===(n=this._dataSource.slides)||void 0===n?void 0:n.length)&&void 0!==r?r:0;p<g;p++)if((null!==(u=this._dataSource.slides)&&void 0!==u?u:[])[p].id==t){this._slideIdx=p;break}}else e&&e>=0&&e<(null!==(s=null===(c=this._dataSource.slides)||void 0===c?void 0:c.length)&&void 0!==s?s:0)?this._slideIdx=null!=e?e:0:(this._slideIdx=0,(null===(l=this._dataSource.slides)||void 0===l?void 0:l.length)||(this._dataSource.slides=[JSON.parse(JSON.stringify(this._defaultSlide))]));(0,a.icdt_SvgRenew)(),(null===(f=null===(d=this.slide)||void 0===d?void 0:d.svg)||void 0===f?void 0:f.viewBox)&&(i.icdt.screen.frameSize=this.slide.svg.viewBox),(0,o.icdt_RenderComponent)(this.slide),this.changeSlide(this.slides,this.slideIdx,null!==(v=null===(h=this._dataSource.slides)||void 0===h?void 0:h.length)&&void 0!==v?v:0,this.slide)},t.prototype.addSlide=function(){var t,e,n;null===(t=this._dataSource.slides)||void 0===t||t.push(this._defaultSlide),this._slideIdx=(null!==(n=null===(e=this._dataSource.slides)||void 0===e?void 0:e.length)&&void 0!==n?n:0)-1,this.openSlide(void 0,this._slideIdx)},t.prototype.tryReplaceSlide=function(t,e,n){var i,r,o,a,u,c=null===(i=this._dataSource.slides)||void 0===i?void 0:i.find((function(e){return e.id==t}));if(!n||!c||(null===(r=null==c?void 0:c.svg)||void 0===r?void 0:r.nodes.filter((function(t){return!t.isdeleted})).length))return this.insertSlide(t,e,n);var s=null!==(a=null===(o=this._dataSource.slides)||void 0===o?void 0:o.indexOf(c))&&void 0!==a?a:0;null===(u=this._dataSource.slides)||void 0===u||u.splice(s,1,n),this._slideIdx=s,this.openSlide(void 0,this._slideIdx)},t.prototype.insertSlide=function(t,e,n){var r,o,a,u,c,s,l=null!==(o=null===(r=this._dataSource.slides)||void 0===r?void 0:r.find((function(e){return e.id==t})))&&void 0!==o?o:this._defaultSlide,d=(null!==(u=null===(a=this._dataSource.slides)||void 0===a?void 0:a.indexOf(l))&&void 0!==u?u:0)+e;n?(n.id=this.newSlideId,n.code=void 0,n.name||(n.name="Trang mới"),(null===(c=n.svg)||void 0===c?void 0:c.viewBox)||n.svg&&(n.svg.viewBox=i.icdt.screen.frameSize)):n=this._defaultSlide,null===(s=this._dataSource.slides)||void 0===s||s.splice(d,0,n),this._slideIdx=d,this.openSlide(void 0,this._slideIdx)},t.prototype.copySlide=function(t){var e,n,i,r,o,a,u,c=null!==(n=null===(e=this._dataSource.slides)||void 0===e?void 0:e.find((function(e){return e.id==t})))&&void 0!==n?n:this._defaultSlide,s=(null!==(r=null===(i=this._dataSource.slides)||void 0===i?void 0:i.indexOf(c))&&void 0!==r?r:0)+1,l=Object.assign(JSON.parse(JSON.stringify(c)),{id:this.newSlideId,code:void 0,name:"".concat(c.name," + (Copy)")});null===(o=this._dataSource.slides)||void 0===o||o.splice(s,0,l),this.changeSlide(this.slides,this.slideIdx,null!==(u=null===(a=this._dataSource.slides)||void 0===a?void 0:a.length)&&void 0!==u?u:0,this.slide)},t.prototype.moveSlide=function(t,e){var n,i,r,o,a,u,c=null!==(i=null===(n=this._dataSource.slides)||void 0===n?void 0:n.find((function(e){return e.id==t})))&&void 0!==i?i:this._defaultSlide,s=null!==(o=null===(r=this._dataSource.slides)||void 0===r?void 0:r.indexOf(c))&&void 0!==o?o:0;null===(a=this._dataSource.slides)||void 0===a||a.splice(s+e,0,null===(u=this._dataSource.slides)||void 0===u?void 0:u.splice(s,1)[0])},t.prototype.deleteSlide=function(t){var e,n,i,r,o,a,u,c,s=null!==(n=null===(e=this._dataSource.slides)||void 0===e?void 0:e.find((function(e){return e.id==t})))&&void 0!==n?n:this._defaultSlide,l=null!==(r=null===(i=this._dataSource.slides)||void 0===i?void 0:i.indexOf(s))&&void 0!==r?r:0;null===(o=this._dataSource.slides)||void 0===o||o.splice(l,1),(null===(a=this._dataSource.slides)||void 0===a?void 0:a.length)?l<this._slideIdx?(--this._slideIdx,this.changeSlide(this.slides,this.slideIdx,null!==(c=null===(u=this._dataSource.slides)||void 0===u?void 0:u.length)&&void 0!==c?c:0,this.slide)):l==this._slideIdx&&(--this._slideIdx,this.openSlide(void 0,this._slideIdx)):this.addSlide()},t.prototype.deleteSlide1=function(t){var e,n,i,r,o,a,u=null!==(n=null===(e=this._dataSource.slides)||void 0===e?void 0:e.find((function(e){return e.id==t})))&&void 0!==n?n:this._defaultSlide,c=null!==(r=null===(i=this._dataSource.slides)||void 0===i?void 0:i.indexOf(u))&&void 0!==r?r:0;if(u.isdeleted=!0,null===(a=null===(o=this._dataSource.slides)||void 0===o?void 0:o.filter((function(t){return!t.isdeleted})))||void 0===a?void 0:a.length){for(var s=!0;u.isdeleted;)s?c++:c--,this._dataSource.slides[c]?u=this._dataSource.slides[c]:s=!s;this.openSlide(u.id)}else this.addSlide()},Object.defineProperty(t.prototype,"onChangeSlide",{set:function(t){this._fnChangeSlides.push(t)},enumerable:!1,configurable:!0}),t.prototype.changeSlide=function(t,e,n,i){this._fnChangeSlides.forEach((function(r){return r(t,e,n,i)}))},Object.defineProperty(t.prototype,"node",{set:function(t){var e,n,r=this,a=null===(e=this._dataSource.slides)||void 0===e?void 0:e.find((function(t,e){return e==r._slideIdx})),u=null==a?void 0:a.svg;(null==u?void 0:u.nodes)&&(null==u||u.nodes.push(t)),i.icdt.history.push([{type:"add",from:{id:t.id},to:{id:t.id}}]),(0,o.icdt_RenderComponent)(this.slide,null===(n=this.slide)||void 0===n?void 0:n.id)},enumerable:!1,configurable:!0}),t.prototype.findNode=function(t){var e,n,i,r,o,a,u=this,c=null===(e=this._dataSource.slides)||void 0===e?void 0:e.find((function(t,e){return e==u._slideIdx})),s=null==c?void 0:c.svg,l=function(e,n){var i=null==e?void 0:e.find((function(e){return e.id==t}));if(i)return i.pid=n,i;for(var r=0,o=e.length||0;r<o&&!i&&!(i=l(e[r].nodes||[],e[r].id));)r++;return i},d=l((null==s?void 0:s.nodes)||[]);return d?(d.style=null!==(n=d.style)&&void 0!==n?n:{},d.source=null!==(i=d.source)&&void 0!==i?i:{},d.animate=null!==(r=d.animate)&&void 0!==r?r:{},d.interactive=null!==(o=d.interactive)&&void 0!==o?o:{},d.variable=null!==(a=d.variable)&&void 0!==a?a:{},d):{id:0,size:{x:0,y:0,width:0,height:0},attribute:{},isfake:!0}},t.prototype.getNode=function(t){var e,n=this,i=null===(e=this._dataSource.slides)||void 0===e?void 0:e.find((function(t,e){return e==n._slideIdx})),o=null==i?void 0:i.svg,a=function(e){var n,i,o,u,c,s=(null==e?void 0:e.find((function(e){return e.id==t})))||function(t){for(var e,n,i,r,o,u=null,c=0,s=t.length||0;c<s&&!u;){if(u=a(t[c].nodes)){u.pid=t[c].id;break}c++}return u&&(u.style=null!==(e=u.style)&&void 0!==e?e:{},u.source=null!==(n=u.source)&&void 0!==n?n:{},u.animate=null!==(i=u.animate)&&void 0!==i?i:{},u.interactive=null!==(r=u.interactive)&&void 0!==r?r:{},u.variable=null!==(o=u.variable)&&void 0!==o?o:{}),u}((null==e?void 0:e.filter((function(t){return t.type==r.V_ShapeType.GROUP})))||[]);return s&&(s.style=null!==(n=s.style)&&void 0!==n?n:{},s.source=null!==(i=s.source)&&void 0!==i?i:{},s.animate=null!==(o=s.animate)&&void 0!==o?o:{},s.interactive=null!==(u=s.interactive)&&void 0!==u?u:{},s.variable=null!==(c=s.variable)&&void 0!==c?c:{}),s};return a((null==o?void 0:o.nodes)||[])||{id:null,pid:null,type:null,element:document.createElement("div"),size:{x:0,y:0,width:0,height:0,points:[]},attribute:{},style:{},source:{},animate:{},interactive:{},variable:{},isfake:!0,isdeleted:!1,nodes:[]}},t.prototype.getNodeInArea=function(t,e,n,i,o){var a,u=this,c=null===(a=this._dataSource.slides)||void 0===a?void 0:a.find((function(t,e){return e==u._slideIdx})),s=null==c?void 0:c.svg,l=function(a){var u=[];return a.filter((function(t){return!t.isdeleted})).forEach((function(a){a.type==r.V_ShapeType.GROUP?u=u.concat(l(a.nodes||[])):t>a.size.x||e>a.size.y||n<a.size.x+a.size.width||i<a.size.y+a.size.height||(o?a.type==o&&u.push(a.id):u.push(a.id))})),u};return l((null==s?void 0:s.nodes)||[])},t.prototype.getNodeOnArea=function(t,e,n,i,o){var a,u=this,c=null===(a=this._dataSource.slides)||void 0===a?void 0:a.find((function(t,e){return e==u._slideIdx})),s=null==c?void 0:c.svg,l=function(a){var u=[];return a.filter((function(t){return!t.isdeleted})).forEach((function(a){a.type==r.V_ShapeType.GROUP?u=u.concat(l(a.nodes||[])):a.size.x+a.size.width<t||a.size.y+a.size.height<e||a.size.x>n||a.size.y>i||(o?a.type==o&&u.push(a.id):u.push(a.id))})),u};return l((null==s?void 0:s.nodes)||[])},t.prototype.deleteNode=function(t,e){var n;return this.getNode(t).isdeleted=null==e||e,(0,o.icdt_RenderComponent)(this.slide),(0,o.icdt_RenderComponent)(this.slide,null===(n=this.slide)||void 0===n?void 0:n.id),t},t.prototype.unGroup=function(t){var e,n,i,r=this.getNode(t),a=Math.ceil(1e9*Math.random());return null===(n=null===(e=this.slide)||void 0===e?void 0:e.svg)||void 0===n||n.nodes.push(Object.assign(JSON.parse(JSON.stringify(r)),{id:a})),Object.assign(r,{isdeleted:!0}),(0,o.icdt_RenderComponent)(this.slide),(0,o.icdt_RenderComponent)(this.slide,null===(i=this.slide)||void 0===i?void 0:i.id),a},t.prototype.addGroup=function(t,e){var n,i=this.getNode(t),r=this.getNode(e);r.nodes=r.nodes||[];var a=Math.ceil(1e9*Math.random());return r.nodes.push(Object.assign(JSON.parse(JSON.stringify(i)),{id:a})),Object.assign(i,{isdeleted:!0}),(0,o.icdt_RenderComponent)(this.slide),(0,o.icdt_RenderComponent)(this.slide,null===(n=this.slide)||void 0===n?void 0:n.id),a},t.prototype.setNodeP=function(t,e){var n,i,r=null===(i=null===(n=this.slide)||void 0===n?void 0:n.svg)||void 0===i?void 0:i.nodes.find((function(e){return e.id==t}));r&&(r.pid=e||null)},t.prototype.bringToFront=function(t){this.bringToFrontStep(t,0)},t.prototype.sendToBack=function(t){this.sendToBackStep(t,0)},t.prototype.bringToFrontStep=function(t,e){var n,r,a,l,d,f,h,v,p,g=this;null===(r=null===(n=this.slide)||void 0===n?void 0:n.svg)||void 0===r||r.nodes.forEach((function(t,e){t.index=e+1}));var y=(null!==(d=null===(l=null===(a=this.slide)||void 0===a?void 0:a.svg)||void 0===l?void 0:l.nodes.length)&&void 0!==d?d:0)+1;t.map((function(t){var e,n,i,r;return{id:t,index:null!==(r=null===(i=null===(n=null===(e=g.slide)||void 0===e?void 0:e.svg)||void 0===n?void 0:n.nodes.find((function(e){return e.id==t})))||void 0===i?void 0:i.index)&&void 0!==r?r:0}})).sort((function(t,e){return t.index-e.index})).forEach((function(t){var n,i,r,o;e?null===(o=null===(r=g.slide)||void 0===r?void 0:r.svg)||void 0===o||o.nodes.filter((function(e,n){return e.id==t.id})).forEach((function(n){n.index=e+t.index+t.index/1e3})):null===(i=null===(n=g.slide)||void 0===n?void 0:n.svg)||void 0===i||i.nodes.filter((function(e){return e.id==t.id})).forEach((function(e){e.index=y+t.index}))})),null===(h=null===(f=this.slide)||void 0===f?void 0:f.svg)||void 0===h||h.nodes.sort((function(t,e){var n,i;return(null!==(n=t.index)&&void 0!==n?n:0)-(null!==(i=e.index)&&void 0!==i?i:0)})),(0,o.icdt_SortComponent)(this.slide),t.length<=1?(null===(v=window.document.getElementById(c.V_ID.RESIZE_GROUP))||void 0===v||v.remove(),(0,s.icdt_Resize)(i.icdt.dataSelect.nodes[0])):(null===(p=window.document.getElementById(c.V_ID.SELECT_GROUP))||void 0===p||p.remove(),(0,u.icdt_Select)(i.icdt.dataSelect.nodes))},t.prototype.sendToBackStep=function(t,e){var n,r,a,l,d,f,h=this;null===(r=null===(n=this.slide)||void 0===n?void 0:n.svg)||void 0===r||r.nodes.forEach((function(t,e){t.index=e+1})),t.map((function(t){var e,n,i,r;return{id:t,index:null!==(r=null===(i=null===(n=null===(e=h.slide)||void 0===e?void 0:e.svg)||void 0===n?void 0:n.nodes.find((function(e){return e.id==t})))||void 0===i?void 0:i.index)&&void 0!==r?r:0}})).sort((function(t,e){return t.index-e.index})).forEach((function(t){var n,i,r,o;e?null===(o=null===(r=h.slide)||void 0===r?void 0:r.svg)||void 0===o||o.nodes.filter((function(e){return e.id==t.id})).forEach((function(n){n.index=e+t.index+t.index/1e3})):null===(i=null===(n=h.slide)||void 0===n?void 0:n.svg)||void 0===i||i.nodes.filter((function(e){return e.id==t.id})).forEach((function(e){e.index=t.index/100-1}))})),null===(l=null===(a=this.slide)||void 0===a?void 0:a.svg)||void 0===l||l.nodes.sort((function(t,e){var n,i;return(null!==(n=t.index)&&void 0!==n?n:0)-(null!==(i=e.index)&&void 0!==i?i:0)})),(0,o.icdt_SortComponent)(this.slide),t.length<=1?(null===(d=window.document.getElementById(c.V_ID.RESIZE_GROUP))||void 0===d||d.remove(),(0,s.icdt_Resize)(i.icdt.dataSelect.nodes[0])):(null===(f=window.document.getElementById(c.V_ID.SELECT_GROUP))||void 0===f||f.remove(),(0,u.icdt_Select)(i.icdt.dataSelect.nodes))},t.prototype.bringToFrontArea=function(t){var e,n,r,a,l,f,h=this,v=t.map((function(t){return i.icdt.data.getNode(t)})).filter((function(t){return!t.isfake})),p=d(v),g=p.x1,y=p.y1,_=p.x2,b=p.y2,m=this.getNodeOnArea(g,y,_,b);null===(n=null===(e=this.slide)||void 0===e?void 0:e.svg)||void 0===n||n.nodes.forEach((function(t,e){t.index=e+1}));var w=m.map((function(t){var e,n,i,r;return null!==(r=null===(i=null===(n=null===(e=h.slide)||void 0===e?void 0:e.svg)||void 0===n?void 0:n.nodes.find((function(e){return e.id==t})))||void 0===i?void 0:i.index)&&void 0!==r?r:0})),x=Math.max.apply(null,w);t.forEach((function(t,e){var n,i;null===(i=null===(n=h.slide)||void 0===n?void 0:n.svg)||void 0===i||i.nodes.filter((function(e){return e.id==t})).forEach((function(t){t.index=x+(e+1)/100}))})),null===(a=null===(r=this.slide)||void 0===r?void 0:r.svg)||void 0===a||a.nodes.sort((function(t,e){var n,i;return(null!==(n=t.index)&&void 0!==n?n:0)-(null!==(i=e.index)&&void 0!==i?i:0)})),(0,o.icdt_SortComponent)(this.slide),t.length<=1?(null===(l=window.document.getElementById(c.V_ID.RESIZE_GROUP))||void 0===l||l.remove(),(0,s.icdt_Resize)(i.icdt.dataSelect.nodes[0])):(null===(f=window.document.getElementById(c.V_ID.SELECT_GROUP))||void 0===f||f.remove(),(0,u.icdt_Select)(i.icdt.dataSelect.nodes))},t.prototype.sendToBackArea=function(t){var e,n,r,a,l,f,h=this,v=t.map((function(t){return i.icdt.data.getNode(t)})).filter((function(t){return!t.isfake})),p=d(v),g=p.x1,y=p.y1,_=p.x2,b=p.y2,m=this.getNodeOnArea(g,y,_,b);null===(n=null===(e=this.slide)||void 0===e?void 0:e.svg)||void 0===n||n.nodes.forEach((function(t,e){t.index=e+1}));var w=m.map((function(t){var e,n,i,r;return null!==(r=null===(i=null===(n=null===(e=h.slide)||void 0===e?void 0:e.svg)||void 0===n?void 0:n.nodes.find((function(e){return e.id==t})))||void 0===i?void 0:i.index)&&void 0!==r?r:0})),x=Math.min.apply(null,w)-1;t.forEach((function(t,e){var n,i;null===(i=null===(n=h.slide)||void 0===n?void 0:n.svg)||void 0===i||i.nodes.filter((function(e){return e.id==t})).forEach((function(t){t.index=x+(e+1)/100}))})),null===(a=null===(r=this.slide)||void 0===r?void 0:r.svg)||void 0===a||a.nodes.sort((function(t,e){var n,i;return(null!==(n=t.index)&&void 0!==n?n:0)-(null!==(i=e.index)&&void 0!==i?i:0)})),(0,o.icdt_SortComponent)(this.slide),t.length<=1?(null===(l=window.document.getElementById(c.V_ID.RESIZE_GROUP))||void 0===l||l.remove(),(0,s.icdt_Resize)(i.icdt.dataSelect.nodes[0])):(null===(f=window.document.getElementById(c.V_ID.SELECT_GROUP))||void 0===f||f.remove(),(0,u.icdt_Select)(i.icdt.dataSelect.nodes))},t}();e.icdt_DataSource=l;var d=function(t){var e=999999,n=999999,i=-999999,r=-999999;return t.forEach((function(t){e=Math.min(e,t.size.x),n=Math.min(n,t.size.y),i=Math.max(i,t.size.x+t.size.width),r=Math.max(r,t.size.y+t.size.height)})),{x1:e,y1:n,x2:i,y2:r}}},6408:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_History=void 0;var i=n(9427),r=n(184),o=n(5932),a=function(){function t(){this._index=-1,this._dataSource=[],this.undoExecute=function(t){t.forEach((function(t){switch(t.type){case"add":i.icdt.data.deleteNode(t.from.id);break;case"edit":break;case"delete":i.icdt.data.deleteNode(t.from.id,!1);break;case"size":var e=i.icdt.data.getNode(t.from.id),n=e.id,a=e.type,u=e.size,c=e.attribute;Object.assign(u,t.from.size),Object.assign(c,(0,r.icdt_Size2Attribute)(a,u,c)),(0,o.icdt_SyncSvgNodeAttribute)(window.document.getElementById(n),c);break;case"attribute":var s=i.icdt.data.getNode(t.from.id);n=s.id,c=s.attribute,Object.assign(c,t.from.attribute),(0,o.icdt_SyncSvgNodeAttribute)(window.document.getElementById(n),c);break;case"style":var l=i.icdt.data.getNode(t.from.id),d=(n=l.id,l.style);Object.assign(null!=d?d:{},t.from.style),(0,o.icdt_SyncSvgNodeStyle)(window.document.getElementById(n),d);break;case"source":var f=i.icdt.data.getNode(t.from.id),h=(n=f.id,a=f.type,f.source);Object.assign(null!=h?h:{},t.from.source),(0,o.icdt_SyncSvgNodeSource)(window.document.getElementById(n),a,null!=h?h:{});break;case"animate":var v=i.icdt.data.getNode(t.from.id).animate;Object.assign(null!=v?v:{},t.from.animate);break;case"interactive":var p=i.icdt.data.getNode(t.from.id).interactive;Object.assign(null!=p?p:{},t.from.interactive);break;case"variable":var g=i.icdt.data.getNode(t.from.id).variable;Object.assign(null!=g?g:{},t.from.variable)}})),i.icdt.dataSelect.ids=[]},this.redoExecute=function(t){t.forEach((function(t){switch(t.type){case"add":i.icdt.data.deleteNode(t.to.id,!1);break;case"edit":break;case"delete":i.icdt.data.deleteNode(t.to.id,!0);break;case"size":var e=i.icdt.data.getNode(t.to.id),n=e.id,a=e.type,u=e.size,c=e.attribute;Object.assign(u,t.to.size),Object.assign(c,(0,r.icdt_Size2Attribute)(a,u,c)),(0,o.icdt_SyncSvgNodeAttribute)(window.document.getElementById(n),c);break;case"attribute":var s=i.icdt.data.getNode(t.to.id);n=s.id,c=s.attribute,Object.assign(c,t.to.attribute),(0,o.icdt_SyncSvgNodeAttribute)(window.document.getElementById(n),c);break;case"style":var l=i.icdt.data.getNode(t.to.id),d=(n=l.id,l.style);Object.assign(null!=d?d:{},t.to.style),(0,o.icdt_SyncSvgNodeStyle)(window.document.getElementById(n),d);break;case"source":var f=i.icdt.data.getNode(t.to.id),h=(n=f.id,a=f.type,f.source);Object.assign(null!=h?h:{},t.to.source),(0,o.icdt_SyncSvgNodeSource)(window.document.getElementById(n),a,null!=h?h:{});break;case"animate":var v=i.icdt.data.getNode(t.to.id).animate;Object.assign(null!=v?v:{},t.to.animate);break;case"interactive":var p=i.icdt.data.getNode(t.to.id).interactive;Object.assign(null!=p?p:{},t.to.interactive);break;case"variable":var g=i.icdt.data.getNode(t.to.id).variable;Object.assign(null!=g?g:{},t.to.variable)}})),i.icdt.dataSelect.ids=[]},this._fnChanges=[],this._index=-1,this._dataSource=[]}return Object.defineProperty(t.prototype,"index",{get:function(){return this._index},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"total",{get:function(){return this._dataSource.length},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dataSource",{get:function(){return this._dataSource},enumerable:!1,configurable:!0}),t.prototype.renew=function(){this._index=-1,this._dataSource=[],this.change()},t.prototype.push=function(t){this._index<0?(this._index=0,this._dataSource.length=0,this._dataSource[this._index]={data:t}):(this._index<this._dataSource.length-1&&this._dataSource.splice(this._index+1,this._dataSource.length-this._index-1),this._index++,this._dataSource.push({data:t})),this.change()},t.prototype.undo=function(){if(!(this._index<0)){var t=this._dataSource[this._index];this.undoExecute(t.data),this._index--,this.change()}},t.prototype.redo=function(){if(!(this._index>=this._dataSource.length-1)){this._index++;var t=this._dataSource[this._index];this.redoExecute(t.data),this.change()}},Object.defineProperty(t.prototype,"onchange",{set:function(t){this._fnChanges.push(t)},enumerable:!1,configurable:!0}),t.prototype.change=function(){var t=this;this._fnChanges.forEach((function(e){return e(t.index,t.total)}))},t}();e.icdt_History=a},4634:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Screen_MoKam=void 0;var i=n(5877),r=n(5932),o=function(){function t(){this._x=0,this._y=0,this._width=0,this._height=0,this._scale=1,this._dislocation={x:0,y:0},this._offset={x:0,y:0},this._svgSize={x:0,y:0,width:0,height:0},this._svgViewBox={x:0,y:0,width:0,height:0},this._frameSize={x:0,y:0,width:1280,height:720},this._actived=!1,this._fnZoomChanges=[]}return Object.defineProperty(t.prototype,"actived",{get:function(){return this._actived},set:function(t){this._actived=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"get",{get:function(){return{x:this._frameSize.x,y:this._frameSize.y,w:this._frameSize.width,h:this._frameSize.height,width:this._frameSize.width,height:this._frameSize.height}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"set",{set:function(t){var e,n;this._frameSize.width=null!==(e=null==t?void 0:t.width)&&void 0!==e?e:1080,this._frameSize.height=null!==(n=null==t?void 0:t.height)&&void 0!==n?n:1080,this.zoomTo="fit"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return this._width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this._height},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"scale",{get:function(){return this._scale},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dislocation",{get:function(){return this._dislocation},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"offset",{get:function(){return this._offset},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"svgSize",{get:function(){return this._svgSize},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"svgViewBox",{get:function(){return this._svgViewBox},set:function(t){this._svgViewBox=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"frameSize",{get:function(){return this._frameSize},set:function(t){this._frameSize.x=t.x,this._frameSize.y=t.y,this._frameSize.width=t.width,this._frameSize.height=t.height,this.reset()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"screen",{set:function(t){this._offset=t.offset,this._width=t.width,this._height=t.height,this.reset()},enumerable:!1,configurable:!0}),t.prototype.reset=function(){this.scaleTo(this._scale,void 0,!0)},t.prototype.scaleTo=function(t,e,n){if(!(t<.01||t>100)){if(e=null!=e?e:{x:this._width/2,y:this._height/2},n)this._dislocation.x=this._width/t/2-e.x,this._dislocation.y=this._height/t/2-e.y,this._dislocation.x+=(this._width-this._frameSize.width)/2,this._dislocation.y+=(this._height-this._frameSize.height)/2;else{var r={x:Math.max(0,Math.min((0,i.icdt_RoundNumber)(e.x/this._width,1e3),1)),y:Math.max(0,Math.min((0,i.icdt_RoundNumber)(e.y/this._height,1e3),1))},o={x:(this._width/t-this._width/this._scale)*r.x,y:(this._height/t-this._height/this._scale)*r.y};this._dislocation.x+=o.x,this._dislocation.y+=o.y}this._scale=t,this.change(),this.zoomChange(this.scale)}},Object.defineProperty(t.prototype,"zoomTo",{set:function(t){"fit"==t?this.scaleTo(Math.min((this._width-80)/this._frameSize.width,(this._height-80)/this._frameSize.height),void 0,!0):"number"==typeof t&&this.scaleTo(t/100,void 0,!0)},enumerable:!1,configurable:!0}),t.prototype.init=function(){return{svgViewBox:this.svgViewBox,svgSize:this.svgSize}},t.prototype.move=function(t,e){this._dislocation.x=t.x+e.x/this._scale,this._dislocation.y=t.y+e.y/this._scale,this._svgViewBox.x=-this._dislocation.x,this._svgViewBox.y=-this._dislocation.y,this.refScreen()},t.prototype.change=function(){this._svgSize.x=this._x,this._svgSize.y=this._y,this._svgSize.width=this._width,this._svgSize.height=this._height,this._svgViewBox.x=-this._dislocation.x,this._svgViewBox.y=-this._dislocation.y,this._svgViewBox.width=this._width/this._scale,this._svgViewBox.height=this._height/this._scale,this.refScreen()},t.prototype.refScreen=function(){(0,r.icdt_SyncSvgStyle)()},Object.defineProperty(t.prototype,"onZoomChange",{set:function(t){this._fnZoomChanges.push(t)},enumerable:!1,configurable:!0}),t.prototype.zoomChange=function(t){this._fnZoomChanges.forEach((function(e){return e(t)}))},t}();e.icdt_Screen_MoKam=o},194:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgNodeAttribute_TrumCuoiXaHoi=void 0;var i=n(7645),r=function(){function t(){this._fill="#D9D9D9",this._stroke="#AAAAAA",this._strokeWidth=1,this._strokeLinecap="round",this._strokeLinejoin="round",this._fontFamily=void 0,this._fontSize=20,this._textLength=void 0,this._fnChangeFills=[],this._fnChangeStrokes=[],this._fnChangeStrokeWidths=[],this.loadConfig()}return t.prototype.loadConfig=function(){var t=this;(0,i.LocalStorage_GetConfig)({callback:function(e){t._fill=(null==e?void 0:e.fill)||t._fill,t._stroke=(null==e?void 0:e.stroke)||t._stroke,t._strokeWidth=(null==e?void 0:e.strokeWidth)||t._strokeWidth,t._strokeLinecap=(null==e?void 0:e.strokeLinecap)||t._strokeLinecap,t._strokeLinejoin=(null==e?void 0:e.strokeLinejoin)||t._strokeLinejoin,t.changeFill(t.fill),t.changeStroke(t.stroke),t.changeStrokeWidth(t.strokeWidth)}})},t.prototype.saveConfig=function(){(0,i.LocalStorage_SetConfig)({params:{fill:this._fill,stroke:this._stroke,strokeWidth:this._strokeWidth,strokeLinecap:this._strokeLinecap,strokeLinejoin:this._strokeLinejoin}})},Object.defineProperty(t.prototype,"fill",{get:function(){return this._fill},set:function(t){this._fill=t,this.changeFill(this.fill)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"stroke",{get:function(){return this._stroke},set:function(t){this._stroke=t,this.changeStroke(this.stroke)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"strokeWidth",{get:function(){return this._strokeWidth},set:function(t){this._strokeWidth=t,this.changeStrokeWidth(this.strokeWidth)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"strokeLinecap",{get:function(){return this._strokeLinecap},set:function(t){this._strokeLinecap=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"strokeLinejoin",{get:function(){return this._strokeLinejoin},set:function(t){this._strokeLinejoin=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fontFamily",{get:function(){return this._fontFamily},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fontSize",{get:function(){return this._fontSize},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"textLength",{get:function(){return this._textLength},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onchangefill",{set:function(t){this._fnChangeFills.push(t)},enumerable:!1,configurable:!0}),t.prototype.changeFill=function(t){this._fnChangeFills.forEach((function(e){return e(t)})),this.saveConfig()},Object.defineProperty(t.prototype,"onchangestroke",{set:function(t){this._fnChangeStrokes.push(t)},enumerable:!1,configurable:!0}),t.prototype.changeStroke=function(t){this._fnChangeStrokes.forEach((function(e){return e(t)})),this.saveConfig()},Object.defineProperty(t.prototype,"onchangestrokewidth",{set:function(t){this._fnChangeStrokeWidths.push(t)},enumerable:!1,configurable:!0}),t.prototype.changeStrokeWidth=function(t){this._fnChangeStrokeWidths.forEach((function(e){return e(t)})),this.saveConfig()},t}();e.icdt_SvgNodeAttribute_TrumCuoiXaHoi=r},2634:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Variable_TrumCuoi=void 0;var i=n(7389),r=n(7860),o=n(1493),a=function(t){return t?JSON.parse(JSON.stringify(t)):t},u=[{key:"FinishedTest",type:"boolean",value:!1,note:"Hoàn thành BKT",system:!0,readonly:!1},{key:"TotalTest",type:"number",value:0,note:"Tổng số BKT",system:!0,readonly:!1},{key:"TotalTestDidNotPass",type:"number",value:0,note:"Số BKT không vượt qua",system:!0,readonly:!1},{key:"TotalTestPassed",type:"number",value:0,note:"Số BKT đã vượt qua",system:!0,readonly:!1}],c=[],s={key:"BienSo",value:"0",type:"number",note:null,readonly:!1},l={if:[{type:"variable",variable:"BienSo",variables:null,slide:null,node:null,condition:">",operator:null,valuetype:"value",value:5}],then:[{type:"variable",variable:"BienChu",variables:null,slide:null,node:null,condition:null,operator:"=",valuetype:"value",value:"BienSo > 5"}],else:[{type:"variable",variable:"BienChu",variables:null,slide:null,node:null,condition:null,operator:"=",valuetype:"value",value:"BienSo <= 5"}],id:"57623302",idx:1,variables:["BienSo"]},d=function(){function t(){var t=this;this._data_variables=a(u).concat(a(c)),this._data_conditions=[],this.GetActionExecutings=[],this.GetActionExecuteds=[],this.FuncGetExecuteds=function(e){"function"==typeof e&&t.GetActionExecuteds.push(e)},this.OnGetActionExecuted=function(e){t.GetActionExecuteds.forEach((function(t){t(e)}))},this.SetActionExecutings=[],this.FuncSetExecutings=function(e){"function"==typeof e&&t.SetActionExecutings.push(e)},this.OnSetActionExecuting=function(e){t.SetActionExecutings.forEach((function(t){t(e)}))},this.SetActionExecuteds=[],this.FuncSetExecuteds=function(e){"function"==typeof e&&t.SetActionExecuteds.push(e)},this.OnSetActionExecuted=function(e){t.SetActionExecuteds.forEach((function(t){t(e)}));for(var n=0,i=t.getCondition(e.key)||[];n<i.length;n++){var r=i[n];r.if&&r.if.length>0&&(t.checkValueConditions(r.if)?t.setValueOperators(r.then||[]):t.setValueOperators(r.else||[]))}}}return t.prototype.renew=function(){this._data_variables=a(u).concat(a(c)),this._data_conditions=[]},Object.defineProperty(t.prototype,"totalVariable",{get:function(){return this._data_variables.length},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"totalCondition",{get:function(){return this._data_conditions.length},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"get",{get:function(){return{variables:this._data_variables||[],conditions:this._data_conditions||[]}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"set",{set:function(t){var e=this;if(t){var n,i={};"string"==typeof t?i=JSON.parse(t):"object"==typeof t&&(i=t),this._data_variables=i.variables||[],this._data_conditions=i.conditions||(n=[],e._data_variables.map((function(t){return t.change||[]})).forEach((function(t){n=n.concat(t)})),n),u.forEach((function(t){var n=e._data_variables.filter((function(e){return e.key==t.key}));n.length?n.forEach((function(e,n,i){e.type=t.type,e.readonly=t.readonly,e.system=t.system})):e._data_variables.push(t)}))}},enumerable:!1,configurable:!0}),t.prototype.getVariableTemp=function(){return a(s)},t.prototype.getConditionTemp=function(){return a(l)},t.prototype.getKeys=function(){return this._data_variables.map((function(t){return t.key})).sort((function(t,e){return t.localeCompare(e)}))},t.prototype.getVariableAll=function(){return this._data_variables.length?a((t=this._data_variables,e="key",function(n){for(var i=0,r=t.map((function(t){return t[e]})).sort();i<r.length;i++){var o=r[i];t.filter((function(t){return t[e]==o})).forEach((function(t){n.push(t)})),t=t.filter((function(t){return t[e]!=o}))}return n}([]))):a(u).concat(a(c));var t,e},t.prototype.setVariableAll=function(t){var e=this;t&&("string"==typeof t&&(t=JSON.parse(t)),"object"==typeof t&&(this._data_variables=t),u.forEach((function(t){var n=e._data_variables.filter((function(e){return e.key==t.key}));n.length?n.forEach((function(e,n,i){e.type=t.type,e.readonly=t.readonly,e.system=t.system})):e._data_variables.push(t)})))},t.prototype.getVariable=function(t){return t?a(this._data_variables.filter((function(e){return e.key==t}))[0]||{}):{}},t.prototype.setVariable=function(t,e,n){if(t){switch([null,void 0,NaN,1/0].indexOf(e)>=0&&(e=""),n||(n=(this._data_variables.filter((function(e){return e.key==t}))[0]||{}).type||null),n){case"string":"string"!=typeof e&&(e=e.toString().trim());break;case"number":"number"!=typeof e&&(e=parseFloat(e)||0);break;case"boolean":"string"==typeof e&&(e=e.toLowerCase()),"boolean"!=typeof e&&(e="1"==e||"true"==e||"yes"==e||"dung"==e)}var i=this._data_variables.filter((function(e){return e.key==t}));i.length?i.forEach((function(t,i,r){t.value=e,t.type=n})):this._data_variables.push({key:t,value:e,type:n})}},t.prototype.getValue=function(t,e){if(!t)return"";var n=this._data_variables.filter((function(e){return e.key==t}));if(n.length){var i,r=n[0]||{};switch(this.OnGetActionExecuting(r),e||(e=r.type||null),e){case"string":i=[null,void 0,NaN,1/0].indexOf(r.value)>=0?"":"string"==typeof r.value?r.value||"":r.value.toString().trim();break;case"number":i=[null,void 0,NaN,1/0].indexOf(r.value)>=0?0:"number"==typeof r.value?r.value||0:parseFloat(r.value)||0;break;case"boolean":[null,void 0,NaN,1/0].indexOf(r.value)>=0?i=!1:"boolean"==typeof r.value?i=r.value:(i=(r.value+"").toLowerCase(),i="1"==r.value||"true"==r.value||"yes"==r.value||"dung"==r.value);break;case"audio-src":i=[null,void 0,NaN,1/0].indexOf(r.value)>=0?"":r.value?'<audio controls style="width:280px;vertical-align:middle;"><source src="'.concat(r.value,'"></source></audio>'):"";break;case"video-src":i=[null,void 0,NaN,1/0].indexOf(r.value)>=0?"":r.value?'<video controls style="width:280px;vertical-align:middle;"><source src="'.concat(r.value,'"></source></video>'):"";break;case"img-src":i=[null,void 0,NaN,1/0].indexOf(r.value)>=0?"":r.value?'<img style="width:100%;vertical-align:middle;" src="'.concat(r.value,'"/>'):"";break;default:i=[null,void 0,NaN,1/0].indexOf(r.value)>=0?"":r.value}return this.OnGetActionExecuted(r),i}return null},t.prototype.setValue=function(t,e,n){if(t){switch([null,void 0,NaN,1/0].indexOf(e)>=0&&(e=""),n||(n=(this._data_variables.filter((function(e){return e.key==t}))[0]||{}).type||null),n){case"string":"string"!=typeof e&&(e=e.toString().trim());break;case"number":"number"!=typeof e&&(e=parseFloat(e)||0);break;case"boolean":"string"==typeof e&&(e=e.toLowerCase()),"boolean"!=typeof e&&(e="1"==e||"true"==e||"yes"==e||"dung"==e)}var i=this._data_variables.filter((function(e){return e.key==t}));if(i.length){var r=i[0];this.OnSetActionExecuting(r),r&&(r.value=e),this.OnSetActionExecuted(r)}}},t.prototype.getConditionAll=function(){return a(this._data_conditions.sort((function(t,e){return t.idx-e.idx})))},t.prototype.setConditionAll=function(t){t&&("string"==typeof t&&(t=JSON.parse(t)),"object"==typeof t&&(this._data_conditions=t))},t.prototype.getCondition=function(t){return t?a(this._data_conditions.filter((function(e){return e.variable==t||(e.variables||[]).indexOf(t)>=0})).sort((function(t,e){return t.idx-e.idx}))):{}},t.prototype.switchCondition=function(t,e,n){switch(t){case"==":return"string"==typeof n?(n=n.toLowerCase().trim(),"string"==typeof e&&(e=e.toLowerCase().trim()),n.split(";").map((function(t){return e==t.trim()?1:0})).reduce((function(t,e){return t+e}))>0):e==n;case"!=":return"string"==typeof n?(n=n.toLowerCase().trim(),"string"==typeof e&&(e=e.toLowerCase().trim()),0==n.split(";").map((function(t){return e==t.trim()?1:0})).reduce((function(t,e){return t+e}))):e!=n;case">=":return e>=n;case"<=":return e<=n;case">":return e>n;case"<":return e<n;case"∈":return n=(n+"").toLowerCase().trim(),e=(e+"").toLowerCase().trim(),n.split(";").map((function(t){return e.indexOf(t.trim())>=0?1:0})).reduce((function(t,e){return t+e}))>0;case"∉":return n=(n+"").toLowerCase().trim(),e=(e+"").toLowerCase().trim(),0==n.split(";").map((function(t){return e.indexOf(t.trim())>=0?1:0})).reduce((function(t,e){return t+e}));default:return!1}},t.prototype.switchOperator=function(t,e,n){switch(t){case"+":return e+n;case"-":return e-n;case"*":return e*n;case"/":return e/n;case"=":return n;case"=!":return!n;case"==":return e==n;case"!=":return e!=n}},t.prototype.switchFormula=function(t,e){switch(t){case"sum":return e.reduce((function(t,e){return t+e}));case"sub":return e.reduce((function(t,e){return t-e}));case"pro":return e.reduce((function(t,e){return t*e}));case"div":return e.reduce((function(t,e){return t/e}));case"avg":var n=e.reduce((function(t,e){return t+e}))/(e.length||1);return Math.round(1e4*(n+Number.EPSILON))/1e4;case"min":return Math.min.apply(null,e);case"max":return Math.max.apply(null,e);case"and":return e.reduce((function(t,e){return t&&e}));case"or":return e.reduce((function(t,e){return t||e}));default:return 0}},t.prototype.switchValueType_Condition=function(t){switch(t.valuetype){case"value":return this.switchCondition(t.condition,this.getValue(t.variable),t.value);case"variable":return this.switchCondition(t.condition,this.getValue(t.variable),this.getValue(t.value));default:return 0}},t.prototype.switchValueType_Operator=function(t){var e=this;switch(t.valuetype){case"value":return this.switchOperator(t.operator,this.getValue(t.variable),t.value);case"variable":return this.switchOperator(t.operator,this.getValue(t.variable),this.getValue(t.value));case"variables":var n=this.switchFormula(t.valueformula,t.value.map((function(t){return e.getValue(t)})));return this.switchOperator(t.operator,this.getValue(t.variable),n)}},t.prototype.checkValueCondition=function(t){return this.switchValueType_Condition(t)},t.prototype.getValueOperator=function(t){return this.switchValueType_Operator(t)},t.prototype.setValueOperator=function(t){(null==t?void 0:t.variable)&&this.setValue(t.variable,this.getValueOperator(t))},t.prototype.checkValueConditions=function(t){var e=this;return 0==t.map((function(t){switch(t.type){case"variable":return e.switchValueType_Condition(t)?0:1;case"variables":return 0==t.variables.map((function(n){return e.switchValueType_Condition(Object.assign(a(t),{variable:n}))?0:1})).reduce((function(t,e){return t+e}))?0:1;default:return 0}})).reduce((function(t,e){return(null!=t?t:0)+(null!=e?e:0)}))},t.prototype.setValueOperators=function(t){for(var e,n=0,u=t;n<u.length;n++){var c=u[n];switch(c.type){case"variable":this.setValue(c.variable,this.getValueOperator(c));break;case"variables":for(var s=0,l=c.variables;s<l.length;s++){var d=l[s];this.setValue(d,this.getValueOperator(Object.assign(a(c),{variable:d})))}break;case"slide":i.icdt_Run.runSlide(void 0,void 0,c.slide);break;case"node":(0,o.icdt_Run_Interactive_TriggerShow)({id:c.node,nodeStatus:i.icdt_Run.nodeStatus,slideStatus:i.icdt_Run.slideStatus});var f=i.icdt_Run.findNode(c.node);(null===(e=null==f?void 0:f.interactive)||void 0===e?void 0:e.click)&&(0,r.icdt_Run_Interactive_NodeClick)(f,i.icdt_Run.nodeStatus,i.icdt_Run.slideStatus)}}},t.prototype.FuncGetExecutings=function(t){"function"==typeof t&&this.GetActionExecutings.push(t)},t.prototype.OnGetActionExecuting=function(t){this.GetActionExecutings.forEach((function(e){e(t)}))},t}();e.icdt_Variable_TrumCuoi=d},670:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_PointerEvents=e.icdt_PointerEvent=void 0;var i=n(797),r=n(9427),o=n(3106),a=n(9536);e.icdt_PointerEvent=function(t,e,n,i,r){},e.icdt_PointerEvents=function(t,e,n,u,c){var s,l,d,f=null,h=0,v=0;t.mouseEvent?(f=t.mouseEvent.target,h=t.mouseEvent.offsetX,v=t.mouseEvent.offsetY):t.touchEvent&&(f=t.touchEvent.target,t.touchEvent.touches.length&&(h=t.touchEvent.touches[0].clientX,v=t.touchEvent.touches[0].clientY));var p=null!=n?n:r.icdt.screen.scale,g=null!=u?u:r.icdt.screen.dislocation,y=null!=c?c:r.icdt.screen.offset,_=function(){},b=new o.icdt_PointerHandle({start:null!==(s=null==e?void 0:e.start)&&void 0!==s?s:_,move:null!==(l=null==e?void 0:e.move)&&void 0!==l?l:_,end:null!==(d=null==e?void 0:e.end)&&void 0!==d?d:_});t.mouseEvent?b.start((0,a.icdt_PointerScale)({x:h,y:v},p,g,{x:0,y:0})):t.touchEvent&&b.start((0,a.icdt_PointerScale)({x:h,y:v},p,g,y));var m=function(t){b.move((0,a.icdt_PointerScale)({x:t.clientX,y:t.clientY},p,g,y))},w=function(t){b.end(),[i.V_PointerType.SHAPE,i.V_PointerType.FOREIGNOBJECT,i.V_PointerType.IMAGE,i.V_PointerType.TEXT].includes(r.icdt.pointer.pointer_type)&&(t.shiftKey||(r.icdt.pointer.pointer_type=i.V_PointerType.POINTER))},x=function(t){t.touches.length&&m({clientX:t.touches[0].clientX,clientY:t.touches[0].clientY})},S=function(t){w({shiftKey:t.shiftKey,ctrlKey:t.ctrlKey,altKey:t.altKey}),window.removeEventListener("touchmove",x,!1),window.removeEventListener("touchend",S,!1)},M=function(t){0==t.button&&m({clientX:t.clientX,clientY:t.clientY})},E=function(t){0==t.button&&(w({shiftKey:t.shiftKey,ctrlKey:t.ctrlKey,altKey:t.altKey}),window.removeEventListener("mousemove",M,!1),window.removeEventListener("mouseup",E,!1))};t.mouseEvent?(window.addEventListener("mousemove",M,!1),window.addEventListener("mouseup",E,!1)):t.touchEvent&&(window.addEventListener("touchmove",x,!1),window.addEventListener("touchend",S,!1),null==f||f.addEventListener("touchmove",(function(t){t.preventDefault()})))}},3106:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_PointerHandle=void 0;var n=function(){function t(t){this._points=[],this._options=t}return t.prototype.start=function(t){this._points.length=0,this._points.push([t.x,t.y]),this._options.start(t)},t.prototype.move=function(t){this._points.push([t.x,t.y]),this._options.move(t,this._points)},t.prototype.end=function(){this._options.end(this.offsetLast,this._points)},Object.defineProperty(t.prototype,"offsetFirst",{get:function(){return this._points.length>=1?{x:(t=this._points[0])[0],y:t[1]}:{x:0,y:0};var t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"offsetLast",{get:function(){return this._points.length>=1?{x:(t=this._points[this._points.length-1])[0],y:t[1]}:{x:0,y:0};var t},enumerable:!1,configurable:!0}),t}();e.icdt_PointerHandle=n},9536:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_PointerScale=void 0;var i=n(5877);e.icdt_PointerScale=function(t,e,n,r){return t.x-=r.x,t.y-=r.y,t.x/=e,t.y/=e,t.x-=n.x,t.y-=n.y,t.x=(0,i.icdt_RoundNumber)(t.x),t.y=(0,i.icdt_RoundNumber)(t.y),t}},2140:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_PointerType_ChiChiChoCho=void 0;var i=n(797),r=n(2121),o=n(8947),a=function(){function t(){this._fnChangePointerTypes=[],this._fnChangePointerTypeTemps=[],this._fnChangePenTypes=[],this._fnChangeShapeTypes=[],this._fnChangePolygonTypes=[],this._fnChanges=[],this._pointer_type=0,this._pointer_type_temp=0,this._pen_type=0,this._shape_type=0,this._polygon_type=0}return t.prototype.setPointer_nochange=function(t,e,n){if(this._pointer_type=t,e)switch(t){case i.V_PointerType.PEN:this._pen_type=e;break;case i.V_PointerType.SHAPE:this._shape_type=e,n&&e===r.V_ShapeType.POLYGON&&(this._polygon_type=n)}},Object.defineProperty(t.prototype,"pointer_type",{get:function(){return this._pointer_type},set:function(t){switch(this._pointer_type=t,t){case i.V_PointerType.PEN:this._pen_type||(this._pen_type=o.V_PenType.DRAW);break;case i.V_PointerType.SHAPE:this._shape_type||(this._shape_type=r.V_ShapeType.RECT)}this.changePointerType(this.pointer_type),this.change(this.pointer_type)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"pointer_type_temp",{get:function(){return this._pointer_type_temp},set:function(t){this._pointer_type_temp=t,this.changePointerTypeTemp(this.pointer_type),this.change(this.pointer_type_temp)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"pen_type",{get:function(){return this._pen_type},set:function(t){this._pen_type=t,this.changePenType(this.pointer_type,this.pen_type),this.change(this.pointer_type,this.pen_type)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"shape_type",{get:function(){return this._shape_type},set:function(t){this._shape_type=t,this.changeShapeType(this.pointer_type,this.shape_type),this.change(this.pointer_type,this.shape_type)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"polygon_type",{get:function(){return this._polygon_type},set:function(t){this._polygon_type=t,this.changePolygonType(this.pointer_type,this.shape_type,this.polygon_type),this.change(this.pointer_type,this.shape_type,this.polygon_type)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onchangePointerType",{set:function(t){this._fnChangePointerTypes.push(t)},enumerable:!1,configurable:!0}),t.prototype.changePointerType=function(t,e,n){this._fnChangePointerTypes.forEach((function(i){return i(t,e,n)}))},Object.defineProperty(t.prototype,"onchangePointerTypeTemp",{set:function(t){this._fnChangePointerTypeTemps.push(t)},enumerable:!1,configurable:!0}),t.prototype.changePointerTypeTemp=function(t,e,n){this._fnChangePointerTypeTemps.forEach((function(i){return i(t,e,n)}))},Object.defineProperty(t.prototype,"onchangePenType",{set:function(t){this._fnChangePenTypes.push(t)},enumerable:!1,configurable:!0}),t.prototype.changePenType=function(t,e,n){this._fnChangePenTypes.forEach((function(i){return i(t,e,n)}))},Object.defineProperty(t.prototype,"onchangeShapeType",{set:function(t){this._fnChangeShapeTypes.push(t)},enumerable:!1,configurable:!0}),t.prototype.changeShapeType=function(t,e,n){this._fnChangeShapeTypes.forEach((function(i){return i(t,e,n)}))},Object.defineProperty(t.prototype,"onchangePolygonType",{set:function(t){this._fnChangePolygonTypes.push(t)},enumerable:!1,configurable:!0}),t.prototype.changePolygonType=function(t,e,n){this._fnChangePolygonTypes.forEach((function(i){return i(t,e,n)}))},Object.defineProperty(t.prototype,"onchange",{set:function(t){this._fnChanges.push(t)},enumerable:!1,configurable:!0}),t.prototype.change=function(t,e,n){this._fnChanges.forEach((function(i){return i(t,e,n)}))},t}();e.icdt_PointerType_ChiChiChoCho=a},7389:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.syncSvg=e.icdt_Run=void 0;var i=n(3331),r=n(9427),o=n(3299),a=n(5932),u=function(){function t(){this._nodeStatus=0,this._slideStatus=0,this._slideIdx=0,this._fnChangeSlides=[]}return Object.defineProperty(t.prototype,"data",{set:function(t){this._dataSource=t.data||{},r.icdt.variable.set=t.variable||{}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"nodeStatus",{get:function(){return this._nodeStatus},enumerable:!1,configurable:!0}),t.prototype.refreshNodeStatus=function(){return this._nodeStatus=Math.floor(999999999*Math.random()),this._nodeStatus},Object.defineProperty(t.prototype,"slideStatus",{get:function(){return this._slideStatus},enumerable:!1,configurable:!0}),t.prototype.refreshSlideStatus=function(){return this._slideStatus=Math.floor(999999999*Math.random()),this._slideStatus},Object.defineProperty(t.prototype,"slideIdx",{get:function(){return this._slideIdx},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slideTotal",{get:function(){var t,e,n;return null!==(n=null===(e=null===(t=this._dataSource)||void 0===t?void 0:t.slides)||void 0===e?void 0:e.length)&&void 0!==n?n:0},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slides",{get:function(){var t;return(null===(t=this._dataSource)||void 0===t?void 0:t.slides)||[]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slide",{get:function(){var t;return((null===(t=this._dataSource)||void 0===t?void 0:t.slides)||[])[this._slideIdx]||{}},enumerable:!1,configurable:!0}),t.prototype.findNode=function(t){var e,n,i,r,o,a,u,c=this,s=null===(n=null===(e=this._dataSource)||void 0===e?void 0:e.slides)||void 0===n?void 0:n.find((function(t,e){return e==c._slideIdx})),l=null==s?void 0:s.svg,d=function(e,n){var i=null==e?void 0:e.find((function(e){return e.id==t}));if(i)return i.pid=n,i;for(var r=0,o=e.length||0;r<o&&!i&&!(i=d(e[r].nodes||[],e[r].id));)r++;return i},f=d((null==l?void 0:l.nodes)||[]);return f?(f.style=null!==(i=f.style)&&void 0!==i?i:{},f.source=null!==(r=f.source)&&void 0!==r?r:{},f.animate=null!==(o=f.animate)&&void 0!==o?o:{},f.interactive=null!==(a=f.interactive)&&void 0!==a?a:{},f.variable=null!==(u=f.variable)&&void 0!==u?u:{},f):{id:0,size:{x:0,y:0,width:0,height:0},attribute:{},isfake:!0}},t.prototype.runSlide=function(t,n,u){var c,s,l,d,f,h,v,p,g,y,_;if(this.refreshNodeStatus(),this.refreshSlideStatus(),u?(_=null===(s=null===(c=this._dataSource)||void 0===c?void 0:c.slides)||void 0===s?void 0:s.find((function(t){return t.code==u||t.id==u})))&&(this._slideIdx=(null===(d=null===(l=this._dataSource)||void 0===l?void 0:l.slides)||void 0===d?void 0:d.indexOf(_))||0):n?(_=null===(h=null===(f=this._dataSource)||void 0===f?void 0:f.slides)||void 0===h?void 0:h.find((function(t){return t.id==n})))&&(this._slideIdx=(null===(p=null===(v=this._dataSource)||void 0===v?void 0:v.slides)||void 0===p?void 0:p.indexOf(_))||0):(this._slideIdx=Math.min(Math.max(t||0,0),this.slideTotal-1),_=this.slide),_){(0,e.syncSvg)(r.icdt.container,r.icdt.svg,_,!0),null===(g=jQuery(r.icdt.svg).find("#"+i.V_ID.BACKGROUND_GROUP))||void 0===g||g.empty();var b=(0,a.icdt_SyncSvgNode4Design)(i.V_ID.BACKGROUND_GROUP,"g",void 0,r.icdt.svg);(0,a.syncBackground)(b,_),(0,o.icdt_Run_Slide)(_)}this.changeSlide(this.slides,null===(y=this.slide)||void 0===y?void 0:y.id,this.slideIdx,this.slides.length,_)},Object.defineProperty(t.prototype,"onChangeSlide",{set:function(t){this._fnChangeSlides.push(t)},enumerable:!1,configurable:!0}),t.prototype.changeSlide=function(t,e,n,i,r){this._fnChangeSlides.forEach((function(o){return o(t,e,n,i,r)}))},t}();e.icdt_Run=new u,e.syncSvg=function(t,e,n,i){var o,a,u,c,s,l=window.document.querySelector(e);l||(l=document.createElementNS("http://www.w3.org/2000/svg","svg"),null===(o=window.document.querySelector(t))||void 0===o||o.appendChild(l)),i&&(l.textContent=null);var d=null!==(u=null===(a=null==n?void 0:n.svg)||void 0===a?void 0:a.viewBox)&&void 0!==u?u:r.icdt.screen.frameSize,f=d.x,h=d.y,v=d.width,p=d.height;l.setAttributeNS(null,"viewBox",f+" "+h+" "+v+" "+p),l.setAttribute("id",e.replace("#",""));var g,y,_=null!==(c=jQuery(t).width())&&void 0!==c?c:1080,b=null!==(s=jQuery(t).height())&&void 0!==s?s:1080,m=v/p;m>=_/b?y=(g=_)/m:g=(y=b)*m,l.setAttributeNS(null,"width",g.toString()),l.setAttributeNS(null,"height",y.toString())}},7448:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.runAnimation=e.icdt_Run_Animate_Animation=void 0;var i=n(7389);e.icdt_Run_Animate_Animation=function(t,n,i){var r,o=(null!==(r=t.animate)&&void 0!==r?r:{}).value;(0,e.runAnimation)(t.id,{node:t,value:o,nodeStatus:n,slideStatus:i},(function(){}))},e.runAnimation=function(t,n,o){var a;if(n.value){var u=jQuery("#"+t).parents("g");if(u.length){var c=n.node.size;u.css("transform-origin","".concat(c.x+c.width/2,"px ").concat(c.y+c.height/2,"px"));var s,l,d,f=null!==(a=n.iteration)&&void 0!==a?a:0,h=[];(n.value||"").match(/animation((-[a-zA-Z0-9]+)+)?(\s+||\")/gm)?h.push(n.value):n.value?["top-left","top","top-right","left","right","bottom-left","bottom","bottom-right"].includes(n.value)?(h.push("animation"),h.push("animation-".concat(n.value))):(h.push("animate__animated"),h.push("animate__".concat(n.value))):(h.push("animation"),h.push("animation-fadein")),f<0?(h.push("animation-iteration-infinite"),o(),o=function(){}):f>0&&h.push("animation-iteration-"+(f+1)),s=h.join(" "),l=function(){var a;r(t),(f>0||f<0)&&u.one("animationiteration",(function(){n.slideStatus===i.icdt_Run.slideStatus||(u.data("animate-running",!1),r(t),n.slideStatus===i.icdt_Run.slideStatus&&o())})),u.one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",(function(){var a;switch(u.data("animate-running",!1),r(t),n.finish){default:case 0:case 1:break;case 2:(0,e.runAnimation)(t,{node:n.node,value:null===(a=n.node.animate)||void 0===a?void 0:a.out,nodeStatus:n.nodeStatus,slideStatus:n.slideStatus},(function(){u.addClass("hide")}))}n.slideStatus===i.icdt_Run.slideStatus&&o()})),u.attr("data-class",null!==(a=u.attr("class"))&&void 0!==a?a:""),u.addClass(s),u.data("animate-running",!0)},d=function(){u.data("animate-running")?u.one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",(function(){u.data("animate-running",!1),setTimeout((function(){l()}),100)})):l()},u.hasClass("animation")?setTimeout((function(){d()})):d()}else o()}else o()};var r=function(t){var e,n,i=jQuery("#"+t).parents("g"),r=null===(e=i.attr("class"))||void 0===e?void 0:e.match(/animation((-[a-zA-Z0-9]+)+)?(\s+||\")/gm),o=null===(n=i.attr("class"))||void 0===n?void 0:n.match(/animate((__[a-zA-Z0-9]+)+)?(\s+||\")/gm);r&&r.forEach((function(t){jQuery(i).removeClass(t)})),o&&o.forEach((function(t){jQuery(i).removeClass(t)}));var a=i.attr("data-class");a&&(i.attr("class",a),i.removeAttr("data-class")),jQuery(i).data("animation-running",!1)}},3052:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Interactive_ActionAnimation=void 0;var i=n(7389),r=n(7448);e.icdt_Run_Interactive_ActionAnimation=function(t,e,n){var a;if(e.value){var u=jQuery("#"+t).parents("g");if(u.length){var c=e.node.size;u.css("transform-origin","".concat(c.x+c.width/2,"px ").concat(c.y+c.height/2,"px"));var s,l,d,f=null!==(a=e.iteration)&&void 0!==a?a:0,h=[];(e.value||"").match(/animation((-[a-zA-Z0-9]+)+)?(\s+||\")/gm)?h.push(e.value):(h.push("animation"),e.value?h.push("animation-"+e.value):h.push("animation-fadein")),f<0?(h.push("animation-iteration-infinite"),n(),n=function(){}):f>0&&h.push("animation-iteration-"+(f+1)),s=h.join(" "),l=function(){var a;o(t),(f>0||f<0)&&u.one("animationiteration",(function(){e.slideStatus===i.icdt_Run.slideStatus||(u.data("animate-running",!1),o(t),e.slideStatus===i.icdt_Run.slideStatus&&n())})),u.one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",(function(){var a;switch(u.data("animate-running",!1),o(t),e.finish){default:case 0:case 1:break;case 2:(0,r.runAnimation)(t,{node:e.node,value:null===(a=e.node.animate)||void 0===a?void 0:a.out,nodeStatus:e.nodeStatus,slideStatus:e.slideStatus},(function(){u.addClass("hide")}))}e.slideStatus===i.icdt_Run.slideStatus&&n()})),u.attr("data-class",null!==(a=u.attr("class"))&&void 0!==a?a:""),u.addClass(s),u.data("animate-running",!0)},d=function(){u.data("animate-running")?u.one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",(function(){u.data("animate-running",!1),setTimeout((function(){l()}),100)})):l()},u.hasClass("animation")?setTimeout((function(){d()})):d()}else n()}else n()};var o=function(t){var e,n=jQuery("#"+t).parents("g"),i=null===(e=n.attr("class"))||void 0===e?void 0:e.match(/animation((-[a-zA-Z0-9]+)+)?(\s+||\")/gm);i&&i.forEach((function(t){jQuery(n).removeClass(t)}));var r=n.attr("data-class");r&&(n.attr("class",r),n.removeAttr("data-class")),jQuery(n).data("animation-running",!1)}},1943:function(t,e,n){"use strict";var i=this&&this.__spreadArray||function(t,e,n){if(n||2===arguments.length)for(var i,r=0,o=e.length;r<o;r++)!i&&r in e||(i||(i=Array.prototype.slice.call(e,0,r)),i[r]=e[r]);return t.concat(i||Array.prototype.slice.call(e))};Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Interactive_ActionPoints=void 0;var r=n(184),o=n(7389),a=n(5932),u=n(7448);e.icdt_Run_Interactive_ActionPoints=function(t,e,n){var c;if(e.points&&e.points.length){var s=jQuery("#"+t),l=function(t){var e=[];2===t.length&&t.splice(1,0,[(t[0][0]+t[1][0])/2,(t[0][1]+t[1][1])/2]);for(var n,i,r,o=1,a=t.length;o<a;){if(n=t[o-1],i=t[o],r=t[o+1],(Math.abs(n[0]-i[0])>=15||Math.abs(n[1]-i[1])>=15)&&Math.pow(n[0]-i[0],2)+Math.pow(n[1]-i[1],2)>=Math.pow(15,2)&&r&&(Math.abs(n[0]-r[0])<=20||Math.abs(n[1]-r[1])<=20)&&Math.pow(n[0]-r[0],2)+Math.pow(n[1]-r[1],2)<=Math.pow(20,2))e.push(i);else for(var u=i[0]-n[0],c=i[1]-n[1],s=Math.max(Math.abs(u),Math.abs(c)),l=0;l<s;l+=15)e.push([n[0]+u*l/s,n[1]+c*l/s]);o++}return a>0&&(e.splice(0,0,t[0]),e.push(t[a-1])),e}(function(t){if(1==t.length){var n=e.node.size;return i([[n.x+n.width/2,n.y+n.height/2]],t,!0)}return i([],t,!0)}(e.points||[])),d=null!==(c=e.iteration)&&void 0!==c?c:0;if(d<0&&(n(),n=function(){}),!(s.data("work-running")&&d<0)){s.data("work-running",!0);var f,h=l.length,v=Math.max(20,1e3*(e.time||3)/h),p=o.icdt_Run.findNode(t),g=p.id,y=p.type,_=p.size,b=p.attribute,m=function(t){var i;if(e.slideStatus!==o.icdt_Run.slideStatus)return s.data("work-running",!1),void(e.slideStatus===o.icdt_Run.slideStatus&&n());if(t<h){var c=l[t];c&&(f=Object.assign({},_,{x:c[0]-_.width/2,y:c[1]-_.height/2}),Object.assign(b,(0,r.icdt_Size2Attribute)(y,f,b)),(0,a.icdt_SyncSvgNodeAttribute)(window.document.getElementById(g),b),setTimeout((function(){m(++t)}),v))}else if(d>0)d--,m(1);else if(d<0)m(1);else switch(s.data("work-running",!1),e.slideStatus===o.icdt_Run.slideStatus&&n(),e.finish){default:case 0:break;case 1:Object.assign(b,(0,r.icdt_Size2Attribute)(y,_,b)),(0,a.icdt_SyncSvgNodeAttribute)(window.document.getElementById(g),b);break;case 2:(0,u.runAnimation)(e.node.id,{node:e.node,value:null===(i=e.node.animate)||void 0===i?void 0:i.out,nodeStatus:e.nodeStatus,slideStatus:e.slideStatus},(function(){s.addClass("hide")}))}};m(1)}}else n()}},299:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Interactive_Audio=void 0;var i=n(9427),r=n(7389);e.icdt_Run_Interactive_Audio=function(t,e,n,o,a){var u,c,s,l,d,f,h;if(o.slideStatus!=r.icdt_Run.slideStatus)return e.async&&"change-slide"!=e.async?void 0:void a();if(o.nodeStatus==r.icdt_Run.nodeStatus||e.async&&"change-node"!=e.async){if(!(null===(u=e.source)||void 0===u?void 0:u.path)&&!(null===(c=e.source)||void 0===c?void 0:c.url))return console.warn("".concat(t," -> audio no source!")),a(),void(a=function(){});var v=jQuery("#"+t),p=null!==(s=e.iteration)&&void 0!==s?s:0;if(p<0&&(a(),a=function(){}),!(v.data("audio-running")&&p<0)){v.data("audio-running",!0);var g=function(t){t.pause(),t.remove(),v.data("audio-running",!1)},y=new Audio;return y.autoplay=!0,y.loop=0!=p,y.preload="auto",y.controls=!0,y.setAttributeNode(document.createAttribute("playsinline")),y.addEventListener("canplay",(function(){var t=y.play();t&&t.then((function(t){var n;v.data("audio-running",!0),"time"==e.async?setTimeout((function(){g(y),a(),a=function(){}}),1e3*(null!==(n=e.time)&&void 0!==n?n:1)):"non-stop"==e.async&&(a(),a=function(){})})).catch((function(t){v.data("audio-running",!1),o.slideStatus===r.icdt_Run.slideStatus&&(a(),a=function(){})}))})),y.addEventListener("timeupdate",(function(){switch(e.async){case"time":case"non-stop":break;case"finish-action":n.total>=2&&n.total-n.counter==1&&(g(this),a(),a=function(){});break;default:case"change-node":o.nodeStatus!==r.icdt_Run.nodeStatus&&(g(this),a(),a=function(){});break;case"change-slide":o.slideStatus!==r.icdt_Run.slideStatus&&(g(this),a(),a=function(){})}})),y.addEventListener("canplaythrough",(function(){this.loop&&(p>0?p--:0==p&&(this.loop=!1))})),y.addEventListener("play",(function(){})),y.addEventListener("pause",(function(){})),y.addEventListener("ended",(function(){this.remove(),v.data("audio-running",!1),o.slideStatus===r.icdt_Run.slideStatus&&(a(),a=function(){})})),y.onerror=function(){this.remove(),v.data("audio-running",!1),o.slideStatus===r.icdt_Run.slideStatus&&(a(),a=function(){})},y.src=((null===(l=e.source)||void 0===l?void 0:l.path)?(null===(d=i.icdt.config)||void 0===d?void 0:d.readfileuploadurl)+(null===(f=e.source)||void 0===f?void 0:f.path):null===(h=e.source)||void 0===h?void 0:h.url)||"",y}}else a()}},7860:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Interactive_NodeClick=void 0;var i=n(9427),r=n(7389),o=n(3052),a=n(1943),u=n(299),c=n(1493),s=n(825),l=n(7448);e.icdt_Run_Interactive_NodeClick=function(t,e,n,d){var f,h,v,p,g,y,_={total:0,counter:0},b=null!==(h=null===(f=t.interactive)||void 0===f?void 0:f.click)&&void 0!==h?h:{},m=b.triggershow,w=b.triggerrun,x=b.triggerhide,S=b.action,M=b.audio,E=b.slide,k=b.media;if(console.log("node(".concat(t.id,") | nodeStatus(").concat(e,") | slideStatus(").concat(n,") | click")),m){var T=m.id,N=m.ids,A=m.time;"asynctrue"==(C=m.async)?(0,c.icdt_Run_Interactive_TriggerShow)({id:T,ids:N,nodeStatus:e,slideStatus:n}):"time"==C&&setTimeout((function(){(0,c.icdt_Run_Interactive_TriggerShow)({id:T,ids:N,nodeStatus:e,slideStatus:n})}),1e3*(null!=A?A:0))}if(w){var O=w.id,R=w.ids;A=w.time,"asynctrue"==(C=w.async)?(0,c.icdt_Run_Interactive_TriggerRun)({id:O,ids:R,nodeStatus:e,slideStatus:n}):"time"==C&&setTimeout((function(){(0,c.icdt_Run_Interactive_TriggerRun)({id:O,ids:R,nodeStatus:e,slideStatus:n})}),1e3*(null!=A?A:0))}if(x){var C,I=x.id,j=x.ids;A=x.time,"asynctrue"==(C=x.async)?(0,c.icdt_Run_Interactive_TriggerHide)({id:I,ids:j,nodeStatus:e,slideStatus:n}):"time"==C&&setTimeout((function(){(0,c.icdt_Run_Interactive_TriggerHide)({id:I,ids:j,nodeStatus:e,slideStatus:n})}),1e3*(null!=A?A:0))}var P=function(){setTimeout((function(){if(_.counter>=_.total){if(d&&d(),m){var t=m.id,i=m.ids;(r=m.async)&&"asyncfalse"!=r||(0,c.icdt_Run_Interactive_TriggerShow)({id:t,ids:i,nodeStatus:e,slideStatus:n})}var r;if(w&&(t=w.id,i=w.ids,(r=w.async)&&"asyncfalse"!=r||(0,c.icdt_Run_Interactive_TriggerRun)({id:t,ids:i,nodeStatus:e,slideStatus:n})),x)t=x.id,i=x.ids,(r=x.async)&&"asyncfalse"!=r||(0,c.icdt_Run_Interactive_TriggerHide)({id:t,ids:i,nodeStatus:e,slideStatus:n})}}))};if(null==S?void 0:S.value){_.total+=1;var z=function(){_.counter+=1,P()};switch(null==S?void 0:S.value){case"hide":(0,l.runAnimation)(t.id,{node:t,value:null===(v=t.animate)||void 0===v?void 0:v.out,nodeStatus:e,slideStatus:n},(function(){jQuery("#"+t.id).addClass("hide"),z()}));break;case"points":var D=S.points,V=(A=S.time,S.iteration),L=S.finish;D&&(0,a.icdt_Run_Interactive_ActionPoints)(t.id,{node:t,points:D,time:A,iteration:V,finish:L,nodeStatus:e,slideStatus:n},z);break;default:var B=S.value;A=S.time,V=S.iteration,L=S.finish,(0,o.icdt_Run_Interactive_ActionAnimation)(t.id,{node:t,value:B,time:A,iteration:V,finish:L,nodeStatus:e,slideStatus:n},z)}}if((null===(p=null==M?void 0:M.source)||void 0===p?void 0:p.path)&&(_.total+=1,(0,u.icdt_Run_Interactive_Audio)(t.id,M,_,{nodeStatus:e,slideStatus:n},(function(){_.counter+=1,P()}))),_.total||P(),null==E?void 0:E.id)switch(E.id){case-1:r.icdt_Run.runSlide(r.icdt_Run.slideIdx-1);break;case-2:r.icdt_Run.runSlide(r.icdt_Run.slideIdx+1);break;default:r.icdt_Run.runSlide(void 0,E.id,null===(g=E.code)||void 0===g?void 0:g.toString())}if(null==k?void 0:k.type){var F=(0,s.getMediaViewerUrl)({readfileuploadurl:null===(y=i.icdt.config)||void 0===y?void 0:y.readfileuploadurl,type:null==k?void 0:k.type,oss:null==k?void 0:k.oss,path:null==k?void 0:k.path,url:null==k?void 0:k.url}),G='<div class="popup-media-viewer"><iframe src="'.concat(F,'" frameborder="0" allowfullscreen\n        webkitallowfullscreen allowtransparency="true" allow="autoplay; fullscreen"></iframe><div class="btn-close"><img src="assets/icon-svg/close-outline.svg"/></div></div>'),U=jQuery(G).appendTo(window.document.body);U.find(".btn-close").click((function(t){t.preventDefault(),U.remove()}))}}},3367:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Interactive_NodeShow=void 0;var i=n(3052),r=n(1943),o=n(299),a=n(1493);e.icdt_Run_Interactive_NodeShow=function(t,e,n,u){var c,s,l,d={total:0,counter:0},f=null!==(s=null===(c=t.interactive)||void 0===c?void 0:c.show)&&void 0!==s?s:{},h=f.triggershow,v=f.triggerrun,p=f.triggerhide,g=f.action,y=f.audio;if(console.log("node(".concat(t.id,") | nodeStatus(").concat(e,") | slideStatus(").concat(n,") | show")),h){var _=h.id,b=h.ids,m=h.time;"asynctrue"==(S=h.async)?setTimeout((function(){(0,a.icdt_Run_Interactive_TriggerShow)({id:_,ids:b,nodeStatus:e,slideStatus:n})})):"time"==S&&setTimeout((function(){(0,a.icdt_Run_Interactive_TriggerShow)({id:_,ids:b,nodeStatus:e,slideStatus:n})}),1e3*(null!=m?m:0))}if(v){var w=v.id,x=v.ids;m=v.time,"asynctrue"==(S=v.async)?setTimeout((function(){(0,a.icdt_Run_Interactive_TriggerRun)({id:w,ids:x,nodeStatus:e,slideStatus:n})})):"time"==S&&setTimeout((function(){(0,a.icdt_Run_Interactive_TriggerRun)({id:w,ids:x,nodeStatus:e,slideStatus:n})}),1e3*(null!=m?m:0))}if(p){var S,M=p.id,E=p.ids;m=p.time,"asynctrue"==(S=p.async)?setTimeout((function(){(0,a.icdt_Run_Interactive_TriggerHide)({id:M,ids:E,nodeStatus:e,slideStatus:n})})):"time"==S&&setTimeout((function(){(0,a.icdt_Run_Interactive_TriggerHide)({id:M,ids:E,nodeStatus:e,slideStatus:n})}),1e3*(null!=m?m:0))}var k=function(){setTimeout((function(){if(d.counter>=d.total){if(u&&u(),h){var t=h.id,i=h.ids;(r=h.async)&&"asyncfalse"!=r||(0,a.icdt_Run_Interactive_TriggerShow)({id:t,ids:i,nodeStatus:e,slideStatus:n})}var r;if(v&&(t=v.id,i=v.ids,(r=v.async)&&"asyncfalse"!=r||(0,a.icdt_Run_Interactive_TriggerRun)({id:t,ids:i,nodeStatus:e,slideStatus:n})),p)t=p.id,i=p.ids,(r=p.async)&&"asyncfalse"!=r||(0,a.icdt_Run_Interactive_TriggerHide)({id:t,ids:i,nodeStatus:e,slideStatus:n})}}))};if(null==g?void 0:g.value){d.total+=1;var T=function(){d.counter+=1,k()};switch(null==g?void 0:g.value){case"hide":jQuery("#"+t.id).addClass("hide"),T();break;case"points":var N=g.points,A=(m=g.time,g.iteration),O=g.finish;(0,r.icdt_Run_Interactive_ActionPoints)(t.id,{node:t,points:N,time:m,iteration:A,finish:O,nodeStatus:e,slideStatus:n},T);break;default:var R=g.value;m=g.time,A=g.iteration,O=g.finish,(0,i.icdt_Run_Interactive_ActionAnimation)(t.id,{node:t,value:R,time:m,iteration:A,finish:O,nodeStatus:e,slideStatus:n},T)}}if(null===(l=null==y?void 0:y.source)||void 0===l?void 0:l.path){d.total+=1;var C=(0,o.icdt_Run_Interactive_Audio)(t.id,y,d,{nodeStatus:e,slideStatus:n},(function(){d.counter+=1,k()}));-1==(null==y?void 0:y.iteration)&&jQuery("#"+t.id).click((function(t){t.preventDefault(),C&&(C.volume>=1?C.volume=0:C.volume=C.volume+.25),console.log(null==C?void 0:C.volume)}))}d.total||k()}},1493:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Interactive_TriggerHide=e.icdt_Run_Interactive_TriggerRun=e.icdt_Run_Interactive_TriggerShow=void 0;var i=n(7389),r=n(7860),o=n(7448);e.icdt_Run_Interactive_TriggerShow=function(t){t.id?jQuery("#"+t.id).removeClass("hide"):t.ids&&t.ids.forEach((function(t){jQuery("#"+t).removeClass("hide")}))},e.icdt_Run_Interactive_TriggerRun=function(t){t.id?(jQuery("#"+t.id).removeClass("hide"),(0,r.icdt_Run_Interactive_NodeClick)(i.icdt_Run.findNode(t.id),t.nodeStatus,t.slideStatus)):t.ids&&t.ids.forEach((function(e){jQuery("#"+e).removeClass("hide"),(0,r.icdt_Run_Interactive_NodeClick)(i.icdt_Run.findNode(e),t.nodeStatus,t.slideStatus)}))},e.icdt_Run_Interactive_TriggerHide=function(t){var e;if(t.id){var n=i.icdt_Run.findNode(t.id);(0,o.runAnimation)(t.id,{node:n,value:null===(e=n.animate)||void 0===e?void 0:e.out,nodeStatus:t.nodeStatus,slideStatus:t.slideStatus},(function(){jQuery("#"+t.id).addClass("hide")}))}else t.ids&&t.ids.forEach((function(e){var n,r=i.icdt_Run.findNode(e);(0,o.runAnimation)(e,{node:r,value:null===(n=r.animate)||void 0===n?void 0:n.out,nodeStatus:t.nodeStatus,slideStatus:t.slideStatus},(function(){jQuery("#"+e).addClass("hide")}))}))}},5224:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Node=void 0;var i=n(7389),r=n(7860),o=n(3367),a=n(4018),u=n(7790),c=n(7448),s=n(7459);e.icdt_Run_Node=function(t,e,n,l){var d,f,h,v,p,g,y,_,b,m;(null===(d=e.animate)||void 0===d?void 0:d.value)&&(0,c.icdt_Run_Animate_Animation)(e,n.nodeStatus,n.slideStatus),(null===(f=e.interactive)||void 0===f?void 0:f.show)?(console.log("node(".concat(e.id,") | nodeStatus(").concat(n.nodeStatus,") | slideStatus(").concat(n.slideStatus,") | show")),(0,o.icdt_Run_Interactive_NodeShow)(e,n.nodeStatus,n.slideStatus,l)):l&&l(),(null===(h=e.interactive)||void 0===h?void 0:h.click)&&(m=null===(v=e.interactive)||void 0===v?void 0:v.click,Object.keys(null!=m?m:{}).map((function(t){return m[t]?1:0})).includes(1)&&jQuery("#"+e.id).addClass("interactive-click"),jQuery("#"+e.id).click((function(t){t.preventDefault(),n.nodeStatus=i.icdt_Run.refreshNodeStatus(),console.log("node(".concat(e.id,") | nodeStatus(").concat(n.nodeStatus,") | slideStatus(").concat(n.slideStatus,") | click")),(0,r.icdt_Run_Interactive_NodeClick)(e,n.nodeStatus,n.slideStatus)}))),(null===(p=e.variable)||void 0===p?void 0:p.input)&&jQuery("#"+e.id).on("change","input,textarea",(function(n){n.preventDefault(),(0,u.icdt_Run_Variable_NodeInput)(n.target.value,e,t)})),(null===(g=e.variable)||void 0===g?void 0:g.click)&&((null===(_=null===(y=e.variable)||void 0===y?void 0:y.click)||void 0===_?void 0:_.variable)&&jQuery("#"+e.id).addClass("variable-click"),jQuery("#"+e.id).click((function(n){n.preventDefault(),(0,a.icdt_Run_Variable_NodeClick)(e,t)}))),"test"==(null===(b=e.source)||void 0===b?void 0:b.type)&&(0,s.icdt_Run_Test)(e,t)}},3299:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Slide=void 0;var i=n(2121),r=n(7389),o=n(5224),a=n(2263),u=n(303),c=n(4644),s=n(4971),l=n(5127),d=n(8539),f=n(6383),h=n(451),v=n(5677),p=n(2613);e.icdt_Run_Slide=function(t){var e,n,i,o,u,c=r.icdt_Run.nodeStatus,s=r.icdt_Run.slideStatus;null===(e=t.svg)||void 0===e||e.nodes.forEach((function(t){t.pid=Math.ceil(1e9*Math.random()),(0,a.icdt_SvgGroup)(t.pid)}));var l=null===(i=null===(n=t.svg)||void 0===n?void 0:n.nodes)||void 0===i?void 0:i.map((function(t){var e;return null!==(e=t.idx)&&void 0!==e?e:0})).filter((function(t,e,n){return n.indexOf(t)==e})).sort((function(t,e){return(null!=t?t:0)-(null!=e?e:0)}));g(null!==(u=null===(o=t.svg)||void 0===o?void 0:o.nodes)&&void 0!==u?u:[],null!=l?l:[],{slide:t,nodeStatus:c,slideStatus:s})};var g=function(t,e,n){if(n.slideStatus==r.icdt_Run.slideStatus&&e.length){var i=e.shift(),o=t.filter((function(t){var e;return(null!==(e=t.idx)&&void 0!==e?e:0)==i}));if(o.length){var a=Math.max.apply(null,o.map((function(t){var e;return null!==(e=t.time)&&void 0!==e?e:0}))),u=!1,c=a<.5?0:setTimeout((function(){u||(u=!0,g(t,e,n))}),1e3*a);y(t,e,o,0,n,{idx:i,total:o.length,counter:0,isRecursive:u,timeoutRecursive:c,maxTimeCoundown:a,uid:Math.floor(1e9*Math.random())})}}},y=function(t,e,n,a,_,b){if(_.slideStatus==r.icdt_Run.slideStatus){var m=n[a];if(m){switch(m.type){case i.V_ShapeType.GROUP:break;case i.V_ShapeType.CIRCLE:(0,u.icdt_SvgCircle)(m.id,{size:m.size,attribute:m.attribute},m.pid?window.document.getElementById(m.pid):null);break;case i.V_ShapeType.ELLIPSE:(0,c.icdt_SvgEllipse)(m.id,{size:m.size,attribute:m.attribute},m.pid?window.document.getElementById(m.pid):null);break;case i.V_ShapeType.LINE:(0,s.icdt_SvgLine)(m.id,{size:m.size,attribute:m.attribute},m.pid?window.document.getElementById(m.pid):null);break;case i.V_ShapeType.RECT:(0,l.icdt_SvgRect)(m.id,{size:m.size,attribute:m.attribute},m.pid?window.document.getElementById(m.pid):null);break;case i.V_ShapeType.POLYGON:(0,d.icdt_SvgPolygon)(m.id,{size:m.size,attribute:m.attribute},m.pid?window.document.getElementById(m.pid):null);break;case i.V_ShapeType.FOREIGNOBJECT:(0,f.icdt_SvgForeignObject)(m.id,{size:m.size,attribute:m.attribute,style:m.style,source:m.source},m.pid?window.document.getElementById(m.pid):null);break;case i.V_ShapeType.IMAGE:(0,h.icdt_SvgImage)(m.id,{size:m.size,attribute:m.attribute,source:m.source},m.pid?window.document.getElementById(m.pid):null);break;case i.V_ShapeType.TEXT:(0,v.icdt_SvgText)(m.id,{size:m.size,attribute:m.attribute,source:m.source},m.pid?window.document.getElementById(m.pid):null);break;case i.V_ShapeType.PATH:(0,p.icdt_SvgPath)(m.id,{size:m.size,attribute:m.attribute},m.pid?window.document.getElementById(m.pid):null)}(0,o.icdt_Run_Node)(_.slide,m,_,(function(){b.counter+=1,b.maxTimeCoundown<.5&&b.counter>=b.total&&(b.total=b.counter=0,b.isRecursive||(clearTimeout(b.timeoutRecursive),b.isRecursive=!0,setTimeout((function(){g(t,e,_)}),250)))})),y(t,e,n,++a,_,b)}}}},7818:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Test_Notify_Effect=void 0;var i=n(9427),r=n(451),o=n(5877),a=n(7389);e.icdt_Run_Test_Notify_Effect=function(t,e,n){var r,c,s,l,d=1,f=new Image;f.onload=function(){var t,i,r,c,s,l,h,v,p,g,y,_,b,m,w=0,x=0;(d=(0,o.icdt_RoundNumber)(f.naturalWidth/f.naturalHeight,100))>=1?x=(w=Math.min(f.naturalWidth,null!==(r=null===(i=null===(t=a.icdt_Run.slide.svg)||void 0===t?void 0:t.viewBox)||void 0===i?void 0:i.width)&&void 0!==r?r:0))/d:w=(x=Math.min(f.naturalHeight,null!==(l=null===(s=null===(c=a.icdt_Run.slide.svg)||void 0===c?void 0:c.viewBox)||void 0===s?void 0:s.height)&&void 0!==l?l:0))/d,b=((null!==(p=null===(v=null===(h=a.icdt_Run.slide.svg)||void 0===h?void 0:h.viewBox)||void 0===v?void 0:v.width)&&void 0!==p?p:0)-w)/2,m=((null!==(_=null===(y=null===(g=a.icdt_Run.slide.svg)||void 0===g?void 0:g.viewBox)||void 0===y?void 0:y.height)&&void 0!==_?_:0)-x)/2,e.size={x:b,y:m,width:w,height:x},u(e,n)},f.onerror=function(t){console.error("ImgSrc load failed -> ".concat(JSON.stringify(e.source)),t)},f.src=((null===(r=e.source)||void 0===r?void 0:r.path)?(null===(c=i.icdt.config)||void 0===c?void 0:c.readfileuploadurl)+(null===(s=e.source)||void 0===s?void 0:s.path):null===(l=e.source)||void 0===l?void 0:l.url)||""};var u=function(t,e){if(t.slideStatus==a.icdt_Run.slideStatus){var n=(0,r.icdt_SvgImage)(Math.ceil(1e9*Math.random()),{size:t.size,source:{type:"image",image:null==t?void 0:t.source}}).element;setTimeout((function(){null==n||n.remove(),e()}),3e3)}else e()}},6322:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Test_Notify_Icon=void 0;var i=n(9427),r=n(451),o=n(5877),a=n(7389),u=n(5932),c=n(3331);e.icdt_Run_Test_Notify_Icon=function(t,e,n){var r,o,a,u,c=new Image;c.onload=function(){s(t,{width:c.naturalWidth,height:c.naturalHeight},e,n)},c.onerror=function(t){console.error("ImgSrc load failed -> ".concat(JSON.stringify(e.source)),t),n()},c.src=((null===(r=e.source)||void 0===r?void 0:r.path)?(null===(o=i.icdt.config)||void 0===o?void 0:o.readfileuploadurl)+(null===(a=e.source)||void 0===a?void 0:a.path):null===(u=e.source)||void 0===u?void 0:u.url)||""};var s=function(t,e,n,s){if(n.slideStatus==a.icdt_Run.slideStatus){var l,d,f=(0,o.icdt_RoundNumber)(e.width/e.height,100),h=0,v=0;f>=1?(h=e.width,h=Math.max(h,40),v=(h=Math.min(h,40))/f):(v=e.height,v=Math.max(v,40),h=(v=Math.min(v,40))/f);var p=t.size;l=p.x+p.width-h/2,d=p.y-v/2;var g=(0,u.icdt_SyncSvgNode4Design)(c.V_ID.TEST_GROUP,"g",void 0,i.icdt.target);(0,r.icdt_SvgImage)("icon-".concat(t.id),{size:{x:l,y:d,width:h,height:v},source:{type:"image",image:null==n?void 0:n.source}},g).element,setTimeout((function(){s()}),3e3)}else s()}},9380:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Test_Notify_Sound=void 0;var i=n(9427),r=n(7389);e.icdt_Run_Test_Notify_Sound=function(t,e,n){var o,a,u,c,s,l,d;if(e.slideStatus==r.icdt_Run.slideStatus){if(!(null===(o=e.source)||void 0===o?void 0:o.path)&&!(null===(a=e.source)||void 0===a?void 0:a.url))return console.warn("".concat(t.id," -> audio no source!")),void n();var f=jQuery("#"+t.id),h=null!==(u=e.iteration)&&void 0!==u?u:0;if(h<0&&(n(),n=function(){}),!(f.data("audio-running")&&h<0)){f.data("audio-running",!0);var v=new Audio;return v.autoplay=!0,v.loop=0!=h,v.preload="auto",v.controls=!0,v.setAttributeNode(document.createAttribute("playsinline")),v.addEventListener("canplay",(function(){var t=v.play();t&&t.then((function(t){f.data("audio-running",!0)})).catch((function(t){f.data("audio-running",!1),e.slideStatus===r.icdt_Run.slideStatus&&n()}))})),v.addEventListener("timeupdate",(function(){e.slideStatus!==r.icdt_Run.slideStatus&&function(t){t.pause(),t.remove(),f.data("audio-running",!1)}(this)})),v.addEventListener("canplaythrough",(function(){this.loop&&(h>0?h--:0==h&&(this.loop=!1))})),v.addEventListener("play",(function(){})),v.addEventListener("pause",(function(){})),v.addEventListener("ended",(function(){this.remove(),f.data("audio-running",!1),e.slideStatus===r.icdt_Run.slideStatus&&n()})),v.onerror=function(){this.remove(),f.data("audio-running",!1),e.slideStatus===r.icdt_Run.slideStatus&&n()},v.src=((null===(c=e.source)||void 0===c?void 0:c.path)?(null===(s=i.icdt.config)||void 0===s?void 0:s.readfileuploadurl)+(null===(l=e.source)||void 0===l?void 0:l.path):null===(d=e.source)||void 0===d?void 0:d.url)||"",v}}else n()}},7459:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Test=void 0;var i=n(9427),r=n(7389),o=n(7818),a=n(6322),u=n(5932),c=n(9380),s=n(3331),l=n(2866);e.icdt_Run_Test=function(t,e){var n,o,a,c,l,_,b=function(){};switch(null===(o=null===(n=t.source)||void 0===n?void 0:n.test)||void 0===o?void 0:o.type){case"truefalse":if(jQuery("#"+t.id).click((function(n){n.preventDefault();var i=r.icdt_Run.nodeStatus,o=r.icdt_Run.slideStatus;d(t,e,i,o,b)})),null===(a=e.test)||void 0===a?void 0:a.showselection){var m=(0,u.icdt_SyncSvgNode4Design)(s.V_ID.TEST_GROUP,"g",void 0,i.icdt.target);(0,u.syncTest)(m,e,t)}break;case"singlechoice":jQuery("#"+t.id).click((function(n){n.preventDefault();var i=r.icdt_Run.nodeStatus,o=r.icdt_Run.slideStatus;f(t,e,i,o,b)})),(null===(c=e.test)||void 0===c?void 0:c.showselection)&&(m=(0,u.icdt_SyncSvgNode4Design)(s.V_ID.TEST_GROUP,"g",void 0,i.icdt.target),(0,u.syncTest)(m,e,t));break;case"multichoice":jQuery("#"+t.id).click((function(n){n.preventDefault();var i=r.icdt_Run.nodeStatus,o=r.icdt_Run.slideStatus;h(t,e,i,o,b)})),(null===(l=e.test)||void 0===l?void 0:l.showselection)&&(m=(0,u.icdt_SyncSvgNode4Design)(s.V_ID.TEST_GROUP,"g",void 0,i.icdt.target),(0,u.syncTest)(m,e,t));break;case"fill":jQuery("#"+t.id).on("keyup",'input[type="text"]',(function(t){var e,n=jQuery("<div/>").css({"font-size":jQuery(t.target).css("font-size"),visibility:"hidden",float:"left"}).text(t.target.value).appendTo(window.document.body);jQuery(t.target).css({width:(null!==(e=n.width())&&void 0!==e?e:0)+30})})).on("keypress",'input[type="text"]',(function(t){13===(t.keyCode||t.charCode||t.which)&&(t.preventDefault(),t.stopPropagation(),jQuery(t.target).blur())})).on("change",'input[type="text"]',(function(n){var i,o,a,u=r.icdt_Run.nodeStatus,c=r.icdt_Run.slideStatus,s=null===(i=n.target)||void 0===i?void 0:i.getAttribute("data-key"),l=null===(a=null===(o=n.target)||void 0===o?void 0:o.value)||void 0===a?void 0:a.trim();v(t,e,u,c,{key:s,value:l},b),jQuery("#"+t.id).find('input[type="text"][data-key="'.concat(s,'"]')).val(l)})),(null===(_=e.test)||void 0===_?void 0:_.showselection)||jQuery("#"+t.id).addClass("hide-selection"),function(){var n=(0,u.icdt_SyncSvgNode4Design)(s.V_ID.TEST_GROUP,"g",void 0,i.icdt.target);(0,u.syncTest)(n,e,t)}();break;case"matching-empty":jQuery("#"+t.id).on("touchmove",".ondrag-item",(function(t){t.preventDefault()})).kendoDraggable({filter:".ondrag-item",hint:function(e){var n=t.size.height/t.size.width;return'<div class="ondrag-hint" style="transform: translateX(100%) translateY(100%);width:'.concat(64,"px;height:").concat(64*n,'px;border-radius:8px;border:1px dashed #DADADA;padding:8px;box-sizing:content-box;background-color:rgba(255,255,255,0.8);">').concat(e.prop("outerHTML"),"</div>").replace(/\s+/g," ")},dragstart:function(n){var i;jQuery('svg foreignObject .ondrop-here[data-type2="matching-content"]:empty').addClass("actived"),jQuery('svg foreignObject .ondrop-here[data-type2="matching-empty"]').addClass("actived"),(null===(i=e.test)||void 0===i?void 0:i.showselection)||jQuery('svg foreignObject .ondrop-here[data-type="matching"]').addClass("hide-selection"),g(t,e)},drag:function(t){},dragend:function(t){jQuery("svg foreignObject .ondrop-here").removeClass("actived"),jQuery("svg foreignObject .ondrop-here").removeClass("focused")},dragcancel:function(){jQuery("svg foreignObject .ondrop-here").removeClass("actived"),jQuery("svg foreignObject .ondrop-here").removeClass("focused")}}),jQuery("#".concat(t.id," .ondrop-here")).kendoDropTarget({dragenter:function(t){t.dropTarget.hasClass("actived")&&t.dropTarget.addClass("focused")},dragleave:function(t){t.dropTarget.hasClass("actived")&&t.dropTarget.removeClass("focused")},drop:function(n){if(n.dropTarget.hasClass("actived")){n.dropTarget.removeClass("focused");var i=n.dropTarget,o=n.draggable.currentTarget;i.is(":empty")||i.find(".ondrag-item").appendTo($('svg foreignObject .ondrop-here[data-type2="matching-content"]:empty').first()),o.appendTo(i);var a=r.icdt_Run.nodeStatus,u=r.icdt_Run.slideStatus;p(t,e,a,u,{key:o.data("key")},b)}}}),function(){var n=(0,u.icdt_SyncSvgNode4Design)(s.V_ID.TEST_GROUP,"g",void 0,i.icdt.target);(0,u.syncTest)(n,e,t)}();break;case"matching-content":jQuery("#"+t.id).on("touchmove",".ondrag-item",(function(t){t.preventDefault()})).kendoDraggable({filter:".ondrag-item",hint:function(e){var n=t.size.height/t.size.width;return'<div class="ondrag-hint" style="transform: translateX(100%) translateY(100%);width:'.concat(64,"px;height:").concat(64*n,'px;border-radius:8px;border:1px dashed #DADADA;padding:8px;box-sizing:content-box;background-color:rgba(255,255,255,0.8);">').concat(e.prop("outerHTML"),"</div>").replace(/\s+/g," ")},dragstart:function(t){var n;jQuery('svg foreignObject .ondrop-here[data-type2="matching-content"]:empty').addClass("actived"),jQuery('svg foreignObject .ondrop-here[data-type2="matching-empty"]').addClass("actived"),(null===(n=e.test)||void 0===n?void 0:n.showselection)||jQuery('svg foreignObject .ondrop-here[data-type="matching"]').addClass("hide-selection")},drag:function(t){},dragend:function(t){jQuery("svg foreignObject .ondrop-here").removeClass("actived"),jQuery("svg foreignObject .ondrop-here").removeClass("focused")},dragcancel:function(){jQuery("svg foreignObject .ondrop-here").removeClass("actived"),jQuery("svg foreignObject .ondrop-here").removeClass("focused")}}),jQuery("#".concat(t.id," .ondrop-here")).kendoDropTarget({dragenter:function(t){t.dropTarget.hasClass("actived")&&t.dropTarget.addClass("focused")},dragleave:function(t){t.dropTarget.hasClass("actived")&&t.dropTarget.removeClass("focused")},drop:function(t){if(t.dropTarget.hasClass("actived")){t.dropTarget.removeClass("focused");var e=t.dropTarget;t.draggable.currentTarget.appendTo(e)}}}),function(){var n=(0,u.icdt_SyncSvgNode4Design)(s.V_ID.TEST_GROUP,"g",void 0,i.icdt.target);(0,u.syncTest)(n,e,t)}();break;case"speech":break;case"submit":jQuery("#"+t.id).click((function(n){n.preventDefault();var i=r.icdt_Run.nodeStatus,o=r.icdt_Run.slideStatus;y(t,e,i,o,b)}))}};var d=function(t,e,n,r,o){var a,c,l,d,f=null===(l=null===(c=null===(a=t.source)||void 0===a?void 0:a.test)||void 0===c?void 0:c.truefalse)||void 0===l?void 0:l.iscorrect;if(e.test?e.test.answer?e.test.answer.truefalse={value:t.id,iscorrect:f}:e.test.answer={truefalse:{value:t.id,iscorrect:f}}:e.test={answer:{truefalse:{value:t.id,iscorrect:f}}},null===(d=e.svg)||void 0===d?void 0:d.nodes.find((function(t){var e,n;return"submit"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)}))){if(e.test.showselection){var h=(0,u.icdt_SyncSvgNode4Design)(s.V_ID.TEST_GROUP,"g",void 0,i.icdt.target);(0,u.syncTest)(h,e,t)}}else _(t,e,n,r,{iscorrect:f},o)},f=function(t,e,n,r,o){var a,c,l,d,f=null===(l=null===(c=null===(a=t.source)||void 0===a?void 0:a.test)||void 0===c?void 0:c.singlechoice)||void 0===l?void 0:l.iscorrect;if(e.test?e.test.answer?e.test.answer.singlechoice={value:t.id,iscorrect:f}:e.test.answer={singlechoice:{value:t.id,iscorrect:f}}:e.test={answer:{singlechoice:{value:t.id,iscorrect:f}}},null===(d=e.svg)||void 0===d?void 0:d.nodes.find((function(t){var e,n;return"submit"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)}))){if(e.test.showselection){var h=(0,u.icdt_SyncSvgNode4Design)(s.V_ID.TEST_GROUP,"g",void 0,i.icdt.target);(0,u.syncTest)(h,e,t)}}else _(t,e,n,r,{iscorrect:f},o)},h=function(t,e,n,r,o){var a,c,l,d,f=null===(l=null===(c=null===(a=t.source)||void 0===a?void 0:a.test)||void 0===c?void 0:c.multichoice)||void 0===l?void 0:l.iscorrect;if(e.test?e.test.answer?e.test.answer.multichoice?e.test.answer.multichoice.find((function(e){return e.value==t.id}))?e.test.answer.multichoice=e.test.answer.multichoice.filter((function(e){return e.value!=t.id})):e.test.answer.multichoice.push({value:t.id,iscorrect:f}):e.test.answer.multichoice=[{value:t.id,iscorrect:f}]:e.test.answer={multichoice:[{value:t.id,iscorrect:f}]}:e.test={answer:{multichoice:[{value:t.id,iscorrect:f}]}},null===(d=e.svg)||void 0===d?void 0:d.nodes.find((function(t){var e,n;return"submit"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)}))){if(e.test.showselection){var h=(0,u.icdt_SyncSvgNode4Design)(s.V_ID.TEST_GROUP,"g",void 0,i.icdt.target);(0,u.syncTest)(h,e,t)}}else _(t,e,n,r,{iscorrect:f},o)},v=function(t,e,n,i,r,o){var a,u,c,s,l,d,f=(null!==(s=null===(c=null===(u=null===(a=t.source)||void 0===a?void 0:a.test)||void 0===u?void 0:u.fill)||void 0===c?void 0:c.find((function(t){return t.key=="[[".concat(r.key,"]]")})))&&void 0!==s?s:{}).value,h=f&&f.map((function(t){return null==t?void 0:t.toLocaleLowerCase()})).includes(null===(l=r.value)||void 0===l?void 0:l.toLocaleLowerCase());(null===(d=e.svg)||void 0===d?void 0:d.nodes.find((function(t){var e,n;return"submit"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)})))||_(t,e,n,i,{iscorrect:h},o),r.iscorrect=h,e.test?e.test.answer?e.test.answer.fill?e.test.answer.fill.find((function(t){return t.key==r.key}))?e.test.answer.fill.filter((function(t){return t.key==r.key})).forEach((function(t){t.value=r.value,t.iscorrect=r.iscorrect})):e.test.answer.fill.push(r):e.test.answer.fill=[r]:e.test.answer={fill:[r]}:e.test={answer:{fill:[r]}}},p=function(t,e,n,i,r,o){var a,u,c,s,l=(null!==(c=null===(u=null===(a=t.source)||void 0===a?void 0:a.test)||void 0===u?void 0:u.matching)&&void 0!==c?c:{key:"KIEN"}).key,d=r.key==l;(null===(s=e.svg)||void 0===s?void 0:s.nodes.find((function(t){var e,n;return"submit"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)})))||_(t,e,n,i,{iscorrect:d},o),g(t,e);var f={id:t.id,key:null!=l?l:"",value:r.key};e.test?e.test.answer?e.test.answer.matching?e.test.answer.matching.find((function(t){return t.id==f.id}))?e.test.answer.matching.filter((function(t){return t.id==f.id})).forEach((function(t){t.key=f.key,t.value=f.value})):e.test.answer.matching.push(f):e.test.answer.matching=[f]:e.test.answer={matching:[f]}:e.test={answer:{matching:[f]}}},g=function(t,e){var n,i,r;null===(r=null===(i=null===(n=e.test)||void 0===n?void 0:n.answer)||void 0===i?void 0:i.matching)||void 0===r||r.filter((function(e){return e.id==t.id})).forEach((function(t){return t.value=""})),jQuery("#node-".concat(t.id)).remove()},y=function(t,e,n,i,r){var o,a,u,c,s,l,d,f,h,v,p,g,y,b,m,w,x,S,M,E,k,T,N,A,O,R,C,I,j,P,z,D,V,L,B,F,G,U,K;(null===(a=null===(o=null==e?void 0:e.test)||void 0===o?void 0:o.answer)||void 0===a?void 0:a.truefalse)?K=null===(s=null===(c=null===(u=null==e?void 0:e.test)||void 0===u?void 0:u.answer)||void 0===c?void 0:c.truefalse)||void 0===s?void 0:s.iscorrect:(null===(d=null===(l=null==e?void 0:e.test)||void 0===l?void 0:l.answer)||void 0===d?void 0:d.singlechoice)?K=null===(v=null===(h=null===(f=null==e?void 0:e.test)||void 0===f?void 0:f.answer)||void 0===h?void 0:h.singlechoice)||void 0===v?void 0:v.iscorrect:(null===(g=null===(p=null==e?void 0:e.test)||void 0===p?void 0:p.answer)||void 0===g?void 0:g.multichoice)?K=1==[null===(m=null===(b=null===(y=null==e?void 0:e.test)||void 0===y?void 0:y.answer)||void 0===b?void 0:b.multichoice)||void 0===m?void 0:m.length,null===(M=null===(S=null===(x=null===(w=null==e?void 0:e.test)||void 0===w?void 0:w.answer)||void 0===x?void 0:x.multichoice)||void 0===S?void 0:S.map((function(t){return t.iscorrect?1:0})))||void 0===M?void 0:M.reduce((function(t,e){return t+e})),null===(T=null===(k=null===(E=null==e?void 0:e.svg)||void 0===E?void 0:E.nodes)||void 0===k?void 0:k.filter((function(t){var e,n,i,r,o;return"multichoice"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)&&(null===(o=null===(r=null===(i=t.source)||void 0===i?void 0:i.test)||void 0===r?void 0:r.multichoice)||void 0===o?void 0:o.iscorrect)})))||void 0===T?void 0:T.length].filter((function(t,e,n){return n.indexOf(t)==e})).length:(null===(A=null===(N=null==e?void 0:e.test)||void 0===N?void 0:N.answer)||void 0===A?void 0:A.fill)?K=(null===(I=null===(C=null===(R=null===(O=null==e?void 0:e.test)||void 0===O?void 0:O.answer)||void 0===R?void 0:R.fill)||void 0===C?void 0:C.map((function(t){return t.iscorrect?1:0})))||void 0===I?void 0:I.reduce((function(t,e){return t+e})))==(null===(z=null===(P=null===(j=e.svg)||void 0===j?void 0:j.nodes)||void 0===P?void 0:P.filter((function(t){var e,n;return"fill"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)})))||void 0===z?void 0:z.length):(null===(V=null===(D=null==e?void 0:e.test)||void 0===D?void 0:D.answer)||void 0===V?void 0:V.matching)&&(K=(null===(F=null===(B=null===(L=e.svg)||void 0===L?void 0:L.nodes)||void 0===B?void 0:B.filter((function(t){var e,n;return"matching-empty"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)})))||void 0===F?void 0:F.length)==((null===(U=null===(G=null==e?void 0:e.test)||void 0===G?void 0:G.answer)||void 0===U?void 0:U.matching)||[]).map((function(t){return t.key==t.value?1:0})).reduce((function(t,e){return t+e}))),_(t,e,n,i,{iscorrect:K},r)},_=function(t,e,n,i,r,u){var s,d,f,h,v,p,g,y,_,b,m,w,x,S,M,E,k,T;r.iscorrect?((null===(d=null===(s=e.test)||void 0===s?void 0:s.audiotrue)||void 0===d?void 0:d.path)&&(0,c.icdt_Run_Test_Notify_Sound)(t,{source:(0,l.extractSourceV1)(null===(f=e.test)||void 0===f?void 0:f.audiotrue),iteration:0,nodeStatus:n,slideStatus:i},u),(null===(v=null===(h=e.test)||void 0===h?void 0:h.icontrue)||void 0===v?void 0:v.path)&&(0,a.icdt_Run_Test_Notify_Icon)(t,{source:(0,l.extractSourceV1)(null===(p=e.test)||void 0===p?void 0:p.icontrue),iteration:0,nodeStatus:n,slideStatus:i},u),(null===(y=null===(g=e.test)||void 0===g?void 0:g.effecttrue)||void 0===y?void 0:y.path)&&(0,o.icdt_Run_Test_Notify_Effect)(t,{source:(0,l.extractSourceV1)(null===(_=e.test)||void 0===_?void 0:_.effecttrue),iteration:0,nodeStatus:n,slideStatus:i},u)):((null===(m=null===(b=e.test)||void 0===b?void 0:b.audiofalse)||void 0===m?void 0:m.path)&&(0,c.icdt_Run_Test_Notify_Sound)(t,{source:(0,l.extractSourceV1)(null===(w=e.test)||void 0===w?void 0:w.audiofalse),iteration:0,nodeStatus:n,slideStatus:i},u),(null===(S=null===(x=e.test)||void 0===x?void 0:x.iconfalse)||void 0===S?void 0:S.path)&&(0,a.icdt_Run_Test_Notify_Icon)(t,{source:(0,l.extractSourceV1)(null===(M=e.test)||void 0===M?void 0:M.iconfalse),iteration:0,nodeStatus:n,slideStatus:i},u),(null===(k=null===(E=e.test)||void 0===E?void 0:E.effectfalse)||void 0===k?void 0:k.path)&&(0,o.icdt_Run_Test_Notify_Effect)(t,{source:(0,l.extractSourceV1)(null===(T=e.test)||void 0===T?void 0:T.effectfalse),iteration:0,nodeStatus:n,slideStatus:i},u))}},4018:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Variable_NodeClick=void 0;var i=n(2121),r=n(9427),o=n(5677),a=n(2263);e.icdt_Run_Variable_NodeClick=function(t,e){var n;r.icdt.variable.setValueOperator(null===(n=t.variable)||void 0===n?void 0:n.click),u(e)};var u=function(t){var e,n=function(t,e){null==t||t.forEach((function(t){switch(t.type){case i.V_ShapeType.GROUP:(0,a.icdt_SvgGroup)(t.id,{},e?window.document.getElementById(e):null),n(t.nodes,t.id);break;case i.V_ShapeType.POLYGON:break;case i.V_ShapeType.TEXT:(0,o.icdt_SvgText)(t.id,{size:t.size,attribute:t.attribute,source:t.source},e?window.document.getElementById(e):null)}}))};n(null===(e=t.svg)||void 0===e?void 0:e.nodes)}},7790:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Variable_NodeInput=void 0;var i=n(2121),r=n(9427),o=n(5677),a=n(2263);e.icdt_Run_Variable_NodeInput=function(t,e,n){var i,o,a;r.icdt.variable.setValue(null!==(a=null===(o=null===(i=e.variable)||void 0===i?void 0:i.input)||void 0===o?void 0:o.variable)&&void 0!==a?a:"",t),u(n)};var u=function(t){var e,n=function(t,e){null==t||t.forEach((function(t){switch(t.type){case i.V_ShapeType.GROUP:(0,a.icdt_SvgGroup)(t.id,{},e?window.document.getElementById(e):null),n(t.nodes,t.id);break;case i.V_ShapeType.POLYGON:break;case i.V_ShapeType.TEXT:(0,o.icdt_SvgText)(t.id,{size:t.size,attribute:t.attribute,source:t.source},e?window.document.getElementById(e):null)}}))};n(null===(e=t.svg)||void 0===e?void 0:e.nodes)}},5932:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.syncTest=e.syncBackground=e.syncNodeIndex=e.syncNodeInteractive=e.syncNodeScan=e.syncNodeSelect=e.syncNodeResize=e.syncNodeCreate=e.icdt_SyncSvgNode4Design=e.icdt_SyncSvgNodeStyleActive=e.icdt_SyncSvgNodeSource=e.icdt_SyncSvgNodeStyle=e.icdt_SyncSvgNodeAttribute=e.icdt_SyncSvgNode=e.icdt_SvgRenew=e.icdt_SyncSvgStyle=e.icdt_SyncSvgBackground=e.icdt_Svg=void 0;var i=n(2121),r=n(3331),o=n(4225),a=n(825),u=n(9753),c=n(9427),s=n(4355),l=n(5127),d=n(451),f=n(303),h=n(7389),v=n(6383),p=n(5677);e.icdt_Svg=function(t,e){var n,i=window.document.querySelector(e);i||(i=window.document.createElementNS("http://www.w3.org/2000/svg","svg"),null===(n=window.document.querySelector(t))||void 0===n||n.appendChild(i));var r=c.icdt.screen.init(),o=r.svgViewBox,a=r.svgSize;i.setAttributeNS(null,"viewBox","".concat(o.x," ").concat(o.y," ").concat(o.width," ").concat(o.height)),i.setAttribute("id",e.replace("#","")),i.style.display="block",i.style.width="".concat(a.width,"px"),i.style.height="".concat(a.height,"px"),i.style.backgroundColor="#fafafa",i.style.cursor="default"},e.icdt_SyncSvgBackground=function(t){jQuery(c.icdt.target).find("#"+r.V_ID.BACKGROUND_GROUP).empty();var n=(0,e.icdt_SyncSvgNode4Design)(r.V_ID.BACKGROUND_GROUP,"g",void 0,c.icdt.target);(0,e.syncBackground)(n,t),function(){var n=window.document.getElementById(null==t?void 0:t.id);jQuery(n).find("#"+r.V_ID.BACKGROUND_GROUP).empty();var i=(0,e.icdt_SyncSvgNode4Design)(r.V_ID.BACKGROUND_GROUP,"g",void 0,n);(0,e.syncBackground)(i,t)}()},e.icdt_SyncSvgStyle=function(){var t=c.icdt.screen.svgViewBox,e=c.icdt.screen.svgSize;c.icdt.target&&(c.icdt.target.setAttributeNS(null,"viewBox","".concat(t.x," ").concat(t.y," ").concat(t.width," ").concat(t.height)),c.icdt.target.style.left="".concat(e.x,"px"),c.icdt.target.style.top="".concat(e.y,"px"),c.icdt.target.style.width="".concat(e.width,"px"),c.icdt.target.style.height="".concat(e.height,"px"))},e.icdt_SvgRenew=function(){jQuery(c.icdt.target).find(">*:not(defs)").remove()},e.icdt_SyncSvgNode=function(t,n,r,o,a){var u;return t?(u=jQuery(a||c.icdt.target).find("#"+t).get(0))||((u=window.document.createElementNS("http://www.w3.org/2000/svg",r)).setAttribute("id",t),n==i.V_ShapeType.FOREIGNOBJECT&&u.setAttribute("xmlns:html","http://www.w3.org/1999/xhtml"),jQuery(u).appendTo(a||c.icdt.target)):(u=window.document.createElementNS("http://www.w3.org/2000/svg",r),jQuery(u).appendTo(a||c.icdt.target)),(null==o?void 0:o.attribute)&&(0,e.icdt_SyncSvgNodeAttribute)(u,null==o?void 0:o.attribute),(null==o?void 0:o.style)&&(0,e.icdt_SyncSvgNodeStyle)(u,null==o?void 0:o.style),(null==o?void 0:o.source)&&(0,e.icdt_SyncSvgNodeSource)(u,n,null==o?void 0:o.source),u},e.icdt_SyncSvgNodeAttribute=function(t,e){var n,i,r,a;return jQuery(t).attr((n=Object.assign({},e||{}),null===(i=Object.keys(n))||void 0===i||i.forEach((function(t){var e,i,r,o,a,u,c,s,l,d,f,h;switch(t){case"fill":break;case"fillRule":Object.assign(n,{"fill-rule":null!==(e=n.fillRule)&&void 0!==e?e:null,fillRule:null});break;case"stroke":Object.assign(n,{"stroke-width":null!==(i=n.strokeWidth)&&void 0!==i?i:null,strokeWidth:null});break;case"strokeLinecap":Object.assign(n,{"stroke-linecap":null!==(r=n.strokeLinecap)&&void 0!==r?r:null,strokeLinecap:null});break;case"strokeLinejoin":Object.assign(n,{"stroke-linejoin":null!==(o=n.strokeLinejoin)&&void 0!==o?o:null,strokeLinejoin:null});break;case"strokeMiterlimit":Object.assign(n,{"stroke-miterlimit":null!==(a=n.strokeMiterlimit)&&void 0!==a?a:null,strokeMiterlimit:null});break;case"strokeDasharray":Object.assign(n,{"stroke-dasharray":null!==(u=n.strokeDasharray)&&void 0!==u?u:null,strokeDasharray:null});break;case"strokeDasharrays":Object.assign(n,{"stroke-dasharray":null!==(s=null===(c=n.strokeDasharrays)||void 0===c?void 0:c.join(" "))&&void 0!==s?s:null,strokeDasharrays:null});break;case"fontFamily":Object.assign(n,{"font-family":null!==(l=n.fontFamily)&&void 0!==l?l:null,fontFamily:null});break;case"fontWeight":Object.assign(n,{"font-weight":null!==(d=n.fontWeight)&&void 0!==d?d:null,fontWeight:null});break;case"fontSize":Object.assign(n,{"font-size":null!==(f=n.fontSize)&&void 0!==f?f:null,fontSize:null});break;case"textLength":Object.assign(n,{textLength:n.textLength?"".concat(n.textLength,"px"):null});break;case"transformOrigin":Object.assign(n,{"transform-origin":null!==(h=n.transformOrigin)&&void 0!==h?h:null,transformOrigin:null})}})),Object.assign({},null!=n?n:{},{fill:(null==n?void 0:n.fill)?(0,o.lib_hex2rgba)(n.fill,null!==(r=null==n?void 0:n.fillOpacity)&&void 0!==r?r:1):"rgba(0,0,0,0)",fillOpacity:null,stroke:(null==n?void 0:n.stroke)?(0,o.lib_hex2rgba)(n.stroke,null!==(a=null==n?void 0:n.strokeOpacity)&&void 0!==a?a:1):"rgba(0,0,0,0)",strokeOpacity:null}))),t},e.icdt_SyncSvgNodeStyle=function(t,e){var n,i;return jQuery(t).css((n=Object.assign({},e||{}),null===(i=Object.keys(n))||void 0===i||i.forEach((function(t){var e,i;switch(t){case"padding":Object.assign(n,{padding:n.padding?"".concat(n.padding,"px"):null});break;case"borderWidth":n.borderWidth&&n.borderColor?Object.assign(n,{"border-width":"".concat(n.borderWidth,"px"),"border-style":n.borderStyle||"solid","border-color":(0,o.lib_hex2rgba)(n.borderColor,null!==(e=n.borderOpacity)&&void 0!==e?e:1)}):Object.assign(n,{"border-width":"","border-style":"","border-color":""}),Object.assign(n,{borderWidth:null,borderStyle:null,borderColor:null,borderOpacity:null});break;case"borderRadius":Object.assign(n,{"border-radius":n.borderRadius?"".concat(n.borderRadius,"px"):null,borderRadius:null});break;case"backgroundColor":n.backgroundColor?Object.assign(n,{"background-color":(0,o.lib_hex2rgba)(n.backgroundColor,null!==(i=n.backgroundOpacity)&&void 0!==i?i:1)}):Object.assign(n,{"background-color":""}),Object.assign(n,{backgroundColor:null,backgroundOpacity:null})}})),n)),t},e.icdt_SyncSvgNodeSource=function(t,e,n){var r,o,u,s,l,d,f,h,v,p,g,y,_,b,m,w,x,S,M,E,k,T,N,A,O,R,C,I,j,P,z,D,V,L,B,F,G,U,K,Q,H,$,q,Y,W,X,J,Z,tt,et,nt,it,rt,ot;switch(e){case i.V_ShapeType.TEXT:jQuery(t).text(null!==(o=null===(r=null==n?void 0:n.text)||void 0===r?void 0:r.textContent)&&void 0!==o?o:"");break;case i.V_ShapeType.IMAGE:jQuery(t).attr("href",(null===(u=null==n?void 0:n.image)||void 0===u?void 0:u.base64)||((null===(s=null==n?void 0:n.image)||void 0===s?void 0:s.path)?(null===(l=c.icdt.config)||void 0===l?void 0:l.readfileuploadurl)+(null===(d=null==n?void 0:n.image)||void 0===d?void 0:d.path):null===(f=null==n?void 0:n.image)||void 0===f?void 0:f.url)||"");break;case i.V_ShapeType.FOREIGNOBJECT:switch(null==n?void 0:n.type){case"text":if((null===(h=n.text)||void 0===h?void 0:h.variableKeywords)&&(null===(v=n.text)||void 0===v?void 0:v.variableKeywords.length)){var at=c.icdt.variable.getKeys(),ut=(null===(p=n.text)||void 0===p?void 0:p.textContent)||"";n.text.variableKeywords.forEach((function(t){var e=t.replace(/[^a-zA-Z0-9_]/gm,"");if(at.indexOf(e)>=0){var n=c.icdt.variable.getValue(e);ut=ut.replace(t,n)}})),jQuery(t).text(ut)}else jQuery(t).text((null===(g=n.text)||void 0===g?void 0:g.textContent)||"");break;case"html":var ct=(null===(y=null==n?void 0:n.html)||void 0===y?void 0:y.htmlContent)||"";if((null===(_=n.html)||void 0===_?void 0:_.variableKeywords)&&(null===(b=n.html)||void 0===b?void 0:b.variableKeywords.length)){var st=c.icdt.variable.getKeys();n.html.variableKeywords.forEach((function(t){var e=t.replace(/[^a-zA-Z0-9_]/gm,"");if(st.indexOf(e)>=0){var n=c.icdt.variable.getValue(e);ct=ct.replace(t,n)}}))}jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;">'.concat(ct,"</div>")).find("img[path],video[path],iframe[path]").each((function(t,e){var n,i;e.setAttribute("src",(null!==(i=null===(n=c.icdt.config)||void 0===n?void 0:n.readfileuploadurl)&&void 0!==i?i:"")+e.getAttribute("path")),e.removeAttribute("path")}));break;case"input":(null===(m=n.input)||void 0===m?void 0:m.input)?jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;"><input type="text" placeholder="'.concat(null!==(x=null===(w=n.input)||void 0===w?void 0:w.placeholder)&&void 0!==x?x:"",'" maxlength="100" /></div>')):(null===(S=n.input)||void 0===S?void 0:S.textarea)&&jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;"><textarea placeholder="'.concat(null!==(E=null===(M=n.input)||void 0===M?void 0:M.placeholder)&&void 0!==E?E:"",'" maxlength="1000"></textarea></div>'));break;case"image":jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;"><img src="'.concat((null===(k=n.image)||void 0===k?void 0:k.base64)||((null===(T=n.image)||void 0===T?void 0:T.path)?(null===(N=c.icdt.config)||void 0===N?void 0:N.readfileuploadurl)+(null===(A=n.image)||void 0===A?void 0:A.path):null===(O=n.image)||void 0===O?void 0:O.url)||"",'" style="width:100%;height:100%;display:block;"/></div>'));break;case"iframe":jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;"><iframe src="'.concat(((null===(R=n.iframe)||void 0===R?void 0:R.path)?(null===(C=c.icdt.config)||void 0===C?void 0:C.readfileuploadurl)+(null===(I=n.iframe)||void 0===I?void 0:I.path):null===(j=n.iframe)||void 0===j?void 0:j.url)||"",'" frameborder="0" allowfullscreen\n                    webkitallowfullscreen allowtransparency="true" allow="autoplay; fullscreen" style="width:100%;height:100%;display:block;"></iframe></div>'));break;case"embed":var lt=(0,a.getMediaViewerUrl)({readfileuploadurl:null===(P=c.icdt.config)||void 0===P?void 0:P.readfileuploadurl,type:null===(z=n.embed)||void 0===z?void 0:z.type,oss:null===(D=n.embed)||void 0===D?void 0:D.oss,path:null===(V=n.embed)||void 0===V?void 0:V.path,url:null===(L=n.embed)||void 0===L?void 0:L.url});jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;"><iframe src="'.concat(lt,'" frameborder="0" allowfullscreen\n                    webkitallowfullscreen allowtransparency="true" allow="autoplay; fullscreen" style="width:100%;height:100%;display:block;"></iframe></div>'));break;case"svg":jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;">'.concat(null!==(F=null===(B=n.svg)||void 0===B?void 0:B.svgContent)&&void 0!==F?F:"","</div>"));break;case"test":var dt=(null===(G=null==n?void 0:n.html)||void 0===G?void 0:G.htmlContent)||"";if((null===(U=n.html)||void 0===U?void 0:U.variableKeywords)&&(null===(K=n.html)||void 0===K?void 0:K.variableKeywords.length)){var ft=c.icdt.variable.getKeys();n.html.variableKeywords.forEach((function(t){var e=t.replace(/[^a-zA-Z0-9_]/gm,"");if(ft.indexOf(e)>=0){var n=c.icdt.variable.getValue(e);dt=dt.replace(t,n)}}))}switch(null===(Q=null==n?void 0:n.test)||void 0===Q?void 0:Q.type){case"truefalse":jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;" data-node="test" data-type="'.concat(null==n?void 0:n.test.type,'" data-correct="').concat((null===(H=null==n?void 0:n.test.truefalse)||void 0===H?void 0:H.iscorrect)?1:0,'"><div style="display:flex;align-items:center;width:100%;height:100%;"><div style="width:100%">').concat(dt,"</div></div></div>"));break;case"singlechoice":jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;" data-node="test" data-type="'.concat(null==n?void 0:n.test.type,'" data-correct="').concat((null===($=null==n?void 0:n.test.singlechoice)||void 0===$?void 0:$.iscorrect)?1:0,'"><div style="display:flex;align-items:center;width:100%;height:100%;"><div style="width:100%">').concat(dt,"</div></div></div>"));break;case"multichoice":jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;" data-node="test" data-type="'.concat(null==n?void 0:n.test.type,'" data-correct="').concat((null===(q=null==n?void 0:n.test.multichoice)||void 0===q?void 0:q.iscorrect)?1:0,'"><div style="display:flex;align-items:center;width:100%;height:100%;"><div style="width:100%">').concat(dt,"</div></div></div>"));break;case"matching-empty":jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;" class="ondrop-here" data-node="test" data-type="matching" data-type2="matching-empty" data-key="'.concat(null===(Y=null==n?void 0:n.test.matching)||void 0===Y?void 0:Y.key,'"></div>'));break;case"matching-content":jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;" class="ondrop-here" data-node="test" data-type="matching" data-type2="matching-content" data-key="'.concat(null===(W=null==n?void 0:n.test.matching)||void 0===W?void 0:W.key,'"><div class="ondrag-item" data-key="').concat(null!==(Z=null===(J=null===(X=null==n?void 0:n.test)||void 0===X?void 0:X.matching)||void 0===J?void 0:J.key)&&void 0!==Z?Z:"KIEN",'"><div style="display:flex;align-items:center;width:100%;height:100%;"><div style="width:100%">').concat(dt,"</div></div></div></div>"));break;case"fill":((null===(tt=n.html)||void 0===tt?void 0:tt.fillKeywords)||[]).forEach((function(t){var e='<input type="text" maxlength="128" style="display:inline-block;width:100px;min-width:100px;max-width:100%;padding:0px 10px;margin:0px;box-sizing:border-box;outline:none;box-shadow:none;border-width:0px 0px 1px;border-top-style:initial;border-right-style:initial;border-left-style:initial;border-top-color:initial;border-right-color:initial;border-left-color:initial;border-image:initial;border-bottom-style:dashed;border-bottom-color:rgb(123,146,254);background:transparent;animation:0.3s ease-in-out 0s 1 normal none running width;text-align:inherit;" data-key="'.concat(t.replace(/[^a-zA-Z0-9]+/gm,""),'"/>');dt=dt.replace(new RegExp(t.replace(/\[/g,"\\[").replace(/\]/g,"\\]"),"g"),e)})),jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;" data-node="test"><div style="display:flex;align-items:center;width:100%;height:100%;"><div style="width:100%">'.concat(dt,"</div></div></div>"));break;case"speech":jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;" data-node="test"><div style="display:flex;align-items:center;width:100%;height:100%;"><img src="images/svg/component/microphone4.svg" width="60" height="60"/></div></div>');break;case"submit":jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;" data-node="test"><img src="'.concat(null!==(ot=(null===(et=n.image)||void 0===et?void 0:et.path)?(null===(nt=c.icdt.config)||void 0===nt?void 0:nt.readfileuploadurl)+(null===(it=n.image)||void 0===it?void 0:it.path):null===(rt=n.image)||void 0===rt?void 0:rt.url)&&void 0!==ot?ot:"",'" style="width:100%;height:100%;display:block;"/></div>'))}jQuery(t).find("img[path],video[path],iframe[path]").each((function(t,e){var n,i;e.setAttribute("src",(null!==(i=null===(n=c.icdt.config)||void 0===n?void 0:n.readfileuploadurl)&&void 0!==i?i:"")+e.getAttribute("path")),e.removeAttribute("path")}))}}},e.icdt_SyncSvgNodeStyleActive=function(t,e){return e?jQuery(t).css({filter:"url(#nodeSelected)"}):jQuery(c.icdt.target).find("[style]").css("filter",""),t},e.icdt_SyncSvgNode4Design=function(t,e,n,i){var r=jQuery(i||c.icdt.target).find("#"+t).get(0);return r||((r=window.document.createElementNS("http://www.w3.org/2000/svg",e)).setAttribute("id",t),jQuery(r).appendTo(i||c.icdt.target)),jQuery(r).attr((null==n?void 0:n.attribute)||{}),jQuery(r).css((null==n?void 0:n.style)||{}),r},e.syncNodeCreate=function(t,n){var i=(0,s.icdt_ScaleNumber)(2),r={fill:u.svgCreate_RectCenterAttribute.fill,stroke:u.svgCreate_RectCenterAttribute.stroke,"stroke-width":(0,s.icdt_ScaleNumber)(u.svgCreate_RectCenterAttribute.strokeWidth)};return[{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-create-rect-center","rect",{attribute:Object.assign({x:n.x-i,y:n.y-i,width:n.width+2*i,height:n.height+2*i},r)},t),posType:"rect-center"}]},e.syncNodeResize=function(t,n){var i=n.size,r=(0,s.icdt_ScaleNumber)(1),o=(0,s.icdt_ScaleNumber)(2),a=(0,s.icdt_ScaleNumber)(5),c={stroke:u.svgDesign_LineAttribute.stroke,"stroke-width":(0,s.icdt_ScaleNumber)(u.svgDesign_LineAttribute.strokeWidth),"stroke-linecap":u.svgDesign_LineAttribute.strokeLinecap},l={fill:u.svgDesign_RectCenterAttribute.fill,stroke:u.svgDesign_RectCenterAttribute.stroke,"stroke-width":(0,s.icdt_ScaleNumber)(u.svgDesign_RectCenterAttribute.strokeWidth)},d={fill:u.svgDesign_RectAttribute.fill,stroke:u.svgDesign_RectAttribute.stroke,"stroke-width":(0,s.icdt_ScaleNumber)(u.svgDesign_RectAttribute.strokeWidth),width:(0,s.icdt_ScaleNumber)(u.svgDesign_RectAttribute.width),height:(0,s.icdt_ScaleNumber)(u.svgDesign_RectAttribute.height)};return(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-line-left","line",{attribute:Object.assign({x1:i.x-r,y1:i.y,x2:i.x-r,y2:i.y+i.height},c)},t),(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-line-top","line",{attribute:Object.assign({x1:i.x,y1:i.y-r,x2:i.x+i.width,y2:i.y-r},c)},t),(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-line-right","line",{attribute:Object.assign({x1:i.x+i.width+r,y1:i.y,x2:i.x+i.width+r,y2:i.y+i.height},c)},t),(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-line-bottom","line",{attribute:Object.assign({x1:i.x,y1:i.y+i.height+r,x2:i.x+i.width,y2:i.y+i.height+r},c)},t),[{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-rect-center","rect",{attribute:Object.assign({x:i.x,y:i.y,width:i.width,height:i.height},l),style:{cursor:"move"}},t),posType:"rect-center"},{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-rect-top-left","rect",{attribute:Object.assign({x:i.x-a,y:i.y-a},d),style:{cursor:"nw-resize"}},t),posType:"rect-top-left"},{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-rect-top-right","rect",{attribute:Object.assign({x:i.x+i.width-o,y:i.y-a},d),style:{cursor:"ne-resize"}},t),posType:"rect-top-right"},{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-rect-bottom-left","rect",{attribute:Object.assign({x:i.x-a,y:i.y+i.height-o},d),style:{cursor:"sw-resize"}},t),posType:"rect-bottom-left"},{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-rect-bottom-right","rect",{attribute:Object.assign({x:i.x+i.width-o,y:i.y+i.height-o},d),style:{cursor:"se-resize"}},t),posType:"rect-bottom-right"},{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-rect-top","rect",{attribute:Object.assign({x:i.x+i.width/2-o-r,y:i.y-a},d),style:{cursor:"n-resize"}},t),posType:"rect-top"},{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-rect-right","rect",{attribute:Object.assign({x:i.x+i.width-o,y:i.y+i.height/2-o-r},d),style:{cursor:"e-resize"}},t),posType:"rect-right"},{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-rect-bottom","rect",{attribute:Object.assign({x:i.x+i.width/2-o-r,y:i.y+i.height-o},d),style:{cursor:"s-resize"}},t),posType:"rect-bottom"},{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-rect-left","rect",{attribute:Object.assign({x:i.x-a,y:i.y+i.height/2-o-r},d),style:{cursor:"w-resize"}},t),posType:"rect-left"}]},e.syncNodeSelect=function(t,n,i){var r=(0,s.icdt_ScaleNumber)(1),o={stroke:u.svgDesign_LineAttribute.stroke,"stroke-width":(0,s.icdt_ScaleNumber)(u.svgDesign_LineAttribute.strokeWidth),"stroke-linecap":u.svgDesign_LineAttribute.strokeLinecap},a={fill:u.svgDesign_RectCenterAttribute.fill,stroke:u.svgDesign_RectCenterAttribute.stroke,"stroke-width":(0,s.icdt_ScaleNumber)(u.svgDesign_RectCenterAttribute.strokeWidth)},c={fill:u.svgSelect_RectNodeAttribute.fill,stroke:u.svgSelect_RectNodeAttribute.stroke,"stroke-width":(0,s.icdt_ScaleNumber)(u.svgSelect_RectNodeAttribute.strokeWidth)},l=((0,e.icdt_SyncSvgNode4Design)("icdt-temp-select-line-left","line",{attribute:Object.assign({x1:i.x-r,y1:i.y,x2:i.x-r,y2:i.y+i.height},o)},t),(0,e.icdt_SyncSvgNode4Design)("icdt-temp-select-line-top","line",{attribute:Object.assign({x1:i.x,y1:i.y-r,x2:i.x+i.width,y2:i.y-r},o)},t),(0,e.icdt_SyncSvgNode4Design)("icdt-temp-select-line-right","line",{attribute:Object.assign({x1:i.x+i.width+r,y1:i.y,x2:i.x+i.width+r,y2:i.y+i.height},o)},t),(0,e.icdt_SyncSvgNode4Design)("icdt-temp-select-line-bottom","line",{attribute:Object.assign({x1:i.x,y1:i.y+i.height+r,x2:i.x+i.width,y2:i.y+i.height+r},o)},t),(0,e.icdt_SyncSvgNode4Design)("icdt-temp-select-rect-center","rect",{attribute:Object.assign({x:i.x,y:i.y,width:i.width,height:i.height},a)},t));return n.forEach((function(n){var i=n.size;(0,e.icdt_SyncSvgNode4Design)("icdt-temp-select-rect-node-"+n.id,"rect",{attribute:Object.assign({x:i.x,y:i.y,width:i.width,height:i.height},c)},t)})),[{element:l,posType:"rect-center"}]},e.syncNodeScan=function(t,n){var i=(0,s.icdt_ScaleNumber)(1),r={stroke:u.svgDesign_LineAttribute.stroke,"stroke-width":(0,s.icdt_ScaleNumber)(u.svgDesign_LineAttribute.strokeWidth),"stroke-linecap":u.svgDesign_LineAttribute.strokeLinecap},o={fill:u.svgDesign_RectCenterAttribute.fill,stroke:u.svgDesign_RectCenterAttribute.stroke,"stroke-width":(0,s.icdt_ScaleNumber)(u.svgDesign_RectCenterAttribute.strokeWidth)};return(0,e.icdt_SyncSvgNode4Design)("icdt-temp-scan-line-left","line",{attribute:Object.assign({x1:n.x-i,y1:n.y,x2:n.x-i,y2:n.y+n.height},r)},t),(0,e.icdt_SyncSvgNode4Design)("icdt-temp-scan-line-top","line",{attribute:Object.assign({x1:n.x,y1:n.y-i,x2:n.x+n.width,y2:n.y-i},r)},t),(0,e.icdt_SyncSvgNode4Design)("icdt-temp-scan-line-right","line",{attribute:Object.assign({x1:n.x+n.width+i,y1:n.y,x2:n.x+n.width+i,y2:n.y+n.height},r)},t),(0,e.icdt_SyncSvgNode4Design)("icdt-temp-scan-line-bottom","line",{attribute:Object.assign({x1:n.x,y1:n.y+n.height+i,x2:n.x+n.width,y2:n.y+n.height+i},r)},t),[{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-scan-rect-center","rect",{attribute:Object.assign({x:n.x,y:n.y,width:n.width,height:n.height},o)},t),posType:"rect-center"}]},e.syncNodeInteractive=function(t,n){(0,s.icdt_ScaleNumber)(-1),u.svgInteractive_LineAttribute.stroke,(0,s.icdt_ScaleNumber)(u.svgInteractive_LineAttribute.strokeWidth),u.svgInteractive_LineAttribute.strokeLinecap,(0,s.icdt_ScaleNumber)(u.svgInteractive_LineAttribute.strokeDasharray);var i={fill:u.svgInteractive_RectCenterAttribute.fill};return(0,e.icdt_SyncSvgNode4Design)("icdt-temp-interactive-rect-center","rect",{attribute:Object.assign({x:n.x,y:n.y,width:n.width,height:n.height,class:"cursor-draw"},i)},t),[]},e.syncNodeIndex=function(t,n){var i={fill:u.svgSetIdx_RectNodeAttribute.fill,stroke:u.svgSetIdx_RectNodeAttribute.stroke,"stroke-width":(0,s.icdt_ScaleNumber)(u.svgSetIdx_RectNodeAttribute.strokeWidth),"stroke-dasharray":(0,s.icdt_ScaleNumber)(u.svgSetIdx_RectNodeAttribute.strokeDasharray)};jQuery(t).empty(),n.forEach((function(r){var o,a,u=r.size;if(r.idx){(0,e.icdt_SyncSvgNode4Design)("icdt-temp-index-rect-node-"+r.id,"rect",{attribute:Object.assign({x:u.x-5,y:u.y-5,width:u.width+10,height:u.height+10},i)},t);var c=(0,v.icdt_SvgForeignObject)(Math.ceil(1e9*Math.random()),{size:{x:u.x-76,y:u.y-6,width:70,height:80},attribute:{},style:{},source:{type:"html",html:{htmlContent:'<div class="position-slide" style="position:relative;width:100%;height:100%;">\n                  <div style="position:absolute;top:0;right:0;line-height:22px;">\n                    <div title="Thứ tự xuất hiện">\n                        <div style="float:right;">\n                          <span style="display:block;width:18px;float:left;text-align:center;">\n                            <i class="fa fa-play" style="margin:6px 0;color:#7da7d9;font-size:12px;"></i>\n                          </span>\n                          <span style="display:block;width:50px;float:left;">\n                            <input type="number" name="idx" value="'.concat(null!==(o=r.idx)&&void 0!==o?o:0,'" min="0" max="999" step="1" style="box-sizing:border-box;width:100%;padding:0;border:1px solid #ddd;outline:0;text-align:center;background:#eee;background: radial-gradient(#fff, #eee);font-size:12px;">\n                          </span>\n                        </div>\n                        <div style="clear:both;"></div>\n                    </div>\n                    <div title="Thời gian đợi(s), nếu giá trị = 0 sẽ chuyển sang đợi hoàn tất hoạt động và âm thanh" style="margin-top:2px;">\n                        <div style="float:right;">\n                          <span style="display:block;width:18px;float:left;text-align:center;">\n                            <i class="fa fa-clock-o" style="margin:5px 0;color:#7da7d9;font-size:14px;"></i>\n                          </span>\n                          <span style="display:block;width:50px;float:left;">\n                            <input type="number" name="time" value="').concat(null!==(a=r.time)&&void 0!==a?a:0,'" min="0" max="999" step="0.5" style="box-sizing:border-box;width:100%;padding:0;border:1px solid #ddd;outline:0;text-align:center;background:#eee;background: radial-gradient(#fff, #eee);font-size:12px;">\n                          </span>\n                        </div>\n                        <div style="clear:both;"></div>\n                    </div>\n                    <div title="Hủy thiết lập" style="margin-top:2px;">\n                        <div style="float:right;">\n                          <button name="remove" style="box-sizing:border-box;width:24px;height:24px;padding:0;border:1px solid #ddd;line-height: 0;outline:none;background:#eee;background: radial-gradient(#fff, #eee);">\n                            <img src="assets/icon-png/xoa2.png" height="18">\n                          </button>\n                        </div>\n                        <div style="clear:both;"></div>\n                    </div>\n                  </div>\n              </div>')}}},t).element;c.classList.add("node-input"),jQuery(c).on("change",'input[name="idx"]',(function(t){var e;r.idx=parseInt(null!==(e=t.target.value)&&void 0!==e?e:"0")})).on("change",'input[name="time"]',(function(t){var e;r.time=parseFloat(null!==(e=t.target.value)&&void 0!==e?e:"0")})).on("click",'button[name="remove"]',(function(i){r.idx=0,r.time=null,(0,e.syncNodeIndex)(t,n)}))}}))},e.syncBackground=function(t,e){var n,i,r,o,a,u,c=null!==(i=null===(n=null==e?void 0:e.svg)||void 0===n?void 0:n.background)&&void 0!==i?i:{},f=c.color,h=c.opacity,v=c.path,g=c.url,y=c.base64,_=null!==(o=null===(r=null==e?void 0:e.svg)||void 0===r?void 0:r.viewBox)&&void 0!==o?o:{x:0,y:0,width:0,height:0},b=_.x,m=_.y,w=_.width,x=_.height;(0,p.icdt_SvgText)(void 0,{size:{x:0,y:(0,s.icdt_ScaleNumber)(-21),width:w,height:x},attribute:{fill:"#999",fontSize:(0,s.icdt_ScaleNumber)(14),class:"hide-on-viewer"},source:{type:"text",text:{textContent:null!==(u=null!==(a=null==e?void 0:e.name)&&void 0!==a?a:null==e?void 0:e.code)&&void 0!==u?u:void 0}}},t),(0,l.icdt_SvgRect)(void 0,{size:{x:b,y:m,width:w,height:x},attribute:{fill:"#fff",stroke:"#999",strokeWidth:(0,s.icdt_ScaleNumber)(1),strokeDasharray:(0,s.icdt_ScaleNumber)(10),class:"hide-on-viewer"}},t),f&&(0,l.icdt_SvgRect)(void 0,{size:{x:b,y:m,width:w,height:x},attribute:{fill:f,fillOpacity:h}},t),v&&(0,d.icdt_SvgImage)(void 0,{size:{x:b,y:m,width:w,height:x},source:{type:"image",image:{path:v,url:g,base64:y}}},t)},e.syncTest=function(t,e,n){var i,r,o,a,u,c,s,d,v,p,g,y,_,b,m,w,x,S,M,E,k,T,N,A,O,R,C,I,j,P,z,D,V,L,B,F,G,U,K;switch(jQuery(t).empty(),null===(i=e.test)||void 0===i?void 0:i.type){case"truefalse":var Q=null===(a=null===(o=null===(r=null==e?void 0:e.test)||void 0===r?void 0:r.answer)||void 0===o?void 0:o.truefalse)||void 0===a?void 0:a.value,H=null===(u=e.svg)||void 0===u?void 0:u.nodes.find((function(t){var e,n;return"submit"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)}));null===(c=e.svg)||void 0===c||c.nodes.filter((function(t){var e,n;return"truefalse"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)&&(t.id!=Q||!H)})).forEach((function(e){var n,i=null!==(n=null==e?void 0:e.size)&&void 0!==n?n:{x:0,y:0,width:0,height:0},r=i.x,o=i.y,a=i.width,u=i.height;(0,f.icdt_SvgCircle)(Math.ceil(1e9*Math.random()),{size:{x:r-.5,y:o-.5,width:a+1,height:u+1},attribute:{fill:"none",stroke:"#5F6CE1",strokeWidth:1,strokeDasharray:4}},t)})),(null===(d=null===(s=null==e?void 0:e.test)||void 0===s?void 0:s.answer)||void 0===d?void 0:d.truefalse)&&Q&&H&&function(){var e,n=h.icdt_Run.findNode(Q),i=null!==(e=null==n?void 0:n.size)&&void 0!==e?e:{x:0,y:0,width:0,height:0},r=i.x,o=i.y,a=i.width,u=i.height;(0,f.icdt_SvgCircle)(Math.ceil(1e9*Math.random()),{size:{x:r-2,y:o-2,width:a+4,height:u+4},attribute:{fill:"none",stroke:"#5F6CE1",strokeWidth:4}},t)}();break;case"singlechoice":var q=null===(g=null===(p=null===(v=null==e?void 0:e.test)||void 0===v?void 0:v.answer)||void 0===p?void 0:p.singlechoice)||void 0===g?void 0:g.value,Y=null===(y=e.svg)||void 0===y?void 0:y.nodes.find((function(t){var e,n;return"submit"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)}));null===(_=e.svg)||void 0===_||_.nodes.filter((function(t){var e,n;return"singlechoice"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)&&(t.id!=q||!Y)})).forEach((function(e){var n,i=null!==(n=null==e?void 0:e.size)&&void 0!==n?n:{x:0,y:0,width:0,height:0},r=i.x,o=i.y,a=i.width,u=i.height;(0,f.icdt_SvgCircle)(Math.ceil(1e9*Math.random()),{size:{x:r-.5,y:o-.5,width:a+1,height:u+1},attribute:{fill:"none",stroke:"#5F6CE1",strokeWidth:1,strokeDasharray:4}},t)})),(null===(m=null===(b=null==e?void 0:e.test)||void 0===b?void 0:b.answer)||void 0===m?void 0:m.singlechoice)&&q&&Y&&function(){var e,n=h.icdt_Run.findNode(q),i=null!==(e=null==n?void 0:n.size)&&void 0!==e?e:{x:0,y:0,width:0,height:0},r=i.x,o=i.y,a=i.width,u=i.height;(0,f.icdt_SvgCircle)(Math.ceil(1e9*Math.random()),{size:{x:r-2,y:o-2,width:a+4,height:u+4},attribute:{fill:"none",stroke:"#5F6CE1",strokeWidth:4}},t)}();break;case"multichoice":var W=null!==(M=null===(S=null===(x=null===(w=null==e?void 0:e.test)||void 0===w?void 0:w.answer)||void 0===x?void 0:x.multichoice)||void 0===S?void 0:S.map((function(t){return t.value})))&&void 0!==M?M:[],X=null===(E=e.svg)||void 0===E?void 0:E.nodes.find((function(t){var e,n;return"submit"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)}));null===(k=e.svg)||void 0===k||k.nodes.filter((function(t){var e,n;return!("multichoice"!=(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)||W.includes(t.id)&&X)})).forEach((function(e){var n,i=null!==(n=null==e?void 0:e.size)&&void 0!==n?n:{x:0,y:0,width:0,height:0},r=i.x,o=i.y,a=i.width,u=i.height;(0,l.icdt_SvgRect)(Math.ceil(1e9*Math.random()),{size:{x:r-.5,y:o-.5,width:a+1,height:u+1},attribute:{fill:"none",stroke:"#5F6CE1",strokeWidth:1,strokeDasharray:4}},t)})),(null===(N=null===(T=null==e?void 0:e.test)||void 0===T?void 0:T.answer)||void 0===N?void 0:N.multichoice)&&W.length&&X&&(null===(O=null===(A=null==e?void 0:e.test)||void 0===A?void 0:A.answer)||void 0===O||O.multichoice.forEach((function(e){var n,i=h.icdt_Run.findNode(e.value),r=null!==(n=null==i?void 0:i.size)&&void 0!==n?n:{x:0,y:0,width:0,height:0},o=r.x,a=r.y,u=r.width,c=r.height;(0,l.icdt_SvgRect)(Math.ceil(1e9*Math.random()),{size:{x:o-2,y:a-2,width:u+4,height:c+4},attribute:{fill:"none",stroke:"#5F6CE1",strokeWidth:4}},t)})));break;case"fill":(null===(C=null===(R=null==e?void 0:e.test)||void 0===R?void 0:R.answer)||void 0===C?void 0:C.fill)&&(null===(j=null===(I=null==e?void 0:e.test)||void 0===I?void 0:I.answer)||void 0===j||j.fill.forEach((function(t){jQuery("#"+n.id).find('input[type="text"][data-key="'.concat(t.key,'"]')).val(t.value)})));break;case"matching":(null===(z=null===(P=null==e?void 0:e.test)||void 0===P?void 0:P.answer)||void 0===z?void 0:z.matching)&&("matching-empty"==(null===(V=null===(D=n.source)||void 0===D?void 0:D.test)||void 0===V?void 0:V.type)?null===(B=null===(L=null==e?void 0:e.test)||void 0===L?void 0:L.answer)||void 0===B||B.matching.filter((function(t){var e,i,r;return t.key==(null===(r=null===(i=null===(e=n.source)||void 0===e?void 0:e.test)||void 0===i?void 0:i.matching)||void 0===r?void 0:r.key)})).forEach((function(t){$('foreignObject .ondrop-here[data-type2="matching-content"][data-key="'.concat(t.value,'"] .ondrag-item')).appendTo($("foreignObject#".concat(n.id,' .ondrop-here[data-type2="matching-empty"][data-key="').concat(t.key,'"]')))})):"matching-content"==(null===(G=null===(F=n.source)||void 0===F?void 0:F.test)||void 0===G?void 0:G.type)&&(null===(K=null===(U=null==e?void 0:e.test)||void 0===U?void 0:U.answer)||void 0===K||K.matching.filter((function(t){var e,i,r;return t.value==(null===(r=null===(i=null===(e=n.source)||void 0===e?void 0:e.test)||void 0===i?void 0:i.matching)||void 0===r?void 0:r.key)})).forEach((function(t){$("foreignObject#".concat(n.id,' .ondrop-here[data-type2="matching-content"][data-key="').concat(t.value,'"] .ondrag-item')).appendTo($('foreignObject .ondrop-here[data-type2="matching-empty"][data-key="'.concat(t.key,'"]:empty')))}))))}}},825:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getMediaViewerUrl=void 0;var i=n(7144),r=n(8271);e.getMediaViewerUrl=function(t){var e,n,a,u,c;switch(null==t?void 0:t.type){case i.v_mediatype.IMAGE:return"assets/iframe/lib/mk-image-viewer/viewer.html?url="+t.readfileuploadurl+t.path;case i.v_mediatype.AUDIO:return"assets/iframe/lib/mk-audio-player/player.html?url="+t.readfileuploadurl+t.path;case i.v_mediatype.VIDEO:return"assets/iframe/lib/mk-video-player/player.html?url="+t.readfileuploadurl+t.path;case i.v_mediatype.OFFICE:return"https://view.officeapps.live.com/op/view.aspx?src="+t.readfileuploadurl+t.path;case i.v_mediatype.PDF:return"assets/iframe/lib/PDFReader/web/viewer.html?file="+t.readfileuploadurl+t.path;case i.v_mediatype.HTML:case i.v_mediatype.IMAGE_ANIMATION:case i.v_mediatype.PHET:return""+t.readfileuploadurl+t.path;case i.v_mediatype.ZIP:case i.v_mediatype.SCORM:return"imsmanifest.xml"==(null===(n=null===(e=t.path)||void 0===e?void 0:e.split("/"))||void 0===n?void 0:n.pop())?"assets/iframe/lib/ScormPool_Player/player.html?url="+t.readfileuploadurl+t.path:""+t.readfileuploadurl+t.path;case i.v_mediatype.TRACK:case i.v_mediatype.TEXT:return""+t.readfileuploadurl+t.path;case i.v_mediatype.LINK:switch(t.oss){case r.v_osstype.SCORM:return"assets/iframe/lib/ScormPool_Player/player.html?url="+t.url;case r.v_osstype.YOUTUBE:return null!==(a=o(t.url))&&void 0!==a?a:"";case r.v_osstype.PHET:return null!==(u=t.url)&&void 0!==u?u:"";default:return null!==(c=t.url)&&void 0!==c?c:""}default:return""+t.readfileuploadurl+t.path}};var o=function(t){var e=a(t);return e?"https://www.youtube.com/embed/"+e+"?"+jQuery.param({wmode:"opaque",border:0,hd:1,autoplay:!1,autohide:1,enablejsapi:1,modestbranding:1,version:3,hl:"vi_VN",rel:0,showinfo:0,iv_load_policy:3}):null},a=function(t){var e=null==t?void 0:t.match(/(?:.+?)?(?:\/v\/|watch\/|\?v\=|\&v\=|youtu\.be\/|\/v\=|^youtu\.be\/|embed\/)([a-zA-Z0-9_-]{11})+/);return e&&e.length>=2?e[1]:null}},7508:(t,e,n)=>{"use strict";function i(t,e){return null==t||null==e?NaN:t<e?-1:t>e?1:t>=e?0:NaN}function r(t,e){return null==t||null==e?NaN:e<t?-1:e>t?1:e>=t?0:NaN}function o(t){let e,n,o;function u(t,i,r=0,o=t.length){if(r<o){if(0!==e(i,i))return o;do{const e=r+o>>>1;n(t[e],i)<0?r=e+1:o=e}while(r<o)}return r}return 2!==t.length?(e=i,n=(e,n)=>i(t(e),n),o=(e,n)=>t(e)-n):(e=t===i||t===r?t:a,n=t,o=t),{left:u,center:function(t,e,n=0,i=t.length){const r=u(t,e,n,i-1);return r>n&&o(t[r-1],e)>-o(t[r],e)?r-1:r},right:function(t,i,r=0,o=t.length){if(r<o){if(0!==e(i,i))return o;do{const e=r+o>>>1;n(t[e],i)<=0?r=e+1:o=e}while(r<o)}return r}}}function a(){return 0}function u(t){return null===t?NaN:+t}n.r(e),n.d(e,{Adder:()=>A,Delaunay:()=>Yu,FormatSpecifier:()=>hl,InternMap:()=>C,InternSet:()=>I,Node:()=>Vp,Path:()=>da,Voronoi:()=>Uu,ZoomTransform:()=>$E,active:()=>go,arc:()=>RS,area:()=>LS,areaRadial:()=>qS,ascending:()=>i,autoType:()=>Nc,axisBottom:()=>be,axisLeft:()=>me,axisRight:()=>_e,axisTop:()=>ye,bin:()=>ht,bisect:()=>f,bisectCenter:()=>d,bisectLeft:()=>l,bisectRight:()=>s,bisector:()=>o,blob:()=>ys,blur:()=>h,blur2:()=>v,blurImage:()=>p,brush:()=>Qo,brushSelection:()=>Go,brushX:()=>Uo,brushY:()=>Ko,buffer:()=>bs,chord:()=>na,chordDirected:()=>ra,chordTranspose:()=>ia,cluster:()=>Rp,color:()=>fi,contourDensity:()=>mu,contours:()=>fu,count:()=>m,create:()=>oS,creator:()=>Tn,cross:()=>M,csv:()=>Ms,csvFormat:()=>pc,csvFormatBody:()=>gc,csvFormatRow:()=>_c,csvFormatRows:()=>yc,csvFormatValue:()=>bc,csvParse:()=>hc,csvParseRows:()=>vc,cubehelix:()=>nu,cumsum:()=>E,curveBasis:()=>VM,curveBasisClosed:()=>BM,curveBasisOpen:()=>GM,curveBumpX:()=>JS,curveBumpY:()=>ZS,curveBundle:()=>KM,curveCardinal:()=>$M,curveCardinalClosed:()=>YM,curveCardinalOpen:()=>XM,curveCatmullRom:()=>tE,curveCatmullRomClosed:()=>nE,curveCatmullRomOpen:()=>rE,curveLinear:()=>PS,curveLinearClosed:()=>aE,curveMonotoneX:()=>vE,curveMonotoneY:()=>pE,curveNatural:()=>_E,curveStep:()=>mE,curveStepAfter:()=>xE,curveStepBefore:()=>wE,descending:()=>r,deviation:()=>T,difference:()=>Xt,disjoint:()=>Jt,dispatch:()=>ke,drag:()=>nc,dragDisable:()=>Hn,dragEnable:()=>$n,dsv:()=>Ss,dsvFormat:()=>dc,easeBack:()=>ds,easeBackIn:()=>ss,easeBackInOut:()=>ds,easeBackOut:()=>ls,easeBounce:()=>as,easeBounceIn:()=>os,easeBounceInOut:()=>us,easeBounceOut:()=>as,easeCircle:()=>qc,easeCircleIn:()=>Hc,easeCircleInOut:()=>qc,easeCircleOut:()=>$c,easeCubic:()=>fo,easeCubicIn:()=>so,easeCubicInOut:()=>fo,easeCubicOut:()=>lo,easeElastic:()=>vs,easeElasticIn:()=>hs,easeElasticInOut:()=>ps,easeElasticOut:()=>vs,easeExp:()=>Qc,easeExpIn:()=>Uc,easeExpInOut:()=>Qc,easeExpOut:()=>Kc,easeLinear:()=>Oc,easePoly:()=>zc,easePolyIn:()=>jc,easePolyInOut:()=>zc,easePolyOut:()=>Pc,easeQuad:()=>Ic,easeQuadIn:()=>Rc,easeQuadInOut:()=>Ic,easeQuadOut:()=>Cc,easeSin:()=>Fc,easeSinIn:()=>Lc,easeSinInOut:()=>Fc,easeSinOut:()=>Bc,every:()=>Qt,extent:()=>N,fcumsum:()=>R,filter:()=>$t,flatGroup:()=>G,flatRollup:()=>U,forceCenter:()=>Is,forceCollide:()=>Hs,forceLink:()=>Ys,forceManyBody:()=>rl,forceRadial:()=>ol,forceSimulation:()=>il,forceX:()=>al,forceY:()=>ul,format:()=>_l,formatDefaultLocale:()=>Sl,formatLocale:()=>xl,formatPrefix:()=>bl,formatSpecifier:()=>fl,fsum:()=>O,geoAlbers:()=>Hv,geoAlbersUsa:()=>$v,geoArea:()=>Td,geoAzimuthalEqualArea:()=>Xv,geoAzimuthalEqualAreaRaw:()=>Wv,geoAzimuthalEquidistant:()=>Zv,geoAzimuthalEquidistantRaw:()=>Jv,geoBounds:()=>sf,geoCentroid:()=>wf,geoCircle:()=>Cf,geoClipAntimeridian:()=>Uf,geoClipCircle:()=>Kf,geoClipExtent:()=>Jf,geoClipRectangle:()=>Xf,geoConicConformal:()=>op,geoConicConformalRaw:()=>rp,geoConicEqualArea:()=>Qv,geoConicEqualAreaRaw:()=>Kv,geoConicEquidistant:()=>sp,geoConicEquidistantRaw:()=>cp,geoContains:()=>ph,geoDistance:()=>ah,geoEqualEarth:()=>gp,geoEqualEarthRaw:()=>pp,geoEquirectangular:()=>up,geoEquirectangularRaw:()=>ap,geoGnomonic:()=>_p,geoGnomonicRaw:()=>yp,geoGraticule:()=>_h,geoGraticule10:()=>bh,geoIdentity:()=>bp,geoInterpolate:()=>mh,geoLength:()=>ih,geoMercator:()=>ep,geoMercatorRaw:()=>tp,geoNaturalEarth1:()=>wp,geoNaturalEarth1Raw:()=>mp,geoOrthographic:()=>Sp,geoOrthographicRaw:()=>xp,geoPath:()=>Tv,geoProjection:()=>Fv,geoProjectionMutator:()=>Gv,geoRotation:()=>Af,geoStereographic:()=>Ep,geoStereographicRaw:()=>Mp,geoStream:()=>id,geoTransform:()=>Nv,geoTransverseMercator:()=>Tp,geoTransverseMercatorRaw:()=>kp,gray:()=>za,greatest:()=>mt,greatestIndex:()=>Dt,group:()=>L,groupSort:()=>tt,groups:()=>B,hcl:()=>Qa,hierarchy:()=>Ip,histogram:()=>ht,hsl:()=>Ei,html:()=>Rs,image:()=>ks,index:()=>H,indexes:()=>$,interpolate:()=>Xi,interpolateArray:()=>Ui,interpolateBasis:()=>Ri,interpolateBasisClosed:()=>Ci,interpolateBlues:()=>Cx,interpolateBrBG:()=>Kw,interpolateBuGn:()=>cx,interpolateBuPu:()=>lx,interpolateCividis:()=>Ux,interpolateCool:()=>Hx,interpolateCubehelix:()=>Jg,interpolateCubehelixDefault:()=>Kx,interpolateCubehelixLong:()=>Zg,interpolateDate:()=>Qi,interpolateDiscrete:()=>Lg,interpolateGnBu:()=>fx,interpolateGreens:()=>jx,interpolateGreys:()=>zx,interpolateHcl:()=>Yg,interpolateHclLong:()=>Wg,interpolateHsl:()=>Qg,interpolateHslLong:()=>Hg,interpolateHue:()=>Bg,interpolateInferno:()=>iS,interpolateLab:()=>$g,interpolateMagma:()=>nS,interpolateNumber:()=>Hi,interpolateNumberArray:()=>Fi,interpolateObject:()=>$i,interpolateOrRd:()=>vx,interpolateOranges:()=>Gx,interpolatePRGn:()=>Hw,interpolatePiYG:()=>qw,interpolatePlasma:()=>rS,interpolatePuBu:()=>_x,interpolatePuBuGn:()=>gx,interpolatePuOr:()=>Ww,interpolatePuRd:()=>mx,interpolatePurples:()=>Vx,interpolateRainbow:()=>qx,interpolateRdBu:()=>Jw,interpolateRdGy:()=>tx,interpolateRdPu:()=>xx,interpolateRdYlBu:()=>nx,interpolateRdYlGn:()=>rx,interpolateReds:()=>Bx,interpolateRgb:()=>Di,interpolateRgbBasis:()=>Li,interpolateRgbBasisClosed:()=>Bi,interpolateRound:()=>Fg,interpolateSinebow:()=>Jx,interpolateSpectral:()=>ax,interpolateString:()=>Wi,interpolateTransformCss:()=>Vr,interpolateTransformSvg:()=>Lr,interpolateTurbo:()=>Zx,interpolateViridis:()=>eS,interpolateWarm:()=>Qx,interpolateYlGn:()=>kx,interpolateYlGnBu:()=>Mx,interpolateYlOrBr:()=>Nx,interpolateYlOrRd:()=>Ox,interpolateZoom:()=>Ug,interrupt:()=>Cr,intersection:()=>Zt,interval:()=>KE,isoFormat:()=>FE,isoParse:()=>UE,json:()=>Ns,lab:()=>Da,lch:()=>Ka,least:()=>Pt,leastIndex:()=>zt,line:()=>VS,lineRadial:()=>$S,link:()=>iM,linkHorizontal:()=>rM,linkRadial:()=>aM,linkVertical:()=>oM,local:()=>uS,map:()=>qt,matcher:()=>Ce,max:()=>vt,maxIndex:()=>pt,mean:()=>kt,median:()=>Tt,medianIndex:()=>Nt,merge:()=>At,min:()=>gt,minIndex:()=>yt,mode:()=>Ot,namespace:()=>$e,namespaces:()=>He,nice:()=>dt,now:()=>dr,pack:()=>sg,packEnclose:()=>$p,packSiblings:()=>ug,pairs:()=>Rt,partition:()=>pg,path:()=>fa,pathRound:()=>ha,permute:()=>W,pie:()=>GS,piecewise:()=>ty,pointRadial:()=>YS,pointer:()=>Zi,pointers:()=>sS,polygonArea:()=>ny,polygonCentroid:()=>iy,polygonContains:()=>cy,polygonHull:()=>uy,polygonLength:()=>sy,precisionFixed:()=>Ml,precisionPrefix:()=>El,precisionRound:()=>kl,quadtree:()=>Vs,quantile:()=>wt,quantileIndex:()=>St,quantileSorted:()=>xt,quantize:()=>ey,quickselect:()=>_t,radialArea:()=>qS,radialLine:()=>$S,randomBates:()=>gy,randomBernoulli:()=>by,randomBeta:()=>xy,randomBinomial:()=>Sy,randomCauchy:()=>Ey,randomExponential:()=>yy,randomGamma:()=>wy,randomGeometric:()=>my,randomInt:()=>fy,randomIrwinHall:()=>py,randomLcg:()=>Ry,randomLogNormal:()=>vy,randomLogistic:()=>ky,randomNormal:()=>hy,randomPareto:()=>_y,randomPoisson:()=>Ty,randomUniform:()=>dy,randomWeibull:()=>My,range:()=>It,rank:()=>jt,reduce:()=>Yt,reverse:()=>Wt,rgb:()=>gi,ribbon:()=>Ma,ribbonArrow:()=>Ea,rollup:()=>K,rollups:()=>Q,scaleBand:()=>zy,scaleDiverging:()=>Ew,scaleDivergingLog:()=>kw,scaleDivergingPow:()=>Nw,scaleDivergingSqrt:()=>Aw,scaleDivergingSymlog:()=>Tw,scaleIdentity:()=>Xy,scaleImplicit:()=>jy,scaleLinear:()=>Wy,scaleLog:()=>a_,scaleOrdinal:()=>Py,scalePoint:()=>Vy,scalePow:()=>p_,scaleQuantile:()=>b_,scaleQuantize:()=>m_,scaleRadial:()=>__,scaleSequential:()=>_w,scaleSequentialLog:()=>bw,scaleSequentialPow:()=>ww,scaleSequentialQuantile:()=>Sw,scaleSequentialSqrt:()=>xw,scaleSequentialSymlog:()=>mw,scaleSqrt:()=>g_,scaleSymlog:()=>l_,scaleThreshold:()=>w_,scaleTime:()=>vw,scaleUtc:()=>pw,scan:()=>Vt,schemeAccent:()=>Cw,schemeBlues:()=>Rx,schemeBrBG:()=>Uw,schemeBuGn:()=>ux,schemeBuPu:()=>sx,schemeCategory10:()=>Rw,schemeDark2:()=>Iw,schemeGnBu:()=>dx,schemeGreens:()=>Ix,schemeGreys:()=>Px,schemeObservable10:()=>jw,schemeOrRd:()=>hx,schemeOranges:()=>Fx,schemePRGn:()=>Qw,schemePaired:()=>Pw,schemePastel1:()=>zw,schemePastel2:()=>Dw,schemePiYG:()=>$w,schemePuBu:()=>yx,schemePuBuGn:()=>px,schemePuOr:()=>Yw,schemePuRd:()=>bx,schemePurples:()=>Dx,schemeRdBu:()=>Xw,schemeRdGy:()=>Zw,schemeRdPu:()=>wx,schemeRdYlBu:()=>ex,schemeRdYlGn:()=>ix,schemeReds:()=>Lx,schemeSet1:()=>Vw,schemeSet2:()=>Lw,schemeSet3:()=>Bw,schemeSpectral:()=>ox,schemeTableau10:()=>Fw,schemeYlGn:()=>Ex,schemeYlGnBu:()=>Sx,schemeYlOrBr:()=>Tx,schemeYlOrRd:()=>Ax,select:()=>Fn,selectAll:()=>lS,selection:()=>Bn,selector:()=>Ne,selectorAll:()=>Re,shuffle:()=>Lt,shuffler:()=>Bt,some:()=>Ht,sort:()=>X,stack:()=>TE,stackOffsetDiverging:()=>AE,stackOffsetExpand:()=>NE,stackOffsetNone:()=>SE,stackOffsetSilhouette:()=>OE,stackOffsetWiggle:()=>RE,stackOrderAppearance:()=>CE,stackOrderAscending:()=>jE,stackOrderDescending:()=>zE,stackOrderInsideOut:()=>DE,stackOrderNone:()=>ME,stackOrderReverse:()=>VE,stratify:()=>wg,style:()=>on,subset:()=>ie,sum:()=>Ft,superset:()=>ee,svg:()=>Cs,symbol:()=>jM,symbolAsterisk:()=>cM,symbolCircle:()=>sM,symbolCross:()=>lM,symbolDiamond:()=>hM,symbolDiamond2:()=>vM,symbolPlus:()=>pM,symbolSquare:()=>gM,symbolSquare2:()=>yM,symbolStar:()=>wM,symbolTimes:()=>RM,symbolTriangle:()=>SM,symbolTriangle2:()=>EM,symbolWye:()=>OM,symbolX:()=>RM,symbols:()=>CM,symbolsFill:()=>CM,symbolsStroke:()=>IM,text:()=>ws,thresholdFreedmanDiaconis:()=>Mt,thresholdScott:()=>Et,thresholdSturges:()=>ft,tickFormat:()=>qy,tickIncrement:()=>st,tickStep:()=>lt,ticks:()=>ct,timeDay:()=>U_,timeDays:()=>K_,timeFormat:()=>Ub,timeFormatDefaultLocale:()=>lw,timeFormatLocale:()=>Fb,timeFriday:()=>eb,timeFridays:()=>cb,timeHour:()=>L_,timeHours:()=>B_,timeInterval:()=>O_,timeMillisecond:()=>R_,timeMilliseconds:()=>C_,timeMinute:()=>P_,timeMinutes:()=>z_,timeMonday:()=>X_,timeMondays:()=>rb,timeMonth:()=>Eb,timeMonths:()=>kb,timeParse:()=>Kb,timeSaturday:()=>nb,timeSaturdays:()=>sb,timeSecond:()=>I_,timeSeconds:()=>j_,timeSunday:()=>W_,timeSundays:()=>ib,timeThursday:()=>tb,timeThursdays:()=>ub,timeTickInterval:()=>Db,timeTicks:()=>zb,timeTuesday:()=>J_,timeTuesdays:()=>ob,timeWednesday:()=>Z_,timeWednesdays:()=>ab,timeWeek:()=>W_,timeWeeks:()=>ib,timeYear:()=>Ab,timeYears:()=>Ob,timeout:()=>br,timer:()=>vr,timerFlush:()=>pr,transition:()=>ao,transpose:()=>Gt,tree:()=>Og,treemap:()=>Pg,treemapBinary:()=>zg,treemapDice:()=>vg,treemapResquarify:()=>Vg,treemapSlice:()=>Rg,treemapSliceDice:()=>Dg,treemapSquarify:()=>jg,tsv:()=>Es,tsvFormat:()=>Sc,tsvFormatBody:()=>Mc,tsvFormatRow:()=>kc,tsvFormatRows:()=>Ec,tsvFormatValue:()=>Tc,tsvParse:()=>wc,tsvParseRows:()=>xc,union:()=>re,unixDay:()=>$_,unixDays:()=>q_,utcDay:()=>Q_,utcDays:()=>H_,utcFormat:()=>Qb,utcFriday:()=>gb,utcFridays:()=>Sb,utcHour:()=>F_,utcHours:()=>G_,utcMillisecond:()=>R_,utcMilliseconds:()=>C_,utcMinute:()=>D_,utcMinutes:()=>V_,utcMonday:()=>fb,utcMondays:()=>bb,utcMonth:()=>Tb,utcMonths:()=>Nb,utcParse:()=>Hb,utcSaturday:()=>yb,utcSaturdays:()=>Mb,utcSecond:()=>I_,utcSeconds:()=>j_,utcSunday:()=>db,utcSundays:()=>_b,utcThursday:()=>pb,utcThursdays:()=>xb,utcTickInterval:()=>Pb,utcTicks:()=>jb,utcTuesday:()=>hb,utcTuesdays:()=>mb,utcWednesday:()=>vb,utcWednesdays:()=>wb,utcWeek:()=>db,utcWeeks:()=>_b,utcYear:()=>Rb,utcYears:()=>Cb,variance:()=>k,window:()=>tn,xml:()=>Os,zip:()=>Kt,zoom:()=>rk,zoomIdentity:()=>qE,zoomTransform:()=>YE});const c=o(i),s=c.right,l=c.left,d=o(u).center,f=s;function h(t,e){if(!((e=+e)>=0))throw new RangeError("invalid r");let n=t.length;if(!((n=Math.floor(n))>=0))throw new RangeError("invalid length");if(!n||!e)return t;const i=b(e),r=t.slice();return i(t,r,0,n,1),i(r,t,0,n,1),i(t,r,0,n,1),t}const v=g(b),p=g((function(t){const e=b(t);return(t,n,i,r,o)=>{e(t,n,0+(i<<=2),0+(r<<=2),o<<=2),e(t,n,i+1,r+1,o),e(t,n,i+2,r+2,o),e(t,n,i+3,r+3,o)}}));function g(t){return function(e,n,i=n){if(!((n=+n)>=0))throw new RangeError("invalid rx");if(!((i=+i)>=0))throw new RangeError("invalid ry");let{data:r,width:o,height:a}=e;if(!((o=Math.floor(o))>=0))throw new RangeError("invalid width");if(!((a=Math.floor(void 0!==a?a:r.length/o))>=0))throw new RangeError("invalid height");if(!o||!a||!n&&!i)return e;const u=n&&t(n),c=i&&t(i),s=r.slice();return u&&c?(y(u,s,r,o,a),y(u,r,s,o,a),y(u,s,r,o,a),_(c,r,s,o,a),_(c,s,r,o,a),_(c,r,s,o,a)):u?(y(u,r,s,o,a),y(u,s,r,o,a),y(u,r,s,o,a)):c&&(_(c,r,s,o,a),_(c,s,r,o,a),_(c,r,s,o,a)),e}}function y(t,e,n,i,r){for(let o=0,a=i*r;o<a;)t(e,n,o,o+=i,1)}function _(t,e,n,i,r){for(let o=0,a=i*r;o<i;++o)t(e,n,o,o+a,i)}function b(t){const e=Math.floor(t);if(e===t)return function(t){const e=2*t+1;return(n,i,r,o,a)=>{if(!((o-=a)>=r))return;let u=t*i[r];const c=a*t;for(let t=r,e=r+c;t<e;t+=a)u+=i[Math.min(o,t)];for(let t=r,s=o;t<=s;t+=a)u+=i[Math.min(o,t+c)],n[t]=u/e,u-=i[Math.max(r,t-c)]}}(t);const n=t-e,i=2*t+1;return(t,r,o,a,u)=>{if(!((a-=u)>=o))return;let c=e*r[o];const s=u*e,l=s+u;for(let t=o,e=o+s;t<e;t+=u)c+=r[Math.min(a,t)];for(let e=o,d=a;e<=d;e+=u)c+=r[Math.min(a,e+s)],t[e]=(c+n*(r[Math.max(o,e-l)]+r[Math.min(a,e+l)]))/i,c-=r[Math.max(o,e-s)]}}function m(t,e){let n=0;if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&++n;else{let i=-1;for(let r of t)null!=(r=e(r,++i,t))&&(r=+r)>=r&&++n}return n}function w(t){return 0|t.length}function x(t){return!(t>0)}function S(t){return"object"!=typeof t||"length"in t?t:Array.from(t)}function M(...t){const e="function"==typeof t[t.length-1]&&function(t){return e=>t(...e)}(t.pop()),n=(t=t.map(S)).map(w),i=t.length-1,r=new Array(i+1).fill(0),o=[];if(i<0||n.some(x))return o;for(;;){o.push(r.map(((e,n)=>t[n][e])));let a=i;for(;++r[a]===n[a];){if(0===a)return e?o.map(e):o;r[a--]=0}}}function E(t,e){var n=0,i=0;return Float64Array.from(t,void 0===e?t=>n+=+t||0:r=>n+=+e(r,i++,t)||0)}function k(t,e){let n,i=0,r=0,o=0;if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(n=e-r,r+=n/++i,o+=n*(e-r));else{let a=-1;for(let u of t)null!=(u=e(u,++a,t))&&(u=+u)>=u&&(n=u-r,r+=n/++i,o+=n*(u-r))}if(i>1)return o/(i-1)}function T(t,e){const n=k(t,e);return n?Math.sqrt(n):n}function N(t,e){let n,i;if(void 0===e)for(const e of t)null!=e&&(void 0===n?e>=e&&(n=i=e):(n>e&&(n=e),i<e&&(i=e)));else{let r=-1;for(let o of t)null!=(o=e(o,++r,t))&&(void 0===n?o>=o&&(n=i=o):(n>o&&(n=o),i<o&&(i=o)))}return[n,i]}class A{constructor(){this._partials=new Float64Array(32),this._n=0}add(t){const e=this._partials;let n=0;for(let i=0;i<this._n&&i<32;i++){const r=e[i],o=t+r,a=Math.abs(t)<Math.abs(r)?t-(o-r):r-(o-t);a&&(e[n++]=a),t=o}return e[n]=t,this._n=n+1,this}valueOf(){const t=this._partials;let e,n,i,r=this._n,o=0;if(r>0){for(o=t[--r];r>0&&(e=o,n=t[--r],o=e+n,i=n-(o-e),!i););r>0&&(i<0&&t[r-1]<0||i>0&&t[r-1]>0)&&(n=2*i,e=o+n,n==e-o&&(o=e))}return o}}function O(t,e){const n=new A;if(void 0===e)for(let e of t)(e=+e)&&n.add(e);else{let i=-1;for(let r of t)(r=+e(r,++i,t))&&n.add(r)}return+n}function R(t,e){const n=new A;let i=-1;return Float64Array.from(t,void 0===e?t=>n.add(+t||0):r=>n.add(+e(r,++i,t)||0))}class C extends Map{constructor(t,e=D){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:e}}),null!=t)for(const[e,n]of t)this.set(e,n)}get(t){return super.get(j(this,t))}has(t){return super.has(j(this,t))}set(t,e){return super.set(P(this,t),e)}delete(t){return super.delete(z(this,t))}}class I extends Set{constructor(t,e=D){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:e}}),null!=t)for(const e of t)this.add(e)}has(t){return super.has(j(this,t))}add(t){return super.add(P(this,t))}delete(t){return super.delete(z(this,t))}}function j({_intern:t,_key:e},n){const i=e(n);return t.has(i)?t.get(i):n}function P({_intern:t,_key:e},n){const i=e(n);return t.has(i)?t.get(i):(t.set(i,n),n)}function z({_intern:t,_key:e},n){const i=e(n);return t.has(i)&&(n=t.get(i),t.delete(i)),n}function D(t){return null!==t&&"object"==typeof t?t.valueOf():t}function V(t){return t}function L(t,...e){return Y(t,V,V,e)}function B(t,...e){return Y(t,Array.from,V,e)}function F(t,e){for(let n=1,i=e.length;n<i;++n)t=t.flatMap((t=>t.pop().map((([e,n])=>[...t,e,n]))));return t}function G(t,...e){return F(B(t,...e),e)}function U(t,e,...n){return F(Q(t,e,...n),n)}function K(t,e,...n){return Y(t,V,e,n)}function Q(t,e,...n){return Y(t,Array.from,e,n)}function H(t,...e){return Y(t,V,q,e)}function $(t,...e){return Y(t,Array.from,q,e)}function q(t){if(1!==t.length)throw new Error("duplicate key");return t[0]}function Y(t,e,n,i){return function t(r,o){if(o>=i.length)return n(r);const a=new C,u=i[o++];let c=-1;for(const t of r){const e=u(t,++c,r),n=a.get(e);n?n.push(t):a.set(e,[t])}for(const[e,n]of a)a.set(e,t(n,o));return e(a)}(t,0)}function W(t,e){return Array.from(e,(e=>t[e]))}function X(t,...e){if("function"!=typeof t[Symbol.iterator])throw new TypeError("values is not iterable");t=Array.from(t);let[n]=e;if(n&&2!==n.length||e.length>1){const i=Uint32Array.from(t,((t,e)=>e));return e.length>1?(e=e.map((e=>t.map(e))),i.sort(((t,n)=>{for(const i of e){const e=Z(i[t],i[n]);if(e)return e}}))):(n=t.map(n),i.sort(((t,e)=>Z(n[t],n[e])))),W(t,i)}return t.sort(J(n))}function J(t=i){if(t===i)return Z;if("function"!=typeof t)throw new TypeError("compare is not a function");return(e,n)=>{const i=t(e,n);return i||0===i?i:(0===t(n,n))-(0===t(e,e))}}function Z(t,e){return(null==t||!(t>=t))-(null==e||!(e>=e))||(t<e?-1:t>e?1:0)}function tt(t,e,n){return(2!==e.length?X(K(t,e,n),(([t,e],[n,r])=>i(e,r)||i(t,n))):X(L(t,n),(([t,n],[r,o])=>e(n,o)||i(t,r)))).map((([t])=>t))}var et=Array.prototype,nt=et.slice;function it(t){return()=>t}et.map;const rt=Math.sqrt(50),ot=Math.sqrt(10),at=Math.sqrt(2);function ut(t,e,n){const i=(e-t)/Math.max(0,n),r=Math.floor(Math.log10(i)),o=i/Math.pow(10,r),a=o>=rt?10:o>=ot?5:o>=at?2:1;let u,c,s;return r<0?(s=Math.pow(10,-r)/a,u=Math.round(t*s),c=Math.round(e*s),u/s<t&&++u,c/s>e&&--c,s=-s):(s=Math.pow(10,r)*a,u=Math.round(t/s),c=Math.round(e/s),u*s<t&&++u,c*s>e&&--c),c<u&&.5<=n&&n<2?ut(t,e,2*n):[u,c,s]}function ct(t,e,n){if(!((n=+n)>0))return[];if((t=+t)==(e=+e))return[t];const i=e<t,[r,o,a]=i?ut(e,t,n):ut(t,e,n);if(!(o>=r))return[];const u=o-r+1,c=new Array(u);if(i)if(a<0)for(let t=0;t<u;++t)c[t]=(o-t)/-a;else for(let t=0;t<u;++t)c[t]=(o-t)*a;else if(a<0)for(let t=0;t<u;++t)c[t]=(r+t)/-a;else for(let t=0;t<u;++t)c[t]=(r+t)*a;return c}function st(t,e,n){return ut(t=+t,e=+e,n=+n)[2]}function lt(t,e,n){n=+n;const i=(e=+e)<(t=+t),r=i?st(e,t,n):st(t,e,n);return(i?-1:1)*(r<0?1/-r:r)}function dt(t,e,n){let i;for(;;){const r=st(t,e,n);if(r===i||0===r||!isFinite(r))return[t,e];r>0?(t=Math.floor(t/r)*r,e=Math.ceil(e/r)*r):r<0&&(t=Math.ceil(t*r)/r,e=Math.floor(e*r)/r),i=r}}function ft(t){return Math.max(1,Math.ceil(Math.log(m(t))/Math.LN2)+1)}function ht(){var t=V,e=N,n=ft;function i(i){Array.isArray(i)||(i=Array.from(i));var r,o,a,u=i.length,c=new Array(u);for(r=0;r<u;++r)c[r]=t(i[r],r,i);var s=e(c),l=s[0],d=s[1],h=n(c,l,d);if(!Array.isArray(h)){const t=d,n=+h;if(e===N&&([l,d]=dt(l,d,n)),(h=ct(l,d,n))[0]<=l&&(a=st(l,d,n)),h[h.length-1]>=d)if(t>=d&&e===N){const t=st(l,d,n);isFinite(t)&&(t>0?d=(Math.floor(d/t)+1)*t:t<0&&(d=(Math.ceil(d*-t)+1)/-t))}else h.pop()}for(var v=h.length,p=0,g=v;h[p]<=l;)++p;for(;h[g-1]>d;)--g;(p||g<v)&&(h=h.slice(p,g),v=g-p);var y,_=new Array(v+1);for(r=0;r<=v;++r)(y=_[r]=[]).x0=r>0?h[r-1]:l,y.x1=r<v?h[r]:d;if(isFinite(a)){if(a>0)for(r=0;r<u;++r)null!=(o=c[r])&&l<=o&&o<=d&&_[Math.min(v,Math.floor((o-l)/a))].push(i[r]);else if(a<0)for(r=0;r<u;++r)if(null!=(o=c[r])&&l<=o&&o<=d){const t=Math.floor((l-o)*a);_[Math.min(v,t+(h[t]<=o))].push(i[r])}}else for(r=0;r<u;++r)null!=(o=c[r])&&l<=o&&o<=d&&_[f(h,o,0,v)].push(i[r]);return _}return i.value=function(e){return arguments.length?(t="function"==typeof e?e:it(e),i):t},i.domain=function(t){return arguments.length?(e="function"==typeof t?t:it([t[0],t[1]]),i):e},i.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:it(Array.isArray(t)?nt.call(t):t),i):n},i}function vt(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n<e||void 0===n&&e>=e)&&(n=e);else{let i=-1;for(let r of t)null!=(r=e(r,++i,t))&&(n<r||void 0===n&&r>=r)&&(n=r)}return n}function pt(t,e){let n,i=-1,r=-1;if(void 0===e)for(const e of t)++r,null!=e&&(n<e||void 0===n&&e>=e)&&(n=e,i=r);else for(let o of t)null!=(o=e(o,++r,t))&&(n<o||void 0===n&&o>=o)&&(n=o,i=r);return i}function gt(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n>e||void 0===n&&e>=e)&&(n=e);else{let i=-1;for(let r of t)null!=(r=e(r,++i,t))&&(n>r||void 0===n&&r>=r)&&(n=r)}return n}function yt(t,e){let n,i=-1,r=-1;if(void 0===e)for(const e of t)++r,null!=e&&(n>e||void 0===n&&e>=e)&&(n=e,i=r);else for(let o of t)null!=(o=e(o,++r,t))&&(n>o||void 0===n&&o>=o)&&(n=o,i=r);return i}function _t(t,e,n=0,i=1/0,r){if(e=Math.floor(e),n=Math.floor(Math.max(0,n)),i=Math.floor(Math.min(t.length-1,i)),!(n<=e&&e<=i))return t;for(r=void 0===r?Z:J(r);i>n;){if(i-n>600){const o=i-n+1,a=e-n+1,u=Math.log(o),c=.5*Math.exp(2*u/3),s=.5*Math.sqrt(u*c*(o-c)/o)*(a-o/2<0?-1:1);_t(t,e,Math.max(n,Math.floor(e-a*c/o+s)),Math.min(i,Math.floor(e+(o-a)*c/o+s)),r)}const o=t[e];let a=n,u=i;for(bt(t,n,e),r(t[i],o)>0&&bt(t,n,i);a<u;){for(bt(t,a,u),++a,--u;r(t[a],o)<0;)++a;for(;r(t[u],o)>0;)--u}0===r(t[n],o)?bt(t,n,u):(++u,bt(t,u,i)),u<=e&&(n=u+1),e<=u&&(i=u-1)}return t}function bt(t,e,n){const i=t[e];t[e]=t[n],t[n]=i}function mt(t,e=i){let n,r=!1;if(1===e.length){let o;for(const a of t){const t=e(a);(r?i(t,o)>0:0===i(t,t))&&(n=a,o=t,r=!0)}}else for(const i of t)(r?e(i,n)>0:0===e(i,i))&&(n=i,r=!0);return n}function wt(t,e,n){if(t=Float64Array.from(function*(t,e){if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(yield e);else{let n=-1;for(let i of t)null!=(i=e(i,++n,t))&&(i=+i)>=i&&(yield i)}}(t,n)),(i=t.length)&&!isNaN(e=+e)){if(e<=0||i<2)return gt(t);if(e>=1)return vt(t);var i,r=(i-1)*e,o=Math.floor(r),a=vt(_t(t,o).subarray(0,o+1));return a+(gt(t.subarray(o+1))-a)*(r-o)}}function xt(t,e,n=u){if((i=t.length)&&!isNaN(e=+e)){if(e<=0||i<2)return+n(t[0],0,t);if(e>=1)return+n(t[i-1],i-1,t);var i,r=(i-1)*e,o=Math.floor(r),a=+n(t[o],o,t);return a+(+n(t[o+1],o+1,t)-a)*(r-o)}}function St(t,e,n=u){if(!isNaN(e=+e)){if(i=Float64Array.from(t,((e,i)=>u(n(t[i],i,t)))),e<=0)return yt(i);if(e>=1)return pt(i);var i,r=Uint32Array.from(t,((t,e)=>e)),o=i.length-1,a=Math.floor(o*e);return _t(r,a,0,o,((t,e)=>Z(i[t],i[e]))),(a=mt(r.subarray(0,a+1),(t=>i[t])))>=0?a:-1}}function Mt(t,e,n){const i=m(t),r=wt(t,.75)-wt(t,.25);return i&&r?Math.ceil((n-e)/(2*r*Math.pow(i,-1/3))):1}function Et(t,e,n){const i=m(t),r=T(t);return i&&r?Math.ceil((n-e)*Math.cbrt(i)/(3.49*r)):1}function kt(t,e){let n=0,i=0;if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(++n,i+=e);else{let r=-1;for(let o of t)null!=(o=e(o,++r,t))&&(o=+o)>=o&&(++n,i+=o)}if(n)return i/n}function Tt(t,e){return wt(t,.5,e)}function Nt(t,e){return St(t,.5,e)}function At(t){return Array.from(function*(t){for(const e of t)yield*e}(t))}function Ot(t,e){const n=new C;if(void 0===e)for(let e of t)null!=e&&e>=e&&n.set(e,(n.get(e)||0)+1);else{let i=-1;for(let r of t)null!=(r=e(r,++i,t))&&r>=r&&n.set(r,(n.get(r)||0)+1)}let i,r=0;for(const[t,e]of n)e>r&&(r=e,i=t);return i}function Rt(t,e=Ct){const n=[];let i,r=!1;for(const o of t)r&&n.push(e(i,o)),i=o,r=!0;return n}function Ct(t,e){return[t,e]}function It(t,e,n){t=+t,e=+e,n=(r=arguments.length)<2?(e=t,t=0,1):r<3?1:+n;for(var i=-1,r=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(r);++i<r;)o[i]=t+i*n;return o}function jt(t,e=i){if("function"!=typeof t[Symbol.iterator])throw new TypeError("values is not iterable");let n=Array.from(t);const r=new Float64Array(n.length);2!==e.length&&(n=n.map(e),e=i);const o=(t,i)=>e(n[t],n[i]);let a,u;return(t=Uint32Array.from(n,((t,e)=>e))).sort(e===i?(t,e)=>Z(n[t],n[e]):J(o)),t.forEach(((t,e)=>{const n=o(t,void 0===a?t:a);n>=0?((void 0===a||n>0)&&(a=t,u=e),r[t]=u):r[t]=NaN})),r}function Pt(t,e=i){let n,r=!1;if(1===e.length){let o;for(const a of t){const t=e(a);(r?i(t,o)<0:0===i(t,t))&&(n=a,o=t,r=!0)}}else for(const i of t)(r?e(i,n)<0:0===e(i,i))&&(n=i,r=!0);return n}function zt(t,e=i){if(1===e.length)return yt(t,e);let n,r=-1,o=-1;for(const i of t)++o,(r<0?0===e(i,i):e(i,n)<0)&&(n=i,r=o);return r}function Dt(t,e=i){if(1===e.length)return pt(t,e);let n,r=-1,o=-1;for(const i of t)++o,(r<0?0===e(i,i):e(i,n)>0)&&(n=i,r=o);return r}function Vt(t,e){const n=zt(t,e);return n<0?void 0:n}const Lt=Bt(Math.random);function Bt(t){return function(e,n=0,i=e.length){let r=i-(n=+n);for(;r;){const i=t()*r--|0,o=e[r+n];e[r+n]=e[i+n],e[i+n]=o}return e}}function Ft(t,e){let n=0;if(void 0===e)for(let e of t)(e=+e)&&(n+=e);else{let i=-1;for(let r of t)(r=+e(r,++i,t))&&(n+=r)}return n}function Gt(t){if(!(r=t.length))return[];for(var e=-1,n=gt(t,Ut),i=new Array(n);++e<n;)for(var r,o=-1,a=i[e]=new Array(r);++o<r;)a[o]=t[o][e];return i}function Ut(t){return t.length}function Kt(){return Gt(arguments)}function Qt(t,e){if("function"!=typeof e)throw new TypeError("test is not a function");let n=-1;for(const i of t)if(!e(i,++n,t))return!1;return!0}function Ht(t,e){if("function"!=typeof e)throw new TypeError("test is not a function");let n=-1;for(const i of t)if(e(i,++n,t))return!0;return!1}function $t(t,e){if("function"!=typeof e)throw new TypeError("test is not a function");const n=[];let i=-1;for(const r of t)e(r,++i,t)&&n.push(r);return n}function qt(t,e){if("function"!=typeof t[Symbol.iterator])throw new TypeError("values is not iterable");if("function"!=typeof e)throw new TypeError("mapper is not a function");return Array.from(t,((n,i)=>e(n,i,t)))}function Yt(t,e,n){if("function"!=typeof e)throw new TypeError("reducer is not a function");const i=t[Symbol.iterator]();let r,o,a=-1;if(arguments.length<3){if(({done:r,value:n}=i.next()),r)return;++a}for(;({done:r,value:o}=i.next()),!r;)n=e(n,o,++a,t);return n}function Wt(t){if("function"!=typeof t[Symbol.iterator])throw new TypeError("values is not iterable");return Array.from(t).reverse()}function Xt(t,...e){t=new I(t);for(const n of e)for(const e of n)t.delete(e);return t}function Jt(t,e){const n=e[Symbol.iterator](),i=new I;for(const e of t){if(i.has(e))return!1;let t,r;for(;({value:t,done:r}=n.next())&&!r;){if(Object.is(e,t))return!1;i.add(t)}}return!0}function Zt(t,...e){t=new I(t),e=e.map(te);t:for(const n of t)for(const i of e)if(!i.has(n)){t.delete(n);continue t}return t}function te(t){return t instanceof I?t:new I(t)}function ee(t,e){const n=t[Symbol.iterator](),i=new Set;for(const t of e){const e=ne(t);if(i.has(e))continue;let r,o;for(;({value:r,done:o}=n.next());){if(o)return!1;const t=ne(r);if(i.add(t),Object.is(e,t))break}}return!0}function ne(t){return null!==t&&"object"==typeof t?t.valueOf():t}function ie(t,e){return ee(e,t)}function re(...t){const e=new I;for(const n of t)for(const t of n)e.add(t);return e}function oe(t){return t}var ae=1,ue=2,ce=3,se=4,le=1e-6;function de(t){return"translate("+t+",0)"}function fe(t){return"translate(0,"+t+")"}function he(t){return e=>+t(e)}function ve(t,e){return e=Math.max(0,t.bandwidth()-2*e)/2,t.round()&&(e=Math.round(e)),n=>+t(n)+e}function pe(){return!this.__axis}function ge(t,e){var n=[],i=null,r=null,o=6,a=6,u=3,c="undefined"!=typeof window&&window.devicePixelRatio>1?0:.5,s=t===ae||t===se?-1:1,l=t===se||t===ue?"x":"y",d=t===ae||t===ce?de:fe;function f(f){var h=null==i?e.ticks?e.ticks.apply(e,n):e.domain():i,v=null==r?e.tickFormat?e.tickFormat.apply(e,n):oe:r,p=Math.max(o,0)+u,g=e.range(),y=+g[0]+c,_=+g[g.length-1]+c,b=(e.bandwidth?ve:he)(e.copy(),c),m=f.selection?f.selection():f,w=m.selectAll(".domain").data([null]),x=m.selectAll(".tick").data(h,e).order(),S=x.exit(),M=x.enter().append("g").attr("class","tick"),E=x.select("line"),k=x.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(M),E=E.merge(M.append("line").attr("stroke","currentColor").attr(l+"2",s*o)),k=k.merge(M.append("text").attr("fill","currentColor").attr(l,s*p).attr("dy",t===ae?"0em":t===ce?"0.71em":"0.32em")),f!==m&&(w=w.transition(f),x=x.transition(f),E=E.transition(f),k=k.transition(f),S=S.transition(f).attr("opacity",le).attr("transform",(function(t){return isFinite(t=b(t))?d(t+c):this.getAttribute("transform")})),M.attr("opacity",le).attr("transform",(function(t){var e=this.parentNode.__axis;return d((e&&isFinite(e=e(t))?e:b(t))+c)}))),S.remove(),w.attr("d",t===se||t===ue?a?"M"+s*a+","+y+"H"+c+"V"+_+"H"+s*a:"M"+c+","+y+"V"+_:a?"M"+y+","+s*a+"V"+c+"H"+_+"V"+s*a:"M"+y+","+c+"H"+_),x.attr("opacity",1).attr("transform",(function(t){return d(b(t)+c)})),E.attr(l+"2",s*o),k.attr(l,s*p).text(v),m.filter(pe).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===ue?"start":t===se?"end":"middle"),m.each((function(){this.__axis=b}))}return f.scale=function(t){return arguments.length?(e=t,f):e},f.ticks=function(){return n=Array.from(arguments),f},f.tickArguments=function(t){return arguments.length?(n=null==t?[]:Array.from(t),f):n.slice()},f.tickValues=function(t){return arguments.length?(i=null==t?null:Array.from(t),f):i&&i.slice()},f.tickFormat=function(t){return arguments.length?(r=t,f):r},f.tickSize=function(t){return arguments.length?(o=a=+t,f):o},f.tickSizeInner=function(t){return arguments.length?(o=+t,f):o},f.tickSizeOuter=function(t){return arguments.length?(a=+t,f):a},f.tickPadding=function(t){return arguments.length?(u=+t,f):u},f.offset=function(t){return arguments.length?(c=+t,f):c},f}function ye(t){return ge(ae,t)}function _e(t){return ge(ue,t)}function be(t){return ge(ce,t)}function me(t){return ge(se,t)}var we={value:()=>{}};function xe(){for(var t,e=0,n=arguments.length,i={};e<n;++e){if(!(t=arguments[e]+"")||t in i||/[\s.]/.test(t))throw new Error("illegal type: "+t);i[t]=[]}return new Se(i)}function Se(t){this._=t}function Me(t,e){for(var n,i=0,r=t.length;i<r;++i)if((n=t[i]).name===e)return n.value}function Ee(t,e,n){for(var i=0,r=t.length;i<r;++i)if(t[i].name===e){t[i]=we,t=t.slice(0,i).concat(t.slice(i+1));break}return null!=n&&t.push({name:e,value:n}),t}Se.prototype=xe.prototype={constructor:Se,on:function(t,e){var n,i,r=this._,o=(i=r,(t+"").trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!i.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))),a=-1,u=o.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<u;)if(n=(t=o[a]).type)r[n]=Ee(r[n],t.name,e);else if(null==e)for(n in r)r[n]=Ee(r[n],t.name,null);return this}for(;++a<u;)if((n=(t=o[a]).type)&&(n=Me(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Se(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,i,r=new Array(n),o=0;o<n;++o)r[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(i=this._[t]).length;o<n;++o)i[o].value.apply(e,r)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var i=this._[t],r=0,o=i.length;r<o;++r)i[r].value.apply(e,n)}};const ke=xe;function Te(){}function Ne(t){return null==t?Te:function(){return this.querySelector(t)}}function Ae(t){return null==t?[]:Array.isArray(t)?t:Array.from(t)}function Oe(){return[]}function Re(t){return null==t?Oe:function(){return this.querySelectorAll(t)}}function Ce(t){return function(){return this.matches(t)}}function Ie(t){return function(e){return e.matches(t)}}var je=Array.prototype.find;function Pe(){return this.firstElementChild}var ze=Array.prototype.filter;function De(){return Array.from(this.children)}function Ve(t){return new Array(t.length)}function Le(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function Be(t,e,n,i,r,o){for(var a,u=0,c=e.length,s=o.length;u<s;++u)(a=e[u])?(a.__data__=o[u],i[u]=a):n[u]=new Le(t,o[u]);for(;u<c;++u)(a=e[u])&&(r[u]=a)}function Fe(t,e,n,i,r,o,a){var u,c,s,l=new Map,d=e.length,f=o.length,h=new Array(d);for(u=0;u<d;++u)(c=e[u])&&(h[u]=s=a.call(c,c.__data__,u,e)+"",l.has(s)?r[u]=c:l.set(s,c));for(u=0;u<f;++u)s=a.call(t,o[u],u,o)+"",(c=l.get(s))?(i[u]=c,c.__data__=o[u],l.delete(s)):n[u]=new Le(t,o[u]);for(u=0;u<d;++u)(c=e[u])&&l.get(h[u])===c&&(r[u]=c)}function Ge(t){return t.__data__}function Ue(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function Ke(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}Le.prototype={constructor:Le,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var Qe="http://www.w3.org/1999/xhtml";const He={svg:"http://www.w3.org/2000/svg",xhtml:Qe,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function $e(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),He.hasOwnProperty(e)?{space:He[e],local:t}:t}function qe(t){return function(){this.removeAttribute(t)}}function Ye(t){return function(){this.removeAttributeNS(t.space,t.local)}}function We(t,e){return function(){this.setAttribute(t,e)}}function Xe(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function Je(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function Ze(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function tn(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function en(t){return function(){this.style.removeProperty(t)}}function nn(t,e,n){return function(){this.style.setProperty(t,e,n)}}function rn(t,e,n){return function(){var i=e.apply(this,arguments);null==i?this.style.removeProperty(t):this.style.setProperty(t,i,n)}}function on(t,e){return t.style.getPropertyValue(e)||tn(t).getComputedStyle(t,null).getPropertyValue(e)}function an(t){return function(){delete this[t]}}function un(t,e){return function(){this[t]=e}}function cn(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function sn(t){return t.trim().split(/^|\s+/)}function ln(t){return t.classList||new dn(t)}function dn(t){this._node=t,this._names=sn(t.getAttribute("class")||"")}function fn(t,e){for(var n=ln(t),i=-1,r=e.length;++i<r;)n.add(e[i])}function hn(t,e){for(var n=ln(t),i=-1,r=e.length;++i<r;)n.remove(e[i])}function vn(t){return function(){fn(this,t)}}function pn(t){return function(){hn(this,t)}}function gn(t,e){return function(){(e.apply(this,arguments)?fn:hn)(this,t)}}function yn(){this.textContent=""}function _n(t){return function(){this.textContent=t}}function bn(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function mn(){this.innerHTML=""}function wn(t){return function(){this.innerHTML=t}}function xn(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Sn(){this.nextSibling&&this.parentNode.appendChild(this)}function Mn(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function En(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===Qe&&e.documentElement.namespaceURI===Qe?e.createElement(t):e.createElementNS(n,t)}}function kn(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function Tn(t){var e=$e(t);return(e.local?kn:En)(e)}function Nn(){return null}function An(){var t=this.parentNode;t&&t.removeChild(this)}function On(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Rn(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Cn(t){return function(){var e=this.__on;if(e){for(var n,i=0,r=-1,o=e.length;i<o;++i)n=e[i],t.type&&n.type!==t.type||n.name!==t.name?e[++r]=n:this.removeEventListener(n.type,n.listener,n.options);++r?e.length=r:delete this.__on}}}function In(t,e,n){return function(){var i,r=this.__on,o=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(r)for(var a=0,u=r.length;a<u;++a)if((i=r[a]).type===t.type&&i.name===t.name)return this.removeEventListener(i.type,i.listener,i.options),this.addEventListener(i.type,i.listener=o,i.options=n),void(i.value=e);this.addEventListener(t.type,o,n),i={type:t.type,name:t.name,value:e,listener:o,options:n},r?r.push(i):this.__on=[i]}}function jn(t,e,n){var i=tn(t),r=i.CustomEvent;"function"==typeof r?r=new r(e,n):(r=i.document.createEvent("Event"),n?(r.initEvent(e,n.bubbles,n.cancelable),r.detail=n.detail):r.initEvent(e,!1,!1)),t.dispatchEvent(r)}function Pn(t,e){return function(){return jn(this,t,e)}}function zn(t,e){return function(){return jn(this,t,e.apply(this,arguments))}}dn.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Dn=[null];function Vn(t,e){this._groups=t,this._parents=e}function Ln(){return new Vn([[document.documentElement]],Dn)}Vn.prototype=Ln.prototype={constructor:Vn,select:function(t){"function"!=typeof t&&(t=Ne(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var o,a,u=e[r],c=u.length,s=i[r]=new Array(c),l=0;l<c;++l)(o=u[l])&&(a=t.call(o,o.__data__,l,u))&&("__data__"in o&&(a.__data__=o.__data__),s[l]=a);return new Vn(i,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return Ae(t.apply(this,arguments))}}(t):Re(t);for(var e=this._groups,n=e.length,i=[],r=[],o=0;o<n;++o)for(var a,u=e[o],c=u.length,s=0;s<c;++s)(a=u[s])&&(i.push(t.call(a,a.__data__,s,u)),r.push(a));return new Vn(i,r)},selectChild:function(t){return this.select(null==t?Pe:function(t){return function(){return je.call(this.children,t)}}("function"==typeof t?t:Ie(t)))},selectChildren:function(t){return this.selectAll(null==t?De:function(t){return function(){return ze.call(this.children,t)}}("function"==typeof t?t:Ie(t)))},filter:function(t){"function"!=typeof t&&(t=Ce(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var o,a=e[r],u=a.length,c=i[r]=[],s=0;s<u;++s)(o=a[s])&&t.call(o,o.__data__,s,a)&&c.push(o);return new Vn(i,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,Ge);var n,i=e?Fe:Be,r=this._parents,o=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var a=o.length,u=new Array(a),c=new Array(a),s=new Array(a),l=0;l<a;++l){var d=r[l],f=o[l],h=f.length,v=Ue(t.call(d,d&&d.__data__,l,r)),p=v.length,g=c[l]=new Array(p),y=u[l]=new Array(p);i(d,f,g,y,s[l]=new Array(h),v,e);for(var _,b,m=0,w=0;m<p;++m)if(_=g[m]){for(m>=w&&(w=m+1);!(b=y[w])&&++w<p;);_._next=b||null}}return(u=new Vn(u,r))._enter=c,u._exit=s,u},enter:function(){return new Vn(this._enter||this._groups.map(Ve),this._parents)},exit:function(){return new Vn(this._exit||this._groups.map(Ve),this._parents)},join:function(t,e,n){var i=this.enter(),r=this,o=this.exit();return"function"==typeof t?(i=t(i))&&(i=i.selection()):i=i.append(t+""),null!=e&&(r=e(r))&&(r=r.selection()),null==n?o.remove():n(o),i&&r?i.merge(r).order():r},merge:function(t){for(var e=t.selection?t.selection():t,n=this._groups,i=e._groups,r=n.length,o=i.length,a=Math.min(r,o),u=new Array(r),c=0;c<a;++c)for(var s,l=n[c],d=i[c],f=l.length,h=u[c]=new Array(f),v=0;v<f;++v)(s=l[v]||d[v])&&(h[v]=s);for(;c<r;++c)u[c]=n[c];return new Vn(u,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var i,r=t[e],o=r.length-1,a=r[o];--o>=0;)(i=r[o])&&(a&&4^i.compareDocumentPosition(a)&&a.parentNode.insertBefore(i,a),a=i);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=Ke);for(var n=this._groups,i=n.length,r=new Array(i),o=0;o<i;++o){for(var a,u=n[o],c=u.length,s=r[o]=new Array(c),l=0;l<c;++l)(a=u[l])&&(s[l]=a);s.sort(e)}return new Vn(r,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var i=t[e],r=0,o=i.length;r<o;++r){var a=i[r];if(a)return a}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,i=e.length;n<i;++n)for(var r,o=e[n],a=0,u=o.length;a<u;++a)(r=o[a])&&t.call(r,r.__data__,a,o);return this},attr:function(t,e){var n=$e(t);if(arguments.length<2){var i=this.node();return n.local?i.getAttributeNS(n.space,n.local):i.getAttribute(n)}return this.each((null==e?n.local?Ye:qe:"function"==typeof e?n.local?Ze:Je:n.local?Xe:We)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?en:"function"==typeof e?rn:nn)(t,e,null==n?"":n)):on(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?an:"function"==typeof e?cn:un)(t,e)):this.node()[t]},classed:function(t,e){var n=sn(t+"");if(arguments.length<2){for(var i=ln(this.node()),r=-1,o=n.length;++r<o;)if(!i.contains(n[r]))return!1;return!0}return this.each(("function"==typeof e?gn:e?vn:pn)(n,e))},text:function(t){return arguments.length?this.each(null==t?yn:("function"==typeof t?bn:_n)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?mn:("function"==typeof t?xn:wn)(t)):this.node().innerHTML},raise:function(){return this.each(Sn)},lower:function(){return this.each(Mn)},append:function(t){var e="function"==typeof t?t:Tn(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:Tn(t),i=null==e?Nn:"function"==typeof e?e:Ne(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),i.apply(this,arguments)||null)}))},remove:function(){return this.each(An)},clone:function(t){return this.select(t?Rn:On)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var i,r,o=function(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}(t+""),a=o.length;if(!(arguments.length<2)){for(u=e?In:Cn,i=0;i<a;++i)this.each(u(o[i],e,n));return this}var u=this.node().__on;if(u)for(var c,s=0,l=u.length;s<l;++s)for(i=0,c=u[s];i<a;++i)if((r=o[i]).type===c.type&&r.name===c.name)return c.value},dispatch:function(t,e){return this.each(("function"==typeof e?zn:Pn)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var i,r=t[e],o=0,a=r.length;o<a;++o)(i=r[o])&&(yield i)}};const Bn=Ln;function Fn(t){return"string"==typeof t?new Vn([[document.querySelector(t)]],[document.documentElement]):new Vn([[t]],Dn)}const Gn={passive:!1},Un={capture:!0,passive:!1};function Kn(t){t.stopImmediatePropagation()}function Qn(t){t.preventDefault(),t.stopImmediatePropagation()}function Hn(t){var e=t.document.documentElement,n=Fn(t).on("dragstart.drag",Qn,Un);"onselectstart"in e?n.on("selectstart.drag",Qn,Un):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}function $n(t,e){var n=t.document.documentElement,i=Fn(t).on("dragstart.drag",null);e&&(i.on("click.drag",Qn,Un),setTimeout((function(){i.on("click.drag",null)}),0)),"onselectstart"in n?i.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}function qn(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function Yn(t,e){var n=Object.create(t.prototype);for(var i in e)n[i]=e[i];return n}function Wn(){}var Xn=.7,Jn=1/Xn,Zn="\\s*([+-]?\\d+)\\s*",ti="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",ei="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",ni=/^#([0-9a-f]{3,8})$/,ii=new RegExp(`^rgb\\(${Zn},${Zn},${Zn}\\)$`),ri=new RegExp(`^rgb\\(${ei},${ei},${ei}\\)$`),oi=new RegExp(`^rgba\\(${Zn},${Zn},${Zn},${ti}\\)$`),ai=new RegExp(`^rgba\\(${ei},${ei},${ei},${ti}\\)$`),ui=new RegExp(`^hsl\\(${ti},${ei},${ei}\\)$`),ci=new RegExp(`^hsla\\(${ti},${ei},${ei},${ti}\\)$`),si={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function li(){return this.rgb().formatHex()}function di(){return this.rgb().formatRgb()}function fi(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=ni.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?hi(e):3===n?new yi(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?vi(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?vi(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=ii.exec(t))?new yi(e[1],e[2],e[3],1):(e=ri.exec(t))?new yi(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=oi.exec(t))?vi(e[1],e[2],e[3],e[4]):(e=ai.exec(t))?vi(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=ui.exec(t))?Si(e[1],e[2]/100,e[3]/100,1):(e=ci.exec(t))?Si(e[1],e[2]/100,e[3]/100,e[4]):si.hasOwnProperty(t)?hi(si[t]):"transparent"===t?new yi(NaN,NaN,NaN,0):null}function hi(t){return new yi(t>>16&255,t>>8&255,255&t,1)}function vi(t,e,n,i){return i<=0&&(t=e=n=NaN),new yi(t,e,n,i)}function pi(t){return t instanceof Wn||(t=fi(t)),t?new yi((t=t.rgb()).r,t.g,t.b,t.opacity):new yi}function gi(t,e,n,i){return 1===arguments.length?pi(t):new yi(t,e,n,null==i?1:i)}function yi(t,e,n,i){this.r=+t,this.g=+e,this.b=+n,this.opacity=+i}function _i(){return`#${xi(this.r)}${xi(this.g)}${xi(this.b)}`}function bi(){const t=mi(this.opacity);return`${1===t?"rgb(":"rgba("}${wi(this.r)}, ${wi(this.g)}, ${wi(this.b)}${1===t?")":`, ${t})`}`}function mi(t){return isNaN(t)?1:Math.max(0,Math.min(1,t))}function wi(t){return Math.max(0,Math.min(255,Math.round(t)||0))}function xi(t){return((t=wi(t))<16?"0":"")+t.toString(16)}function Si(t,e,n,i){return i<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new ki(t,e,n,i)}function Mi(t){if(t instanceof ki)return new ki(t.h,t.s,t.l,t.opacity);if(t instanceof Wn||(t=fi(t)),!t)return new ki;if(t instanceof ki)return t;var e=(t=t.rgb()).r/255,n=t.g/255,i=t.b/255,r=Math.min(e,n,i),o=Math.max(e,n,i),a=NaN,u=o-r,c=(o+r)/2;return u?(a=e===o?(n-i)/u+6*(n<i):n===o?(i-e)/u+2:(e-n)/u+4,u/=c<.5?o+r:2-o-r,a*=60):u=c>0&&c<1?0:a,new ki(a,u,c,t.opacity)}function Ei(t,e,n,i){return 1===arguments.length?Mi(t):new ki(t,e,n,null==i?1:i)}function ki(t,e,n,i){this.h=+t,this.s=+e,this.l=+n,this.opacity=+i}function Ti(t){return(t=(t||0)%360)<0?t+360:t}function Ni(t){return Math.max(0,Math.min(1,t||0))}function Ai(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Oi(t,e,n,i,r){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*i+a*r)/6}function Ri(t){var e=t.length-1;return function(n){var i=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),r=t[i],o=t[i+1],a=i>0?t[i-1]:2*r-o,u=i<e-1?t[i+2]:2*o-r;return Oi((n-i/e)*e,a,r,o,u)}}function Ci(t){var e=t.length;return function(n){var i=Math.floor(((n%=1)<0?++n:n)*e),r=t[(i+e-1)%e],o=t[i%e],a=t[(i+1)%e],u=t[(i+2)%e];return Oi((n-i/e)*e,r,o,a,u)}}qn(Wn,fi,{copy(t){return Object.assign(new this.constructor,this,t)},displayable(){return this.rgb().displayable()},hex:li,formatHex:li,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return Mi(this).formatHsl()},formatRgb:di,toString:di}),qn(yi,gi,Yn(Wn,{brighter(t){return t=null==t?Jn:Math.pow(Jn,t),new yi(this.r*t,this.g*t,this.b*t,this.opacity)},darker(t){return t=null==t?Xn:Math.pow(Xn,t),new yi(this.r*t,this.g*t,this.b*t,this.opacity)},rgb(){return this},clamp(){return new yi(wi(this.r),wi(this.g),wi(this.b),mi(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:_i,formatHex:_i,formatHex8:function(){return`#${xi(this.r)}${xi(this.g)}${xi(this.b)}${xi(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:bi,toString:bi})),qn(ki,Ei,Yn(Wn,{brighter(t){return t=null==t?Jn:Math.pow(Jn,t),new ki(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?Xn:Math.pow(Xn,t),new ki(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,i=n+(n<.5?n:1-n)*e,r=2*n-i;return new yi(Ai(t>=240?t-240:t+120,r,i),Ai(t,r,i),Ai(t<120?t+240:t-120,r,i),this.opacity)},clamp(){return new ki(Ti(this.h),Ni(this.s),Ni(this.l),mi(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const t=mi(this.opacity);return`${1===t?"hsl(":"hsla("}${Ti(this.h)}, ${100*Ni(this.s)}%, ${100*Ni(this.l)}%${1===t?")":`, ${t})`}`}}));const Ii=t=>()=>t;function ji(t,e){return function(n){return t+n*e}}function Pi(t,e){var n=e-t;return n?ji(t,n>180||n<-180?n-360*Math.round(n/360):n):Ii(isNaN(t)?e:t)}function zi(t,e){var n=e-t;return n?ji(t,n):Ii(isNaN(t)?e:t)}const Di=function t(e){var n=function(t){return 1==(t=+t)?zi:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(i){return Math.pow(t+i*e,n)}}(e,n,t):Ii(isNaN(e)?n:e)}}(e);function i(t,e){var i=n((t=gi(t)).r,(e=gi(e)).r),r=n(t.g,e.g),o=n(t.b,e.b),a=zi(t.opacity,e.opacity);return function(e){return t.r=i(e),t.g=r(e),t.b=o(e),t.opacity=a(e),t+""}}return i.gamma=t,i}(1);function Vi(t){return function(e){var n,i,r=e.length,o=new Array(r),a=new Array(r),u=new Array(r);for(n=0;n<r;++n)i=gi(e[n]),o[n]=i.r||0,a[n]=i.g||0,u[n]=i.b||0;return o=t(o),a=t(a),u=t(u),i.opacity=1,function(t){return i.r=o(t),i.g=a(t),i.b=u(t),i+""}}}var Li=Vi(Ri),Bi=Vi(Ci);function Fi(t,e){e||(e=[]);var n,i=t?Math.min(e.length,t.length):0,r=e.slice();return function(o){for(n=0;n<i;++n)r[n]=t[n]*(1-o)+e[n]*o;return r}}function Gi(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function Ui(t,e){return(Gi(e)?Fi:Ki)(t,e)}function Ki(t,e){var n,i=e?e.length:0,r=t?Math.min(i,t.length):0,o=new Array(r),a=new Array(i);for(n=0;n<r;++n)o[n]=Xi(t[n],e[n]);for(;n<i;++n)a[n]=e[n];return function(t){for(n=0;n<r;++n)a[n]=o[n](t);return a}}function Qi(t,e){var n=new Date;return t=+t,e=+e,function(i){return n.setTime(t*(1-i)+e*i),n}}function Hi(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function $i(t,e){var n,i={},r={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?i[n]=Xi(t[n],e[n]):r[n]=e[n];return function(t){for(n in i)r[n]=i[n](t);return r}}var qi=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Yi=new RegExp(qi.source,"g");function Wi(t,e){var n,i,r,o=qi.lastIndex=Yi.lastIndex=0,a=-1,u=[],c=[];for(t+="",e+="";(n=qi.exec(t))&&(i=Yi.exec(e));)(r=i.index)>o&&(r=e.slice(o,r),u[a]?u[a]+=r:u[++a]=r),(n=n[0])===(i=i[0])?u[a]?u[a]+=i:u[++a]=i:(u[++a]=null,c.push({i:a,x:Hi(n,i)})),o=Yi.lastIndex;return o<e.length&&(r=e.slice(o),u[a]?u[a]+=r:u[++a]=r),u.length<2?c[0]?function(t){return function(e){return t(e)+""}}(c[0].x):function(t){return function(){return t}}(e):(e=c.length,function(t){for(var n,i=0;i<e;++i)u[(n=c[i]).i]=n.x(t);return u.join("")})}function Xi(t,e){var n,i=typeof e;return null==e||"boolean"===i?Ii(e):("number"===i?Hi:"string"===i?(n=fi(e))?(e=n,Di):Wi:e instanceof fi?Di:e instanceof Date?Qi:Gi(e)?Fi:Array.isArray(e)?Ki:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?$i:Hi)(t,e)}function Ji(t){let e;for(;e=t.sourceEvent;)t=e;return t}function Zi(t,e){if(t=Ji(t),void 0===e&&(e=t.currentTarget),e){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var i=n.createSVGPoint();return i.x=t.clientX,i.y=t.clientY,[(i=i.matrixTransform(e.getScreenCTM().inverse())).x,i.y]}if(e.getBoundingClientRect){var r=e.getBoundingClientRect();return[t.clientX-r.left-e.clientLeft,t.clientY-r.top-e.clientTop]}}return[t.pageX,t.pageY]}var tr,er,nr=0,ir=0,rr=0,or=1e3,ar=0,ur=0,cr=0,sr="object"==typeof performance&&performance.now?performance:Date,lr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function dr(){return ur||(lr(fr),ur=sr.now()+cr)}function fr(){ur=0}function hr(){this._call=this._time=this._next=null}function vr(t,e,n){var i=new hr;return i.restart(t,e,n),i}function pr(){dr(),++nr;for(var t,e=tr;e;)(t=ur-e._time)>=0&&e._call.call(void 0,t),e=e._next;--nr}function gr(){ur=(ar=sr.now())+cr,nr=ir=0;try{pr()}finally{nr=0,function(){for(var t,e,n=tr,i=1/0;n;)n._call?(i>n._time&&(i=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:tr=e);er=t,_r(i)}(),ur=0}}function yr(){var t=sr.now(),e=t-ar;e>or&&(cr-=e,ar=t)}function _r(t){nr||(ir&&(ir=clearTimeout(ir)),t-ur>24?(t<1/0&&(ir=setTimeout(gr,t-sr.now()-cr)),rr&&(rr=clearInterval(rr))):(rr||(ar=sr.now(),rr=setInterval(yr,or)),nr=1,lr(gr)))}function br(t,e,n){var i=new hr;return e=null==e?0:+e,i.restart((n=>{i.stop(),t(n+e)}),e,n),i}hr.prototype=vr.prototype={constructor:hr,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?dr():+n)+(null==e?0:+e),this._next||er===this||(er?er._next=this:tr=this,er=this),this._call=t,this._time=n,_r()},stop:function(){this._call&&(this._call=null,this._time=1/0,_r())}};var mr=ke("start","end","cancel","interrupt"),wr=[],xr=0,Sr=1,Mr=2,Er=3,kr=5,Tr=6;function Nr(t,e,n,i,r,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var i,r=t.__transition;function o(c){var s,l,d,f;if(n.state!==Sr)return u();for(s in r)if((f=r[s]).name===n.name){if(f.state===Er)return br(o);4===f.state?(f.state=Tr,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete r[s]):+s<e&&(f.state=Tr,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete r[s])}if(br((function(){n.state===Er&&(n.state=4,n.timer.restart(a,n.delay,n.time),a(c))})),n.state=Mr,n.on.call("start",t,t.__data__,n.index,n.group),n.state===Mr){for(n.state=Er,i=new Array(d=n.tween.length),s=0,l=-1;s<d;++s)(f=n.tween[s].value.call(t,t.__data__,n.index,n.group))&&(i[++l]=f);i.length=l+1}}function a(e){for(var r=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(u),n.state=kr,1),o=-1,a=i.length;++o<a;)i[o].call(t,r);n.state===kr&&(n.on.call("end",t,t.__data__,n.index,n.group),u())}function u(){for(var i in n.state=Tr,n.timer.stop(),delete r[e],r)return;delete t.__transition}r[e]=n,n.timer=vr((function(t){n.state=Sr,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}),0,n.time)}(t,n,{name:e,index:i,group:r,on:mr,tween:wr,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:xr})}function Ar(t,e){var n=Rr(t,e);if(n.state>xr)throw new Error("too late; already scheduled");return n}function Or(t,e){var n=Rr(t,e);if(n.state>Er)throw new Error("too late; already running");return n}function Rr(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function Cr(t,e){var n,i,r,o=t.__transition,a=!0;if(o){for(r in e=null==e?null:e+"",o)(n=o[r]).name===e?(i=n.state>Mr&&n.state<kr,n.state=Tr,n.timer.stop(),n.on.call(i?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[r]):a=!1;a&&delete t.__transition}}var Ir,jr=180/Math.PI,Pr={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function zr(t,e,n,i,r,o){var a,u,c;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(c=t*n+e*i)&&(n-=t*c,i-=e*c),(u=Math.sqrt(n*n+i*i))&&(n/=u,i/=u,c/=u),t*i<e*n&&(t=-t,e=-e,c=-c,a=-a),{translateX:r,translateY:o,rotate:Math.atan2(e,t)*jr,skewX:Math.atan(c)*jr,scaleX:a,scaleY:u}}function Dr(t,e,n,i){function r(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],c=[];return o=t(o),a=t(a),function(t,i,r,o,a,u){if(t!==r||i!==o){var c=a.push("translate(",null,e,null,n);u.push({i:c-4,x:Hi(t,r)},{i:c-2,x:Hi(i,o)})}else(r||o)&&a.push("translate("+r+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,u,c),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(r(n)+"rotate(",null,i)-2,x:Hi(t,e)})):e&&n.push(r(n)+"rotate("+e+i)}(o.rotate,a.rotate,u,c),function(t,e,n,o){t!==e?o.push({i:n.push(r(n)+"skewX(",null,i)-2,x:Hi(t,e)}):e&&n.push(r(n)+"skewX("+e+i)}(o.skewX,a.skewX,u,c),function(t,e,n,i,o,a){if(t!==n||e!==i){var u=o.push(r(o)+"scale(",null,",",null,")");a.push({i:u-4,x:Hi(t,n)},{i:u-2,x:Hi(e,i)})}else 1===n&&1===i||o.push(r(o)+"scale("+n+","+i+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,c),o=a=null,function(t){for(var e,n=-1,i=c.length;++n<i;)u[(e=c[n]).i]=e.x(t);return u.join("")}}}var Vr=Dr((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?Pr:zr(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),Lr=Dr((function(t){return null==t?Pr:(Ir||(Ir=document.createElementNS("http://www.w3.org/2000/svg","g")),Ir.setAttribute("transform",t),(t=Ir.transform.baseVal.consolidate())?zr((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Pr)}),", ",")",")");function Br(t,e){var n,i;return function(){var r=Or(this,t),o=r.tween;if(o!==n)for(var a=0,u=(i=n=o).length;a<u;++a)if(i[a].name===e){(i=i.slice()).splice(a,1);break}r.tween=i}}function Fr(t,e,n){var i,r;if("function"!=typeof n)throw new Error;return function(){var o=Or(this,t),a=o.tween;if(a!==i){r=(i=a).slice();for(var u={name:e,value:n},c=0,s=r.length;c<s;++c)if(r[c].name===e){r[c]=u;break}c===s&&r.push(u)}o.tween=r}}function Gr(t,e,n){var i=t._id;return t.each((function(){var t=Or(this,i);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return Rr(t,i).value[e]}}function Ur(t,e){var n;return("number"==typeof e?Hi:e instanceof fi?Di:(n=fi(e))?(e=n,Di):Wi)(t,e)}function Kr(t){return function(){this.removeAttribute(t)}}function Qr(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Hr(t,e,n){var i,r,o=n+"";return function(){var a=this.getAttribute(t);return a===o?null:a===i?r:r=e(i=a,n)}}function $r(t,e,n){var i,r,o=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===i?r:r=e(i=a,n)}}function qr(t,e,n){var i,r,o;return function(){var a,u,c=n(this);if(null!=c)return(a=this.getAttribute(t))===(u=c+"")?null:a===i&&u===r?o:(r=u,o=e(i=a,c));this.removeAttribute(t)}}function Yr(t,e,n){var i,r,o;return function(){var a,u,c=n(this);if(null!=c)return(a=this.getAttributeNS(t.space,t.local))===(u=c+"")?null:a===i&&u===r?o:(r=u,o=e(i=a,c));this.removeAttributeNS(t.space,t.local)}}function Wr(t,e){var n,i;function r(){var r=e.apply(this,arguments);return r!==i&&(n=(i=r)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}(t,r)),n}return r._value=e,r}function Xr(t,e){var n,i;function r(){var r=e.apply(this,arguments);return r!==i&&(n=(i=r)&&function(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}(t,r)),n}return r._value=e,r}function Jr(t,e){return function(){Ar(this,t).delay=+e.apply(this,arguments)}}function Zr(t,e){return e=+e,function(){Ar(this,t).delay=e}}function to(t,e){return function(){Or(this,t).duration=+e.apply(this,arguments)}}function eo(t,e){return e=+e,function(){Or(this,t).duration=e}}var no=Bn.prototype.constructor;function io(t){return function(){this.style.removeProperty(t)}}var ro=0;function oo(t,e,n,i){this._groups=t,this._parents=e,this._name=n,this._id=i}function ao(t){return Bn().transition(t)}function uo(){return++ro}var co=Bn.prototype;function so(t){return t*t*t}function lo(t){return--t*t*t+1}function fo(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}oo.prototype=ao.prototype={constructor:oo,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Ne(t));for(var i=this._groups,r=i.length,o=new Array(r),a=0;a<r;++a)for(var u,c,s=i[a],l=s.length,d=o[a]=new Array(l),f=0;f<l;++f)(u=s[f])&&(c=t.call(u,u.__data__,f,s))&&("__data__"in u&&(c.__data__=u.__data__),d[f]=c,Nr(d[f],e,n,f,d,Rr(u,n)));return new oo(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Re(t));for(var i=this._groups,r=i.length,o=[],a=[],u=0;u<r;++u)for(var c,s=i[u],l=s.length,d=0;d<l;++d)if(c=s[d]){for(var f,h=t.call(c,c.__data__,d,s),v=Rr(c,n),p=0,g=h.length;p<g;++p)(f=h[p])&&Nr(f,e,n,p,h,v);o.push(h),a.push(c)}return new oo(o,a,e,n)},selectChild:co.selectChild,selectChildren:co.selectChildren,filter:function(t){"function"!=typeof t&&(t=Ce(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var o,a=e[r],u=a.length,c=i[r]=[],s=0;s<u;++s)(o=a[s])&&t.call(o,o.__data__,s,a)&&c.push(o);return new oo(i,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,i=e.length,r=n.length,o=Math.min(i,r),a=new Array(i),u=0;u<o;++u)for(var c,s=e[u],l=n[u],d=s.length,f=a[u]=new Array(d),h=0;h<d;++h)(c=s[h]||l[h])&&(f[h]=c);for(;u<i;++u)a[u]=e[u];return new oo(a,this._parents,this._name,this._id)},selection:function(){return new no(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=uo(),i=this._groups,r=i.length,o=0;o<r;++o)for(var a,u=i[o],c=u.length,s=0;s<c;++s)if(a=u[s]){var l=Rr(a,e);Nr(a,t,n,s,u,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new oo(i,this._parents,t,n)},call:co.call,nodes:co.nodes,node:co.node,size:co.size,empty:co.empty,each:co.each,on:function(t,e){var n=this._id;return arguments.length<2?Rr(this.node(),n).on.on(t):this.each(function(t,e,n){var i,r,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?Ar:Or;return function(){var a=o(this,t),u=a.on;u!==i&&(r=(i=u).copy()).on(e,n),a.on=r}}(n,t,e))},attr:function(t,e){var n=$e(t),i="transform"===n?Lr:Ur;return this.attrTween(t,"function"==typeof e?(n.local?Yr:qr)(n,i,Gr(this,"attr."+t,e)):null==e?(n.local?Qr:Kr)(n):(n.local?$r:Hr)(n,i,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var i=$e(t);return this.tween(n,(i.local?Wr:Xr)(i,e))},style:function(t,e,n){var i="transform"==(t+="")?Vr:Ur;return null==e?this.styleTween(t,function(t,e){var n,i,r;return function(){var o=on(this,t),a=(this.style.removeProperty(t),on(this,t));return o===a?null:o===n&&a===i?r:r=e(n=o,i=a)}}(t,i)).on("end.style."+t,io(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var i,r,o;return function(){var a=on(this,t),u=n(this),c=u+"";return null==u&&(this.style.removeProperty(t),c=u=on(this,t)),a===c?null:a===i&&c===r?o:(r=c,o=e(i=a,u))}}(t,i,Gr(this,"style."+t,e))).each(function(t,e){var n,i,r,o,a="style."+e,u="end."+a;return function(){var c=Or(this,t),s=c.on,l=null==c.value[a]?o||(o=io(e)):void 0;s===n&&r===l||(i=(n=s).copy()).on(u,r=l),c.on=i}}(this._id,t)):this.styleTween(t,function(t,e,n){var i,r,o=n+"";return function(){var a=on(this,t);return a===o?null:a===i?r:r=e(i=a,n)}}(t,i,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var i="style."+(t+="");if(arguments.length<2)return(i=this.tween(i))&&i._value;if(null==e)return this.tween(i,null);if("function"!=typeof e)throw new Error;return this.tween(i,function(t,e,n){var i,r;function o(){var o=e.apply(this,arguments);return o!==r&&(i=(r=o)&&function(t,e,n){return function(i){this.style.setProperty(t,e.call(this,i),n)}}(t,o,n)),i}return o._value=e,o}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Gr(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,function(t){var e,n;function i(){var i=t.apply(this,arguments);return i!==n&&(e=(n=i)&&function(t){return function(e){this.textContent=t.call(this,e)}}(i)),e}return i._value=t,i}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var i,r=Rr(this.node(),n).tween,o=0,a=r.length;o<a;++o)if((i=r[o]).name===t)return i.value;return null}return this.each((null==e?Br:Fr)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Jr:Zr)(e,t)):Rr(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?to:eo)(e,t)):Rr(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){Or(this,t).ease=e}}(e,t)):Rr(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;Or(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,i=n._id,r=n.size();return new Promise((function(o,a){var u={value:a},c={value:function(){0==--r&&o()}};n.each((function(){var n=Or(this,i),r=n.on;r!==t&&((e=(t=r).copy())._.cancel.push(u),e._.interrupt.push(u),e._.end.push(c)),n.on=e})),0===r&&o()}))},[Symbol.iterator]:co[Symbol.iterator]};var ho={time:null,delay:0,duration:250,ease:fo};function vo(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}Bn.prototype.interrupt=function(t){return this.each((function(){Cr(this,t)}))},Bn.prototype.transition=function(t){var e,n;t instanceof oo?(e=t._id,t=t._name):(e=uo(),(n=ho).time=dr(),t=null==t?null:t+"");for(var i=this._groups,r=i.length,o=0;o<r;++o)for(var a,u=i[o],c=u.length,s=0;s<c;++s)(a=u[s])&&Nr(a,t,e,s,u,n||vo(a,e));return new oo(i,this._parents,t,e)};var po=[null];function go(t,e){var n,i,r=t.__transition;if(r)for(i in e=null==e?null:e+"",r)if((n=r[i]).state>Sr&&n.name===e)return new oo([[t]],po,e,+i);return null}const yo=t=>()=>t;function _o(t,{sourceEvent:e,target:n,selection:i,mode:r,dispatch:o}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:e,enumerable:!0,configurable:!0},target:{value:n,enumerable:!0,configurable:!0},selection:{value:i,enumerable:!0,configurable:!0},mode:{value:r,enumerable:!0,configurable:!0},_:{value:o}})}function bo(t){t.preventDefault(),t.stopImmediatePropagation()}var mo={name:"drag"},wo={name:"space"},xo={name:"handle"},So={name:"center"};const{abs:Mo,max:Eo,min:ko}=Math;function To(t){return[+t[0],+t[1]]}function No(t){return[To(t[0]),To(t[1])]}var Ao={name:"x",handles:["w","e"].map(Do),input:function(t,e){return null==t?null:[[+t[0],e[0][1]],[+t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Oo={name:"y",handles:["n","s"].map(Do),input:function(t,e){return null==t?null:[[e[0][0],+t[0]],[e[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Ro={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(Do),input:function(t){return null==t?null:No(t)},output:function(t){return t}},Co={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Io={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},jo={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Po={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},zo={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Do(t){return{type:t}}function Vo(t){return!t.ctrlKey&&!t.button}function Lo(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Bo(){return navigator.maxTouchPoints||"ontouchstart"in this}function Fo(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Go(t){var e=t.__brush;return e?e.dim.output(e.selection):null}function Uo(){return Ho(Ao)}function Ko(){return Ho(Oo)}function Qo(){return Ho(Ro)}function Ho(t){var e,n=Lo,i=Vo,r=Bo,o=!0,a=ke("start","brush","end"),u=6;function c(e){var n=e.property("__brush",p).selectAll(".overlay").data([Do("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Co.overlay).merge(n).each((function(){var t=Fo(this).extent;Fn(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),e.selectAll(".selection").data([Do("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Co.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var i=e.selectAll(".handle").data(t.handles,(function(t){return t.type}));i.exit().remove(),i.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return Co[t.type]})),e.each(s).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",f).filter(r).on("touchstart.brush",f).on("touchmove.brush",h).on("touchend.brush touchcancel.brush",v).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function s(){var t=Fn(this),e=Fo(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?e[1][0]-u/2:e[0][0]-u/2})).attr("y",(function(t){return"s"===t.type[0]?e[1][1]-u/2:e[0][1]-u/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+u:u})).attr("height",(function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+u:u}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function l(t,e,n){var i=t.__brush.emitter;return!i||n&&i.clean?new d(t,e,n):i}function d(t,e,n){this.that=t,this.args=e,this.state=t.__brush,this.active=0,this.clean=n}function f(n){if((!e||n.touches)&&i.apply(this,arguments)){var r,a,u,c,d,f,h,v,p,g,y,_=this,b=n.target.__data__.type,m="selection"===(o&&n.metaKey?b="overlay":b)?mo:o&&n.altKey?So:xo,w=t===Oo?null:Po[b],x=t===Ao?null:zo[b],S=Fo(_),M=S.extent,E=S.selection,k=M[0][0],T=M[0][1],N=M[1][0],A=M[1][1],O=0,R=0,C=w&&x&&o&&n.shiftKey,I=Array.from(n.touches||[n],(t=>{const e=t.identifier;return(t=Zi(t,_)).point0=t.slice(),t.identifier=e,t}));Cr(_);var j=l(_,arguments,!0).beforestart();if("overlay"===b){E&&(p=!0);const e=[I[0],I[1]||I[0]];S.selection=E=[[r=t===Oo?k:ko(e[0][0],e[1][0]),u=t===Ao?T:ko(e[0][1],e[1][1])],[d=t===Oo?N:Eo(e[0][0],e[1][0]),h=t===Ao?A:Eo(e[0][1],e[1][1])]],I.length>1&&L(n)}else r=E[0][0],u=E[0][1],d=E[1][0],h=E[1][1];a=r,c=u,f=d,v=h;var P=Fn(_).attr("pointer-events","none"),z=P.selectAll(".overlay").attr("cursor",Co[b]);if(n.touches)j.moved=V,j.ended=B;else{var D=Fn(n.view).on("mousemove.brush",V,!0).on("mouseup.brush",B,!0);o&&D.on("keydown.brush",(function(t){switch(t.keyCode){case 16:C=w&&x;break;case 18:m===xo&&(w&&(d=f-O*w,r=a+O*w),x&&(h=v-R*x,u=c+R*x),m=So,L(t));break;case 32:m!==xo&&m!==So||(w<0?d=f-O:w>0&&(r=a-O),x<0?h=v-R:x>0&&(u=c-R),m=wo,z.attr("cursor",Co.selection),L(t));break;default:return}bo(t)}),!0).on("keyup.brush",(function(t){switch(t.keyCode){case 16:C&&(g=y=C=!1,L(t));break;case 18:m===So&&(w<0?d=f:w>0&&(r=a),x<0?h=v:x>0&&(u=c),m=xo,L(t));break;case 32:m===wo&&(t.altKey?(w&&(d=f-O*w,r=a+O*w),x&&(h=v-R*x,u=c+R*x),m=So):(w<0?d=f:w>0&&(r=a),x<0?h=v:x>0&&(u=c),m=xo),z.attr("cursor",Co[b]),L(t));break;default:return}bo(t)}),!0),Hn(n.view)}s.call(_),j.start(n,m.name)}function V(t){for(const e of t.changedTouches||[t])for(const t of I)t.identifier===e.identifier&&(t.cur=Zi(e,_));if(C&&!g&&!y&&1===I.length){const t=I[0];Mo(t.cur[0]-t[0])>Mo(t.cur[1]-t[1])?y=!0:g=!0}for(const t of I)t.cur&&(t[0]=t.cur[0],t[1]=t.cur[1]);p=!0,bo(t),L(t)}function L(t){const e=I[0],n=e.point0;var i;switch(O=e[0]-n[0],R=e[1]-n[1],m){case wo:case mo:w&&(O=Eo(k-r,ko(N-d,O)),a=r+O,f=d+O),x&&(R=Eo(T-u,ko(A-h,R)),c=u+R,v=h+R);break;case xo:I[1]?(w&&(a=Eo(k,ko(N,I[0][0])),f=Eo(k,ko(N,I[1][0])),w=1),x&&(c=Eo(T,ko(A,I[0][1])),v=Eo(T,ko(A,I[1][1])),x=1)):(w<0?(O=Eo(k-r,ko(N-r,O)),a=r+O,f=d):w>0&&(O=Eo(k-d,ko(N-d,O)),a=r,f=d+O),x<0?(R=Eo(T-u,ko(A-u,R)),c=u+R,v=h):x>0&&(R=Eo(T-h,ko(A-h,R)),c=u,v=h+R));break;case So:w&&(a=Eo(k,ko(N,r-O*w)),f=Eo(k,ko(N,d+O*w))),x&&(c=Eo(T,ko(A,u-R*x)),v=Eo(T,ko(A,h+R*x)))}f<a&&(w*=-1,i=r,r=d,d=i,i=a,a=f,f=i,b in Io&&z.attr("cursor",Co[b=Io[b]])),v<c&&(x*=-1,i=u,u=h,h=i,i=c,c=v,v=i,b in jo&&z.attr("cursor",Co[b=jo[b]])),S.selection&&(E=S.selection),g&&(a=E[0][0],f=E[1][0]),y&&(c=E[0][1],v=E[1][1]),E[0][0]===a&&E[0][1]===c&&E[1][0]===f&&E[1][1]===v||(S.selection=[[a,c],[f,v]],s.call(_),j.brush(t,m.name))}function B(t){if(function(t){t.stopImmediatePropagation()}(t),t.touches){if(t.touches.length)return;e&&clearTimeout(e),e=setTimeout((function(){e=null}),500)}else $n(t.view,p),D.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);P.attr("pointer-events","all"),z.attr("cursor",Co.overlay),S.selection&&(E=S.selection),function(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}(E)&&(S.selection=null,s.call(_)),j.end(t,m.name)}}function h(t){l(this,arguments).moved(t)}function v(t){l(this,arguments).ended(t)}function p(){var e=this.__brush||{selection:null};return e.extent=No(n.apply(this,arguments)),e.dim=t,e}return c.move=function(e,n,i){e.tween?e.on("start.brush",(function(t){l(this,arguments).beforestart().start(t)})).on("interrupt.brush end.brush",(function(t){l(this,arguments).end(t)})).tween("brush",(function(){var e=this,i=e.__brush,r=l(e,arguments),o=i.selection,a=t.input("function"==typeof n?n.apply(this,arguments):n,i.extent),u=Xi(o,a);function c(t){i.selection=1===t&&null===a?null:u(t),s.call(e),r.brush()}return null!==o&&null!==a?c:c(1)})):e.each((function(){var e=this,r=arguments,o=e.__brush,a=t.input("function"==typeof n?n.apply(e,r):n,o.extent),u=l(e,r).beforestart();Cr(e),o.selection=null===a?null:a,s.call(e),u.start(i).brush(i).end(i)}))},c.clear=function(t,e){c.move(t,null,e)},d.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(t,e){return this.starting?(this.starting=!1,this.emit("start",t,e)):this.emit("brush",t),this},brush:function(t,e){return this.emit("brush",t,e),this},end:function(t,e){return 0==--this.active&&(delete this.state.emitter,this.emit("end",t,e)),this},emit:function(e,n,i){var r=Fn(this.that).datum();a.call(e,this.that,new _o(e,{sourceEvent:n,target:c,selection:t.output(this.state.selection),mode:i,dispatch:a}),r)}},c.extent=function(t){return arguments.length?(n="function"==typeof t?t:yo(No(t)),c):n},c.filter=function(t){return arguments.length?(i="function"==typeof t?t:yo(!!t),c):i},c.touchable=function(t){return arguments.length?(r="function"==typeof t?t:yo(!!t),c):r},c.handleSize=function(t){return arguments.length?(u=+t,c):u},c.keyModifiers=function(t){return arguments.length?(o=!!t,c):o},c.on=function(){var t=a.on.apply(a,arguments);return t===a?c:t},c}var $o=Math.abs,qo=Math.cos,Yo=Math.sin,Wo=Math.PI,Xo=Wo/2,Jo=2*Wo,Zo=Math.max,ta=1e-12;function ea(t,e){return Array.from({length:e-t},((e,n)=>t+n))}function na(){return oa(!1,!1)}function ia(){return oa(!1,!0)}function ra(){return oa(!0,!1)}function oa(t,e){var n=0,i=null,r=null,o=null;function a(a){var u,c=a.length,s=new Array(c),l=ea(0,c),d=new Array(c*c),f=new Array(c),h=0;a=Float64Array.from({length:c*c},e?(t,e)=>a[e%c][e/c|0]:(t,e)=>a[e/c|0][e%c]);for(let e=0;e<c;++e){let n=0;for(let i=0;i<c;++i)n+=a[e*c+i]+t*a[i*c+e];h+=s[e]=n}u=(h=Zo(0,Jo-n*c)/h)?n:Jo/c;{let e=0;i&&l.sort(((t,e)=>i(s[t],s[e])));for(const n of l){const i=e;if(t){const t=ea(1+~c,c).filter((t=>t<0?a[~t*c+n]:a[n*c+t]));r&&t.sort(((t,e)=>r(t<0?-a[~t*c+n]:a[n*c+t],e<0?-a[~e*c+n]:a[n*c+e])));for(const i of t)i<0?(d[~i*c+n]||(d[~i*c+n]={source:null,target:null})).target={index:n,startAngle:e,endAngle:e+=a[~i*c+n]*h,value:a[~i*c+n]}:(d[n*c+i]||(d[n*c+i]={source:null,target:null})).source={index:n,startAngle:e,endAngle:e+=a[n*c+i]*h,value:a[n*c+i]};f[n]={index:n,startAngle:i,endAngle:e,value:s[n]}}else{const t=ea(0,c).filter((t=>a[n*c+t]||a[t*c+n]));r&&t.sort(((t,e)=>r(a[n*c+t],a[n*c+e])));for(const i of t){let t;if(n<i?(t=d[n*c+i]||(d[n*c+i]={source:null,target:null}),t.source={index:n,startAngle:e,endAngle:e+=a[n*c+i]*h,value:a[n*c+i]}):(t=d[i*c+n]||(d[i*c+n]={source:null,target:null}),t.target={index:n,startAngle:e,endAngle:e+=a[n*c+i]*h,value:a[n*c+i]},n===i&&(t.source=t.target)),t.source&&t.target&&t.source.value<t.target.value){const e=t.source;t.source=t.target,t.target=e}}f[n]={index:n,startAngle:i,endAngle:e,value:s[n]}}e+=u}}return(d=Object.values(d)).groups=f,o?d.sort(o):d}return a.padAngle=function(t){return arguments.length?(n=Zo(0,t),a):n},a.sortGroups=function(t){return arguments.length?(i=t,a):i},a.sortSubgroups=function(t){return arguments.length?(r=t,a):r},a.sortChords=function(t){return arguments.length?(null==t?o=null:(e=t,o=function(t,n){return e(t.source.value+t.target.value,n.source.value+n.target.value)})._=t,a):o&&o._;var e},a}const aa=Math.PI,ua=2*aa,ca=1e-6,sa=ua-ca;function la(t){this._+=t[0];for(let e=1,n=t.length;e<n;++e)this._+=arguments[e]+t[e]}class da{constructor(t){this._x0=this._y0=this._x1=this._y1=null,this._="",this._append=null==t?la:function(t){let e=Math.floor(t);if(!(e>=0))throw new Error(`invalid digits: ${t}`);if(e>15)return la;const n=10**e;return function(t){this._+=t[0];for(let e=1,i=t.length;e<i;++e)this._+=Math.round(arguments[e]*n)/n+t[e]}}(t)}moveTo(t,e){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._append`Z`)}lineTo(t,e){this._append`L${this._x1=+t},${this._y1=+e}`}quadraticCurveTo(t,e,n,i){this._append`Q${+t},${+e},${this._x1=+n},${this._y1=+i}`}bezierCurveTo(t,e,n,i,r,o){this._append`C${+t},${+e},${+n},${+i},${this._x1=+r},${this._y1=+o}`}arcTo(t,e,n,i,r){if(t=+t,e=+e,n=+n,i=+i,(r=+r)<0)throw new Error(`negative radius: ${r}`);let o=this._x1,a=this._y1,u=n-t,c=i-e,s=o-t,l=a-e,d=s*s+l*l;if(null===this._x1)this._append`M${this._x1=t},${this._y1=e}`;else if(d>ca)if(Math.abs(l*u-c*s)>ca&&r){let f=n-o,h=i-a,v=u*u+c*c,p=f*f+h*h,g=Math.sqrt(v),y=Math.sqrt(d),_=r*Math.tan((aa-Math.acos((v+d-p)/(2*g*y)))/2),b=_/y,m=_/g;Math.abs(b-1)>ca&&this._append`L${t+b*s},${e+b*l}`,this._append`A${r},${r},0,0,${+(l*f>s*h)},${this._x1=t+m*u},${this._y1=e+m*c}`}else this._append`L${this._x1=t},${this._y1=e}`}arc(t,e,n,i,r,o){if(t=+t,e=+e,o=!!o,(n=+n)<0)throw new Error(`negative radius: ${n}`);let a=n*Math.cos(i),u=n*Math.sin(i),c=t+a,s=e+u,l=1^o,d=o?i-r:r-i;null===this._x1?this._append`M${c},${s}`:(Math.abs(this._x1-c)>ca||Math.abs(this._y1-s)>ca)&&this._append`L${c},${s}`,n&&(d<0&&(d=d%ua+ua),d>sa?this._append`A${n},${n},0,1,${l},${t-a},${e-u}A${n},${n},0,1,${l},${this._x1=c},${this._y1=s}`:d>ca&&this._append`A${n},${n},0,${+(d>=aa)},${l},${this._x1=t+n*Math.cos(r)},${this._y1=e+n*Math.sin(r)}`)}rect(t,e,n,i){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}h${n=+n}v${+i}h${-n}Z`}toString(){return this._}}function fa(){return new da}function ha(t=3){return new da(+t)}fa.prototype=da.prototype;var va=Array.prototype.slice;function pa(t){return function(){return t}}function ga(t){return t.source}function ya(t){return t.target}function _a(t){return t.radius}function ba(t){return t.startAngle}function ma(t){return t.endAngle}function wa(){return 0}function xa(){return 10}function Sa(t){var e=ga,n=ya,i=_a,r=_a,o=ba,a=ma,u=wa,c=null;function s(){var s,l=e.apply(this,arguments),d=n.apply(this,arguments),f=u.apply(this,arguments)/2,h=va.call(arguments),v=+i.apply(this,(h[0]=l,h)),p=o.apply(this,h)-Xo,g=a.apply(this,h)-Xo,y=+r.apply(this,(h[0]=d,h)),_=o.apply(this,h)-Xo,b=a.apply(this,h)-Xo;if(c||(c=s=fa()),f>ta&&($o(g-p)>2*f+ta?g>p?(p+=f,g-=f):(p-=f,g+=f):p=g=(p+g)/2,$o(b-_)>2*f+ta?b>_?(_+=f,b-=f):(_-=f,b+=f):_=b=(_+b)/2),c.moveTo(v*qo(p),v*Yo(p)),c.arc(0,0,v,p,g),p!==_||g!==b)if(t){var m=y-+t.apply(this,arguments),w=(_+b)/2;c.quadraticCurveTo(0,0,m*qo(_),m*Yo(_)),c.lineTo(y*qo(w),y*Yo(w)),c.lineTo(m*qo(b),m*Yo(b))}else c.quadraticCurveTo(0,0,y*qo(_),y*Yo(_)),c.arc(0,0,y,_,b);if(c.quadraticCurveTo(0,0,v*qo(p),v*Yo(p)),c.closePath(),s)return c=null,s+""||null}return t&&(s.headRadius=function(e){return arguments.length?(t="function"==typeof e?e:pa(+e),s):t}),s.radius=function(t){return arguments.length?(i=r="function"==typeof t?t:pa(+t),s):i},s.sourceRadius=function(t){return arguments.length?(i="function"==typeof t?t:pa(+t),s):i},s.targetRadius=function(t){return arguments.length?(r="function"==typeof t?t:pa(+t),s):r},s.startAngle=function(t){return arguments.length?(o="function"==typeof t?t:pa(+t),s):o},s.endAngle=function(t){return arguments.length?(a="function"==typeof t?t:pa(+t),s):a},s.padAngle=function(t){return arguments.length?(u="function"==typeof t?t:pa(+t),s):u},s.source=function(t){return arguments.length?(e=t,s):e},s.target=function(t){return arguments.length?(n=t,s):n},s.context=function(t){return arguments.length?(c=null==t?null:t,s):c},s}function Ma(){return Sa()}function Ea(){return Sa(xa)}const ka=Math.PI/180,Ta=180/Math.PI,Na=.96422,Aa=1,Oa=.82521,Ra=4/29,Ca=6/29,Ia=3*Ca*Ca,ja=Ca*Ca*Ca;function Pa(t){if(t instanceof Va)return new Va(t.l,t.a,t.b,t.opacity);if(t instanceof Ha)return $a(t);t instanceof yi||(t=pi(t));var e,n,i=Ga(t.r),r=Ga(t.g),o=Ga(t.b),a=La((.2225045*i+.7168786*r+.0606169*o)/Aa);return i===r&&r===o?e=n=a:(e=La((.4360747*i+.3850649*r+.1430804*o)/Na),n=La((.0139322*i+.0971045*r+.7141733*o)/Oa)),new Va(116*a-16,500*(e-a),200*(a-n),t.opacity)}function za(t,e){return new Va(t,0,0,null==e?1:e)}function Da(t,e,n,i){return 1===arguments.length?Pa(t):new Va(t,e,n,null==i?1:i)}function Va(t,e,n,i){this.l=+t,this.a=+e,this.b=+n,this.opacity=+i}function La(t){return t>ja?Math.pow(t,1/3):t/Ia+Ra}function Ba(t){return t>Ca?t*t*t:Ia*(t-Ra)}function Fa(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Ga(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Ua(t){if(t instanceof Ha)return new Ha(t.h,t.c,t.l,t.opacity);if(t instanceof Va||(t=Pa(t)),0===t.a&&0===t.b)return new Ha(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*Ta;return new Ha(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Ka(t,e,n,i){return 1===arguments.length?Ua(t):new Ha(n,e,t,null==i?1:i)}function Qa(t,e,n,i){return 1===arguments.length?Ua(t):new Ha(t,e,n,null==i?1:i)}function Ha(t,e,n,i){this.h=+t,this.c=+e,this.l=+n,this.opacity=+i}function $a(t){if(isNaN(t.h))return new Va(t.l,0,0,t.opacity);var e=t.h*ka;return new Va(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}qn(Va,Da,Yn(Wn,{brighter(t){return new Va(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker(t){return new Va(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new yi(Fa(3.1338561*(e=Na*Ba(e))-1.6168667*(t=Aa*Ba(t))-.4906146*(n=Oa*Ba(n))),Fa(-.9787684*e+1.9161415*t+.033454*n),Fa(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),qn(Ha,Qa,Yn(Wn,{brighter(t){return new Ha(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker(t){return new Ha(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb(){return $a(this).rgb()}}));var qa=-.14861,Ya=1.78277,Wa=-.29227,Xa=-.90649,Ja=1.97294,Za=Ja*Xa,tu=Ja*Ya,eu=Ya*Wa-Xa*qa;function nu(t,e,n,i){return 1===arguments.length?function(t){if(t instanceof iu)return new iu(t.h,t.s,t.l,t.opacity);t instanceof yi||(t=pi(t));var e=t.r/255,n=t.g/255,i=t.b/255,r=(eu*i+Za*e-tu*n)/(eu+Za-tu),o=i-r,a=(Ja*(n-r)-Wa*o)/Xa,u=Math.sqrt(a*a+o*o)/(Ja*r*(1-r)),c=u?Math.atan2(a,o)*Ta-120:NaN;return new iu(c<0?c+360:c,u,r,t.opacity)}(t):new iu(t,e,n,null==i?1:i)}function iu(t,e,n,i){this.h=+t,this.s=+e,this.l=+n,this.opacity=+i}qn(iu,nu,Yn(Wn,{brighter(t){return t=null==t?Jn:Math.pow(Jn,t),new iu(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?Xn:Math.pow(Xn,t),new iu(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=isNaN(this.h)?0:(this.h+120)*ka,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),i=Math.cos(t),r=Math.sin(t);return new yi(255*(e+n*(qa*i+Ya*r)),255*(e+n*(Wa*i+Xa*r)),255*(e+n*(Ja*i)),this.opacity)}}));var ru=Array.prototype.slice;function ou(t,e){return t-e}const au=t=>()=>t;function uu(t,e){for(var n,i=-1,r=e.length;++i<r;)if(n=cu(t,e[i]))return n;return 0}function cu(t,e){for(var n=e[0],i=e[1],r=-1,o=0,a=t.length,u=a-1;o<a;u=o++){var c=t[o],s=c[0],l=c[1],d=t[u],f=d[0],h=d[1];if(su(c,d,e))return 0;l>i!=h>i&&n<(f-s)*(i-l)/(h-l)+s&&(r=-r)}return r}function su(t,e,n){var i,r,o,a;return function(t,e,n){return(e[0]-t[0])*(n[1]-t[1])==(n[0]-t[0])*(e[1]-t[1])}(t,e,n)&&(r=t[i=+(t[0]===e[0])],o=n[i],a=e[i],r<=o&&o<=a||a<=o&&o<=r)}function lu(){}var du=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]];function fu(){var t=1,e=1,n=ft,i=u;function r(t){var e=n(t);if(Array.isArray(e))e=e.slice().sort(ou);else{const n=N(t,hu);for(e=ct(...dt(n[0],n[1],e),e);e[e.length-1]>=n[1];)e.pop();for(;e[1]<n[0];)e.shift()}return e.map((e=>o(t,e)))}function o(n,r){const o=null==r?NaN:+r;if(isNaN(o))throw new Error(`invalid value: ${r}`);var u=[],c=[];return function(n,i,r){var o,u,c,s,l,d,f=new Array,h=new Array;for(o=u=-1,s=vu(n[0],i),du[s<<1].forEach(v);++o<t-1;)c=s,s=vu(n[o+1],i),du[c|s<<1].forEach(v);for(du[s<<0].forEach(v);++u<e-1;){for(o=-1,s=vu(n[u*t+t],i),l=vu(n[u*t],i),du[s<<1|l<<2].forEach(v);++o<t-1;)c=s,s=vu(n[u*t+t+o+1],i),d=l,l=vu(n[u*t+o+1],i),du[c|s<<1|l<<2|d<<3].forEach(v);du[s|l<<3].forEach(v)}for(o=-1,l=n[u*t]>=i,du[l<<2].forEach(v);++o<t-1;)d=l,l=vu(n[u*t+o+1],i),du[l<<2|d<<3].forEach(v);function v(t){var e,n,i=[t[0][0]+o,t[0][1]+u],c=[t[1][0]+o,t[1][1]+u],s=a(i),l=a(c);(e=h[s])?(n=f[l])?(delete h[e.end],delete f[n.start],e===n?(e.ring.push(c),r(e.ring)):f[e.start]=h[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete h[e.end],e.ring.push(c),h[e.end=l]=e):(e=f[l])?(n=h[s])?(delete f[e.start],delete h[n.end],e===n?(e.ring.push(c),r(e.ring)):f[n.start]=h[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete f[e.start],e.ring.unshift(i),f[e.start=s]=e):f[s]=h[l]={start:s,end:l,ring:[i,c]}}du[l<<3].forEach(v)}(n,o,(function(t){i(t,n,o),function(t){for(var e=0,n=t.length,i=t[n-1][1]*t[0][0]-t[n-1][0]*t[0][1];++e<n;)i+=t[e-1][1]*t[e][0]-t[e-1][0]*t[e][1];return i}(t)>0?u.push([t]):c.push(t)})),c.forEach((function(t){for(var e,n=0,i=u.length;n<i;++n)if(-1!==uu((e=u[n])[0],t))return void e.push(t)})),{type:"MultiPolygon",value:r,coordinates:u}}function a(e){return 2*e[0]+e[1]*(t+1)*4}function u(n,i,r){n.forEach((function(n){var o=n[0],a=n[1],u=0|o,c=0|a,s=pu(i[c*t+u]);o>0&&o<t&&u===o&&(n[0]=gu(o,pu(i[c*t+u-1]),s,r)),a>0&&a<e&&c===a&&(n[1]=gu(a,pu(i[(c-1)*t+u]),s,r))}))}return r.contour=o,r.size=function(n){if(!arguments.length)return[t,e];var i=Math.floor(n[0]),o=Math.floor(n[1]);if(!(i>=0&&o>=0))throw new Error("invalid size");return t=i,e=o,r},r.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:Array.isArray(t)?au(ru.call(t)):au(t),r):n},r.smooth=function(t){return arguments.length?(i=t?u:lu,r):i===u},r}function hu(t){return isFinite(t)?t:NaN}function vu(t,e){return null!=t&&+t>=e}function pu(t){return null==t||isNaN(t=+t)?-1/0:t}function gu(t,e,n,i){const r=i-e,o=n-e,a=isFinite(r)||isFinite(o)?r/o:Math.sign(r)/Math.sign(o);return isNaN(a)?t:t+a-.5}function yu(t){return t[0]}function _u(t){return t[1]}function bu(){return 1}function mu(){var t=yu,e=_u,n=bu,i=960,r=500,o=20,a=2,u=3*o,c=i+2*u>>a,s=r+2*u>>a,l=au(20);function d(i){var r=new Float32Array(c*s),l=Math.pow(2,-a),d=-1;for(const o of i){var f=(t(o,++d,i)+u)*l,h=(e(o,d,i)+u)*l,p=+n(o,d,i);if(p&&f>=0&&f<c&&h>=0&&h<s){var g=Math.floor(f),y=Math.floor(h),_=f-g-.5,b=h-y-.5;r[g+y*c]+=(1-_)*(1-b)*p,r[g+1+y*c]+=_*(1-b)*p,r[g+1+(y+1)*c]+=_*b*p,r[g+(y+1)*c]+=(1-_)*b*p}}return v({data:r,width:c,height:s},o*l),r}function f(t){var e=d(t),n=l(e),i=Math.pow(2,2*a);return Array.isArray(n)||(n=ct(Number.MIN_VALUE,vt(e)/i,n)),fu().size([c,s]).thresholds(n.map((t=>t*i)))(e).map(((t,e)=>(t.value=+n[e],h(t))))}function h(t){return t.coordinates.forEach(p),t}function p(t){t.forEach(g)}function g(t){t.forEach(y)}function y(t){t[0]=t[0]*Math.pow(2,a)-u,t[1]=t[1]*Math.pow(2,a)-u}function _(){return c=i+2*(u=3*o)>>a,s=r+2*u>>a,f}return f.contours=function(t){var e=d(t),n=fu().size([c,s]),i=Math.pow(2,2*a),r=t=>{t=+t;var r=h(n.contour(e,t*i));return r.value=t,r};return Object.defineProperty(r,"max",{get:()=>vt(e)/i}),r},f.x=function(e){return arguments.length?(t="function"==typeof e?e:au(+e),f):t},f.y=function(t){return arguments.length?(e="function"==typeof t?t:au(+t),f):e},f.weight=function(t){return arguments.length?(n="function"==typeof t?t:au(+t),f):n},f.size=function(t){if(!arguments.length)return[i,r];var e=+t[0],n=+t[1];if(!(e>=0&&n>=0))throw new Error("invalid size");return i=e,r=n,_()},f.cellSize=function(t){if(!arguments.length)return 1<<a;if(!((t=+t)>=1))throw new Error("invalid cell size");return a=Math.floor(Math.log(t)/Math.LN2),_()},f.thresholds=function(t){return arguments.length?(l="function"==typeof t?t:Array.isArray(t)?au(ru.call(t)):au(t),f):l},f.bandwidth=function(t){if(!arguments.length)return Math.sqrt(o*(o+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return o=(Math.sqrt(4*t*t+1)-1)/2,_()},f}const wu=134217729;function xu(t,e,n,i,r){let o,a,u,c,s=e[0],l=i[0],d=0,f=0;l>s==l>-s?(o=s,s=e[++d]):(o=l,l=i[++f]);let h=0;if(d<t&&f<n)for(l>s==l>-s?(a=s+o,u=o-(a-s),s=e[++d]):(a=l+o,u=o-(a-l),l=i[++f]),o=a,0!==u&&(r[h++]=u);d<t&&f<n;)l>s==l>-s?(a=o+s,c=a-o,u=o-(a-c)+(s-c),s=e[++d]):(a=o+l,c=a-o,u=o-(a-c)+(l-c),l=i[++f]),o=a,0!==u&&(r[h++]=u);for(;d<t;)a=o+s,c=a-o,u=o-(a-c)+(s-c),s=e[++d],o=a,0!==u&&(r[h++]=u);for(;f<n;)a=o+l,c=a-o,u=o-(a-c)+(l-c),l=i[++f],o=a,0!==u&&(r[h++]=u);return 0===o&&0!==h||(r[h++]=o),h}function Su(t){return new Float64Array(t)}const Mu=Su(4),Eu=Su(8),ku=Su(12),Tu=Su(16),Nu=Su(4);function Au(t,e,n,i,r,o){const a=(e-o)*(n-r),u=(t-r)*(i-o),c=a-u,s=Math.abs(a+u);return Math.abs(c)>=33306690738754716e-32*s?c:-function(t,e,n,i,r,o,a){let u,c,s,l,d,f,h,v,p,g,y,_,b,m,w,x,S,M;const E=t-r,k=n-r,T=e-o,N=i-o;m=E*N,f=wu*E,h=f-(f-E),v=E-h,f=wu*N,p=f-(f-N),g=N-p,w=v*g-(m-h*p-v*p-h*g),x=T*k,f=wu*T,h=f-(f-T),v=T-h,f=wu*k,p=f-(f-k),g=k-p,S=v*g-(x-h*p-v*p-h*g),y=w-S,d=w-y,Mu[0]=w-(y+d)+(d-S),_=m+y,d=_-m,b=m-(_-d)+(y-d),y=b-x,d=b-y,Mu[1]=b-(y+d)+(d-x),M=_+y,d=M-_,Mu[2]=_-(M-d)+(y-d),Mu[3]=M;let A=function(t,e){let n=e[0];for(let t=1;t<4;t++)n+=e[t];return n}(0,Mu),O=22204460492503146e-32*a;if(A>=O||-A>=O)return A;if(d=t-E,u=t-(E+d)+(d-r),d=n-k,s=n-(k+d)+(d-r),d=e-T,c=e-(T+d)+(d-o),d=i-N,l=i-(N+d)+(d-o),0===u&&0===c&&0===s&&0===l)return A;if(O=11093356479670487e-47*a+33306690738754706e-32*Math.abs(A),A+=E*l+N*u-(T*s+k*c),A>=O||-A>=O)return A;m=u*N,f=wu*u,h=f-(f-u),v=u-h,f=wu*N,p=f-(f-N),g=N-p,w=v*g-(m-h*p-v*p-h*g),x=c*k,f=wu*c,h=f-(f-c),v=c-h,f=wu*k,p=f-(f-k),g=k-p,S=v*g-(x-h*p-v*p-h*g),y=w-S,d=w-y,Nu[0]=w-(y+d)+(d-S),_=m+y,d=_-m,b=m-(_-d)+(y-d),y=b-x,d=b-y,Nu[1]=b-(y+d)+(d-x),M=_+y,d=M-_,Nu[2]=_-(M-d)+(y-d),Nu[3]=M;const R=xu(4,Mu,4,Nu,Eu);m=E*l,f=wu*E,h=f-(f-E),v=E-h,f=wu*l,p=f-(f-l),g=l-p,w=v*g-(m-h*p-v*p-h*g),x=T*s,f=wu*T,h=f-(f-T),v=T-h,f=wu*s,p=f-(f-s),g=s-p,S=v*g-(x-h*p-v*p-h*g),y=w-S,d=w-y,Nu[0]=w-(y+d)+(d-S),_=m+y,d=_-m,b=m-(_-d)+(y-d),y=b-x,d=b-y,Nu[1]=b-(y+d)+(d-x),M=_+y,d=M-_,Nu[2]=_-(M-d)+(y-d),Nu[3]=M;const C=xu(R,Eu,4,Nu,ku);m=u*l,f=wu*u,h=f-(f-u),v=u-h,f=wu*l,p=f-(f-l),g=l-p,w=v*g-(m-h*p-v*p-h*g),x=c*s,f=wu*c,h=f-(f-c),v=c-h,f=wu*s,p=f-(f-s),g=s-p,S=v*g-(x-h*p-v*p-h*g),y=w-S,d=w-y,Nu[0]=w-(y+d)+(d-S),_=m+y,d=_-m,b=m-(_-d)+(y-d),y=b-x,d=b-y,Nu[1]=b-(y+d)+(d-x),M=_+y,d=M-_,Nu[2]=_-(M-d)+(y-d),Nu[3]=M;const I=xu(C,ku,4,Nu,Tu);return Tu[I-1]}(t,e,n,i,r,o,s)}Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(8),Su(8),Su(8),Su(4),Su(8),Su(8),Su(8),Su(12),Su(192),Su(192),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(8),Su(8),Su(8),Su(8),Su(8),Su(8),Su(8),Su(8),Su(8),Su(4),Su(4),Su(4),Su(8),Su(16),Su(16),Su(16),Su(32),Su(32),Su(48),Su(64),Su(1152),Su(1152),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(24),Su(24),Su(24),Su(24),Su(24),Su(24),Su(24),Su(24),Su(24),Su(24),Su(1152),Su(1152),Su(1152),Su(1152),Su(1152),Su(2304),Su(2304),Su(3456),Su(5760),Su(8),Su(8),Su(8),Su(16),Su(24),Su(48),Su(48),Su(96),Su(192),Su(384),Su(384),Su(384),Su(768),Su(96),Su(96),Su(96),Su(1152);const Ou=Math.pow(2,-52),Ru=new Uint32Array(512);class Cu{static from(t,e=Vu,n=Lu){const i=t.length,r=new Float64Array(2*i);for(let o=0;o<i;o++){const i=t[o];r[2*o]=e(i),r[2*o+1]=n(i)}return new Cu(r)}constructor(t){const e=t.length>>1;if(e>0&&"number"!=typeof t[0])throw new Error("Expected coords to contain numbers.");this.coords=t;const n=Math.max(2*e-5,0);this._triangles=new Uint32Array(3*n),this._halfedges=new Int32Array(3*n),this._hashSize=Math.ceil(Math.sqrt(e)),this._hullPrev=new Uint32Array(e),this._hullNext=new Uint32Array(e),this._hullTri=new Uint32Array(e),this._hullHash=new Int32Array(this._hashSize),this._ids=new Uint32Array(e),this._dists=new Float64Array(e),this.update()}update(){const{coords:t,_hullPrev:e,_hullNext:n,_hullTri:i,_hullHash:r}=this,o=t.length>>1;let a=1/0,u=1/0,c=-1/0,s=-1/0;for(let e=0;e<o;e++){const n=t[2*e],i=t[2*e+1];n<a&&(a=n),i<u&&(u=i),n>c&&(c=n),i>s&&(s=i),this._ids[e]=e}const l=(a+c)/2,d=(u+s)/2;let f,h,v;for(let e=0,n=1/0;e<o;e++){const i=Iu(l,d,t[2*e],t[2*e+1]);i<n&&(f=e,n=i)}const p=t[2*f],g=t[2*f+1];for(let e=0,n=1/0;e<o;e++){if(e===f)continue;const i=Iu(p,g,t[2*e],t[2*e+1]);i<n&&i>0&&(h=e,n=i)}let y=t[2*h],_=t[2*h+1],b=1/0;for(let e=0;e<o;e++){if(e===f||e===h)continue;const n=Pu(p,g,y,_,t[2*e],t[2*e+1]);n<b&&(v=e,b=n)}let m=t[2*v],w=t[2*v+1];if(b===1/0){for(let e=0;e<o;e++)this._dists[e]=t[2*e]-t[0]||t[2*e+1]-t[1];zu(this._ids,this._dists,0,o-1);const e=new Uint32Array(o);let n=0;for(let t=0,i=-1/0;t<o;t++){const r=this._ids[t],o=this._dists[r];o>i&&(e[n++]=r,i=o)}return this.hull=e.subarray(0,n),this.triangles=new Uint32Array(0),void(this.halfedges=new Uint32Array(0))}if(Au(p,g,y,_,m,w)<0){const t=h,e=y,n=_;h=v,y=m,_=w,v=t,m=e,w=n}const x=function(t,e,n,i,r,o){const a=n-t,u=i-e,c=r-t,s=o-e,l=a*a+u*u,d=c*c+s*s,f=.5/(a*s-u*c);return{x:t+(s*l-u*d)*f,y:e+(a*d-c*l)*f}}(p,g,y,_,m,w);this._cx=x.x,this._cy=x.y;for(let e=0;e<o;e++)this._dists[e]=Iu(t[2*e],t[2*e+1],x.x,x.y);zu(this._ids,this._dists,0,o-1),this._hullStart=f;let S=3;n[f]=e[v]=h,n[h]=e[f]=v,n[v]=e[h]=f,i[f]=0,i[h]=1,i[v]=2,r.fill(-1),r[this._hashKey(p,g)]=f,r[this._hashKey(y,_)]=h,r[this._hashKey(m,w)]=v,this.trianglesLen=0,this._addTriangle(f,h,v,-1,-1,-1);for(let o,a,u=0;u<this._ids.length;u++){const c=this._ids[u],s=t[2*c],l=t[2*c+1];if(u>0&&Math.abs(s-o)<=Ou&&Math.abs(l-a)<=Ou)continue;if(o=s,a=l,c===f||c===h||c===v)continue;let d=0;for(let t=0,e=this._hashKey(s,l);t<this._hashSize&&(d=r[(e+t)%this._hashSize],-1===d||d===n[d]);t++);d=e[d];let p,g=d;for(;p=n[g],Au(s,l,t[2*g],t[2*g+1],t[2*p],t[2*p+1])>=0;)if(g=p,g===d){g=-1;break}if(-1===g)continue;let y=this._addTriangle(g,c,n[g],-1,-1,i[g]);i[c]=this._legalize(y+2),i[g]=y,S++;let _=n[g];for(;p=n[_],Au(s,l,t[2*_],t[2*_+1],t[2*p],t[2*p+1])<0;)y=this._addTriangle(_,c,p,i[c],-1,i[_]),i[c]=this._legalize(y+2),n[_]=_,S--,_=p;if(g===d)for(;p=e[g],Au(s,l,t[2*p],t[2*p+1],t[2*g],t[2*g+1])<0;)y=this._addTriangle(p,c,g,-1,i[g],i[p]),this._legalize(y+2),i[p]=y,n[g]=g,S--,g=p;this._hullStart=e[c]=g,n[g]=e[_]=c,n[c]=_,r[this._hashKey(s,l)]=c,r[this._hashKey(t[2*g],t[2*g+1])]=g}this.hull=new Uint32Array(S);for(let t=0,e=this._hullStart;t<S;t++)this.hull[t]=e,e=n[e];this.triangles=this._triangles.subarray(0,this.trianglesLen),this.halfedges=this._halfedges.subarray(0,this.trianglesLen)}_hashKey(t,e){return Math.floor(function(t,e){const n=t/(Math.abs(t)+Math.abs(e));return(e>0?3-n:1+n)/4}(t-this._cx,e-this._cy)*this._hashSize)%this._hashSize}_legalize(t){const{_triangles:e,_halfedges:n,coords:i}=this;let r=0,o=0;for(;;){const a=n[t],u=t-t%3;if(o=u+(t+2)%3,-1===a){if(0===r)break;t=Ru[--r];continue}const c=a-a%3,s=u+(t+1)%3,l=c+(a+2)%3,d=e[o],f=e[t],h=e[s],v=e[l];if(ju(i[2*d],i[2*d+1],i[2*f],i[2*f+1],i[2*h],i[2*h+1],i[2*v],i[2*v+1])){e[t]=v,e[a]=d;const i=n[l];if(-1===i){let e=this._hullStart;do{if(this._hullTri[e]===l){this._hullTri[e]=t;break}e=this._hullPrev[e]}while(e!==this._hullStart)}this._link(t,i),this._link(a,n[o]),this._link(o,l);const u=c+(a+1)%3;r<Ru.length&&(Ru[r++]=u)}else{if(0===r)break;t=Ru[--r]}}return o}_link(t,e){this._halfedges[t]=e,-1!==e&&(this._halfedges[e]=t)}_addTriangle(t,e,n,i,r,o){const a=this.trianglesLen;return this._triangles[a]=t,this._triangles[a+1]=e,this._triangles[a+2]=n,this._link(a,i),this._link(a+1,r),this._link(a+2,o),this.trianglesLen+=3,a}}function Iu(t,e,n,i){const r=t-n,o=e-i;return r*r+o*o}function ju(t,e,n,i,r,o,a,u){const c=t-a,s=e-u,l=n-a,d=i-u,f=r-a,h=o-u,v=l*l+d*d,p=f*f+h*h;return c*(d*p-v*h)-s*(l*p-v*f)+(c*c+s*s)*(l*h-d*f)<0}function Pu(t,e,n,i,r,o){const a=n-t,u=i-e,c=r-t,s=o-e,l=a*a+u*u,d=c*c+s*s,f=.5/(a*s-u*c),h=(s*l-u*d)*f,v=(a*d-c*l)*f;return h*h+v*v}function zu(t,e,n,i){if(i-n<=20)for(let r=n+1;r<=i;r++){const i=t[r],o=e[i];let a=r-1;for(;a>=n&&e[t[a]]>o;)t[a+1]=t[a--];t[a+1]=i}else{let r=n+1,o=i;Du(t,n+i>>1,r),e[t[n]]>e[t[i]]&&Du(t,n,i),e[t[r]]>e[t[i]]&&Du(t,r,i),e[t[n]]>e[t[r]]&&Du(t,n,r);const a=t[r],u=e[a];for(;;){do{r++}while(e[t[r]]<u);do{o--}while(e[t[o]]>u);if(o<r)break;Du(t,r,o)}t[n+1]=t[o],t[o]=a,i-r+1>=o-n?(zu(t,e,r,i),zu(t,e,n,o-1)):(zu(t,e,n,o-1),zu(t,e,r,i))}}function Du(t,e,n){const i=t[e];t[e]=t[n],t[n]=i}function Vu(t){return t[0]}function Lu(t){return t[1]}const Bu=1e-6;class Fu{constructor(){this._x0=this._y0=this._x1=this._y1=null,this._=""}moveTo(t,e){this._+=`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")}lineTo(t,e){this._+=`L${this._x1=+t},${this._y1=+e}`}arc(t,e,n){const i=(t=+t)+(n=+n),r=e=+e;if(n<0)throw new Error("negative radius");null===this._x1?this._+=`M${i},${r}`:(Math.abs(this._x1-i)>Bu||Math.abs(this._y1-r)>Bu)&&(this._+="L"+i+","+r),n&&(this._+=`A${n},${n},0,1,1,${t-n},${e}A${n},${n},0,1,1,${this._x1=i},${this._y1=r}`)}rect(t,e,n,i){this._+=`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}h${+n}v${+i}h${-n}Z`}value(){return this._||null}}class Gu{constructor(){this._=[]}moveTo(t,e){this._.push([t,e])}closePath(){this._.push(this._[0].slice())}lineTo(t,e){this._.push([t,e])}value(){return this._.length?this._:null}}class Uu{constructor(t,[e,n,i,r]=[0,0,960,500]){if(!((i=+i)>=(e=+e)&&(r=+r)>=(n=+n)))throw new Error("invalid bounds");this.delaunay=t,this._circumcenters=new Float64Array(2*t.points.length),this.vectors=new Float64Array(2*t.points.length),this.xmax=i,this.xmin=e,this.ymax=r,this.ymin=n,this._init()}update(){return this.delaunay.update(),this._init(),this}_init(){const{delaunay:{points:t,hull:e,triangles:n},vectors:i}=this;let r,o;const a=this.circumcenters=this._circumcenters.subarray(0,n.length/3*2);for(let i,u,c=0,s=0,l=n.length;c<l;c+=3,s+=2){const l=2*n[c],d=2*n[c+1],f=2*n[c+2],h=t[l],v=t[l+1],p=t[d],g=t[d+1],y=t[f],_=t[f+1],b=p-h,m=g-v,w=y-h,x=_-v,S=2*(b*x-m*w);if(Math.abs(S)<1e-9){if(void 0===r){r=o=0;for(const n of e)r+=t[2*n],o+=t[2*n+1];r/=e.length,o/=e.length}const n=1e9*Math.sign((r-h)*x-(o-v)*w);i=(h+y)/2-n*x,u=(v+_)/2+n*w}else{const t=1/S,e=b*b+m*m,n=w*w+x*x;i=h+(x*e-m*n)*t,u=v+(b*n-w*e)*t}a[s]=i,a[s+1]=u}let u,c,s,l=e[e.length-1],d=4*l,f=t[2*l],h=t[2*l+1];i.fill(0);for(let n=0;n<e.length;++n)l=e[n],u=d,c=f,s=h,d=4*l,f=t[2*l],h=t[2*l+1],i[u+2]=i[d]=s-h,i[u+3]=i[d+1]=f-c}render(t){const e=null==t?t=new Fu:void 0,{delaunay:{halfedges:n,inedges:i,hull:r},circumcenters:o,vectors:a}=this;if(r.length<=1)return null;for(let e=0,i=n.length;e<i;++e){const i=n[e];if(i<e)continue;const r=2*Math.floor(e/3),a=2*Math.floor(i/3),u=o[r],c=o[r+1],s=o[a],l=o[a+1];this._renderSegment(u,c,s,l,t)}let u,c=r[r.length-1];for(let e=0;e<r.length;++e){u=c,c=r[e];const n=2*Math.floor(i[c]/3),s=o[n],l=o[n+1],d=4*u,f=this._project(s,l,a[d+2],a[d+3]);f&&this._renderSegment(s,l,f[0],f[1],t)}return e&&e.value()}renderBounds(t){const e=null==t?t=new Fu:void 0;return t.rect(this.xmin,this.ymin,this.xmax-this.xmin,this.ymax-this.ymin),e&&e.value()}renderCell(t,e){const n=null==e?e=new Fu:void 0,i=this._clip(t);if(null===i||!i.length)return;e.moveTo(i[0],i[1]);let r=i.length;for(;i[0]===i[r-2]&&i[1]===i[r-1]&&r>1;)r-=2;for(let t=2;t<r;t+=2)i[t]===i[t-2]&&i[t+1]===i[t-1]||e.lineTo(i[t],i[t+1]);return e.closePath(),n&&n.value()}*cellPolygons(){const{delaunay:{points:t}}=this;for(let e=0,n=t.length/2;e<n;++e){const t=this.cellPolygon(e);t&&(t.index=e,yield t)}}cellPolygon(t){const e=new Gu;return this.renderCell(t,e),e.value()}_renderSegment(t,e,n,i,r){let o;const a=this._regioncode(t,e),u=this._regioncode(n,i);0===a&&0===u?(r.moveTo(t,e),r.lineTo(n,i)):(o=this._clipSegment(t,e,n,i,a,u))&&(r.moveTo(o[0],o[1]),r.lineTo(o[2],o[3]))}contains(t,e,n){return(e=+e)==e&&(n=+n)==n&&this.delaunay._step(t,e,n)===t}*neighbors(t){const e=this._clip(t);if(e)for(const n of this.delaunay.neighbors(t)){const t=this._clip(n);if(t)t:for(let i=0,r=e.length;i<r;i+=2)for(let o=0,a=t.length;o<a;o+=2)if(e[i]===t[o]&&e[i+1]===t[o+1]&&e[(i+2)%r]===t[(o+a-2)%a]&&e[(i+3)%r]===t[(o+a-1)%a]){yield n;break t}}}_cell(t){const{circumcenters:e,delaunay:{inedges:n,halfedges:i,triangles:r}}=this,o=n[t];if(-1===o)return null;const a=[];let u=o;do{const n=Math.floor(u/3);if(a.push(e[2*n],e[2*n+1]),u=u%3==2?u-2:u+1,r[u]!==t)break;u=i[u]}while(u!==o&&-1!==u);return a}_clip(t){if(0===t&&1===this.delaunay.hull.length)return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];const e=this._cell(t);if(null===e)return null;const{vectors:n}=this,i=4*t;return this._simplify(n[i]||n[i+1]?this._clipInfinite(t,e,n[i],n[i+1],n[i+2],n[i+3]):this._clipFinite(t,e))}_clipFinite(t,e){const n=e.length;let i,r,o,a,u=null,c=e[n-2],s=e[n-1],l=this._regioncode(c,s),d=0;for(let f=0;f<n;f+=2)if(i=c,r=s,c=e[f],s=e[f+1],o=l,l=this._regioncode(c,s),0===o&&0===l)a=d,d=0,u?u.push(c,s):u=[c,s];else{let e,n,f,h,v;if(0===o){if(null===(e=this._clipSegment(i,r,c,s,o,l)))continue;[n,f,h,v]=e}else{if(null===(e=this._clipSegment(c,s,i,r,l,o)))continue;[h,v,n,f]=e,a=d,d=this._edgecode(n,f),a&&d&&this._edge(t,a,d,u,u.length),u?u.push(n,f):u=[n,f]}a=d,d=this._edgecode(h,v),a&&d&&this._edge(t,a,d,u,u.length),u?u.push(h,v):u=[h,v]}if(u)a=d,d=this._edgecode(u[0],u[1]),a&&d&&this._edge(t,a,d,u,u.length);else if(this.contains(t,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2))return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];return u}_clipSegment(t,e,n,i,r,o){const a=r<o;for(a&&([t,e,n,i,r,o]=[n,i,t,e,o,r]);;){if(0===r&&0===o)return a?[n,i,t,e]:[t,e,n,i];if(r&o)return null;let u,c,s=r||o;8&s?(u=t+(n-t)*(this.ymax-e)/(i-e),c=this.ymax):4&s?(u=t+(n-t)*(this.ymin-e)/(i-e),c=this.ymin):2&s?(c=e+(i-e)*(this.xmax-t)/(n-t),u=this.xmax):(c=e+(i-e)*(this.xmin-t)/(n-t),u=this.xmin),r?(t=u,e=c,r=this._regioncode(t,e)):(n=u,i=c,o=this._regioncode(n,i))}}_clipInfinite(t,e,n,i,r,o){let a,u=Array.from(e);if((a=this._project(u[0],u[1],n,i))&&u.unshift(a[0],a[1]),(a=this._project(u[u.length-2],u[u.length-1],r,o))&&u.push(a[0],a[1]),u=this._clipFinite(t,u))for(let e,n=0,i=u.length,r=this._edgecode(u[i-2],u[i-1]);n<i;n+=2)e=r,r=this._edgecode(u[n],u[n+1]),e&&r&&(n=this._edge(t,e,r,u,n),i=u.length);else this.contains(t,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2)&&(u=[this.xmin,this.ymin,this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax]);return u}_edge(t,e,n,i,r){for(;e!==n;){let n,o;switch(e){case 5:e=4;continue;case 4:e=6,n=this.xmax,o=this.ymin;break;case 6:e=2;continue;case 2:e=10,n=this.xmax,o=this.ymax;break;case 10:e=8;continue;case 8:e=9,n=this.xmin,o=this.ymax;break;case 9:e=1;continue;case 1:e=5,n=this.xmin,o=this.ymin}i[r]===n&&i[r+1]===o||!this.contains(t,n,o)||(i.splice(r,0,n,o),r+=2)}return r}_project(t,e,n,i){let r,o,a,u=1/0;if(i<0){if(e<=this.ymin)return null;(r=(this.ymin-e)/i)<u&&(a=this.ymin,o=t+(u=r)*n)}else if(i>0){if(e>=this.ymax)return null;(r=(this.ymax-e)/i)<u&&(a=this.ymax,o=t+(u=r)*n)}if(n>0){if(t>=this.xmax)return null;(r=(this.xmax-t)/n)<u&&(o=this.xmax,a=e+(u=r)*i)}else if(n<0){if(t<=this.xmin)return null;(r=(this.xmin-t)/n)<u&&(o=this.xmin,a=e+(u=r)*i)}return[o,a]}_edgecode(t,e){return(t===this.xmin?1:t===this.xmax?2:0)|(e===this.ymin?4:e===this.ymax?8:0)}_regioncode(t,e){return(t<this.xmin?1:t>this.xmax?2:0)|(e<this.ymin?4:e>this.ymax?8:0)}_simplify(t){if(t&&t.length>4){for(let e=0;e<t.length;e+=2){const n=(e+2)%t.length,i=(e+4)%t.length;(t[e]===t[n]&&t[n]===t[i]||t[e+1]===t[n+1]&&t[n+1]===t[i+1])&&(t.splice(n,2),e-=2)}t.length||(t=null)}return t}}const Ku=2*Math.PI,Qu=Math.pow;function Hu(t){return t[0]}function $u(t){return t[1]}function qu(t,e,n){return[t+Math.sin(t+e)*n,e+Math.cos(t-e)*n]}class Yu{static from(t,e=Hu,n=$u,i){return new Yu("length"in t?function(t,e,n,i){const r=t.length,o=new Float64Array(2*r);for(let a=0;a<r;++a){const r=t[a];o[2*a]=e.call(i,r,a,t),o[2*a+1]=n.call(i,r,a,t)}return o}(t,e,n,i):Float64Array.from(function*(t,e,n,i){let r=0;for(const o of t)yield e.call(i,o,r,t),yield n.call(i,o,r,t),++r}(t,e,n,i)))}constructor(t){this._delaunator=new Cu(t),this.inedges=new Int32Array(t.length/2),this._hullIndex=new Int32Array(t.length/2),this.points=this._delaunator.coords,this._init()}update(){return this._delaunator.update(),this._init(),this}_init(){const t=this._delaunator,e=this.points;if(t.hull&&t.hull.length>2&&function(t){const{triangles:e,coords:n}=t;for(let t=0;t<e.length;t+=3){const i=2*e[t],r=2*e[t+1],o=2*e[t+2];if((n[o]-n[i])*(n[r+1]-n[i+1])-(n[r]-n[i])*(n[o+1]-n[i+1])>1e-10)return!1}return!0}(t)){this.collinear=Int32Array.from({length:e.length/2},((t,e)=>e)).sort(((t,n)=>e[2*t]-e[2*n]||e[2*t+1]-e[2*n+1]));const t=this.collinear[0],n=this.collinear[this.collinear.length-1],i=[e[2*t],e[2*t+1],e[2*n],e[2*n+1]],r=1e-8*Math.hypot(i[3]-i[1],i[2]-i[0]);for(let t=0,n=e.length/2;t<n;++t){const n=qu(e[2*t],e[2*t+1],r);e[2*t]=n[0],e[2*t+1]=n[1]}this._delaunator=new Cu(e)}else delete this.collinear;const n=this.halfedges=this._delaunator.halfedges,i=this.hull=this._delaunator.hull,r=this.triangles=this._delaunator.triangles,o=this.inedges.fill(-1),a=this._hullIndex.fill(-1);for(let t=0,e=n.length;t<e;++t){const e=r[t%3==2?t-2:t+1];-1!==n[t]&&-1!==o[e]||(o[e]=t)}for(let t=0,e=i.length;t<e;++t)a[i[t]]=t;i.length<=2&&i.length>0&&(this.triangles=new Int32Array(3).fill(-1),this.halfedges=new Int32Array(3).fill(-1),this.triangles[0]=i[0],o[i[0]]=1,2===i.length&&(o[i[1]]=0,this.triangles[1]=i[1],this.triangles[2]=i[1]))}voronoi(t){return new Uu(this,t)}*neighbors(t){const{inedges:e,hull:n,_hullIndex:i,halfedges:r,triangles:o,collinear:a}=this;if(a){const e=a.indexOf(t);return e>0&&(yield a[e-1]),void(e<a.length-1&&(yield a[e+1]))}const u=e[t];if(-1===u)return;let c=u,s=-1;do{if(yield s=o[c],c=c%3==2?c-2:c+1,o[c]!==t)return;if(c=r[c],-1===c){const e=n[(i[t]+1)%n.length];return void(e!==s&&(yield e))}}while(c!==u)}find(t,e,n=0){if((t=+t)!=t||(e=+e)!=e)return-1;const i=n;let r;for(;(r=this._step(n,t,e))>=0&&r!==n&&r!==i;)n=r;return r}_step(t,e,n){const{inedges:i,hull:r,_hullIndex:o,halfedges:a,triangles:u,points:c}=this;if(-1===i[t]||!c.length)return(t+1)%(c.length>>1);let s=t,l=Qu(e-c[2*t],2)+Qu(n-c[2*t+1],2);const d=i[t];let f=d;do{let i=u[f];const d=Qu(e-c[2*i],2)+Qu(n-c[2*i+1],2);if(d<l&&(l=d,s=i),f=f%3==2?f-2:f+1,u[f]!==t)break;if(f=a[f],-1===f){if(f=r[(o[t]+1)%r.length],f!==i&&Qu(e-c[2*f],2)+Qu(n-c[2*f+1],2)<l)return f;break}}while(f!==d);return s}render(t){const e=null==t?t=new Fu:void 0,{points:n,halfedges:i,triangles:r}=this;for(let e=0,o=i.length;e<o;++e){const o=i[e];if(o<e)continue;const a=2*r[e],u=2*r[o];t.moveTo(n[a],n[a+1]),t.lineTo(n[u],n[u+1])}return this.renderHull(t),e&&e.value()}renderPoints(t,e){void 0!==e||t&&"function"==typeof t.moveTo||(e=t,t=null),e=null==e?2:+e;const n=null==t?t=new Fu:void 0,{points:i}=this;for(let n=0,r=i.length;n<r;n+=2){const r=i[n],o=i[n+1];t.moveTo(r+e,o),t.arc(r,o,e,0,Ku)}return n&&n.value()}renderHull(t){const e=null==t?t=new Fu:void 0,{hull:n,points:i}=this,r=2*n[0],o=n.length;t.moveTo(i[r],i[r+1]);for(let e=1;e<o;++e){const r=2*n[e];t.lineTo(i[r],i[r+1])}return t.closePath(),e&&e.value()}hullPolygon(){const t=new Gu;return this.renderHull(t),t.value()}renderTriangle(t,e){const n=null==e?e=new Fu:void 0,{points:i,triangles:r}=this,o=2*r[t*=3],a=2*r[t+1],u=2*r[t+2];return e.moveTo(i[o],i[o+1]),e.lineTo(i[a],i[a+1]),e.lineTo(i[u],i[u+1]),e.closePath(),n&&n.value()}*trianglePolygons(){const{triangles:t}=this;for(let e=0,n=t.length/3;e<n;++e)yield this.trianglePolygon(e)}trianglePolygon(t){const e=new Gu;return this.renderTriangle(t,e),e.value()}}const Wu=t=>()=>t;function Xu(t,{sourceEvent:e,subject:n,target:i,identifier:r,active:o,x:a,y:u,dx:c,dy:s,dispatch:l}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:e,enumerable:!0,configurable:!0},subject:{value:n,enumerable:!0,configurable:!0},target:{value:i,enumerable:!0,configurable:!0},identifier:{value:r,enumerable:!0,configurable:!0},active:{value:o,enumerable:!0,configurable:!0},x:{value:a,enumerable:!0,configurable:!0},y:{value:u,enumerable:!0,configurable:!0},dx:{value:c,enumerable:!0,configurable:!0},dy:{value:s,enumerable:!0,configurable:!0},_:{value:l}})}function Ju(t){return!t.ctrlKey&&!t.button}function Zu(){return this.parentNode}function tc(t,e){return null==e?{x:t.x,y:t.y}:e}function ec(){return navigator.maxTouchPoints||"ontouchstart"in this}function nc(){var t,e,n,i,r=Ju,o=Zu,a=tc,u=ec,c={},s=ke("start","drag","end"),l=0,d=0;function f(t){t.on("mousedown.drag",h).filter(u).on("touchstart.drag",g).on("touchmove.drag",y,Gn).on("touchend.drag touchcancel.drag",_).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function h(a,u){if(!i&&r.call(this,a,u)){var c=b(this,o.call(this,a,u),a,u,"mouse");c&&(Fn(a.view).on("mousemove.drag",v,Un).on("mouseup.drag",p,Un),Hn(a.view),Kn(a),n=!1,t=a.clientX,e=a.clientY,c("start",a))}}function v(i){if(Qn(i),!n){var r=i.clientX-t,o=i.clientY-e;n=r*r+o*o>d}c.mouse("drag",i)}function p(t){Fn(t.view).on("mousemove.drag mouseup.drag",null),$n(t.view,n),Qn(t),c.mouse("end",t)}function g(t,e){if(r.call(this,t,e)){var n,i,a=t.changedTouches,u=o.call(this,t,e),c=a.length;for(n=0;n<c;++n)(i=b(this,u,t,e,a[n].identifier,a[n]))&&(Kn(t),i("start",t,a[n]))}}function y(t){var e,n,i=t.changedTouches,r=i.length;for(e=0;e<r;++e)(n=c[i[e].identifier])&&(Qn(t),n("drag",t,i[e]))}function _(t){var e,n,r=t.changedTouches,o=r.length;for(i&&clearTimeout(i),i=setTimeout((function(){i=null}),500),e=0;e<o;++e)(n=c[r[e].identifier])&&(Kn(t),n("end",t,r[e]))}function b(t,e,n,i,r,o){var u,d,h,v=s.copy(),p=Zi(o||n,e);if(null!=(h=a.call(t,new Xu("beforestart",{sourceEvent:n,target:f,identifier:r,active:l,x:p[0],y:p[1],dx:0,dy:0,dispatch:v}),i)))return u=h.x-p[0]||0,d=h.y-p[1]||0,function n(o,a,s){var g,y=p;switch(o){case"start":c[r]=n,g=l++;break;case"end":delete c[r],--l;case"drag":p=Zi(s||a,e),g=l}v.call(o,t,new Xu(o,{sourceEvent:a,subject:h,target:f,identifier:r,active:g,x:p[0]+u,y:p[1]+d,dx:p[0]-y[0],dy:p[1]-y[1],dispatch:v}),i)}}return f.filter=function(t){return arguments.length?(r="function"==typeof t?t:Wu(!!t),f):r},f.container=function(t){return arguments.length?(o="function"==typeof t?t:Wu(t),f):o},f.subject=function(t){return arguments.length?(a="function"==typeof t?t:Wu(t),f):a},f.touchable=function(t){return arguments.length?(u="function"==typeof t?t:Wu(!!t),f):u},f.on=function(){var t=s.on.apply(s,arguments);return t===s?f:t},f.clickDistance=function(t){return arguments.length?(d=(t=+t)*t,f):Math.sqrt(d)},f}Xu.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var ic={},rc={},oc=34,ac=10,uc=13;function cc(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+'] || ""'})).join(",")+"}")}function sc(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var i in t)i in e||n.push(e[i]=i)})),n}function lc(t,e){var n=t+"",i=n.length;return i<e?new Array(e-i+1).join(0)+n:n}function dc(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function i(t,e){var i,r=[],o=t.length,a=0,u=0,c=o<=0,s=!1;function l(){if(c)return rc;if(s)return s=!1,ic;var e,i,r=a;if(t.charCodeAt(r)===oc){for(;a++<o&&t.charCodeAt(a)!==oc||t.charCodeAt(++a)===oc;);return(e=a)>=o?c=!0:(i=t.charCodeAt(a++))===ac?s=!0:i===uc&&(s=!0,t.charCodeAt(a)===ac&&++a),t.slice(r+1,e-1).replace(/""/g,'"')}for(;a<o;){if((i=t.charCodeAt(e=a++))===ac)s=!0;else if(i===uc)s=!0,t.charCodeAt(a)===ac&&++a;else if(i!==n)continue;return t.slice(r,e)}return c=!0,t.slice(r,o)}for(t.charCodeAt(o-1)===ac&&--o,t.charCodeAt(o-1)===uc&&--o;(i=l())!==rc;){for(var d=[];i!==ic&&i!==rc;)d.push(i),i=l();e&&null==(d=e(d,u++))||r.push(d)}return r}function r(e,n){return e.map((function(e){return n.map((function(t){return a(e[t])})).join(t)}))}function o(e){return e.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?function(t){var e,n=t.getUTCHours(),i=t.getUTCMinutes(),r=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+lc(-e,6):e>9999?"+"+lc(e,6):lc(e,4))+"-"+lc(t.getUTCMonth()+1,2)+"-"+lc(t.getUTCDate(),2)+(o?"T"+lc(n,2)+":"+lc(i,2)+":"+lc(r,2)+"."+lc(o,3)+"Z":r?"T"+lc(n,2)+":"+lc(i,2)+":"+lc(r,2)+"Z":i||n?"T"+lc(n,2)+":"+lc(i,2)+"Z":"")}(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,r,o=i(t,(function(t,i){if(n)return n(t,i-1);r=t,n=e?function(t,e){var n=cc(t);return function(i,r){return e(n(i),r,t)}}(t,e):cc(t)}));return o.columns=r||[],o},parseRows:i,format:function(e,n){return null==n&&(n=sc(e)),[n.map(a).join(t)].concat(r(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=sc(t)),r(t,e).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:a}}var fc=dc(","),hc=fc.parse,vc=fc.parseRows,pc=fc.format,gc=fc.formatBody,yc=fc.formatRows,_c=fc.formatRow,bc=fc.formatValue,mc=dc("\t"),wc=mc.parse,xc=mc.parseRows,Sc=mc.format,Mc=mc.formatBody,Ec=mc.formatRows,kc=mc.formatRow,Tc=mc.formatValue;function Nc(t){for(var e in t){var n,i,r=t[e].trim();if(r)if("true"===r)r=!0;else if("false"===r)r=!1;else if("NaN"===r)r=NaN;else if(isNaN(n=+r)){if(!(i=r.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)))continue;Ac&&i[4]&&!i[7]&&(r=r.replace(/-/g,"/").replace(/T/," ")),r=new Date(r)}else r=n;else r=null;t[e]=r}return t}const Ac=new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours(),Oc=t=>+t;function Rc(t){return t*t}function Cc(t){return t*(2-t)}function Ic(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}var jc=function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n}(3),Pc=function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),zc=function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3),Dc=Math.PI,Vc=Dc/2;function Lc(t){return 1==+t?1:1-Math.cos(t*Vc)}function Bc(t){return Math.sin(t*Vc)}function Fc(t){return(1-Math.cos(Dc*t))/2}function Gc(t){return 1.0009775171065494*(Math.pow(2,-10*t)-.0009765625)}function Uc(t){return Gc(1-+t)}function Kc(t){return 1-Gc(t)}function Qc(t){return((t*=2)<=1?Gc(1-t):2-Gc(t-1))/2}function Hc(t){return 1-Math.sqrt(1-t*t)}function $c(t){return Math.sqrt(1- --t*t)}function qc(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var Yc=4/11,Wc=6/11,Xc=8/11,Jc=3/4,Zc=9/11,ts=10/11,es=15/16,ns=21/22,is=63/64,rs=1/Yc/Yc;function os(t){return 1-as(1-t)}function as(t){return(t=+t)<Yc?rs*t*t:t<Xc?rs*(t-=Wc)*t+Jc:t<ts?rs*(t-=Zc)*t+es:rs*(t-=ns)*t+is}function us(t){return((t*=2)<=1?1-as(1-t):as(t-1)+1)/2}var cs=1.70158,ss=function t(e){function n(t){return(t=+t)*t*(e*(t-1)+t)}return e=+e,n.overshoot=t,n}(cs),ls=function t(e){function n(t){return--t*t*((t+1)*e+t)+1}return e=+e,n.overshoot=t,n}(cs),ds=function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(cs),fs=2*Math.PI,hs=function t(e,n){var i=Math.asin(1/(e=Math.max(1,e)))*(n/=fs);function r(t){return e*Gc(- --t)*Math.sin((i-t)/n)}return r.amplitude=function(e){return t(e,n*fs)},r.period=function(n){return t(e,n)},r}(1,.3),vs=function t(e,n){var i=Math.asin(1/(e=Math.max(1,e)))*(n/=fs);function r(t){return 1-e*Gc(t=+t)*Math.sin((t+i)/n)}return r.amplitude=function(e){return t(e,n*fs)},r.period=function(n){return t(e,n)},r}(1,.3),ps=function t(e,n){var i=Math.asin(1/(e=Math.max(1,e)))*(n/=fs);function r(t){return((t=2*t-1)<0?e*Gc(-t)*Math.sin((i-t)/n):2-e*Gc(t)*Math.sin((i+t)/n))/2}return r.amplitude=function(e){return t(e,n*fs)},r.period=function(n){return t(e,n)},r}(1,.3);function gs(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}function ys(t,e){return fetch(t,e).then(gs)}function _s(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}function bs(t,e){return fetch(t,e).then(_s)}function ms(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}function ws(t,e){return fetch(t,e).then(ms)}function xs(t){return function(e,n,i){return 2===arguments.length&&"function"==typeof n&&(i=n,n=void 0),ws(e,n).then((function(e){return t(e,i)}))}}function Ss(t,e,n,i){3===arguments.length&&"function"==typeof n&&(i=n,n=void 0);var r=dc(t);return ws(e,n).then((function(t){return r.parse(t,i)}))}var Ms=xs(hc),Es=xs(wc);function ks(t,e){return new Promise((function(n,i){var r=new Image;for(var o in e)r[o]=e[o];r.onerror=i,r.onload=function(){n(r)},r.src=t}))}function Ts(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);if(204!==t.status&&205!==t.status)return t.json()}function Ns(t,e){return fetch(t,e).then(Ts)}function As(t){return(e,n)=>ws(e,n).then((e=>(new DOMParser).parseFromString(e,t)))}const Os=As("application/xml");var Rs=As("text/html"),Cs=As("image/svg+xml");function Is(t,e){var n,i=1;function r(){var r,o,a=n.length,u=0,c=0;for(r=0;r<a;++r)u+=(o=n[r]).x,c+=o.y;for(u=(u/a-t)*i,c=(c/a-e)*i,r=0;r<a;++r)(o=n[r]).x-=u,o.y-=c}return null==t&&(t=0),null==e&&(e=0),r.initialize=function(t){n=t},r.x=function(e){return arguments.length?(t=+e,r):t},r.y=function(t){return arguments.length?(e=+t,r):e},r.strength=function(t){return arguments.length?(i=+t,r):i},r}function js(t,e,n,i){if(isNaN(e)||isNaN(n))return t;var r,o,a,u,c,s,l,d,f,h=t._root,v={data:i},p=t._x0,g=t._y0,y=t._x1,_=t._y1;if(!h)return t._root=v,t;for(;h.length;)if((s=e>=(o=(p+y)/2))?p=o:y=o,(l=n>=(a=(g+_)/2))?g=a:_=a,r=h,!(h=h[d=l<<1|s]))return r[d]=v,t;if(u=+t._x.call(null,h.data),c=+t._y.call(null,h.data),e===u&&n===c)return v.next=h,r?r[d]=v:t._root=v,t;do{r=r?r[d]=new Array(4):t._root=new Array(4),(s=e>=(o=(p+y)/2))?p=o:y=o,(l=n>=(a=(g+_)/2))?g=a:_=a}while((d=l<<1|s)==(f=(c>=a)<<1|u>=o));return r[f]=h,r[d]=v,t}function Ps(t,e,n,i,r){this.node=t,this.x0=e,this.y0=n,this.x1=i,this.y1=r}function zs(t){return t[0]}function Ds(t){return t[1]}function Vs(t,e,n){var i=new Ls(null==e?zs:e,null==n?Ds:n,NaN,NaN,NaN,NaN);return null==t?i:i.addAll(t)}function Ls(t,e,n,i,r,o){this._x=t,this._y=e,this._x0=n,this._y0=i,this._x1=r,this._y1=o,this._root=void 0}function Bs(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var Fs=Vs.prototype=Ls.prototype;function Gs(t){return function(){return t}}function Us(t){return 1e-6*(t()-.5)}function Ks(t){return t.x+t.vx}function Qs(t){return t.y+t.vy}function Hs(t){var e,n,i,r=1,o=1;function a(){for(var t,a,c,s,l,d,f,h=e.length,v=0;v<o;++v)for(a=Vs(e,Ks,Qs).visitAfter(u),t=0;t<h;++t)c=e[t],d=n[c.index],f=d*d,s=c.x+c.vx,l=c.y+c.vy,a.visit(p);function p(t,e,n,o,a){var u=t.data,h=t.r,v=d+h;if(!u)return e>s+v||o<s-v||n>l+v||a<l-v;if(u.index>c.index){var p=s-u.x-u.vx,g=l-u.y-u.vy,y=p*p+g*g;y<v*v&&(0===p&&(y+=(p=Us(i))*p),0===g&&(y+=(g=Us(i))*g),y=(v-(y=Math.sqrt(y)))/y*r,c.vx+=(p*=y)*(v=(h*=h)/(f+h)),c.vy+=(g*=y)*v,u.vx-=p*(v=1-v),u.vy-=g*v)}}}function u(t){if(t.data)return t.r=n[t.data.index];for(var e=t.r=0;e<4;++e)t[e]&&t[e].r>t.r&&(t.r=t[e].r)}function c(){if(e){var i,r,o=e.length;for(n=new Array(o),i=0;i<o;++i)r=e[i],n[r.index]=+t(r,i,e)}}return"function"!=typeof t&&(t=Gs(null==t?1:+t)),a.initialize=function(t,n){e=t,i=n,c()},a.iterations=function(t){return arguments.length?(o=+t,a):o},a.strength=function(t){return arguments.length?(r=+t,a):r},a.radius=function(e){return arguments.length?(t="function"==typeof e?e:Gs(+e),c(),a):t},a}function $s(t){return t.index}function qs(t,e){var n=t.get(e);if(!n)throw new Error("node not found: "+e);return n}function Ys(t){var e,n,i,r,o,a,u=$s,c=function(t){return 1/Math.min(r[t.source.index],r[t.target.index])},s=Gs(30),l=1;function d(i){for(var r=0,u=t.length;r<l;++r)for(var c,s,d,f,h,v,p,g=0;g<u;++g)s=(c=t[g]).source,f=(d=c.target).x+d.vx-s.x-s.vx||Us(a),h=d.y+d.vy-s.y-s.vy||Us(a),f*=v=((v=Math.sqrt(f*f+h*h))-n[g])/v*i*e[g],h*=v,d.vx-=f*(p=o[g]),d.vy-=h*p,s.vx+=f*(p=1-p),s.vy+=h*p}function f(){if(i){var a,c,s=i.length,l=t.length,d=new Map(i.map(((t,e)=>[u(t,e,i),t])));for(a=0,r=new Array(s);a<l;++a)(c=t[a]).index=a,"object"!=typeof c.source&&(c.source=qs(d,c.source)),"object"!=typeof c.target&&(c.target=qs(d,c.target)),r[c.source.index]=(r[c.source.index]||0)+1,r[c.target.index]=(r[c.target.index]||0)+1;for(a=0,o=new Array(l);a<l;++a)c=t[a],o[a]=r[c.source.index]/(r[c.source.index]+r[c.target.index]);e=new Array(l),h(),n=new Array(l),v()}}function h(){if(i)for(var n=0,r=t.length;n<r;++n)e[n]=+c(t[n],n,t)}function v(){if(i)for(var e=0,r=t.length;e<r;++e)n[e]=+s(t[e],e,t)}return null==t&&(t=[]),d.initialize=function(t,e){i=t,a=e,f()},d.links=function(e){return arguments.length?(t=e,f(),d):t},d.id=function(t){return arguments.length?(u=t,d):u},d.iterations=function(t){return arguments.length?(l=+t,d):l},d.strength=function(t){return arguments.length?(c="function"==typeof t?t:Gs(+t),h(),d):c},d.distance=function(t){return arguments.length?(s="function"==typeof t?t:Gs(+t),v(),d):s},d}Fs.copy=function(){var t,e,n=new Ls(this._x,this._y,this._x0,this._y0,this._x1,this._y1),i=this._root;if(!i)return n;if(!i.length)return n._root=Bs(i),n;for(t=[{source:i,target:n._root=new Array(4)}];i=t.pop();)for(var r=0;r<4;++r)(e=i.source[r])&&(e.length?t.push({source:e,target:i.target[r]=new Array(4)}):i.target[r]=Bs(e));return n},Fs.add=function(t){const e=+this._x.call(null,t),n=+this._y.call(null,t);return js(this.cover(e,n),e,n,t)},Fs.addAll=function(t){var e,n,i,r,o=t.length,a=new Array(o),u=new Array(o),c=1/0,s=1/0,l=-1/0,d=-1/0;for(n=0;n<o;++n)isNaN(i=+this._x.call(null,e=t[n]))||isNaN(r=+this._y.call(null,e))||(a[n]=i,u[n]=r,i<c&&(c=i),i>l&&(l=i),r<s&&(s=r),r>d&&(d=r));if(c>l||s>d)return this;for(this.cover(c,s).cover(l,d),n=0;n<o;++n)js(this,a[n],u[n],t[n]);return this},Fs.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,i=this._y0,r=this._x1,o=this._y1;if(isNaN(n))r=(n=Math.floor(t))+1,o=(i=Math.floor(e))+1;else{for(var a,u,c=r-n||1,s=this._root;n>t||t>=r||i>e||e>=o;)switch(u=(e<i)<<1|t<n,(a=new Array(4))[u]=s,s=a,c*=2,u){case 0:r=n+c,o=i+c;break;case 1:n=r-c,o=i+c;break;case 2:r=n+c,i=o-c;break;case 3:n=r-c,i=o-c}this._root&&this._root.length&&(this._root=s)}return this._x0=n,this._y0=i,this._x1=r,this._y1=o,this},Fs.data=function(){var t=[];return this.visit((function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)})),t},Fs.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Fs.find=function(t,e,n){var i,r,o,a,u,c,s,l=this._x0,d=this._y0,f=this._x1,h=this._y1,v=[],p=this._root;for(p&&v.push(new Ps(p,l,d,f,h)),null==n?n=1/0:(l=t-n,d=e-n,f=t+n,h=e+n,n*=n);c=v.pop();)if(!(!(p=c.node)||(r=c.x0)>f||(o=c.y0)>h||(a=c.x1)<l||(u=c.y1)<d))if(p.length){var g=(r+a)/2,y=(o+u)/2;v.push(new Ps(p[3],g,y,a,u),new Ps(p[2],r,y,g,u),new Ps(p[1],g,o,a,y),new Ps(p[0],r,o,g,y)),(s=(e>=y)<<1|t>=g)&&(c=v[v.length-1],v[v.length-1]=v[v.length-1-s],v[v.length-1-s]=c)}else{var _=t-+this._x.call(null,p.data),b=e-+this._y.call(null,p.data),m=_*_+b*b;if(m<n){var w=Math.sqrt(n=m);l=t-w,d=e-w,f=t+w,h=e+w,i=p.data}}return i},Fs.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var e,n,i,r,o,a,u,c,s,l,d,f,h=this._root,v=this._x0,p=this._y0,g=this._x1,y=this._y1;if(!h)return this;if(h.length)for(;;){if((s=o>=(u=(v+g)/2))?v=u:g=u,(l=a>=(c=(p+y)/2))?p=c:y=c,e=h,!(h=h[d=l<<1|s]))return this;if(!h.length)break;(e[d+1&3]||e[d+2&3]||e[d+3&3])&&(n=e,f=d)}for(;h.data!==t;)if(i=h,!(h=h.next))return this;return(r=h.next)&&delete h.next,i?(r?i.next=r:delete i.next,this):e?(r?e[d]=r:delete e[d],(h=e[0]||e[1]||e[2]||e[3])&&h===(e[3]||e[2]||e[1]||e[0])&&!h.length&&(n?n[f]=h:this._root=h),this):(this._root=r,this)},Fs.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},Fs.root=function(){return this._root},Fs.size=function(){var t=0;return this.visit((function(e){if(!e.length)do{++t}while(e=e.next)})),t},Fs.visit=function(t){var e,n,i,r,o,a,u=[],c=this._root;for(c&&u.push(new Ps(c,this._x0,this._y0,this._x1,this._y1));e=u.pop();)if(!t(c=e.node,i=e.x0,r=e.y0,o=e.x1,a=e.y1)&&c.length){var s=(i+o)/2,l=(r+a)/2;(n=c[3])&&u.push(new Ps(n,s,l,o,a)),(n=c[2])&&u.push(new Ps(n,i,l,s,a)),(n=c[1])&&u.push(new Ps(n,s,r,o,l)),(n=c[0])&&u.push(new Ps(n,i,r,s,l))}return this},Fs.visitAfter=function(t){var e,n=[],i=[];for(this._root&&n.push(new Ps(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var r=e.node;if(r.length){var o,a=e.x0,u=e.y0,c=e.x1,s=e.y1,l=(a+c)/2,d=(u+s)/2;(o=r[0])&&n.push(new Ps(o,a,u,l,d)),(o=r[1])&&n.push(new Ps(o,l,u,c,d)),(o=r[2])&&n.push(new Ps(o,a,d,l,s)),(o=r[3])&&n.push(new Ps(o,l,d,c,s))}i.push(e)}for(;e=i.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},Fs.x=function(t){return arguments.length?(this._x=t,this):this._x},Fs.y=function(t){return arguments.length?(this._y=t,this):this._y};const Ws=1664525,Xs=1013904223,Js=4294967296;function Zs(t){return t.x}function tl(t){return t.y}var el=10,nl=Math.PI*(3-Math.sqrt(5));function il(t){var e,n=1,i=.001,r=1-Math.pow(i,1/300),o=0,a=.6,u=new Map,c=vr(d),s=ke("tick","end"),l=function(){let t=1;return()=>(t=(Ws*t+Xs)%Js)/Js}();function d(){f(),s.call("tick",e),n<i&&(c.stop(),s.call("end",e))}function f(i){var c,s,l=t.length;void 0===i&&(i=1);for(var d=0;d<i;++d)for(n+=(o-n)*r,u.forEach((function(t){t(n)})),c=0;c<l;++c)null==(s=t[c]).fx?s.x+=s.vx*=a:(s.x=s.fx,s.vx=0),null==s.fy?s.y+=s.vy*=a:(s.y=s.fy,s.vy=0);return e}function h(){for(var e,n=0,i=t.length;n<i;++n){if((e=t[n]).index=n,null!=e.fx&&(e.x=e.fx),null!=e.fy&&(e.y=e.fy),isNaN(e.x)||isNaN(e.y)){var r=el*Math.sqrt(.5+n),o=n*nl;e.x=r*Math.cos(o),e.y=r*Math.sin(o)}(isNaN(e.vx)||isNaN(e.vy))&&(e.vx=e.vy=0)}}function v(e){return e.initialize&&e.initialize(t,l),e}return null==t&&(t=[]),h(),e={tick:f,restart:function(){return c.restart(d),e},stop:function(){return c.stop(),e},nodes:function(n){return arguments.length?(t=n,h(),u.forEach(v),e):t},alpha:function(t){return arguments.length?(n=+t,e):n},alphaMin:function(t){return arguments.length?(i=+t,e):i},alphaDecay:function(t){return arguments.length?(r=+t,e):+r},alphaTarget:function(t){return arguments.length?(o=+t,e):o},velocityDecay:function(t){return arguments.length?(a=1-t,e):1-a},randomSource:function(t){return arguments.length?(l=t,u.forEach(v),e):l},force:function(t,n){return arguments.length>1?(null==n?u.delete(t):u.set(t,v(n)),e):u.get(t)},find:function(e,n,i){var r,o,a,u,c,s=0,l=t.length;for(null==i?i=1/0:i*=i,s=0;s<l;++s)(a=(r=e-(u=t[s]).x)*r+(o=n-u.y)*o)<i&&(c=u,i=a);return c},on:function(t,n){return arguments.length>1?(s.on(t,n),e):s.on(t)}}}function rl(){var t,e,n,i,r,o=Gs(-30),a=1,u=1/0,c=.81;function s(n){var r,o=t.length,a=Vs(t,Zs,tl).visitAfter(d);for(i=n,r=0;r<o;++r)e=t[r],a.visit(f)}function l(){if(t){var e,n,i=t.length;for(r=new Array(i),e=0;e<i;++e)n=t[e],r[n.index]=+o(n,e,t)}}function d(t){var e,n,i,o,a,u=0,c=0;if(t.length){for(i=o=a=0;a<4;++a)(e=t[a])&&(n=Math.abs(e.value))&&(u+=e.value,c+=n,i+=n*e.x,o+=n*e.y);t.x=i/c,t.y=o/c}else{(e=t).x=e.data.x,e.y=e.data.y;do{u+=r[e.data.index]}while(e=e.next)}t.value=u}function f(t,o,s,l){if(!t.value)return!0;var d=t.x-e.x,f=t.y-e.y,h=l-o,v=d*d+f*f;if(h*h/c<v)return v<u&&(0===d&&(v+=(d=Us(n))*d),0===f&&(v+=(f=Us(n))*f),v<a&&(v=Math.sqrt(a*v)),e.vx+=d*t.value*i/v,e.vy+=f*t.value*i/v),!0;if(!(t.length||v>=u)){(t.data!==e||t.next)&&(0===d&&(v+=(d=Us(n))*d),0===f&&(v+=(f=Us(n))*f),v<a&&(v=Math.sqrt(a*v)));do{t.data!==e&&(h=r[t.data.index]*i/v,e.vx+=d*h,e.vy+=f*h)}while(t=t.next)}}return s.initialize=function(e,i){t=e,n=i,l()},s.strength=function(t){return arguments.length?(o="function"==typeof t?t:Gs(+t),l(),s):o},s.distanceMin=function(t){return arguments.length?(a=t*t,s):Math.sqrt(a)},s.distanceMax=function(t){return arguments.length?(u=t*t,s):Math.sqrt(u)},s.theta=function(t){return arguments.length?(c=t*t,s):Math.sqrt(c)},s}function ol(t,e,n){var i,r,o,a=Gs(.1);function u(t){for(var a=0,u=i.length;a<u;++a){var c=i[a],s=c.x-e||1e-6,l=c.y-n||1e-6,d=Math.sqrt(s*s+l*l),f=(o[a]-d)*r[a]*t/d;c.vx+=s*f,c.vy+=l*f}}function c(){if(i){var e,n=i.length;for(r=new Array(n),o=new Array(n),e=0;e<n;++e)o[e]=+t(i[e],e,i),r[e]=isNaN(o[e])?0:+a(i[e],e,i)}}return"function"!=typeof t&&(t=Gs(+t)),null==e&&(e=0),null==n&&(n=0),u.initialize=function(t){i=t,c()},u.strength=function(t){return arguments.length?(a="function"==typeof t?t:Gs(+t),c(),u):a},u.radius=function(e){return arguments.length?(t="function"==typeof e?e:Gs(+e),c(),u):t},u.x=function(t){return arguments.length?(e=+t,u):e},u.y=function(t){return arguments.length?(n=+t,u):n},u}function al(t){var e,n,i,r=Gs(.1);function o(t){for(var r,o=0,a=e.length;o<a;++o)(r=e[o]).vx+=(i[o]-r.x)*n[o]*t}function a(){if(e){var o,a=e.length;for(n=new Array(a),i=new Array(a),o=0;o<a;++o)n[o]=isNaN(i[o]=+t(e[o],o,e))?0:+r(e[o],o,e)}}return"function"!=typeof t&&(t=Gs(null==t?0:+t)),o.initialize=function(t){e=t,a()},o.strength=function(t){return arguments.length?(r="function"==typeof t?t:Gs(+t),a(),o):r},o.x=function(e){return arguments.length?(t="function"==typeof e?e:Gs(+e),a(),o):t},o}function ul(t){var e,n,i,r=Gs(.1);function o(t){for(var r,o=0,a=e.length;o<a;++o)(r=e[o]).vy+=(i[o]-r.y)*n[o]*t}function a(){if(e){var o,a=e.length;for(n=new Array(a),i=new Array(a),o=0;o<a;++o)n[o]=isNaN(i[o]=+t(e[o],o,e))?0:+r(e[o],o,e)}}return"function"!=typeof t&&(t=Gs(null==t?0:+t)),o.initialize=function(t){e=t,a()},o.strength=function(t){return arguments.length?(r="function"==typeof t?t:Gs(+t),a(),o):r},o.y=function(e){return arguments.length?(t="function"==typeof e?e:Gs(+e),a(),o):t},o}function cl(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,i=t.slice(0,n);return[i.length>1?i[0]+i.slice(2):i,+t.slice(n+1)]}function sl(t){return(t=cl(Math.abs(t)))?t[1]:NaN}var ll,dl=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function fl(t){if(!(e=dl.exec(t)))throw new Error("invalid format: "+t);var e;return new hl({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function hl(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function vl(t,e){var n=cl(t,e);if(!n)return t+"";var i=n[0],r=n[1];return r<0?"0."+new Array(-r).join("0")+i:i.length>r+1?i.slice(0,r+1)+"."+i.slice(r+1):i+new Array(r-i.length+2).join("0")}fl.prototype=hl.prototype,hl.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const pl={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>vl(100*t,e),r:vl,s:function(t,e){var n=cl(t,e);if(!n)return t+"";var i=n[0],r=n[1],o=r-(ll=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,a=i.length;return o===a?i:o>a?i+new Array(o-a+1).join("0"):o>0?i.slice(0,o)+"."+i.slice(o):"0."+new Array(1-o).join("0")+cl(t,Math.max(0,e+o-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function gl(t){return t}var yl,_l,bl,ml=Array.prototype.map,wl=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function xl(t){var e,n,i=void 0===t.grouping||void 0===t.thousands?gl:(e=ml.call(t.grouping,Number),n=t.thousands+"",function(t,i){for(var r=t.length,o=[],a=0,u=e[0],c=0;r>0&&u>0&&(c+u+1>i&&(u=Math.max(1,i-c)),o.push(t.substring(r-=u,r+u)),!((c+=u+1)>i));)u=e[a=(a+1)%e.length];return o.reverse().join(n)}),r=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?gl:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(ml.call(t.numerals,String)),c=void 0===t.percent?"%":t.percent+"",s=void 0===t.minus?"−":t.minus+"",l=void 0===t.nan?"NaN":t.nan+"";function d(t){var e=(t=fl(t)).fill,n=t.align,d=t.sign,f=t.symbol,h=t.zero,v=t.width,p=t.comma,g=t.precision,y=t.trim,_=t.type;"n"===_?(p=!0,_="g"):pl[_]||(void 0===g&&(g=12),y=!0,_="g"),(h||"0"===e&&"="===n)&&(h=!0,e="0",n="=");var b="$"===f?r:"#"===f&&/[boxX]/.test(_)?"0"+_.toLowerCase():"",m="$"===f?o:/[%p]/.test(_)?c:"",w=pl[_],x=/[defgprs%]/.test(_);function S(t){var r,o,c,f=b,S=m;if("c"===_)S=w(t)+S,t="";else{var M=(t=+t)<0||1/t<0;if(t=isNaN(t)?l:w(Math.abs(t),g),y&&(t=function(t){t:for(var e,n=t.length,i=1,r=-1;i<n;++i)switch(t[i]){case".":r=e=i;break;case"0":0===r&&(r=i),e=i;break;default:if(!+t[i])break t;r>0&&(r=0)}return r>0?t.slice(0,r)+t.slice(e+1):t}(t)),M&&0==+t&&"+"!==d&&(M=!1),f=(M?"("===d?d:s:"-"===d||"("===d?"":d)+f,S=("s"===_?wl[8+ll/3]:"")+S+(M&&"("===d?")":""),x)for(r=-1,o=t.length;++r<o;)if(48>(c=t.charCodeAt(r))||c>57){S=(46===c?a+t.slice(r+1):t.slice(r))+S,t=t.slice(0,r);break}}p&&!h&&(t=i(t,1/0));var E=f.length+t.length+S.length,k=E<v?new Array(v-E+1).join(e):"";switch(p&&h&&(t=i(k+t,k.length?v-S.length:1/0),k=""),n){case"<":t=f+t+S+k;break;case"=":t=f+k+t+S;break;case"^":t=k.slice(0,E=k.length>>1)+f+t+S+k.slice(E);break;default:t=k+f+t+S}return u(t)}return g=void 0===g?6:/[gprs]/.test(_)?Math.max(1,Math.min(21,g)):Math.max(0,Math.min(20,g)),S.toString=function(){return t+""},S}return{format:d,formatPrefix:function(t,e){var n=d(((t=fl(t)).type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(sl(e)/3))),r=Math.pow(10,-i),o=wl[8+i/3];return function(t){return n(r*t)+o}}}}function Sl(t){return yl=xl(t),_l=yl.format,bl=yl.formatPrefix,yl}function Ml(t){return Math.max(0,-sl(Math.abs(t)))}function El(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(sl(e)/3)))-sl(Math.abs(t)))}function kl(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,sl(e)-sl(t))+1}Sl({thousands:",",grouping:[3],currency:["$",""]});var Tl=1e-6,Nl=1e-12,Al=Math.PI,Ol=Al/2,Rl=Al/4,Cl=2*Al,Il=180/Al,jl=Al/180,Pl=Math.abs,zl=Math.atan,Dl=Math.atan2,Vl=Math.cos,Ll=Math.ceil,Bl=Math.exp,Fl=(Math.floor,Math.hypot),Gl=Math.log,Ul=Math.pow,Kl=Math.sin,Ql=Math.sign||function(t){return t>0?1:t<0?-1:0},Hl=Math.sqrt,$l=Math.tan;function ql(t){return t>1?0:t<-1?Al:Math.acos(t)}function Yl(t){return t>1?Ol:t<-1?-Ol:Math.asin(t)}function Wl(t){return(t=Kl(t/2))*t}function Xl(){}function Jl(t,e){t&&td.hasOwnProperty(t.type)&&td[t.type](t,e)}var Zl={Feature:function(t,e){Jl(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,i=-1,r=n.length;++i<r;)Jl(n[i].geometry,e)}},td={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,i=-1,r=n.length;++i<r;)t=n[i],e.point(t[0],t[1],t[2])},LineString:function(t,e){ed(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,i=-1,r=n.length;++i<r;)ed(n[i],e,0)},Polygon:function(t,e){nd(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,i=-1,r=n.length;++i<r;)nd(n[i],e)},GeometryCollection:function(t,e){for(var n=t.geometries,i=-1,r=n.length;++i<r;)Jl(n[i],e)}};function ed(t,e,n){var i,r=-1,o=t.length-n;for(e.lineStart();++r<o;)i=t[r],e.point(i[0],i[1],i[2]);e.lineEnd()}function nd(t,e){var n=-1,i=t.length;for(e.polygonStart();++n<i;)ed(t[n],e,1);e.polygonEnd()}function id(t,e){t&&Zl.hasOwnProperty(t.type)?Zl[t.type](t,e):Jl(t,e)}var rd,od,ad,ud,cd,sd,ld,dd,fd,hd,vd,pd,gd,yd,_d,bd,md=new A,wd=new A,xd={point:Xl,lineStart:Xl,lineEnd:Xl,polygonStart:function(){md=new A,xd.lineStart=Sd,xd.lineEnd=Md},polygonEnd:function(){var t=+md;wd.add(t<0?Cl+t:t),this.lineStart=this.lineEnd=this.point=Xl},sphere:function(){wd.add(Cl)}};function Sd(){xd.point=Ed}function Md(){kd(rd,od)}function Ed(t,e){xd.point=kd,rd=t,od=e,ad=t*=jl,ud=Vl(e=(e*=jl)/2+Rl),cd=Kl(e)}function kd(t,e){var n=(t*=jl)-ad,i=n>=0?1:-1,r=i*n,o=Vl(e=(e*=jl)/2+Rl),a=Kl(e),u=cd*a,c=ud*o+u*Vl(r),s=u*i*Kl(r);md.add(Dl(s,c)),ad=t,ud=o,cd=a}function Td(t){return wd=new A,id(t,xd),2*wd}function Nd(t){return[Dl(t[1],t[0]),Yl(t[2])]}function Ad(t){var e=t[0],n=t[1],i=Vl(n);return[i*Vl(e),i*Kl(e),Kl(n)]}function Od(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function Rd(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function Cd(t,e){t[0]+=e[0],t[1]+=e[1],t[2]+=e[2]}function Id(t,e){return[t[0]*e,t[1]*e,t[2]*e]}function jd(t){var e=Hl(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}var Pd,zd,Dd,Vd,Ld,Bd,Fd,Gd,Ud,Kd,Qd,Hd,$d,qd,Yd,Wd,Xd={point:Jd,lineStart:tf,lineEnd:ef,polygonStart:function(){Xd.point=nf,Xd.lineStart=rf,Xd.lineEnd=of,yd=new A,xd.polygonStart()},polygonEnd:function(){xd.polygonEnd(),Xd.point=Jd,Xd.lineStart=tf,Xd.lineEnd=ef,md<0?(sd=-(dd=180),ld=-(fd=90)):yd>Tl?fd=90:yd<-Tl&&(ld=-90),bd[0]=sd,bd[1]=dd},sphere:function(){sd=-(dd=180),ld=-(fd=90)}};function Jd(t,e){_d.push(bd=[sd=t,dd=t]),e<ld&&(ld=e),e>fd&&(fd=e)}function Zd(t,e){var n=Ad([t*jl,e*jl]);if(gd){var i=Rd(gd,n),r=Rd([i[1],-i[0],0],i);jd(r),r=Nd(r);var o,a=t-hd,u=a>0?1:-1,c=r[0]*Il*u,s=Pl(a)>180;s^(u*hd<c&&c<u*t)?(o=r[1]*Il)>fd&&(fd=o):s^(u*hd<(c=(c+360)%360-180)&&c<u*t)?(o=-r[1]*Il)<ld&&(ld=o):(e<ld&&(ld=e),e>fd&&(fd=e)),s?t<hd?af(sd,t)>af(sd,dd)&&(dd=t):af(t,dd)>af(sd,dd)&&(sd=t):dd>=sd?(t<sd&&(sd=t),t>dd&&(dd=t)):t>hd?af(sd,t)>af(sd,dd)&&(dd=t):af(t,dd)>af(sd,dd)&&(sd=t)}else _d.push(bd=[sd=t,dd=t]);e<ld&&(ld=e),e>fd&&(fd=e),gd=n,hd=t}function tf(){Xd.point=Zd}function ef(){bd[0]=sd,bd[1]=dd,Xd.point=Jd,gd=null}function nf(t,e){if(gd){var n=t-hd;yd.add(Pl(n)>180?n+(n>0?360:-360):n)}else vd=t,pd=e;xd.point(t,e),Zd(t,e)}function rf(){xd.lineStart()}function of(){nf(vd,pd),xd.lineEnd(),Pl(yd)>Tl&&(sd=-(dd=180)),bd[0]=sd,bd[1]=dd,gd=null}function af(t,e){return(e-=t)<0?e+360:e}function uf(t,e){return t[0]-e[0]}function cf(t,e){return t[0]<=t[1]?t[0]<=e&&e<=t[1]:e<t[0]||t[1]<e}function sf(t){var e,n,i,r,o,a,u;if(fd=dd=-(sd=ld=1/0),_d=[],id(t,Xd),n=_d.length){for(_d.sort(uf),e=1,o=[i=_d[0]];e<n;++e)cf(i,(r=_d[e])[0])||cf(i,r[1])?(af(i[0],r[1])>af(i[0],i[1])&&(i[1]=r[1]),af(r[0],i[1])>af(i[0],i[1])&&(i[0]=r[0])):o.push(i=r);for(a=-1/0,e=0,i=o[n=o.length-1];e<=n;i=r,++e)r=o[e],(u=af(i[1],r[0]))>a&&(a=u,sd=r[0],dd=i[1])}return _d=bd=null,sd===1/0||ld===1/0?[[NaN,NaN],[NaN,NaN]]:[[sd,ld],[dd,fd]]}var lf={sphere:Xl,point:df,lineStart:hf,lineEnd:gf,polygonStart:function(){lf.lineStart=yf,lf.lineEnd=_f},polygonEnd:function(){lf.lineStart=hf,lf.lineEnd=gf}};function df(t,e){t*=jl;var n=Vl(e*=jl);ff(n*Vl(t),n*Kl(t),Kl(e))}function ff(t,e,n){++Pd,Dd+=(t-Dd)/Pd,Vd+=(e-Vd)/Pd,Ld+=(n-Ld)/Pd}function hf(){lf.point=vf}function vf(t,e){t*=jl;var n=Vl(e*=jl);qd=n*Vl(t),Yd=n*Kl(t),Wd=Kl(e),lf.point=pf,ff(qd,Yd,Wd)}function pf(t,e){t*=jl;var n=Vl(e*=jl),i=n*Vl(t),r=n*Kl(t),o=Kl(e),a=Dl(Hl((a=Yd*o-Wd*r)*a+(a=Wd*i-qd*o)*a+(a=qd*r-Yd*i)*a),qd*i+Yd*r+Wd*o);zd+=a,Bd+=a*(qd+(qd=i)),Fd+=a*(Yd+(Yd=r)),Gd+=a*(Wd+(Wd=o)),ff(qd,Yd,Wd)}function gf(){lf.point=df}function yf(){lf.point=bf}function _f(){mf(Hd,$d),lf.point=df}function bf(t,e){Hd=t,$d=e,t*=jl,e*=jl,lf.point=mf;var n=Vl(e);qd=n*Vl(t),Yd=n*Kl(t),Wd=Kl(e),ff(qd,Yd,Wd)}function mf(t,e){t*=jl;var n=Vl(e*=jl),i=n*Vl(t),r=n*Kl(t),o=Kl(e),a=Yd*o-Wd*r,u=Wd*i-qd*o,c=qd*r-Yd*i,s=Fl(a,u,c),l=Yl(s),d=s&&-l/s;Ud.add(d*a),Kd.add(d*u),Qd.add(d*c),zd+=l,Bd+=l*(qd+(qd=i)),Fd+=l*(Yd+(Yd=r)),Gd+=l*(Wd+(Wd=o)),ff(qd,Yd,Wd)}function wf(t){Pd=zd=Dd=Vd=Ld=Bd=Fd=Gd=0,Ud=new A,Kd=new A,Qd=new A,id(t,lf);var e=+Ud,n=+Kd,i=+Qd,r=Fl(e,n,i);return r<Nl&&(e=Bd,n=Fd,i=Gd,zd<Tl&&(e=Dd,n=Vd,i=Ld),(r=Fl(e,n,i))<Nl)?[NaN,NaN]:[Dl(n,e)*Il,Yl(i/r)*Il]}function xf(t){return function(){return t}}function Sf(t,e){function n(n,i){return n=t(n,i),e(n[0],n[1])}return t.invert&&e.invert&&(n.invert=function(n,i){return(n=e.invert(n,i))&&t.invert(n[0],n[1])}),n}function Mf(t,e){return Pl(t)>Al&&(t-=Math.round(t/Cl)*Cl),[t,e]}function Ef(t,e,n){return(t%=Cl)?e||n?Sf(Tf(t),Nf(e,n)):Tf(t):e||n?Nf(e,n):Mf}function kf(t){return function(e,n){return Pl(e+=t)>Al&&(e-=Math.round(e/Cl)*Cl),[e,n]}}function Tf(t){var e=kf(t);return e.invert=kf(-t),e}function Nf(t,e){var n=Vl(t),i=Kl(t),r=Vl(e),o=Kl(e);function a(t,e){var a=Vl(e),u=Vl(t)*a,c=Kl(t)*a,s=Kl(e),l=s*n+u*i;return[Dl(c*r-l*o,u*n-s*i),Yl(l*r+c*o)]}return a.invert=function(t,e){var a=Vl(e),u=Vl(t)*a,c=Kl(t)*a,s=Kl(e),l=s*r-c*o;return[Dl(c*r+s*o,u*n+l*i),Yl(l*n-u*i)]},a}function Af(t){function e(e){return(e=t(e[0]*jl,e[1]*jl))[0]*=Il,e[1]*=Il,e}return t=Ef(t[0]*jl,t[1]*jl,t.length>2?t[2]*jl:0),e.invert=function(e){return(e=t.invert(e[0]*jl,e[1]*jl))[0]*=Il,e[1]*=Il,e},e}function Of(t,e,n,i,r,o){if(n){var a=Vl(e),u=Kl(e),c=i*n;null==r?(r=e+i*Cl,o=e-c/2):(r=Rf(a,r),o=Rf(a,o),(i>0?r<o:r>o)&&(r+=i*Cl));for(var s,l=r;i>0?l>o:l<o;l-=c)s=Nd([a,-u*Vl(l),-u*Kl(l)]),t.point(s[0],s[1])}}function Rf(t,e){(e=Ad(e))[0]-=t,jd(e);var n=ql(-e[1]);return((-e[2]<0?-n:n)+Cl-Tl)%Cl}function Cf(){var t,e,n=xf([0,0]),i=xf(90),r=xf(2),o={point:function(n,i){t.push(n=e(n,i)),n[0]*=Il,n[1]*=Il}};function a(){var a=n.apply(this,arguments),u=i.apply(this,arguments)*jl,c=r.apply(this,arguments)*jl;return t=[],e=Ef(-a[0]*jl,-a[1]*jl,0).invert,Of(o,u,c,1),a={type:"Polygon",coordinates:[t]},t=e=null,a}return a.center=function(t){return arguments.length?(n="function"==typeof t?t:xf([+t[0],+t[1]]),a):n},a.radius=function(t){return arguments.length?(i="function"==typeof t?t:xf(+t),a):i},a.precision=function(t){return arguments.length?(r="function"==typeof t?t:xf(+t),a):r},a}function If(){var t,e=[];return{point:function(e,n,i){t.push([e,n,i])},lineStart:function(){e.push(t=[])},lineEnd:Xl,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}}function jf(t,e){return Pl(t[0]-e[0])<Tl&&Pl(t[1]-e[1])<Tl}function Pf(t,e,n,i){this.x=t,this.z=e,this.o=n,this.e=i,this.v=!1,this.n=this.p=null}function zf(t,e,n,i,r){var o,a,u=[],c=[];if(t.forEach((function(t){if(!((e=t.length-1)<=0)){var e,n,i=t[0],a=t[e];if(jf(i,a)){if(!i[2]&&!a[2]){for(r.lineStart(),o=0;o<e;++o)r.point((i=t[o])[0],i[1]);return void r.lineEnd()}a[0]+=2*Tl}u.push(n=new Pf(i,t,null,!0)),c.push(n.o=new Pf(i,null,n,!1)),u.push(n=new Pf(a,t,null,!1)),c.push(n.o=new Pf(a,null,n,!0))}})),u.length){for(c.sort(e),Df(u),Df(c),o=0,a=c.length;o<a;++o)c[o].e=n=!n;for(var s,l,d=u[0];;){for(var f=d,h=!0;f.v;)if((f=f.n)===d)return;s=f.z,r.lineStart();do{if(f.v=f.o.v=!0,f.e){if(h)for(o=0,a=s.length;o<a;++o)r.point((l=s[o])[0],l[1]);else i(f.x,f.n.x,1,r);f=f.n}else{if(h)for(s=f.p.z,o=s.length-1;o>=0;--o)r.point((l=s[o])[0],l[1]);else i(f.x,f.p.x,-1,r);f=f.p}s=(f=f.o).z,h=!h}while(!f.v);r.lineEnd()}}}function Df(t){if(e=t.length){for(var e,n,i=0,r=t[0];++i<e;)r.n=n=t[i],n.p=r,r=n;r.n=n=t[0],n.p=r}}function Vf(t){return Pl(t[0])<=Al?t[0]:Ql(t[0])*((Pl(t[0])+Al)%Cl-Al)}function Lf(t,e){var n=Vf(e),i=e[1],r=Kl(i),o=[Kl(n),-Vl(n),0],a=0,u=0,c=new A;1===r?i=Ol+Tl:-1===r&&(i=-Ol-Tl);for(var s=0,l=t.length;s<l;++s)if(f=(d=t[s]).length)for(var d,f,h=d[f-1],v=Vf(h),p=h[1]/2+Rl,g=Kl(p),y=Vl(p),_=0;_<f;++_,v=m,g=x,y=S,h=b){var b=d[_],m=Vf(b),w=b[1]/2+Rl,x=Kl(w),S=Vl(w),M=m-v,E=M>=0?1:-1,k=E*M,T=k>Al,N=g*x;if(c.add(Dl(N*E*Kl(k),y*S+N*Vl(k))),a+=T?M+E*Cl:M,T^v>=n^m>=n){var O=Rd(Ad(h),Ad(b));jd(O);var R=Rd(o,O);jd(R);var C=(T^M>=0?-1:1)*Yl(R[2]);(i>C||i===C&&(O[0]||O[1]))&&(u+=T^M>=0?1:-1)}}return(a<-Tl||a<Tl&&c<-Nl)^1&u}function Bf(t,e,n,i){return function(r){var o,a,u,c=e(r),s=If(),l=e(s),d=!1,f={point:h,lineStart:p,lineEnd:g,polygonStart:function(){f.point=y,f.lineStart=_,f.lineEnd=b,a=[],o=[]},polygonEnd:function(){f.point=h,f.lineStart=p,f.lineEnd=g,a=At(a);var t=Lf(o,i);a.length?(d||(r.polygonStart(),d=!0),zf(a,Gf,t,n,r)):t&&(d||(r.polygonStart(),d=!0),r.lineStart(),n(null,null,1,r),r.lineEnd()),d&&(r.polygonEnd(),d=!1),a=o=null},sphere:function(){r.polygonStart(),r.lineStart(),n(null,null,1,r),r.lineEnd(),r.polygonEnd()}};function h(e,n){t(e,n)&&r.point(e,n)}function v(t,e){c.point(t,e)}function p(){f.point=v,c.lineStart()}function g(){f.point=h,c.lineEnd()}function y(t,e){u.push([t,e]),l.point(t,e)}function _(){l.lineStart(),u=[]}function b(){y(u[0][0],u[0][1]),l.lineEnd();var t,e,n,i,c=l.clean(),f=s.result(),h=f.length;if(u.pop(),o.push(u),u=null,h)if(1&c){if((e=(n=f[0]).length-1)>0){for(d||(r.polygonStart(),d=!0),r.lineStart(),t=0;t<e;++t)r.point((i=n[t])[0],i[1]);r.lineEnd()}}else h>1&&2&c&&f.push(f.pop().concat(f.shift())),a.push(f.filter(Ff))}return f}}function Ff(t){return t.length>1}function Gf(t,e){return((t=t.x)[0]<0?t[1]-Ol-Tl:Ol-t[1])-((e=e.x)[0]<0?e[1]-Ol-Tl:Ol-e[1])}Mf.invert=Mf;const Uf=Bf((function(){return!0}),(function(t){var e,n=NaN,i=NaN,r=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(o,a){var u=o>0?Al:-Al,c=Pl(o-n);Pl(c-Al)<Tl?(t.point(n,i=(i+a)/2>0?Ol:-Ol),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(u,i),t.point(o,i),e=0):r!==u&&c>=Al&&(Pl(n-r)<Tl&&(n-=r*Tl),Pl(o-u)<Tl&&(o-=u*Tl),i=function(t,e,n,i){var r,o,a=Kl(t-n);return Pl(a)>Tl?zl((Kl(e)*(o=Vl(i))*Kl(n)-Kl(i)*(r=Vl(e))*Kl(t))/(r*o*a)):(e+i)/2}(n,i,o,a),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(u,i),e=0),t.point(n=o,i=a),r=u},lineEnd:function(){t.lineEnd(),n=i=NaN},clean:function(){return 2-e}}}),(function(t,e,n,i){var r;if(null==t)r=n*Ol,i.point(-Al,r),i.point(0,r),i.point(Al,r),i.point(Al,0),i.point(Al,-r),i.point(0,-r),i.point(-Al,-r),i.point(-Al,0),i.point(-Al,r);else if(Pl(t[0]-e[0])>Tl){var o=t[0]<e[0]?Al:-Al;r=n*o/2,i.point(-o,r),i.point(0,r),i.point(o,r)}else i.point(e[0],e[1])}),[-Al,-Ol]);function Kf(t){var e=Vl(t),n=2*jl,i=e>0,r=Pl(e)>Tl;function o(t,n){return Vl(t)*Vl(n)>e}function a(t,n,i){var r=[1,0,0],o=Rd(Ad(t),Ad(n)),a=Od(o,o),u=o[0],c=a-u*u;if(!c)return!i&&t;var s=e*a/c,l=-e*u/c,d=Rd(r,o),f=Id(r,s);Cd(f,Id(o,l));var h=d,v=Od(f,h),p=Od(h,h),g=v*v-p*(Od(f,f)-1);if(!(g<0)){var y=Hl(g),_=Id(h,(-v-y)/p);if(Cd(_,f),_=Nd(_),!i)return _;var b,m=t[0],w=n[0],x=t[1],S=n[1];w<m&&(b=m,m=w,w=b);var M=w-m,E=Pl(M-Al)<Tl;if(!E&&S<x&&(b=x,x=S,S=b),E||M<Tl?E?x+S>0^_[1]<(Pl(_[0]-m)<Tl?x:S):x<=_[1]&&_[1]<=S:M>Al^(m<=_[0]&&_[0]<=w)){var k=Id(h,(-v+y)/p);return Cd(k,f),[_,Nd(k)]}}}function u(e,n){var r=i?t:Al-t,o=0;return e<-r?o|=1:e>r&&(o|=2),n<-r?o|=4:n>r&&(o|=8),o}return Bf(o,(function(t){var e,n,c,s,l;return{lineStart:function(){s=c=!1,l=1},point:function(d,f){var h,v=[d,f],p=o(d,f),g=i?p?0:u(d,f):p?u(d+(d<0?Al:-Al),f):0;if(!e&&(s=c=p)&&t.lineStart(),p!==c&&(!(h=a(e,v))||jf(e,h)||jf(v,h))&&(v[2]=1),p!==c)l=0,p?(t.lineStart(),h=a(v,e),t.point(h[0],h[1])):(h=a(e,v),t.point(h[0],h[1],2),t.lineEnd()),e=h;else if(r&&e&&i^p){var y;g&n||!(y=a(v,e,!0))||(l=0,i?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1],3)))}!p||e&&jf(e,v)||t.point(v[0],v[1]),e=v,c=p,n=g},lineEnd:function(){c&&t.lineEnd(),e=null},clean:function(){return l|(s&&c)<<1}}}),(function(e,i,r,o){Of(o,t,n,r,e,i)}),i?[0,-t]:[-Al,t-Al])}var Qf,Hf,$f,qf,Yf=1e9,Wf=-Yf;function Xf(t,e,n,i){function r(r,o){return t<=r&&r<=n&&e<=o&&o<=i}function o(r,o,u,s){var l=0,d=0;if(null==r||(l=a(r,u))!==(d=a(o,u))||c(r,o)<0^u>0)do{s.point(0===l||3===l?t:n,l>1?i:e)}while((l=(l+u+4)%4)!==d);else s.point(o[0],o[1])}function a(i,r){return Pl(i[0]-t)<Tl?r>0?0:3:Pl(i[0]-n)<Tl?r>0?2:1:Pl(i[1]-e)<Tl?r>0?1:0:r>0?3:2}function u(t,e){return c(t.x,e.x)}function c(t,e){var n=a(t,1),i=a(e,1);return n!==i?n-i:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}return function(a){var c,s,l,d,f,h,v,p,g,y,_,b=a,m=If(),w={point:x,lineStart:function(){w.point=S,s&&s.push(l=[]),y=!0,g=!1,v=p=NaN},lineEnd:function(){c&&(S(d,f),h&&g&&m.rejoin(),c.push(m.result())),w.point=x,g&&b.lineEnd()},polygonStart:function(){b=m,c=[],s=[],_=!0},polygonEnd:function(){var e=function(){for(var e=0,n=0,r=s.length;n<r;++n)for(var o,a,u=s[n],c=1,l=u.length,d=u[0],f=d[0],h=d[1];c<l;++c)o=f,a=h,f=(d=u[c])[0],h=d[1],a<=i?h>i&&(f-o)*(i-a)>(h-a)*(t-o)&&++e:h<=i&&(f-o)*(i-a)<(h-a)*(t-o)&&--e;return e}(),n=_&&e,r=(c=At(c)).length;(n||r)&&(a.polygonStart(),n&&(a.lineStart(),o(null,null,1,a),a.lineEnd()),r&&zf(c,u,e,o,a),a.polygonEnd()),b=a,c=s=l=null}};function x(t,e){r(t,e)&&b.point(t,e)}function S(o,a){var u=r(o,a);if(s&&l.push([o,a]),y)d=o,f=a,h=u,y=!1,u&&(b.lineStart(),b.point(o,a));else if(u&&g)b.point(o,a);else{var c=[v=Math.max(Wf,Math.min(Yf,v)),p=Math.max(Wf,Math.min(Yf,p))],m=[o=Math.max(Wf,Math.min(Yf,o)),a=Math.max(Wf,Math.min(Yf,a))];!function(t,e,n,i,r,o){var a,u=t[0],c=t[1],s=0,l=1,d=e[0]-u,f=e[1]-c;if(a=n-u,d||!(a>0)){if(a/=d,d<0){if(a<s)return;a<l&&(l=a)}else if(d>0){if(a>l)return;a>s&&(s=a)}if(a=r-u,d||!(a<0)){if(a/=d,d<0){if(a>l)return;a>s&&(s=a)}else if(d>0){if(a<s)return;a<l&&(l=a)}if(a=i-c,f||!(a>0)){if(a/=f,f<0){if(a<s)return;a<l&&(l=a)}else if(f>0){if(a>l)return;a>s&&(s=a)}if(a=o-c,f||!(a<0)){if(a/=f,f<0){if(a>l)return;a>s&&(s=a)}else if(f>0){if(a<s)return;a<l&&(l=a)}return s>0&&(t[0]=u+s*d,t[1]=c+s*f),l<1&&(e[0]=u+l*d,e[1]=c+l*f),!0}}}}}(c,m,t,e,n,i)?u&&(b.lineStart(),b.point(o,a),_=!1):(g||(b.lineStart(),b.point(c[0],c[1])),b.point(m[0],m[1]),u||b.lineEnd(),_=!1)}v=o,p=a,g=u}return w}}function Jf(){var t,e,n,i=0,r=0,o=960,a=500;return n={stream:function(n){return t&&e===n?t:t=Xf(i,r,o,a)(e=n)},extent:function(u){return arguments.length?(i=+u[0][0],r=+u[0][1],o=+u[1][0],a=+u[1][1],t=e=null,n):[[i,r],[o,a]]}}}var Zf={sphere:Xl,point:Xl,lineStart:function(){Zf.point=eh,Zf.lineEnd=th},lineEnd:Xl,polygonStart:Xl,polygonEnd:Xl};function th(){Zf.point=Zf.lineEnd=Xl}function eh(t,e){Hf=t*=jl,$f=Kl(e*=jl),qf=Vl(e),Zf.point=nh}function nh(t,e){t*=jl;var n=Kl(e*=jl),i=Vl(e),r=Pl(t-Hf),o=Vl(r),a=i*Kl(r),u=qf*n-$f*i*o,c=$f*n+qf*i*o;Qf.add(Dl(Hl(a*a+u*u),c)),Hf=t,$f=n,qf=i}function ih(t){return Qf=new A,id(t,Zf),+Qf}var rh=[null,null],oh={type:"LineString",coordinates:rh};function ah(t,e){return rh[0]=t,rh[1]=e,ih(oh)}var uh={Feature:function(t,e){return sh(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,i=-1,r=n.length;++i<r;)if(sh(n[i].geometry,e))return!0;return!1}},ch={Sphere:function(){return!0},Point:function(t,e){return lh(t.coordinates,e)},MultiPoint:function(t,e){for(var n=t.coordinates,i=-1,r=n.length;++i<r;)if(lh(n[i],e))return!0;return!1},LineString:function(t,e){return dh(t.coordinates,e)},MultiLineString:function(t,e){for(var n=t.coordinates,i=-1,r=n.length;++i<r;)if(dh(n[i],e))return!0;return!1},Polygon:function(t,e){return fh(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,i=-1,r=n.length;++i<r;)if(fh(n[i],e))return!0;return!1},GeometryCollection:function(t,e){for(var n=t.geometries,i=-1,r=n.length;++i<r;)if(sh(n[i],e))return!0;return!1}};function sh(t,e){return!(!t||!ch.hasOwnProperty(t.type))&&ch[t.type](t,e)}function lh(t,e){return 0===ah(t,e)}function dh(t,e){for(var n,i,r,o=0,a=t.length;o<a;o++){if(0===(i=ah(t[o],e)))return!0;if(o>0&&(r=ah(t[o],t[o-1]))>0&&n<=r&&i<=r&&(n+i-r)*(1-Math.pow((n-i)/r,2))<Nl*r)return!0;n=i}return!1}function fh(t,e){return!!Lf(t.map(hh),vh(e))}function hh(t){return(t=t.map(vh)).pop(),t}function vh(t){return[t[0]*jl,t[1]*jl]}function ph(t,e){return(t&&uh.hasOwnProperty(t.type)?uh[t.type]:sh)(t,e)}function gh(t,e,n){var i=It(t,e-Tl,n).concat(e);return function(t){return i.map((function(e){return[t,e]}))}}function yh(t,e,n){var i=It(t,e-Tl,n).concat(e);return function(t){return i.map((function(e){return[e,t]}))}}function _h(){var t,e,n,i,r,o,a,u,c,s,l,d,f=10,h=f,v=90,p=360,g=2.5;function y(){return{type:"MultiLineString",coordinates:_()}}function _(){return It(Ll(i/v)*v,n,v).map(l).concat(It(Ll(u/p)*p,a,p).map(d)).concat(It(Ll(e/f)*f,t,f).filter((function(t){return Pl(t%v)>Tl})).map(c)).concat(It(Ll(o/h)*h,r,h).filter((function(t){return Pl(t%p)>Tl})).map(s))}return y.lines=function(){return _().map((function(t){return{type:"LineString",coordinates:t}}))},y.outline=function(){return{type:"Polygon",coordinates:[l(i).concat(d(a).slice(1),l(n).reverse().slice(1),d(u).reverse().slice(1))]}},y.extent=function(t){return arguments.length?y.extentMajor(t).extentMinor(t):y.extentMinor()},y.extentMajor=function(t){return arguments.length?(i=+t[0][0],n=+t[1][0],u=+t[0][1],a=+t[1][1],i>n&&(t=i,i=n,n=t),u>a&&(t=u,u=a,a=t),y.precision(g)):[[i,u],[n,a]]},y.extentMinor=function(n){return arguments.length?(e=+n[0][0],t=+n[1][0],o=+n[0][1],r=+n[1][1],e>t&&(n=e,e=t,t=n),o>r&&(n=o,o=r,r=n),y.precision(g)):[[e,o],[t,r]]},y.step=function(t){return arguments.length?y.stepMajor(t).stepMinor(t):y.stepMinor()},y.stepMajor=function(t){return arguments.length?(v=+t[0],p=+t[1],y):[v,p]},y.stepMinor=function(t){return arguments.length?(f=+t[0],h=+t[1],y):[f,h]},y.precision=function(f){return arguments.length?(g=+f,c=gh(o,r,90),s=yh(e,t,g),l=gh(u,a,90),d=yh(i,n,g),y):g},y.extentMajor([[-180,-90+Tl],[180,90-Tl]]).extentMinor([[-180,-80-Tl],[180,80+Tl]])}function bh(){return _h()()}function mh(t,e){var n=t[0]*jl,i=t[1]*jl,r=e[0]*jl,o=e[1]*jl,a=Vl(i),u=Kl(i),c=Vl(o),s=Kl(o),l=a*Vl(n),d=a*Kl(n),f=c*Vl(r),h=c*Kl(r),v=2*Yl(Hl(Wl(o-i)+a*c*Wl(r-n))),p=Kl(v),g=v?function(t){var e=Kl(t*=v)/p,n=Kl(v-t)/p,i=n*l+e*f,r=n*d+e*h,o=n*u+e*s;return[Dl(r,i)*Il,Dl(o,Hl(i*i+r*r))*Il]}:function(){return[n*Il,i*Il]};return g.distance=v,g}const wh=t=>t;var xh,Sh,Mh,Eh,kh=new A,Th=new A,Nh={point:Xl,lineStart:Xl,lineEnd:Xl,polygonStart:function(){Nh.lineStart=Ah,Nh.lineEnd=Ch},polygonEnd:function(){Nh.lineStart=Nh.lineEnd=Nh.point=Xl,kh.add(Pl(Th)),Th=new A},result:function(){var t=kh/2;return kh=new A,t}};function Ah(){Nh.point=Oh}function Oh(t,e){Nh.point=Rh,xh=Mh=t,Sh=Eh=e}function Rh(t,e){Th.add(Eh*t-Mh*e),Mh=t,Eh=e}function Ch(){Rh(xh,Sh)}const Ih=Nh;var jh=1/0,Ph=jh,zh=-jh,Dh=zh,Vh={point:function(t,e){t<jh&&(jh=t),t>zh&&(zh=t),e<Ph&&(Ph=e),e>Dh&&(Dh=e)},lineStart:Xl,lineEnd:Xl,polygonStart:Xl,polygonEnd:Xl,result:function(){var t=[[jh,Ph],[zh,Dh]];return zh=Dh=-(Ph=jh=1/0),t}};const Lh=Vh;var Bh,Fh,Gh,Uh,Kh=0,Qh=0,Hh=0,$h=0,qh=0,Yh=0,Wh=0,Xh=0,Jh=0,Zh={point:tv,lineStart:ev,lineEnd:rv,polygonStart:function(){Zh.lineStart=ov,Zh.lineEnd=av},polygonEnd:function(){Zh.point=tv,Zh.lineStart=ev,Zh.lineEnd=rv},result:function(){var t=Jh?[Wh/Jh,Xh/Jh]:Yh?[$h/Yh,qh/Yh]:Hh?[Kh/Hh,Qh/Hh]:[NaN,NaN];return Kh=Qh=Hh=$h=qh=Yh=Wh=Xh=Jh=0,t}};function tv(t,e){Kh+=t,Qh+=e,++Hh}function ev(){Zh.point=nv}function nv(t,e){Zh.point=iv,tv(Gh=t,Uh=e)}function iv(t,e){var n=t-Gh,i=e-Uh,r=Hl(n*n+i*i);$h+=r*(Gh+t)/2,qh+=r*(Uh+e)/2,Yh+=r,tv(Gh=t,Uh=e)}function rv(){Zh.point=tv}function ov(){Zh.point=uv}function av(){cv(Bh,Fh)}function uv(t,e){Zh.point=cv,tv(Bh=Gh=t,Fh=Uh=e)}function cv(t,e){var n=t-Gh,i=e-Uh,r=Hl(n*n+i*i);$h+=r*(Gh+t)/2,qh+=r*(Uh+e)/2,Yh+=r,Wh+=(r=Uh*t-Gh*e)*(Gh+t),Xh+=r*(Uh+e),Jh+=3*r,tv(Gh=t,Uh=e)}const sv=Zh;function lv(t){this._context=t}lv.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,Cl)}},result:Xl};var dv,fv,hv,vv,pv,gv=new A,yv={point:Xl,lineStart:function(){yv.point=_v},lineEnd:function(){dv&&bv(fv,hv),yv.point=Xl},polygonStart:function(){dv=!0},polygonEnd:function(){dv=null},result:function(){var t=+gv;return gv=new A,t}};function _v(t,e){yv.point=bv,fv=vv=t,hv=pv=e}function bv(t,e){vv-=t,pv-=e,gv.add(Hl(vv*vv+pv*pv)),vv=t,pv=e}const mv=yv;let wv,xv,Sv,Mv;class Ev{constructor(t){this._append=null==t?kv:function(t){const e=Math.floor(t);if(!(e>=0))throw new RangeError(`invalid digits: ${t}`);if(e>15)return kv;if(e!==wv){const t=10**e;wv=e,xv=function(e){let n=1;this._+=e[0];for(const i=e.length;n<i;++n)this._+=Math.round(arguments[n]*t)/t+e[n]}}return xv}(t),this._radius=4.5,this._=""}pointRadius(t){return this._radius=+t,this}polygonStart(){this._line=0}polygonEnd(){this._line=NaN}lineStart(){this._point=0}lineEnd(){0===this._line&&(this._+="Z"),this._point=NaN}point(t,e){switch(this._point){case 0:this._append`M${t},${e}`,this._point=1;break;case 1:this._append`L${t},${e}`;break;default:if(this._append`M${t},${e}`,this._radius!==Sv||this._append!==xv){const t=this._radius,e=this._;this._="",this._append`m0,${t}a${t},${t} 0 1,1 0,${-2*t}a${t},${t} 0 1,1 0,${2*t}z`,Sv=t,xv=this._append,Mv=this._,this._=e}this._+=Mv}}result(){const t=this._;return this._="",t.length?t:null}}function kv(t){let e=1;this._+=t[0];for(const n=t.length;e<n;++e)this._+=arguments[e]+t[e]}function Tv(t,e){let n,i,r=3,o=4.5;function a(t){return t&&("function"==typeof o&&i.pointRadius(+o.apply(this,arguments)),id(t,n(i))),i.result()}return a.area=function(t){return id(t,n(Ih)),Ih.result()},a.measure=function(t){return id(t,n(mv)),mv.result()},a.bounds=function(t){return id(t,n(Lh)),Lh.result()},a.centroid=function(t){return id(t,n(sv)),sv.result()},a.projection=function(e){return arguments.length?(n=null==e?(t=null,wh):(t=e).stream,a):t},a.context=function(t){return arguments.length?(i=null==t?(e=null,new Ev(r)):new lv(e=t),"function"!=typeof o&&i.pointRadius(o),a):e},a.pointRadius=function(t){return arguments.length?(o="function"==typeof t?t:(i.pointRadius(+t),+t),a):o},a.digits=function(t){if(!arguments.length)return r;if(null==t)r=null;else{const e=Math.floor(t);if(!(e>=0))throw new RangeError(`invalid digits: ${t}`);r=e}return null===e&&(i=new Ev(r)),a},a.projection(t).digits(r).context(e)}function Nv(t){return{stream:Av(t)}}function Av(t){return function(e){var n=new Ov;for(var i in t)n[i]=t[i];return n.stream=e,n}}function Ov(){}function Rv(t,e,n){var i=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=i&&t.clipExtent(null),id(n,t.stream(Lh)),e(Lh.result()),null!=i&&t.clipExtent(i),t}function Cv(t,e,n){return Rv(t,(function(n){var i=e[1][0]-e[0][0],r=e[1][1]-e[0][1],o=Math.min(i/(n[1][0]-n[0][0]),r/(n[1][1]-n[0][1])),a=+e[0][0]+(i-o*(n[1][0]+n[0][0]))/2,u=+e[0][1]+(r-o*(n[1][1]+n[0][1]))/2;t.scale(150*o).translate([a,u])}),n)}function Iv(t,e,n){return Cv(t,[[0,0],e],n)}function jv(t,e,n){return Rv(t,(function(n){var i=+e,r=i/(n[1][0]-n[0][0]),o=(i-r*(n[1][0]+n[0][0]))/2,a=-r*n[0][1];t.scale(150*r).translate([o,a])}),n)}function Pv(t,e,n){return Rv(t,(function(n){var i=+e,r=i/(n[1][1]-n[0][1]),o=-r*n[0][0],a=(i-r*(n[1][1]+n[0][1]))/2;t.scale(150*r).translate([o,a])}),n)}Ov.prototype={constructor:Ov,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var zv=16,Dv=Vl(30*jl);function Vv(t,e){return+e?function(t,e){function n(i,r,o,a,u,c,s,l,d,f,h,v,p,g){var y=s-i,_=l-r,b=y*y+_*_;if(b>4*e&&p--){var m=a+f,w=u+h,x=c+v,S=Hl(m*m+w*w+x*x),M=Yl(x/=S),E=Pl(Pl(x)-1)<Tl||Pl(o-d)<Tl?(o+d)/2:Dl(w,m),k=t(E,M),T=k[0],N=k[1],A=T-i,O=N-r,R=_*A-y*O;(R*R/b>e||Pl((y*A+_*O)/b-.5)>.3||a*f+u*h+c*v<Dv)&&(n(i,r,o,a,u,c,T,N,E,m/=S,w/=S,x,p,g),g.point(T,N),n(T,N,E,m,w,x,s,l,d,f,h,v,p,g))}}return function(e){var i,r,o,a,u,c,s,l,d,f,h,v,p={point:g,lineStart:y,lineEnd:b,polygonStart:function(){e.polygonStart(),p.lineStart=m},polygonEnd:function(){e.polygonEnd(),p.lineStart=y}};function g(n,i){n=t(n,i),e.point(n[0],n[1])}function y(){l=NaN,p.point=_,e.lineStart()}function _(i,r){var o=Ad([i,r]),a=t(i,r);n(l,d,s,f,h,v,l=a[0],d=a[1],s=i,f=o[0],h=o[1],v=o[2],zv,e),e.point(l,d)}function b(){p.point=g,e.lineEnd()}function m(){y(),p.point=w,p.lineEnd=x}function w(t,e){_(i=t,e),r=l,o=d,a=f,u=h,c=v,p.point=_}function x(){n(l,d,s,f,h,v,r,o,i,a,u,c,zv,e),p.lineEnd=b,b()}return p}}(t,e):function(t){return Av({point:function(e,n){e=t(e,n),this.stream.point(e[0],e[1])}})}(t)}var Lv=Av({point:function(t,e){this.stream.point(t*jl,e*jl)}});function Bv(t,e,n,i,r,o){if(!o)return function(t,e,n,i,r){function o(o,a){return[e+t*(o*=i),n-t*(a*=r)]}return o.invert=function(o,a){return[(o-e)/t*i,(n-a)/t*r]},o}(t,e,n,i,r);var a=Vl(o),u=Kl(o),c=a*t,s=u*t,l=a/t,d=u/t,f=(u*n-a*e)/t,h=(u*e+a*n)/t;function v(t,o){return[c*(t*=i)-s*(o*=r)+e,n-s*t-c*o]}return v.invert=function(t,e){return[i*(l*t-d*e+f),r*(h-d*t-l*e)]},v}function Fv(t){return Gv((function(){return t}))()}function Gv(t){var e,n,i,r,o,a,u,c,s,l,d=150,f=480,h=250,v=0,p=0,g=0,y=0,_=0,b=0,m=1,w=1,x=null,S=Uf,M=null,E=wh,k=.5;function T(t){return c(t[0]*jl,t[1]*jl)}function N(t){return(t=c.invert(t[0],t[1]))&&[t[0]*Il,t[1]*Il]}function A(){var t=Bv(d,0,0,m,w,b).apply(null,e(v,p)),i=Bv(d,f-t[0],h-t[1],m,w,b);return n=Ef(g,y,_),u=Sf(e,i),c=Sf(n,u),a=Vv(u,k),O()}function O(){return s=l=null,T}return T.stream=function(t){return s&&l===t?s:s=Lv(function(t){return Av({point:function(e,n){var i=t(e,n);return this.stream.point(i[0],i[1])}})}(n)(S(a(E(l=t)))))},T.preclip=function(t){return arguments.length?(S=t,x=void 0,O()):S},T.postclip=function(t){return arguments.length?(E=t,M=i=r=o=null,O()):E},T.clipAngle=function(t){return arguments.length?(S=+t?Kf(x=t*jl):(x=null,Uf),O()):x*Il},T.clipExtent=function(t){return arguments.length?(E=null==t?(M=i=r=o=null,wh):Xf(M=+t[0][0],i=+t[0][1],r=+t[1][0],o=+t[1][1]),O()):null==M?null:[[M,i],[r,o]]},T.scale=function(t){return arguments.length?(d=+t,A()):d},T.translate=function(t){return arguments.length?(f=+t[0],h=+t[1],A()):[f,h]},T.center=function(t){return arguments.length?(v=t[0]%360*jl,p=t[1]%360*jl,A()):[v*Il,p*Il]},T.rotate=function(t){return arguments.length?(g=t[0]%360*jl,y=t[1]%360*jl,_=t.length>2?t[2]%360*jl:0,A()):[g*Il,y*Il,_*Il]},T.angle=function(t){return arguments.length?(b=t%360*jl,A()):b*Il},T.reflectX=function(t){return arguments.length?(m=t?-1:1,A()):m<0},T.reflectY=function(t){return arguments.length?(w=t?-1:1,A()):w<0},T.precision=function(t){return arguments.length?(a=Vv(u,k=t*t),O()):Hl(k)},T.fitExtent=function(t,e){return Cv(T,t,e)},T.fitSize=function(t,e){return Iv(T,t,e)},T.fitWidth=function(t,e){return jv(T,t,e)},T.fitHeight=function(t,e){return Pv(T,t,e)},function(){return e=t.apply(this,arguments),T.invert=e.invert&&N,A()}}function Uv(t){var e=0,n=Al/3,i=Gv(t),r=i(e,n);return r.parallels=function(t){return arguments.length?i(e=t[0]*jl,n=t[1]*jl):[e*Il,n*Il]},r}function Kv(t,e){var n=Kl(t),i=(n+Kl(e))/2;if(Pl(i)<Tl)return function(t){var e=Vl(t);function n(t,n){return[t*e,Kl(n)/e]}return n.invert=function(t,n){return[t/e,Yl(n*e)]},n}(t);var r=1+n*(2*i-n),o=Hl(r)/i;function a(t,e){var n=Hl(r-2*i*Kl(e))/i;return[n*Kl(t*=i),o-n*Vl(t)]}return a.invert=function(t,e){var n=o-e,a=Dl(t,Pl(n))*Ql(n);return n*i<0&&(a-=Al*Ql(t)*Ql(n)),[a/i,Yl((r-(t*t+n*n)*i*i)/(2*i))]},a}function Qv(){return Uv(Kv).scale(155.424).center([0,33.6442])}function Hv(){return Qv().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function $v(){var t,e,n,i,r,o,a=Hv(),u=Qv().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=Qv().rotate([157,0]).center([-3,19.9]).parallels([8,18]),s={point:function(t,e){o=[t,e]}};function l(t){var e=t[0],a=t[1];return o=null,n.point(e,a),o||(i.point(e,a),o)||(r.point(e,a),o)}function d(){return t=e=null,l}return l.invert=function(t){var e=a.scale(),n=a.translate(),i=(t[0]-n[0])/e,r=(t[1]-n[1])/e;return(r>=.12&&r<.234&&i>=-.425&&i<-.214?u:r>=.166&&r<.234&&i>=-.214&&i<-.115?c:a).invert(t)},l.stream=function(n){return t&&e===n?t:(i=[a.stream(e=n),u.stream(n),c.stream(n)],r=i.length,t={point:function(t,e){for(var n=-1;++n<r;)i[n].point(t,e)},sphere:function(){for(var t=-1;++t<r;)i[t].sphere()},lineStart:function(){for(var t=-1;++t<r;)i[t].lineStart()},lineEnd:function(){for(var t=-1;++t<r;)i[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<r;)i[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<r;)i[t].polygonEnd()}});var i,r},l.precision=function(t){return arguments.length?(a.precision(t),u.precision(t),c.precision(t),d()):a.precision()},l.scale=function(t){return arguments.length?(a.scale(t),u.scale(.35*t),c.scale(t),l.translate(a.translate())):a.scale()},l.translate=function(t){if(!arguments.length)return a.translate();var e=a.scale(),o=+t[0],l=+t[1];return n=a.translate(t).clipExtent([[o-.455*e,l-.238*e],[o+.455*e,l+.238*e]]).stream(s),i=u.translate([o-.307*e,l+.201*e]).clipExtent([[o-.425*e+Tl,l+.12*e+Tl],[o-.214*e-Tl,l+.234*e-Tl]]).stream(s),r=c.translate([o-.205*e,l+.212*e]).clipExtent([[o-.214*e+Tl,l+.166*e+Tl],[o-.115*e-Tl,l+.234*e-Tl]]).stream(s),d()},l.fitExtent=function(t,e){return Cv(l,t,e)},l.fitSize=function(t,e){return Iv(l,t,e)},l.fitWidth=function(t,e){return jv(l,t,e)},l.fitHeight=function(t,e){return Pv(l,t,e)},l.scale(1070)}function qv(t){return function(e,n){var i=Vl(e),r=Vl(n),o=t(i*r);return o===1/0?[2,0]:[o*r*Kl(e),o*Kl(n)]}}function Yv(t){return function(e,n){var i=Hl(e*e+n*n),r=t(i),o=Kl(r),a=Vl(r);return[Dl(e*o,i*a),Yl(i&&n*o/i)]}}var Wv=qv((function(t){return Hl(2/(1+t))}));function Xv(){return Fv(Wv).scale(124.75).clipAngle(179.999)}Wv.invert=Yv((function(t){return 2*Yl(t/2)}));var Jv=qv((function(t){return(t=ql(t))&&t/Kl(t)}));function Zv(){return Fv(Jv).scale(79.4188).clipAngle(179.999)}function tp(t,e){return[t,Gl($l((Ol+e)/2))]}function ep(){return np(tp).scale(961/Cl)}function np(t){var e,n,i,r=Fv(t),o=r.center,a=r.scale,u=r.translate,c=r.clipExtent,s=null;function l(){var o=Al*a(),u=r(Af(r.rotate()).invert([0,0]));return c(null==s?[[u[0]-o,u[1]-o],[u[0]+o,u[1]+o]]:t===tp?[[Math.max(u[0]-o,s),e],[Math.min(u[0]+o,n),i]]:[[s,Math.max(u[1]-o,e)],[n,Math.min(u[1]+o,i)]])}return r.scale=function(t){return arguments.length?(a(t),l()):a()},r.translate=function(t){return arguments.length?(u(t),l()):u()},r.center=function(t){return arguments.length?(o(t),l()):o()},r.clipExtent=function(t){return arguments.length?(null==t?s=e=n=i=null:(s=+t[0][0],e=+t[0][1],n=+t[1][0],i=+t[1][1]),l()):null==s?null:[[s,e],[n,i]]},l()}function ip(t){return $l((Ol+t)/2)}function rp(t,e){var n=Vl(t),i=t===e?Kl(t):Gl(n/Vl(e))/Gl(ip(e)/ip(t)),r=n*Ul(ip(t),i)/i;if(!i)return tp;function o(t,e){r>0?e<-Ol+Tl&&(e=-Ol+Tl):e>Ol-Tl&&(e=Ol-Tl);var n=r/Ul(ip(e),i);return[n*Kl(i*t),r-n*Vl(i*t)]}return o.invert=function(t,e){var n=r-e,o=Ql(i)*Hl(t*t+n*n),a=Dl(t,Pl(n))*Ql(n);return n*i<0&&(a-=Al*Ql(t)*Ql(n)),[a/i,2*zl(Ul(r/o,1/i))-Ol]},o}function op(){return Uv(rp).scale(109.5).parallels([30,30])}function ap(t,e){return[t,e]}function up(){return Fv(ap).scale(152.63)}function cp(t,e){var n=Vl(t),i=t===e?Kl(t):(n-Vl(e))/(e-t),r=n/i+t;if(Pl(i)<Tl)return ap;function o(t,e){var n=r-e,o=i*t;return[n*Kl(o),r-n*Vl(o)]}return o.invert=function(t,e){var n=r-e,o=Dl(t,Pl(n))*Ql(n);return n*i<0&&(o-=Al*Ql(t)*Ql(n)),[o/i,r-Ql(i)*Hl(t*t+n*n)]},o}function sp(){return Uv(cp).scale(131.154).center([0,13.9389])}Jv.invert=Yv((function(t){return t})),tp.invert=function(t,e){return[t,2*zl(Bl(e))-Ol]},ap.invert=ap;var lp=1.340264,dp=-.081106,fp=893e-6,hp=.003796,vp=Hl(3)/2;function pp(t,e){var n=Yl(vp*Kl(e)),i=n*n,r=i*i*i;return[t*Vl(n)/(vp*(lp+3*dp*i+r*(7*fp+9*hp*i))),n*(lp+dp*i+r*(fp+hp*i))]}function gp(){return Fv(pp).scale(177.158)}function yp(t,e){var n=Vl(e),i=Vl(t)*n;return[n*Kl(t)/i,Kl(e)/i]}function _p(){return Fv(yp).scale(144.049).clipAngle(60)}function bp(){var t,e,n,i,r,o,a,u=1,c=0,s=0,l=1,d=1,f=0,h=null,v=1,p=1,g=Av({point:function(t,e){var n=b([t,e]);this.stream.point(n[0],n[1])}}),y=wh;function _(){return v=u*l,p=u*d,o=a=null,b}function b(n){var i=n[0]*v,r=n[1]*p;if(f){var o=r*t-i*e;i=i*t+r*e,r=o}return[i+c,r+s]}return b.invert=function(n){var i=n[0]-c,r=n[1]-s;if(f){var o=r*t+i*e;i=i*t-r*e,r=o}return[i/v,r/p]},b.stream=function(t){return o&&a===t?o:o=g(y(a=t))},b.postclip=function(t){return arguments.length?(y=t,h=n=i=r=null,_()):y},b.clipExtent=function(t){return arguments.length?(y=null==t?(h=n=i=r=null,wh):Xf(h=+t[0][0],n=+t[0][1],i=+t[1][0],r=+t[1][1]),_()):null==h?null:[[h,n],[i,r]]},b.scale=function(t){return arguments.length?(u=+t,_()):u},b.translate=function(t){return arguments.length?(c=+t[0],s=+t[1],_()):[c,s]},b.angle=function(n){return arguments.length?(e=Kl(f=n%360*jl),t=Vl(f),_()):f*Il},b.reflectX=function(t){return arguments.length?(l=t?-1:1,_()):l<0},b.reflectY=function(t){return arguments.length?(d=t?-1:1,_()):d<0},b.fitExtent=function(t,e){return Cv(b,t,e)},b.fitSize=function(t,e){return Iv(b,t,e)},b.fitWidth=function(t,e){return jv(b,t,e)},b.fitHeight=function(t,e){return Pv(b,t,e)},b}function mp(t,e){var n=e*e,i=n*n;return[t*(.8707-.131979*n+i*(i*(.003971*n-.001529*i)-.013791)),e*(1.007226+n*(.015085+i*(.028874*n-.044475-.005916*i)))]}function wp(){return Fv(mp).scale(175.295)}function xp(t,e){return[Vl(e)*Kl(t),Kl(e)]}function Sp(){return Fv(xp).scale(249.5).clipAngle(90+Tl)}function Mp(t,e){var n=Vl(e),i=1+Vl(t)*n;return[n*Kl(t)/i,Kl(e)/i]}function Ep(){return Fv(Mp).scale(250).clipAngle(142)}function kp(t,e){return[Gl($l((Ol+e)/2)),-t]}function Tp(){var t=np(kp),e=t.center,n=t.rotate;return t.center=function(t){return arguments.length?e([-t[1],t[0]]):[(t=e())[1],-t[0]]},t.rotate=function(t){return arguments.length?n([t[0],t[1],t.length>2?t[2]+90:90]):[(t=n())[0],t[1],t[2]-90]},n([0,0,90]).scale(159.155)}function Np(t,e){return t.parent===e.parent?1:2}function Ap(t,e){return t+e.x}function Op(t,e){return Math.max(t,e.y)}function Rp(){var t=Np,e=1,n=1,i=!1;function r(r){var o,a=0;r.eachAfter((function(e){var n=e.children;n?(e.x=function(t){return t.reduce(Ap,0)/t.length}(n),e.y=function(t){return 1+t.reduce(Op,0)}(n)):(e.x=o?a+=t(e,o):0,e.y=0,o=e)}));var u=function(t){for(var e;e=t.children;)t=e[0];return t}(r),c=function(t){for(var e;e=t.children;)t=e[e.length-1];return t}(r),s=u.x-t(u,c)/2,l=c.x+t(c,u)/2;return r.eachAfter(i?function(t){t.x=(t.x-r.x)*e,t.y=(r.y-t.y)*n}:function(t){t.x=(t.x-s)/(l-s)*e,t.y=(1-(r.y?t.y/r.y:1))*n})}return r.separation=function(e){return arguments.length?(t=e,r):t},r.size=function(t){return arguments.length?(i=!1,e=+t[0],n=+t[1],r):i?null:[e,n]},r.nodeSize=function(t){return arguments.length?(i=!0,e=+t[0],n=+t[1],r):i?[e,n]:null},r}function Cp(t){var e=0,n=t.children,i=n&&n.length;if(i)for(;--i>=0;)e+=n[i].value;else e=1;t.value=e}function Ip(t,e){t instanceof Map?(t=[void 0,t],void 0===e&&(e=Pp)):void 0===e&&(e=jp);for(var n,i,r,o,a,u=new Vp(t),c=[u];n=c.pop();)if((r=e(n.data))&&(a=(r=Array.from(r)).length))for(n.children=r,o=a-1;o>=0;--o)c.push(i=r[o]=new Vp(r[o])),i.parent=n,i.depth=n.depth+1;return u.eachBefore(Dp)}function jp(t){return t.children}function Pp(t){return Array.isArray(t)?t[1]:null}function zp(t){void 0!==t.data.value&&(t.value=t.data.value),t.data=t.data.data}function Dp(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function Vp(t){this.data=t,this.depth=this.height=0,this.parent=null}function Lp(t){return null==t?null:Bp(t)}function Bp(t){if("function"!=typeof t)throw new Error;return t}function Fp(){return 0}function Gp(t){return function(){return t}}pp.invert=function(t,e){for(var n,i=e,r=i*i,o=r*r*r,a=0;a<12&&(o=(r=(i-=n=(i*(lp+dp*r+o*(fp+hp*r))-e)/(lp+3*dp*r+o*(7*fp+9*hp*r)))*i)*r*r,!(Pl(n)<Nl));++a);return[vp*t*(lp+3*dp*r+o*(7*fp+9*hp*r))/Vl(i),Yl(Kl(i)/vp)]},yp.invert=Yv(zl),mp.invert=function(t,e){var n,i=e,r=25;do{var o=i*i,a=o*o;i-=n=(i*(1.007226+o*(.015085+a*(.028874*o-.044475-.005916*a)))-e)/(1.007226+o*(.045255+a*(.259866*o-.311325-.005916*11*a)))}while(Pl(n)>Tl&&--r>0);return[t/(.8707+(o=i*i)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),i]},xp.invert=Yv(Yl),Mp.invert=Yv((function(t){return 2*zl(t)})),kp.invert=function(t,e){return[-e,2*zl(Bl(t))-Ol]},Vp.prototype=Ip.prototype={constructor:Vp,count:function(){return this.eachAfter(Cp)},each:function(t,e){let n=-1;for(const i of this)t.call(e,i,++n,this);return this},eachAfter:function(t,e){for(var n,i,r,o=this,a=[o],u=[],c=-1;o=a.pop();)if(u.push(o),n=o.children)for(i=0,r=n.length;i<r;++i)a.push(n[i]);for(;o=u.pop();)t.call(e,o,++c,this);return this},eachBefore:function(t,e){for(var n,i,r=this,o=[r],a=-1;r=o.pop();)if(t.call(e,r,++a,this),n=r.children)for(i=n.length-1;i>=0;--i)o.push(n[i]);return this},find:function(t,e){let n=-1;for(const i of this)if(t.call(e,i,++n,this))return i},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,i=e.children,r=i&&i.length;--r>=0;)n+=i[r].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),i=e.ancestors(),r=null;for(t=n.pop(),e=i.pop();t===e;)r=t,t=n.pop(),e=i.pop();return r}(e,t),i=[e];e!==n;)e=e.parent,i.push(e);for(var r=i.length;t!==n;)i.splice(r,0,t),t=t.parent;return i},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){return Array.from(this)},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return Ip(this).eachBefore(zp)},[Symbol.iterator]:function*(){var t,e,n,i,r=this,o=[r];do{for(t=o.reverse(),o=[];r=t.pop();)if(yield r,e=r.children)for(n=0,i=e.length;n<i;++n)o.push(e[n])}while(o.length)}};const Up=1664525,Kp=1013904223,Qp=4294967296;function Hp(){let t=1;return()=>(t=(Up*t+Kp)%Qp)/Qp}function $p(t){return qp(t,Hp())}function qp(t,e){for(var n,i,r=0,o=(t=function(t,e){let n,i,r=t.length;for(;r;)i=e()*r--|0,n=t[r],t[r]=t[i],t[i]=n;return t}(Array.from(t),e)).length,a=[];r<o;)n=t[r],i&&Xp(i,n)?++r:(i=Zp(a=Yp(a,n)),r=0);return i}function Yp(t,e){var n,i;if(Jp(e,t))return[e];for(n=0;n<t.length;++n)if(Wp(e,t[n])&&Jp(tg(t[n],e),t))return[t[n],e];for(n=0;n<t.length-1;++n)for(i=n+1;i<t.length;++i)if(Wp(tg(t[n],t[i]),e)&&Wp(tg(t[n],e),t[i])&&Wp(tg(t[i],e),t[n])&&Jp(eg(t[n],t[i],e),t))return[t[n],t[i],e];throw new Error}function Wp(t,e){var n=t.r-e.r,i=e.x-t.x,r=e.y-t.y;return n<0||n*n<i*i+r*r}function Xp(t,e){var n=t.r-e.r+1e-9*Math.max(t.r,e.r,1),i=e.x-t.x,r=e.y-t.y;return n>0&&n*n>i*i+r*r}function Jp(t,e){for(var n=0;n<e.length;++n)if(!Xp(t,e[n]))return!1;return!0}function Zp(t){switch(t.length){case 1:return function(t){return{x:t.x,y:t.y,r:t.r}}(t[0]);case 2:return tg(t[0],t[1]);case 3:return eg(t[0],t[1],t[2])}}function tg(t,e){var n=t.x,i=t.y,r=t.r,o=e.x,a=e.y,u=e.r,c=o-n,s=a-i,l=u-r,d=Math.sqrt(c*c+s*s);return{x:(n+o+c/d*l)/2,y:(i+a+s/d*l)/2,r:(d+r+u)/2}}function eg(t,e,n){var i=t.x,r=t.y,o=t.r,a=e.x,u=e.y,c=e.r,s=n.x,l=n.y,d=n.r,f=i-a,h=i-s,v=r-u,p=r-l,g=c-o,y=d-o,_=i*i+r*r-o*o,b=_-a*a-u*u+c*c,m=_-s*s-l*l+d*d,w=h*v-f*p,x=(v*m-p*b)/(2*w)-i,S=(p*g-v*y)/w,M=(h*b-f*m)/(2*w)-r,E=(f*y-h*g)/w,k=S*S+E*E-1,T=2*(o+x*S+M*E),N=x*x+M*M-o*o,A=-(Math.abs(k)>1e-6?(T+Math.sqrt(T*T-4*k*N))/(2*k):N/T);return{x:i+x+S*A,y:r+M+E*A,r:A}}function ng(t,e,n){var i,r,o,a,u=t.x-e.x,c=t.y-e.y,s=u*u+c*c;s?(r=e.r+n.r,r*=r,a=t.r+n.r,r>(a*=a)?(i=(s+a-r)/(2*s),o=Math.sqrt(Math.max(0,a/s-i*i)),n.x=t.x-i*u-o*c,n.y=t.y-i*c+o*u):(i=(s+r-a)/(2*s),o=Math.sqrt(Math.max(0,r/s-i*i)),n.x=e.x+i*u-o*c,n.y=e.y+i*c+o*u)):(n.x=e.x+n.r,n.y=e.y)}function ig(t,e){var n=t.r+e.r-1e-6,i=e.x-t.x,r=e.y-t.y;return n>0&&n*n>i*i+r*r}function rg(t){var e=t._,n=t.next._,i=e.r+n.r,r=(e.x*n.r+n.x*e.r)/i,o=(e.y*n.r+n.y*e.r)/i;return r*r+o*o}function og(t){this._=t,this.next=null,this.previous=null}function ag(t,e){if(!(a=(n=t,t="object"==typeof n&&"length"in n?n:Array.from(n)).length))return 0;var n,i,r,o,a,u,c,s,l,d,f,h;if((i=t[0]).x=0,i.y=0,!(a>1))return i.r;if(r=t[1],i.x=-r.r,r.x=i.r,r.y=0,!(a>2))return i.r+r.r;ng(r,i,o=t[2]),i=new og(i),r=new og(r),o=new og(o),i.next=o.previous=r,r.next=i.previous=o,o.next=r.previous=i;t:for(s=3;s<a;++s){ng(i._,r._,o=t[s]),o=new og(o),l=r.next,d=i.previous,f=r._.r,h=i._.r;do{if(f<=h){if(ig(l._,o._)){r=l,i.next=r,r.previous=i,--s;continue t}f+=l._.r,l=l.next}else{if(ig(d._,o._)){(i=d).next=r,r.previous=i,--s;continue t}h+=d._.r,d=d.previous}}while(l!==d.next);for(o.previous=i,o.next=r,i.next=r.previous=r=o,u=rg(i);(o=o.next)!==r;)(c=rg(o))<u&&(i=o,u=c);r=i.next}for(i=[r._],o=r;(o=o.next)!==r;)i.push(o._);for(o=qp(i,e),s=0;s<a;++s)(i=t[s]).x-=o.x,i.y-=o.y;return o.r}function ug(t){return ag(t,Hp()),t}function cg(t){return Math.sqrt(t.value)}function sg(){var t=null,e=1,n=1,i=Fp;function r(r){const o=Hp();return r.x=e/2,r.y=n/2,t?r.eachBefore(lg(t)).eachAfter(dg(i,.5,o)).eachBefore(fg(1)):r.eachBefore(lg(cg)).eachAfter(dg(Fp,1,o)).eachAfter(dg(i,r.r/Math.min(e,n),o)).eachBefore(fg(Math.min(e,n)/(2*r.r))),r}return r.radius=function(e){return arguments.length?(t=Lp(e),r):t},r.size=function(t){return arguments.length?(e=+t[0],n=+t[1],r):[e,n]},r.padding=function(t){return arguments.length?(i="function"==typeof t?t:Gp(+t),r):i},r}function lg(t){return function(e){e.children||(e.r=Math.max(0,+t(e)||0))}}function dg(t,e,n){return function(i){if(r=i.children){var r,o,a,u=r.length,c=t(i)*e||0;if(c)for(o=0;o<u;++o)r[o].r+=c;if(a=ag(r,n),c)for(o=0;o<u;++o)r[o].r-=c;i.r=a+c}}}function fg(t){return function(e){var n=e.parent;e.r*=t,n&&(e.x=n.x+t*e.x,e.y=n.y+t*e.y)}}function hg(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)}function vg(t,e,n,i,r){for(var o,a=t.children,u=-1,c=a.length,s=t.value&&(i-e)/t.value;++u<c;)(o=a[u]).y0=n,o.y1=r,o.x0=e,o.x1=e+=o.value*s}function pg(){var t=1,e=1,n=0,i=!1;function r(r){var o=r.height+1;return r.x0=r.y0=n,r.x1=t,r.y1=e/o,r.eachBefore(function(t,e){return function(i){i.children&&vg(i,i.x0,t*(i.depth+1)/e,i.x1,t*(i.depth+2)/e);var r=i.x0,o=i.y0,a=i.x1-n,u=i.y1-n;a<r&&(r=a=(r+a)/2),u<o&&(o=u=(o+u)/2),i.x0=r,i.y0=o,i.x1=a,i.y1=u}}(e,o)),i&&r.eachBefore(hg),r}return r.round=function(t){return arguments.length?(i=!!t,r):i},r.size=function(n){return arguments.length?(t=+n[0],e=+n[1],r):[t,e]},r.padding=function(t){return arguments.length?(n=+t,r):n},r}var gg={depth:-1},yg={},_g={};function bg(t){return t.id}function mg(t){return t.parentId}function wg(){var t,e=bg,n=mg;function i(i){var r,o,a,u,c,s,l,d,f=Array.from(i),h=e,v=n,p=new Map;if(null!=t){const e=f.map(((e,n)=>function(t){let e=(t=`${t}`).length;return Sg(t,e-1)&&!Sg(t,e-2)&&(t=t.slice(0,-1)),"/"===t[0]?t:`/${t}`}(t(e,n,i)))),n=e.map(xg),r=new Set(e).add("");for(const t of n)r.has(t)||(r.add(t),e.push(t),n.push(xg(t)),f.push(_g));h=(t,n)=>e[n],v=(t,e)=>n[e]}for(a=0,r=f.length;a<r;++a)o=f[a],s=f[a]=new Vp(o),null!=(l=h(o,a,i))&&(l+="")&&(d=s.id=l,p.set(d,p.has(d)?yg:s)),null!=(l=v(o,a,i))&&(l+="")&&(s.parent=l);for(a=0;a<r;++a)if(l=(s=f[a]).parent){if(!(c=p.get(l)))throw new Error("missing: "+l);if(c===yg)throw new Error("ambiguous: "+l);c.children?c.children.push(s):c.children=[s],s.parent=c}else{if(u)throw new Error("multiple roots");u=s}if(!u)throw new Error("no root");if(null!=t){for(;u.data===_g&&1===u.children.length;)u=u.children[0],--r;for(let t=f.length-1;t>=0&&(s=f[t]).data===_g;--t)s.data=null}if(u.parent=gg,u.eachBefore((function(t){t.depth=t.parent.depth+1,--r})).eachBefore(Dp),u.parent=null,r>0)throw new Error("cycle");return u}return i.id=function(t){return arguments.length?(e=Lp(t),i):e},i.parentId=function(t){return arguments.length?(n=Lp(t),i):n},i.path=function(e){return arguments.length?(t=Lp(e),i):t},i}function xg(t){let e=t.length;if(e<2)return"";for(;--e>1&&!Sg(t,e););return t.slice(0,e)}function Sg(t,e){if("/"===t[e]){let n=0;for(;e>0&&"\\"===t[--e];)++n;if(0==(1&n))return!0}return!1}function Mg(t,e){return t.parent===e.parent?1:2}function Eg(t){var e=t.children;return e?e[0]:t.t}function kg(t){var e=t.children;return e?e[e.length-1]:t.t}function Tg(t,e,n){var i=n/(e.i-t.i);e.c-=i,e.s+=n,t.c+=i,e.z+=n,e.m+=n}function Ng(t,e,n){return t.a.parent===e.parent?t.a:n}function Ag(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}function Og(){var t=Mg,e=1,n=1,i=null;function r(r){var c=function(t){for(var e,n,i,r,o,a=new Ag(t,0),u=[a];e=u.pop();)if(i=e._.children)for(e.children=new Array(o=i.length),r=o-1;r>=0;--r)u.push(n=e.children[r]=new Ag(i[r],r)),n.parent=e;return(a.parent=new Ag(null,0)).children=[a],a}(r);if(c.eachAfter(o),c.parent.m=-c.z,c.eachBefore(a),i)r.eachBefore(u);else{var s=r,l=r,d=r;r.eachBefore((function(t){t.x<s.x&&(s=t),t.x>l.x&&(l=t),t.depth>d.depth&&(d=t)}));var f=s===l?1:t(s,l)/2,h=f-s.x,v=e/(l.x+f+h),p=n/(d.depth||1);r.eachBefore((function(t){t.x=(t.x+h)*v,t.y=t.depth*p}))}return r}function o(e){var n=e.children,i=e.parent.children,r=e.i?i[e.i-1]:null;if(n){!function(t){for(var e,n=0,i=0,r=t.children,o=r.length;--o>=0;)(e=r[o]).z+=n,e.m+=n,n+=e.s+(i+=e.c)}(e);var o=(n[0].z+n[n.length-1].z)/2;r?(e.z=r.z+t(e._,r._),e.m=e.z-o):e.z=o}else r&&(e.z=r.z+t(e._,r._));e.parent.A=function(e,n,i){if(n){for(var r,o=e,a=e,u=n,c=o.parent.children[0],s=o.m,l=a.m,d=u.m,f=c.m;u=kg(u),o=Eg(o),u&&o;)c=Eg(c),(a=kg(a)).a=e,(r=u.z+d-o.z-s+t(u._,o._))>0&&(Tg(Ng(u,e,i),e,r),s+=r,l+=r),d+=u.m,s+=o.m,f+=c.m,l+=a.m;u&&!kg(a)&&(a.t=u,a.m+=d-l),o&&!Eg(c)&&(c.t=o,c.m+=s-f,i=e)}return i}(e,r,e.parent.A||i[0])}function a(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function u(t){t.x*=e,t.y=t.depth*n}return r.separation=function(e){return arguments.length?(t=e,r):t},r.size=function(t){return arguments.length?(i=!1,e=+t[0],n=+t[1],r):i?null:[e,n]},r.nodeSize=function(t){return arguments.length?(i=!0,e=+t[0],n=+t[1],r):i?[e,n]:null},r}function Rg(t,e,n,i,r){for(var o,a=t.children,u=-1,c=a.length,s=t.value&&(r-n)/t.value;++u<c;)(o=a[u]).x0=e,o.x1=i,o.y0=n,o.y1=n+=o.value*s}Ag.prototype=Object.create(Vp.prototype);var Cg=(1+Math.sqrt(5))/2;function Ig(t,e,n,i,r,o){for(var a,u,c,s,l,d,f,h,v,p,g,y=[],_=e.children,b=0,m=0,w=_.length,x=e.value;b<w;){c=r-n,s=o-i;do{l=_[m++].value}while(!l&&m<w);for(d=f=l,g=l*l*(p=Math.max(s/c,c/s)/(x*t)),v=Math.max(f/g,g/d);m<w;++m){if(l+=u=_[m].value,u<d&&(d=u),u>f&&(f=u),g=l*l*p,(h=Math.max(f/g,g/d))>v){l-=u;break}v=h}y.push(a={value:l,dice:c<s,children:_.slice(b,m)}),a.dice?vg(a,n,i,r,x?i+=s*l/x:o):Rg(a,n,i,x?n+=c*l/x:r,o),x-=l,b=m}return y}const jg=function t(e){function n(t,n,i,r,o){Ig(e,t,n,i,r,o)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(Cg);function Pg(){var t=jg,e=!1,n=1,i=1,r=[0],o=Fp,a=Fp,u=Fp,c=Fp,s=Fp;function l(t){return t.x0=t.y0=0,t.x1=n,t.y1=i,t.eachBefore(d),r=[0],e&&t.eachBefore(hg),t}function d(e){var n=r[e.depth],i=e.x0+n,l=e.y0+n,d=e.x1-n,f=e.y1-n;d<i&&(i=d=(i+d)/2),f<l&&(l=f=(l+f)/2),e.x0=i,e.y0=l,e.x1=d,e.y1=f,e.children&&(n=r[e.depth+1]=o(e)/2,i+=s(e)-n,l+=a(e)-n,(d-=u(e)-n)<i&&(i=d=(i+d)/2),(f-=c(e)-n)<l&&(l=f=(l+f)/2),t(e,i,l,d,f))}return l.round=function(t){return arguments.length?(e=!!t,l):e},l.size=function(t){return arguments.length?(n=+t[0],i=+t[1],l):[n,i]},l.tile=function(e){return arguments.length?(t=Bp(e),l):t},l.padding=function(t){return arguments.length?l.paddingInner(t).paddingOuter(t):l.paddingInner()},l.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:Gp(+t),l):o},l.paddingOuter=function(t){return arguments.length?l.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):l.paddingTop()},l.paddingTop=function(t){return arguments.length?(a="function"==typeof t?t:Gp(+t),l):a},l.paddingRight=function(t){return arguments.length?(u="function"==typeof t?t:Gp(+t),l):u},l.paddingBottom=function(t){return arguments.length?(c="function"==typeof t?t:Gp(+t),l):c},l.paddingLeft=function(t){return arguments.length?(s="function"==typeof t?t:Gp(+t),l):s},l}function zg(t,e,n,i,r){var o,a,u=t.children,c=u.length,s=new Array(c+1);for(s[0]=a=o=0;o<c;++o)s[o+1]=a+=u[o].value;!function t(e,n,i,r,o,a,c){if(e>=n-1){var l=u[e];return l.x0=r,l.y0=o,l.x1=a,void(l.y1=c)}for(var d=s[e],f=i/2+d,h=e+1,v=n-1;h<v;){var p=h+v>>>1;s[p]<f?h=p+1:v=p}f-s[h-1]<s[h]-f&&e+1<h&&--h;var g=s[h]-d,y=i-g;if(a-r>c-o){var _=i?(r*y+a*g)/i:a;t(e,h,g,r,o,_,c),t(h,n,y,_,o,a,c)}else{var b=i?(o*y+c*g)/i:c;t(e,h,g,r,o,a,b),t(h,n,y,r,b,a,c)}}(0,c,t.value,e,n,i,r)}function Dg(t,e,n,i,r){(1&t.depth?Rg:vg)(t,e,n,i,r)}const Vg=function t(e){function n(t,n,i,r,o){if((a=t._squarify)&&a.ratio===e)for(var a,u,c,s,l,d=-1,f=a.length,h=t.value;++d<f;){for(c=(u=a[d]).children,s=u.value=0,l=c.length;s<l;++s)u.value+=c[s].value;u.dice?vg(u,n,i,r,h?i+=(o-i)*u.value/h:o):Rg(u,n,i,h?n+=(r-n)*u.value/h:r,o),h-=u.value}else t._squarify=a=Ig(e,t,n,i,r,o),a.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(Cg);function Lg(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}function Bg(t,e){var n=Pi(+t,+e);return function(t){var e=n(t);return e-360*Math.floor(e/360)}}function Fg(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}function Gg(t){return((t=Math.exp(t))+1/t)/2}const Ug=function t(e,n,i){function r(t,r){var o,a,u=t[0],c=t[1],s=t[2],l=r[0],d=r[1],f=r[2],h=l-u,v=d-c,p=h*h+v*v;if(p<1e-12)a=Math.log(f/s)/e,o=function(t){return[u+t*h,c+t*v,s*Math.exp(e*t*a)]};else{var g=Math.sqrt(p),y=(f*f-s*s+i*p)/(2*s*n*g),_=(f*f-s*s-i*p)/(2*f*n*g),b=Math.log(Math.sqrt(y*y+1)-y),m=Math.log(Math.sqrt(_*_+1)-_);a=(m-b)/e,o=function(t){var i,r=t*a,o=Gg(b),l=s/(n*g)*(o*(i=e*r+b,((i=Math.exp(2*i))-1)/(i+1))-function(t){return((t=Math.exp(t))-1/t)/2}(b));return[u+l*h,c+l*v,s*o/Gg(e*r+b)]}}return o.duration=1e3*a*e/Math.SQRT2,o}return r.rho=function(e){var n=Math.max(.001,+e),i=n*n;return t(n,i,i*i)},r}(Math.SQRT2,2,4);function Kg(t){return function(e,n){var i=t((e=Ei(e)).h,(n=Ei(n)).h),r=zi(e.s,n.s),o=zi(e.l,n.l),a=zi(e.opacity,n.opacity);return function(t){return e.h=i(t),e.s=r(t),e.l=o(t),e.opacity=a(t),e+""}}}const Qg=Kg(Pi);var Hg=Kg(zi);function $g(t,e){var n=zi((t=Da(t)).l,(e=Da(e)).l),i=zi(t.a,e.a),r=zi(t.b,e.b),o=zi(t.opacity,e.opacity);return function(e){return t.l=n(e),t.a=i(e),t.b=r(e),t.opacity=o(e),t+""}}function qg(t){return function(e,n){var i=t((e=Qa(e)).h,(n=Qa(n)).h),r=zi(e.c,n.c),o=zi(e.l,n.l),a=zi(e.opacity,n.opacity);return function(t){return e.h=i(t),e.c=r(t),e.l=o(t),e.opacity=a(t),e+""}}}const Yg=qg(Pi);var Wg=qg(zi);function Xg(t){return function e(n){function i(e,i){var r=t((e=nu(e)).h,(i=nu(i)).h),o=zi(e.s,i.s),a=zi(e.l,i.l),u=zi(e.opacity,i.opacity);return function(t){return e.h=r(t),e.s=o(t),e.l=a(Math.pow(t,n)),e.opacity=u(t),e+""}}return n=+n,i.gamma=e,i}(1)}const Jg=Xg(Pi);var Zg=Xg(zi);function ty(t,e){void 0===e&&(e=t,t=Xi);for(var n=0,i=e.length-1,r=e[0],o=new Array(i<0?0:i);n<i;)o[n]=t(r,r=e[++n]);return function(t){var e=Math.max(0,Math.min(i-1,Math.floor(t*=i)));return o[e](t-e)}}function ey(t,e){for(var n=new Array(e),i=0;i<e;++i)n[i]=t(i/(e-1));return n}function ny(t){for(var e,n=-1,i=t.length,r=t[i-1],o=0;++n<i;)e=r,r=t[n],o+=e[1]*r[0]-e[0]*r[1];return o/2}function iy(t){for(var e,n,i=-1,r=t.length,o=0,a=0,u=t[r-1],c=0;++i<r;)e=u,u=t[i],c+=n=e[0]*u[1]-u[0]*e[1],o+=(e[0]+u[0])*n,a+=(e[1]+u[1])*n;return[o/(c*=3),a/c]}function ry(t,e,n){return(e[0]-t[0])*(n[1]-t[1])-(e[1]-t[1])*(n[0]-t[0])}function oy(t,e){return t[0]-e[0]||t[1]-e[1]}function ay(t){const e=t.length,n=[0,1];let i,r=2;for(i=2;i<e;++i){for(;r>1&&ry(t[n[r-2]],t[n[r-1]],t[i])<=0;)--r;n[r++]=i}return n.slice(0,r)}function uy(t){if((n=t.length)<3)return null;var e,n,i=new Array(n),r=new Array(n);for(e=0;e<n;++e)i[e]=[+t[e][0],+t[e][1],e];for(i.sort(oy),e=0;e<n;++e)r[e]=[i[e][0],-i[e][1]];var o=ay(i),a=ay(r),u=a[0]===o[0],c=a[a.length-1]===o[o.length-1],s=[];for(e=o.length-1;e>=0;--e)s.push(t[i[o[e]][2]]);for(e=+u;e<a.length-c;++e)s.push(t[i[a[e]][2]]);return s}function cy(t,e){for(var n,i,r=t.length,o=t[r-1],a=e[0],u=e[1],c=o[0],s=o[1],l=!1,d=0;d<r;++d)n=(o=t[d])[0],(i=o[1])>u!=s>u&&a<(c-n)*(u-i)/(s-i)+n&&(l=!l),c=n,s=i;return l}function sy(t){for(var e,n,i=-1,r=t.length,o=t[r-1],a=o[0],u=o[1],c=0;++i<r;)e=a,n=u,e-=a=(o=t[i])[0],n-=u=o[1],c+=Math.hypot(e,n);return c}const ly=Math.random,dy=function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(ly),fy=function t(e){function n(t,n){return arguments.length<2&&(n=t,t=0),t=Math.floor(t),n=Math.floor(n)-t,function(){return Math.floor(e()*n+t)}}return n.source=t,n}(ly),hy=function t(e){function n(t,n){var i,r;return t=null==t?0:+t,n=null==n?1:+n,function(){var o;if(null!=i)o=i,i=null;else do{i=2*e()-1,o=2*e()-1,r=i*i+o*o}while(!r||r>1);return t+n*o*Math.sqrt(-2*Math.log(r)/r)}}return n.source=t,n}(ly),vy=function t(e){var n=hy.source(e);function i(){var t=n.apply(this,arguments);return function(){return Math.exp(t())}}return i.source=t,i}(ly),py=function t(e){function n(t){return(t=+t)<=0?()=>0:function(){for(var n=0,i=t;i>1;--i)n+=e();return n+i*e()}}return n.source=t,n}(ly),gy=function t(e){var n=py.source(e);function i(t){if(0==(t=+t))return e;var i=n(t);return function(){return i()/t}}return i.source=t,i}(ly),yy=function t(e){function n(t){return function(){return-Math.log1p(-e())/t}}return n.source=t,n}(ly),_y=function t(e){function n(t){if((t=+t)<0)throw new RangeError("invalid alpha");return t=1/-t,function(){return Math.pow(1-e(),t)}}return n.source=t,n}(ly),by=function t(e){function n(t){if((t=+t)<0||t>1)throw new RangeError("invalid p");return function(){return Math.floor(e()+t)}}return n.source=t,n}(ly),my=function t(e){function n(t){if((t=+t)<0||t>1)throw new RangeError("invalid p");return 0===t?()=>1/0:1===t?()=>1:(t=Math.log1p(-t),function(){return 1+Math.floor(Math.log1p(-e())/t)})}return n.source=t,n}(ly),wy=function t(e){var n=hy.source(e)();function i(t,i){if((t=+t)<0)throw new RangeError("invalid k");if(0===t)return()=>0;if(i=null==i?1:+i,1===t)return()=>-Math.log1p(-e())*i;var r=(t<1?t+1:t)-1/3,o=1/(3*Math.sqrt(r)),a=t<1?()=>Math.pow(e(),1/t):()=>1;return function(){do{do{var t=n(),u=1+o*t}while(u<=0);u*=u*u;var c=1-e()}while(c>=1-.0331*t*t*t*t&&Math.log(c)>=.5*t*t+r*(1-u+Math.log(u)));return r*u*a()*i}}return i.source=t,i}(ly),xy=function t(e){var n=wy.source(e);function i(t,e){var i=n(t),r=n(e);return function(){var t=i();return 0===t?0:t/(t+r())}}return i.source=t,i}(ly),Sy=function t(e){var n=my.source(e),i=xy.source(e);function r(t,e){return t=+t,(e=+e)>=1?()=>t:e<=0?()=>0:function(){for(var r=0,o=t,a=e;o*a>16&&o*(1-a)>16;){var u=Math.floor((o+1)*a),c=i(u,o-u+1)();c<=a?(r+=u,o-=u,a=(a-c)/(1-c)):(o=u-1,a/=c)}for(var s=a<.5,l=n(s?a:1-a),d=l(),f=0;d<=o;++f)d+=l();return r+(s?f:o-f)}}return r.source=t,r}(ly),My=function t(e){function n(t,n,i){var r;return 0==(t=+t)?r=t=>-Math.log(t):(t=1/t,r=e=>Math.pow(e,t)),n=null==n?0:+n,i=null==i?1:+i,function(){return n+i*r(-Math.log1p(-e()))}}return n.source=t,n}(ly),Ey=function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,function(){return t+n*Math.tan(Math.PI*e())}}return n.source=t,n}(ly),ky=function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,function(){var i=e();return t+n*Math.log(i/(1-i))}}return n.source=t,n}(ly),Ty=function t(e){var n=wy.source(e),i=Sy.source(e);function r(t){return function(){for(var r=0,o=t;o>16;){var a=Math.floor(.875*o),u=n(a)();if(u>o)return r+i(a-1,o/u)();r+=a,o-=u}for(var c=-Math.log1p(-e()),s=0;c<=o;++s)c-=Math.log1p(-e());return r+s}}return r.source=t,r}(ly),Ny=1664525,Ay=1013904223,Oy=1/4294967296;function Ry(t=Math.random()){let e=0|(0<=t&&t<1?t/Oy:Math.abs(t));return()=>(e=Ny*e+Ay|0,Oy*(e>>>0))}function Cy(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function Iy(t,e){switch(arguments.length){case 0:break;case 1:"function"==typeof t?this.interpolator(t):this.range(t);break;default:this.domain(t),"function"==typeof e?this.interpolator(e):this.range(e)}return this}const jy=Symbol("implicit");function Py(){var t=new C,e=[],n=[],i=jy;function r(r){let o=t.get(r);if(void 0===o){if(i!==jy)return i;t.set(r,o=e.push(r)-1)}return n[o%n.length]}return r.domain=function(n){if(!arguments.length)return e.slice();e=[],t=new C;for(const i of n)t.has(i)||t.set(i,e.push(i)-1);return r},r.range=function(t){return arguments.length?(n=Array.from(t),r):n.slice()},r.unknown=function(t){return arguments.length?(i=t,r):i},r.copy=function(){return Py(e,n).unknown(i)},Cy.apply(r,arguments),r}function zy(){var t,e,n=Py().unknown(void 0),i=n.domain,r=n.range,o=0,a=1,u=!1,c=0,s=0,l=.5;function d(){var n=i().length,d=a<o,f=d?a:o,h=d?o:a;t=(h-f)/Math.max(1,n-c+2*s),u&&(t=Math.floor(t)),f+=(h-f-t*(n-c))*l,e=t*(1-c),u&&(f=Math.round(f),e=Math.round(e));var v=It(n).map((function(e){return f+t*e}));return r(d?v.reverse():v)}return delete n.unknown,n.domain=function(t){return arguments.length?(i(t),d()):i()},n.range=function(t){return arguments.length?([o,a]=t,o=+o,a=+a,d()):[o,a]},n.rangeRound=function(t){return[o,a]=t,o=+o,a=+a,u=!0,d()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(u=!!t,d()):u},n.padding=function(t){return arguments.length?(c=Math.min(1,s=+t),d()):c},n.paddingInner=function(t){return arguments.length?(c=Math.min(1,t),d()):c},n.paddingOuter=function(t){return arguments.length?(s=+t,d()):s},n.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),d()):l},n.copy=function(){return zy(i(),[o,a]).round(u).paddingInner(c).paddingOuter(s).align(l)},Cy.apply(d(),arguments)}function Dy(t){var e=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return Dy(e())},t}function Vy(){return Dy(zy.apply(null,arguments).paddingInner(1))}function Ly(t){return+t}var By=[0,1];function Fy(t){return t}function Gy(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=isNaN(e)?NaN:.5,function(){return n});var n}function Uy(t,e,n){var i=t[0],r=t[1],o=e[0],a=e[1];return r<i?(i=Gy(r,i),o=n(a,o)):(i=Gy(i,r),o=n(o,a)),function(t){return o(i(t))}}function Ky(t,e,n){var i=Math.min(t.length,e.length)-1,r=new Array(i),o=new Array(i),a=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<i;)r[a]=Gy(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=f(t,e,1,i)-1;return o[n](r[n](e))}}function Qy(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Hy(){var t,e,n,i,r,o,a=By,u=By,c=Xi,s=Fy;function l(){var t=Math.min(a.length,u.length);return s!==Fy&&(s=function(t,e){var n;return t>e&&(n=t,t=e,e=n),function(n){return Math.max(t,Math.min(e,n))}}(a[0],a[t-1])),i=t>2?Ky:Uy,r=o=null,d}function d(e){return null==e||isNaN(e=+e)?n:(r||(r=i(a.map(t),u,c)))(t(s(e)))}return d.invert=function(n){return s(e((o||(o=i(u,a.map(t),Hi)))(n)))},d.domain=function(t){return arguments.length?(a=Array.from(t,Ly),l()):a.slice()},d.range=function(t){return arguments.length?(u=Array.from(t),l()):u.slice()},d.rangeRound=function(t){return u=Array.from(t),c=Fg,l()},d.clamp=function(t){return arguments.length?(s=!!t||Fy,l()):s!==Fy},d.interpolate=function(t){return arguments.length?(c=t,l()):c},d.unknown=function(t){return arguments.length?(n=t,d):n},function(n,i){return t=n,e=i,l()}}function $y(){return Hy()(Fy,Fy)}function qy(t,e,n,i){var r,o=lt(t,e,n);switch((i=fl(null==i?",f":i)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=i.precision||isNaN(r=El(o,a))||(i.precision=r),bl(i,a);case"":case"e":case"g":case"p":case"r":null!=i.precision||isNaN(r=kl(o,Math.max(Math.abs(t),Math.abs(e))))||(i.precision=r-("e"===i.type));break;case"f":case"%":null!=i.precision||isNaN(r=Ml(o))||(i.precision=r-2*("%"===i.type))}return _l(i)}function Yy(t){var e=t.domain;return t.ticks=function(t){var n=e();return ct(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var i=e();return qy(i[0],i[i.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var i,r,o=e(),a=0,u=o.length-1,c=o[a],s=o[u],l=10;for(s<c&&(r=c,c=s,s=r,r=a,a=u,u=r);l-- >0;){if((r=st(c,s,n))===i)return o[a]=c,o[u]=s,e(o);if(r>0)c=Math.floor(c/r)*r,s=Math.ceil(s/r)*r;else{if(!(r<0))break;c=Math.ceil(c*r)/r,s=Math.floor(s*r)/r}i=r}return t},t}function Wy(){var t=$y();return t.copy=function(){return Qy(t,Wy())},Cy.apply(t,arguments),Yy(t)}function Xy(t){var e;function n(t){return null==t||isNaN(t=+t)?e:t}return n.invert=n,n.domain=n.range=function(e){return arguments.length?(t=Array.from(e,Ly),n):t.slice()},n.unknown=function(t){return arguments.length?(e=t,n):e},n.copy=function(){return Xy(t).unknown(e)},t=arguments.length?Array.from(t,Ly):[0,1],Yy(n)}function Jy(t,e){var n,i=0,r=(t=t.slice()).length-1,o=t[i],a=t[r];return a<o&&(n=i,i=r,r=n,n=o,o=a,a=n),t[i]=e.floor(o),t[r]=e.ceil(a),t}function Zy(t){return Math.log(t)}function t_(t){return Math.exp(t)}function e_(t){return-Math.log(-t)}function n_(t){return-Math.exp(-t)}function i_(t){return isFinite(t)?+("1e"+t):t<0?0:t}function r_(t){return(e,n)=>-t(-e,n)}function o_(t){const e=t(Zy,t_),n=e.domain;let i,r,o=10;function a(){return i=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),e=>Math.log(e)/t)}(o),r=function(t){return 10===t?i_:t===Math.E?Math.exp:e=>Math.pow(t,e)}(o),n()[0]<0?(i=r_(i),r=r_(r),t(e_,n_)):t(Zy,t_),e}return e.base=function(t){return arguments.length?(o=+t,a()):o},e.domain=function(t){return arguments.length?(n(t),a()):n()},e.ticks=t=>{const e=n();let a=e[0],u=e[e.length-1];const c=u<a;c&&([a,u]=[u,a]);let s,l,d=i(a),f=i(u);const h=null==t?10:+t;let v=[];if(!(o%1)&&f-d<h){if(d=Math.floor(d),f=Math.ceil(f),a>0){for(;d<=f;++d)for(s=1;s<o;++s)if(l=d<0?s/r(-d):s*r(d),!(l<a)){if(l>u)break;v.push(l)}}else for(;d<=f;++d)for(s=o-1;s>=1;--s)if(l=d>0?s/r(-d):s*r(d),!(l<a)){if(l>u)break;v.push(l)}2*v.length<h&&(v=ct(a,u,h))}else v=ct(d,f,Math.min(f-d,h)).map(r);return c?v.reverse():v},e.tickFormat=(t,n)=>{if(null==t&&(t=10),null==n&&(n=10===o?"s":","),"function"!=typeof n&&(o%1||null!=(n=fl(n)).precision||(n.trim=!0),n=_l(n)),t===1/0)return n;const a=Math.max(1,o*t/e.ticks().length);return t=>{let e=t/r(Math.round(i(t)));return e*o<o-.5&&(e*=o),e<=a?n(t):""}},e.nice=()=>n(Jy(n(),{floor:t=>r(Math.floor(i(t))),ceil:t=>r(Math.ceil(i(t)))})),e}function a_(){const t=o_(Hy()).domain([1,10]);return t.copy=()=>Qy(t,a_()).base(t.base()),Cy.apply(t,arguments),t}function u_(t){return function(e){return Math.sign(e)*Math.log1p(Math.abs(e/t))}}function c_(t){return function(e){return Math.sign(e)*Math.expm1(Math.abs(e))*t}}function s_(t){var e=1,n=t(u_(e),c_(e));return n.constant=function(n){return arguments.length?t(u_(e=+n),c_(e)):e},Yy(n)}function l_(){var t=s_(Hy());return t.copy=function(){return Qy(t,l_()).constant(t.constant())},Cy.apply(t,arguments)}function d_(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function f_(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function h_(t){return t<0?-t*t:t*t}function v_(t){var e=t(Fy,Fy),n=1;return e.exponent=function(e){return arguments.length?1==(n=+e)?t(Fy,Fy):.5===n?t(f_,h_):t(d_(n),d_(1/n)):n},Yy(e)}function p_(){var t=v_(Hy());return t.copy=function(){return Qy(t,p_()).exponent(t.exponent())},Cy.apply(t,arguments),t}function g_(){return p_.apply(null,arguments).exponent(.5)}function y_(t){return Math.sign(t)*t*t}function __(){var t,e=$y(),n=[0,1],i=!1;function r(n){var r=function(t){return Math.sign(t)*Math.sqrt(Math.abs(t))}(e(n));return isNaN(r)?t:i?Math.round(r):r}return r.invert=function(t){return e.invert(y_(t))},r.domain=function(t){return arguments.length?(e.domain(t),r):e.domain()},r.range=function(t){return arguments.length?(e.range((n=Array.from(t,Ly)).map(y_)),r):n.slice()},r.rangeRound=function(t){return r.range(t).round(!0)},r.round=function(t){return arguments.length?(i=!!t,r):i},r.clamp=function(t){return arguments.length?(e.clamp(t),r):e.clamp()},r.unknown=function(e){return arguments.length?(t=e,r):t},r.copy=function(){return __(e.domain(),n).round(i).clamp(e.clamp()).unknown(t)},Cy.apply(r,arguments),Yy(r)}function b_(){var t,e=[],n=[],r=[];function o(){var t=0,i=Math.max(1,n.length);for(r=new Array(i-1);++t<i;)r[t-1]=xt(e,t/i);return a}function a(e){return null==e||isNaN(e=+e)?t:n[f(r,e)]}return a.invertExtent=function(t){var i=n.indexOf(t);return i<0?[NaN,NaN]:[i>0?r[i-1]:e[0],i<r.length?r[i]:e[e.length-1]]},a.domain=function(t){if(!arguments.length)return e.slice();e=[];for(let n of t)null==n||isNaN(n=+n)||e.push(n);return e.sort(i),o()},a.range=function(t){return arguments.length?(n=Array.from(t),o()):n.slice()},a.unknown=function(e){return arguments.length?(t=e,a):t},a.quantiles=function(){return r.slice()},a.copy=function(){return b_().domain(e).range(n).unknown(t)},Cy.apply(a,arguments)}function m_(){var t,e=0,n=1,i=1,r=[.5],o=[0,1];function a(e){return null!=e&&e<=e?o[f(r,e,0,i)]:t}function u(){var t=-1;for(r=new Array(i);++t<i;)r[t]=((t+1)*n-(t-i)*e)/(i+1);return a}return a.domain=function(t){return arguments.length?([e,n]=t,e=+e,n=+n,u()):[e,n]},a.range=function(t){return arguments.length?(i=(o=Array.from(t)).length-1,u()):o.slice()},a.invertExtent=function(t){var a=o.indexOf(t);return a<0?[NaN,NaN]:a<1?[e,r[0]]:a>=i?[r[i-1],n]:[r[a-1],r[a]]},a.unknown=function(e){return arguments.length?(t=e,a):a},a.thresholds=function(){return r.slice()},a.copy=function(){return m_().domain([e,n]).range(o).unknown(t)},Cy.apply(Yy(a),arguments)}function w_(){var t,e=[.5],n=[0,1],i=1;function r(r){return null!=r&&r<=r?n[f(e,r,0,i)]:t}return r.domain=function(t){return arguments.length?(e=Array.from(t),i=Math.min(e.length,n.length-1),r):e.slice()},r.range=function(t){return arguments.length?(n=Array.from(t),i=Math.min(e.length,n.length-1),r):n.slice()},r.invertExtent=function(t){var i=n.indexOf(t);return[e[i-1],e[i]]},r.unknown=function(e){return arguments.length?(t=e,r):t},r.copy=function(){return w_().domain(e).range(n).unknown(t)},Cy.apply(r,arguments)}const x_=1e3,S_=6e4,M_=36e5,E_=864e5,k_=6048e5,T_=31536e6,N_=new Date,A_=new Date;function O_(t,e,n,i){function r(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return r.floor=e=>(t(e=new Date(+e)),e),r.ceil=n=>(t(n=new Date(n-1)),e(n,1),t(n),n),r.round=t=>{const e=r(t),n=r.ceil(t);return t-e<n-t?e:n},r.offset=(t,n)=>(e(t=new Date(+t),null==n?1:Math.floor(n)),t),r.range=(n,i,o)=>{const a=[];if(n=r.ceil(n),o=null==o?1:Math.floor(o),!(n<i&&o>0))return a;let u;do{a.push(u=new Date(+n)),e(n,o),t(n)}while(u<n&&n<i);return a},r.filter=n=>O_((e=>{if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),((t,i)=>{if(t>=t)if(i<0)for(;++i<=0;)for(;e(t,-1),!n(t););else for(;--i>=0;)for(;e(t,1),!n(t););})),n&&(r.count=(e,i)=>(N_.setTime(+e),A_.setTime(+i),t(N_),t(A_),Math.floor(n(N_,A_))),r.every=t=>(t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(i?e=>i(e)%t==0:e=>r.count(0,e)%t==0):r:null)),r}const R_=O_((()=>{}),((t,e)=>{t.setTime(+t+e)}),((t,e)=>e-t));R_.every=t=>(t=Math.floor(t),isFinite(t)&&t>0?t>1?O_((e=>{e.setTime(Math.floor(e/t)*t)}),((e,n)=>{e.setTime(+e+n*t)}),((e,n)=>(n-e)/t)):R_:null);const C_=R_.range,I_=O_((t=>{t.setTime(t-t.getMilliseconds())}),((t,e)=>{t.setTime(+t+e*x_)}),((t,e)=>(e-t)/x_),(t=>t.getUTCSeconds())),j_=I_.range,P_=O_((t=>{t.setTime(t-t.getMilliseconds()-t.getSeconds()*x_)}),((t,e)=>{t.setTime(+t+e*S_)}),((t,e)=>(e-t)/S_),(t=>t.getMinutes())),z_=P_.range,D_=O_((t=>{t.setUTCSeconds(0,0)}),((t,e)=>{t.setTime(+t+e*S_)}),((t,e)=>(e-t)/S_),(t=>t.getUTCMinutes())),V_=D_.range,L_=O_((t=>{t.setTime(t-t.getMilliseconds()-t.getSeconds()*x_-t.getMinutes()*S_)}),((t,e)=>{t.setTime(+t+e*M_)}),((t,e)=>(e-t)/M_),(t=>t.getHours())),B_=L_.range,F_=O_((t=>{t.setUTCMinutes(0,0,0)}),((t,e)=>{t.setTime(+t+e*M_)}),((t,e)=>(e-t)/M_),(t=>t.getUTCHours())),G_=F_.range,U_=O_((t=>t.setHours(0,0,0,0)),((t,e)=>t.setDate(t.getDate()+e)),((t,e)=>(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*S_)/E_),(t=>t.getDate()-1)),K_=U_.range,Q_=O_((t=>{t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+e)}),((t,e)=>(e-t)/E_),(t=>t.getUTCDate()-1)),H_=Q_.range,$_=O_((t=>{t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+e)}),((t,e)=>(e-t)/E_),(t=>Math.floor(t/E_))),q_=$_.range;function Y_(t){return O_((e=>{e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),((t,e)=>{t.setDate(t.getDate()+7*e)}),((t,e)=>(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*S_)/k_))}const W_=Y_(0),X_=Y_(1),J_=Y_(2),Z_=Y_(3),tb=Y_(4),eb=Y_(5),nb=Y_(6),ib=W_.range,rb=X_.range,ob=J_.range,ab=Z_.range,ub=tb.range,cb=eb.range,sb=nb.range;function lb(t){return O_((e=>{e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+7*e)}),((t,e)=>(e-t)/k_))}const db=lb(0),fb=lb(1),hb=lb(2),vb=lb(3),pb=lb(4),gb=lb(5),yb=lb(6),_b=db.range,bb=fb.range,mb=hb.range,wb=vb.range,xb=pb.range,Sb=gb.range,Mb=yb.range,Eb=O_((t=>{t.setDate(1),t.setHours(0,0,0,0)}),((t,e)=>{t.setMonth(t.getMonth()+e)}),((t,e)=>e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())),(t=>t.getMonth())),kb=Eb.range,Tb=O_((t=>{t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCMonth(t.getUTCMonth()+e)}),((t,e)=>e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())),(t=>t.getUTCMonth())),Nb=Tb.range,Ab=O_((t=>{t.setMonth(0,1),t.setHours(0,0,0,0)}),((t,e)=>{t.setFullYear(t.getFullYear()+e)}),((t,e)=>e.getFullYear()-t.getFullYear()),(t=>t.getFullYear()));Ab.every=t=>isFinite(t=Math.floor(t))&&t>0?O_((e=>{e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),((e,n)=>{e.setFullYear(e.getFullYear()+n*t)})):null;const Ob=Ab.range,Rb=O_((t=>{t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCFullYear(t.getUTCFullYear()+e)}),((t,e)=>e.getUTCFullYear()-t.getUTCFullYear()),(t=>t.getUTCFullYear()));Rb.every=t=>isFinite(t=Math.floor(t))&&t>0?O_((e=>{e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),((e,n)=>{e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null;const Cb=Rb.range;function Ib(t,e,n,i,r,a){const u=[[I_,1,x_],[I_,5,5e3],[I_,15,15e3],[I_,30,3e4],[a,1,S_],[a,5,3e5],[a,15,9e5],[a,30,18e5],[r,1,M_],[r,3,108e5],[r,6,216e5],[r,12,432e5],[i,1,E_],[i,2,1728e5],[n,1,k_],[e,1,2592e6],[e,3,7776e6],[t,1,T_]];function c(e,n,i){const r=Math.abs(n-e)/i,a=o((([,,t])=>t)).right(u,r);if(a===u.length)return t.every(lt(e/T_,n/T_,i));if(0===a)return R_.every(Math.max(lt(e,n,i),1));const[c,s]=u[r/u[a-1][2]<u[a][2]/r?a-1:a];return c.every(s)}return[function(t,e,n){const i=e<t;i&&([t,e]=[e,t]);const r=n&&"function"==typeof n.range?n:c(t,e,n),o=r?r.range(t,+e+1):[];return i?o.reverse():o},c]}const[jb,Pb]=Ib(Rb,Tb,db,$_,F_,D_),[zb,Db]=Ib(Ab,Eb,W_,U_,L_,P_);function Vb(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Lb(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Bb(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}function Fb(t){var e=t.dateTime,n=t.date,i=t.time,r=t.periods,o=t.days,a=t.shortDays,u=t.months,c=t.shortMonths,s=Zb(r),l=tm(r),d=Zb(o),f=tm(o),h=Zb(a),v=tm(a),p=Zb(u),g=tm(u),y=Zb(c),_=tm(c),b={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:wm,e:wm,f:km,g:Dm,G:Lm,H:xm,I:Sm,j:Mm,L:Em,m:Tm,M:Nm,p:function(t){return r[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:cw,s:sw,S:Am,u:Om,U:Rm,V:Im,w:jm,W:Pm,x:null,X:null,y:zm,Y:Vm,Z:Bm,"%":uw},m={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:Fm,e:Fm,f:Hm,g:iw,G:ow,H:Gm,I:Um,j:Km,L:Qm,m:$m,M:qm,p:function(t){return r[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:cw,s:sw,S:Ym,u:Wm,U:Xm,V:Zm,w:tw,W:ew,x:null,X:null,y:nw,Y:rw,Z:aw,"%":uw},w={a:function(t,e,n){var i=h.exec(e.slice(n));return i?(t.w=v.get(i[0].toLowerCase()),n+i[0].length):-1},A:function(t,e,n){var i=d.exec(e.slice(n));return i?(t.w=f.get(i[0].toLowerCase()),n+i[0].length):-1},b:function(t,e,n){var i=y.exec(e.slice(n));return i?(t.m=_.get(i[0].toLowerCase()),n+i[0].length):-1},B:function(t,e,n){var i=p.exec(e.slice(n));return i?(t.m=g.get(i[0].toLowerCase()),n+i[0].length):-1},c:function(t,n,i){return M(t,e,n,i)},d:dm,e:dm,f:ym,g:um,G:am,H:hm,I:hm,j:fm,L:gm,m:lm,M:vm,p:function(t,e,n){var i=s.exec(e.slice(n));return i?(t.p=l.get(i[0].toLowerCase()),n+i[0].length):-1},q:sm,Q:bm,s:mm,S:pm,u:nm,U:im,V:rm,w:em,W:om,x:function(t,e,i){return M(t,n,e,i)},X:function(t,e,n){return M(t,i,e,n)},y:um,Y:am,Z:cm,"%":_m};function x(t,e){return function(n){var i,r,o,a=[],u=-1,c=0,s=t.length;for(n instanceof Date||(n=new Date(+n));++u<s;)37===t.charCodeAt(u)&&(a.push(t.slice(c,u)),null!=(r=$b[i=t.charAt(++u)])?i=t.charAt(++u):r="e"===i?" ":"0",(o=e[i])&&(i=o(n,r)),a.push(i),c=u+1);return a.push(t.slice(c,u)),a.join("")}}function S(t,e){return function(n){var i,r,o=Bb(1900,void 0,1);if(M(o,t,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(e&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(r=(i=Lb(Bb(o.y,0,1))).getUTCDay(),i=r>4||0===r?fb.ceil(i):fb(i),i=Q_.offset(i,7*(o.V-1)),o.y=i.getUTCFullYear(),o.m=i.getUTCMonth(),o.d=i.getUTCDate()+(o.w+6)%7):(r=(i=Vb(Bb(o.y,0,1))).getDay(),i=r>4||0===r?X_.ceil(i):X_(i),i=U_.offset(i,7*(o.V-1)),o.y=i.getFullYear(),o.m=i.getMonth(),o.d=i.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),r="Z"in o?Lb(Bb(o.y,0,1)).getUTCDay():Vb(Bb(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(r+5)%7:o.w+7*o.U-(r+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Lb(o)):Vb(o)}}function M(t,e,n,i){for(var r,o,a=0,u=e.length,c=n.length;a<u;){if(i>=c)return-1;if(37===(r=e.charCodeAt(a++))){if(r=e.charAt(a++),!(o=w[r in $b?e.charAt(a++):r])||(i=o(t,n,i))<0)return-1}else if(r!=n.charCodeAt(i++))return-1}return i}return b.x=x(n,b),b.X=x(i,b),b.c=x(e,b),m.x=x(n,m),m.X=x(i,m),m.c=x(e,m),{format:function(t){var e=x(t+="",b);return e.toString=function(){return t},e},parse:function(t){var e=S(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=x(t+="",m);return e.toString=function(){return t},e},utcParse:function(t){var e=S(t+="",!0);return e.toString=function(){return t},e}}}var Gb,Ub,Kb,Qb,Hb,$b={"-":"",_:" ",0:"0"},qb=/^\s*\d+/,Yb=/^%/,Wb=/[\\^$*+?|[\]().{}]/g;function Xb(t,e,n){var i=t<0?"-":"",r=(i?-t:t)+"",o=r.length;return i+(o<n?new Array(n-o+1).join(e)+r:r)}function Jb(t){return t.replace(Wb,"\\$&")}function Zb(t){return new RegExp("^(?:"+t.map(Jb).join("|")+")","i")}function tm(t){return new Map(t.map(((t,e)=>[t.toLowerCase(),e])))}function em(t,e,n){var i=qb.exec(e.slice(n,n+1));return i?(t.w=+i[0],n+i[0].length):-1}function nm(t,e,n){var i=qb.exec(e.slice(n,n+1));return i?(t.u=+i[0],n+i[0].length):-1}function im(t,e,n){var i=qb.exec(e.slice(n,n+2));return i?(t.U=+i[0],n+i[0].length):-1}function rm(t,e,n){var i=qb.exec(e.slice(n,n+2));return i?(t.V=+i[0],n+i[0].length):-1}function om(t,e,n){var i=qb.exec(e.slice(n,n+2));return i?(t.W=+i[0],n+i[0].length):-1}function am(t,e,n){var i=qb.exec(e.slice(n,n+4));return i?(t.y=+i[0],n+i[0].length):-1}function um(t,e,n){var i=qb.exec(e.slice(n,n+2));return i?(t.y=+i[0]+(+i[0]>68?1900:2e3),n+i[0].length):-1}function cm(t,e,n){var i=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return i?(t.Z=i[1]?0:-(i[2]+(i[3]||"00")),n+i[0].length):-1}function sm(t,e,n){var i=qb.exec(e.slice(n,n+1));return i?(t.q=3*i[0]-3,n+i[0].length):-1}function lm(t,e,n){var i=qb.exec(e.slice(n,n+2));return i?(t.m=i[0]-1,n+i[0].length):-1}function dm(t,e,n){var i=qb.exec(e.slice(n,n+2));return i?(t.d=+i[0],n+i[0].length):-1}function fm(t,e,n){var i=qb.exec(e.slice(n,n+3));return i?(t.m=0,t.d=+i[0],n+i[0].length):-1}function hm(t,e,n){var i=qb.exec(e.slice(n,n+2));return i?(t.H=+i[0],n+i[0].length):-1}function vm(t,e,n){var i=qb.exec(e.slice(n,n+2));return i?(t.M=+i[0],n+i[0].length):-1}function pm(t,e,n){var i=qb.exec(e.slice(n,n+2));return i?(t.S=+i[0],n+i[0].length):-1}function gm(t,e,n){var i=qb.exec(e.slice(n,n+3));return i?(t.L=+i[0],n+i[0].length):-1}function ym(t,e,n){var i=qb.exec(e.slice(n,n+6));return i?(t.L=Math.floor(i[0]/1e3),n+i[0].length):-1}function _m(t,e,n){var i=Yb.exec(e.slice(n,n+1));return i?n+i[0].length:-1}function bm(t,e,n){var i=qb.exec(e.slice(n));return i?(t.Q=+i[0],n+i[0].length):-1}function mm(t,e,n){var i=qb.exec(e.slice(n));return i?(t.s=+i[0],n+i[0].length):-1}function wm(t,e){return Xb(t.getDate(),e,2)}function xm(t,e){return Xb(t.getHours(),e,2)}function Sm(t,e){return Xb(t.getHours()%12||12,e,2)}function Mm(t,e){return Xb(1+U_.count(Ab(t),t),e,3)}function Em(t,e){return Xb(t.getMilliseconds(),e,3)}function km(t,e){return Em(t,e)+"000"}function Tm(t,e){return Xb(t.getMonth()+1,e,2)}function Nm(t,e){return Xb(t.getMinutes(),e,2)}function Am(t,e){return Xb(t.getSeconds(),e,2)}function Om(t){var e=t.getDay();return 0===e?7:e}function Rm(t,e){return Xb(W_.count(Ab(t)-1,t),e,2)}function Cm(t){var e=t.getDay();return e>=4||0===e?tb(t):tb.ceil(t)}function Im(t,e){return t=Cm(t),Xb(tb.count(Ab(t),t)+(4===Ab(t).getDay()),e,2)}function jm(t){return t.getDay()}function Pm(t,e){return Xb(X_.count(Ab(t)-1,t),e,2)}function zm(t,e){return Xb(t.getFullYear()%100,e,2)}function Dm(t,e){return Xb((t=Cm(t)).getFullYear()%100,e,2)}function Vm(t,e){return Xb(t.getFullYear()%1e4,e,4)}function Lm(t,e){var n=t.getDay();return Xb((t=n>=4||0===n?tb(t):tb.ceil(t)).getFullYear()%1e4,e,4)}function Bm(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Xb(e/60|0,"0",2)+Xb(e%60,"0",2)}function Fm(t,e){return Xb(t.getUTCDate(),e,2)}function Gm(t,e){return Xb(t.getUTCHours(),e,2)}function Um(t,e){return Xb(t.getUTCHours()%12||12,e,2)}function Km(t,e){return Xb(1+Q_.count(Rb(t),t),e,3)}function Qm(t,e){return Xb(t.getUTCMilliseconds(),e,3)}function Hm(t,e){return Qm(t,e)+"000"}function $m(t,e){return Xb(t.getUTCMonth()+1,e,2)}function qm(t,e){return Xb(t.getUTCMinutes(),e,2)}function Ym(t,e){return Xb(t.getUTCSeconds(),e,2)}function Wm(t){var e=t.getUTCDay();return 0===e?7:e}function Xm(t,e){return Xb(db.count(Rb(t)-1,t),e,2)}function Jm(t){var e=t.getUTCDay();return e>=4||0===e?pb(t):pb.ceil(t)}function Zm(t,e){return t=Jm(t),Xb(pb.count(Rb(t),t)+(4===Rb(t).getUTCDay()),e,2)}function tw(t){return t.getUTCDay()}function ew(t,e){return Xb(fb.count(Rb(t)-1,t),e,2)}function nw(t,e){return Xb(t.getUTCFullYear()%100,e,2)}function iw(t,e){return Xb((t=Jm(t)).getUTCFullYear()%100,e,2)}function rw(t,e){return Xb(t.getUTCFullYear()%1e4,e,4)}function ow(t,e){var n=t.getUTCDay();return Xb((t=n>=4||0===n?pb(t):pb.ceil(t)).getUTCFullYear()%1e4,e,4)}function aw(){return"+0000"}function uw(){return"%"}function cw(t){return+t}function sw(t){return Math.floor(+t/1e3)}function lw(t){return Gb=Fb(t),Ub=Gb.format,Kb=Gb.parse,Qb=Gb.utcFormat,Hb=Gb.utcParse,Gb}function dw(t){return new Date(t)}function fw(t){return t instanceof Date?+t:+new Date(+t)}function hw(t,e,n,i,r,o,a,u,c,s){var l=$y(),d=l.invert,f=l.domain,h=s(".%L"),v=s(":%S"),p=s("%I:%M"),g=s("%I %p"),y=s("%a %d"),_=s("%b %d"),b=s("%B"),m=s("%Y");function w(t){return(c(t)<t?h:u(t)<t?v:a(t)<t?p:o(t)<t?g:i(t)<t?r(t)<t?y:_:n(t)<t?b:m)(t)}return l.invert=function(t){return new Date(d(t))},l.domain=function(t){return arguments.length?f(Array.from(t,fw)):f().map(dw)},l.ticks=function(e){var n=f();return t(n[0],n[n.length-1],null==e?10:e)},l.tickFormat=function(t,e){return null==e?w:s(e)},l.nice=function(t){var n=f();return t&&"function"==typeof t.range||(t=e(n[0],n[n.length-1],null==t?10:t)),t?f(Jy(n,t)):l},l.copy=function(){return Qy(l,hw(t,e,n,i,r,o,a,u,c,s))},l}function vw(){return Cy.apply(hw(zb,Db,Ab,Eb,W_,U_,L_,P_,I_,Ub).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}function pw(){return Cy.apply(hw(jb,Pb,Rb,Tb,db,Q_,F_,D_,I_,Qb).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)}function gw(){var t,e,n,i,r,o=0,a=1,u=Fy,c=!1;function s(e){return null==e||isNaN(e=+e)?r:u(0===n?.5:(e=(i(e)-t)*n,c?Math.max(0,Math.min(1,e)):e))}function l(t){return function(e){var n,i;return arguments.length?([n,i]=e,u=t(n,i),s):[u(0),u(1)]}}return s.domain=function(r){return arguments.length?([o,a]=r,t=i(o=+o),e=i(a=+a),n=t===e?0:1/(e-t),s):[o,a]},s.clamp=function(t){return arguments.length?(c=!!t,s):c},s.interpolator=function(t){return arguments.length?(u=t,s):u},s.range=l(Xi),s.rangeRound=l(Fg),s.unknown=function(t){return arguments.length?(r=t,s):r},function(r){return i=r,t=r(o),e=r(a),n=t===e?0:1/(e-t),s}}function yw(t,e){return e.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function _w(){var t=Yy(gw()(Fy));return t.copy=function(){return yw(t,_w())},Iy.apply(t,arguments)}function bw(){var t=o_(gw()).domain([1,10]);return t.copy=function(){return yw(t,bw()).base(t.base())},Iy.apply(t,arguments)}function mw(){var t=s_(gw());return t.copy=function(){return yw(t,mw()).constant(t.constant())},Iy.apply(t,arguments)}function ww(){var t=v_(gw());return t.copy=function(){return yw(t,ww()).exponent(t.exponent())},Iy.apply(t,arguments)}function xw(){return ww.apply(null,arguments).exponent(.5)}function Sw(){var t=[],e=Fy;function n(n){if(null!=n&&!isNaN(n=+n))return e((f(t,n,1)-1)/(t.length-1))}return n.domain=function(e){if(!arguments.length)return t.slice();t=[];for(let n of e)null==n||isNaN(n=+n)||t.push(n);return t.sort(i),n},n.interpolator=function(t){return arguments.length?(e=t,n):e},n.range=function(){return t.map(((n,i)=>e(i/(t.length-1))))},n.quantiles=function(e){return Array.from({length:e+1},((n,i)=>wt(t,i/e)))},n.copy=function(){return Sw(e).domain(t)},Iy.apply(n,arguments)}function Mw(){var t,e,n,i,r,o,a,u=0,c=.5,s=1,l=1,d=Fy,f=!1;function h(t){return isNaN(t=+t)?a:(t=.5+((t=+o(t))-e)*(l*t<l*e?i:r),d(f?Math.max(0,Math.min(1,t)):t))}function v(t){return function(e){var n,i,r;return arguments.length?([n,i,r]=e,d=ty(t,[n,i,r]),h):[d(0),d(.5),d(1)]}}return h.domain=function(a){return arguments.length?([u,c,s]=a,t=o(u=+u),e=o(c=+c),n=o(s=+s),i=t===e?0:.5/(e-t),r=e===n?0:.5/(n-e),l=e<t?-1:1,h):[u,c,s]},h.clamp=function(t){return arguments.length?(f=!!t,h):f},h.interpolator=function(t){return arguments.length?(d=t,h):d},h.range=v(Xi),h.rangeRound=v(Fg),h.unknown=function(t){return arguments.length?(a=t,h):a},function(a){return o=a,t=a(u),e=a(c),n=a(s),i=t===e?0:.5/(e-t),r=e===n?0:.5/(n-e),l=e<t?-1:1,h}}function Ew(){var t=Yy(Mw()(Fy));return t.copy=function(){return yw(t,Ew())},Iy.apply(t,arguments)}function kw(){var t=o_(Mw()).domain([.1,1,10]);return t.copy=function(){return yw(t,kw()).base(t.base())},Iy.apply(t,arguments)}function Tw(){var t=s_(Mw());return t.copy=function(){return yw(t,Tw()).constant(t.constant())},Iy.apply(t,arguments)}function Nw(){var t=v_(Mw());return t.copy=function(){return yw(t,Nw()).exponent(t.exponent())},Iy.apply(t,arguments)}function Aw(){return Nw.apply(null,arguments).exponent(.5)}function Ow(t){for(var e=t.length/6|0,n=new Array(e),i=0;i<e;)n[i]="#"+t.slice(6*i,6*++i);return n}lw({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});const Rw=Ow("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Cw=Ow("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Iw=Ow("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),jw=Ow("4269d0efb118ff725c6cc5b03ca951ff8ab7a463f297bbf59c6b4e9498a0"),Pw=Ow("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),zw=Ow("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Dw=Ow("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Vw=Ow("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Lw=Ow("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Bw=Ow("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),Fw=Ow("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),Gw=t=>Li(t[t.length-1]);var Uw=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Ow);const Kw=Gw(Uw);var Qw=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Ow);const Hw=Gw(Qw);var $w=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Ow);const qw=Gw($w);var Yw=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Ow);const Ww=Gw(Yw);var Xw=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Ow);const Jw=Gw(Xw);var Zw=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Ow);const tx=Gw(Zw);var ex=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Ow);const nx=Gw(ex);var ix=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Ow);const rx=Gw(ix);var ox=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Ow);const ax=Gw(ox);var ux=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Ow);const cx=Gw(ux);var sx=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Ow);const lx=Gw(sx);var dx=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Ow);const fx=Gw(dx);var hx=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Ow);const vx=Gw(hx);var px=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Ow);const gx=Gw(px);var yx=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Ow);const _x=Gw(yx);var bx=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Ow);const mx=Gw(bx);var wx=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Ow);const xx=Gw(wx);var Sx=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Ow);const Mx=Gw(Sx);var Ex=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Ow);const kx=Gw(Ex);var Tx=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Ow);const Nx=Gw(Tx);var Ax=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Ow);const Ox=Gw(Ax);var Rx=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Ow);const Cx=Gw(Rx);var Ix=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Ow);const jx=Gw(Ix);var Px=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Ow);const zx=Gw(Px);var Dx=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Ow);const Vx=Gw(Dx);var Lx=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Ow);const Bx=Gw(Lx);var Fx=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Ow);const Gx=Gw(Fx);function Ux(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-t*(35.34-t*(2381.73-t*(6402.7-t*(7024.72-2710.57*t)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+t*(170.73+t*(52.82-t*(131.46-t*(176.58-67.37*t)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+t*(442.36-t*(2482.43-t*(6167.24-t*(6614.94-2475.67*t)))))))+")"}const Kx=Zg(nu(300,.5,0),nu(-240,.5,1));var Qx=Zg(nu(-100,.75,.35),nu(80,1.5,.8)),Hx=Zg(nu(260,.75,.35),nu(80,1.5,.8)),$x=nu();function qx(t){(t<0||t>1)&&(t-=Math.floor(t));var e=Math.abs(t-.5);return $x.h=360*t-100,$x.s=1.5-1.5*e,$x.l=.8-.9*e,$x+""}var Yx=gi(),Wx=Math.PI/3,Xx=2*Math.PI/3;function Jx(t){var e;return t=(.5-t)*Math.PI,Yx.r=255*(e=Math.sin(t))*e,Yx.g=255*(e=Math.sin(t+Wx))*e,Yx.b=255*(e=Math.sin(t+Xx))*e,Yx+""}function Zx(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+t*(1172.33-t*(10793.56-t*(33300.12-t*(38394.49-14825.05*t)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+t*(557.33+t*(1225.33-t*(3574.96-t*(1073.77+707.56*t)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+t*(3211.1-t*(15327.97-t*(27814-t*(22569.18-6838.66*t)))))))+")"}function tS(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}const eS=tS(Ow("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));var nS=tS(Ow("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),iS=tS(Ow("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),rS=tS(Ow("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function oS(t){return Fn(Tn(t).call(document.documentElement))}var aS=0;function uS(){return new cS}function cS(){this._="@"+(++aS).toString(36)}function sS(t,e){return t.target&&(t=Ji(t),void 0===e&&(e=t.currentTarget),t=t.touches||[t]),Array.from(t,(t=>Zi(t,e)))}function lS(t){return"string"==typeof t?new Vn([document.querySelectorAll(t)],[document.documentElement]):new Vn([Ae(t)],Dn)}function dS(t){return function(){return t}}cS.prototype=uS.prototype={constructor:cS,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};const fS=Math.abs,hS=Math.atan2,vS=Math.cos,pS=Math.max,gS=Math.min,yS=Math.sin,_S=Math.sqrt,bS=1e-12,mS=Math.PI,wS=mS/2,xS=2*mS;function SS(t){return t>=1?wS:t<=-1?-wS:Math.asin(t)}function MS(t){let e=3;return t.digits=function(n){if(!arguments.length)return e;if(null==n)e=null;else{const t=Math.floor(n);if(!(t>=0))throw new RangeError(`invalid digits: ${n}`);e=t}return t},()=>new da(e)}function ES(t){return t.innerRadius}function kS(t){return t.outerRadius}function TS(t){return t.startAngle}function NS(t){return t.endAngle}function AS(t){return t&&t.padAngle}function OS(t,e,n,i,r,o,a){var u=t-n,c=e-i,s=(a?o:-o)/_S(u*u+c*c),l=s*c,d=-s*u,f=t+l,h=e+d,v=n+l,p=i+d,g=(f+v)/2,y=(h+p)/2,_=v-f,b=p-h,m=_*_+b*b,w=r-o,x=f*p-v*h,S=(b<0?-1:1)*_S(pS(0,w*w*m-x*x)),M=(x*b-_*S)/m,E=(-x*_-b*S)/m,k=(x*b+_*S)/m,T=(-x*_+b*S)/m,N=M-g,A=E-y,O=k-g,R=T-y;return N*N+A*A>O*O+R*R&&(M=k,E=T),{cx:M,cy:E,x01:-l,y01:-d,x11:M*(r/w-1),y11:E*(r/w-1)}}function RS(){var t=ES,e=kS,n=dS(0),i=null,r=TS,o=NS,a=AS,u=null,c=MS(s);function s(){var s,l,d,f=+t.apply(this,arguments),h=+e.apply(this,arguments),v=r.apply(this,arguments)-wS,p=o.apply(this,arguments)-wS,g=fS(p-v),y=p>v;if(u||(u=s=c()),h<f&&(l=h,h=f,f=l),h>bS)if(g>xS-bS)u.moveTo(h*vS(v),h*yS(v)),u.arc(0,0,h,v,p,!y),f>bS&&(u.moveTo(f*vS(p),f*yS(p)),u.arc(0,0,f,p,v,y));else{var _,b,m=v,w=p,x=v,S=p,M=g,E=g,k=a.apply(this,arguments)/2,T=k>bS&&(i?+i.apply(this,arguments):_S(f*f+h*h)),N=gS(fS(h-f)/2,+n.apply(this,arguments)),A=N,O=N;if(T>bS){var R=SS(T/f*yS(k)),C=SS(T/h*yS(k));(M-=2*R)>bS?(x+=R*=y?1:-1,S-=R):(M=0,x=S=(v+p)/2),(E-=2*C)>bS?(m+=C*=y?1:-1,w-=C):(E=0,m=w=(v+p)/2)}var I=h*vS(m),j=h*yS(m),P=f*vS(S),z=f*yS(S);if(N>bS){var D,V=h*vS(w),L=h*yS(w),B=f*vS(x),F=f*yS(x);if(g<mS)if(D=function(t,e,n,i,r,o,a,u){var c=n-t,s=i-e,l=a-r,d=u-o,f=d*c-l*s;if(!(f*f<bS))return[t+(f=(l*(e-o)-d*(t-r))/f)*c,e+f*s]}(I,j,B,F,V,L,P,z)){var G=I-D[0],U=j-D[1],K=V-D[0],Q=L-D[1],H=1/yS(((d=(G*K+U*Q)/(_S(G*G+U*U)*_S(K*K+Q*Q)))>1?0:d<-1?mS:Math.acos(d))/2),$=_S(D[0]*D[0]+D[1]*D[1]);A=gS(N,(f-$)/(H-1)),O=gS(N,(h-$)/(H+1))}else A=O=0}E>bS?O>bS?(_=OS(B,F,I,j,h,O,y),b=OS(V,L,P,z,h,O,y),u.moveTo(_.cx+_.x01,_.cy+_.y01),O<N?u.arc(_.cx,_.cy,O,hS(_.y01,_.x01),hS(b.y01,b.x01),!y):(u.arc(_.cx,_.cy,O,hS(_.y01,_.x01),hS(_.y11,_.x11),!y),u.arc(0,0,h,hS(_.cy+_.y11,_.cx+_.x11),hS(b.cy+b.y11,b.cx+b.x11),!y),u.arc(b.cx,b.cy,O,hS(b.y11,b.x11),hS(b.y01,b.x01),!y))):(u.moveTo(I,j),u.arc(0,0,h,m,w,!y)):u.moveTo(I,j),f>bS&&M>bS?A>bS?(_=OS(P,z,V,L,f,-A,y),b=OS(I,j,B,F,f,-A,y),u.lineTo(_.cx+_.x01,_.cy+_.y01),A<N?u.arc(_.cx,_.cy,A,hS(_.y01,_.x01),hS(b.y01,b.x01),!y):(u.arc(_.cx,_.cy,A,hS(_.y01,_.x01),hS(_.y11,_.x11),!y),u.arc(0,0,f,hS(_.cy+_.y11,_.cx+_.x11),hS(b.cy+b.y11,b.cx+b.x11),y),u.arc(b.cx,b.cy,A,hS(b.y11,b.x11),hS(b.y01,b.x01),!y))):u.arc(0,0,f,S,x,y):u.lineTo(P,z)}else u.moveTo(0,0);if(u.closePath(),s)return u=null,s+""||null}return s.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,i=(+r.apply(this,arguments)+ +o.apply(this,arguments))/2-mS/2;return[vS(i)*n,yS(i)*n]},s.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:dS(+e),s):t},s.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:dS(+t),s):e},s.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:dS(+t),s):n},s.padRadius=function(t){return arguments.length?(i=null==t?null:"function"==typeof t?t:dS(+t),s):i},s.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:dS(+t),s):r},s.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:dS(+t),s):o},s.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:dS(+t),s):a},s.context=function(t){return arguments.length?(u=null==t?null:t,s):u},s}var CS=Array.prototype.slice;function IS(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function jS(t){this._context=t}function PS(t){return new jS(t)}function zS(t){return t[0]}function DS(t){return t[1]}function VS(t,e){var n=dS(!0),i=null,r=PS,o=null,a=MS(u);function u(u){var c,s,l,d=(u=IS(u)).length,f=!1;for(null==i&&(o=r(l=a())),c=0;c<=d;++c)!(c<d&&n(s=u[c],c,u))===f&&((f=!f)?o.lineStart():o.lineEnd()),f&&o.point(+t(s,c,u),+e(s,c,u));if(l)return o=null,l+""||null}return t="function"==typeof t?t:void 0===t?zS:dS(t),e="function"==typeof e?e:void 0===e?DS:dS(e),u.x=function(e){return arguments.length?(t="function"==typeof e?e:dS(+e),u):t},u.y=function(t){return arguments.length?(e="function"==typeof t?t:dS(+t),u):e},u.defined=function(t){return arguments.length?(n="function"==typeof t?t:dS(!!t),u):n},u.curve=function(t){return arguments.length?(r=t,null!=i&&(o=r(i)),u):r},u.context=function(t){return arguments.length?(null==t?i=o=null:o=r(i=t),u):i},u}function LS(t,e,n){var i=null,r=dS(!0),o=null,a=PS,u=null,c=MS(s);function s(s){var l,d,f,h,v,p=(s=IS(s)).length,g=!1,y=new Array(p),_=new Array(p);for(null==o&&(u=a(v=c())),l=0;l<=p;++l){if(!(l<p&&r(h=s[l],l,s))===g)if(g=!g)d=l,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),f=l-1;f>=d;--f)u.point(y[f],_[f]);u.lineEnd(),u.areaEnd()}g&&(y[l]=+t(h,l,s),_[l]=+e(h,l,s),u.point(i?+i(h,l,s):y[l],n?+n(h,l,s):_[l]))}if(v)return u=null,v+""||null}function l(){return VS().defined(r).curve(a).context(o)}return t="function"==typeof t?t:void 0===t?zS:dS(+t),e="function"==typeof e?e:dS(void 0===e?0:+e),n="function"==typeof n?n:void 0===n?DS:dS(+n),s.x=function(e){return arguments.length?(t="function"==typeof e?e:dS(+e),i=null,s):t},s.x0=function(e){return arguments.length?(t="function"==typeof e?e:dS(+e),s):t},s.x1=function(t){return arguments.length?(i=null==t?null:"function"==typeof t?t:dS(+t),s):i},s.y=function(t){return arguments.length?(e="function"==typeof t?t:dS(+t),n=null,s):e},s.y0=function(t){return arguments.length?(e="function"==typeof t?t:dS(+t),s):e},s.y1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:dS(+t),s):n},s.lineX0=s.lineY0=function(){return l().x(t).y(e)},s.lineY1=function(){return l().x(t).y(n)},s.lineX1=function(){return l().x(i).y(e)},s.defined=function(t){return arguments.length?(r="function"==typeof t?t:dS(!!t),s):r},s.curve=function(t){return arguments.length?(a=t,null!=o&&(u=a(o)),s):a},s.context=function(t){return arguments.length?(null==t?o=u=null:u=a(o=t),s):o},s}function BS(t,e){return e<t?-1:e>t?1:e>=t?0:NaN}function FS(t){return t}function GS(){var t=FS,e=BS,n=null,i=dS(0),r=dS(xS),o=dS(0);function a(a){var u,c,s,l,d,f=(a=IS(a)).length,h=0,v=new Array(f),p=new Array(f),g=+i.apply(this,arguments),y=Math.min(xS,Math.max(-xS,r.apply(this,arguments)-g)),_=Math.min(Math.abs(y)/f,o.apply(this,arguments)),b=_*(y<0?-1:1);for(u=0;u<f;++u)(d=p[v[u]=u]=+t(a[u],u,a))>0&&(h+=d);for(null!=e?v.sort((function(t,n){return e(p[t],p[n])})):null!=n&&v.sort((function(t,e){return n(a[t],a[e])})),u=0,s=h?(y-f*b)/h:0;u<f;++u,g=l)c=v[u],l=g+((d=p[c])>0?d*s:0)+b,p[c]={data:a[c],index:u,value:d,startAngle:g,endAngle:l,padAngle:_};return p}return a.value=function(e){return arguments.length?(t="function"==typeof e?e:dS(+e),a):t},a.sortValues=function(t){return arguments.length?(e=t,n=null,a):e},a.sort=function(t){return arguments.length?(n=t,e=null,a):n},a.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:dS(+t),a):i},a.endAngle=function(t){return arguments.length?(r="function"==typeof t?t:dS(+t),a):r},a.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:dS(+t),a):o},a}jS.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var US=QS(PS);function KS(t){this._curve=t}function QS(t){function e(e){return new KS(t(e))}return e._curve=t,e}function HS(t){var e=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?e(QS(t)):e()._curve},t}function $S(){return HS(VS().curve(US))}function qS(){var t=LS().curve(US),e=t.curve,n=t.lineX0,i=t.lineX1,r=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return HS(n())},delete t.lineX0,t.lineEndAngle=function(){return HS(i())},delete t.lineX1,t.lineInnerRadius=function(){return HS(r())},delete t.lineY0,t.lineOuterRadius=function(){return HS(o())},delete t.lineY1,t.curve=function(t){return arguments.length?e(QS(t)):e()._curve},t}function YS(t,e){return[(e=+e)*Math.cos(t-=Math.PI/2),e*Math.sin(t)]}KS.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};class WS{constructor(t,e){this._context=t,this._x=e}areaStart(){this._line=0}areaEnd(){this._line=NaN}lineStart(){this._point=0}lineEnd(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line}point(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._x?this._context.bezierCurveTo(this._x0=(this._x0+t)/2,this._y0,this._x0,e,t,e):this._context.bezierCurveTo(this._x0,this._y0=(this._y0+e)/2,t,this._y0,t,e)}this._x0=t,this._y0=e}}class XS{constructor(t){this._context=t}lineStart(){this._point=0}lineEnd(){}point(t,e){if(t=+t,e=+e,0===this._point)this._point=1;else{const n=YS(this._x0,this._y0),i=YS(this._x0,this._y0=(this._y0+e)/2),r=YS(t,this._y0),o=YS(t,e);this._context.moveTo(...n),this._context.bezierCurveTo(...i,...r,...o)}this._x0=t,this._y0=e}}function JS(t){return new WS(t,!0)}function ZS(t){return new WS(t,!1)}function tM(t){return new XS(t)}function eM(t){return t.source}function nM(t){return t.target}function iM(t){let e=eM,n=nM,i=zS,r=DS,o=null,a=null,u=MS(c);function c(){let c;const s=CS.call(arguments),l=e.apply(this,s),d=n.apply(this,s);if(null==o&&(a=t(c=u())),a.lineStart(),s[0]=l,a.point(+i.apply(this,s),+r.apply(this,s)),s[0]=d,a.point(+i.apply(this,s),+r.apply(this,s)),a.lineEnd(),c)return a=null,c+""||null}return c.source=function(t){return arguments.length?(e=t,c):e},c.target=function(t){return arguments.length?(n=t,c):n},c.x=function(t){return arguments.length?(i="function"==typeof t?t:dS(+t),c):i},c.y=function(t){return arguments.length?(r="function"==typeof t?t:dS(+t),c):r},c.context=function(e){return arguments.length?(null==e?o=a=null:a=t(o=e),c):o},c}function rM(){return iM(JS)}function oM(){return iM(ZS)}function aM(){const t=iM(tM);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}const uM=_S(3),cM={draw(t,e){const n=.59436*_S(e+gS(e/28,.75)),i=n/2,r=i*uM;t.moveTo(0,n),t.lineTo(0,-n),t.moveTo(-r,-i),t.lineTo(r,i),t.moveTo(-r,i),t.lineTo(r,-i)}},sM={draw(t,e){const n=_S(e/mS);t.moveTo(n,0),t.arc(0,0,n,0,xS)}},lM={draw(t,e){const n=_S(e/5)/2;t.moveTo(-3*n,-n),t.lineTo(-n,-n),t.lineTo(-n,-3*n),t.lineTo(n,-3*n),t.lineTo(n,-n),t.lineTo(3*n,-n),t.lineTo(3*n,n),t.lineTo(n,n),t.lineTo(n,3*n),t.lineTo(-n,3*n),t.lineTo(-n,n),t.lineTo(-3*n,n),t.closePath()}},dM=_S(1/3),fM=2*dM,hM={draw(t,e){const n=_S(e/fM),i=n*dM;t.moveTo(0,-n),t.lineTo(i,0),t.lineTo(0,n),t.lineTo(-i,0),t.closePath()}},vM={draw(t,e){const n=.62625*_S(e);t.moveTo(0,-n),t.lineTo(n,0),t.lineTo(0,n),t.lineTo(-n,0),t.closePath()}},pM={draw(t,e){const n=.87559*_S(e-gS(e/7,2));t.moveTo(-n,0),t.lineTo(n,0),t.moveTo(0,n),t.lineTo(0,-n)}},gM={draw(t,e){const n=_S(e),i=-n/2;t.rect(i,i,n,n)}},yM={draw(t,e){const n=.4431*_S(e);t.moveTo(n,n),t.lineTo(n,-n),t.lineTo(-n,-n),t.lineTo(-n,n),t.closePath()}},_M=yS(mS/10)/yS(7*mS/10),bM=yS(xS/10)*_M,mM=-vS(xS/10)*_M,wM={draw(t,e){const n=_S(.8908130915292852*e),i=bM*n,r=mM*n;t.moveTo(0,-n),t.lineTo(i,r);for(let e=1;e<5;++e){const o=xS*e/5,a=vS(o),u=yS(o);t.lineTo(u*n,-a*n),t.lineTo(a*i-u*r,u*i+a*r)}t.closePath()}},xM=_S(3),SM={draw(t,e){const n=-_S(e/(3*xM));t.moveTo(0,2*n),t.lineTo(-xM*n,-n),t.lineTo(xM*n,-n),t.closePath()}},MM=_S(3),EM={draw(t,e){const n=.6824*_S(e),i=n/2,r=n*MM/2;t.moveTo(0,-n),t.lineTo(r,i),t.lineTo(-r,i),t.closePath()}},kM=-.5,TM=_S(3)/2,NM=1/_S(12),AM=3*(NM/2+1),OM={draw(t,e){const n=_S(e/AM),i=n/2,r=n*NM,o=i,a=n*NM+n,u=-o,c=a;t.moveTo(i,r),t.lineTo(o,a),t.lineTo(u,c),t.lineTo(kM*i-TM*r,TM*i+kM*r),t.lineTo(kM*o-TM*a,TM*o+kM*a),t.lineTo(kM*u-TM*c,TM*u+kM*c),t.lineTo(kM*i+TM*r,kM*r-TM*i),t.lineTo(kM*o+TM*a,kM*a-TM*o),t.lineTo(kM*u+TM*c,kM*c-TM*u),t.closePath()}},RM={draw(t,e){const n=.6189*_S(e-gS(e/6,1.7));t.moveTo(-n,-n),t.lineTo(n,n),t.moveTo(-n,n),t.lineTo(n,-n)}},CM=[sM,lM,hM,gM,wM,SM,OM],IM=[sM,pM,RM,EM,cM,yM,vM];function jM(t,e){let n=null,i=MS(r);function r(){let r;if(n||(n=r=i()),t.apply(this,arguments).draw(n,+e.apply(this,arguments)),r)return n=null,r+""||null}return t="function"==typeof t?t:dS(t||sM),e="function"==typeof e?e:dS(void 0===e?64:+e),r.type=function(e){return arguments.length?(t="function"==typeof e?e:dS(e),r):t},r.size=function(t){return arguments.length?(e="function"==typeof t?t:dS(+t),r):e},r.context=function(t){return arguments.length?(n=null==t?null:t,r):n},r}function PM(){}function zM(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function DM(t){this._context=t}function VM(t){return new DM(t)}function LM(t){this._context=t}function BM(t){return new LM(t)}function FM(t){this._context=t}function GM(t){return new FM(t)}function UM(t,e){this._basis=new DM(t),this._beta=e}DM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:zM(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:zM(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}},LM.prototype={areaStart:PM,areaEnd:PM,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:zM(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}},FM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,i=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,i):this._context.moveTo(n,i);break;case 3:this._point=4;default:zM(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}},UM.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var i,r=t[0],o=e[0],a=t[n]-r,u=e[n]-o,c=-1;++c<=n;)i=c/n,this._basis.point(this._beta*t[c]+(1-this._beta)*(r+i*a),this._beta*e[c]+(1-this._beta)*(o+i*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};const KM=function t(e){function n(t){return 1===e?new DM(t):new UM(t,e)}return n.beta=function(e){return t(+e)},n}(.85);function QM(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function HM(t,e){this._context=t,this._k=(1-e)/6}HM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:QM(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:QM(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};const $M=function t(e){function n(t){return new HM(t,e)}return n.tension=function(e){return t(+e)},n}(0);function qM(t,e){this._context=t,this._k=(1-e)/6}qM.prototype={areaStart:PM,areaEnd:PM,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:QM(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};const YM=function t(e){function n(t){return new qM(t,e)}return n.tension=function(e){return t(+e)},n}(0);function WM(t,e){this._context=t,this._k=(1-e)/6}WM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:QM(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};const XM=function t(e){function n(t){return new WM(t,e)}return n.tension=function(e){return t(+e)},n}(0);function JM(t,e,n){var i=t._x1,r=t._y1,o=t._x2,a=t._y2;if(t._l01_a>bS){var u=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);i=(i*u-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,r=(r*u-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>bS){var s=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,l=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*s+t._x1*t._l23_2a-e*t._l12_2a)/l,a=(a*s+t._y1*t._l23_2a-n*t._l12_2a)/l}t._context.bezierCurveTo(i,r,o,a,t._x2,t._y2)}function ZM(t,e){this._context=t,this._alpha=e}ZM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,i=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:JM(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};const tE=function t(e){function n(t){return e?new ZM(t,e):new HM(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function eE(t,e){this._context=t,this._alpha=e}eE.prototype={areaStart:PM,areaEnd:PM,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,i=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:JM(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};const nE=function t(e){function n(t){return e?new eE(t,e):new qM(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function iE(t,e){this._context=t,this._alpha=e}iE.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,i=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+i*i,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:JM(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};const rE=function t(e){function n(t){return e?new iE(t,e):new WM(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function oE(t){this._context=t}function aE(t){return new oE(t)}function uE(t){return t<0?-1:1}function cE(t,e,n){var i=t._x1-t._x0,r=e-t._x1,o=(t._y1-t._y0)/(i||r<0&&-0),a=(n-t._y1)/(r||i<0&&-0),u=(o*r+a*i)/(i+r);return(uE(o)+uE(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(u))||0}function sE(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function lE(t,e,n){var i=t._x0,r=t._y0,o=t._x1,a=t._y1,u=(o-i)/3;t._context.bezierCurveTo(i+u,r+u*e,o-u,a-u*n,o,a)}function dE(t){this._context=t}function fE(t){this._context=new hE(t)}function hE(t){this._context=t}function vE(t){return new dE(t)}function pE(t){return new fE(t)}function gE(t){this._context=t}function yE(t){var e,n,i=t.length-1,r=new Array(i),o=new Array(i),a=new Array(i);for(r[0]=0,o[0]=2,a[0]=t[0]+2*t[1],e=1;e<i-1;++e)r[e]=1,o[e]=4,a[e]=4*t[e]+2*t[e+1];for(r[i-1]=2,o[i-1]=7,a[i-1]=8*t[i-1]+t[i],e=1;e<i;++e)n=r[e]/o[e-1],o[e]-=n,a[e]-=n*a[e-1];for(r[i-1]=a[i-1]/o[i-1],e=i-2;e>=0;--e)r[e]=(a[e]-r[e+1])/o[e];for(o[i-1]=(t[i]+r[i-1])/2,e=0;e<i-1;++e)o[e]=2*t[e+1]-r[e+1];return[r,o]}function _E(t){return new gE(t)}function bE(t,e){this._context=t,this._t=e}function mE(t){return new bE(t,.5)}function wE(t){return new bE(t,0)}function xE(t){return new bE(t,1)}function SE(t,e){if((r=t.length)>1)for(var n,i,r,o=1,a=t[e[0]],u=a.length;o<r;++o)for(i=a,a=t[e[o]],n=0;n<u;++n)a[n][1]+=a[n][0]=isNaN(i[n][1])?i[n][0]:i[n][1]}function ME(t){for(var e=t.length,n=new Array(e);--e>=0;)n[e]=e;return n}function EE(t,e){return t[e]}function kE(t){const e=[];return e.key=t,e}function TE(){var t=dS([]),e=ME,n=SE,i=EE;function r(r){var o,a,u=Array.from(t.apply(this,arguments),kE),c=u.length,s=-1;for(const t of r)for(o=0,++s;o<c;++o)(u[o][s]=[0,+i(t,u[o].key,s,r)]).data=t;for(o=0,a=IS(e(u));o<c;++o)u[a[o]].index=o;return n(u,a),u}return r.keys=function(e){return arguments.length?(t="function"==typeof e?e:dS(Array.from(e)),r):t},r.value=function(t){return arguments.length?(i="function"==typeof t?t:dS(+t),r):i},r.order=function(t){return arguments.length?(e=null==t?ME:"function"==typeof t?t:dS(Array.from(t)),r):e},r.offset=function(t){return arguments.length?(n=null==t?SE:t,r):n},r}function NE(t,e){if((i=t.length)>0){for(var n,i,r,o=0,a=t[0].length;o<a;++o){for(r=n=0;n<i;++n)r+=t[n][o][1]||0;if(r)for(n=0;n<i;++n)t[n][o][1]/=r}SE(t,e)}}function AE(t,e){if((u=t.length)>0)for(var n,i,r,o,a,u,c=0,s=t[e[0]].length;c<s;++c)for(o=a=0,n=0;n<u;++n)(r=(i=t[e[n]][c])[1]-i[0])>0?(i[0]=o,i[1]=o+=r):r<0?(i[1]=a,i[0]=a+=r):(i[0]=0,i[1]=r)}function OE(t,e){if((n=t.length)>0){for(var n,i=0,r=t[e[0]],o=r.length;i<o;++i){for(var a=0,u=0;a<n;++a)u+=t[a][i][1]||0;r[i][1]+=r[i][0]=-u/2}SE(t,e)}}function RE(t,e){if((r=t.length)>0&&(i=(n=t[e[0]]).length)>0){for(var n,i,r,o=0,a=1;a<i;++a){for(var u=0,c=0,s=0;u<r;++u){for(var l=t[e[u]],d=l[a][1]||0,f=(d-(l[a-1][1]||0))/2,h=0;h<u;++h){var v=t[e[h]];f+=(v[a][1]||0)-(v[a-1][1]||0)}c+=d,s+=f*d}n[a-1][1]+=n[a-1][0]=o,c&&(o-=s/c)}n[a-1][1]+=n[a-1][0]=o,SE(t,e)}}function CE(t){var e=t.map(IE);return ME(t).sort((function(t,n){return e[t]-e[n]}))}function IE(t){for(var e,n=-1,i=0,r=t.length,o=-1/0;++n<r;)(e=+t[n][1])>o&&(o=e,i=n);return i}function jE(t){var e=t.map(PE);return ME(t).sort((function(t,n){return e[t]-e[n]}))}function PE(t){for(var e,n=0,i=-1,r=t.length;++i<r;)(e=+t[i][1])&&(n+=e);return n}function zE(t){return jE(t).reverse()}function DE(t){var e,n,i=t.length,r=t.map(PE),o=CE(t),a=0,u=0,c=[],s=[];for(e=0;e<i;++e)n=o[e],a<u?(a+=r[n],c.push(n)):(u+=r[n],s.push(n));return s.reverse().concat(c)}function VE(t){return ME(t).reverse()}oE.prototype={areaStart:PM,areaEnd:PM,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}},dE.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:lE(this,this._t0,sE(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,lE(this,sE(this,n=cE(this,t,e)),n);break;default:lE(this,this._t0,n=cE(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(fE.prototype=Object.create(dE.prototype)).point=function(t,e){dE.prototype.point.call(this,e,t)},hE.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,i,r,o){this._context.bezierCurveTo(e,t,i,n,o,r)}},gE.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var i=yE(t),r=yE(e),o=0,a=1;a<n;++o,++a)this._context.bezierCurveTo(i[0][o],r[0][o],i[1][o],r[1][o],t[a],e[a]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}},bE.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};var LE="%Y-%m-%dT%H:%M:%S.%LZ",BE=Date.prototype.toISOString?function(t){return t.toISOString()}:Qb(LE);const FE=BE;var GE=+new Date("2000-01-01T00:00:00.000Z")?function(t){var e=new Date(t);return isNaN(e)?null:e}:Hb(LE);const UE=GE;function KE(t,e,n){var i=new hr,r=e;return null==e?(i.restart(t,e,n),i):(i._restart=i.restart,i.restart=function(t,e,n){e=+e,n=null==n?dr():+n,i._restart((function o(a){a+=r,i._restart(o,r+=e,n),t(a)}),e,n)},i.restart(t,e,n),i)}const QE=t=>()=>t;function HE(t,{sourceEvent:e,target:n,transform:i,dispatch:r}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:e,enumerable:!0,configurable:!0},target:{value:n,enumerable:!0,configurable:!0},transform:{value:i,enumerable:!0,configurable:!0},_:{value:r}})}function $E(t,e,n){this.k=t,this.x=e,this.y=n}$E.prototype={constructor:$E,scale:function(t){return 1===t?this:new $E(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new $E(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var qE=new $E(1,0,0);function YE(t){for(;!t.__zoom;)if(!(t=t.parentNode))return qE;return t.__zoom}function WE(t){t.stopImmediatePropagation()}function XE(t){t.preventDefault(),t.stopImmediatePropagation()}function JE(t){return!(t.ctrlKey&&"wheel"!==t.type||t.button)}function ZE(){var t=this;return t instanceof SVGElement?(t=t.ownerSVGElement||t).hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]:[[0,0],[t.clientWidth,t.clientHeight]]}function tk(){return this.__zoom||qE}function ek(t){return-t.deltaY*(1===t.deltaMode?.05:t.deltaMode?1:.002)*(t.ctrlKey?10:1)}function nk(){return navigator.maxTouchPoints||"ontouchstart"in this}function ik(t,e,n){var i=t.invertX(e[0][0])-n[0][0],r=t.invertX(e[1][0])-n[1][0],o=t.invertY(e[0][1])-n[0][1],a=t.invertY(e[1][1])-n[1][1];return t.translate(r>i?(i+r)/2:Math.min(0,i)||Math.max(0,r),a>o?(o+a)/2:Math.min(0,o)||Math.max(0,a))}function rk(){var t,e,n,i=JE,r=ZE,o=ik,a=ek,u=nk,c=[0,1/0],s=[[-1/0,-1/0],[1/0,1/0]],l=250,d=Ug,f=ke("start","zoom","end"),h=500,v=150,p=0,g=10;function y(t){t.property("__zoom",tk).on("wheel.zoom",M,{passive:!1}).on("mousedown.zoom",E).on("dblclick.zoom",k).filter(u).on("touchstart.zoom",T).on("touchmove.zoom",N).on("touchend.zoom touchcancel.zoom",A).style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function _(t,e){return(e=Math.max(c[0],Math.min(c[1],e)))===t.k?t:new $E(e,t.x,t.y)}function b(t,e,n){var i=e[0]-n[0]*t.k,r=e[1]-n[1]*t.k;return i===t.x&&r===t.y?t:new $E(t.k,i,r)}function m(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function w(t,e,n,i){t.on("start.zoom",(function(){x(this,arguments).event(i).start()})).on("interrupt.zoom end.zoom",(function(){x(this,arguments).event(i).end()})).tween("zoom",(function(){var t=this,o=arguments,a=x(t,o).event(i),u=r.apply(t,o),c=null==n?m(u):"function"==typeof n?n.apply(t,o):n,s=Math.max(u[1][0]-u[0][0],u[1][1]-u[0][1]),l=t.__zoom,f="function"==typeof e?e.apply(t,o):e,h=d(l.invert(c).concat(s/l.k),f.invert(c).concat(s/f.k));return function(t){if(1===t)t=f;else{var e=h(t),n=s/e[2];t=new $E(n,c[0]-e[0]*n,c[1]-e[1]*n)}a.zoom(null,t)}}))}function x(t,e,n){return!n&&t.__zooming||new S(t,e)}function S(t,e){this.that=t,this.args=e,this.active=0,this.sourceEvent=null,this.extent=r.apply(t,e),this.taps=0}function M(t,...e){if(i.apply(this,arguments)){var n=x(this,e).event(t),r=this.__zoom,u=Math.max(c[0],Math.min(c[1],r.k*Math.pow(2,a.apply(this,arguments)))),l=Zi(t);if(n.wheel)n.mouse[0][0]===l[0]&&n.mouse[0][1]===l[1]||(n.mouse[1]=r.invert(n.mouse[0]=l)),clearTimeout(n.wheel);else{if(r.k===u)return;n.mouse=[l,r.invert(l)],Cr(this),n.start()}XE(t),n.wheel=setTimeout((function(){n.wheel=null,n.end()}),v),n.zoom("mouse",o(b(_(r,u),n.mouse[0],n.mouse[1]),n.extent,s))}}function E(t,...e){if(!n&&i.apply(this,arguments)){var r=t.currentTarget,a=x(this,e,!0).event(t),u=Fn(t.view).on("mousemove.zoom",(function(t){if(XE(t),!a.moved){var e=t.clientX-l,n=t.clientY-d;a.moved=e*e+n*n>p}a.event(t).zoom("mouse",o(b(a.that.__zoom,a.mouse[0]=Zi(t,r),a.mouse[1]),a.extent,s))}),!0).on("mouseup.zoom",(function(t){u.on("mousemove.zoom mouseup.zoom",null),$n(t.view,a.moved),XE(t),a.event(t).end()}),!0),c=Zi(t,r),l=t.clientX,d=t.clientY;Hn(t.view),WE(t),a.mouse=[c,this.__zoom.invert(c)],Cr(this),a.start()}}function k(t,...e){if(i.apply(this,arguments)){var n=this.__zoom,a=Zi(t.changedTouches?t.changedTouches[0]:t,this),u=n.invert(a),c=n.k*(t.shiftKey?.5:2),d=o(b(_(n,c),a,u),r.apply(this,e),s);XE(t),l>0?Fn(this).transition().duration(l).call(w,d,a,t):Fn(this).call(y.transform,d,a,t)}}function T(n,...r){if(i.apply(this,arguments)){var o,a,u,c,s=n.touches,l=s.length,d=x(this,r,n.changedTouches.length===l).event(n);for(WE(n),a=0;a<l;++a)c=[c=Zi(u=s[a],this),this.__zoom.invert(c),u.identifier],d.touch0?d.touch1||d.touch0[2]===c[2]||(d.touch1=c,d.taps=0):(d.touch0=c,o=!0,d.taps=1+!!t);t&&(t=clearTimeout(t)),o&&(d.taps<2&&(e=c[0],t=setTimeout((function(){t=null}),h)),Cr(this),d.start())}}function N(t,...e){if(this.__zooming){var n,i,r,a,u=x(this,e).event(t),c=t.changedTouches,l=c.length;for(XE(t),n=0;n<l;++n)r=Zi(i=c[n],this),u.touch0&&u.touch0[2]===i.identifier?u.touch0[0]=r:u.touch1&&u.touch1[2]===i.identifier&&(u.touch1[0]=r);if(i=u.that.__zoom,u.touch1){var d=u.touch0[0],f=u.touch0[1],h=u.touch1[0],v=u.touch1[1],p=(p=h[0]-d[0])*p+(p=h[1]-d[1])*p,g=(g=v[0]-f[0])*g+(g=v[1]-f[1])*g;i=_(i,Math.sqrt(p/g)),r=[(d[0]+h[0])/2,(d[1]+h[1])/2],a=[(f[0]+v[0])/2,(f[1]+v[1])/2]}else{if(!u.touch0)return;r=u.touch0[0],a=u.touch0[1]}u.zoom("touch",o(b(i,r,a),u.extent,s))}}function A(t,...i){if(this.__zooming){var r,o,a=x(this,i).event(t),u=t.changedTouches,c=u.length;for(WE(t),n&&clearTimeout(n),n=setTimeout((function(){n=null}),h),r=0;r<c;++r)o=u[r],a.touch0&&a.touch0[2]===o.identifier?delete a.touch0:a.touch1&&a.touch1[2]===o.identifier&&delete a.touch1;if(a.touch1&&!a.touch0&&(a.touch0=a.touch1,delete a.touch1),a.touch0)a.touch0[1]=this.__zoom.invert(a.touch0[0]);else if(a.end(),2===a.taps&&(o=Zi(o,this),Math.hypot(e[0]-o[0],e[1]-o[1])<g)){var s=Fn(this).on("dblclick.zoom");s&&s.apply(this,arguments)}}}return y.transform=function(t,e,n,i){var r=t.selection?t.selection():t;r.property("__zoom",tk),t!==r?w(t,e,n,i):r.interrupt().each((function(){x(this,arguments).event(i).start().zoom(null,"function"==typeof e?e.apply(this,arguments):e).end()}))},y.scaleBy=function(t,e,n,i){y.scaleTo(t,(function(){return this.__zoom.k*("function"==typeof e?e.apply(this,arguments):e)}),n,i)},y.scaleTo=function(t,e,n,i){y.transform(t,(function(){var t=r.apply(this,arguments),i=this.__zoom,a=null==n?m(t):"function"==typeof n?n.apply(this,arguments):n,u=i.invert(a),c="function"==typeof e?e.apply(this,arguments):e;return o(b(_(i,c),a,u),t,s)}),n,i)},y.translateBy=function(t,e,n,i){y.transform(t,(function(){return o(this.__zoom.translate("function"==typeof e?e.apply(this,arguments):e,"function"==typeof n?n.apply(this,arguments):n),r.apply(this,arguments),s)}),null,i)},y.translateTo=function(t,e,n,i,a){y.transform(t,(function(){var t=r.apply(this,arguments),a=this.__zoom,u=null==i?m(t):"function"==typeof i?i.apply(this,arguments):i;return o(qE.translate(u[0],u[1]).scale(a.k).translate("function"==typeof e?-e.apply(this,arguments):-e,"function"==typeof n?-n.apply(this,arguments):-n),t,s)}),i,a)},S.prototype={event:function(t){return t&&(this.sourceEvent=t),this},start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(t,e){return this.mouse&&"mouse"!==t&&(this.mouse[1]=e.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=e.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=e.invert(this.touch1[0])),this.that.__zoom=e,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(t){var e=Fn(this.that).datum();f.call(t,this.that,new HE(t,{sourceEvent:this.sourceEvent,target:y,type:t,transform:this.that.__zoom,dispatch:f}),e)}},y.wheelDelta=function(t){return arguments.length?(a="function"==typeof t?t:QE(+t),y):a},y.filter=function(t){return arguments.length?(i="function"==typeof t?t:QE(!!t),y):i},y.touchable=function(t){return arguments.length?(u="function"==typeof t?t:QE(!!t),y):u},y.extent=function(t){return arguments.length?(r="function"==typeof t?t:QE([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),y):r},y.scaleExtent=function(t){return arguments.length?(c[0]=+t[0],c[1]=+t[1],y):[c[0],c[1]]},y.translateExtent=function(t){return arguments.length?(s[0][0]=+t[0][0],s[1][0]=+t[1][0],s[0][1]=+t[0][1],s[1][1]=+t[1][1],y):[[s[0][0],s[0][1]],[s[1][0],s[1][1]]]},y.constrain=function(t){return arguments.length?(o=t,y):o},y.duration=function(t){return arguments.length?(l=+t,y):l},y.interpolate=function(t){return arguments.length?(d=t,y):d},y.on=function(){var t=f.on.apply(f,arguments);return t===f?y:t},y.clickDistance=function(t){return arguments.length?(p=(t=+t)*t,y):Math.sqrt(p)},y.tapDistance=function(t){return arguments.length?(g=+t,y):g},y}YE.prototype=$E.prototype}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={exports:{}};return t[i].call(o.exports,o,o.exports,n),o.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{"use strict";var t=n(9427),e=n(7389);window.addEventListener("load",(function(){var n;t.icdt.container="#mainContainer",t.icdt.svg="#mainSvg",t.icdt.config={fileuploadurl:(n={madonvi:"scorm",tendv:"[SCORM]",weburl:"https://tabca.vn/",fileuploadurl:"/",readfileuploadurl:"files/"}).fileuploadurl,readfileuploadurl:n.readfileuploadurl},e.icdt_Run.data=_board_content,e.icdt_Run.runSlide(1)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,