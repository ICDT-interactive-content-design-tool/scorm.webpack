/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={7914:(t,e,n)=>{t.exports=function t(e,n,i){function r(a,u){if(!n[a]){if(!e[a]){if(o)return o(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var s=n[a]={exports:{}};e[a][0].call(s.exports,(function(t){return r(e[a][1][t]||t)}),s,s.exports,t,e,n,i)}return n[a].exports}for(var o=void 0,a=0;a<i.length;a++)r(i[a]);return r}({1:[function(t,e,i){(function(t){"use strict";var n,i,r=t.MutationObserver||t.WebKitMutationObserver;if(r){var o=0,a=new r(l),u=t.document.createTextNode("");a.observe(u,{characterData:!0}),n=function(){u.data=o=++o%2}}else if(t.setImmediate||void 0===t.MessageChannel)n="document"in t&&"onreadystatechange"in t.document.createElement("script")?function(){var e=t.document.createElement("script");e.onreadystatechange=function(){l(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null},t.document.documentElement.appendChild(e)}:function(){setTimeout(l,0)};else{var c=new t.MessageChannel;c.port1.onmessage=l,n=function(){c.port2.postMessage(0)}}var s=[];function l(){var t,e;i=!0;for(var n=s.length;n;){for(e=s,s=[],t=-1;++t<n;)e[t]();n=s.length}i=!1}e.exports=function(t){1!==s.push(t)||i||n()}}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(t,e,n){"use strict";var i=t(1);function r(){}var o={},a=["REJECTED"],u=["FULFILLED"],c=["PENDING"];function s(t){if("function"!=typeof t)throw new TypeError("resolver must be a function");this.state=c,this.queue=[],this.outcome=void 0,t!==r&&h(this,t)}function l(t,e,n){this.promise=t,"function"==typeof e&&(this.onFulfilled=e,this.callFulfilled=this.otherCallFulfilled),"function"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function d(t,e,n){i((function(){var i;try{i=e(n)}catch(e){return o.reject(t,e)}i===t?o.reject(t,new TypeError("Cannot resolve promise with itself")):o.resolve(t,i)}))}function f(t){var e=t&&t.then;if(t&&("object"==typeof t||"function"==typeof t)&&"function"==typeof e)return function(){e.apply(t,arguments)}}function h(t,e){var n=!1;function i(e){n||(n=!0,o.reject(t,e))}function r(e){n||(n=!0,o.resolve(t,e))}var a=v((function(){e(r,i)}));"error"===a.status&&i(a.value)}function v(t,e){var n={};try{n.value=t(e),n.status="success"}catch(t){n.status="error",n.value=t}return n}e.exports=s,s.prototype.catch=function(t){return this.then(null,t)},s.prototype.then=function(t,e){if("function"!=typeof t&&this.state===u||"function"!=typeof e&&this.state===a)return this;var n=new this.constructor(r);return this.state!==c?d(n,this.state===u?t:e,this.outcome):this.queue.push(new l(n,t,e)),n},l.prototype.callFulfilled=function(t){o.resolve(this.promise,t)},l.prototype.otherCallFulfilled=function(t){d(this.promise,this.onFulfilled,t)},l.prototype.callRejected=function(t){o.reject(this.promise,t)},l.prototype.otherCallRejected=function(t){d(this.promise,this.onRejected,t)},o.resolve=function(t,e){var n=v(f,e);if("error"===n.status)return o.reject(t,n.value);var i=n.value;if(i)h(t,i);else{t.state=u,t.outcome=e;for(var r=-1,a=t.queue.length;++r<a;)t.queue[r].callFulfilled(e)}return t},o.reject=function(t,e){t.state=a,t.outcome=e;for(var n=-1,i=t.queue.length;++n<i;)t.queue[n].callRejected(e);return t},s.resolve=function(t){return t instanceof this?t:o.resolve(new this(r),t)},s.reject=function(t){var e=new this(r);return o.reject(e,t)},s.all=function(t){var e=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var n=t.length,i=!1;if(!n)return this.resolve([]);for(var a=new Array(n),u=0,c=-1,s=new this(r);++c<n;)l(t[c],c);return s;function l(t,r){e.resolve(t).then((function(t){a[r]=t,++u!==n||i||(i=!0,o.resolve(s,a))}),(function(t){i||(i=!0,o.reject(s,t))}))}},s.race=function(t){var e=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var n,i=t.length,a=!1;if(!i)return this.resolve([]);for(var u=-1,c=new this(r);++u<i;)n=t[u],e.resolve(n).then((function(t){a||(a=!0,o.resolve(c,t))}),(function(t){a||(a=!0,o.reject(c,t))}));return c}},{1:1}],3:[function(t,e,i){(function(e){"use strict";"function"!=typeof e.Promise&&(e.Promise=t(2))}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{2:2}],4:[function(t,e,n){"use strict";var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};var r=function(){try{if("undefined"!=typeof indexedDB)return indexedDB;if("undefined"!=typeof webkitIndexedDB)return webkitIndexedDB;if("undefined"!=typeof mozIndexedDB)return mozIndexedDB;if("undefined"!=typeof OIndexedDB)return OIndexedDB;if("undefined"!=typeof msIndexedDB)return msIndexedDB}catch(t){return}}();function o(t,e){t=t||[],e=e||{};try{return new Blob(t,e)}catch(r){if("TypeError"!==r.name)throw r;for(var n=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),i=0;i<t.length;i+=1)n.append(t[i]);return n.getBlob(e.type)}}"undefined"==typeof Promise&&t(3);var a=Promise;function u(t,e){e&&t.then((function(t){e(null,t)}),(function(t){e(t)}))}function c(t,e,n){"function"==typeof e&&t.then(e),"function"==typeof n&&t.catch(n)}function s(t){return"string"!=typeof t&&(console.warn(t+" used as a key, but it is not a string."),t=String(t)),t}function l(){if(arguments.length&&"function"==typeof arguments[arguments.length-1])return arguments[arguments.length-1]}var d="local-forage-detect-blob-support",f=void 0,h={},v=Object.prototype.toString,p="readonly",g="readwrite";function y(t){for(var e=t.length,n=new ArrayBuffer(e),i=new Uint8Array(n),r=0;r<e;r++)i[r]=t.charCodeAt(r);return n}function _(t){return"boolean"==typeof f?a.resolve(f):function(t){return new a((function(e){var n=t.transaction(d,g),i=o([""]);n.objectStore(d).put(i,"key"),n.onabort=function(t){t.preventDefault(),t.stopPropagation(),e(!1)},n.oncomplete=function(){var t=navigator.userAgent.match(/Chrome\/(\d+)/),n=navigator.userAgent.match(/Edge\//);e(n||!t||parseInt(t[1],10)>=43)}})).catch((function(){return!1}))}(t).then((function(t){return f=t}))}function b(t){var e=h[t.name],n={};n.promise=new a((function(t,e){n.resolve=t,n.reject=e})),e.deferredOperations.push(n),e.dbReady?e.dbReady=e.dbReady.then((function(){return n.promise})):e.dbReady=n.promise}function m(t){var e=h[t.name].deferredOperations.pop();if(e)return e.resolve(),e.promise}function w(t,e){var n=h[t.name].deferredOperations.pop();if(n)return n.reject(e),n.promise}function x(t,e){return new a((function(n,i){if(h[t.name]=h[t.name]||{forages:[],db:null,dbReady:null,deferredOperations:[]},t.db){if(!e)return n(t.db);b(t),t.db.close()}var o=[t.name];e&&o.push(t.version);var a=r.open.apply(r,o);e&&(a.onupgradeneeded=function(e){var n=a.result;try{n.createObjectStore(t.storeName),e.oldVersion<=1&&n.createObjectStore(d)}catch(n){if("ConstraintError"!==n.name)throw n;console.warn('The database "'+t.name+'" has been upgraded from version '+e.oldVersion+" to version "+e.newVersion+', but the storage "'+t.storeName+'" already exists.')}}),a.onerror=function(t){t.preventDefault(),i(a.error)},a.onsuccess=function(){var e=a.result;e.onversionchange=function(t){t.target.close()},n(e),m(t)}}))}function S(t){return x(t,!1)}function M(t){return x(t,!0)}function E(t,e){if(!t.db)return!0;var n=!t.db.objectStoreNames.contains(t.storeName),i=t.version<t.db.version,r=t.version>t.db.version;if(i&&(t.version!==e&&console.warn('The database "'+t.name+"\" can't be downgraded from version "+t.db.version+" to version "+t.version+"."),t.version=t.db.version),r||n){if(n){var o=t.db.version+1;o>t.version&&(t.version=o)}return!0}return!1}function k(t){return o([y(atob(t.data))],{type:t.type})}function T(t){return t&&t.__local_forage_encoded_blob}function N(t){var e=this,n=e._initReady().then((function(){var t=h[e._dbInfo.name];if(t&&t.dbReady)return t.dbReady}));return c(n,t,t),n}function A(t,e,n,i){void 0===i&&(i=1);try{var r=t.db.transaction(t.storeName,e);n(null,r)}catch(r){if(i>0&&(!t.db||"InvalidStateError"===r.name||"NotFoundError"===r.name))return a.resolve().then((function(){if(!t.db||"NotFoundError"===r.name&&!t.db.objectStoreNames.contains(t.storeName)&&t.version<=t.db.version)return t.db&&(t.version=t.db.version+1),M(t)})).then((function(){return function(t){b(t);for(var e=h[t.name],n=e.forages,i=0;i<n.length;i++){var r=n[i];r._dbInfo.db&&(r._dbInfo.db.close(),r._dbInfo.db=null)}return t.db=null,S(t).then((function(e){return t.db=e,E(t)?M(t):e})).then((function(i){t.db=e.db=i;for(var r=0;r<n.length;r++)n[r]._dbInfo.db=i})).catch((function(e){throw w(t,e),e}))}(t).then((function(){A(t,e,n,i-1)}))})).catch(n);n(r)}}var O={_driver:"asyncStorage",_initStorage:function(t){var e=this,n={db:null};if(t)for(var i in t)n[i]=t[i];var r=h[n.name];r||(r={forages:[],db:null,dbReady:null,deferredOperations:[]},h[n.name]=r),r.forages.push(e),e._initReady||(e._initReady=e.ready,e.ready=N);var o=[];function u(){return a.resolve()}for(var c=0;c<r.forages.length;c++){var s=r.forages[c];s!==e&&o.push(s._initReady().catch(u))}var l=r.forages.slice(0);return a.all(o).then((function(){return n.db=r.db,S(n)})).then((function(t){return n.db=t,E(n,e._defaultConfig.version)?M(n):t})).then((function(t){n.db=r.db=t,e._dbInfo=n;for(var i=0;i<l.length;i++){var o=l[i];o!==e&&(o._dbInfo.db=n.db,o._dbInfo.version=n.version)}}))},_support:function(){try{if(!r||!r.open)return!1;var t="undefined"!=typeof openDatabase&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),e="function"==typeof fetch&&-1!==fetch.toString().indexOf("[native code");return(!t||e)&&"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(t){return!1}}(),iterate:function(t,e){var n=this,i=new a((function(e,i){n.ready().then((function(){A(n._dbInfo,p,(function(r,o){if(r)return i(r);try{var a=o.objectStore(n._dbInfo.storeName).openCursor(),u=1;a.onsuccess=function(){var n=a.result;if(n){var i=n.value;T(i)&&(i=k(i));var r=t(i,n.key,u++);void 0!==r?e(r):n.continue()}else e()},a.onerror=function(){i(a.error)}}catch(t){i(t)}}))})).catch(i)}));return u(i,e),i},getItem:function(t,e){var n=this;t=s(t);var i=new a((function(e,i){n.ready().then((function(){A(n._dbInfo,p,(function(r,o){if(r)return i(r);try{var a=o.objectStore(n._dbInfo.storeName).get(t);a.onsuccess=function(){var t=a.result;void 0===t&&(t=null),T(t)&&(t=k(t)),e(t)},a.onerror=function(){i(a.error)}}catch(t){i(t)}}))})).catch(i)}));return u(i,e),i},setItem:function(t,e,n){var i=this;t=s(t);var r=new a((function(n,r){var o;i.ready().then((function(){return o=i._dbInfo,"[object Blob]"===v.call(e)?_(o.db).then((function(t){return t?e:(n=e,new a((function(t,e){var i=new FileReader;i.onerror=e,i.onloadend=function(e){var i=btoa(e.target.result||"");t({__local_forage_encoded_blob:!0,data:i,type:n.type})},i.readAsBinaryString(n)})));var n})):e})).then((function(e){A(i._dbInfo,g,(function(o,a){if(o)return r(o);try{var u=a.objectStore(i._dbInfo.storeName);null===e&&(e=void 0);var c=u.put(e,t);a.oncomplete=function(){void 0===e&&(e=null),n(e)},a.onabort=a.onerror=function(){var t=c.error?c.error:c.transaction.error;r(t)}}catch(t){r(t)}}))})).catch(r)}));return u(r,n),r},removeItem:function(t,e){var n=this;t=s(t);var i=new a((function(e,i){n.ready().then((function(){A(n._dbInfo,g,(function(r,o){if(r)return i(r);try{var a=o.objectStore(n._dbInfo.storeName).delete(t);o.oncomplete=function(){e()},o.onerror=function(){i(a.error)},o.onabort=function(){var t=a.error?a.error:a.transaction.error;i(t)}}catch(t){i(t)}}))})).catch(i)}));return u(i,e),i},clear:function(t){var e=this,n=new a((function(t,n){e.ready().then((function(){A(e._dbInfo,g,(function(i,r){if(i)return n(i);try{var o=r.objectStore(e._dbInfo.storeName).clear();r.oncomplete=function(){t()},r.onabort=r.onerror=function(){var t=o.error?o.error:o.transaction.error;n(t)}}catch(t){n(t)}}))})).catch(n)}));return u(n,t),n},length:function(t){var e=this,n=new a((function(t,n){e.ready().then((function(){A(e._dbInfo,p,(function(i,r){if(i)return n(i);try{var o=r.objectStore(e._dbInfo.storeName).count();o.onsuccess=function(){t(o.result)},o.onerror=function(){n(o.error)}}catch(t){n(t)}}))})).catch(n)}));return u(n,t),n},key:function(t,e){var n=this,i=new a((function(e,i){t<0?e(null):n.ready().then((function(){A(n._dbInfo,p,(function(r,o){if(r)return i(r);try{var a=o.objectStore(n._dbInfo.storeName),u=!1,c=a.openKeyCursor();c.onsuccess=function(){var n=c.result;n?0===t||u?e(n.key):(u=!0,n.advance(t)):e(null)},c.onerror=function(){i(c.error)}}catch(t){i(t)}}))})).catch(i)}));return u(i,e),i},keys:function(t){var e=this,n=new a((function(t,n){e.ready().then((function(){A(e._dbInfo,p,(function(i,r){if(i)return n(i);try{var o=r.objectStore(e._dbInfo.storeName).openKeyCursor(),a=[];o.onsuccess=function(){var e=o.result;e?(a.push(e.key),e.continue()):t(a)},o.onerror=function(){n(o.error)}}catch(t){n(t)}}))})).catch(n)}));return u(n,t),n},dropInstance:function(t,e){e=l.apply(this,arguments);var n,i=this.config();if((t="function"!=typeof t&&t||{}).name||(t.name=t.name||i.name,t.storeName=t.storeName||i.storeName),t.name){var o=t.name===i.name&&this._dbInfo.db?a.resolve(this._dbInfo.db):S(t).then((function(e){var n=h[t.name],i=n.forages;n.db=e;for(var r=0;r<i.length;r++)i[r]._dbInfo.db=e;return e}));n=t.storeName?o.then((function(e){if(e.objectStoreNames.contains(t.storeName)){var n=e.version+1;b(t);var i=h[t.name],o=i.forages;e.close();for(var u=0;u<o.length;u++){var c=o[u];c._dbInfo.db=null,c._dbInfo.version=n}var s=new a((function(e,i){var o=r.open(t.name,n);o.onerror=function(t){o.result.close(),i(t)},o.onupgradeneeded=function(){o.result.deleteObjectStore(t.storeName)},o.onsuccess=function(){var t=o.result;t.close(),e(t)}}));return s.then((function(t){i.db=t;for(var e=0;e<o.length;e++){var n=o[e];n._dbInfo.db=t,m(n._dbInfo)}})).catch((function(e){throw(w(t,e)||a.resolve()).catch((function(){})),e}))}})):o.then((function(e){b(t);var n=h[t.name],i=n.forages;e.close();for(var o=0;o<i.length;o++)i[o]._dbInfo.db=null;var u=new a((function(e,n){var i=r.deleteDatabase(t.name);i.onerror=function(){var t=i.result;t&&t.close(),n(i.error)},i.onblocked=function(){console.warn('dropInstance blocked for database "'+t.name+'" until all open connections are closed')},i.onsuccess=function(){var t=i.result;t&&t.close(),e(t)}}));return u.then((function(t){n.db=t;for(var e=0;e<i.length;e++)m(i[e]._dbInfo)})).catch((function(e){throw(w(t,e)||a.resolve()).catch((function(){})),e}))}))}else n=a.reject("Invalid arguments");return u(n,e),n}};var R="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",C=/^~~local_forage_type~([^~]+)~/,I="__lfsc__:",j="arbf",P="blob",z="si08",D="ui08",V="uic8",L="si16",B="si32",F="ur16",G="ui32",U="fl32",K="fl64",H=Object.prototype.toString;function Q(t){var e,n,i,r,o,a=.75*t.length,u=t.length,c=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var s=new ArrayBuffer(a),l=new Uint8Array(s);for(e=0;e<u;e+=4)n=R.indexOf(t[e]),i=R.indexOf(t[e+1]),r=R.indexOf(t[e+2]),o=R.indexOf(t[e+3]),l[c++]=n<<2|i>>4,l[c++]=(15&i)<<4|r>>2,l[c++]=(3&r)<<6|63&o;return s}function q(t){var e,n=new Uint8Array(t),i="";for(e=0;e<n.length;e+=3)i+=R[n[e]>>2],i+=R[(3&n[e])<<4|n[e+1]>>4],i+=R[(15&n[e+1])<<2|n[e+2]>>6],i+=R[63&n[e+2]];return n.length%3==2?i=i.substring(0,i.length-1)+"=":n.length%3==1&&(i=i.substring(0,i.length-2)+"=="),i}var $={serialize:function(t,e){var n="";if(t&&(n=H.call(t)),t&&("[object ArrayBuffer]"===n||t.buffer&&"[object ArrayBuffer]"===H.call(t.buffer))){var i,r=I;t instanceof ArrayBuffer?(i=t,r+=j):(i=t.buffer,"[object Int8Array]"===n?r+=z:"[object Uint8Array]"===n?r+=D:"[object Uint8ClampedArray]"===n?r+=V:"[object Int16Array]"===n?r+=L:"[object Uint16Array]"===n?r+=F:"[object Int32Array]"===n?r+=B:"[object Uint32Array]"===n?r+=G:"[object Float32Array]"===n?r+=U:"[object Float64Array]"===n?r+=K:e(new Error("Failed to get type for BinaryArray"))),e(r+q(i))}else if("[object Blob]"===n){var o=new FileReader;o.onload=function(){var n="~~local_forage_type~"+t.type+"~"+q(this.result);e(I+P+n)},o.readAsArrayBuffer(t)}else try{e(JSON.stringify(t))}catch(n){console.error("Couldn't convert value into a JSON string: ",t),e(null,n)}},deserialize:function(t){if(t.substring(0,9)!==I)return JSON.parse(t);var e,n=t.substring(13),i=t.substring(9,13);if(i===P&&C.test(n)){var r=n.match(C);e=r[1],n=n.substring(r[0].length)}var a=Q(n);switch(i){case j:return a;case P:return o([a],{type:e});case z:return new Int8Array(a);case D:return new Uint8Array(a);case V:return new Uint8ClampedArray(a);case L:return new Int16Array(a);case F:return new Uint16Array(a);case B:return new Int32Array(a);case G:return new Uint32Array(a);case U:return new Float32Array(a);case K:return new Float64Array(a);default:throw new Error("Unkown type: "+i)}},stringToBuffer:Q,bufferToString:q};function Y(t,e,n,i){t.executeSql("CREATE TABLE IF NOT EXISTS "+e.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],n,i)}function W(t,e,n,i,r,o){t.executeSql(n,i,r,(function(t,a){a.code===a.SYNTAX_ERR?t.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?",[e.storeName],(function(t,u){u.rows.length?o(t,a):Y(t,e,(function(){t.executeSql(n,i,r,o)}),o)}),o):o(t,a)}),o)}function X(t,e,n,i){var r=this;t=s(t);var o=new a((function(o,a){r.ready().then((function(){void 0===e&&(e=null);var u=e,c=r._dbInfo;c.serializer.serialize(e,(function(e,s){s?a(s):c.db.transaction((function(n){W(n,c,"INSERT OR REPLACE INTO "+c.storeName+" (key, value) VALUES (?, ?)",[t,e],(function(){o(u)}),(function(t,e){a(e)}))}),(function(e){if(e.code===e.QUOTA_ERR){if(i>0)return void o(X.apply(r,[t,u,n,i-1]));a(e)}}))}))})).catch(a)}));return u(o,n),o}var J={_driver:"webSQLStorage",_initStorage:function(t){var e=this,n={db:null};if(t)for(var i in t)n[i]="string"!=typeof t[i]?t[i].toString():t[i];var r=new a((function(t,i){try{n.db=openDatabase(n.name,String(n.version),n.description,n.size)}catch(t){return i(t)}n.db.transaction((function(r){Y(r,n,(function(){e._dbInfo=n,t()}),(function(t,e){i(e)}))}),i)}));return n.serializer=$,r},_support:"function"==typeof openDatabase,iterate:function(t,e){var n=this,i=new a((function(e,i){n.ready().then((function(){var r=n._dbInfo;r.db.transaction((function(n){W(n,r,"SELECT * FROM "+r.storeName,[],(function(n,i){for(var o=i.rows,a=o.length,u=0;u<a;u++){var c=o.item(u),s=c.value;if(s&&(s=r.serializer.deserialize(s)),void 0!==(s=t(s,c.key,u+1)))return void e(s)}e()}),(function(t,e){i(e)}))}))})).catch(i)}));return u(i,e),i},getItem:function(t,e){var n=this;t=s(t);var i=new a((function(e,i){n.ready().then((function(){var r=n._dbInfo;r.db.transaction((function(n){W(n,r,"SELECT * FROM "+r.storeName+" WHERE key = ? LIMIT 1",[t],(function(t,n){var i=n.rows.length?n.rows.item(0).value:null;i&&(i=r.serializer.deserialize(i)),e(i)}),(function(t,e){i(e)}))}))})).catch(i)}));return u(i,e),i},setItem:function(t,e,n){return X.apply(this,[t,e,n,1])},removeItem:function(t,e){var n=this;t=s(t);var i=new a((function(e,i){n.ready().then((function(){var r=n._dbInfo;r.db.transaction((function(n){W(n,r,"DELETE FROM "+r.storeName+" WHERE key = ?",[t],(function(){e()}),(function(t,e){i(e)}))}))})).catch(i)}));return u(i,e),i},clear:function(t){var e=this,n=new a((function(t,n){e.ready().then((function(){var i=e._dbInfo;i.db.transaction((function(e){W(e,i,"DELETE FROM "+i.storeName,[],(function(){t()}),(function(t,e){n(e)}))}))})).catch(n)}));return u(n,t),n},length:function(t){var e=this,n=new a((function(t,n){e.ready().then((function(){var i=e._dbInfo;i.db.transaction((function(e){W(e,i,"SELECT COUNT(key) as c FROM "+i.storeName,[],(function(e,n){var i=n.rows.item(0).c;t(i)}),(function(t,e){n(e)}))}))})).catch(n)}));return u(n,t),n},key:function(t,e){var n=this,i=new a((function(e,i){n.ready().then((function(){var r=n._dbInfo;r.db.transaction((function(n){W(n,r,"SELECT key FROM "+r.storeName+" WHERE id = ? LIMIT 1",[t+1],(function(t,n){var i=n.rows.length?n.rows.item(0).key:null;e(i)}),(function(t,e){i(e)}))}))})).catch(i)}));return u(i,e),i},keys:function(t){var e=this,n=new a((function(t,n){e.ready().then((function(){var i=e._dbInfo;i.db.transaction((function(e){W(e,i,"SELECT key FROM "+i.storeName,[],(function(e,n){for(var i=[],r=0;r<n.rows.length;r++)i.push(n.rows.item(r).key);t(i)}),(function(t,e){n(e)}))}))})).catch(n)}));return u(n,t),n},dropInstance:function(t,e){e=l.apply(this,arguments);var n=this.config();(t="function"!=typeof t&&t||{}).name||(t.name=t.name||n.name,t.storeName=t.storeName||n.storeName);var i,r=this;return u(i=t.name?new a((function(e){var i;i=t.name===n.name?r._dbInfo.db:openDatabase(t.name,"","",0),t.storeName?e({db:i,storeNames:[t.storeName]}):e(function(t){return new a((function(e,n){t.transaction((function(i){i.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",[],(function(n,i){for(var r=[],o=0;o<i.rows.length;o++)r.push(i.rows.item(o).name);e({db:t,storeNames:r})}),(function(t,e){n(e)}))}),(function(t){n(t)}))}))}(i))})).then((function(t){return new a((function(e,n){t.db.transaction((function(i){function r(t){return new a((function(e,n){i.executeSql("DROP TABLE IF EXISTS "+t,[],(function(){e()}),(function(t,e){n(e)}))}))}for(var o=[],u=0,c=t.storeNames.length;u<c;u++)o.push(r(t.storeNames[u]));a.all(o).then((function(){e()})).catch((function(t){n(t)}))}),(function(t){n(t)}))}))})):a.reject("Invalid arguments"),e),i}};function Z(t,e){var n=t.name+"/";return t.storeName!==e.storeName&&(n+=t.storeName+"/"),n}function tt(){return!function(){var t="_localforage_support_test";try{return localStorage.setItem(t,!0),localStorage.removeItem(t),!1}catch(t){return!0}}()||localStorage.length>0}var et={_driver:"localStorageWrapper",_initStorage:function(t){var e={};if(t)for(var n in t)e[n]=t[n];return e.keyPrefix=Z(t,this._defaultConfig),tt()?(this._dbInfo=e,e.serializer=$,a.resolve()):a.reject()},_support:function(){try{return"undefined"!=typeof localStorage&&"setItem"in localStorage&&!!localStorage.setItem}catch(t){return!1}}(),iterate:function(t,e){var n=this,i=n.ready().then((function(){for(var e=n._dbInfo,i=e.keyPrefix,r=i.length,o=localStorage.length,a=1,u=0;u<o;u++){var c=localStorage.key(u);if(0===c.indexOf(i)){var s=localStorage.getItem(c);if(s&&(s=e.serializer.deserialize(s)),void 0!==(s=t(s,c.substring(r),a++)))return s}}}));return u(i,e),i},getItem:function(t,e){var n=this;t=s(t);var i=n.ready().then((function(){var e=n._dbInfo,i=localStorage.getItem(e.keyPrefix+t);return i&&(i=e.serializer.deserialize(i)),i}));return u(i,e),i},setItem:function(t,e,n){var i=this;t=s(t);var r=i.ready().then((function(){void 0===e&&(e=null);var n=e;return new a((function(r,o){var a=i._dbInfo;a.serializer.serialize(e,(function(e,i){if(i)o(i);else try{localStorage.setItem(a.keyPrefix+t,e),r(n)}catch(t){"QuotaExceededError"!==t.name&&"NS_ERROR_DOM_QUOTA_REACHED"!==t.name||o(t),o(t)}}))}))}));return u(r,n),r},removeItem:function(t,e){var n=this;t=s(t);var i=n.ready().then((function(){var e=n._dbInfo;localStorage.removeItem(e.keyPrefix+t)}));return u(i,e),i},clear:function(t){var e=this,n=e.ready().then((function(){for(var t=e._dbInfo.keyPrefix,n=localStorage.length-1;n>=0;n--){var i=localStorage.key(n);0===i.indexOf(t)&&localStorage.removeItem(i)}}));return u(n,t),n},length:function(t){var e=this.keys().then((function(t){return t.length}));return u(e,t),e},key:function(t,e){var n=this,i=n.ready().then((function(){var e,i=n._dbInfo;try{e=localStorage.key(t)}catch(t){e=null}return e&&(e=e.substring(i.keyPrefix.length)),e}));return u(i,e),i},keys:function(t){var e=this,n=e.ready().then((function(){for(var t=e._dbInfo,n=localStorage.length,i=[],r=0;r<n;r++){var o=localStorage.key(r);0===o.indexOf(t.keyPrefix)&&i.push(o.substring(t.keyPrefix.length))}return i}));return u(n,t),n},dropInstance:function(t,e){if(e=l.apply(this,arguments),!(t="function"!=typeof t&&t||{}).name){var n=this.config();t.name=t.name||n.name,t.storeName=t.storeName||n.storeName}var i,r=this;return i=t.name?new a((function(e){t.storeName?e(Z(t,r._defaultConfig)):e(t.name+"/")})).then((function(t){for(var e=localStorage.length-1;e>=0;e--){var n=localStorage.key(e);0===n.indexOf(t)&&localStorage.removeItem(n)}})):a.reject("Invalid arguments"),u(i,e),i}},nt=function(t,e){for(var n=t.length,i=0;i<n;){if((r=t[i])===(o=e)||"number"==typeof r&&"number"==typeof o&&isNaN(r)&&isNaN(o))return!0;i++}var r,o;return!1},it=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)},rt={},ot={},at={INDEXEDDB:O,WEBSQL:J,LOCALSTORAGE:et},ut=[at.INDEXEDDB._driver,at.WEBSQL._driver,at.LOCALSTORAGE._driver],ct=["dropInstance"],st=["clear","getItem","iterate","key","keys","length","removeItem","setItem"].concat(ct),lt={description:"",driver:ut.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1};function dt(t,e){t[e]=function(){var n=arguments;return t.ready().then((function(){return t[e].apply(t,n)}))}}function ft(){for(var t=1;t<arguments.length;t++){var e=arguments[t];if(e)for(var n in e)e.hasOwnProperty(n)&&(it(e[n])?arguments[0][n]=e[n].slice():arguments[0][n]=e[n])}return arguments[0]}var ht=function(){function t(e){for(var n in function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),at)if(at.hasOwnProperty(n)){var i=at[n],r=i._driver;this[n]=r,rt[r]||this.defineDriver(i)}this._defaultConfig=ft({},lt),this._config=ft({},this._defaultConfig,e),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch((function(){}))}return t.prototype.config=function(t){if("object"===(void 0===t?"undefined":i(t))){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var e in t){if("storeName"===e&&(t[e]=t[e].replace(/\W/g,"_")),"version"===e&&"number"!=typeof t[e])return new Error("Database version must be a number.");this._config[e]=t[e]}return!("driver"in t)||!t.driver||this.setDriver(this._config.driver)}return"string"==typeof t?this._config[t]:this._config},t.prototype.defineDriver=function(t,e,n){var i=new a((function(e,n){try{var i=t._driver,r=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");if(!t._driver)return void n(r);for(var o=st.concat("_initStorage"),c=0,s=o.length;c<s;c++){var l=o[c];if((!nt(ct,l)||t[l])&&"function"!=typeof t[l])return void n(r)}!function(){for(var e=function(t){return function(){var e=new Error("Method "+t+" is not implemented by the current driver"),n=a.reject(e);return u(n,arguments[arguments.length-1]),n}},n=0,i=ct.length;n<i;n++){var r=ct[n];t[r]||(t[r]=e(r))}}();var d=function(n){rt[i]&&console.info("Redefining LocalForage driver: "+i),rt[i]=t,ot[i]=n,e()};"_support"in t?t._support&&"function"==typeof t._support?t._support().then(d,n):d(!!t._support):d(!0)}catch(t){n(t)}}));return c(i,e,n),i},t.prototype.driver=function(){return this._driver||null},t.prototype.getDriver=function(t,e,n){var i=rt[t]?a.resolve(rt[t]):a.reject(new Error("Driver not found."));return c(i,e,n),i},t.prototype.getSerializer=function(t){var e=a.resolve($);return c(e,t),e},t.prototype.ready=function(t){var e=this,n=e._driverSet.then((function(){return null===e._ready&&(e._ready=e._initDriver()),e._ready}));return c(n,t,t),n},t.prototype.setDriver=function(t,e,n){var i=this;it(t)||(t=[t]);var r=this._getSupportedDrivers(t);function o(){i._config.driver=i.driver()}function u(t){return i._extend(t),o(),i._ready=i._initStorage(i._config),i._ready}var s=null!==this._driverSet?this._driverSet.catch((function(){return a.resolve()})):a.resolve();return this._driverSet=s.then((function(){var t=r[0];return i._dbInfo=null,i._ready=null,i.getDriver(t).then((function(t){i._driver=t._driver,o(),i._wrapLibraryMethodsWithReady(),i._initDriver=function(t){return function(){var e=0;return function n(){for(;e<t.length;){var r=t[e];return e++,i._dbInfo=null,i._ready=null,i.getDriver(r).then(u).catch(n)}o();var c=new Error("No available storage method found.");return i._driverSet=a.reject(c),i._driverSet}()}}(r)}))})).catch((function(){o();var t=new Error("No available storage method found.");return i._driverSet=a.reject(t),i._driverSet})),c(this._driverSet,e,n),this._driverSet},t.prototype.supports=function(t){return!!ot[t]},t.prototype._extend=function(t){ft(this,t)},t.prototype._getSupportedDrivers=function(t){for(var e=[],n=0,i=t.length;n<i;n++){var r=t[n];this.supports(r)&&e.push(r)}return e},t.prototype._wrapLibraryMethodsWithReady=function(){for(var t=0,e=st.length;t<e;t++)dt(this,st[t])},t.prototype.createInstance=function(e){return new t(e)},t}(),vt=new ht;e.exports=vt},{3:3}]},{},[4])(4)},9753:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.svgSetIdx_RectNodeAttribute=e.svgInteractive_RectCenterAttribute=e.svgInteractive_LineAttribute=e.svgSelect_RectNodeAttribute=e.svgDesign_RectCenterAttribute=e.svgDesign_RectAttribute=e.svgDesign_LineAttribute=e.svgCreate_RectCenterAttribute=void 0,e.svgCreate_RectCenterAttribute={fill:"transparent",stroke:"#129bff",strokeWidth:1},e.svgDesign_LineAttribute={stroke:"#5F6CE1",strokeWidth:1,strokeLinecap:"round",strokeDasharrays:[4,2,1,2]},e.svgDesign_RectAttribute={fill:"#FFFFFF",stroke:"#5F6CE1",strokeWidth:1,width:7,height:7},e.svgDesign_RectCenterAttribute={fill:"transparent",stroke:"transparent",strokeWidth:1},e.svgSelect_RectNodeAttribute={fill:"none",stroke:"#5F6CE1",strokeWidth:1},e.svgInteractive_LineAttribute={stroke:"#129bff",strokeWidth:1,strokeLinecap:"round",strokeDasharray:8},e.svgInteractive_RectCenterAttribute={fill:"transparent"},e.svgSetIdx_RectNodeAttribute={fill:"none",stroke:"#999",strokeWidth:1,strokeDasharray:2}},9922:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Adapter_Map_PathD_Matrix=e.icdt_Adapter_extract_matrix=e.icdt_Adapter_Ratios_2_PolygonPoints=e.icdt_Adapter_Points_2_Ratios=e.icdt_Adapter_Points_Extract_MinMaxXY=e.icdt_Adapter_PolygonPoints_2_Points=e.icdt_Adapter_RatioMaps_2_PathD=e.icdt_Adapter_PointMaps_2_RatioMaps=e.icdt_Adapter_PointMaps_Extract_MinMaxXY=e.icdt_Adapter_PointMaps_2_PathD=e.icdt_Adapter_PathD_2_PointMaps=void 0;var i=n(5877);e.icdt_Adapter_PathD_2_PointMaps=function(t){var e;return null===(e=t.split(/(?=[MLCSQTAHVZmlcsqtahvz])/))||void 0===e?void 0:e.map((function(t){var e,n={type:t.substring(0,1)},r=(e=t.replace(/\s?\-?[0-9\.]+e-[0-9]+/g," 0").replace(/\,/g," ").replace(/\s?\-/g," -").replace(/(\.[0-9]+)(\.[0-9]+)/g,"$1 0$2").replace(/\-\./g,"-0.").replace(/[^0-9\.\-]/g," ").replace(/\s+/g," ").trim())?e.split(/\s/).map((function(t){return(0,i.icdt_RoundNumber)(parseFloat(t),1e6)})):[];return r.length&&(n.points=r),n}))},e.icdt_Adapter_PointMaps_2_PathD=function(t){return t.map((function(t){var e,n;return"".concat(t.type).concat(null!==(n=null===(e=t.points)||void 0===e?void 0:e.join(" "))&&void 0!==n?n:"")})).join("")},e.icdt_Adapter_PointMaps_Extract_MinMaxXY=function(t){var e=[],n=[],i=[],r=[];return t.forEach((function(t){var o,a,u,c,s,l,d,f;switch(["M","L","C","S","Q","T"].includes(t.type)&&t.points&&t.points.forEach((function(t,i){i%2==0?e.push(t):n.push(t)})),t.type){case"A":7==(null===(o=t.points)||void 0===o?void 0:o.length)&&(i.push(t.points[5]),r.push(t.points[6]));break;case"H":(null===(a=t.points)||void 0===a?void 0:a.length)&&(e.push(t.points[0]),i.push(t.points[0]));break;case"V":(null===(u=t.points)||void 0===u?void 0:u.length)&&(n.push(t.points[0]),r.push(t.points[0]));break;case"a":if(7==(null===(c=t.points)||void 0===c?void 0:c.length)){var h=e[e.length-1];e.push(h+t.points[5]),i.push(h+t.points[5]);var v=n[n.length-1];n.push(v+t.points[6]),r.push(v+t.points[6])}break;case"h":if(null===(s=t.points)||void 0===s?void 0:s.length){var p=e[e.length-1];e.push(p+t.points[0]),i.push(p+t.points[0])}break;case"v":(null===(l=t.points)||void 0===l?void 0:l.length)&&(p=n[n.length-1],n.push(p+t.points[0]),r.push(p+t.points[0]));break;case"M":case"L":case"C":case"S":case"Q":case"T":null===(d=t.points)||void 0===d||d.forEach((function(t,e){e%2==0?i.push(t):r.push(t)}));break;case"m":case"l":case"c":case"s":case"q":case"t":null===(f=t.points)||void 0===f||f.forEach((function(t,o){if(o%2==0){var a=e[e.length-1];e.push(a+t),i.push(a+t)}else a=n[n.length-1],n.push(a+t),r.push(a+t)}))}})),{minX:Math.min.apply(null,i),minY:Math.min.apply(null,r),maxX:Math.max.apply(null,i),maxY:Math.max.apply(null,r)}},e.icdt_Adapter_PointMaps_2_RatioMaps=function(t,e){return e.map((function(e){var n,r,o,a,u,c,s,l,d=[];switch(e.type){case"a":7==(null===(n=e.points)||void 0===n?void 0:n.length)&&d.push([(0,i.icdt_RoundNumber)(e.points[0]/t.width,1e6),(0,i.icdt_RoundNumber)(e.points[1]/t.height,1e6),e.points[2],e.points[3],e.points[4],(0,i.icdt_RoundNumber)(e.points[5]/t.width,1e6),(0,i.icdt_RoundNumber)(e.points[6]/t.height,1e6)]);break;case"A":7==(null===(r=e.points)||void 0===r?void 0:r.length)&&d.push([(0,i.icdt_RoundNumber)(e.points[0]/t.width,1e6),(0,i.icdt_RoundNumber)(e.points[1]/t.height,1e6),e.points[2],e.points[3],e.points[4],(0,i.icdt_RoundNumber)((e.points[5]-t.x)/t.width,1e6),(0,i.icdt_RoundNumber)((e.points[6]-t.y)/t.height,1e6)]);break;case"h":(null===(o=e.points)||void 0===o?void 0:o.length)&&d.push([(0,i.icdt_RoundNumber)(e.points[0]/t.width,1e6)]);break;case"H":(null===(a=e.points)||void 0===a?void 0:a.length)&&d.push([(0,i.icdt_RoundNumber)((e.points[0]-t.x)/t.width,1e6)]);break;case"v":(null===(u=e.points)||void 0===u?void 0:u.length)&&d.push([(0,i.icdt_RoundNumber)(e.points[0]/t.height,1e6)]);break;case"V":(null===(c=e.points)||void 0===c?void 0:c.length)&&d.push([(0,i.icdt_RoundNumber)((e.points[0]-t.y)/t.height,1e6)]);break;case"z":case"Z":break;case"M":case"L":case"C":case"S":case"Q":case"T":if(null===(s=e.points)||void 0===s?void 0:s.length)for(var f=0,h=e.points.length-1;f<h;f+=2)d.push([(0,i.icdt_RoundNumber)((e.points[f]-t.x)/t.width,1e6),(0,i.icdt_RoundNumber)((e.points[f+1]-t.y)/t.height,1e6)]);break;case"m":case"l":case"c":case"s":case"q":case"t":if(null===(l=e.points)||void 0===l?void 0:l.length)for(f=0,h=e.points.length-1;f<h;f+=2)d.push([(0,i.icdt_RoundNumber)(e.points[f]/t.width,1e6),(0,i.icdt_RoundNumber)(e.points[f+1]/t.height,1e6)])}return d.length?{type:e.type,ratios:d}:{type:e.type}}))},e.icdt_Adapter_RatioMaps_2_PathD=function(t,e){return e.map((function(e){var n,r,o,a,u,c,s,l,d,f,h,v,p,g,y,_,b,m,w,x,S,M,E,k,T,N,A,O;switch(e.type){case"a":return"".concat(e.type).concat(null!==(a=null===(o=null===(r=null===(n=e.ratios)||void 0===n?void 0:n.map((function(e){var n,r,o,a,u,c,s;return[(0,i.icdt_RoundNumber)(t.width*(null!==(n=e[0])&&void 0!==n?n:0),1e6),(0,i.icdt_RoundNumber)(t.height*(null!==(r=e[1])&&void 0!==r?r:0),1e6),null!==(o=e[2])&&void 0!==o?o:0,null!==(a=e[3])&&void 0!==a?a:0,null!==(u=e[4])&&void 0!==u?u:0,(0,i.icdt_RoundNumber)(t.width*(null!==(c=e[5])&&void 0!==c?c:0),1e6),(0,i.icdt_RoundNumber)(t.height*(null!==(s=e[6])&&void 0!==s?s:0),1e6)]})))||void 0===r?void 0:r.map((function(t){return t.join(" ")})))||void 0===o?void 0:o.join(" "))&&void 0!==a?a:"");case"A":return"".concat(e.type).concat(null!==(l=null===(s=null===(c=null===(u=e.ratios)||void 0===u?void 0:u.map((function(e){var n,r,o,a,u,c,s;return[(0,i.icdt_RoundNumber)(t.width*(null!==(n=e[0])&&void 0!==n?n:0),1e6),(0,i.icdt_RoundNumber)(t.height*(null!==(r=e[1])&&void 0!==r?r:0),1e6),null!==(o=e[2])&&void 0!==o?o:0,null!==(a=e[3])&&void 0!==a?a:0,null!==(u=e[4])&&void 0!==u?u:0,(0,i.icdt_RoundNumber)(t.x+t.width*(null!==(c=e[5])&&void 0!==c?c:0),1e6),(0,i.icdt_RoundNumber)(t.y+t.height*(null!==(s=e[6])&&void 0!==s?s:0),1e6)]})))||void 0===c?void 0:c.map((function(t){return t.join(" ")})))||void 0===s?void 0:s.join(" "))&&void 0!==l?l:"");case"h":return"".concat(e.type).concat(null!==(h=null===(f=null===(d=e.ratios)||void 0===d?void 0:d.map((function(e){var n;return(0,i.icdt_RoundNumber)(t.width*(null!==(n=e[0])&&void 0!==n?n:0),1e6)})))||void 0===f?void 0:f.join(" "))&&void 0!==h?h:"");case"H":return"".concat(e.type).concat(null!==(g=null===(p=null===(v=e.ratios)||void 0===v?void 0:v.map((function(e){var n;return(0,i.icdt_RoundNumber)(t.x+t.width*(null!==(n=e[0])&&void 0!==n?n:0),1e6)})))||void 0===p?void 0:p.join(" "))&&void 0!==g?g:"");case"v":return"".concat(e.type).concat(null!==(b=null===(_=null===(y=e.ratios)||void 0===y?void 0:y.map((function(e){var n;return(0,i.icdt_RoundNumber)(t.height*(null!==(n=e[0])&&void 0!==n?n:0),1e6)})))||void 0===_?void 0:_.join(" "))&&void 0!==b?b:"");case"V":return"".concat(e.type).concat(null!==(x=null===(w=null===(m=e.ratios)||void 0===m?void 0:m.map((function(e){var n;return(0,i.icdt_RoundNumber)(t.y+t.height*(null!==(n=e[0])&&void 0!==n?n:0),1e6)})))||void 0===w?void 0:w.join(" "))&&void 0!==x?x:"");case"z":case"Z":return e.type;case"M":case"L":case"C":case"S":case"Q":case"T":return"".concat(e.type).concat(null!==(k=null===(E=null===(M=null===(S=e.ratios)||void 0===S?void 0:S.map((function(e){var n,r;return[(0,i.icdt_RoundNumber)(t.x+t.width*(null!==(n=e[0])&&void 0!==n?n:0),1e6),(0,i.icdt_RoundNumber)(t.y+t.height*(null!==(r=e[1])&&void 0!==r?r:0),1e6)]})))||void 0===M?void 0:M.map((function(t){return t.join(" ")})))||void 0===E?void 0:E.join(" "))&&void 0!==k?k:"");case"m":case"l":case"c":case"s":case"q":case"t":return"".concat(e.type).concat(null!==(O=null===(A=null===(N=null===(T=e.ratios)||void 0===T?void 0:T.map((function(e){var n,r;return[(0,i.icdt_RoundNumber)(t.width*(null!==(n=e[0])&&void 0!==n?n:0),1e6),(0,i.icdt_RoundNumber)(t.height*(null!==(r=e[1])&&void 0!==r?r:0),1e6)]})))||void 0===N?void 0:N.map((function(t){return t.join(" ")})))||void 0===A?void 0:A.join(" "))&&void 0!==O?O:"");default:return""}})).join("")},e.icdt_Adapter_PolygonPoints_2_Points=function(t){return(e=t.replace(/\,/g," ").replace(/\-/g," -").replace(/[^0-9\.\-]/g," ").replace(/\s+/g," ").trim())?e.split(/\s/).map((function(t){return parseFloat(t)})):[];var e},e.icdt_Adapter_Points_Extract_MinMaxXY=function(t){var e=[],n=[];return t.forEach((function(t,i){i%2==0?e.push(t):n.push(t)})),{minX:Math.min.apply(null,e),minY:Math.min.apply(null,n),maxX:Math.max.apply(null,e),maxY:Math.max.apply(null,n)}},e.icdt_Adapter_Points_2_Ratios=function(t,e){for(var n=[],i=0,r=e.length-1;i<r;i+=2)n.push([(e[i]-t.x)/t.width,(e[i+1]-t.y)/t.height]);return n},e.icdt_Adapter_Ratios_2_PolygonPoints=function(t,e){return e.map((function(e){return[(0,i.icdt_RoundNumber)(t.x+t.width*e[0],1e6),(0,i.icdt_RoundNumber)(t.y+t.height*e[1],1e6)]})).map((function(t){return t.join(" ")})).join(" ")},e.icdt_Adapter_extract_matrix=function(t){var e=t.replace(/\s?\-?[0-9\.]+e-[0-9]+/g," 0").replace(/\,/g," ").replace(/\s?\-/g," -").replace(/(\.[0-9]+)(\.[0-9]+)/g,"$1 0$2").replace(/\-\./g,"-0.").replace(/[^0-9\.\-]/g," ").replace(/\s+/g," ").trim().split(" ").map((function(t){return(0,i.icdt_RoundNumber)(parseFloat(t),1e6)}));if(6==e.length)return{a:e[0],b:e[1],c:e[2],d:e[3],e:e[4],f:e[5]}},e.icdt_Adapter_Map_PathD_Matrix=function(t,n){var i=(0,e.icdt_Adapter_extract_matrix)(n);return i?window.Snap.path.map(t,new window.Snap.Matrix(i.a,i.b,i.c,i.d,i.e,i.f)).toString():t}},2866:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.extractFromDataV1=e.extractSourceV1=void 0;var i=n(9427),r=n(2121),o=n(2977);e.extractSourceV1=function(t){return a(null==t?void 0:t.url,null==t?void 0:t.path,null==t?void 0:t.src)};var a=function(t,e,n){var r,o,a,u,c;return t&&(a=t.replace(/\\/g,"/")),e&&(u=e.replace(/\\/g,"/")),n&&(c=n.replace(/\\/g,"/")),u&&!a&&(a=(null===(r=i.icdt.config)||void 0===r?void 0:r.readfileuploadurl)+u),!c||u||a||(u=c.replace(/^[a-zA-Z0-9\-\_\/\\\:\.]+(upload|FileUpload|files|readfileupload|filereader|readfile)\//g,""),a=(null===(o=i.icdt.config)||void 0===o?void 0:o.readfileuploadurl)+u),{url:a,path:u,name:(null!=a?a:"").split("/").pop()||(null!=u?u:"").split("/").pop()||""}};e.extractFromDataV1=function(t){var n={x:0,y:0,width:t.screen.w,height:t.screen.h},u=[];return t.data.forEach((function(t,c){var s,l,d,f,h={id:"number"==typeof t.id?t.id:i.icdt.data.newSlideId,code:null===(s=t.id)||void 0===s?void 0:s.toString(),name:"string"==typeof t.id?t.id:"Trang ".concat(c+1),svg:{viewBox:n,nodes:[]},test:(d=t.test2,d?(d.audiotrue&&(d.audiotrue=(0,e.extractSourceV1)({path:d.audiotrue.path})),d.audiofalse&&(d.audiofalse=(0,e.extractSourceV1)({path:d.audiofalse.path})),d.effecttrue&&(d.effecttrue=(0,e.extractSourceV1)({path:d.effecttrue.path})),d.effectfalse&&(d.effectfalse=(0,e.extractSourceV1)({path:d.effectfalse.path})),d.icontrue&&(d.icontrue=(0,e.extractSourceV1)({path:d.icontrue.path})),d.iconfalse&&(d.iconfalse=(0,e.extractSourceV1)({path:d.iconfalse.path})),d):{})};t.background&&h.svg&&(!(f=t.background)||null===f.match(/#([a-zA-Z0-9]+)/)&&null===f.match(/rgb\([0-9]+,[0-9]+,[0-9]+\)/)&&null===f.match(/rgba\([0-9]+,[0-9]+,[0-9]+,[0-9]+\)/)?function(t){return t&&null!==t.match(/data:[^;]+;base64,/)}(t.background)?h.svg.background={base64:t.background}:function(t){return t&&null!==t.match(/http(s)?:\/\//)}(t.background)?h.svg.background=a(t.background):h.svg.background=a(void 0,t.background):h.svg.background={color:t.background}),jQuery(null!==(l=t.svg)&&void 0!==l?l:"").find(".svg-node").each((function(e,n){var i,u,c=jQuery(n).parents(".indexs"),s=c.attr("data-index"),l=c.attr("data-time"),d=null!==(i=n.getAttribute("id"))&&void 0!==i?i:"0",f={id:parseInt(d),code:"".concat(n.nodeName,"-").concat(n.getAttribute("id")),name:n.nodeName,idx:s?parseInt(s):0,time:l?parseFloat(l):0,type:function(){switch(n.nodeName){case"polygon":return r.V_ShapeType.POLYGON;case"circle":return r.V_ShapeType.CIRCLE;case"ellipse":return r.V_ShapeType.ELLIPSE;case"line":return r.V_ShapeType.LINE;case"rect":return r.V_ShapeType.RECT;case"foreignObject":return r.V_ShapeType.FOREIGNOBJECT}return 0}(),size:function(){var t,e,i,r=0,o=0,a=0,u=0,c=null,s=null,l=parseFloat((null===(t=n.getAttribute("transform"))||void 0===t?void 0:t.replace("rotate(","").replace(")",""))||"0")||null;switch(n.nodeName){case"polygon":var d=[],f=[],h=999999999,v=999999999;c=JSON.parse(n.getAttribute("ratios")||"[]"),(s=null!==(i=null===(e=n.getAttribute("points"))||void 0===e?void 0:e.split(",").map((function(t){return t.split(" ").map((function(t){return parseFloat(t)}))})))&&void 0!==i?i:[]).forEach((function(t){d.push(t[0]),f.push(t[1])})),h=Math.min.apply(null,d),v=Math.min.apply(null,f),a=Math.max.apply(null,d)-(r=h),u=Math.max.apply(null,f)-(o=v);break;case"circle":var p=parseFloat(n.getAttribute("cx")||"0"),g=parseFloat(n.getAttribute("cy")||"0"),y=parseFloat(n.getAttribute("r")||"0");r=p-y,o=g-y,a=2*y,u=2*y;break;case"ellipse":var _=parseFloat(n.getAttribute("cx")||"0"),b=parseFloat(n.getAttribute("cy")||"0"),m=parseFloat(n.getAttribute("rx")||"0"),w=parseFloat(n.getAttribute("ry")||"0");r=_-m,o=b-w,a=2*m,u=2*w;break;case"line":var x=parseFloat(n.getAttribute("x1")||"0"),S=parseFloat(n.getAttribute("y1")||"0"),M=parseFloat(n.getAttribute("x2")||"0"),E=parseFloat(n.getAttribute("y2")||"0");h=999999999,v=999999999,h=Math.min(x,M),v=Math.min(S,E),c=[[(x-(r=h))/((a=Math.max(x,M)-r)||1),(S-(o=v))/((u=Math.max(S,E)-o)||1)],[(M-r)/(a||1),(E-o)/(u||1)]];break;case"rect":case"foreignObject":r=parseFloat(n.getAttribute("x")||"0"),o=parseFloat(n.getAttribute("y")||"0"),a=parseFloat(n.getAttribute("width")||"0"),u=parseFloat(n.getAttribute("height")||"0")}return Object.assign({},{x:r,y:o,width:a,height:u,ratios:c,points:s,rotate:l})}(),attribute:function(){var t,e,i,r,o,a,u={};switch(n.nodeName){case"polygon":case"circle":case"ellipse":case"line":case"rect":var c=null!==(t=n.getAttribute("fill"))&&void 0!==t?t:null,s=null!==(e=n.getAttribute("stroke"))&&void 0!==e?e:null,l=null!==(i=parseFloat(n.getAttribute("stroke-width")||"0"))&&void 0!==i?i:null,d=null!==(r=n.getAttribute("stroke-linecap"))&&void 0!==r?r:null,f=null!==(o=n.getAttribute("stroke-linejoin"))&&void 0!==o?o:null,h=null!==(a=parseFloat(n.getAttribute("stroke-dasharray")||"0"))&&void 0!==a?a:null;Object.assign(u,{fill:c,stroke:s,strokeWidth:l,strokeLinecap:d,strokeLinejoin:f,strokeDasharray:h})}return u}(),style:function(){var t,e,i={};switch(n.nodeName){case"polygon":case"circle":case"ellipse":case"line":case"rect":break;case"foreignObject":var r=jQuery(n).find(".svg-container");if(r.length){var a=parseFloat(r.css("border-width")||"0")||null,u=r.css("border-style")||null,c=r.css("border-color")||null,s=null,l=r.css("background-color")||null,d=null;!function(){var t=(0,o.lib_color_extract2HexAlpha)(c),e=t.hex,n=t.alpha;c=e,s=n}(),function(){var t=(0,o.lib_color_extract2HexAlpha)(l),e=t.hex,n=t.alpha;l=e,d=n}(),Object.assign(i,{borderWidth:a,borderStyle:u,borderColor:c,borderOpacity:s,backgroundColor:l,backgroundOpacity:d})}var f=jQuery(n).find(".svg-editor-content");if(f.length){var h=JSON.parse((f.attr("data-style")||"{}").replace(/\&quot\;/gm,'"')),v=(0,o.lib_color_extract2HexAlpha)(h.TextColor),p=v.hex,g=v.alpha;Object.assign(i,{fontFamily:null!==(t=h.FontFamily)&&void 0!==t?t:null,fontSize:null!==(e=h.FontSize)&&void 0!==e?e:null,color:p,opacity:g})}}return i}(),source:function(){var e,i,r,o,u,s,l,f,h,v,p,g,y,_,b,m,w={};switch(n.nodeName){case"polygon":case"circle":case"ellipse":case"line":case"rect":break;case"foreignObject":if(c.hasClass("editors")){var x=jQuery(n).find(".svg-editor-content");if(x.length){var S=null!==(e=(null!=(k=x.html())?k:"").match(/\{[a-zA-Z0-9_]+\}/gm))&&void 0!==e?e:[];Object.assign(w,{type:"html",html:{htmlContent:k,variableKeywords:S}})}}else if(c.hasClass("inputs")||c.hasClass("textareas"))Object.assign(w,{type:"input",input:{input:!!jQuery(n).find("input").length,textarea:!!jQuery(n).find("textarea").length}});else if(c.hasClass("tests")){var M=jQuery(n).find(".svg-test");if(c.hasClass("tests-truefalse"))S=null!==(i=(null!=(k=M.find(".svg-editor-content").html())?k:"").match(/\{[a-zA-Z0-9_]+\}/gm))&&void 0!==i?i:[],Object.assign(w,{type:"test",test:{type:"truefalse",truefalse:{iscorrect:null===(r=t.test2.truefalse)||void 0===r?void 0:r.includes(d)}},html:{htmlContent:k,variableKeywords:S}});else if(c.hasClass("tests-singlechoice"))S=null!==(o=(null!=(k=M.find(".svg-editor-content").html())?k:"").match(/\{[a-zA-Z0-9_]+\}/gm))&&void 0!==o?o:[],Object.assign(w,{type:"test",test:{type:"singlechoice",singlechoice:{iscorrect:null===(u=t.test2.singlechoice)||void 0===u?void 0:u.includes(d)}},html:{htmlContent:k,variableKeywords:S}});else if(c.hasClass("tests-multichoice"))S=null!==(s=(null!=(k=M.find(".svg-editor-content").html())?k:"").match(/\{[a-zA-Z0-9_]+\}/gm))&&void 0!==s?s:[],Object.assign(w,{type:"test",test:{type:"multichoice",multichoice:{iscorrect:null===(l=t.test2.multichoice)||void 0===l?void 0:l.includes(d)}},html:{htmlContent:k,variableKeywords:S}});else if(c.hasClass("tests-fill")){S=null!==(f=(null!=(k=M.find(".svg-editor-content").html())?k:"").match(/\{[a-zA-Z0-9_]+\}/gm))&&void 0!==f?f:[];var E=null!==(h=(null!=k?k:"").match(/\[\[[a-zA-Z0-9]+\]\]/gm))&&void 0!==h?h:[];E=E.filter((function(t,e,n){return n.indexOf(t)==e})),Object.assign(w,{type:"test",test:{type:"fill",fill:E.map((function(e){var n,i,r;return{key:e,value:null===(r=null===(i=null===(n=t.test2.fill)||void 0===n?void 0:n.find((function(t){return t.id==d})))||void 0===i?void 0:i.vals)||void 0===r?void 0:r.map((function(t){return t.text})).filter((function(t){return!["",null,void 0,NaN].includes(t)}))}}))},html:{htmlContent:k,variableKeywords:S,fillKeywords:E}})}else if(c.hasClass("tests-matching")){if(M.hasClass("svg-test-empty"))Object.assign(w,{type:"test",test:{type:"matching-empty",matching:{key:M.attr("data-name")||null}}});else if(M.hasClass("svg-test-content")){var k;S=null!==(v=(null!=(k=M.find(".svg-editor-content").html())?k:"").match(/\{[a-zA-Z0-9_]+\}/gm))&&void 0!==v?v:[],Object.assign(w,{type:"test",test:{type:"matching-content",matching:{key:M.attr("data-name")||null}},html:{htmlContent:k,variableKeywords:S}})}}else if(c.hasClass("tests-speech"))Object.assign(w,{type:"speech",speech:{value:null===(y=null===(g=null===(p=t.test2.speech)||void 0===p?void 0:p.find((function(t){return t.id==d})))||void 0===g?void 0:g.vals)||void 0===y?void 0:y.map((function(t){return t.text})).filter((function(t){return!["",null,void 0,NaN].includes(t)}))}});else if(c.hasClass("tests-submit")){var T=jQuery(n).find(".svg-container img");Object.assign(w,{type:"test",test:{type:"submit"},image:a(T.attr("url"),T.attr("path"),T.attr("src"))})}}else if(c.hasClass("images"))if((T=jQuery(n).find(".svg-editor-content img")).length)Object.assign(w,{type:"image",image:a(T.attr("url"),T.attr("path"),T.attr("src"))});else{var N=jQuery(n).find("iframe");Object.assign(w,{type:"iframe",iframe:a(N.attr("url"),N.attr("path"),N.attr("src"))})}else if(c.hasClass("sounds"))(T=jQuery(n).find(".svg-editor-content img")).length&&Object.assign(w,{type:"image",image:a(T.attr("url"),T.attr("path"),T.attr("src"))});else if(c.hasClass("htmls"))(N=jQuery(n).find("iframe")).length&&Object.assign(w,{type:"iframe",iframe:a(N.attr("url"),N.attr("path"),N.attr("src"))});else if(c.hasClass("svgs")){var A=jQuery(n).find("svg");A.length&&Object.assign(w,{type:"svg",svg:Object.assign(a(A.attr("url"),A.attr("path"),A.attr("src")),{svgContent:null!==(b=null===(_=A.get(0))||void 0===_?void 0:_.outerHTML)&&void 0!==b?b:null})})}else if(c.hasClass("medias")){var O=jQuery(n).find(".media-item");if(O.length)switch(O.attr("type")){case"audio":Object.assign(w,{type:"audio",audio:a(O.attr("url"),O.attr("path"),O.attr("src"))});break;case"video":Object.assign(w,{type:"video",video:a(O.attr("url"),O.attr("path"),O.attr("src"))});break;case"file":Object.assign(w,{type:"file",file:a(O.attr("url"),O.attr("path"),O.attr("src"))});break;default:Object.assign(w,{type:"link",link:{url:null!==(m=O.attr("url"))&&void 0!==m?m:null}})}var R=jQuery(n).find("img");R.length&&(Object.assign(w,{image:a(R.attr("url"),R.attr("path"),R.attr("src"))}),w.type||Object.assign(w,{type:"image"}))}}return w}(),animate:function(){var e,n={},i=null===(e=t.animates)||void 0===e?void 0:e.find((function(t){return t.elementId==d}));return i&&Object.assign(n,{value:i.value}),n}(),interactive:function(){var e={},n=t.actions.show.filter((function(t){return t.elementId==d&&t.active}));n.length&&(e.show={},n.forEach((function(t){var n,i,r,o,u,c,s,l,d,f,h,v,p,g,y,_,b,m,w,x,S,M,E,k=t.source;switch(null==k?void 0:k.type){case"work":e.show.action={},Object.assign(e.show.action,{value:null!==(n=k.value)&&void 0!==n?n:null,iteration:null!==(i=k.iteration)&&void 0!==i?i:null,finish:null!==(r=k.end)&&void 0!==r?r:null,time:null!==(o=k.time)&&void 0!==o?o:null,points:null!==(u=k.points)&&void 0!==u?u:null});break;case"audio":e.show.audio={},Object.assign(e.show.audio,{source:a(null,null,k.url),iteration:null!==(c=k.iteration)&&void 0!==c?c:null,finish:null!==(s=k.end)&&void 0!==s?s:null,time:null!==(l=k.time)&&void 0!==l?l:null,async:-1==k.iteration?"change-slide":"change-node"});break;case"node":case"node2":k.options.includes("show")&&(e.show.triggershow={},Object.assign(e.show.triggershow,{id:null!==(f=parseInt(null!==(d=k.id)&&void 0!==d?d:"0"))&&void 0!==f?f:null,ids:null===(h=k.ids)||void 0===h?void 0:h.map((function(t){return parseInt(t)})),async:null!==(v=k.async)&&void 0!==v?v:null,time:null!==(p=k.time)&&void 0!==p?p:null})),k.options.includes("run")&&(e.show.triggerrun={},Object.assign(e.show.triggerrun,{id:null!==(y=parseInt(null!==(g=k.id)&&void 0!==g?g:"0"))&&void 0!==y?y:null,ids:null===(_=k.ids)||void 0===_?void 0:_.map((function(t){return parseInt(t)})),async:null!==(b=k.async)&&void 0!==b?b:null,time:null!==(m=k.time)&&void 0!==m?m:null})),k.options.includes("hide")&&(e.show.triggerhide={},Object.assign(e.show.triggerhide,{id:null!==(x=parseInt(null!==(w=k.id)&&void 0!==w?w:"0"))&&void 0!==x?x:null,ids:null===(S=k.ids)||void 0===S?void 0:S.map((function(t){return parseInt(t)})),async:null!==(M=k.async)&&void 0!==M?M:null,time:null!==(E=k.time)&&void 0!==E?E:null}))}})));var i=t.actions.click.filter((function(t){return t.elementId==d&&t.active}));return i&&(e.click={},i.forEach((function(t){var n,i,r,o,u,c,s,l,d,f,h,v,p,g,y,_,b,m,w,x,S,M,E,k,T=t.source;switch(null==T?void 0:T.type){case"work":e.click.action={},Object.assign(e.click.action,{value:null!==(n=T.value)&&void 0!==n?n:null,iteration:null!==(i=T.iteration)&&void 0!==i?i:null,finish:null!==(r=T.end)&&void 0!==r?r:null,time:null!==(o=T.time)&&void 0!==o?o:null,points:null!==(u=T.points)&&void 0!==u?u:null});break;case"audio":e.click.audio={},Object.assign(e.click.audio,{source:a(null,null,T.url),iteration:null!==(c=T.iteration)&&void 0!==c?c:null,finish:null!==(s=T.end)&&void 0!==s?s:null,time:null!==(l=T.time)&&void 0!==l?l:null,async:-1==T.iteration?"change-slide":"change-node"});break;case"node":case"node2":T.options.includes("show")&&(e.click.triggershow={},Object.assign(e.click.triggershow,{id:null!==(f=parseInt(null!==(d=T.id)&&void 0!==d?d:"0"))&&void 0!==f?f:null,ids:null===(h=T.ids)||void 0===h?void 0:h.map((function(t){return parseInt(t)})),async:null!==(v=T.async)&&void 0!==v?v:null,time:null!==(p=T.time)&&void 0!==p?p:null})),T.options.includes("run")&&(e.click.triggerrun={},Object.assign(e.click.triggerrun,{id:null!==(y=parseInt(null!==(g=T.id)&&void 0!==g?g:"0"))&&void 0!==y?y:null,ids:null===(_=T.ids)||void 0===_?void 0:_.map((function(t){return parseInt(t)})),async:null!==(b=T.async)&&void 0!==b?b:null,time:null!==(m=T.time)&&void 0!==m?m:null})),T.options.includes("hide")&&(e.click.triggerhide={},Object.assign(e.click.triggerhide,{id:null!==(x=parseInt(null!==(w=T.id)&&void 0!==w?w:"0"))&&void 0!==x?x:null,ids:null===(S=T.ids)||void 0===S?void 0:S.map((function(t){return parseInt(t)})),async:null!==(M=T.async)&&void 0!==M?M:null,time:null!==(E=T.time)&&void 0!==E?E:null}));break;case"slide":e.click.slide={},Object.assign(e.click.slide,{id:parseInt(null!==(k=T.id)&&void 0!==k?k:"0")||T.num||null,code:T.id})}}))),e}(),variable:function(){var e,i,r,o,a,u,c,s={};n.getAttribute("data-variable")&&(s.input={},Object.assign(s.input,{variable:null!==(e=n.getAttribute("data-variable"))&&void 0!==e?e:null}));var l=null===(r=null===(i=t.nodes)||void 0===i?void 0:i.find((function(t){return t.id==d})))||void 0===r?void 0:r.variable;return l&&(s.click={},Object.assign(s.click,{variable:null!==(o=l.variable)&&void 0!==o?o:null,operator:null!==(a=l.operator)&&void 0!==a?a:null,valuetype:null!==(u=l.valuetype)&&void 0!==u?u:null,value:null!==(c=l.value)&&void 0!==c?c:null})),s}()};null===(u=h.svg)||void 0===u||u.nodes.push(f)})),u.push(h)})),{screen:{width:t.screen.w,height:t.screen.h},data:{slides:u},variable:t.variable}}},2977:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.lib_color_extract2HexAlpha=void 0;var i=n(5877),r=/^#[a-fA-F0-9]+$/i,o=/^rgba\((\d+),(\d+),(\d+),(\d+)\)$/i,a=/^rgb\((\d+),(\d+),(\d+)\)$/i;e.lib_color_extract2HexAlpha=function(t){var e=null,n=null;if(t)if("transparent"==t)e="#000000",n=0;else if(t.match(r))e=t;else{var u=(t=t.replace(/\s+/g,"")).match(o);if(u)e="#"+(256|u[1]).toString(16).slice(1)+(256|u[2]).toString(16).slice(1)+(256|u[3]).toString(16).slice(1),n=(0,i.icdt_RoundNumber)(parseFloat(u[4]),100);else{var c=t.match(a);c&&(e="#"+(256|c[1]).toString(16).slice(1)+(256|c[2]).toString(16).slice(1)+(256|c[3]).toString(16).slice(1))}}return{hex:e,alpha:n}}},1380:(t,e)=>{"use strict";function n(t,e,n,i){return Math.sqrt(Math.pow(n-t,2)+Math.pow(i-e,2))}function i(t,e,i,r,o){return n(t,e,i,r)<o?1:0}function r(t,e,n,r,o,a,u){var c=[];return c.push(i(t,e,n,r,u)),c.push(i(t,e,o,a,u)),c.push(function(t,e,n,i,r,o,a){var u=[r-n,o-i],c=[t-n,e-i],s=[-u[1],u[0]],l=Math.sqrt(Math.pow(s[0],2)+Math.pow(s[1],2)),d=[s[0]/l,s[1]/l],f=Math.sqrt(Math.pow(u[0],2)+Math.pow(u[1],2)),h=[u[0]/f,u[1]/f],v=c[0]*h[0]+c[1]*h[1];if(v<=0||v>=f)return 0;var p=c[0]*d[0]+c[1]*d[1];return p>=a||p<=-a?0:1}(t,e,n,r,o,a,u)),c}function o(t,e,n,i,r){var o=[n-t,i-e],a=[-o[1],o[0]],u=Math.sqrt(Math.pow(a[0],2)+Math.pow(a[1],2)),c=[a[0]/u,a[1]/u];return[[t+r*c[0],e+r*c[1]],[t-r*c[0],e-r*c[1]],[n-r*c[0],i-r*c[1]],[n+r*c[0],i+r*c[1]]]}function a(t,e,n,i,r,o,a){var u,c=[r-t,o-e],s=[n-t,i-e],l=Math.sqrt(Math.pow(s[0],2)+Math.pow(s[1],2)),d=[s[0]/l,s[1]/l],f=c[0]*d[0]+c[1]*d[1],h=[t+f*d[0],e+f*d[1]],v=Math.sqrt(Math.pow(r-h[0],2)+Math.pow(o-h[1],2));u=0===v?a:Math.sqrt(Math.pow(a,2)-Math.pow(v,2));var p=[t+f*d[0]+u*d[0],e+f*d[1]+u*d[1]];return p[0]===t&&p[1]===e?null:p}function u(t,e,n,i,r,o,a){var u=[r-t,o-e],c=[n-t,i-e],s=[-c[1],c[0]],l=Math.sqrt(Math.pow(s[0],2)+Math.pow(s[1],2)),h=[s[0]/l,s[1]/l],v=u[0]*h[0]+u[1]*h[1],p=f([t,e],[n,i],[r,o]);if(d([p[0]-r,p[1]-o])>=a)return null;var g=Math.sqrt(Math.pow(a,2)-Math.pow(v,2)),y=[r-v*h[0],o-v*h[1]],_=Math.sqrt(Math.pow(c[0],2)+Math.pow(c[1],2)),b=[c[0]/_,c[1]/_],m=[[y[0]-b[0]*g,y[1]-b[1]*g],[y[0]+b[0]*g,y[1]+b[1]*g]];return m[0][0]===t&&m[0][1]===e?null:m}function c(t,e,n,i,r,o,a,u){var c,s,l,d,f,h;return-(l=a-r)*(s=i-e)+(c=n-t)*(d=u-o)==0?null:(h=(l*(e-o)-d*(t-r))/(-l*s+c*d),(f=(-s*(t-r)+c*(e-o))/(-l*s+c*d))>=0&&f<=1&&h>=0&&h<=1?[t+h*c,e+h*s]:null)}function s(t,e,i,r,s,l,d,f,h,v){var p=o(l,d,f,h,v),g=[];if(i[0]&&!i[1])g.push(a(t,e,r,s,l,d,v)),g.push(c(t,e,r,s,p[0][0],p[0][1],p[3][0],p[3][1])),g.push(c(t,e,r,s,p[1][0],p[1][1],p[2][0],p[2][1])),(y=u(t,e,r,s,f,h,v))&&g.push(y[0],y[1]);else if(!i[0]&&i[1])g.push(a(t,e,r,s,f,h,v)),g.push(c(t,e,r,s,p[0][0],p[0][1],p[3][0],p[3][1])),g.push(c(t,e,r,s,p[1][0],p[1][1],p[2][0],p[2][1])),(y=u(t,e,r,s,l,d,v))&&g.push(y[0],y[1]);else if(i[0]&&i[1])g.push(a(t,e,r,s,l,d,v)),g.push(c(t,e,r,s,p[0][0],p[0][1],p[3][0],p[3][1])),g.push(c(t,e,r,s,p[1][0],p[1][1],p[2][0],p[2][1])),g.push(a(t,e,r,s,f,h,v));else{var y=u(t,e,r,s,f,h,v),_=u(t,e,r,s,l,d,v);y&&g.push(y[0],y[1]),_&&g.push(_[0],_[1]),g.push(c(t,e,r,s,p[0][0],p[0][1],p[3][0],p[3][1])),g.push(c(t,e,r,s,p[1][0],p[1][1],p[2][0],p[2][1]))}for(var b=[t,e],m=0;m<g.length;m++)g[m]&&n(g[m][0],g[m][1],r,s)<n(b[0],b[1],r,s)&&(b=g[m]);return b[0]===t&&b[1]===e?null:b}function l(t,e,i,r,a,s,l,d,f){var h=o(a,s,l,d,f),v=[],p=u(t,e,i,r,a,s,f);p&&v.push(p[0],p[1]),(p=u(t,e,i,r,l,d,f))&&v.push(p[0],p[1]),v.push(c(t,e,i,r,h[0][0],h[0][1],h[3][0],h[3][1])),v.push(c(t,e,i,r,h[1][0],h[1][1],h[2][0],h[2][1]));for(var g=[i,r],y=[t,e],_=0;_<v.length;_++)v[_]&&n(v[_][0],v[_][1],t,e)<n(g[0],g[1],t,e)&&(g=v[_]);for(var b=0;b<v.length;b++)v[b]&&n(v[b][0],v[b][1],i,r)<n(y[0],y[1],i,r)&&(y=v[b]);return g[0]===i&&g[1]===r||y[0]===t&&y[1]===e?null:[g,y]}Object.defineProperty(e,"__esModule",{value:!0}),e.lib_erase=void 0,e.lib_erase=function(t,e,n){n=n||20;var o=[],c=function(t){var r=e[0][0],c=e[0][1],s=0,l=0;if(1!==t.length||i(t[0][0],t[0][1],r,c,n)){for(var d;s<t.length-1;){var f=t[s],h=t[s+1],v=i(f[0],f[1],r,c,n),p=i(h[0],h[1],r,c,n);if(v&&p)l=++s;else if(v&&!p)(g=a(f[0],f[1],h[0],h[1],r,c,n))?(t[s]=g,l=s):s++;else if(!v&&p){var g;(g=a(h[0],h[1],f[0],f[1],r,c,n))&&((d=t.slice(l,s+1)).push(g),o.push(d)),l=++s}else{var y=u(f[0],f[1],h[0],h[1],r,c,n);y?((d=t.slice(l,s+1))[d.length-1][0]===y[0][0]&&d[d.length-1][1]===y[0][1]||d.push(y[0]),d.length>1&&o.push(d),t[s]=y[1],t[s+1]&&t[s+1][0]==y[1][0]&&t[s+1][1]==y[1][1]&&s++,l=s):s++}}l!==s&&(d=t.slice(l,t.length))&&o.push(d)}else o.push(t)},d=function(t,i){var a,u=e[i],c=e[i+1],d=0,f=0;if(1!==t.length||-1!==(p=r(t[0][0],t[0][1],u[0],u[1],c[0],c[1],n)).indexOf(1)){for(;d<t.length-1;){var h=t[d],v=t[d+1],p=r(h[0],h[1],u[0],u[1],c[0],c[1],n),g=r(v[0],v[1],u[0],u[1],c[0],c[1],n);if(-1!==p.indexOf(1)&&-1!==g.indexOf(1))f=++d;else if(-1!==p.indexOf(1)&&-1===g.indexOf(1))(y=s(h[0],h[1],p,v[0],v[1],u[0],u[1],c[0],c[1],n))?(t[d]=y,f=d):d++;else if(-1===p.indexOf(1)&&-1!==g.indexOf(1)){var y;(y=s(v[0],v[1],g,h[0],h[1],u[0],u[1],c[0],c[1],n))?((a=t.slice(f,d+1)).push(y),o.push(a),f=++d):d++}else{var _=l(h[0],h[1],v[0],v[1],u[0],u[1],c[0],c[1],n);_?((a=t.slice(f,d+1))[a.length-1][0]===_[0][0]&&a[a.length-1][1]===_[0][1]||a.push(_[0]),a.length>1&&o.push(a),t[d]=_[1],t[d+1]&&t[d+1][0]==_[1][0]&&t[d+1][1]==_[1][1]&&d++,f=d):d++}}f!==d&&(a=t.slice(f,t.length))&&o.push(a)}else o.push(t)};if(1===(e=function(t){var e=[];if(1===t.length)e=t;else{for(var n=0;n<t.length-1;)t[n][0]===t[n+1][0]&&t[n][1]===t[n+1][1]||e.push(t[n]),n++;0!==t.length&&0===e.length&&e.push(t[0]),t[t.length-1][0]===t[e.length-1][0]&&t[t.length-1][1]===t[e.length-1][1]||e.push(t[n])}return e}(e)).length){for(var f=0;f<t.length;f++)c(t[f]);t=o}else for(var h=0;h<e.length-1;h++){for(f=0;f<t.length;f++)d(t[f],h);t=o,o=[]}for(var v=0;v<t.length;v++)for(var p=0;p<t[v].length;p++)t[v][p][0]=Math.round(t[v][p][0]),t[v][p][1]=Math.round(t[v][p][1]);return t};var d=function(t){return Math.sqrt(t[0]*t[0]+t[1]*t[1])},f=function(t,e,n){var i=[e[0]-t[0],e[1]-t[1]],r=d(i);if(r<1e-6)return t;var o=[n[0]-t[0],n[1]-t[1]],a=(i[0]*o[0]+i[1]*o[1])/r;return a<0?t:a>r?e:[t[0]+i[0]*a/r,t[1]+i[1]*a/r]}},4225:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.lib_hex2rgba=void 0;var i=n(8001),r=/^#?[a-fA-F0-9]+$/;e.lib_hex2rgba=function(t,e){if("none"==(t=null!=t?t:""))return"none";if("transparent"==t)return"rgba(0,0,0,0)";if(t.includes("rgba("))return t;if(t.includes("rgb(")&&(t=(0,i.lib_rgba2hex)(t)),!(t=t.replace(/[^0-9a-fA-F]/g,"")))return"";if(!r.test(t))return console.error("hex2rgba -> ".concat(t,": first argument has invalid hexadecimal characters")),"";if("#"===t[0]&&(t=t.slice(1)),3===t.length){var n=t.split("");n.splice(2,0,t[2]),n.splice(1,0,t[1]),n.splice(0,0,t[0]),t=n.join("")}if(6!==t.length)return console.error("hex2rgba: first argument has invalid hexadecimal length"),"";var o=[parseInt(t.slice(0,2),16),parseInt(t.slice(2,4),16),parseInt(t.slice(4,6),16)];return(e="number"==typeof e?e:parseFloat(e))>=0&&e<=1?o.push(e):o.push(1),"rgba("+o.join(",")+")"}},7645:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(r,o){function a(t){try{c(i.next(t))}catch(t){o(t)}}function u(t){try{c(i.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,u)}c((i=i.apply(t,e||[])).next())}))},r=this&&this.__generator||function(t,e){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,u[0]&&(a=0)),a;)try{if(n=1,i&&(r=2&u[0]?i.return:u[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,u[1])).done)return r;switch(i=0,r&&(u=[2&u[0],r.value]),u[0]){case 0:case 1:r=u;break;case 4:return a.label++,{value:u[1],done:!1};case 5:a.label++,i=u[1],u=[0];continue;case 7:u=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==u[0]&&2!==u[0])){a=0;continue}if(3===u[0]&&(!r||u[1]>r[0]&&u[1]<r[3])){a.label=u[1];break}if(6===u[0]&&a.label<r[1]){a.label=r[1],r=u;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(u);break}r[2]&&a.ops.pop(),a.trys.pop();continue}u=e.call(t,a)}catch(t){u=[6,t],i=0}finally{n=r=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.LocalStorage_SetClipboard=e.LocalStorage_GetClipboard=e.LocalStorage_SetConfig=e.LocalStorage_GetConfig=e.LocalStorage_SetData=e.LocalStorage_GetData=void 0;var o=n(7914);o.config({driver:[o.INDEXEDDB,o.LOCALSTORAGE,o.WEBSQL],name:"_localDataDB",version:1});var a=function(){return i(void 0,void 0,void 0,(function(){return r(this,(function(t){return[2,o]}))}))},u=function(t){return i(void 0,void 0,void 0,(function(){return r(this,(function(e){return[2,o.getItem(t)]}))}))},c=function(t,e){return i(void 0,void 0,void 0,(function(){return r(this,(function(n){return[2,o.setItem(t,e)]}))}))};e.LocalStorage_GetData=function(t){return i(void 0,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return[4,a()];case 1:return n.sent(),[4,u("icdt-data")];case 2:return e=n.sent()||[],"function"==typeof t.callback&&t.callback(e),[2]}}))}))},e.LocalStorage_SetData=function(t){return i(void 0,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return[4,a()];case 1:n.sent(),t.params=t.params||{},n.label=2;case 2:return n.trys.push([2,4,,5]),[4,c("icdt-data",t.params)];case 3:return n.sent(),"function"==typeof t.callback&&t.callback(t.params),[3,5];case 4:return e=n.sent(),"function"==typeof t.callback&&t.callback(null),console.error(e),[3,5];case 5:return[2]}}))}))},e.LocalStorage_GetConfig=function(t){return i(void 0,void 0,void 0,(function(){var e,n;return r(this,(function(i){switch(i.label){case 0:return[4,a()];case 1:i.sent(),i.label=2;case 2:return i.trys.push([2,4,,5]),[4,u("icdt-config")];case 3:return e=i.sent()||{},"function"==typeof t.callback&&t.callback(e),[3,5];case 4:return n=i.sent(),"function"==typeof t.callback&&t.callback(null),console.error(n),[3,5];case 5:return[2]}}))}))},e.LocalStorage_SetConfig=function(t){return i(void 0,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return[4,a()];case 1:n.sent(),t.params=t.params||{},n.label=2;case 2:return n.trys.push([2,4,,5]),[4,c("icdt-config",t.params)];case 3:return n.sent(),"function"==typeof t.callback&&t.callback(t.params),[3,5];case 4:return e=n.sent(),"function"==typeof t.callback&&t.callback(null),console.error(e),[3,5];case 5:return[2]}}))}))},e.LocalStorage_GetClipboard=function(t){return i(void 0,void 0,void 0,(function(){var e,n;return r(this,(function(i){switch(i.label){case 0:return[4,a()];case 1:i.sent(),i.label=2;case 2:return i.trys.push([2,4,,5]),[4,u("icdt-clipboard")];case 3:return e=i.sent()||{},"function"==typeof t.callback&&t.callback(e),[3,5];case 4:return n=i.sent(),"function"==typeof t.callback&&t.callback(null),console.error(n),[3,5];case 5:return[2]}}))}))},e.LocalStorage_SetClipboard=function(t){return i(void 0,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return[4,a()];case 1:n.sent(),t.params=t.params||{},n.label=2;case 2:return n.trys.push([2,4,,5]),[4,c("icdt-clipboard",t.params)];case 3:return n.sent(),"function"==typeof t.callback&&t.callback(t.params),[3,5];case 4:return e=n.sent(),"function"==typeof t.callback&&t.callback(null),console.error(e),[3,5];case 5:return[2]}}))}))}},8001:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.lib_rgba2hex=void 0,e.lib_rgba2hex=function(t,e){if(!t)return"";var n=t.replace(/\s/g,"").match(/^rgba?\((\d+),(\d+),(\d+),?([^,\s)]+)?/i),i=(n&&n[4]||"").trim(),r=n?(256|n[1]).toString(16).slice(1)+(256|n[2]).toString(16).slice(1)+(256|n[3]).toString(16).slice(1):t;return"0"==i?"transparent":(e&&(r+=(255*(""!==i?i:"01")|256).toString(16).slice(1)),console.log("lib_rgba2hex: ".concat(t," -> ").concat(r)),"#".concat(r))}},3331:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.V_ID=void 0,e.V_ID={RESIZE_GROUP:"icdt-resize-g",SELECT_GROUP:"icdt-select-g",SCAN_GROUP:"icdt-scan-g",CREATE_GROUP:"icdt-create-g",INTERACTIVE_GROUP:"icdt-interactive-g",INDEX_GROUP:"icdt-index-g",BACKGROUND_GROUP:"icdt-background-g",TEST_GROUP:"icdt-test-g"}},1167:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.V_Keyboard=void 0,e.V_Keyboard={Digit1:49,Digit2:50,Digit3:51,Digit4:52,Digit5:53,Digit6:54,Digit7:55,Digit8:56,Digit9:57,Digit0:48,KeyA:65,KeyB:66,KeyC:67,KeyD:68,KeyE:69,KeyF:70,KeyG:71,KeyH:72,KeyI:73,KeyJ:74,KeyK:75,KeyL:76,KeyM:77,KeyN:78,KeyO:79,KeyP:80,KeyQ:81,KeyR:82,KeyS:83,KeyT:84,KeyU:85,KeyV:86,KeyW:87,KeyX:88,KeyY:89,KeyZ:90,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,Insert:45,Delete:46,Home:36,End:35,PageUp:33,PageDown:34,ArrowUp:38,ArrowDown:40,ArrowLeft:37,ArrowRight:39,Escape:27,Tab:9,Backspace:8,Enter:13,Space:32,BracketLeft:219,BracketRight:221}},8947:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.V_PenType=void 0,e.V_PenType={DRAW:1,HIGHTLIGH:2,INTERACTIVE:3}},797:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.V_PointerType=void 0,e.V_PointerType={POINTER:0,HAND:1,PEN:2,SHAPE:3,FOREIGNOBJECT:6,IMAGE:7,TEXT:4,ERASER:5,INDEX:8}},5611:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.V_PolygonRatio=void 0;var i=n(5126);e.V_PolygonRatio=[{name:"tam giác vuông",type:i.V_PolygonType.TRIANGLE_ISOSCELES,ratios:[[0,0],[1,1],[0,1]]},{name:"tam giác cân",type:i.V_PolygonType.TRIANGLE_EQUILATERAL,ratios:[[.5,0],[0,1],[1,1]]},{name:"hình chữ nhật",type:i.V_PolygonType.RECTANGLE,ratios:[[0,0],[1,0],[1,1],[0,1]]},{name:"hình ngũ giác đều",type:i.V_PolygonType.PENTAGON,ratios:[[.5,0],[1,.4],[.8,1],[.2,1],[0,.4]]},{name:"hình lục giác đều",type:i.V_PolygonType.HEXAGON,ratios:[[.5,0],[1,.25],[1,.75],[.5,1],[0,.75],[0,.25]]},{name:"khung đánh dấu vị trí",type:i.V_PolygonType.BOOKMARK,ratios:[[0,0],[1,0],[1,.8],[.5,1],[0,.8]]},{name:"khung đánh trò chuyện",type:i.V_PolygonType.COMMENT,ratios:[[0,0],[1,0],[1,.9],[.3,.9],[.2,1],[.1,.9],[0,.9]]},{name:"hình chữ thập",type:i.V_PolygonType.CROSS,ratios:[[0,.3],[.3,.3],[.3,0],[.7,0],[.7,.3],[1,.3],[1,.7],[.7,.7],[.7,1],[.3,1],[.3,.7],[0,.7]]},{name:"hình mũi tên 1 chiều",type:i.V_PolygonType.ARROW_ONEWAY,ratios:[[0,.2],[.8,.2],[.8,0],[1,.5],[.8,1],[.8,.8],[0,.8]]},{name:"hình mũi tên 2 chiều",type:i.V_PolygonType.ARROW_TWOWAY,ratios:[[.2,0],[.2,.2],[.8,.2],[.8,0],[1,.5],[.8,1],[.8,.8],[.2,.8],[.2,1],[0,.5]]},{name:"hình ngôi sao 4 cánh",type:i.V_PolygonType.STAR_FOUR,ratios:[[.5,0],[.65,.35],[1,.5],[.65,.65],[.5,1],[.35,.65],[0,.5],[.35,.35]]},{name:"hình ngôi sao 5 cánh",type:i.V_PolygonType.STAR_FIVE,ratios:[[.5,0],[.625,.4],[1,.4],[.675,.625],[.8,1],[.5,.775],[.2,1],[.325,.625],[0,.4],[.375,.4]]},{name:"hình ngôi sao 6 cánh",type:i.V_PolygonType.STAR_SIX,ratios:[[.5,0],[.667,.25],[1,.25],[.5+.334,.5],[1,.75],[.667,.75],[.5,1],[.334,.75],[0,.75],[.167,.5],[0,.25],[.334,.25]]}]},5126:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.V_PolygonType=void 0,e.V_PolygonType={TRIANGLE_ISOSCELES:3,TRIANGLE_EQUILATERAL:31,RECTANGLE:4,PENTAGON:5,HEXAGON:6,BOOKMARK:101,COMMENT:102,CROSS:104,ARROW_ONEWAY:201,ARROW_TWOWAY:202,STAR_FOUR:304,STAR_FIVE:305,STAR_SIX:306}},2121:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.V_ShapeType=void 0,e.V_ShapeType={GROUP:0,CIRCLE:1,ELLIPSE:2,LINE:5,RECT:3,POLYGON:4,FOREIGNOBJECT:6,IMAGE:9,TEXT:7,PATH:8}},7144:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.v_mediatype=void 0,e.v_mediatype={TEXT:900,IMAGE:901,AUDIO:902,VIDEO:903,LINK:904,ZIP:905,HTML:906,TRACK:907,OFFICE:908,PDF:909,PHET:910,IMAGE_ANIMATION:911,SCORM:912}},8271:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.v_osstype=void 0,e.v_osstype={ONEDRIVE:1e3,GOOGLEDRIVE:1001,YOUTUBE:1002,SCORM:1003,PHET:1005,OTHER:1004}},9427:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt=void 0;var i=n(6428),r=n(463),o=n(8378),a=n(26),u=n(6408),c=n(4634),s=n(194),l=n(2634),d=n(2140),f=function(){function t(){var t=this;this._container="",this._svg="",this._screen=c.icdt_Screen_MoKam.prototype,this._data=a.icdt_DataSource.prototype,this._dataSelect=r.icdt_DataSelect.prototype,this._slide=o.icdt_DataSlide.prototype,this._history=u.icdt_History.prototype,this._attribute=s.icdt_SvgNodeAttribute_TrumCuoiXaHoi.prototype,this._pointer=d.icdt_PointerType_ChiChiChoCho.prototype,this._variable=l.icdt_Variable_TrumCuoi.prototype,this._data=new a.icdt_DataSource,this._dataSelect=new r.icdt_DataSelect,this._slide=new o.icdt_DataSlide,this._history=new u.icdt_History,this._attribute=new s.icdt_SvgNodeAttribute_TrumCuoiXaHoi,this._pointer=new d.icdt_PointerType_ChiChiChoCho,this._variable=new l.icdt_Variable_TrumCuoi,this._pointer.onchangePointerType=function(){t._dataSelect.ids.length&&(t._dataSelect.ids=[])},this._pointer.onchangePointerTypeTemp=function(){t._dataSelect.ids.length&&(t._dataSelect.ids=[])},this._data.onChangeSlide=function(){t._dataSelect.ids.length&&(t._dataSelect.ids=[])}}return Object.defineProperty(t.prototype,"config",{get:function(){return this._config},set:function(t){this._config=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dataSource",{get:function(){return{modules:"icdtV2",screen:this._screen.get,data:this._data.get,resources:this._data.getResource,variable:this._variable.get,info:{}}},set:function(t){this._screen.set=t.screen||{width:1080,height:1080},this._data.set=t.data||{},this._variable.set=t.variable||{}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"container",{get:function(){return this._container},set:function(t){this._container=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"svg",{get:function(){return this._svg},set:function(t){this._svg=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"target",{get:function(){return window.document.querySelector(this._svg)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"screen",{get:function(){return this._screen},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"data",{get:function(){return this._data},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dataSelect",{get:function(){return this._dataSelect},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slide",{get:function(){return this._slide},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"history",{get:function(){return this._history},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"attribute",{get:function(){return this._attribute},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"pointer",{get:function(){return this._pointer},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"variable",{get:function(){return this._variable},enumerable:!1,configurable:!0}),t.prototype.reloadView=function(){var t,e,n,i,r;this._screen.screen=(t=jQuery(this._container).offset(),e=jQuery(this._container).width(),n=jQuery(this._container).height(),console.log("reloadView",JSON.stringify({offset:t,width:e,height:n})),{offset:{x:null!==(i=null==t?void 0:t.left)&&void 0!==i?i:0,y:null!==(r=null==t?void 0:t.top)&&void 0!==r?r:0},width:null!=e?e:0,height:null!=n?n:0})},t.prototype.init=function(t){this._container=t.container,this._svg=t.target,this._screen=new c.icdt_Screen_MoKam,(0,i.icdt_Init)({container:t.container,target:t.target,iskeyboard:t.iskeyboard})},t}();e.icdt=new f},4123:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_EraserComponent=void 0;var i=n(670),r=n(5300);e.icdt_EraserComponent=function(t){(0,i.icdt_PointerEvents)(t,new r.icdt_Eraser)}},5300:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Eraser=void 0;var i=n(2121),r=n(1380),o=n(9427),a=n(184),u=n(2613),c=n(5932);e.icdt_Eraser=function(){var t=(0,u.icdt_SvgPath)(Math.ceil(1e9*Math.random())),e=(t.nodeId,t.element);t.attribute,t.size,(0,c.icdt_SyncSvgNodeAttribute)(e,{stroke:"#ddd",strokeWidth:10,strokeLinecap:"round",strokeLinejoin:"round"});var n="";return{start:function(t){n="M ".concat(t.x," ").concat(t.y," L ").concat(t.x," ").concat(t.y)},move:function(t,i){var r,o;r=t.x,o=t.y,n+=" ".concat(r," ").concat(o),e.setAttribute("d",n)},end:function(t,n){e.remove(),function(t){var e=9999,n=9999,u=-9999,c=-9999;t.forEach((function(t){e=Math.min(e,t[0]),n=Math.min(n,t[1]),u=Math.max(u,t[0]),c=Math.max(c,t[1])})),(0,a.icdt_Offset2Size)(e,n,u,c,{points:t}),o.icdt.data.getNodeInArea(0,0,1920,1920,i.V_ShapeType.PATH).forEach((function(e){var n=o.icdt.data.getNode(e),i=(0,r.lib_erase)(n.size.points,t,2);console.log(i)}))}(n)}}}},8669:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_ForeignObjectComponent=void 0;var i=n(670),r=n(2376);e.icdt_ForeignObjectComponent=function(t){(0,i.icdt_PointerEvents)(t,new r.icdt_SvgForeignObjectCreate)}},1381:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_HandComponent=void 0;var i=n(9427),r=n(670);e.icdt_HandComponent=function(t){(0,r.icdt_PointerEvents)(t,new o,1,{x:0,y:0})};var o=function(){var t=i.icdt.screen.dislocation,e=t.x,n=t.y,r=function(t,r,o,a){i.icdt.screen.move({x:e,y:n},{x:o-t,y:a-r})};return{start:function(t){},move:function(t,e){r(e[0][0],e[0][1],t.x,t.y)},end:function(t,e){r(e[0][0],e[0][1],t.x,t.y)}}}},1929:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_ImageComponent=void 0;var i=n(670),r=n(3124);e.icdt_ImageComponent=function(t){(0,i.icdt_PointerEvents)(t,new r.icdt_SvgImageCreate)}},2293:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SlideClearNodeIndex=e.icdt_IndexComponent=void 0;var i=n(3331),r=n(9427),o=n(4112),a=n(5932);e.icdt_IndexComponent=function(t){var e,n,a,c,s,l,d,f=(null===(e=t.mouseEvent)||void 0===e?void 0:e.target)||(null===(n=t.touchEvent)||void 0===n?void 0:n.target),h=(null==f?void 0:f.getAttribute("id"))||"",v=null==f?void 0:f.nodeName,p=jQuery(f).parents("g[id]").attr("id")||"";if(![i.V_ID.INDEX_GROUP].includes(p))if((null===(a=t.mouseEvent)||void 0===a?void 0:a.altKey)||(null===(c=t.touchEvent)||void 0===c?void 0:c.altKey)||!h||h.match(/[^0-9]/)||!r.icdt.dataSelect.nodeName.includes(v))r.icdt.dataSelect.ids.length&&(r.icdt.dataSelect.ids=[]),(0==(null===(s=t.mouseEvent)||void 0===s?void 0:s.button)||t.touchEvent)&&(0,o.icdt_Scan)(t,u);else{var g=parseFloat(h||"0");(null===(l=t.mouseEvent)||void 0===l?void 0:l.shiftKey)||(null===(d=t.touchEvent)||void 0===d?void 0:d.shiftKey)?r.icdt.dataSelect.ids=[g].concat(r.icdt.dataSelect.ids).filter((function(t,e,n){return n.indexOf(t)==e})):r.icdt.dataSelect.ids=[g];var y=r.icdt.dataSelect.nodes;u(y)}};var u=function(t){var e,n,o,u,c,s,l=1;if(t.length&&(l=Math.max.apply(null,null!==(o=null===(n=null===(e=r.icdt.data.slide)||void 0===e?void 0:e.svg)||void 0===n?void 0:n.nodes.map((function(t){var e;return null!==(e=t.idx)&&void 0!==e?e:0})))&&void 0!==o?o:[0])+1),1==t.length)t[0].idx||(t[0].idx=l,t[0].time=0);else if(t.length>=0){var d=t.map((function(t){var e;return null!==(e=t.idx)&&void 0!==e?e:0})).filter((function(t){return t>0})),f=d.length?Math.min.apply(null,d):l;t.forEach((function(t){var e;t.idx=f,t.time=null!==(e=t.time)&&void 0!==e?e:0}))}var h=(0,a.icdt_SyncSvgNode4Design)(i.V_ID.INDEX_GROUP,"g");(0,a.syncNodeIndex)(h,null!==(s=null===(c=null===(u=r.icdt.data.slide)||void 0===u?void 0:u.svg)||void 0===c?void 0:c.nodes)&&void 0!==s?s:[])};e.icdt_SlideClearNodeIndex=function(t){var e,n,o,u;(null===(e=null==t?void 0:t.svg)||void 0===e?void 0:e.nodes)&&t.svg.nodes.forEach((function(t){t.idx=0,t.time=null}));var c=(0,a.icdt_SyncSvgNode4Design)(i.V_ID.INDEX_GROUP,"g");(0,a.syncNodeIndex)(c,null!==(u=null===(o=null===(n=r.icdt.data.slide)||void 0===n?void 0:n.svg)||void 0===o?void 0:o.nodes)&&void 0!==u?u:[])}},4112:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Scan=void 0;var i=n(3331),r=n(9427),o=n(184),a=n(670),u=n(5932);e.icdt_Scan=function(t,e){var n=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.SCAN_GROUP,"g"),r=(0,o.icdt_Offset2Size)(0,0,1,1);(0,u.syncNodeScan)(n,r),c(t,r,n,e)};var c=function(t,e,n,i){var c={start:function(t){},move:function(t,i){var r,a,c,s;r=i[0][0],a=i[0][1],c=t.x,s=t.y,e=(0,o.icdt_Offset2Size)(r,a,c,s),(0,u.syncNodeScan)(n,e)},end:function(t,e){null==n||n.remove(),r.icdt.dataSelect.ids=r.icdt.data.getNodeInArea(Math.min(e[0][0],t.x),Math.min(e[0][1],t.y),Math.max(e[0][0],t.x),Math.max(e[0][1],t.y));var o=r.icdt.dataSelect.nodes;i(o)}};(0,a.icdt_PointerEvents)(t,c)}},8397:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_KeyboardComponent=e.icdt_Keyboard=void 0;var i=n(7645),r=n(1167),o=n(797),a=n(9427),u=n(6511),c=n(4255),s=n(1724),l=n(4355),d=n(5877),f=n(4654),h=function(){function t(){this._fnChanges=[],this.onchange={type:"keydown",key:r.V_Keyboard.Escape,fn:function(){a.icdt.dataSelect.ids.length&&(a.icdt.dataSelect.ids=[])}},this.onchange={type:"keydown",key:r.V_Keyboard.Delete,fn:function(){a.icdt.dataSelect.deleteNode()}},this.onchange={type:"keydown",key:r.V_Keyboard.Space,fn:function(){a.icdt.pointer.pointer_type_temp=o.V_PointerType.HAND}},this.onchange={type:"keyup",key:r.V_Keyboard.Space,fn:function(){a.icdt.pointer.pointer_type_temp=o.V_PointerType.POINTER}},this.onchange={type:"keydown",key:r.V_Keyboard.ArrowLeft,fn:function(){a.icdt.dataSelect.ids.length||a.icdt.data.backSlide()}},this.onchange={type:"keydown",key:r.V_Keyboard.ArrowRight,fn:function(){a.icdt.dataSelect.ids.length||a.icdt.data.nextSlide()}},this.onchange={type:"keydown",key:r.V_Keyboard.ArrowLeft,fn:function(){a.icdt.dataSelect.ids.length&&(a.icdt.dataSelect.nodes.forEach((function(t){(0,f.sizeX)(t,(0,d.icdt_RoundNumber)(t.size.x-(0,l.icdt_ScaleNumber)(1)))})),1==a.icdt.dataSelect.ids.length?(0,u.icdt_Resize)(a.icdt.dataSelect.nodes[0]):(0,c.icdt_Select)(a.icdt.dataSelect.nodes))}},this.onchange={type:"keydown",key:r.V_Keyboard.ArrowRight,fn:function(){a.icdt.dataSelect.ids.length&&(a.icdt.dataSelect.nodes.forEach((function(t){(0,f.sizeX)(t,(0,d.icdt_RoundNumber)(t.size.x+(0,l.icdt_ScaleNumber)(1)))})),1==a.icdt.dataSelect.ids.length?(0,u.icdt_Resize)(a.icdt.dataSelect.nodes[0]):(0,c.icdt_Select)(a.icdt.dataSelect.nodes))}},this.onchange={type:"keydown",key:r.V_Keyboard.ArrowUp,fn:function(){a.icdt.dataSelect.ids.length&&(a.icdt.dataSelect.nodes.forEach((function(t){(0,f.sizeY)(t,(0,d.icdt_RoundNumber)(t.size.y-(0,l.icdt_ScaleNumber)(1)))})),1==a.icdt.dataSelect.ids.length?(0,u.icdt_Resize)(a.icdt.dataSelect.nodes[0]):(0,c.icdt_Select)(a.icdt.dataSelect.nodes))}},this.onchange={type:"keydown",key:r.V_Keyboard.ArrowDown,fn:function(){a.icdt.dataSelect.ids.length&&(a.icdt.dataSelect.nodes.forEach((function(t){(0,f.sizeY)(t,(0,d.icdt_RoundNumber)(t.size.y+(0,l.icdt_ScaleNumber)(1)))})),1==a.icdt.dataSelect.ids.length?(0,u.icdt_Resize)(a.icdt.dataSelect.nodes[0]):(0,c.icdt_Select)(a.icdt.dataSelect.nodes))}},this.onchange={type:"keydown",key:r.V_Keyboard.Digit1,fn:function(t){t.shiftKey&&(a.icdt.reloadView(),a.icdt.screen.zoomTo="fit")}},this.onchange={type:"keydown",key:r.V_Keyboard.KeyA,fn:function(t){if(t.ctrlKey){a.icdt.dataSelect.ids=a.icdt.data.getNodeAll();var e=a.icdt.dataSelect.nodes;1==e.length?(0,u.icdt_Resize)(e[0]):e.length>1&&(0,c.icdt_Select)(e)}}},this.onchange={type:"keydown",key:r.V_Keyboard.KeyC,fn:function(t){if(t.ctrlKey){var e=a.icdt.dataSelect.nodes;e&&(0,i.LocalStorage_SetClipboard)({params:{type:"nodes",nodes:e}})}}},this.onchange={type:"keydown",key:r.V_Keyboard.KeyV,fn:function(t){t.ctrlKey&&(0,i.LocalStorage_GetClipboard)({callback:function(t){var e,n;"nodes"==(null==t?void 0:t.type)&&(null===(e=null==t?void 0:t.nodes)||void 0===e?void 0:e.length)&&(null===(n=null==t?void 0:t.nodes)||void 0===n||n.forEach((function(t){t.id=Math.ceil(1e9*Math.random()),a.icdt.data.node=t})),(0,s.icdt_RenderComponent)(a.icdt.data.slide))}})}},this.onchange={type:"keydown",key:r.V_Keyboard.KeyZ,fn:function(t){t.ctrlKey&&t.shiftKey?a.icdt.history.redo():t.ctrlKey&&a.icdt.history.undo()}},this.onchange={type:"keydown",key:r.V_Keyboard.BracketLeft,fn:function(t){t.ctrlKey&&t.shiftKey?a.icdt.data.sendToBack(a.icdt.dataSelect.ids):t.ctrlKey?a.icdt.data.sendToBackStep(a.icdt.dataSelect.ids,-2):a.icdt.data.sendToBackArea(a.icdt.dataSelect.ids)}},this.onchange={type:"keydown",key:r.V_Keyboard.BracketRight,fn:function(t){t.ctrlKey&&t.shiftKey?a.icdt.data.bringToFront(a.icdt.dataSelect.ids):t.ctrlKey?a.icdt.data.bringToFrontStep(a.icdt.dataSelect.ids,1):a.icdt.data.bringToFrontArea(a.icdt.dataSelect.ids)}}}return Object.defineProperty(t.prototype,"onchange",{set:function(t){var e=this._fnChanges.find((function(e){return e.eventType==t.type&&e.eventKey==t.key}));e?e.fns.push(t.fn):this._fnChanges.push({eventType:t.type,eventKey:t.key,fns:[t.fn]})},enumerable:!1,configurable:!0}),t.prototype.change=function(t,e,n){var i;null===(i=this._fnChanges.find((function(n){return n.eventType==t&&n.eventKey==e})))||void 0===i||i.fns.forEach((function(t){return t(n)}))},t}();e.icdt_Keyboard=new h,e.icdt_KeyboardComponent=function(t){e.icdt_Keyboard.change(t.type,t.keyCode||t.which||t.charCode||0,t)}},1933:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Draw=void 0;var i=n(7508),r=n(2613),o=n(2121),a=n(5932),u=n(9427),c=n(9922);e.icdt_Draw=function(){var t={stroke:u.icdt.attribute.stroke,strokeWidth:u.icdt.attribute.strokeWidth,strokeLinecap:"round",strokeLinejoin:"round"},e=(0,r.icdt_SvgPath)(Math.ceil(1e9*Math.random()),{attribute:t}),n=e.nodeId,s=e.element,l=e.attribute,d=e.size;(0,a.icdt_SyncSvgNodeAttribute)(s,l);var f="",h="";return{start:function(t){f="M ".concat(t.x," ").concat(t.y," L ").concat(t.x," ").concat(t.y)},move:function(t,e){var n,i;n=t.x,i=t.y,f+=" ".concat(n," ").concat(i),s.setAttribute("d",f)},end:function(t,e){var r;if(e.length>=3){var a=i.line().x((function(t){return t[0]})).y((function(t){return t[1]})).curve(i.curveBasis);h=null!==(r=a(e))&&void 0!==r?r:"",s.setAttribute("d",h)}else s.setAttribute("d",f);var v=(0,c.icdt_Adapter_PathD_2_PointMaps)(h||f),p=(0,c.icdt_Adapter_PointMaps_Extract_MinMaxXY)(v),g=p.minX,y=p.minY,_=p.maxX,b=p.maxY;d.x=g,d.y=y,d.width=_-g||1,d.height=b-y||1,d.ratioMaps=(0,c.icdt_Adapter_PointMaps_2_RatioMaps)(d,v),u.icdt.data.node=Object.assign({id:n,type:o.V_ShapeType.PATH,name:"Path"},{size:d,attribute:l})}}}},223:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Highlight=void 0;var i=n(2613),r=n(2121),o=n(5932),a=n(9427),u=n(9922);e.icdt_Highlight=function(){var t={stroke:a.icdt.attribute.stroke,strokeOpacity:.4,strokeWidth:a.icdt.attribute.strokeWidth,strokeLinecap:"round",strokeLinejoin:"round"},e=(0,i.icdt_SvgPath)(Math.ceil(1e9*Math.random()),{attribute:t}),n=e.nodeId,c=e.element,s=e.attribute,l=e.size;(0,o.icdt_SyncSvgNodeAttribute)(c,s);var d="";return{start:function(t){d="M ".concat(t.x," ").concat(t.y," L ").concat(t.x," ").concat(t.y)},move:function(t,e){var n,i;n=t.x,i=t.y,d+=" ".concat(n," ").concat(i),c.setAttribute("d",d)},end:function(t,e){var i=(0,u.icdt_Adapter_PathD_2_PointMaps)(d),o=(0,u.icdt_Adapter_PointMaps_Extract_MinMaxXY)(i),c=o.minX,f=o.minY,h=o.maxX,v=o.maxY;l.x=c,l.y=f,l.width=h-c||1,l.height=v-f||1,l.ratioMaps=(0,u.icdt_Adapter_PointMaps_2_RatioMaps)(l,i),a.icdt.data.node=Object.assign({id:n,type:r.V_ShapeType.PATH,name:"Path"},{size:l,attribute:s})}}}},2103:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Interactive=void 0;var i=n(184),r=n(2613),o=n(2121),a=n(5932),u=n(7508),c=n(4355),s=n(3331),l=n(9427),d=n(303);e.icdt_Interactive=function(t,e){var n,f,h,v,p={stroke:"#FF0000",strokeWidth:(0,c.icdt_ScaleNumber)(2),strokeLinecap:"round",strokeLinejoin:"round",strokeDasharray:(0,c.icdt_ScaleNumber)(8)},g=(0,r.icdt_SvgPath)(Math.ceil(1e9*Math.random()),{size:e}),y=g.element,_=g.attribute,b=g.size;window.document.getElementById(s.V_ID.INTERACTIVE_GROUP).querySelectorAll("path").forEach((function(t){return null==t?void 0:t.remove()})),window.document.getElementById(s.V_ID.INTERACTIVE_GROUP).querySelectorAll("circle").forEach((function(t){return null==t?void 0:t.remove()})),null===(n=window.document.getElementById(s.V_ID.INTERACTIVE_GROUP))||void 0===n||n.appendChild(y);var m=function(e,n){e&&(function(){var t,i=(0,d.icdt_SvgCircle)(Math.ceil(1e9*Math.random()),{attribute:{fill:"start"==n?"#FF0000":"#00BA00",strokeWidth:(0,c.icdt_ScaleNumber)(1)},size:{x:e[0]-5,y:e[1]-5,width:10,height:10}}).element;null===(t=window.document.getElementById(s.V_ID.INTERACTIVE_GROUP))||void 0===t||t.prepend(i)}(),function(){var n,i,o=(null!==(n=null!=t?t:l.icdt.dataSelect.nodes[0])&&void 0!==n?n:{}).size;if(o){var a=[[e[0]-o.width/2,e[1]-o.height/2],[e[0]+o.width/2,e[1]-o.height/2],[e[0]+o.width/2,e[1]+o.height/2],[e[0]-o.width/2,e[1]+o.height/2],[e[0]-o.width/2,e[1]-o.height/2]],u=(0,r.icdt_SvgPath)(Math.ceil(1e9*Math.random()),{attribute:{fill:"#FFFFFF",fillOpacity:.6,stroke:"#5f6ce1",strokeWidth:(0,c.icdt_ScaleNumber)(1),strokeLinecap:"round",strokeLinejoin:"round",strokeDasharray:(0,c.icdt_ScaleNumber)(8)},size:{x:0,y:0,width:10,height:10,points:a}}).element;null===(i=window.document.getElementById(s.V_ID.INTERACTIVE_GROUP))||void 0===i||i.prepend(u)}}())};(0,a.icdt_SyncSvgNodeAttribute)(y,p),m((null===(f=null==e?void 0:e.points)||void 0===f?void 0:f.length)?e.points[0]:void 0),m((null===(h=null==e?void 0:e.points)||void 0===h?void 0:h.length)&&(null===(v=null==e?void 0:e.points)||void 0===v?void 0:v.length)>=2?e.points[e.points.length-1]:void 0);var w="";return{start:function(t){w="M ".concat(t.x," ").concat(t.y," L ").concat(t.x," ").concat(t.y)},move:function(t,e){var n,i;n=t.x,i=t.y,w+=" ".concat(n," ").concat(i),y.setAttribute("d",w)},end:function(t,e){!function(t){var e=u.line().x((function(t){return t[0]})).y((function(t){return t[1]})).curve(u.curveBasis),n=e(t);y.setAttribute("d",n),t.length>=2&&(window.interactivePoints=t)}(e),function(t){var e=9999,n=9999,r=-9999,a=-9999;t.forEach((function(t){e=Math.min(e,t[0]),n=Math.min(n,t[1]),r=Math.max(r,t[0]),a=Math.max(a,t[1])})),b=(0,i.icdt_Offset2Size)(e,n,r,a,{points:t}),Object.assign(_,(0,i.icdt_Size2Attribute)(o.V_ShapeType.PATH,b,_),p)}(e),m(e.length?e[0]:void 0,"start"),m(e.length>=2?e[e.length-1]:void 0,"end")}}}},4685:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_InteractiveComponent=e.icdt_PenComponent=void 0;var i=n(3331),r=n(8947),o=n(9427),a=n(670),u=n(5932),c=n(1933),s=n(223),l=n(2103);e.icdt_PenComponent=function(t){switch(o.icdt.pointer.pen_type){case r.V_PenType.DRAW:(0,a.icdt_PointerEvents)(t,new c.icdt_Draw);break;case r.V_PenType.HIGHTLIGH:(0,a.icdt_PointerEvents)(t,new s.icdt_Highlight);break;case r.V_PenType.INTERACTIVE:(0,e.icdt_InteractiveComponent)(t)}},e.icdt_InteractiveComponent=function(t){var e,n,r,c=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.INTERACTIVE_GROUP,"g"),s=null!==(r=null===(n=null===(e=o.icdt.data.slide)||void 0===e?void 0:e.svg)||void 0===n?void 0:n.viewBox)&&void 0!==r?r:function(){var t=o.icdt.screen.get;return{x:0,y:0,width:t.width,height:t.height}}();(0,u.syncNodeInteractive)(c,s),t&&(0,a.icdt_PointerEvents)(t,new l.icdt_Interactive)}},1785:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_PointerComponent=void 0;var i=n(3331),r=n(9427),o=n(2769),a=n(6511),u=n(4255);e.icdt_PointerComponent=function(t){var e,n,c,s,l,d,f,h,v,p,g=(null===(e=t.mouseEvent)||void 0===e?void 0:e.target)||(null===(n=t.touchEvent)||void 0===n?void 0:n.target),y=(null==g?void 0:g.getAttribute("id"))||"",_=null==g?void 0:g.nodeName,b=(null===(c=null==g?void 0:g.parentNode)||void 0===c?void 0:c.getAttribute("id"))||"";if([i.V_ID.RESIZE_GROUP,i.V_ID.SELECT_GROUP].includes(b))return null===(s=t.mouseEvent)||void 0===s||s.stopPropagation(),void(null===(l=t.mouseEvent)||void 0===l||l.preventDefault());if((null===(d=t.mouseEvent)||void 0===d?void 0:d.altKey)||(null===(f=t.touchEvent)||void 0===f?void 0:f.altKey)||!y||y.match(/[^0-9]/)||!r.icdt.dataSelect.nodeName.includes(_))r.icdt.dataSelect.ids.length&&(r.icdt.dataSelect.ids=[]),(0==(null===(h=t.mouseEvent)||void 0===h?void 0:h.button)||t.touchEvent)&&(0,o.icdt_Scan)(t);else{var m=parseFloat(y||"0");(null===(v=t.mouseEvent)||void 0===v?void 0:v.shiftKey)||(null===(p=t.touchEvent)||void 0===p?void 0:p.shiftKey)?r.icdt.dataSelect.ids=[m].concat(r.icdt.dataSelect.ids).filter((function(t,e,n){return n.indexOf(t)==e})):r.icdt.dataSelect.ids=[m];var w=r.icdt.dataSelect.nodes;w.length>1?(0,u.icdt_Select)(w):1==w.length&&(0,a.icdt_Resize)(w[0])}}},6511:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Resize=void 0;var i=n(3331),r=n(9427),o=n(184),a=n(670),u=n(5932),c=n(5877);e.icdt_Resize=function(t){var e=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.RESIZE_GROUP,"g");(0,u.syncNodeResize)(e,t).forEach((function(n){s(n.element,n.posType,t,e)}))};var s=function(t,e,n,i){var r=!1;null==t||t.addEventListener("touchstart",(function(t){r=!0,l({touchEvent:t},e,n,i)})),null==t||t.addEventListener("mousedown",(function(t){0==t.button&&(r?r=!1:l({mouseEvent:t},e,n,i))}))},l=function(t,e,n,i){var s,l=n.id,d=n.type,f=n.size,h=n.attribute,v=f.x,p=f.y,g=f.width,y=f.height,_=(g||1)/(y||1),b=null,m=!1,w={start:function(t){b=JSON.parse(JSON.stringify({id:l,size:f,attribute:h}))},move:function(r,a){!function(r,a,b,m){var w,x,S,M,E,k,T,N,A,O,R,C,I,j,P,z,D,V,L,B,F,G,U,K,H,Q,q,$,Y,W,X,J,Z,tt,et,nt,it,rt,ot,at,ut,ct,st,lt,dt,ft,ht,vt,pt,gt,yt=b-r,_t=m-a;switch(e){case"rect-center":s=(null===(w=t.mouseEvent)||void 0===w?void 0:w.shiftKey)||(null===(x=t.touchEvent)||void 0===x?void 0:x.shiftKey)?Math.abs(b-r)>=Math.abs(m-a)?{x:v+b-r,y:p,width:g,height:y}:{x:v,y:p+m-a,width:g,height:y}:{x:v+b-r,y:p+m-a,width:g,height:y};break;case"rect-top-left":s=((null===(S=t.mouseEvent)||void 0===S?void 0:S.shiftKey)||(null===(M=t.touchEvent)||void 0===M?void 0:M.shiftKey))&&((null===(E=t.mouseEvent)||void 0===E?void 0:E.altKey)||(null===(k=t.touchEvent)||void 0===k?void 0:k.altKey))?_>=1?{x:v+(b-r),y:p+(b-r)/_,width:g-2*(b-r),height:y-2*(b-r)/_}:{x:v+(m-a)*_,y:p+(m-a),width:g-2*(m-a)*_,height:y-2*(m-a)}:(null===(T=t.mouseEvent)||void 0===T?void 0:T.shiftKey)||(null===(N=t.touchEvent)||void 0===N?void 0:N.shiftKey)?_>=1?{x:v+(b-r),y:p+(b-r)/_,width:g-(b-r),height:y-(b-r)/_}:{x:v+(m-a)*_,y:p+(m-a),width:g-(m-a)*_,height:y-(m-a)}:(null===(A=t.mouseEvent)||void 0===A?void 0:A.altKey)||(null===(O=t.touchEvent)||void 0===O?void 0:O.altKey)?{x:v+(b-r),y:p+(m-a),width:g-2*(b-r),height:y-2*(m-a)}:{x:v+(b-r),y:p+(m-a),width:g-(b-r),height:y-(m-a)};break;case"rect-top-right":s=((null===(R=t.mouseEvent)||void 0===R?void 0:R.shiftKey)||(null===(C=t.touchEvent)||void 0===C?void 0:C.shiftKey))&&((null===(I=t.mouseEvent)||void 0===I?void 0:I.altKey)||(null===(j=t.touchEvent)||void 0===j?void 0:j.altKey))?_>=1?{x:v-(b-r),y:p-(b-r)/_,width:g+2*(b-r),height:y+2*(b-r)/_}:{x:v+(m-a)*_,y:p+(m-a),width:g-2*(m-a)*_,height:y-2*(m-a)}:(null===(P=t.mouseEvent)||void 0===P?void 0:P.shiftKey)||(null===(z=t.touchEvent)||void 0===z?void 0:z.shiftKey)?_>=1?{x:v,y:p-(b-r)/_,width:g+(b-r),height:y+(b-r)/_}:{x:v,y:p+(m-a),width:g-(m-a)*_,height:y-(m-a)}:(null===(D=t.mouseEvent)||void 0===D?void 0:D.altKey)||(null===(V=t.touchEvent)||void 0===V?void 0:V.altKey)?{x:v-(b-r),y:p+(m-a),width:g+2*(b-r),height:y-2*(m-a)}:{x:v,y:p+(m-a),width:g+(b-r),height:y-(m-a)};break;case"rect-bottom-left":s=((null===(L=t.mouseEvent)||void 0===L?void 0:L.shiftKey)||(null===(B=t.touchEvent)||void 0===B?void 0:B.shiftKey))&&((null===(F=t.mouseEvent)||void 0===F?void 0:F.altKey)||(null===(G=t.touchEvent)||void 0===G?void 0:G.altKey))?_>=1?{x:v+(b-r),y:p+(b-r)/_,width:g-2*(b-r),height:y-2*(b-r)/_}:{x:v-(m-a)*_,y:p-(m-a),width:g+2*(m-a)*_,height:y+2*(m-a)}:(null===(U=t.mouseEvent)||void 0===U?void 0:U.shiftKey)||(null===(K=t.touchEvent)||void 0===K?void 0:K.shiftKey)?_>=1?{x:v+(b-r),y:p,width:g-(b-r),height:y-(b-r)/_}:{x:v-(m-a)*_,y:p,width:g+(m-a)*_,height:y+(m-a)}:(null===(H=t.mouseEvent)||void 0===H?void 0:H.altKey)||(null===(Q=t.touchEvent)||void 0===Q?void 0:Q.altKey)?{x:v+(b-r),y:p-(m-a),width:g-2*(b-r),height:y+2*(m-a)}:{x:v+(b-r),y:p,width:g-(b-r),height:y+(m-a)};break;case"rect-bottom-right":s=((null===(q=t.mouseEvent)||void 0===q?void 0:q.shiftKey)||(null===($=t.touchEvent)||void 0===$?void 0:$.shiftKey))&&((null===(Y=t.mouseEvent)||void 0===Y?void 0:Y.altKey)||(null===(W=t.touchEvent)||void 0===W?void 0:W.altKey))?_>=1?{x:v-(b-r),y:p-(b-r)/_,width:g+2*(b-r),height:y+2*(b-r)/_}:{x:v-(m-a)*_,y:p-(m-a),width:g+2*(m-a)*_,height:y+2*(m-a)}:(null===(X=t.mouseEvent)||void 0===X?void 0:X.shiftKey)||(null===(J=t.touchEvent)||void 0===J?void 0:J.shiftKey)?_>=1?{x:v,y:p,width:g+(b-r),height:y+(b-r)/_}:{x:v,y:p,width:g+(m-a)*_,height:y+(m-a)}:(null===(Z=t.mouseEvent)||void 0===Z?void 0:Z.altKey)||(null===(tt=t.touchEvent)||void 0===tt?void 0:tt.altKey)?{x:v-(b-r),y:p-(m-a),width:g+2*(b-r),height:y+2*(m-a)}:{x:v,y:p,width:g+(b-r),height:y+(m-a)};break;case"rect-top":s=(null===(et=t.mouseEvent)||void 0===et?void 0:et.shiftKey)||(null===(nt=t.touchEvent)||void 0===nt?void 0:nt.shiftKey)?{x:v+_t/2*_,y:p+_t,width:g-_t*_,height:y-_t}:(null===(it=t.mouseEvent)||void 0===it?void 0:it.altKey)||(null===(rt=t.touchEvent)||void 0===rt?void 0:rt.altKey)?{x:v,y:p+_t,width:g,height:y-2*_t}:{x:v,y:p+_t,width:g,height:y-_t};break;case"rect-bottom":s=(null===(ot=t.mouseEvent)||void 0===ot?void 0:ot.shiftKey)||(null===(at=t.touchEvent)||void 0===at?void 0:at.shiftKey)?{x:v-_t/2*_,y:p,width:g+_t*_,height:y+_t}:(null===(ut=t.mouseEvent)||void 0===ut?void 0:ut.altKey)||(null===(ct=t.touchEvent)||void 0===ct?void 0:ct.altKey)?{x:v,y:p-_t,width:g,height:y+2*_t}:{x:v,y:p,width:g,height:y+_t};break;case"rect-left":s=(null===(st=t.mouseEvent)||void 0===st?void 0:st.shiftKey)||(null===(lt=t.touchEvent)||void 0===lt?void 0:lt.shiftKey)?{x:v+yt,y:p+yt/2/_,width:g-yt,height:y-yt/_}:(null===(dt=t.mouseEvent)||void 0===dt?void 0:dt.altKey)||(null===(ft=t.touchEvent)||void 0===ft?void 0:ft.altKey)?{x:v+yt,y:p,width:g-2*yt,height:y}:{x:v+yt,y:p,width:g-yt,height:y};break;case"rect-right":s=(null===(ht=t.mouseEvent)||void 0===ht?void 0:ht.shiftKey)||(null===(vt=t.touchEvent)||void 0===vt?void 0:vt.shiftKey)?{x:v,y:p-yt/2/_,width:g+yt,height:y+yt/_}:(null===(pt=t.mouseEvent)||void 0===pt?void 0:pt.altKey)||(null===(gt=t.touchEvent)||void 0===gt?void 0:gt.altKey)?{x:v-yt,y:p,width:g+2*yt,height:y}:{x:v,y:p,width:g+yt,height:y};break;default:s={x:v+b-r,y:p+m-a,width:g,height:y}}s.width<0&&(s.width=0),s.height<0&&(s.height=0),s.x=(0,c.icdt_RoundNumber)(s.x),s.y=(0,c.icdt_RoundNumber)(s.y),s.width=(0,c.icdt_RoundNumber)(s.width),s.height=(0,c.icdt_RoundNumber)(s.height),Object.assign(f,s),Object.assign(h,(0,o.icdt_Size2Attribute)(d,f,h)),(0,u.icdt_SyncSvgNodeAttribute)(window.document.getElementById(l),h),(0,u.syncNodeResize)(i,n)}(a[0][0],a[0][1],r.x,r.y),m=!0},end:function(t,e){m&&b&&r.icdt.history.push([{type:"size",from:b,to:JSON.parse(JSON.stringify({id:l,size:f,attribute:h}))}])}};(0,a.icdt_PointerEvents)(t,w)}},2769:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Scan=void 0;var i=n(3331),r=n(9427),o=n(184),a=n(670),u=n(5932),c=n(6511),s=n(4255);e.icdt_Scan=function(t){var e=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.SCAN_GROUP,"g"),n=(0,o.icdt_Offset2Size)(0,0,1,1);(0,u.syncNodeScan)(e,n),l(t,n,e)};var l=function(t,e,n){var i={start:function(t){},move:function(t,i){var r,a,c,s;r=i[0][0],a=i[0][1],c=t.x,s=t.y,e=(0,o.icdt_Offset2Size)(r,a,c,s),(0,u.syncNodeScan)(n,e)},end:function(t,e){null==n||n.remove(),r.icdt.dataSelect.ids=r.icdt.data.getNodeInArea(Math.min(e[0][0],t.x),Math.min(e[0][1],t.y),Math.max(e[0][0],t.x),Math.max(e[0][1],t.y));var i=r.icdt.dataSelect.nodes;1==i.length?(0,c.icdt_Resize)(i[0]):i.length>1&&(0,s.icdt_Select)(i)}};(0,a.icdt_PointerEvents)(t,i)}},4255:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Select=void 0;var i=n(3331),r=n(9427),o=n(184),a=n(670),u=n(5932),c=n(5877);e.icdt_Select=function(t){var e=999999,n=999999,r=-999999,a=-999999;null==t||t.forEach((function(t){e=Math.min(e,t.size.x),n=Math.min(n,t.size.y),r=Math.max(r,t.size.x+t.size.width),a=Math.max(a,t.size.y+t.size.height)}));var c=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.SELECT_GROUP,"g"),l=(0,o.icdt_Offset2Size)(e,n,r,a);(0,u.syncNodeSelect)(c,t,l).forEach((function(e){s(e.element,e.posType,l,t,c)}))};var s=function(t,e,n,i,r){var o=!1;null==t||t.addEventListener("touchstart",(function(t){o=!0,l({touchEvent:t},e,n,i,r)})),null==t||t.addEventListener("mousedown",(function(t){0==t.button&&(o?o=!1:l({mouseEvent:t},e,n,i,r))}))},l=function(t,e,n,i,s){var l=n.x,d=n.y,f=n.width,h=n.height,v=i.map((function(t){return Object.assign({},t.size)})),p=[],g={start:function(t){i.forEach((function(t,e){var n=t.id,i=(t.type,t.size),r=t.attribute;p.push(JSON.parse(JSON.stringify({id:n,size:i,attribute:r})))}))},move:function(t,r){var a,p,g,y,_;a=r[0][0],p=r[0][1],g=t.x,y=t.y,(_="rect-center"===e?{x:l+g-a,y:d+y-p,width:f,height:h}:{x:l,y:d,width:f,height:h}).width<0&&(_.width=0),_.height<0&&(_.height=0),Object.assign(n,_),(0,u.syncNodeSelect)(s,i,n),i.forEach((function(t,n){var i,r=v[n],s=r.x,l=r.y,d=r.width,f=r.height,h=t.id,_=t.type,b=t.size,m=t.attribute;(i="rect-center"===e?{x:s+g-a,y:l+y-p,width:d,height:f}:{x:s,y:l,width:d,height:f}).width<0&&(i.width=0),i.height<0&&(i.height=0),i.x=(0,c.icdt_RoundNumber)(i.x),i.y=(0,c.icdt_RoundNumber)(i.y),i.width=(0,c.icdt_RoundNumber)(i.width),i.height=(0,c.icdt_RoundNumber)(i.height),Object.assign(b,i),Object.assign(m,(0,o.icdt_Size2Attribute)(_,b,m)),(0,u.icdt_SyncSvgNodeAttribute)(window.document.getElementById(h),m)}))},end:function(t,e){p.length&&r.icdt.history.push(i.map((function(t,e){var n=t.id,i=(t.type,t.size),r=t.attribute;return{type:"size",from:p[e],to:JSON.parse(JSON.stringify({id:n,size:i,attribute:r}))}})))}};(0,a.icdt_PointerEvents)(t,g)}},1724:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SortComponent=e.icdt_RenderComponent=void 0;var i=n(3331),r=n(303),o=n(4644),a=n(8539),u=n(5127),c=n(4971),s=n(2263),l=n(2121),d=n(2613),f=n(5677),h=n(6383),v=n(451),p=n(9427),g=n(5932);e.icdt_RenderComponent=function(t,e,n){var y;if(!e||(null!=n?n:window).document.getElementById(e)){if("localhost"==location.hostname&&console.log("áááááá sợ quá điiiiiiiiiiiiiiiiiiiiiiiiiii!",e),e){var _=(null!=n?n:window).document.getElementById(e);jQuery(_).find("#"+i.V_ID.BACKGROUND_GROUP).empty();var b=(0,g.icdt_SyncSvgNode4Design)(i.V_ID.BACKGROUND_GROUP,"g",void 0,_);(0,g.syncBackground)(b,t)}else jQuery(p.icdt.target).find("#"+i.V_ID.BACKGROUND_GROUP).empty(),b=(0,g.icdt_SyncSvgNode4Design)(i.V_ID.BACKGROUND_GROUP,"g",void 0,p.icdt.target),(0,g.syncBackground)(b,t);var m=function(t,i){i=e&&i?"".concat(e,"-").concat(i):null!=e?e:i,null==t||t.forEach((function(t){var p,g=e?"".concat(e,"-").concat(t.id):t.id;if(t.isdeleted)null===(p=(null!=n?n:window).document.getElementById(g))||void 0===p||p.remove();else switch(t.type){case l.V_ShapeType.GROUP:(0,s.icdt_SvgGroup)(g,{},i?(null!=n?n:window).document.getElementById(i):null),m(t.nodes,t.id);break;case l.V_ShapeType.CIRCLE:(0,r.icdt_SvgCircle)(g,{size:t.size,attribute:t.attribute},i?(null!=n?n:window).document.getElementById(i):null);break;case l.V_ShapeType.ELLIPSE:(0,o.icdt_SvgEllipse)(g,{size:t.size,attribute:t.attribute},i?(null!=n?n:window).document.getElementById(i):null);break;case l.V_ShapeType.LINE:(0,c.icdt_SvgLine)(g,{size:t.size,attribute:t.attribute},i?(null!=n?n:window).document.getElementById(i):null);break;case l.V_ShapeType.RECT:(0,u.icdt_SvgRect)(g,{size:t.size,attribute:t.attribute},i?(null!=n?n:window).document.getElementById(i):null);break;case l.V_ShapeType.POLYGON:(0,a.icdt_SvgPolygon)(g,{size:t.size,attribute:t.attribute},i?(null!=n?n:window).document.getElementById(i):null);break;case l.V_ShapeType.FOREIGNOBJECT:(0,h.icdt_SvgForeignObject)(g,{size:t.size,attribute:t.attribute,style:t.style,source:t.source},i?(null!=n?n:window).document.getElementById(i):null);break;case l.V_ShapeType.IMAGE:(0,v.icdt_SvgImage)(g,{size:t.size,attribute:t.attribute,source:t.source},i?(null!=n?n:window).document.getElementById(i):null);break;case l.V_ShapeType.TEXT:(0,f.icdt_SvgText)(g,{size:t.size,attribute:t.attribute,source:t.source},i?(null!=n?n:window).document.getElementById(i):null);break;case l.V_ShapeType.PATH:(0,d.icdt_SvgPath)(g,{size:t.size,attribute:t.attribute},i?(null!=n?n:window).document.getElementById(i):null)}}))};m(null===(y=null==t?void 0:t.svg)||void 0===y?void 0:y.nodes)}},e.icdt_SortComponent=function(t,e){var n;if(!e||window.document.getElementById(e)){var i=function(t,n){n=n?"".concat(e,"-").concat(n):e,null==t||t.forEach((function(t){var r=e?"".concat(e,"-").concat(t.id):t.id;jQuery("#"+r).appendTo(n?window.document.getElementById(n):p.icdt.target),t.type==l.V_ShapeType.GROUP&&i(t.nodes,t.id)}))};i(null===(n=null==t?void 0:t.svg)||void 0===n?void 0:n.nodes)}}},6633:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_ShapeComponent=void 0;var i=n(2121),r=n(5611),o=n(9427),a=n(440),u=n(9904),c=n(7520),s=n(220),l=n(4828),d=n(670),f=n(8338),h=n(2376),v=n(3124);e.icdt_ShapeComponent=function(t){var e,n=null;switch(o.icdt.pointer.shape_type){case i.V_ShapeType.CIRCLE:n=new a.icdt_SvgCircleCreate;break;case i.V_ShapeType.ELLIPSE:n=new u.icdt_SvgEllipseCreate;break;case i.V_ShapeType.LINE:n=new l.icdt_SvgLineCreate;break;case i.V_ShapeType.RECT:n=new c.icdt_SvgRectCreate;break;case i.V_ShapeType.POLYGON:n=new s.icdt_SvgPolygonCreate(null===(e=r.V_PolygonRatio.find((function(t){return t.type==o.icdt.pointer.polygon_type})))||void 0===e?void 0:e.ratios);break;case i.V_ShapeType.FOREIGNOBJECT:n=new h.icdt_SvgForeignObjectCreate;break;case i.V_ShapeType.IMAGE:n=new v.icdt_SvgImageCreate;break;case i.V_ShapeType.TEXT:case i.V_ShapeType.PATH:n=new f.icdt_SvgPathCreate}n&&(0,d.icdt_PointerEvents)(t,n)}},440:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgCircleCreate=void 0;var i=n(3331),r=n(2121),o=n(9427),a=n(184),u=n(5932),c=n(303),s=n(5877);e.icdt_SvgCircleCreate=function(){var t=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.CREATE_GROUP,"g"),e=(0,c.icdt_SvgCircle)(Math.ceil(1e9*Math.random())),n=e.nodeId,l=e.element,d=e.attribute,f=e.size,h=function(e,n,i,o){(f=(0,a.icdt_Offset2Size)(e,n,i,o,{ratio:1})).x=(0,s.icdt_RoundNumber)(f.x),f.y=(0,s.icdt_RoundNumber)(f.y),f.width=(0,s.icdt_RoundNumber)(f.width),f.height=(0,s.icdt_RoundNumber)(f.height),Object.assign(d,(0,a.icdt_Size2Attribute)(r.V_ShapeType.CIRCLE,f,d)),(0,u.icdt_SyncSvgNodeAttribute)(l,d),(0,u.syncNodeCreate)(t,f)};return{start:function(t){h(t.x,t.y,t.x+f.width,t.y+f.height)},move:function(t,e){h(e[0][0],e[0][1],t.x,t.y)},end:function(e,i){(f.width<=16||f.height<=16)&&(f.width=80,f.height=80,f.x=f.x-f.width/2,f.y=f.y-f.height/2,Object.assign(d,(0,a.icdt_Size2Attribute)(r.V_ShapeType.CIRCLE,f,d)),(0,u.icdt_SyncSvgNodeAttribute)(l,d)),o.icdt.data.node=Object.assign({id:n,type:r.V_ShapeType.CIRCLE,name:"Circle"},{size:f,attribute:d}),null==t||t.remove()}}}},303:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgCircle=void 0;var i=n(2121),r=n(9427),o=n(184),a=n(5932);e.icdt_SvgCircle=function(t,e,n){var u=(null==e?void 0:e.size)||{x:0,y:0,width:10,height:10},c=(null==e?void 0:e.attribute)||{fill:r.icdt.attribute.fill,stroke:r.icdt.attribute.stroke,strokeWidth:r.icdt.attribute.strokeWidth};return Object.assign(c,(0,o.icdt_Size2Attribute)(i.V_ShapeType.CIRCLE,u,c)),{nodeId:t,element:(0,a.icdt_SyncSvgNode)(t,i.V_ShapeType.CIRCLE,"circle",{size:u,attribute:c},n),size:u,attribute:c}}},9904:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgEllipseCreate=void 0;var i=n(3331),r=n(2121),o=n(9427),a=n(184),u=n(5932),c=n(4644),s=n(5877);e.icdt_SvgEllipseCreate=function(){var t=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.CREATE_GROUP,"g"),e=(0,c.icdt_SvgEllipse)(Math.ceil(1e9*Math.random())),n=e.nodeId,l=e.element,d=e.attribute,f=e.size,h=function(e,n,i,o){(f=(0,a.icdt_Offset2Size)(e,n,i,o)).x=(0,s.icdt_RoundNumber)(f.x),f.y=(0,s.icdt_RoundNumber)(f.y),f.width=(0,s.icdt_RoundNumber)(f.width),f.height=(0,s.icdt_RoundNumber)(f.height),Object.assign(d,(0,a.icdt_Size2Attribute)(r.V_ShapeType.ELLIPSE,f,d)),(0,u.icdt_SyncSvgNodeAttribute)(l,d),(0,u.syncNodeCreate)(t,f)};return{start:function(t){h(t.x,t.y,t.x+f.width,t.y+f.height)},move:function(t,e){h(e[0][0],e[0][1],t.x,t.y)},end:function(e,i){(f.width<=16||f.height<=16)&&(f.width=90,f.height=60,f.x=f.x-f.width/2,f.y=f.y-f.height/2,Object.assign(d,(0,a.icdt_Size2Attribute)(r.V_ShapeType.ELLIPSE,f,d)),(0,u.icdt_SyncSvgNodeAttribute)(l,d)),o.icdt.data.node=Object.assign({id:n,type:r.V_ShapeType.ELLIPSE,name:"Ellipse"},{size:f,attribute:d}),null==t||t.remove()}}}},4644:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgEllipse=void 0;var i=n(2121),r=n(9427),o=n(184),a=n(5932);e.icdt_SvgEllipse=function(t,e,n){var u=(null==e?void 0:e.size)||{x:0,y:0,width:10,height:10},c=(null==e?void 0:e.attribute)||{fill:r.icdt.attribute.fill,stroke:r.icdt.attribute.stroke,strokeWidth:r.icdt.attribute.strokeWidth};return Object.assign(c,(0,o.icdt_Size2Attribute)(i.V_ShapeType.ELLIPSE,u,c)),{nodeId:t,element:(0,a.icdt_SyncSvgNode)(t,i.V_ShapeType.ELLIPSE,"ellipse",{size:u,attribute:c},n),size:u,attribute:c}}},2376:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgForeignObjectCreate=void 0;var i=n(3331),r=n(2121),o=n(9427),a=n(184),u=n(5932),c=n(6383),s=n(5877);e.icdt_SvgForeignObjectCreate=function(){var t=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.CREATE_GROUP,"g"),e=(0,c.icdt_SvgForeignObject)(Math.ceil(1e9*Math.random())),n=e.nodeId,l=e.element,d=e.size,f=e.attribute,h=e.style,v=e.source,p=function(e,n,i,o){(d=(0,a.icdt_Offset2Size)(e,n,i,o)).x=(0,s.icdt_RoundNumber)(d.x),d.y=(0,s.icdt_RoundNumber)(d.y),d.width=(0,s.icdt_RoundNumber)(d.width),d.height=(0,s.icdt_RoundNumber)(d.height),Object.assign(f,(0,a.icdt_Size2Attribute)(r.V_ShapeType.FOREIGNOBJECT,d,f)),(0,u.icdt_SyncSvgNodeAttribute)(l,f),(0,u.syncNodeCreate)(t,d)};return{start:function(t){p(t.x,t.y,t.x+d.width,t.y+d.height)},move:function(t,e){p(e[0][0],e[0][1],t.x,t.y)},end:function(e,i){(d.width<=16||d.height<=16)&&(d.width=90,d.height=60,d.x=d.x-d.width/2,d.y=d.y-d.height/2,Object.assign(f,(0,a.icdt_Size2Attribute)(r.V_ShapeType.FOREIGNOBJECT,d,f)),(0,u.icdt_SyncSvgNodeAttribute)(l,f)),o.icdt.data.node=Object.assign({id:n,type:r.V_ShapeType.FOREIGNOBJECT,name:"ForeignObject"},{size:d,attribute:f,style:h,source:v}),null==t||t.remove()}}}},6383:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgForeignObject=void 0;var i=n(2121),r=n(184),o=n(5932);e.icdt_SvgForeignObject=function(t,e,n){var a=(null==e?void 0:e.size)||{x:0,y:0,width:320,height:80},u=(null==e?void 0:e.attribute)||{};Object.assign(u,(0,r.icdt_Size2Attribute)(i.V_ShapeType.FOREIGNOBJECT,a,u));var c=(null==e?void 0:e.source)||{type:"html",html:{htmlContent:'<span style="font-family: Roboto; font-size: 24px;">Hãy nhập nội dung của bạn!</span>'}},s=(null==e?void 0:e.style)||{};return{nodeId:t,element:(0,o.icdt_SyncSvgNode)(t,i.V_ShapeType.FOREIGNOBJECT,"foreignObject",{size:a,attribute:u,style:s,source:c},n),size:a,attribute:u,style:s,source:c}}},2263:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgGroup2=e.icdt_SvgGroup=void 0;var i=n(2121),r=n(184),o=n(5932);e.icdt_SvgGroup=function(t,e,n){var a=(null==e?void 0:e.size)||{x:0,y:0,width:10,height:10},u=(null==e?void 0:e.attribute)||{};return Object.assign(u,(0,r.icdt_Size2Attribute)(i.V_ShapeType.GROUP,a,u)),{nodeId:t,element:(0,o.icdt_SyncSvgNode)(t,i.V_ShapeType.GROUP,"g",{size:a,attribute:u},n),size:a,attribute:u}},e.icdt_SvgGroup2=function(t,e,n){var a=(null==e?void 0:e.size)||{x:0,y:0,width:10,height:10},u=(null==e?void 0:e.attribute)||{};return Object.assign(u,(0,r.icdt_Size2Attribute)(i.V_ShapeType.GROUP,a,u)),{nodeId:t,element:(0,o.icdt_SyncSvgNode)(t,i.V_ShapeType.GROUP,"g",{size:a,attribute:u},n),size:a,attribute:u}}},3124:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgImageCreate=void 0;var i=n(3331),r=n(2121),o=n(9427),a=n(184),u=n(5932),c=n(5877),s=n(451);e.icdt_SvgImageCreate=function(){var t,e,n=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.CREATE_GROUP,"g"),l=(0,s.icdt_SvgImage)(Math.ceil(1e9*Math.random())),d=l.nodeId,f=l.element,h=l.size,v=l.attribute,p=l.source,g=1;!function(t){if(t){var e=new Image;e.onload=function(){g=(0,c.icdt_RoundNumber)(e.naturalWidth/e.naturalHeight,100)},e.onerror=function(e){console.error("ImgSrc load failed -> ".concat(t),e)},e.src=t}}(null!==(e=null===(t=p.image)||void 0===t?void 0:t.url)&&void 0!==e?e:"");var y=function(t,e,i,o){(h=(0,a.icdt_Offset2Size)(t,e,i,o,{ratio:g})).x=(0,c.icdt_RoundNumber)(h.x),h.y=(0,c.icdt_RoundNumber)(h.y),h.width=(0,c.icdt_RoundNumber)(h.width),h.height=(0,c.icdt_RoundNumber)(h.height),Object.assign(v,(0,a.icdt_Size2Attribute)(r.V_ShapeType.IMAGE,h,v)),(0,u.icdt_SyncSvgNodeAttribute)(f,v),(0,u.syncNodeCreate)(n,h)};return{start:function(t){y(t.x,t.y,t.x+h.width,t.y+h.height)},move:function(t,e){y(e[0][0],e[0][1],t.x,t.y)},end:function(t,e){(h.width<=16||h.height<=16)&&(h.width=80,h.height=80,h.x=h.x-h.width/2,h.y=h.y-h.height/2,Object.assign(v,(0,a.icdt_Size2Attribute)(r.V_ShapeType.IMAGE,h,v)),(0,u.icdt_SyncSvgNodeAttribute)(f,v)),o.icdt.data.node=Object.assign({id:d,type:r.V_ShapeType.IMAGE,name:"Image"},{size:h,attribute:v,source:p}),null==n||n.remove()}}}},451:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgImage=void 0;var i=n(2121),r=n(184),o=n(5932);e.icdt_SvgImage=function(t,e,n){var a=(null==e?void 0:e.size)||{x:0,y:0,width:10,height:10},u=(null==e?void 0:e.attribute)||{preserveAspectRatio:"none"};Object.assign(u,(0,r.icdt_Size2Attribute)(i.V_ShapeType.IMAGE,a,u));var c=(null==e?void 0:e.source)||{type:"image",image:{url:"../../assets/image-svg/logo.svg",path:"assets/image-svg/logo.svg",name:"logo.svg"}};return{nodeId:t,element:(0,o.icdt_SyncSvgNode)(t,i.V_ShapeType.IMAGE,"image",{size:a,attribute:u,source:c},n),size:a,attribute:u,source:c}}},4828:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgLineCreate=void 0;var i=n(3331),r=n(2121),o=n(9427),a=n(184),u=n(5932),c=n(4971),s=n(5877);e.icdt_SvgLineCreate=function(){var t=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.CREATE_GROUP,"g"),e=(0,c.icdt_SvgLine)(Math.ceil(1e9*Math.random())),n=e.nodeId,l=e.element,d=e.attribute,f=e.size;return{start:function(t){},move:function(e,n){var i,o,c,h;i=n[0][0],o=n[0][1],c=e.x,h=e.y,(f=(0,a.icdt_Offset2Size)(i,o,c,h)).x=(0,s.icdt_RoundNumber)(f.x),f.y=(0,s.icdt_RoundNumber)(f.y),f.width=(0,s.icdt_RoundNumber)(f.width),f.height=(0,s.icdt_RoundNumber)(f.height),Object.assign(d,(0,a.icdt_Size2Attribute)(r.V_ShapeType.LINE,f,d)),(0,u.icdt_SyncSvgNodeAttribute)(l,d),(0,u.syncNodeCreate)(t,f)},end:function(e,i){i.length>=2?((f.width<=16||f.height<=16)&&(f.width=80,f.height=80,f.x=f.x-f.width/2,f.y=f.y-f.height/2,Object.assign(d,(0,a.icdt_Size2Attribute)(r.V_ShapeType.LINE,f,d)),(0,u.icdt_SyncSvgNodeAttribute)(l,d)),o.icdt.data.node=Object.assign({id:n,type:r.V_ShapeType.LINE,name:"Line"},{size:f,attribute:d})):null==l||l.remove(),null==t||t.remove()}}}},4971:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgLine=void 0;var i=n(2121),r=n(9427),o=n(184),a=n(5932);e.icdt_SvgLine=function(t,e,n){var u=(null==e?void 0:e.size)||{x:0,y:0,width:10,height:10},c=(null==e?void 0:e.attribute)||{stroke:r.icdt.attribute.stroke,strokeWidth:r.icdt.attribute.strokeWidth,strokeLinecap:r.icdt.attribute.strokeLinecap};return Object.assign(c,(0,o.icdt_Size2Attribute)(i.V_ShapeType.LINE,u,c)),{nodeId:t,element:(0,a.icdt_SyncSvgNode)(t,i.V_ShapeType.LINE,"line",{size:u,attribute:c},n),size:u,attribute:c}}},8338:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgPathCreate=void 0;var i=n(9922),r=n(2121),o=n(9427),a=(n(184),n(5932),n(2613));e.icdt_SvgPathCreate=function(){var t=(0,a.icdt_SvgPath)(Math.ceil(1e9*Math.random())),e=t.nodeId,n=t.element,u=t.attribute,c=t.size,s="";return{start:function(t){s="M ".concat(t.x," ").concat(t.y," L ").concat(t.x," ").concat(t.y)},move:function(t,e){var i,r;i=t.x,r=t.y,s+=" ".concat(i," ").concat(r),n.setAttribute("d",s)},end:function(t,n){var a=(0,i.icdt_Adapter_PathD_2_PointMaps)(s),l=(0,i.icdt_Adapter_PointMaps_Extract_MinMaxXY)(a),d=l.minX,f=l.minY,h=l.maxX,v=l.maxY;c.x=d,c.y=f,c.width=h-d||1,c.height=v-f||1,c.ratioMaps=(0,i.icdt_Adapter_PointMaps_2_RatioMaps)(c,a),o.icdt.data.node=Object.assign({id:e,type:r.V_ShapeType.PATH,name:"Path"},{size:c,attribute:u})}}}},2613:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgPath=void 0;var i=n(2121),r=n(9427),o=n(184),a=n(5932);e.icdt_SvgPath=function(t,e,n){var u=(null==e?void 0:e.size)||{x:0,y:0,width:10,height:10},c=(null==e?void 0:e.attribute)||{stroke:r.icdt.attribute.stroke,strokeWidth:r.icdt.attribute.strokeWidth};return Object.assign(c,(0,o.icdt_Size2Attribute)(i.V_ShapeType.PATH,u,c)),{nodeId:t,element:(0,a.icdt_SyncSvgNode)(t,i.V_ShapeType.PATH,"path",{size:u,attribute:c},n),size:u,attribute:c}}},220:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgPolygonCreate=void 0;var i=n(3331),r=n(2121),o=n(9427),a=n(184),u=n(5932),c=n(8539),s=n(5877);e.icdt_SvgPolygonCreate=function(t){var e=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.CREATE_GROUP,"g"),n=t||[[0,0],[1,1],[0,1]],l=(0,c.icdt_SvgPolygon)(Math.ceil(1e9*Math.random())),d=l.nodeId,f=l.element,h=l.attribute,v=l.size;v.ratios=n;var p=function(t,i,o,c){(v=(0,a.icdt_Offset2Size)(t,i,o,c,{ratios:n})).x=(0,s.icdt_RoundNumber)(v.x),v.y=(0,s.icdt_RoundNumber)(v.y),v.width=(0,s.icdt_RoundNumber)(v.width),v.height=(0,s.icdt_RoundNumber)(v.height),Object.assign(h,(0,a.icdt_Size2Attribute)(r.V_ShapeType.POLYGON,v,h)),(0,u.icdt_SyncSvgNodeAttribute)(f,h),(0,u.syncNodeCreate)(e,v)};return{start:function(t){p(t.x,t.y,t.x+v.width,t.y+v.height)},move:function(t,e){p(e[0][0],e[0][1],t.x,t.y)},end:function(t,n){(v.width<=16||v.height<=16)&&(v.width=80,v.height=80,v.x=v.x-v.width/2,v.y=v.y-v.height/2,Object.assign(h,(0,a.icdt_Size2Attribute)(r.V_ShapeType.POLYGON,v,h)),(0,u.icdt_SyncSvgNodeAttribute)(f,h)),o.icdt.data.node=Object.assign({id:d,type:r.V_ShapeType.POLYGON,name:"Polygon"},{size:v,attribute:h}),null==e||e.remove()}}}},8539:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgPolygon=void 0;var i=n(2121),r=n(9427),o=n(184),a=n(5932);e.icdt_SvgPolygon=function(t,e,n){var u=(null==e?void 0:e.size)||{x:0,y:0,width:10,height:10},c=(null==e?void 0:e.attribute)||{fill:r.icdt.attribute.fill,stroke:r.icdt.attribute.stroke,strokeWidth:r.icdt.attribute.strokeWidth};return Object.assign(c,(0,o.icdt_Size2Attribute)(i.V_ShapeType.POLYGON,u,c)),{nodeId:t,element:(0,a.icdt_SyncSvgNode)(t,i.V_ShapeType.POLYGON,"polygon",{size:u,attribute:c},n),size:u,attribute:c}}},7520:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgRectCreate=void 0;var i=n(3331),r=n(2121),o=n(9427),a=n(184),u=n(5932),c=n(5127),s=n(5877);e.icdt_SvgRectCreate=function(){var t=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.CREATE_GROUP,"g"),e=(0,c.icdt_SvgRect)(Math.ceil(1e9*Math.random())),n=e.nodeId,l=e.element,d=e.attribute,f=e.size,h=function(e,n,i,o){(f=(0,a.icdt_Offset2Size)(e,n,i,o)).x=(0,s.icdt_RoundNumber)(f.x),f.y=(0,s.icdt_RoundNumber)(f.y),f.width=(0,s.icdt_RoundNumber)(f.width),f.height=(0,s.icdt_RoundNumber)(f.height),Object.assign(d,(0,a.icdt_Size2Attribute)(r.V_ShapeType.RECT,f,d)),(0,u.icdt_SyncSvgNodeAttribute)(l,d),(0,u.syncNodeCreate)(t,f)};return{start:function(t){h(t.x,t.y,t.x+f.width,t.y+f.height)},move:function(t,e){h(e[0][0],e[0][1],t.x,t.y)},end:function(e,i){(f.width<=16||f.height<=16)&&(f.width=80,f.height=80,f.x=f.x-f.width/2,f.y=f.y-f.height/2,Object.assign(d,(0,a.icdt_Size2Attribute)(r.V_ShapeType.RECT,f,d)),(0,u.icdt_SyncSvgNodeAttribute)(l,d)),o.icdt.data.node=Object.assign({id:n,type:r.V_ShapeType.RECT,name:"Rect"},{size:f,attribute:d}),null==t||t.remove()}}}},5127:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgRect=void 0;var i=n(2121),r=n(9427),o=n(184),a=n(5932);e.icdt_SvgRect=function(t,e,n){var u=(null==e?void 0:e.size)||{x:0,y:0,width:10,height:10},c=(null==e?void 0:e.attribute)||{fill:r.icdt.attribute.fill,stroke:r.icdt.attribute.stroke,strokeWidth:r.icdt.attribute.strokeWidth};return Object.assign(c,(0,o.icdt_Size2Attribute)(i.V_ShapeType.RECT,u,c)),{nodeId:t,element:(0,a.icdt_SyncSvgNode)(t,i.V_ShapeType.RECT,"rect",{size:u,attribute:c},n),size:u,attribute:c}}},2026:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgTextCreate=void 0;var i=n(3331),r=n(2121),o=n(9427),a=n(184),u=n(5932),c=n(5677),s=n(5877);e.icdt_SvgTextCreate=function(){var t=(0,u.icdt_SyncSvgNode4Design)(i.V_ID.CREATE_GROUP,"g"),e=(0,c.icdt_SvgText)(Math.ceil(1e9*Math.random())),n=e.nodeId,l=e.element,d=e.attribute,f=e.size,h=e.source,v=function(e,n,i,o){(f=(0,a.icdt_Offset2Size)(e,n,i,o)).x=(0,s.icdt_RoundNumber)(f.x),f.y=(0,s.icdt_RoundNumber)(f.y),f.width=(0,s.icdt_RoundNumber)(f.width),f.height=(0,s.icdt_RoundNumber)(f.height),Object.assign(d,(0,a.icdt_Size2Attribute)(r.V_ShapeType.TEXT,f,d)),(0,u.icdt_SyncSvgNodeAttribute)(l,d),(0,u.syncNodeCreate)(t,f)};return{start:function(t){v(t.x,t.y,t.x+f.width,t.y+f.height)},move:function(t,e){v(e[0][0],e[0][1],t.x,t.y)},end:function(e,i){(f.width<=16||f.height<=16)&&(f.width=80,f.height=80,f.x=f.x-f.width/2,f.y=f.y-f.height/2,Object.assign(d,(0,a.icdt_Size2Attribute)(r.V_ShapeType.TEXT,f,d)),(0,u.icdt_SyncSvgNodeAttribute)(l,d)),o.icdt.data.node=Object.assign({id:n,type:r.V_ShapeType.TEXT,name:"Text"},{size:f,attribute:d,source:h}),null==t||t.remove()}}}},5677:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgText=void 0;var i=n(2121),r=n(9427),o=n(184),a=n(5932);e.icdt_SvgText=function(t,e,n){var u=(null==e?void 0:e.size)||{x:0,y:0,width:320,height:80},c=(null==e?void 0:e.attribute)||{fill:r.icdt.attribute.stroke,fontFamily:r.icdt.attribute.fontFamily,fontSize:r.icdt.attribute.fontSize,textLength:r.icdt.attribute.textLength};Object.assign(c,(0,o.icdt_Size2Attribute)(i.V_ShapeType.TEXT,u,c));var s=(null==e?void 0:e.source)||{type:"text",text:{textContent:"Hãy nhập nội dung của bạn!"}};return{nodeId:t,element:(0,a.icdt_SyncSvgNode)(t,i.V_ShapeType.TEXT,"text",{size:u,attribute:c,source:s},n),size:u,attribute:c,source:s}}},4897:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_TextComponent=void 0;var i=n(670),r=n(2026);e.icdt_TextComponent=function(t){(0,i.icdt_PointerEvents)(t,new r.icdt_SvgTextCreate)}},184:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_OffsetSwitch=e.icdt_Size2Attribute=e.icdt_Offset2Size=void 0;var i=n(2121),r=n(9922);e.icdt_Offset2Size=function(t,e,n,i,r){var o={x:Math.min(t,n),y:Math.min(e,i),width:Math.abs(n-t)||1,height:Math.abs(i-e)||1};return(null==r?void 0:r.ratio)&&(o.width<=o.height?o.height=o.width*(null==r?void 0:r.ratio):o.width=o.height/(null==r?void 0:r.ratio)),Object.assign(o,{ratios:(null==r?void 0:r.ratios)||[[(t-o.x)/(o.width||1),(e-o.y)/(o.height||1)],[(n-o.x)/(o.width||1),(i-o.y)/(o.height||1)]]}),(null==r?void 0:r.points)&&(o.points=null==r?void 0:r.points),o},e.icdt_Size2Attribute=function(t,e,n){var o,a=function(){var o,a,u,c,s,l;switch(t){case i.V_ShapeType.CIRCLE:return{cx:e.x+e.width/2,cy:e.y+e.height/2,r:Math.min(e.width/2,e.height/2)};case i.V_ShapeType.ELLIPSE:return{cx:e.x+e.width/2,cy:e.y+e.height/2,rx:e.width/2,ry:e.height/2};case i.V_ShapeType.LINE:var d={};return null===(o=e.ratios)||void 0===o||o.forEach((function(t,n){d["x".concat(n+1)]=e.x+e.width*t[0],d["y".concat(n+1)]=e.y+e.height*t[1]})),d;case i.V_ShapeType.RECT:case i.V_ShapeType.FOREIGNOBJECT:case i.V_ShapeType.IMAGE:return{x:e.x,y:e.y,width:e.width,height:e.height};case i.V_ShapeType.TEXT:return{x:e.x,y:e.y+(null!==(a=n.fontSize)&&void 0!==a?a:16)};case i.V_ShapeType.POLYGON:if(null===(u=e.ratios)||void 0===u?void 0:u.length)return{points:(0,r.icdt_Adapter_Ratios_2_PolygonPoints)(e,e.ratios)};break;case i.V_ShapeType.PATH:if(null===(c=e.ratioMaps)||void 0===c?void 0:c.length)return{d:(0,r.icdt_Adapter_RatioMaps_2_PathD)(e,e.ratioMaps)};if(null===(s=e.points)||void 0===s?void 0:s.length)return l=e.points,{d:"M ".concat(l[0][0]," ").concat(l[0][1]," L ").concat((l.map((function(t){return[t[0],t[1]]}))||[]).map((function(t){return t.join(" ")})).join(" "))}}return{}}();return e.rotate?(a.transform="rotate(".concat(e.rotate,")"),a.transformOrigin="".concat(e.x+e.width/2," ").concat(e.y+e.height/2)):(null===(o=n.transform)||void 0===o?void 0:o.match(/^rotate/))&&(n.transform=null,n.transformOrigin=null),a},e.icdt_OffsetSwitch=function(t,e,n,r,o,a){switch(t){case i.V_ShapeType.CIRCLE:return{cx:(e+r)/2,cy:(n+o)/2,r:Math.min(Math.abs(e-r)/2,Math.abs(n-o)/2)};case i.V_ShapeType.ELLIPSE:return{cx:(e+r)/2,cy:(n+o)/2,rx:Math.abs(r-e)||1,ry:Math.abs(o-n)||1};case i.V_ShapeType.RECT:return{x:Math.min(e,r),y:Math.min(n,o),w:Math.abs(r-e)||1,h:Math.abs(o-n)||1};case i.V_ShapeType.POLYGON:var u={x:Math.min(e,r),y:Math.min(n,o),width:Math.abs(r-e)||1,height:Math.abs(o-n)||1};return{points:((null==a?void 0:a.map((function(t){return[u.x+u.width*t[0],u.y+u.height*t[1]]})))||[]).map((function(t){return t.join(" ")})).join(",")};case i.V_ShapeType.FOREIGNOBJECT:case i.V_ShapeType.IMAGE:return{x:Math.min(e,r),y:Math.min(n,o),w:Math.abs(r-e)||1,h:Math.abs(o-n)||1};case i.V_ShapeType.TEXT:return{x:Math.min(e,r),y:Math.min(n,o)};case i.V_ShapeType.PATH:return u={x:Math.min(e,r),y:Math.min(n,o),width:Math.abs(r-e)||1,height:Math.abs(o-n)||1},{d:"M ".concat(u.x," ").concat(u.y," L ").concat(u.x+u.width," ").concat(u.y+u.height)}}return{}}},5877:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_RoundNumber=void 0,e.icdt_RoundNumber=function(t,e){return e=null!=e?e:100,Math.round((t+Number.EPSILON)*e)/e}},4355:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_ScaleNumber=void 0;var i=n(9427),r=n(5877);e.icdt_ScaleNumber=function(t){return(0,r.icdt_RoundNumber)(t/i.icdt.screen.scale)}},4654:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.sizeRotate=e.sizeHeight=e.sizeWidth=e.sizeY=e.sizeX=void 0;var i=n(9427),r=n(5932),o=n(184),a=n(5877);e.sizeX=function(t,e){var n=t.id,u=t.type,c=t.size,s=t.attribute,l=JSON.parse(JSON.stringify({id:n,size:c,attribute:s}));c.x=(0,a.icdt_RoundNumber)(e),Object.assign(s,(0,o.icdt_Size2Attribute)(u,c,s)),(0,r.icdt_SyncSvgNodeAttribute)(window.document.getElementById(n),s),i.icdt.history.push([{type:"size",from:l,to:JSON.parse(JSON.stringify({id:n,size:c,attribute:s}))}])},e.sizeY=function(t,e){var n=t.id,u=t.type,c=t.size,s=t.attribute,l=JSON.parse(JSON.stringify({id:n,size:c,attribute:s}));c.y=(0,a.icdt_RoundNumber)(e),Object.assign(s,(0,o.icdt_Size2Attribute)(u,c,s)),(0,r.icdt_SyncSvgNodeAttribute)(window.document.getElementById(n),s),i.icdt.history.push([{type:"size",from:l,to:JSON.parse(JSON.stringify({id:n,size:c,attribute:s}))}])},e.sizeWidth=function(t,e,n){var u=t.id,c=t.type,s=t.size,l=t.attribute,d=JSON.parse(JSON.stringify({id:u,size:s,attribute:l}));n&&(s.height=(0,a.icdt_RoundNumber)(e*s.height/s.width)),s.width=(0,a.icdt_RoundNumber)(e),Object.assign(l,(0,o.icdt_Size2Attribute)(c,s,l)),(0,r.icdt_SyncSvgNodeAttribute)(window.document.getElementById(u),l),i.icdt.history.push([{type:"size",from:d,to:JSON.parse(JSON.stringify({id:u,size:s,attribute:l}))}])},e.sizeHeight=function(t,e,n){var u=t.id,c=t.type,s=t.size,l=t.attribute,d=JSON.parse(JSON.stringify({id:u,size:s,attribute:l}));n&&(s.width=(0,a.icdt_RoundNumber)(e*s.width/s.height)),s.height=(0,a.icdt_RoundNumber)(e),Object.assign(l,(0,o.icdt_Size2Attribute)(c,s,l)),(0,r.icdt_SyncSvgNodeAttribute)(window.document.getElementById(u),l),i.icdt.history.push([{type:"size",from:d,to:JSON.parse(JSON.stringify({id:u,size:s,attribute:l}))}])},e.sizeRotate=function(t,e){var n=t.id,u=t.type,c=t.size,s=t.attribute,l=JSON.parse(JSON.stringify({id:n,size:c,attribute:s}));c.rotate="number"==typeof e?(0,a.icdt_RoundNumber)(e,100):void 0,Object.assign(s,(0,o.icdt_Size2Attribute)(u,c,s)),(0,r.icdt_SyncSvgNodeAttribute)(window.document.getElementById(n),s),i.icdt.history.push([{type:"size",from:l,to:JSON.parse(JSON.stringify({id:n,size:c,attribute:s}))}])}},6428:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Init=void 0;var i=n(797),r=n(9427),o=n(5932),a=n(1785),u=n(1381),c=n(6633),s=(n(670),n(8397)),l=n(4685),d=n(4123),f=n(4897),h=n(8669),v=n(1929),p=n(2293),g=n(8947),y=n(9536);e.icdt_Init=function(t){new o.icdt_Svg(t.container,t.target),r.icdt.pointer.onchange=function(e,n,r){switch(e){case i.V_PointerType.POINTER:jQuery(t.target).css({cursor:"auto"});break;case i.V_PointerType.HAND:jQuery(t.target).css({cursor:"grab"});break;case i.V_PointerType.PEN:switch(n){case g.V_PenType.DRAW:jQuery(t.target).css({cursor:"url(assets/images/svg/icon/viet.png) 12 32,default"});break;case g.V_PenType.HIGHTLIGH:jQuery(t.target).css({cursor:"url(assets/images/svg/icon/highlight1.png) 12 32,default"})}break;case i.V_PointerType.ERASER:jQuery(t.target).css({cursor:"url(assets/images/svg/icon/gom.png) 22 22,default"});break;case i.V_PointerType.SHAPE:jQuery(t.target).css({cursor:"url(assets/images/svg/icon/point.png) 22 22,default"});break;case i.V_PointerType.TEXT:case i.V_PointerType.FOREIGNOBJECT:jQuery(t.target).css({cursor:"url(assets/images/svg/icon/textmouse.png) 22 22,default"})}},jQuery(t.container).off("mousedown.icdt-init-icon").on("mousedown.icdt-init-icon",(function(e){r.icdt.pointer.pointer_type==i.V_PointerType.HAND&&jQuery(t.target).css({cursor:"grabbing"})})).off("mouseup.icdt-init-icon").on("mouseup.icdt-init-icon",(function(e){r.icdt.pointer.pointer_type==i.V_PointerType.HAND&&jQuery(t.target).css({cursor:"grab"})})),jQuery(t.container).off("mousewheel.icdt-init").on("mousewheel.icdt-init",(function(t){var e;t.preventDefault();var n=r.icdt.screen.scale,i=.04*n*((null!==(e=t.originalEvent)&&void 0!==e?e:t).deltaY>0?1:-1);r.icdt.screen.scaleTo(n-i,(0,y.icdt_PointerScale)({x:t.clientX,y:t.clientY},1,{x:0,y:0},r.icdt.screen.offset))})),jQuery(window).off("mousedown.icdt-init").on("mousedown.icdt-init",(function(t){r.icdt.screen.actived=!!jQuery(t.target).parents(r.icdt.container).length})),jQuery(t.container).off("mouseenter.icdt-init").on("mouseenter.icdt-init",(function(t){r.icdt.screen.actived=!0})),jQuery(t.container).off("mouseleave.icdt-init").on("mouseleave.icdt-init",(function(t){r.icdt.screen.actived=!1,r.icdt.pointer.pointer_type_temp==i.V_PointerType.HAND&&(r.icdt.pointer.pointer_type_temp=i.V_PointerType.POINTER)})),jQuery(t.container).off("mousedown.icdt-init").on("mousedown.icdt-init",(function(e){0==e.button&&(t.container.includes("#")&&t.container.includes(e.target.getAttribute("id"))||t.container.includes(".")&&t.container.includes(e.target.getAttribute("class"))||t.container.includes(e.target.nodeName))&&(r.icdt.pointer.pointer_type_temp||r.icdt.pointer.pointer_type)===i.V_PointerType.POINTER&&(r.icdt.dataSelect.ids=[])})),jQuery(t.container).off("touchmove.icdt-init").on("touchmove.icdt-init",(function(t){t.preventDefault()}));var e=function(t){switch(r.icdt.pointer.pointer_type_temp||r.icdt.pointer.pointer_type){case i.V_PointerType.POINTER:(0,a.icdt_PointerComponent)(t);break;case i.V_PointerType.HAND:(0,u.icdt_HandComponent)(t);break;case i.V_PointerType.PEN:(0,l.icdt_PenComponent)(t);break;case i.V_PointerType.SHAPE:(0,c.icdt_ShapeComponent)(t);break;case i.V_PointerType.FOREIGNOBJECT:(0,h.icdt_ForeignObjectComponent)(t);break;case i.V_PointerType.IMAGE:(0,v.icdt_ImageComponent)(t);break;case i.V_PointerType.TEXT:(0,f.icdt_TextComponent)(t);break;case i.V_PointerType.ERASER:(0,d.icdt_EraserComponent)(t);break;case i.V_PointerType.INDEX:(0,p.icdt_IndexComponent)(t)}},n=!1;jQuery(t.target).off("touchstart.icdt-init").on("touchstart.icdt-init",(function(t){n=!0,e({touchEvent:t})})),jQuery(t.target).off("mousedown.icdt-init").on("mousedown.icdt-init",(function(t){1!=t.button&&(n?n=!1:e({mouseEvent:t}))})),t.iskeyboard&&(jQuery(window).off("keydown.icdt-init").on("keydown.icdt-init",(function(t){t.keyCode||t.which||t.charCode,r.icdt.screen.actived&&((t.ctrlKey||t.altKey)&&(t.stopPropagation(),t.preventDefault()),(0,s.icdt_KeyboardComponent)(t))})),jQuery(window).off("keyup.icdt-init").on("keyup.icdt-init",(function(t){t.keyCode||t.which||t.charCode,r.icdt.screen.actived&&((t.ctrlKey||t.altKey)&&(t.stopPropagation(),t.preventDefault()),(0,s.icdt_KeyboardComponent)(t))})))}},463:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_DataSelect=void 0;var i=n(2121),r=n(3331),o=n(9427),a=n(2263),u=n(6511),c=n(4255),s=function(){function t(){this._nodeName=["circle","ellipse","line","polygon","rect","text","path","foreignObject","image"],this._selected_Ids=[],this._fnChanges=[]}return Object.defineProperty(t.prototype,"nodeName",{get:function(){return this._nodeName},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"ids",{get:function(){return this._selected_Ids},set:function(t){this._selected_Ids=t,this.change(this.ids)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"nodes",{get:function(){return this._selected_Ids.map((function(t){return o.icdt.data.getNode(t)})).filter((function(t){return!t.isfake}))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onchange",{set:function(t){this._fnChanges.push(t)},enumerable:!1,configurable:!0}),t.prototype.change=function(t){var e,n,i,o,a;null===(e=window.document.getElementById(r.V_ID.RESIZE_GROUP))||void 0===e||e.remove(),null===(n=window.document.getElementById(r.V_ID.SELECT_GROUP))||void 0===n||n.remove(),null===(i=window.document.getElementById(r.V_ID.SCAN_GROUP))||void 0===i||i.remove(),null===(o=window.document.getElementById(r.V_ID.CREATE_GROUP))||void 0===o||o.remove(),null===(a=window.document.getElementById(r.V_ID.INTERACTIVE_GROUP))||void 0===a||a.remove(),jQuery('[id^="icdt-temp-"]').remove(),this._fnChanges.forEach((function(e){return e(t)}))},t.prototype.deleteNode=function(){for(var t=0,e=this._selected_Ids;t<e.length;t++){var n=e[t],i=o.icdt.data.deleteNode(n);o.icdt.history.push([{type:"delete",from:{id:i},to:{id:i}}])}o.icdt.dataSelect.ids=[]},t.prototype.groupNode=function(){var t=[];if(o.icdt.dataSelect.ids.length>=2){var e=o.icdt.data.getNode(o.icdt.dataSelect.ids[0]),n=(0,a.icdt_SvgGroup)(Math.ceil(1e9*Math.random()),void 0,e.pid?window.document.getElementById(e.pid):null),r=n.nodeId,s=n.attribute,l=n.size;o.icdt.data.node=Object.assign({id:r,type:i.V_ShapeType.GROUP,name:"G"},{size:l,attribute:s});for(var d=0,f=o.icdt.dataSelect.ids;d<f.length;d++){var h=f[d];t.push(o.icdt.data.addGroup(h,r))}}if(t.length){o.icdt.dataSelect.ids=t;var v=o.icdt.dataSelect.nodes;1==v.length?(0,u.icdt_Resize)(v[0]):v.length>1&&(0,c.icdt_Select)(v)}},t.prototype.ungroupNode=function(){for(var t=[],e=0,n=o.icdt.dataSelect.ids;e<n.length;e++){var i=n[e];t.push(o.icdt.data.unGroup(i))}if(t.length){o.icdt.dataSelect.ids=t;var r=o.icdt.dataSelect.nodes;1==r.length?(0,u.icdt_Resize)(r[0]):r.length>1&&(0,c.icdt_Select)(r)}},t}();e.icdt_DataSelect=s},8378:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_DataSlide=void 0;var i=n(2121),r=n(9427),o=n(451),a=n(5877),u=n(184),c=n(5932),s=n(6383),l=n(2866),d=n(5127),f=function(){function t(){}return t.prototype.createNodeImage=function(t,e){var n,s,d,f,h=(0,o.icdt_SvgImage)(Math.ceil(1e9*Math.random()),{size:{x:(null!==(n=null==e?void 0:e.x)&&void 0!==n?n:50)-50,y:(null!==(s=null==e?void 0:e.y)&&void 0!==s?s:50)-50,width:100,height:100},source:{type:"image",image:(0,l.extractSourceV1)(t)}}),v=h.nodeId,p=h.element,g=h.size,y=h.attribute,_=h.source;!function(t){if(t){var e=new Image;e.onload=function(){var t=(0,a.icdt_RoundNumber)(e.naturalWidth/e.naturalHeight,100);t>=1?(g.width=Math.min(e.naturalWidth,512),g.height=(0,a.icdt_RoundNumber)(g.width/t,100)):(g.height=Math.min(e.naturalHeight,512),g.width=(0,a.icdt_RoundNumber)(g.height*t,100)),g.x=(0,a.icdt_RoundNumber)(g.x+50-g.width/2,100),g.y=(0,a.icdt_RoundNumber)(g.y+50-g.height/2,100),Object.assign(y,(0,u.icdt_Size2Attribute)(i.V_ShapeType.IMAGE,g,y)),(0,c.icdt_SyncSvgNodeAttribute)(p,y),r.icdt.data.node=Object.assign({id:v,type:i.V_ShapeType.IMAGE,name:"Image"},{size:g,attribute:y,source:_})},e.onerror=function(e){console.error("ImgSrc load failed -> ".concat(t),e),null==p||p.remove()},e.src=t}}(null!==(f=null===(d=_.image)||void 0===d?void 0:d.url)&&void 0!==f?f:"")},t.prototype.createNodeIframe=function(t,e){var n,o,d=(0,s.icdt_SvgForeignObject)(Math.ceil(1e9*Math.random()),{size:{x:(null!==(n=null==e?void 0:e.x)&&void 0!==n?n:50)-50,y:(null!==(o=null==e?void 0:e.y)&&void 0!==o?o:50)-50,width:100,height:100},style:{},source:{type:"iframe",iframe:(0,l.extractSourceV1)(t)}}),f=d.nodeId,h=d.element,v=d.size,p=d.attribute,g=d.style,y=d.source;!function(){var t,e,n=(null===(e=null===(t=r.icdt.data.slide)||void 0===t?void 0:t.svg)||void 0===e?void 0:e.viewBox)||{x:0,y:0,width:100,height:100},o=(0,a.icdt_RoundNumber)(n.width/n.height,100);o>=1?(v.width=Math.min(n.width,512),v.height=(0,a.icdt_RoundNumber)(v.width/o,100)):(v.height=Math.min(n.height,512),v.width=(0,a.icdt_RoundNumber)(v.height*o,100)),v.x=(0,a.icdt_RoundNumber)(v.x+50-v.width/2,100),v.y=(0,a.icdt_RoundNumber)(v.y+50-v.height/2,100),Object.assign(p,(0,u.icdt_Size2Attribute)(i.V_ShapeType.IMAGE,v,p)),(0,c.icdt_SyncSvgNodeAttribute)(h,p),r.icdt.data.node=Object.assign({id:f,type:i.V_ShapeType.FOREIGNOBJECT,name:"ForeignObject"},{size:v,attribute:p,style:g,source:y})}()},t.prototype.createNodeEmbed=function(t,e){var n,o,d=(0,s.icdt_SvgForeignObject)(Math.ceil(1e9*Math.random()),{size:{x:(null!==(n=null==e?void 0:e.x)&&void 0!==n?n:50)-50,y:(null!==(o=null==e?void 0:e.y)&&void 0!==o?o:50)-50,width:100,height:100},style:{},source:{type:"embed",embed:Object.assign(t,(0,l.extractSourceV1)(t))}}),f=d.nodeId,h=d.element,v=d.size,p=d.attribute,g=d.style,y=d.source;!function(){var t,e,n=(null===(e=null===(t=r.icdt.data.slide)||void 0===t?void 0:t.svg)||void 0===e?void 0:e.viewBox)||{x:0,y:0,width:100,height:100},o=(0,a.icdt_RoundNumber)(n.width/n.height,100);o>=1?(v.width=Math.min(n.width,512),v.height=(0,a.icdt_RoundNumber)(v.width/o,100)):(v.height=Math.min(n.height,512),v.width=(0,a.icdt_RoundNumber)(v.height*o,100)),v.x=(0,a.icdt_RoundNumber)(v.x+50-v.width/2,100),v.y=(0,a.icdt_RoundNumber)(v.y+50-v.height/2,100),Object.assign(p,(0,u.icdt_Size2Attribute)(i.V_ShapeType.IMAGE,v,p)),(0,c.icdt_SyncSvgNodeAttribute)(h,p),r.icdt.data.node=Object.assign({id:f,type:i.V_ShapeType.FOREIGNOBJECT,name:"ForeignObject"},{size:v,attribute:p,style:g,source:y})}()},t.prototype.createNodeMedia=function(t,e){var n,s,d,f,h=(0,o.icdt_SvgImage)(Math.ceil(1e9*Math.random()),{size:{x:(null!==(n=null==e?void 0:e.x)&&void 0!==n?n:50)-50,y:(null!==(s=null==e?void 0:e.y)&&void 0!==s?s:50)-50,width:100,height:100},source:{type:"image",image:(0,l.extractSourceV1)(t.cover)}}),v=h.nodeId,p=h.element,g=h.size,y=h.attribute,_=h.source,b={click:{media:t.media}};!function(t){if(t){var e=new Image;e.onload=function(){var t=(0,a.icdt_RoundNumber)(e.naturalWidth/e.naturalHeight,100);t>=1?(g.width=Math.min(e.naturalWidth,512),g.height=(0,a.icdt_RoundNumber)(g.width/t,100)):(g.height=Math.min(e.naturalHeight,512),g.width=(0,a.icdt_RoundNumber)(g.height*t,100)),g.x=(0,a.icdt_RoundNumber)(g.x+50-g.width/2,100),g.y=(0,a.icdt_RoundNumber)(g.y+50-g.height/2,100),Object.assign(y,(0,u.icdt_Size2Attribute)(i.V_ShapeType.IMAGE,g,y)),(0,c.icdt_SyncSvgNodeAttribute)(p,y),r.icdt.data.node=Object.assign({id:v,type:i.V_ShapeType.IMAGE,name:"Image"},{size:g,attribute:y,source:_,interactive:b})},e.onerror=function(e){console.error("ImgSrc load failed -> ".concat(t),e),null==p||p.remove()},e.src=t}}(null!==(f=null===(d=_.image)||void 0===d?void 0:d.url)&&void 0!==f?f:"")},t.prototype.insert=function(t){var e;if(r.icdt.data.insertSlide(r.icdt.data.slideId,1),t.title){var n=(0,s.icdt_SvgForeignObject)(Math.ceil(1e9*Math.random()),{size:{x:100,y:100,width:800,height:150},source:{type:"html",html:{htmlContent:'<span style="font-size: 40px;">'.concat(t.title,"</span>")}}}),o=n.nodeId,a=n.size,u=n.attribute,c=n.style,l=n.source;r.icdt.data.node=Object.assign({id:o,type:i.V_ShapeType.FOREIGNOBJECT,name:"ForeignObject"},{size:a,attribute:u,style:c,source:l})}if(t.description){var f=(0,s.icdt_SvgForeignObject)(Math.ceil(1e9*Math.random()),{size:{x:100,y:300,width:600,height:300},source:{type:"html",html:{htmlContent:'<span style="font-size: 24px;">'.concat(t.description.replace(/\n/g,"<br/>"),"</span>")}}});o=f.nodeId,a=f.size,u=f.attribute,c=f.style,l=f.source,r.icdt.data.node=Object.assign({id:o,type:i.V_ShapeType.FOREIGNOBJECT,name:"ForeignObject"},{size:a,attribute:u,style:c,source:l})}(null===(e=t.media)||void 0===e?void 0:e.prompt)&&(function(){var t=(0,d.icdt_SvgRect)(Math.ceil(1e9*Math.random()),{size:{x:775,y:275,width:350,height:350},attribute:{fill:"#FFFFFF",stroke:"#E6E6E6",strokeWidth:1,strokeDasharray:1,rx:4}}),e=t.nodeId,n=t.size,o=t.attribute;r.icdt.data.node=Object.assign({id:e,type:i.V_ShapeType.RECT,name:"Rect"},{size:n,attribute:o})}(),function(){var e,n=(0,s.icdt_SvgForeignObject)(Math.ceil(1e9*Math.random()),{size:{x:800,y:300,width:300,height:300},source:{type:"html",html:{htmlContent:'<span style="font-size: 18px; color: #6633cc"><i>'.concat(null===(e=t.media)||void 0===e?void 0:e.prompt,"</i></span>")}}}),o=n.nodeId,a=n.size,u=n.attribute,c=n.style,l=n.source;r.icdt.data.node=Object.assign({id:o,type:i.V_ShapeType.FOREIGNOBJECT,name:"ForeignObject"},{size:a,attribute:u,style:c,source:l})}())},t}();e.icdt_DataSlide=f},26:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_DataSource=void 0;var i=n(9427),r=n(2121),o=n(1724),a=n(5932),u=n(4255),c=n(3331),s=n(6511),l=function(){function t(){var t=this;this._dataSource={slides:[],resources:[]},this._slideIdx=0,this._fnChangeSlides=[],this.getNodeAll=function(){var e,n=null===(e=t._dataSource.slides)||void 0===e?void 0:e.find((function(e,n){return n==t._slideIdx})),i=null==n?void 0:n.svg,o=function(t){var e=[];return t.filter((function(t){return!t.isdeleted})).forEach((function(t){t.type==r.V_ShapeType.GROUP?e=e.concat(o(t.nodes||[])):e.push(t.id)})),e};return o((null==i?void 0:i.nodes)||[])}}return Object.defineProperty(t.prototype,"newSlideId",{get:function(){return Math.ceil(1e9*Math.random())},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_defaultSlide",{get:function(){return JSON.parse(JSON.stringify({id:this.newSlideId,name:"Trang mới",svg:{viewBox:i.icdt.screen.frameSize,nodes:[]}}))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"get",{get:function(){var t,e=function(t){return null==t||t.filter((function(t){return t.type==r.V_ShapeType.GROUP})).forEach((function(t){var n;t.nodes=e(null===(n=t.nodes)||void 0===n?void 0:n.filter((function(t){return!t.isdeleted})))})),t=null==t?void 0:t.filter((function(t){var e,n;return t.type!=r.V_ShapeType.GROUP||(null!==(n=null===(e=t.nodes)||void 0===e?void 0:e.length)&&void 0!==n?n:0)>0})),t||[]};return null===(t=this._dataSource.slides)||void 0===t||t.forEach((function(t){var n,i;t.svg&&(t.svg.nodes=e(null===(i=null===(n=t.svg)||void 0===n?void 0:n.nodes)||void 0===i?void 0:i.filter((function(t){return!t.isdeleted}))))})),this._dataSource},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"getResource",{get:function(){var t,e=[];return null===(t=this._dataSource.slides)||void 0===t||t.forEach((function(t){var n,i,r,o,a,u,c,s,l,d,f,h,v,p,g;e.push(null===(i=null===(n=t.svg)||void 0===n?void 0:n.background)||void 0===i?void 0:i.path),null===(r=t.svg)||void 0===r||r.nodes.forEach((function(t){var n,i,r,o,a,u,c,s,l,d,f,h,v,p,g,y,_,b,m,w,x,S,M,E,k,T,N,A;e.push(null===(i=null===(n=t.source)||void 0===n?void 0:n.image)||void 0===i?void 0:i.path),e.push(null===(o=null===(r=t.source)||void 0===r?void 0:r.audio)||void 0===o?void 0:o.path),e.push(null===(u=null===(a=t.source)||void 0===a?void 0:a.video)||void 0===u?void 0:u.path),e.push(null===(s=null===(c=t.source)||void 0===c?void 0:c.file)||void 0===s?void 0:s.path),e.push(null===(d=null===(l=t.source)||void 0===l?void 0:l.iframe)||void 0===d?void 0:d.path),e.push(null===(h=null===(f=t.source)||void 0===f?void 0:f.track)||void 0===h?void 0:h.path),e.push(null===(y=null===(g=null===(p=null===(v=t.interactive)||void 0===v?void 0:v.show)||void 0===p?void 0:p.audio)||void 0===g?void 0:g.source)||void 0===y?void 0:y.path),e.push(null===(w=null===(m=null===(b=null===(_=t.interactive)||void 0===_?void 0:_.click)||void 0===b?void 0:b.audio)||void 0===m?void 0:m.source)||void 0===w?void 0:w.path),e.push(null===(E=null===(M=null===(S=null===(x=t.interactive)||void 0===x?void 0:x.click)||void 0===S?void 0:S.image)||void 0===M?void 0:M.source)||void 0===E?void 0:E.path),e.push(null===(A=null===(N=null===(T=null===(k=t.interactive)||void 0===k?void 0:k.click)||void 0===T?void 0:T.video)||void 0===N?void 0:N.source)||void 0===A?void 0:A.path)})),e.push(null===(a=null===(o=t.test)||void 0===o?void 0:o.audiotrue)||void 0===a?void 0:a.path),e.push(null===(c=null===(u=t.test)||void 0===u?void 0:u.audiofalse)||void 0===c?void 0:c.path),e.push(null===(l=null===(s=t.test)||void 0===s?void 0:s.effecttrue)||void 0===l?void 0:l.path),e.push(null===(f=null===(d=t.test)||void 0===d?void 0:d.effectfalse)||void 0===f?void 0:f.path),e.push(null===(v=null===(h=t.test)||void 0===h?void 0:h.icontrue)||void 0===v?void 0:v.path),e.push(null===(g=null===(p=t.test)||void 0===p?void 0:p.iconfalse)||void 0===g?void 0:g.path)})),e.filter((function(t){return t})).map((function(t){return t.replace(/(\?|\#)[^\?\#]+/g,"").toLowerCase()})).filter((function(t,e,n){return n.indexOf(t)==e}))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"set",{set:function(t){this._dataSource=t,this._dataSource.slides||(this._dataSource.slides=[]),this._dataSource.slides.length||(this._slideIdx=0,this._dataSource.slides.push(JSON.parse(JSON.stringify(this._defaultSlide)))),(0,a.icdt_SvgRenew)(),this.changeSlide(this.slides,this.slideIdx,this._dataSource.slides.length,this.slide)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dataSource",{get:function(){var t,e=function(t){return null==t||t.filter((function(t){return t.type==r.V_ShapeType.GROUP})).forEach((function(t){var n;t.nodes=e(null===(n=t.nodes)||void 0===n?void 0:n.filter((function(t){return!t.isdeleted})))})),t=null==t?void 0:t.filter((function(t){var e,n;return t.type!=r.V_ShapeType.GROUP||(null!==(n=null===(e=t.nodes)||void 0===e?void 0:e.length)&&void 0!==n?n:0)>0})),t||[]};return null===(t=this._dataSource.slides)||void 0===t||t.forEach((function(t){var n,i;t.svg&&(t.svg.nodes=e(null===(i=null===(n=t.svg)||void 0===n?void 0:n.nodes)||void 0===i?void 0:i.filter((function(t){return!t.isdeleted}))))})),this._dataSource.resources=this.getResource,this._dataSource},set:function(t){this._dataSource=t,this._dataSource.slides||(this._dataSource.slides=[]),this._dataSource.slides.length||(this._slideIdx=0,this._dataSource.slides.push(JSON.parse(JSON.stringify(this._defaultSlide)))),(0,a.icdt_SvgRenew)(),this.changeSlide(this.slides,this.slideIdx,this._dataSource.slides.length,this.slide)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slideId",{get:function(){var t,e;return null!==(e=null===(t=this.slide)||void 0===t?void 0:t.id)&&void 0!==e?e:0},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slideIdx",{get:function(){return this._slideIdx},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slide",{get:function(){var t,e=this;return null===(t=this._dataSource.slides)||void 0===t?void 0:t.find((function(t,n){return n==e._slideIdx}))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slides",{get:function(){return this._dataSource.slides||[]},enumerable:!1,configurable:!0}),t.prototype.backSlide=function(){this._slideIdx>0&&(this._slideIdx-=1,this.openSlide(void 0,this._slideIdx))},t.prototype.nextSlide=function(){var t,e;this._slideIdx<(null!==(e=null===(t=this._dataSource.slides)||void 0===t?void 0:t.length)&&void 0!==e?e:0)-1&&(this._slideIdx+=1,this.openSlide(void 0,this._slideIdx))},t.prototype.refreshSlide=function(){(0,a.icdt_SvgRenew)(),(0,o.icdt_RenderComponent)(this.slide)},t.prototype.openSlide=function(t,e){var n,r,u,c,s,l,d,f,h,v;if(t){for(var p=0,g=null!==(r=null===(n=this._dataSource.slides)||void 0===n?void 0:n.length)&&void 0!==r?r:0;p<g;p++)if((null!==(u=this._dataSource.slides)&&void 0!==u?u:[])[p].id==t){this._slideIdx=p;break}}else e&&e>=0&&e<(null!==(s=null===(c=this._dataSource.slides)||void 0===c?void 0:c.length)&&void 0!==s?s:0)?this._slideIdx=null!=e?e:0:(this._slideIdx=0,(null===(l=this._dataSource.slides)||void 0===l?void 0:l.length)||(this._dataSource.slides=[JSON.parse(JSON.stringify(this._defaultSlide))]));(0,a.icdt_SvgRenew)(),(null===(f=null===(d=this.slide)||void 0===d?void 0:d.svg)||void 0===f?void 0:f.viewBox)&&(i.icdt.screen.frameSize=this.slide.svg.viewBox),(0,o.icdt_RenderComponent)(this.slide),this.changeSlide(this.slides,this.slideIdx,null!==(v=null===(h=this._dataSource.slides)||void 0===h?void 0:h.length)&&void 0!==v?v:0,this.slide)},t.prototype.addSlide=function(){var t,e,n;null===(t=this._dataSource.slides)||void 0===t||t.push(this._defaultSlide),this._slideIdx=(null!==(n=null===(e=this._dataSource.slides)||void 0===e?void 0:e.length)&&void 0!==n?n:0)-1,this.openSlide(void 0,this._slideIdx)},t.prototype.tryReplaceSlide=function(t,e,n){var i,r,o,a,u,c=null===(i=this._dataSource.slides)||void 0===i?void 0:i.find((function(e){return e.id==t}));if(!n||!c||(null===(r=null==c?void 0:c.svg)||void 0===r?void 0:r.nodes.filter((function(t){return!t.isdeleted})).length))return this.insertSlide(t,e,n);var s=null!==(a=null===(o=this._dataSource.slides)||void 0===o?void 0:o.indexOf(c))&&void 0!==a?a:0;null===(u=this._dataSource.slides)||void 0===u||u.splice(s,1,n),this._slideIdx=s,this.openSlide(void 0,this._slideIdx)},t.prototype.insertSlide=function(t,e,n){var r,o,a,u,c,s,l=null!==(o=null===(r=this._dataSource.slides)||void 0===r?void 0:r.find((function(e){return e.id==t})))&&void 0!==o?o:this._defaultSlide,d=(null!==(u=null===(a=this._dataSource.slides)||void 0===a?void 0:a.indexOf(l))&&void 0!==u?u:0)+e;n?(n.id=this.newSlideId,n.code=void 0,n.name||(n.name="Trang mới"),(null===(c=n.svg)||void 0===c?void 0:c.viewBox)||n.svg&&(n.svg.viewBox=i.icdt.screen.frameSize)):n=this._defaultSlide,null===(s=this._dataSource.slides)||void 0===s||s.splice(d,0,n),this._slideIdx=d,this.openSlide(void 0,this._slideIdx)},t.prototype.copySlide=function(t){var e,n,i,r,o,a,u,c=null!==(n=null===(e=this._dataSource.slides)||void 0===e?void 0:e.find((function(e){return e.id==t})))&&void 0!==n?n:this._defaultSlide,s=(null!==(r=null===(i=this._dataSource.slides)||void 0===i?void 0:i.indexOf(c))&&void 0!==r?r:0)+1,l=Object.assign(JSON.parse(JSON.stringify(c)),{id:this.newSlideId,code:void 0,name:"".concat(c.name," + (Copy)")});null===(o=this._dataSource.slides)||void 0===o||o.splice(s,0,l),this.changeSlide(this.slides,this.slideIdx,null!==(u=null===(a=this._dataSource.slides)||void 0===a?void 0:a.length)&&void 0!==u?u:0,this.slide)},t.prototype.moveSlide=function(t,e){var n,i,r,o,a,u,c=null!==(i=null===(n=this._dataSource.slides)||void 0===n?void 0:n.find((function(e){return e.id==t})))&&void 0!==i?i:this._defaultSlide,s=null!==(o=null===(r=this._dataSource.slides)||void 0===r?void 0:r.indexOf(c))&&void 0!==o?o:0;null===(a=this._dataSource.slides)||void 0===a||a.splice(s+e,0,null===(u=this._dataSource.slides)||void 0===u?void 0:u.splice(s,1)[0])},t.prototype.deleteSlide=function(t){var e,n,i,r,o,a,u,c,s=null!==(n=null===(e=this._dataSource.slides)||void 0===e?void 0:e.find((function(e){return e.id==t})))&&void 0!==n?n:this._defaultSlide,l=null!==(r=null===(i=this._dataSource.slides)||void 0===i?void 0:i.indexOf(s))&&void 0!==r?r:0;null===(o=this._dataSource.slides)||void 0===o||o.splice(l,1),(null===(a=this._dataSource.slides)||void 0===a?void 0:a.length)?l<this._slideIdx?(--this._slideIdx,this.changeSlide(this.slides,this.slideIdx,null!==(c=null===(u=this._dataSource.slides)||void 0===u?void 0:u.length)&&void 0!==c?c:0,this.slide)):l==this._slideIdx&&(--this._slideIdx,this.openSlide(void 0,this._slideIdx)):this.addSlide()},t.prototype.deleteSlide1=function(t){var e,n,i,r,o,a,u=null!==(n=null===(e=this._dataSource.slides)||void 0===e?void 0:e.find((function(e){return e.id==t})))&&void 0!==n?n:this._defaultSlide,c=null!==(r=null===(i=this._dataSource.slides)||void 0===i?void 0:i.indexOf(u))&&void 0!==r?r:0;if(u.isdeleted=!0,null===(a=null===(o=this._dataSource.slides)||void 0===o?void 0:o.filter((function(t){return!t.isdeleted})))||void 0===a?void 0:a.length){for(var s=!0;u.isdeleted;)s?c++:c--,this._dataSource.slides[c]?u=this._dataSource.slides[c]:s=!s;this.openSlide(u.id)}else this.addSlide()},Object.defineProperty(t.prototype,"onChangeSlide",{set:function(t){this._fnChangeSlides.push(t)},enumerable:!1,configurable:!0}),t.prototype.changeSlide=function(t,e,n,i){this._fnChangeSlides.forEach((function(r){return r(t,e,n,i)}))},Object.defineProperty(t.prototype,"node",{set:function(t){var e,n,r=this,a=null===(e=this._dataSource.slides)||void 0===e?void 0:e.find((function(t,e){return e==r._slideIdx})),u=null==a?void 0:a.svg;(null==u?void 0:u.nodes)&&(null==u||u.nodes.push(t)),i.icdt.history.push([{type:"add",from:{id:t.id},to:{id:t.id}}]),(0,o.icdt_RenderComponent)(this.slide,null===(n=this.slide)||void 0===n?void 0:n.id)},enumerable:!1,configurable:!0}),t.prototype.findNode=function(t){var e,n,i,r,o,a,u=this,c=null===(e=this._dataSource.slides)||void 0===e?void 0:e.find((function(t,e){return e==u._slideIdx})),s=null==c?void 0:c.svg,l=function(e,n){var i=null==e?void 0:e.find((function(e){return e.id==t}));if(i)return i.pid=n,i;for(var r=0,o=e.length||0;r<o&&!i&&!(i=l(e[r].nodes||[],e[r].id));)r++;return i},d=l((null==s?void 0:s.nodes)||[]);return d?(d.style=null!==(n=d.style)&&void 0!==n?n:{},d.source=null!==(i=d.source)&&void 0!==i?i:{},d.animate=null!==(r=d.animate)&&void 0!==r?r:{},d.interactive=null!==(o=d.interactive)&&void 0!==o?o:{},d.variable=null!==(a=d.variable)&&void 0!==a?a:{},d):{id:0,size:{x:0,y:0,width:0,height:0},attribute:{},isfake:!0}},t.prototype.getNode=function(t){var e,n=this,i=null===(e=this._dataSource.slides)||void 0===e?void 0:e.find((function(t,e){return e==n._slideIdx})),o=null==i?void 0:i.svg,a=function(e){var n,i,o,u,c,s=(null==e?void 0:e.find((function(e){return e.id==t})))||function(t){for(var e,n,i,r,o,u=null,c=0,s=t.length||0;c<s&&!u;){if(u=a(t[c].nodes)){u.pid=t[c].id;break}c++}return u&&(u.style=null!==(e=u.style)&&void 0!==e?e:{},u.source=null!==(n=u.source)&&void 0!==n?n:{},u.animate=null!==(i=u.animate)&&void 0!==i?i:{},u.interactive=null!==(r=u.interactive)&&void 0!==r?r:{},u.variable=null!==(o=u.variable)&&void 0!==o?o:{}),u}((null==e?void 0:e.filter((function(t){return t.type==r.V_ShapeType.GROUP})))||[]);return s&&(s.style=null!==(n=s.style)&&void 0!==n?n:{},s.source=null!==(i=s.source)&&void 0!==i?i:{},s.animate=null!==(o=s.animate)&&void 0!==o?o:{},s.interactive=null!==(u=s.interactive)&&void 0!==u?u:{},s.variable=null!==(c=s.variable)&&void 0!==c?c:{}),s};return a((null==o?void 0:o.nodes)||[])||{id:null,pid:null,type:null,element:document.createElement("div"),size:{x:0,y:0,width:0,height:0,points:[]},attribute:{},style:{},source:{},animate:{},interactive:{},variable:{},isfake:!0,isdeleted:!1,nodes:[]}},t.prototype.getNodeInArea=function(t,e,n,i,o){var a,u=this,c=null===(a=this._dataSource.slides)||void 0===a?void 0:a.find((function(t,e){return e==u._slideIdx})),s=null==c?void 0:c.svg,l=function(a){var u=[];return a.filter((function(t){return!t.isdeleted})).forEach((function(a){a.type==r.V_ShapeType.GROUP?u=u.concat(l(a.nodes||[])):t>a.size.x||e>a.size.y||n<a.size.x+a.size.width||i<a.size.y+a.size.height||(o?a.type==o&&u.push(a.id):u.push(a.id))})),u};return l((null==s?void 0:s.nodes)||[])},t.prototype.getNodeOnArea=function(t,e,n,i,o){var a,u=this,c=null===(a=this._dataSource.slides)||void 0===a?void 0:a.find((function(t,e){return e==u._slideIdx})),s=null==c?void 0:c.svg,l=function(a){var u=[];return a.filter((function(t){return!t.isdeleted})).forEach((function(a){a.type==r.V_ShapeType.GROUP?u=u.concat(l(a.nodes||[])):a.size.x+a.size.width<t||a.size.y+a.size.height<e||a.size.x>n||a.size.y>i||(o?a.type==o&&u.push(a.id):u.push(a.id))})),u};return l((null==s?void 0:s.nodes)||[])},t.prototype.deleteNode=function(t,e){var n;return this.getNode(t).isdeleted=null==e||e,(0,o.icdt_RenderComponent)(this.slide),(0,o.icdt_RenderComponent)(this.slide,null===(n=this.slide)||void 0===n?void 0:n.id),t},t.prototype.unGroup=function(t){var e,n,i,r=this.getNode(t),a=Math.ceil(1e9*Math.random());return null===(n=null===(e=this.slide)||void 0===e?void 0:e.svg)||void 0===n||n.nodes.push(Object.assign(JSON.parse(JSON.stringify(r)),{id:a})),Object.assign(r,{isdeleted:!0}),(0,o.icdt_RenderComponent)(this.slide),(0,o.icdt_RenderComponent)(this.slide,null===(i=this.slide)||void 0===i?void 0:i.id),a},t.prototype.addGroup=function(t,e){var n,i=this.getNode(t),r=this.getNode(e);r.nodes=r.nodes||[];var a=Math.ceil(1e9*Math.random());return r.nodes.push(Object.assign(JSON.parse(JSON.stringify(i)),{id:a})),Object.assign(i,{isdeleted:!0}),(0,o.icdt_RenderComponent)(this.slide),(0,o.icdt_RenderComponent)(this.slide,null===(n=this.slide)||void 0===n?void 0:n.id),a},t.prototype.setNodeP=function(t,e){var n,i,r=null===(i=null===(n=this.slide)||void 0===n?void 0:n.svg)||void 0===i?void 0:i.nodes.find((function(e){return e.id==t}));r&&(r.pid=e||null)},t.prototype.bringToFront=function(t){this.bringToFrontStep(t,0)},t.prototype.sendToBack=function(t){this.sendToBackStep(t,0)},t.prototype.bringToFrontStep=function(t,e){var n,r,a,l,d,f,h,v,p,g=this;null===(r=null===(n=this.slide)||void 0===n?void 0:n.svg)||void 0===r||r.nodes.forEach((function(t,e){t.index=e+1}));var y=(null!==(d=null===(l=null===(a=this.slide)||void 0===a?void 0:a.svg)||void 0===l?void 0:l.nodes.length)&&void 0!==d?d:0)+1;t.map((function(t){var e,n,i,r;return{id:t,index:null!==(r=null===(i=null===(n=null===(e=g.slide)||void 0===e?void 0:e.svg)||void 0===n?void 0:n.nodes.find((function(e){return e.id==t})))||void 0===i?void 0:i.index)&&void 0!==r?r:0}})).sort((function(t,e){return t.index-e.index})).forEach((function(t){var n,i,r,o;e?null===(o=null===(r=g.slide)||void 0===r?void 0:r.svg)||void 0===o||o.nodes.filter((function(e,n){return e.id==t.id})).forEach((function(n){n.index=e+t.index+t.index/1e3})):null===(i=null===(n=g.slide)||void 0===n?void 0:n.svg)||void 0===i||i.nodes.filter((function(e){return e.id==t.id})).forEach((function(e){e.index=y+t.index}))})),null===(h=null===(f=this.slide)||void 0===f?void 0:f.svg)||void 0===h||h.nodes.sort((function(t,e){var n,i;return(null!==(n=t.index)&&void 0!==n?n:0)-(null!==(i=e.index)&&void 0!==i?i:0)})),(0,o.icdt_SortComponent)(this.slide),t.length<=1?(null===(v=window.document.getElementById(c.V_ID.RESIZE_GROUP))||void 0===v||v.remove(),(0,s.icdt_Resize)(i.icdt.dataSelect.nodes[0])):(null===(p=window.document.getElementById(c.V_ID.SELECT_GROUP))||void 0===p||p.remove(),(0,u.icdt_Select)(i.icdt.dataSelect.nodes))},t.prototype.sendToBackStep=function(t,e){var n,r,a,l,d,f,h=this;null===(r=null===(n=this.slide)||void 0===n?void 0:n.svg)||void 0===r||r.nodes.forEach((function(t,e){t.index=e+1})),t.map((function(t){var e,n,i,r;return{id:t,index:null!==(r=null===(i=null===(n=null===(e=h.slide)||void 0===e?void 0:e.svg)||void 0===n?void 0:n.nodes.find((function(e){return e.id==t})))||void 0===i?void 0:i.index)&&void 0!==r?r:0}})).sort((function(t,e){return t.index-e.index})).forEach((function(t){var n,i,r,o;e?null===(o=null===(r=h.slide)||void 0===r?void 0:r.svg)||void 0===o||o.nodes.filter((function(e){return e.id==t.id})).forEach((function(n){n.index=e+t.index+t.index/1e3})):null===(i=null===(n=h.slide)||void 0===n?void 0:n.svg)||void 0===i||i.nodes.filter((function(e){return e.id==t.id})).forEach((function(e){e.index=t.index/100-1}))})),null===(l=null===(a=this.slide)||void 0===a?void 0:a.svg)||void 0===l||l.nodes.sort((function(t,e){var n,i;return(null!==(n=t.index)&&void 0!==n?n:0)-(null!==(i=e.index)&&void 0!==i?i:0)})),(0,o.icdt_SortComponent)(this.slide),t.length<=1?(null===(d=window.document.getElementById(c.V_ID.RESIZE_GROUP))||void 0===d||d.remove(),(0,s.icdt_Resize)(i.icdt.dataSelect.nodes[0])):(null===(f=window.document.getElementById(c.V_ID.SELECT_GROUP))||void 0===f||f.remove(),(0,u.icdt_Select)(i.icdt.dataSelect.nodes))},t.prototype.bringToFrontArea=function(t){var e,n,r,a,l,f,h=this,v=t.map((function(t){return i.icdt.data.getNode(t)})).filter((function(t){return!t.isfake})),p=d(v),g=p.x1,y=p.y1,_=p.x2,b=p.y2,m=this.getNodeOnArea(g,y,_,b);null===(n=null===(e=this.slide)||void 0===e?void 0:e.svg)||void 0===n||n.nodes.forEach((function(t,e){t.index=e+1}));var w=m.map((function(t){var e,n,i,r;return null!==(r=null===(i=null===(n=null===(e=h.slide)||void 0===e?void 0:e.svg)||void 0===n?void 0:n.nodes.find((function(e){return e.id==t})))||void 0===i?void 0:i.index)&&void 0!==r?r:0})),x=Math.max.apply(null,w);t.forEach((function(t,e){var n,i;null===(i=null===(n=h.slide)||void 0===n?void 0:n.svg)||void 0===i||i.nodes.filter((function(e){return e.id==t})).forEach((function(t){t.index=x+(e+1)/100}))})),null===(a=null===(r=this.slide)||void 0===r?void 0:r.svg)||void 0===a||a.nodes.sort((function(t,e){var n,i;return(null!==(n=t.index)&&void 0!==n?n:0)-(null!==(i=e.index)&&void 0!==i?i:0)})),(0,o.icdt_SortComponent)(this.slide),t.length<=1?(null===(l=window.document.getElementById(c.V_ID.RESIZE_GROUP))||void 0===l||l.remove(),(0,s.icdt_Resize)(i.icdt.dataSelect.nodes[0])):(null===(f=window.document.getElementById(c.V_ID.SELECT_GROUP))||void 0===f||f.remove(),(0,u.icdt_Select)(i.icdt.dataSelect.nodes))},t.prototype.sendToBackArea=function(t){var e,n,r,a,l,f,h=this,v=t.map((function(t){return i.icdt.data.getNode(t)})).filter((function(t){return!t.isfake})),p=d(v),g=p.x1,y=p.y1,_=p.x2,b=p.y2,m=this.getNodeOnArea(g,y,_,b);null===(n=null===(e=this.slide)||void 0===e?void 0:e.svg)||void 0===n||n.nodes.forEach((function(t,e){t.index=e+1}));var w=m.map((function(t){var e,n,i,r;return null!==(r=null===(i=null===(n=null===(e=h.slide)||void 0===e?void 0:e.svg)||void 0===n?void 0:n.nodes.find((function(e){return e.id==t})))||void 0===i?void 0:i.index)&&void 0!==r?r:0})),x=Math.min.apply(null,w)-1;t.forEach((function(t,e){var n,i;null===(i=null===(n=h.slide)||void 0===n?void 0:n.svg)||void 0===i||i.nodes.filter((function(e){return e.id==t})).forEach((function(t){t.index=x+(e+1)/100}))})),null===(a=null===(r=this.slide)||void 0===r?void 0:r.svg)||void 0===a||a.nodes.sort((function(t,e){var n,i;return(null!==(n=t.index)&&void 0!==n?n:0)-(null!==(i=e.index)&&void 0!==i?i:0)})),(0,o.icdt_SortComponent)(this.slide),t.length<=1?(null===(l=window.document.getElementById(c.V_ID.RESIZE_GROUP))||void 0===l||l.remove(),(0,s.icdt_Resize)(i.icdt.dataSelect.nodes[0])):(null===(f=window.document.getElementById(c.V_ID.SELECT_GROUP))||void 0===f||f.remove(),(0,u.icdt_Select)(i.icdt.dataSelect.nodes))},t}();e.icdt_DataSource=l;var d=function(t){var e=999999,n=999999,i=-999999,r=-999999;return t.forEach((function(t){e=Math.min(e,t.size.x),n=Math.min(n,t.size.y),i=Math.max(i,t.size.x+t.size.width),r=Math.max(r,t.size.y+t.size.height)})),{x1:e,y1:n,x2:i,y2:r}}},6408:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_History=void 0;var i=n(9427),r=n(184),o=n(5932),a=function(){function t(){this._index=-1,this._dataSource=[],this.undoExecute=function(t){t.forEach((function(t){switch(t.type){case"add":i.icdt.data.deleteNode(t.from.id);break;case"edit":break;case"delete":i.icdt.data.deleteNode(t.from.id,!1);break;case"size":var e=i.icdt.data.getNode(t.from.id),n=e.id,a=e.type,u=e.size,c=e.attribute;Object.assign(u,t.from.size),Object.assign(c,(0,r.icdt_Size2Attribute)(a,u,c)),(0,o.icdt_SyncSvgNodeAttribute)(window.document.getElementById(n),c);break;case"attribute":var s=i.icdt.data.getNode(t.from.id);n=s.id,c=s.attribute,Object.assign(c,t.from.attribute),(0,o.icdt_SyncSvgNodeAttribute)(window.document.getElementById(n),c);break;case"style":var l=i.icdt.data.getNode(t.from.id),d=(n=l.id,l.style);Object.assign(null!=d?d:{},t.from.style),(0,o.icdt_SyncSvgNodeStyle)(window.document.getElementById(n),d);break;case"source":var f=i.icdt.data.getNode(t.from.id),h=(n=f.id,a=f.type,f.source);Object.assign(null!=h?h:{},t.from.source),(0,o.icdt_SyncSvgNodeSource)(window.document.getElementById(n),a,null!=h?h:{});break;case"animate":var v=i.icdt.data.getNode(t.from.id).animate;Object.assign(null!=v?v:{},t.from.animate);break;case"interactive":var p=i.icdt.data.getNode(t.from.id).interactive;Object.assign(null!=p?p:{},t.from.interactive);break;case"variable":var g=i.icdt.data.getNode(t.from.id).variable;Object.assign(null!=g?g:{},t.from.variable)}})),i.icdt.dataSelect.ids=[]},this.redoExecute=function(t){t.forEach((function(t){switch(t.type){case"add":i.icdt.data.deleteNode(t.to.id,!1);break;case"edit":break;case"delete":i.icdt.data.deleteNode(t.to.id,!0);break;case"size":var e=i.icdt.data.getNode(t.to.id),n=e.id,a=e.type,u=e.size,c=e.attribute;Object.assign(u,t.to.size),Object.assign(c,(0,r.icdt_Size2Attribute)(a,u,c)),(0,o.icdt_SyncSvgNodeAttribute)(window.document.getElementById(n),c);break;case"attribute":var s=i.icdt.data.getNode(t.to.id);n=s.id,c=s.attribute,Object.assign(c,t.to.attribute),(0,o.icdt_SyncSvgNodeAttribute)(window.document.getElementById(n),c);break;case"style":var l=i.icdt.data.getNode(t.to.id),d=(n=l.id,l.style);Object.assign(null!=d?d:{},t.to.style),(0,o.icdt_SyncSvgNodeStyle)(window.document.getElementById(n),d);break;case"source":var f=i.icdt.data.getNode(t.to.id),h=(n=f.id,a=f.type,f.source);Object.assign(null!=h?h:{},t.to.source),(0,o.icdt_SyncSvgNodeSource)(window.document.getElementById(n),a,null!=h?h:{});break;case"animate":var v=i.icdt.data.getNode(t.to.id).animate;Object.assign(null!=v?v:{},t.to.animate);break;case"interactive":var p=i.icdt.data.getNode(t.to.id).interactive;Object.assign(null!=p?p:{},t.to.interactive);break;case"variable":var g=i.icdt.data.getNode(t.to.id).variable;Object.assign(null!=g?g:{},t.to.variable)}})),i.icdt.dataSelect.ids=[]},this._fnChanges=[],this._index=-1,this._dataSource=[]}return Object.defineProperty(t.prototype,"index",{get:function(){return this._index},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"total",{get:function(){return this._dataSource.length},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dataSource",{get:function(){return this._dataSource},enumerable:!1,configurable:!0}),t.prototype.renew=function(){this._index=-1,this._dataSource=[],this.change()},t.prototype.push=function(t){this._index<0?(this._index=0,this._dataSource.length=0,this._dataSource[this._index]={data:t}):(this._index<this._dataSource.length-1&&this._dataSource.splice(this._index+1,this._dataSource.length-this._index-1),this._index++,this._dataSource.push({data:t})),this.change()},t.prototype.undo=function(){if(!(this._index<0)){var t=this._dataSource[this._index];this.undoExecute(t.data),this._index--,this.change()}},t.prototype.redo=function(){if(!(this._index>=this._dataSource.length-1)){this._index++;var t=this._dataSource[this._index];this.redoExecute(t.data),this.change()}},Object.defineProperty(t.prototype,"onchange",{set:function(t){this._fnChanges.push(t)},enumerable:!1,configurable:!0}),t.prototype.change=function(){var t=this;this._fnChanges.forEach((function(e){return e(t.index,t.total)}))},t}();e.icdt_History=a},4634:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Screen_MoKam=void 0;var i=n(5877),r=n(5932),o=function(){function t(){this._x=0,this._y=0,this._width=0,this._height=0,this._scale=1,this._dislocation={x:0,y:0},this._offset={x:0,y:0},this._svgSize={x:0,y:0,width:0,height:0},this._svgViewBox={x:0,y:0,width:0,height:0},this._frameSize={x:0,y:0,width:1280,height:720},this._actived=!1,this._fnZoomChanges=[]}return Object.defineProperty(t.prototype,"actived",{get:function(){return this._actived},set:function(t){this._actived=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"get",{get:function(){return{x:this._frameSize.x,y:this._frameSize.y,w:this._frameSize.width,h:this._frameSize.height,width:this._frameSize.width,height:this._frameSize.height}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"set",{set:function(t){var e,n;this._frameSize.width=null!==(e=null==t?void 0:t.width)&&void 0!==e?e:1080,this._frameSize.height=null!==(n=null==t?void 0:t.height)&&void 0!==n?n:1080,this.zoomTo="fit"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return this._width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this._height},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"scale",{get:function(){return this._scale},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dislocation",{get:function(){return this._dislocation},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"offset",{get:function(){return this._offset},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"svgSize",{get:function(){return this._svgSize},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"svgViewBox",{get:function(){return this._svgViewBox},set:function(t){this._svgViewBox=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"frameSize",{get:function(){return this._frameSize},set:function(t){this._frameSize.x=t.x,this._frameSize.y=t.y,this._frameSize.width=t.width,this._frameSize.height=t.height,this.reset()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"screen",{set:function(t){this._offset=t.offset,this._width=t.width,this._height=t.height,this.reset()},enumerable:!1,configurable:!0}),t.prototype.reset=function(){this.scaleTo(this._scale,void 0,!0)},t.prototype.scaleTo=function(t,e,n){if(!(t<.01||t>100)){if(e=null!=e?e:{x:this._width/2,y:this._height/2},n)this._dislocation.x=this._width/t/2-e.x,this._dislocation.y=this._height/t/2-e.y,this._dislocation.x+=(this._width-this._frameSize.width)/2,this._dislocation.y+=(this._height-this._frameSize.height)/2;else{var r={x:Math.max(0,Math.min((0,i.icdt_RoundNumber)(e.x/this._width,1e3),1)),y:Math.max(0,Math.min((0,i.icdt_RoundNumber)(e.y/this._height,1e3),1))},o={x:(this._width/t-this._width/this._scale)*r.x,y:(this._height/t-this._height/this._scale)*r.y};this._dislocation.x+=o.x,this._dislocation.y+=o.y}this._scale=t,this.change(),this.zoomChange(this.scale)}},Object.defineProperty(t.prototype,"zoomTo",{set:function(t){"fit"==t?this.scaleTo(Math.min((this._width-80)/this._frameSize.width,(this._height-80)/this._frameSize.height),void 0,!0):"number"==typeof t&&this.scaleTo(t/100,void 0,!0)},enumerable:!1,configurable:!0}),t.prototype.init=function(){return{svgViewBox:this.svgViewBox,svgSize:this.svgSize}},t.prototype.move=function(t,e){this._dislocation.x=t.x+e.x/this._scale,this._dislocation.y=t.y+e.y/this._scale,this._svgViewBox.x=-this._dislocation.x,this._svgViewBox.y=-this._dislocation.y,this.refScreen()},t.prototype.change=function(){this._svgSize.x=this._x,this._svgSize.y=this._y,this._svgSize.width=this._width,this._svgSize.height=this._height,this._svgViewBox.x=-this._dislocation.x,this._svgViewBox.y=-this._dislocation.y,this._svgViewBox.width=this._width/this._scale,this._svgViewBox.height=this._height/this._scale,this.refScreen()},t.prototype.refScreen=function(){(0,r.icdt_SyncSvgStyle)()},Object.defineProperty(t.prototype,"onZoomChange",{set:function(t){this._fnZoomChanges.push(t)},enumerable:!1,configurable:!0}),t.prototype.zoomChange=function(t){this._fnZoomChanges.forEach((function(e){return e(t)}))},t}();e.icdt_Screen_MoKam=o},194:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_SvgNodeAttribute_TrumCuoiXaHoi=void 0;var i=n(7645),r=function(){function t(){this._fill="#D9D9D9",this._stroke="#AAAAAA",this._strokeWidth=1,this._strokeLinecap="round",this._strokeLinejoin="round",this._fontFamily=void 0,this._fontSize=20,this._textLength=void 0,this._fnChangeFills=[],this._fnChangeStrokes=[],this._fnChangeStrokeWidths=[],this.loadConfig()}return t.prototype.loadConfig=function(){var t=this;(0,i.LocalStorage_GetConfig)({callback:function(e){t._fill=(null==e?void 0:e.fill)||t._fill,t._stroke=(null==e?void 0:e.stroke)||t._stroke,t._strokeWidth=(null==e?void 0:e.strokeWidth)||t._strokeWidth,t._strokeLinecap=(null==e?void 0:e.strokeLinecap)||t._strokeLinecap,t._strokeLinejoin=(null==e?void 0:e.strokeLinejoin)||t._strokeLinejoin,t.changeFill(t.fill),t.changeStroke(t.stroke),t.changeStrokeWidth(t.strokeWidth)}})},t.prototype.saveConfig=function(){(0,i.LocalStorage_SetConfig)({params:{fill:this._fill,stroke:this._stroke,strokeWidth:this._strokeWidth,strokeLinecap:this._strokeLinecap,strokeLinejoin:this._strokeLinejoin}})},Object.defineProperty(t.prototype,"fill",{get:function(){return this._fill},set:function(t){this._fill=t,this.changeFill(this.fill)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"stroke",{get:function(){return this._stroke},set:function(t){this._stroke=t,this.changeStroke(this.stroke)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"strokeWidth",{get:function(){return this._strokeWidth},set:function(t){this._strokeWidth=t,this.changeStrokeWidth(this.strokeWidth)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"strokeLinecap",{get:function(){return this._strokeLinecap},set:function(t){this._strokeLinecap=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"strokeLinejoin",{get:function(){return this._strokeLinejoin},set:function(t){this._strokeLinejoin=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fontFamily",{get:function(){return this._fontFamily},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fontSize",{get:function(){return this._fontSize},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"textLength",{get:function(){return this._textLength},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onchangefill",{set:function(t){this._fnChangeFills.push(t)},enumerable:!1,configurable:!0}),t.prototype.changeFill=function(t){this._fnChangeFills.forEach((function(e){return e(t)})),this.saveConfig()},Object.defineProperty(t.prototype,"onchangestroke",{set:function(t){this._fnChangeStrokes.push(t)},enumerable:!1,configurable:!0}),t.prototype.changeStroke=function(t){this._fnChangeStrokes.forEach((function(e){return e(t)})),this.saveConfig()},Object.defineProperty(t.prototype,"onchangestrokewidth",{set:function(t){this._fnChangeStrokeWidths.push(t)},enumerable:!1,configurable:!0}),t.prototype.changeStrokeWidth=function(t){this._fnChangeStrokeWidths.forEach((function(e){return e(t)})),this.saveConfig()},t}();e.icdt_SvgNodeAttribute_TrumCuoiXaHoi=r},2634:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Variable_TrumCuoi=void 0;var i=n(7389),r=n(7860),o=n(1493),a=function(t){return t?JSON.parse(JSON.stringify(t)):t},u=[{key:"FinishedTest",type:"boolean",value:!1,note:"Hoàn thành BKT",system:!0,readonly:!1},{key:"TotalTest",type:"number",value:0,note:"Tổng số BKT",system:!0,readonly:!1},{key:"TotalTestDidNotPass",type:"number",value:0,note:"Số BKT không vượt qua",system:!0,readonly:!1},{key:"TotalTestPassed",type:"number",value:0,note:"Số BKT đã vượt qua",system:!0,readonly:!1}],c=[],s={key:"BienSo",value:"0",type:"number",note:null,readonly:!1},l={if:[{type:"variable",variable:"BienSo",variables:null,slide:null,node:null,condition:">",operator:null,valuetype:"value",value:5}],then:[{type:"variable",variable:"BienChu",variables:null,slide:null,node:null,condition:null,operator:"=",valuetype:"value",value:"BienSo > 5"}],else:[{type:"variable",variable:"BienChu",variables:null,slide:null,node:null,condition:null,operator:"=",valuetype:"value",value:"BienSo <= 5"}],id:"57623302",idx:1,variables:["BienSo"]},d=function(){function t(){var t=this;this._data_variables=a(u).concat(a(c)),this._data_conditions=[],this.GetActionExecutings=[],this.GetActionExecuteds=[],this.FuncGetExecuteds=function(e){"function"==typeof e&&t.GetActionExecuteds.push(e)},this.OnGetActionExecuted=function(e){t.GetActionExecuteds.forEach((function(t){t(e)}))},this.SetActionExecutings=[],this.FuncSetExecutings=function(e){"function"==typeof e&&t.SetActionExecutings.push(e)},this.OnSetActionExecuting=function(e){t.SetActionExecutings.forEach((function(t){t(e)}))},this.SetActionExecuteds=[],this.FuncSetExecuteds=function(e){"function"==typeof e&&t.SetActionExecuteds.push(e)},this.OnSetActionExecuted=function(e){t.SetActionExecuteds.forEach((function(t){t(e)}));for(var n=0,i=t.getCondition(e.key)||[];n<i.length;n++){var r=i[n];r.if&&r.if.length>0&&(t.checkValueConditions(r.if)?t.setValueOperators(r.then||[]):t.setValueOperators(r.else||[]))}}}return t.prototype.renew=function(){this._data_variables=a(u).concat(a(c)),this._data_conditions=[]},Object.defineProperty(t.prototype,"totalVariable",{get:function(){return this._data_variables.length},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"totalCondition",{get:function(){return this._data_conditions.length},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"get",{get:function(){return{variables:this._data_variables||[],conditions:this._data_conditions||[]}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"set",{set:function(t){var e=this;if(t){var n,i={};"string"==typeof t?i=JSON.parse(t):"object"==typeof t&&(i=t),this._data_variables=i.variables||[],this._data_conditions=i.conditions||(n=[],e._data_variables.map((function(t){return t.change||[]})).forEach((function(t){n=n.concat(t)})),n),u.forEach((function(t){var n=e._data_variables.filter((function(e){return e.key==t.key}));n.length?n.forEach((function(e,n,i){e.type=t.type,e.readonly=t.readonly,e.system=t.system})):e._data_variables.push(t)}))}},enumerable:!1,configurable:!0}),t.prototype.getVariableTemp=function(){return a(s)},t.prototype.getConditionTemp=function(){return a(l)},t.prototype.getKeys=function(){return this._data_variables.map((function(t){return t.key})).sort((function(t,e){return t.localeCompare(e)}))},t.prototype.getVariableAll=function(){return this._data_variables.length?a((t=this._data_variables,e="key",function(n){for(var i=0,r=t.map((function(t){return t[e]})).sort();i<r.length;i++){var o=r[i];t.filter((function(t){return t[e]==o})).forEach((function(t){n.push(t)})),t=t.filter((function(t){return t[e]!=o}))}return n}([]))):a(u).concat(a(c));var t,e},t.prototype.setVariableAll=function(t){var e=this;t&&("string"==typeof t&&(t=JSON.parse(t)),"object"==typeof t&&(this._data_variables=t),u.forEach((function(t){var n=e._data_variables.filter((function(e){return e.key==t.key}));n.length?n.forEach((function(e,n,i){e.type=t.type,e.readonly=t.readonly,e.system=t.system})):e._data_variables.push(t)})))},t.prototype.getVariable=function(t){return t?a(this._data_variables.filter((function(e){return e.key==t}))[0]||{}):{}},t.prototype.setVariable=function(t,e,n){if(t){switch([null,void 0,NaN,1/0].indexOf(e)>=0&&(e=""),n||(n=(this._data_variables.filter((function(e){return e.key==t}))[0]||{}).type||null),n){case"string":"string"!=typeof e&&(e=e.toString().trim());break;case"number":"number"!=typeof e&&(e=parseFloat(e)||0);break;case"boolean":"string"==typeof e&&(e=e.toLowerCase()),"boolean"!=typeof e&&(e="1"==e||"true"==e||"yes"==e||"dung"==e)}var i=this._data_variables.filter((function(e){return e.key==t}));i.length?i.forEach((function(t,i,r){t.value=e,t.type=n})):this._data_variables.push({key:t,value:e,type:n})}},t.prototype.getValue=function(t,e){if(!t)return"";var n=this._data_variables.filter((function(e){return e.key==t}));if(n.length){var i,r=n[0]||{};switch(this.OnGetActionExecuting(r),e||(e=r.type||null),e){case"string":i=[null,void 0,NaN,1/0].indexOf(r.value)>=0?"":"string"==typeof r.value?r.value||"":r.value.toString().trim();break;case"number":i=[null,void 0,NaN,1/0].indexOf(r.value)>=0?0:"number"==typeof r.value?r.value||0:parseFloat(r.value)||0;break;case"boolean":[null,void 0,NaN,1/0].indexOf(r.value)>=0?i=!1:"boolean"==typeof r.value?i=r.value:(i=(r.value+"").toLowerCase(),i="1"==r.value||"true"==r.value||"yes"==r.value||"dung"==r.value);break;case"audio-src":i=[null,void 0,NaN,1/0].indexOf(r.value)>=0?"":r.value?'<audio controls style="width:280px;vertical-align:middle;"><source src="'.concat(r.value,'"></source></audio>'):"";break;case"video-src":i=[null,void 0,NaN,1/0].indexOf(r.value)>=0?"":r.value?'<video controls style="width:280px;vertical-align:middle;"><source src="'.concat(r.value,'"></source></video>'):"";break;case"img-src":i=[null,void 0,NaN,1/0].indexOf(r.value)>=0?"":r.value?'<img style="width:100%;vertical-align:middle;" src="'.concat(r.value,'"/>'):"";break;default:i=[null,void 0,NaN,1/0].indexOf(r.value)>=0?"":r.value}return this.OnGetActionExecuted(r),i}return null},t.prototype.setValue=function(t,e,n){if(t){switch([null,void 0,NaN,1/0].indexOf(e)>=0&&(e=""),n||(n=(this._data_variables.filter((function(e){return e.key==t}))[0]||{}).type||null),n){case"string":"string"!=typeof e&&(e=e.toString().trim());break;case"number":"number"!=typeof e&&(e=parseFloat(e)||0);break;case"boolean":"string"==typeof e&&(e=e.toLowerCase()),"boolean"!=typeof e&&(e="1"==e||"true"==e||"yes"==e||"dung"==e)}var i=this._data_variables.filter((function(e){return e.key==t}));if(i.length){var r=i[0];this.OnSetActionExecuting(r),r&&(r.value=e),this.OnSetActionExecuted(r)}}},t.prototype.getConditionAll=function(){return a(this._data_conditions.sort((function(t,e){return t.idx-e.idx})))},t.prototype.setConditionAll=function(t){t&&("string"==typeof t&&(t=JSON.parse(t)),"object"==typeof t&&(this._data_conditions=t))},t.prototype.getCondition=function(t){return t?a(this._data_conditions.filter((function(e){return e.variable==t||(e.variables||[]).indexOf(t)>=0})).sort((function(t,e){return t.idx-e.idx}))):{}},t.prototype.switchCondition=function(t,e,n){switch(t){case"==":return"string"==typeof n?(n=n.toLowerCase().trim(),"string"==typeof e&&(e=e.toLowerCase().trim()),n.split(";").map((function(t){return e==t.trim()?1:0})).reduce((function(t,e){return t+e}))>0):e==n;case"!=":return"string"==typeof n?(n=n.toLowerCase().trim(),"string"==typeof e&&(e=e.toLowerCase().trim()),0==n.split(";").map((function(t){return e==t.trim()?1:0})).reduce((function(t,e){return t+e}))):e!=n;case">=":return e>=n;case"<=":return e<=n;case">":return e>n;case"<":return e<n;case"∈":return n=(n+"").toLowerCase().trim(),e=(e+"").toLowerCase().trim(),n.split(";").map((function(t){return e.indexOf(t.trim())>=0?1:0})).reduce((function(t,e){return t+e}))>0;case"∉":return n=(n+"").toLowerCase().trim(),e=(e+"").toLowerCase().trim(),0==n.split(";").map((function(t){return e.indexOf(t.trim())>=0?1:0})).reduce((function(t,e){return t+e}));default:return!1}},t.prototype.switchOperator=function(t,e,n){switch(t){case"+":return e+n;case"-":return e-n;case"*":return e*n;case"/":return e/n;case"=":return n;case"=!":return!n;case"==":return e==n;case"!=":return e!=n}},t.prototype.switchFormula=function(t,e){switch(t){case"sum":return e.reduce((function(t,e){return t+e}));case"sub":return e.reduce((function(t,e){return t-e}));case"pro":return e.reduce((function(t,e){return t*e}));case"div":return e.reduce((function(t,e){return t/e}));case"avg":var n=e.reduce((function(t,e){return t+e}))/(e.length||1);return Math.round(1e4*(n+Number.EPSILON))/1e4;case"min":return Math.min.apply(null,e);case"max":return Math.max.apply(null,e);case"and":return e.reduce((function(t,e){return t&&e}));case"or":return e.reduce((function(t,e){return t||e}));default:return 0}},t.prototype.switchValueType_Condition=function(t){switch(t.valuetype){case"value":return this.switchCondition(t.condition,this.getValue(t.variable),t.value);case"variable":return this.switchCondition(t.condition,this.getValue(t.variable),this.getValue(t.value));default:return 0}},t.prototype.switchValueType_Operator=function(t){var e=this;switch(t.valuetype){case"value":return this.switchOperator(t.operator,this.getValue(t.variable),t.value);case"variable":return this.switchOperator(t.operator,this.getValue(t.variable),this.getValue(t.value));case"variables":var n=this.switchFormula(t.valueformula,t.value.map((function(t){return e.getValue(t)})));return this.switchOperator(t.operator,this.getValue(t.variable),n)}},t.prototype.checkValueCondition=function(t){return this.switchValueType_Condition(t)},t.prototype.getValueOperator=function(t){return this.switchValueType_Operator(t)},t.prototype.setValueOperator=function(t){(null==t?void 0:t.variable)&&this.setValue(t.variable,this.getValueOperator(t))},t.prototype.checkValueConditions=function(t){var e=this;return 0==t.map((function(t){switch(t.type){case"variable":return e.switchValueType_Condition(t)?0:1;case"variables":return 0==t.variables.map((function(n){return e.switchValueType_Condition(Object.assign(a(t),{variable:n}))?0:1})).reduce((function(t,e){return t+e}))?0:1;default:return 0}})).reduce((function(t,e){return(null!=t?t:0)+(null!=e?e:0)}))},t.prototype.setValueOperators=function(t){for(var e,n=0,u=t;n<u.length;n++){var c=u[n];switch(c.type){case"variable":this.setValue(c.variable,this.getValueOperator(c));break;case"variables":for(var s=0,l=c.variables;s<l.length;s++){var d=l[s];this.setValue(d,this.getValueOperator(Object.assign(a(c),{variable:d})))}break;case"slide":i.icdt_Run.runSlide(void 0,void 0,c.slide);break;case"node":(0,o.icdt_Run_Interactive_TriggerShow)({id:c.node,nodeStatus:i.icdt_Run.nodeStatus,slideStatus:i.icdt_Run.slideStatus});var f=i.icdt_Run.findNode(c.node);(null===(e=null==f?void 0:f.interactive)||void 0===e?void 0:e.click)&&(0,r.icdt_Run_Interactive_NodeClick)(f,i.icdt_Run.nodeStatus,i.icdt_Run.slideStatus)}}},t.prototype.FuncGetExecutings=function(t){"function"==typeof t&&this.GetActionExecutings.push(t)},t.prototype.OnGetActionExecuting=function(t){this.GetActionExecutings.forEach((function(e){e(t)}))},t}();e.icdt_Variable_TrumCuoi=d},670:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_PointerEvents=e.icdt_PointerEvent=void 0;var i=n(797),r=n(9427),o=n(3106),a=n(9536);e.icdt_PointerEvent=function(t,e,n,i,r){},e.icdt_PointerEvents=function(t,e,n,u,c){var s,l,d,f=null,h=0,v=0;t.mouseEvent?(f=t.mouseEvent.target,h=t.mouseEvent.offsetX,v=t.mouseEvent.offsetY):t.touchEvent&&(f=t.touchEvent.target,t.touchEvent.touches.length&&(h=t.touchEvent.touches[0].clientX,v=t.touchEvent.touches[0].clientY));var p=null!=n?n:r.icdt.screen.scale,g=null!=u?u:r.icdt.screen.dislocation,y=null!=c?c:r.icdt.screen.offset,_=function(){},b=new o.icdt_PointerHandle({start:null!==(s=null==e?void 0:e.start)&&void 0!==s?s:_,move:null!==(l=null==e?void 0:e.move)&&void 0!==l?l:_,end:null!==(d=null==e?void 0:e.end)&&void 0!==d?d:_});t.mouseEvent?b.start((0,a.icdt_PointerScale)({x:h,y:v},p,g,{x:0,y:0})):t.touchEvent&&b.start((0,a.icdt_PointerScale)({x:h,y:v},p,g,y));var m=function(t){b.move((0,a.icdt_PointerScale)({x:t.clientX,y:t.clientY},p,g,y))},w=function(t){b.end(),[i.V_PointerType.SHAPE,i.V_PointerType.FOREIGNOBJECT,i.V_PointerType.IMAGE,i.V_PointerType.TEXT].includes(r.icdt.pointer.pointer_type)&&(t.shiftKey||(r.icdt.pointer.pointer_type=i.V_PointerType.POINTER))},x=function(t){t.touches.length&&m({clientX:t.touches[0].clientX,clientY:t.touches[0].clientY})},S=function(t){w({shiftKey:t.shiftKey,ctrlKey:t.ctrlKey,altKey:t.altKey}),window.removeEventListener("touchmove",x,!1),window.removeEventListener("touchend",S,!1)},M=function(t){0==t.button&&m({clientX:t.clientX,clientY:t.clientY})},E=function(t){0==t.button&&(w({shiftKey:t.shiftKey,ctrlKey:t.ctrlKey,altKey:t.altKey}),window.removeEventListener("mousemove",M,!1),window.removeEventListener("mouseup",E,!1))};t.mouseEvent?(window.addEventListener("mousemove",M,!1),window.addEventListener("mouseup",E,!1)):t.touchEvent&&(window.addEventListener("touchmove",x,!1),window.addEventListener("touchend",S,!1),null==f||f.addEventListener("touchmove",(function(t){t.preventDefault()})))}},3106:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_PointerHandle=void 0;var n=function(){function t(t){this._points=[],this._options=t}return t.prototype.start=function(t){this._points.length=0,this._points.push([t.x,t.y]),this._options.start(t)},t.prototype.move=function(t){this._points.push([t.x,t.y]),this._options.move(t,this._points)},t.prototype.end=function(){this._options.end(this.offsetLast,this._points)},Object.defineProperty(t.prototype,"offsetFirst",{get:function(){return this._points.length>=1?{x:(t=this._points[0])[0],y:t[1]}:{x:0,y:0};var t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"offsetLast",{get:function(){return this._points.length>=1?{x:(t=this._points[this._points.length-1])[0],y:t[1]}:{x:0,y:0};var t},enumerable:!1,configurable:!0}),t}();e.icdt_PointerHandle=n},9536:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_PointerScale=void 0;var i=n(5877);e.icdt_PointerScale=function(t,e,n,r){return t.x-=r.x,t.y-=r.y,t.x/=e,t.y/=e,t.x-=n.x,t.y-=n.y,t.x=(0,i.icdt_RoundNumber)(t.x),t.y=(0,i.icdt_RoundNumber)(t.y),t}},2140:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_PointerType_ChiChiChoCho=void 0;var i=n(797),r=n(2121),o=n(8947),a=function(){function t(){this._fnChangePointerTypes=[],this._fnChangePointerTypeTemps=[],this._fnChangePenTypes=[],this._fnChangeShapeTypes=[],this._fnChangePolygonTypes=[],this._fnChanges=[],this._pointer_type=0,this._pointer_type_temp=0,this._pen_type=0,this._shape_type=0,this._polygon_type=0}return t.prototype.setPointer_nochange=function(t,e,n){if(this._pointer_type=t,e)switch(t){case i.V_PointerType.PEN:this._pen_type=e;break;case i.V_PointerType.SHAPE:this._shape_type=e,n&&e===r.V_ShapeType.POLYGON&&(this._polygon_type=n)}},Object.defineProperty(t.prototype,"pointer_type",{get:function(){return this._pointer_type},set:function(t){switch(this._pointer_type=t,t){case i.V_PointerType.PEN:this._pen_type||(this._pen_type=o.V_PenType.DRAW);break;case i.V_PointerType.SHAPE:this._shape_type||(this._shape_type=r.V_ShapeType.RECT)}this.changePointerType(this.pointer_type),this.change(this.pointer_type)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"pointer_type_temp",{get:function(){return this._pointer_type_temp},set:function(t){this._pointer_type_temp=t,this.changePointerTypeTemp(this.pointer_type),this.change(this.pointer_type_temp)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"pen_type",{get:function(){return this._pen_type},set:function(t){this._pen_type=t,this.changePenType(this.pointer_type,this.pen_type),this.change(this.pointer_type,this.pen_type)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"shape_type",{get:function(){return this._shape_type},set:function(t){this._shape_type=t,this.changeShapeType(this.pointer_type,this.shape_type),this.change(this.pointer_type,this.shape_type)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"polygon_type",{get:function(){return this._polygon_type},set:function(t){this._polygon_type=t,this.changePolygonType(this.pointer_type,this.shape_type,this.polygon_type),this.change(this.pointer_type,this.shape_type,this.polygon_type)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onchangePointerType",{set:function(t){this._fnChangePointerTypes.push(t)},enumerable:!1,configurable:!0}),t.prototype.changePointerType=function(t,e,n){this._fnChangePointerTypes.forEach((function(i){return i(t,e,n)}))},Object.defineProperty(t.prototype,"onchangePointerTypeTemp",{set:function(t){this._fnChangePointerTypeTemps.push(t)},enumerable:!1,configurable:!0}),t.prototype.changePointerTypeTemp=function(t,e,n){this._fnChangePointerTypeTemps.forEach((function(i){return i(t,e,n)}))},Object.defineProperty(t.prototype,"onchangePenType",{set:function(t){this._fnChangePenTypes.push(t)},enumerable:!1,configurable:!0}),t.prototype.changePenType=function(t,e,n){this._fnChangePenTypes.forEach((function(i){return i(t,e,n)}))},Object.defineProperty(t.prototype,"onchangeShapeType",{set:function(t){this._fnChangeShapeTypes.push(t)},enumerable:!1,configurable:!0}),t.prototype.changeShapeType=function(t,e,n){this._fnChangeShapeTypes.forEach((function(i){return i(t,e,n)}))},Object.defineProperty(t.prototype,"onchangePolygonType",{set:function(t){this._fnChangePolygonTypes.push(t)},enumerable:!1,configurable:!0}),t.prototype.changePolygonType=function(t,e,n){this._fnChangePolygonTypes.forEach((function(i){return i(t,e,n)}))},Object.defineProperty(t.prototype,"onchange",{set:function(t){this._fnChanges.push(t)},enumerable:!1,configurable:!0}),t.prototype.change=function(t,e,n){this._fnChanges.forEach((function(i){return i(t,e,n)}))},t}();e.icdt_PointerType_ChiChiChoCho=a},7389:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.syncSvg=e.icdt_Run=void 0;var i=n(3331),r=n(9427),o=n(3299),a=n(5932),u=function(){function t(){this._nodeStatus=0,this._slideStatus=0,this._slideIdx=0,this._fnChangeSlides=[]}return Object.defineProperty(t.prototype,"data",{set:function(t){this._dataSource=t.data||{},r.icdt.variable.set=t.variable||{}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"nodeStatus",{get:function(){return this._nodeStatus},enumerable:!1,configurable:!0}),t.prototype.refreshNodeStatus=function(){return this._nodeStatus=Math.floor(999999999*Math.random()),this._nodeStatus},Object.defineProperty(t.prototype,"slideStatus",{get:function(){return this._slideStatus},enumerable:!1,configurable:!0}),t.prototype.refreshSlideStatus=function(){return this._slideStatus=Math.floor(999999999*Math.random()),this._slideStatus},Object.defineProperty(t.prototype,"slideIdx",{get:function(){return this._slideIdx},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slideTotal",{get:function(){var t,e,n;return null!==(n=null===(e=null===(t=this._dataSource)||void 0===t?void 0:t.slides)||void 0===e?void 0:e.length)&&void 0!==n?n:0},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slides",{get:function(){var t;return(null===(t=this._dataSource)||void 0===t?void 0:t.slides)||[]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slide",{get:function(){var t;return((null===(t=this._dataSource)||void 0===t?void 0:t.slides)||[])[this._slideIdx]||{}},enumerable:!1,configurable:!0}),t.prototype.findNode=function(t){var e,n,i,r,o,a,u,c=this,s=null===(n=null===(e=this._dataSource)||void 0===e?void 0:e.slides)||void 0===n?void 0:n.find((function(t,e){return e==c._slideIdx})),l=null==s?void 0:s.svg,d=function(e,n){var i=null==e?void 0:e.find((function(e){return e.id==t}));if(i)return i.pid=n,i;for(var r=0,o=e.length||0;r<o&&!i&&!(i=d(e[r].nodes||[],e[r].id));)r++;return i},f=d((null==l?void 0:l.nodes)||[]);return f?(f.style=null!==(i=f.style)&&void 0!==i?i:{},f.source=null!==(r=f.source)&&void 0!==r?r:{},f.animate=null!==(o=f.animate)&&void 0!==o?o:{},f.interactive=null!==(a=f.interactive)&&void 0!==a?a:{},f.variable=null!==(u=f.variable)&&void 0!==u?u:{},f):{id:0,size:{x:0,y:0,width:0,height:0},attribute:{},isfake:!0}},t.prototype.runSlide=function(t,n,u){var c,s,l,d,f,h,v,p,g,y,_;if(this.refreshNodeStatus(),this.refreshSlideStatus(),u?(_=null===(s=null===(c=this._dataSource)||void 0===c?void 0:c.slides)||void 0===s?void 0:s.find((function(t){return t.code==u||t.id==u})))&&(this._slideIdx=(null===(d=null===(l=this._dataSource)||void 0===l?void 0:l.slides)||void 0===d?void 0:d.indexOf(_))||0):n?(_=null===(h=null===(f=this._dataSource)||void 0===f?void 0:f.slides)||void 0===h?void 0:h.find((function(t){return t.id==n})))&&(this._slideIdx=(null===(p=null===(v=this._dataSource)||void 0===v?void 0:v.slides)||void 0===p?void 0:p.indexOf(_))||0):(this._slideIdx=Math.min(Math.max(t||0,0),this.slideTotal-1),_=this.slide),_){(0,e.syncSvg)(r.icdt.container,r.icdt.svg,_,!0),null===(g=jQuery(r.icdt.svg).find("#"+i.V_ID.BACKGROUND_GROUP))||void 0===g||g.empty();var b=(0,a.icdt_SyncSvgNode4Design)(i.V_ID.BACKGROUND_GROUP,"g",void 0,r.icdt.svg);(0,a.syncBackground)(b,_),(0,o.icdt_Run_Slide)(_)}this.changeSlide(this.slides,null===(y=this.slide)||void 0===y?void 0:y.id,this.slideIdx,this.slides.length,_)},Object.defineProperty(t.prototype,"onChangeSlide",{set:function(t){this._fnChangeSlides.push(t)},enumerable:!1,configurable:!0}),t.prototype.changeSlide=function(t,e,n,i,r){this._fnChangeSlides.forEach((function(o){return o(t,e,n,i,r)}))},t}();e.icdt_Run=new u,e.syncSvg=function(t,e,n,i){var o,a,u,c,s,l=window.document.querySelector(e);l||(l=document.createElementNS("http://www.w3.org/2000/svg","svg"),null===(o=window.document.querySelector(t))||void 0===o||o.appendChild(l)),i&&(l.textContent=null);var d=null!==(u=null===(a=null==n?void 0:n.svg)||void 0===a?void 0:a.viewBox)&&void 0!==u?u:r.icdt.screen.frameSize,f=d.x,h=d.y,v=d.width,p=d.height;l.setAttributeNS(null,"viewBox",f+" "+h+" "+v+" "+p),l.setAttribute("id",e.replace("#",""));var g,y,_=null!==(c=jQuery(t).width())&&void 0!==c?c:1080,b=null!==(s=jQuery(t).height())&&void 0!==s?s:1080,m=v/p;m>=_/b?y=(g=_)/m:g=(y=b)*m,l.setAttributeNS(null,"width",g.toString()),l.setAttributeNS(null,"height",y.toString())}},7448:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.runAnimation=e.icdt_Run_Animate_Animation=void 0;var i=n(7389);e.icdt_Run_Animate_Animation=function(t,n,i){var r,o=(null!==(r=t.animate)&&void 0!==r?r:{}).value;(0,e.runAnimation)(t.id,{node:t,value:o,nodeStatus:n,slideStatus:i},(function(){}))},e.runAnimation=function(t,n,o){var a;if(n.value){var u=jQuery("#"+t).parents("g");if(u.length){var c=n.node.size;u.css("transform-origin","".concat(c.x+c.width/2,"px ").concat(c.y+c.height/2,"px"));var s,l,d,f=null!==(a=n.iteration)&&void 0!==a?a:0,h=[];(n.value||"").match(/animation((-[a-zA-Z0-9]+)+)?(\s+||\")/gm)?h.push(n.value):n.value?["top-left","top","top-right","left","right","bottom-left","bottom","bottom-right"].includes(n.value)?(h.push("animation"),h.push("animation-".concat(n.value))):(h.push("animate__animated"),h.push("animate__".concat(n.value))):(h.push("animation"),h.push("animation-fadein")),f<0?(h.push("animation-iteration-infinite"),o(),o=function(){}):f>0&&h.push("animation-iteration-"+(f+1)),s=h.join(" "),l=function(){var a;r(t),(f>0||f<0)&&u.one("animationiteration",(function(){n.slideStatus===i.icdt_Run.slideStatus||(u.data("animate-running",!1),r(t),n.slideStatus===i.icdt_Run.slideStatus&&o())})),u.one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",(function(){var a;switch(u.data("animate-running",!1),r(t),n.finish){default:case 0:case 1:break;case 2:(0,e.runAnimation)(t,{node:n.node,value:null===(a=n.node.animate)||void 0===a?void 0:a.out,nodeStatus:n.nodeStatus,slideStatus:n.slideStatus},(function(){u.addClass("hide")}))}n.slideStatus===i.icdt_Run.slideStatus&&o()})),u.attr("data-class",null!==(a=u.attr("class"))&&void 0!==a?a:""),u.addClass(s),u.data("animate-running",!0)},d=function(){u.data("animate-running")?u.one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",(function(){u.data("animate-running",!1),setTimeout((function(){l()}),100)})):l()},u.hasClass("animation")?setTimeout((function(){d()})):d()}else o()}else o()};var r=function(t){var e,n,i=jQuery("#"+t).parents("g"),r=null===(e=i.attr("class"))||void 0===e?void 0:e.match(/animation((-[a-zA-Z0-9]+)+)?(\s+||\")/gm),o=null===(n=i.attr("class"))||void 0===n?void 0:n.match(/animate((__[a-zA-Z0-9]+)+)?(\s+||\")/gm);r&&r.forEach((function(t){jQuery(i).removeClass(t)})),o&&o.forEach((function(t){jQuery(i).removeClass(t)}));var a=i.attr("data-class");a&&(i.attr("class",a),i.removeAttr("data-class")),jQuery(i).data("animation-running",!1)}},3052:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Interactive_ActionAnimation=void 0;var i=n(7389),r=n(7448);e.icdt_Run_Interactive_ActionAnimation=function(t,e,n){var a;if(e.value){var u=jQuery("#"+t).parents("g");if(u.length){var c=e.node.size;u.css("transform-origin","".concat(c.x+c.width/2,"px ").concat(c.y+c.height/2,"px"));var s,l,d,f=null!==(a=e.iteration)&&void 0!==a?a:0,h=[];(e.value||"").match(/animation((-[a-zA-Z0-9]+)+)?(\s+||\")/gm)?h.push(e.value):(h.push("animation"),e.value?h.push("animation-"+e.value):h.push("animation-fadein")),f<0?(h.push("animation-iteration-infinite"),n(),n=function(){}):f>0&&h.push("animation-iteration-"+(f+1)),s=h.join(" "),l=function(){var a;o(t),(f>0||f<0)&&u.one("animationiteration",(function(){e.slideStatus===i.icdt_Run.slideStatus||(u.data("animate-running",!1),o(t),e.slideStatus===i.icdt_Run.slideStatus&&n())})),u.one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",(function(){var a;switch(u.data("animate-running",!1),o(t),e.finish){default:case 0:case 1:break;case 2:(0,r.runAnimation)(t,{node:e.node,value:null===(a=e.node.animate)||void 0===a?void 0:a.out,nodeStatus:e.nodeStatus,slideStatus:e.slideStatus},(function(){u.addClass("hide")}))}e.slideStatus===i.icdt_Run.slideStatus&&n()})),u.attr("data-class",null!==(a=u.attr("class"))&&void 0!==a?a:""),u.addClass(s),u.data("animate-running",!0)},d=function(){u.data("animate-running")?u.one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",(function(){u.data("animate-running",!1),setTimeout((function(){l()}),100)})):l()},u.hasClass("animation")?setTimeout((function(){d()})):d()}else n()}else n()};var o=function(t){var e,n=jQuery("#"+t).parents("g"),i=null===(e=n.attr("class"))||void 0===e?void 0:e.match(/animation((-[a-zA-Z0-9]+)+)?(\s+||\")/gm);i&&i.forEach((function(t){jQuery(n).removeClass(t)}));var r=n.attr("data-class");r&&(n.attr("class",r),n.removeAttr("data-class")),jQuery(n).data("animation-running",!1)}},1943:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Interactive_ActionPoints=void 0;var i=n(184),r=n(7389),o=n(5932),a=n(7448);e.icdt_Run_Interactive_ActionPoints=function(t,e,n){var u;if(e.points&&e.points.length){var c=jQuery("#"+t),s=function(t){var e=[];2===t.length&&t.splice(1,0,[(t[0][0]+t[1][0])/2,(t[0][1]+t[1][1])/2]);for(var n,i,r,o=1,a=t.length;o<a;){if(n=t[o-1],i=t[o],r=t[o+1],(Math.abs(n[0]-i[0])>=15||Math.abs(n[1]-i[1])>=15)&&Math.pow(n[0]-i[0],2)+Math.pow(n[1]-i[1],2)>=Math.pow(15,2)&&r&&(Math.abs(n[0]-r[0])<=20||Math.abs(n[1]-r[1])<=20)&&Math.pow(n[0]-r[0],2)+Math.pow(n[1]-r[1],2)<=Math.pow(20,2))e.push(i);else for(var u=i[0]-n[0],c=i[1]-n[1],s=Math.max(Math.abs(u),Math.abs(c)),l=0;l<s;l+=15)e.push([n[0]+u*l/s,n[1]+c*l/s]);o++}return a>0&&(e.splice(0,0,t[0]),e.push(t[a-1])),e}(e.points||[]),l=null!==(u=e.iteration)&&void 0!==u?u:0;if(l<0&&(n(),n=function(){}),!(c.data("work-running")&&l<0)){c.data("work-running",!0);var d,f=s.length,h=Math.max(20,1e3*(e.time||3)/f),v=r.icdt_Run.findNode(t),p=v.id,g=v.type,y=v.size,_=v.attribute,b=function(t){var u;if(e.slideStatus!==r.icdt_Run.slideStatus)return c.data("work-running",!1),void(e.slideStatus===r.icdt_Run.slideStatus&&n());if(t<f){var v=s[t];v&&(d=Object.assign({},y,{x:v[0]-y.width/2,y:v[1]-y.height/2}),Object.assign(_,(0,i.icdt_Size2Attribute)(g,d,_)),(0,o.icdt_SyncSvgNodeAttribute)(window.document.getElementById(p),_),setTimeout((function(){b(++t)}),h))}else if(l>0)l--,b(1);else if(l<0)b(1);else switch(c.data("work-running",!1),e.slideStatus===r.icdt_Run.slideStatus&&n(),e.finish){default:case 0:break;case 1:Object.assign(_,(0,i.icdt_Size2Attribute)(g,y,_)),(0,o.icdt_SyncSvgNodeAttribute)(window.document.getElementById(p),_);break;case 2:(0,a.runAnimation)(e.node.id,{node:e.node,value:null===(u=e.node.animate)||void 0===u?void 0:u.out,nodeStatus:e.nodeStatus,slideStatus:e.slideStatus},(function(){c.addClass("hide")}))}};b(1)}}else n()}},299:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Interactive_Audio=void 0;var i=n(9427),r=n(7389);e.icdt_Run_Interactive_Audio=function(t,e,n,o,a){var u,c,s,l,d,f,h;if(o.slideStatus!=r.icdt_Run.slideStatus)return e.async&&"change-slide"!=e.async?void 0:void a();if(o.nodeStatus==r.icdt_Run.nodeStatus||e.async&&"change-node"!=e.async){if(!(null===(u=e.source)||void 0===u?void 0:u.path)&&!(null===(c=e.source)||void 0===c?void 0:c.url))return console.warn("".concat(t," -> audio no source!")),a(),void(a=function(){});var v=jQuery("#"+t),p=null!==(s=e.iteration)&&void 0!==s?s:0;if(p<0&&(a(),a=function(){}),!(v.data("audio-running")&&p<0)){v.data("audio-running",!0);var g=function(t){t.pause(),t.remove(),v.data("audio-running",!1)},y=new Audio;return y.autoplay=!0,y.loop=0!=p,y.preload="auto",y.controls=!0,y.setAttributeNode(document.createAttribute("playsinline")),y.addEventListener("canplay",(function(){var t=y.play();t&&t.then((function(t){var n;v.data("audio-running",!0),"time"==e.async?setTimeout((function(){g(y),a(),a=function(){}}),1e3*(null!==(n=e.time)&&void 0!==n?n:1)):"non-stop"==e.async&&(a(),a=function(){})})).catch((function(t){v.data("audio-running",!1),o.slideStatus===r.icdt_Run.slideStatus&&(a(),a=function(){})}))})),y.addEventListener("timeupdate",(function(){switch(e.async){case"time":case"non-stop":break;case"finish-action":n.total>=2&&n.total-n.counter==1&&(g(this),a(),a=function(){});break;default:case"change-node":o.nodeStatus!==r.icdt_Run.nodeStatus&&(g(this),a(),a=function(){});break;case"change-slide":o.slideStatus!==r.icdt_Run.slideStatus&&(g(this),a(),a=function(){})}})),y.addEventListener("canplaythrough",(function(){this.loop&&(p>0?p--:0==p&&(this.loop=!1))})),y.addEventListener("play",(function(){})),y.addEventListener("pause",(function(){})),y.addEventListener("ended",(function(){this.remove(),v.data("audio-running",!1),o.slideStatus===r.icdt_Run.slideStatus&&(a(),a=function(){})})),y.onerror=function(){this.remove(),v.data("audio-running",!1),o.slideStatus===r.icdt_Run.slideStatus&&(a(),a=function(){})},y.src=((null===(l=e.source)||void 0===l?void 0:l.path)?(null===(d=i.icdt.config)||void 0===d?void 0:d.readfileuploadurl)+(null===(f=e.source)||void 0===f?void 0:f.path):null===(h=e.source)||void 0===h?void 0:h.url)||"",y}}else a()}},7860:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Interactive_NodeClick=void 0;var i=n(9427),r=n(7389),o=n(3052),a=n(1943),u=n(299),c=n(1493),s=n(825),l=n(7448);e.icdt_Run_Interactive_NodeClick=function(t,e,n,d){var f,h,v,p,g,y,_={total:0,counter:0},b=null!==(h=null===(f=t.interactive)||void 0===f?void 0:f.click)&&void 0!==h?h:{},m=b.triggershow,w=b.triggerrun,x=b.triggerhide,S=b.action,M=b.audio,E=b.slide,k=b.media;if(console.log("node(".concat(t.id,") | nodeStatus(").concat(e,") | slideStatus(").concat(n,") | click")),m){var T=m.id,N=m.ids,A=m.time;"asynctrue"==(C=m.async)?(0,c.icdt_Run_Interactive_TriggerShow)({id:T,ids:N,nodeStatus:e,slideStatus:n}):"time"==C&&setTimeout((function(){(0,c.icdt_Run_Interactive_TriggerShow)({id:T,ids:N,nodeStatus:e,slideStatus:n})}),1e3*(null!=A?A:0))}if(w){var O=w.id,R=w.ids;A=w.time,"asynctrue"==(C=w.async)?(0,c.icdt_Run_Interactive_TriggerRun)({id:O,ids:R,nodeStatus:e,slideStatus:n}):"time"==C&&setTimeout((function(){(0,c.icdt_Run_Interactive_TriggerRun)({id:O,ids:R,nodeStatus:e,slideStatus:n})}),1e3*(null!=A?A:0))}if(x){var C,I=x.id,j=x.ids;A=x.time,"asynctrue"==(C=x.async)?(0,c.icdt_Run_Interactive_TriggerHide)({id:I,ids:j,nodeStatus:e,slideStatus:n}):"time"==C&&setTimeout((function(){(0,c.icdt_Run_Interactive_TriggerHide)({id:I,ids:j,nodeStatus:e,slideStatus:n})}),1e3*(null!=A?A:0))}var P=function(){setTimeout((function(){if(_.counter>=_.total){if(d&&d(),m){var t=m.id,i=m.ids;(r=m.async)&&"asyncfalse"!=r||(0,c.icdt_Run_Interactive_TriggerShow)({id:t,ids:i,nodeStatus:e,slideStatus:n})}var r;if(w&&(t=w.id,i=w.ids,(r=w.async)&&"asyncfalse"!=r||(0,c.icdt_Run_Interactive_TriggerRun)({id:t,ids:i,nodeStatus:e,slideStatus:n})),x)t=x.id,i=x.ids,(r=x.async)&&"asyncfalse"!=r||(0,c.icdt_Run_Interactive_TriggerHide)({id:t,ids:i,nodeStatus:e,slideStatus:n})}}))};if(null==S?void 0:S.value){_.total+=1;var z=function(){_.counter+=1,P()};switch(null==S?void 0:S.value){case"hide":(0,l.runAnimation)(t.id,{node:t,value:null===(v=t.animate)||void 0===v?void 0:v.out,nodeStatus:e,slideStatus:n},(function(){jQuery("#"+t.id).addClass("hide"),z()}));break;case"points":var D=S.points,V=(A=S.time,S.iteration),L=S.finish;D&&(0,a.icdt_Run_Interactive_ActionPoints)(t.id,{node:t,points:D,time:A,iteration:V,finish:L,nodeStatus:e,slideStatus:n},z);break;default:var B=S.value;A=S.time,V=S.iteration,L=S.finish,(0,o.icdt_Run_Interactive_ActionAnimation)(t.id,{node:t,value:B,time:A,iteration:V,finish:L,nodeStatus:e,slideStatus:n},z)}}if((null===(p=null==M?void 0:M.source)||void 0===p?void 0:p.path)&&(_.total+=1,(0,u.icdt_Run_Interactive_Audio)(t.id,M,_,{nodeStatus:e,slideStatus:n},(function(){_.counter+=1,P()}))),_.total||P(),null==E?void 0:E.id)switch(E.id){case-1:r.icdt_Run.runSlide(r.icdt_Run.slideIdx-1);break;case-2:r.icdt_Run.runSlide(r.icdt_Run.slideIdx+1);break;default:r.icdt_Run.runSlide(void 0,E.id,null===(g=E.code)||void 0===g?void 0:g.toString())}if(null==k?void 0:k.type){var F=(0,s.getMediaViewerUrl)({readfileuploadurl:null===(y=i.icdt.config)||void 0===y?void 0:y.readfileuploadurl,type:null==k?void 0:k.type,oss:null==k?void 0:k.oss,path:null==k?void 0:k.path,url:null==k?void 0:k.url}),G='<div class="popup-media-viewer"><iframe src="'.concat(F,'" frameborder="0" allowfullscreen\n        webkitallowfullscreen allowtransparency="true" allow="autoplay; fullscreen"></iframe><div class="btn-close"><img src="assets/icon-svg/close-outline.svg"/></div></div>'),U=jQuery(G).appendTo(window.document.body);U.find(".btn-close").click((function(t){t.preventDefault(),U.remove()}))}}},3367:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Interactive_NodeShow=void 0;var i=n(3052),r=n(1943),o=n(299),a=n(1493);e.icdt_Run_Interactive_NodeShow=function(t,e,n,u){var c,s,l,d={total:0,counter:0},f=null!==(s=null===(c=t.interactive)||void 0===c?void 0:c.show)&&void 0!==s?s:{},h=f.triggershow,v=f.triggerrun,p=f.triggerhide,g=f.action,y=f.audio;if(console.log("node(".concat(t.id,") | nodeStatus(").concat(e,") | slideStatus(").concat(n,") | show")),h){var _=h.id,b=h.ids,m=h.time;"asynctrue"==(S=h.async)?setTimeout((function(){(0,a.icdt_Run_Interactive_TriggerShow)({id:_,ids:b,nodeStatus:e,slideStatus:n})})):"time"==S&&setTimeout((function(){(0,a.icdt_Run_Interactive_TriggerShow)({id:_,ids:b,nodeStatus:e,slideStatus:n})}),1e3*(null!=m?m:0))}if(v){var w=v.id,x=v.ids;m=v.time,"asynctrue"==(S=v.async)?setTimeout((function(){(0,a.icdt_Run_Interactive_TriggerRun)({id:w,ids:x,nodeStatus:e,slideStatus:n})})):"time"==S&&setTimeout((function(){(0,a.icdt_Run_Interactive_TriggerRun)({id:w,ids:x,nodeStatus:e,slideStatus:n})}),1e3*(null!=m?m:0))}if(p){var S,M=p.id,E=p.ids;m=p.time,"asynctrue"==(S=p.async)?setTimeout((function(){(0,a.icdt_Run_Interactive_TriggerHide)({id:M,ids:E,nodeStatus:e,slideStatus:n})})):"time"==S&&setTimeout((function(){(0,a.icdt_Run_Interactive_TriggerHide)({id:M,ids:E,nodeStatus:e,slideStatus:n})}),1e3*(null!=m?m:0))}var k=function(){setTimeout((function(){if(d.counter>=d.total){if(u&&u(),h){var t=h.id,i=h.ids;(r=h.async)&&"asyncfalse"!=r||(0,a.icdt_Run_Interactive_TriggerShow)({id:t,ids:i,nodeStatus:e,slideStatus:n})}var r;if(v&&(t=v.id,i=v.ids,(r=v.async)&&"asyncfalse"!=r||(0,a.icdt_Run_Interactive_TriggerRun)({id:t,ids:i,nodeStatus:e,slideStatus:n})),p)t=p.id,i=p.ids,(r=p.async)&&"asyncfalse"!=r||(0,a.icdt_Run_Interactive_TriggerHide)({id:t,ids:i,nodeStatus:e,slideStatus:n})}}))};if(null==g?void 0:g.value){d.total+=1;var T=function(){d.counter+=1,k()};switch(null==g?void 0:g.value){case"hide":jQuery("#"+t.id).addClass("hide"),T();break;case"points":var N=g.points,A=(m=g.time,g.iteration),O=g.finish;(0,r.icdt_Run_Interactive_ActionPoints)(t.id,{node:t,points:N,time:m,iteration:A,finish:O,nodeStatus:e,slideStatus:n},T);break;default:var R=g.value;m=g.time,A=g.iteration,O=g.finish,(0,i.icdt_Run_Interactive_ActionAnimation)(t.id,{node:t,value:R,time:m,iteration:A,finish:O,nodeStatus:e,slideStatus:n},T)}}if(null===(l=null==y?void 0:y.source)||void 0===l?void 0:l.path){d.total+=1;var C=(0,o.icdt_Run_Interactive_Audio)(t.id,y,d,{nodeStatus:e,slideStatus:n},(function(){d.counter+=1,k()}));-1==(null==y?void 0:y.iteration)&&jQuery("#"+t.id).click((function(t){t.preventDefault(),C&&(C.volume>=1?C.volume=0:C.volume=C.volume+.25),console.log(null==C?void 0:C.volume)}))}d.total||k()}},1493:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Interactive_TriggerHide=e.icdt_Run_Interactive_TriggerRun=e.icdt_Run_Interactive_TriggerShow=void 0;var i=n(7389),r=n(7860),o=n(7448);e.icdt_Run_Interactive_TriggerShow=function(t){t.id?jQuery("#"+t.id).removeClass("hide"):t.ids&&t.ids.forEach((function(t){jQuery("#"+t).removeClass("hide")}))},e.icdt_Run_Interactive_TriggerRun=function(t){t.id?(jQuery("#"+t.id).removeClass("hide"),(0,r.icdt_Run_Interactive_NodeClick)(i.icdt_Run.findNode(t.id),t.nodeStatus,t.slideStatus)):t.ids&&t.ids.forEach((function(e){jQuery("#"+e).removeClass("hide"),(0,r.icdt_Run_Interactive_NodeClick)(i.icdt_Run.findNode(e),t.nodeStatus,t.slideStatus)}))},e.icdt_Run_Interactive_TriggerHide=function(t){var e;if(t.id){var n=i.icdt_Run.findNode(t.id);(0,o.runAnimation)(t.id,{node:n,value:null===(e=n.animate)||void 0===e?void 0:e.out,nodeStatus:t.nodeStatus,slideStatus:t.slideStatus},(function(){jQuery("#"+t.id).addClass("hide")}))}else t.ids&&t.ids.forEach((function(e){var n,r=i.icdt_Run.findNode(e);(0,o.runAnimation)(e,{node:r,value:null===(n=r.animate)||void 0===n?void 0:n.out,nodeStatus:t.nodeStatus,slideStatus:t.slideStatus},(function(){jQuery("#"+e).addClass("hide")}))}))}},5224:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Node=void 0;var i=n(7389),r=n(7860),o=n(3367),a=n(4018),u=n(7790),c=n(7448),s=n(7459);e.icdt_Run_Node=function(t,e,n,l){var d,f,h,v,p,g,y,_,b,m;(null===(d=e.animate)||void 0===d?void 0:d.value)&&(0,c.icdt_Run_Animate_Animation)(e,n.nodeStatus,n.slideStatus),(null===(f=e.interactive)||void 0===f?void 0:f.show)?(console.log("node(".concat(e.id,") | nodeStatus(").concat(n.nodeStatus,") | slideStatus(").concat(n.slideStatus,") | show")),(0,o.icdt_Run_Interactive_NodeShow)(e,n.nodeStatus,n.slideStatus,l)):l&&l(),(null===(h=e.interactive)||void 0===h?void 0:h.click)&&(m=null===(v=e.interactive)||void 0===v?void 0:v.click,Object.keys(null!=m?m:{}).map((function(t){return m[t]?1:0})).includes(1)&&jQuery("#"+e.id).addClass("interactive-click"),jQuery("#"+e.id).click((function(t){t.preventDefault(),n.nodeStatus=i.icdt_Run.refreshNodeStatus(),console.log("node(".concat(e.id,") | nodeStatus(").concat(n.nodeStatus,") | slideStatus(").concat(n.slideStatus,") | click")),(0,r.icdt_Run_Interactive_NodeClick)(e,n.nodeStatus,n.slideStatus)}))),(null===(p=e.variable)||void 0===p?void 0:p.input)&&jQuery("#"+e.id).on("change","input,textarea",(function(n){n.preventDefault(),(0,u.icdt_Run_Variable_NodeInput)(n.target.value,e,t)})),(null===(g=e.variable)||void 0===g?void 0:g.click)&&((null===(_=null===(y=e.variable)||void 0===y?void 0:y.click)||void 0===_?void 0:_.variable)&&jQuery("#"+e.id).addClass("variable-click"),jQuery("#"+e.id).click((function(n){n.preventDefault(),(0,a.icdt_Run_Variable_NodeClick)(e,t)}))),"test"==(null===(b=e.source)||void 0===b?void 0:b.type)&&(0,s.icdt_Run_Test)(e,t)}},3299:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Slide=void 0;var i=n(2121),r=n(7389),o=n(5224),a=n(2263),u=n(303),c=n(4644),s=n(4971),l=n(5127),d=n(8539),f=n(6383),h=n(451),v=n(5677),p=n(2613);e.icdt_Run_Slide=function(t){var e,n,i,o,u,c=r.icdt_Run.nodeStatus,s=r.icdt_Run.slideStatus;null===(e=t.svg)||void 0===e||e.nodes.forEach((function(t){t.pid=Math.ceil(1e9*Math.random()),(0,a.icdt_SvgGroup)(t.pid)}));var l=null===(i=null===(n=t.svg)||void 0===n?void 0:n.nodes)||void 0===i?void 0:i.map((function(t){var e;return null!==(e=t.idx)&&void 0!==e?e:0})).filter((function(t,e,n){return n.indexOf(t)==e})).sort((function(t,e){return(null!=t?t:0)-(null!=e?e:0)}));g(null!==(u=null===(o=t.svg)||void 0===o?void 0:o.nodes)&&void 0!==u?u:[],null!=l?l:[],{slide:t,nodeStatus:c,slideStatus:s})};var g=function(t,e,n){if(n.slideStatus==r.icdt_Run.slideStatus&&e.length){var i=e.shift(),o=t.filter((function(t){var e;return(null!==(e=t.idx)&&void 0!==e?e:0)==i}));if(o.length){var a=Math.max.apply(null,o.map((function(t){var e;return null!==(e=t.time)&&void 0!==e?e:0}))),u=!1,c=a<.5?0:setTimeout((function(){u||(u=!0,g(t,e,n))}),1e3*a);y(t,e,o,0,n,{idx:i,total:o.length,counter:0,isRecursive:u,timeoutRecursive:c,maxTimeCoundown:a,uid:Math.floor(1e9*Math.random())})}}},y=function(t,e,n,a,_,b){if(_.slideStatus==r.icdt_Run.slideStatus){var m=n[a];if(m){switch(m.type){case i.V_ShapeType.GROUP:break;case i.V_ShapeType.CIRCLE:(0,u.icdt_SvgCircle)(m.id,{size:m.size,attribute:m.attribute},m.pid?window.document.getElementById(m.pid):null);break;case i.V_ShapeType.ELLIPSE:(0,c.icdt_SvgEllipse)(m.id,{size:m.size,attribute:m.attribute},m.pid?window.document.getElementById(m.pid):null);break;case i.V_ShapeType.LINE:(0,s.icdt_SvgLine)(m.id,{size:m.size,attribute:m.attribute},m.pid?window.document.getElementById(m.pid):null);break;case i.V_ShapeType.RECT:(0,l.icdt_SvgRect)(m.id,{size:m.size,attribute:m.attribute},m.pid?window.document.getElementById(m.pid):null);break;case i.V_ShapeType.POLYGON:(0,d.icdt_SvgPolygon)(m.id,{size:m.size,attribute:m.attribute},m.pid?window.document.getElementById(m.pid):null);break;case i.V_ShapeType.FOREIGNOBJECT:(0,f.icdt_SvgForeignObject)(m.id,{size:m.size,attribute:m.attribute,style:m.style,source:m.source},m.pid?window.document.getElementById(m.pid):null);break;case i.V_ShapeType.IMAGE:(0,h.icdt_SvgImage)(m.id,{size:m.size,attribute:m.attribute,source:m.source},m.pid?window.document.getElementById(m.pid):null);break;case i.V_ShapeType.TEXT:(0,v.icdt_SvgText)(m.id,{size:m.size,attribute:m.attribute,source:m.source},m.pid?window.document.getElementById(m.pid):null);break;case i.V_ShapeType.PATH:(0,p.icdt_SvgPath)(m.id,{size:m.size,attribute:m.attribute},m.pid?window.document.getElementById(m.pid):null)}(0,o.icdt_Run_Node)(_.slide,m,_,(function(){b.counter+=1,b.maxTimeCoundown<.5&&b.counter>=b.total&&(b.total=b.counter=0,b.isRecursive||(clearTimeout(b.timeoutRecursive),b.isRecursive=!0,setTimeout((function(){g(t,e,_)}),250)))})),y(t,e,n,++a,_,b)}}}},7818:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Test_Notify_Effect=void 0;var i=n(9427),r=n(451),o=n(5877),a=n(7389);e.icdt_Run_Test_Notify_Effect=function(t,e,n){var r,c,s,l,d=1,f=new Image;f.onload=function(){var t,i,r,c,s,l,h,v,p,g,y,_,b,m,w=0,x=0;(d=(0,o.icdt_RoundNumber)(f.naturalWidth/f.naturalHeight,100))>=1?x=(w=Math.min(f.naturalWidth,null!==(r=null===(i=null===(t=a.icdt_Run.slide.svg)||void 0===t?void 0:t.viewBox)||void 0===i?void 0:i.width)&&void 0!==r?r:0))/d:w=(x=Math.min(f.naturalHeight,null!==(l=null===(s=null===(c=a.icdt_Run.slide.svg)||void 0===c?void 0:c.viewBox)||void 0===s?void 0:s.height)&&void 0!==l?l:0))/d,b=((null!==(p=null===(v=null===(h=a.icdt_Run.slide.svg)||void 0===h?void 0:h.viewBox)||void 0===v?void 0:v.width)&&void 0!==p?p:0)-w)/2,m=((null!==(_=null===(y=null===(g=a.icdt_Run.slide.svg)||void 0===g?void 0:g.viewBox)||void 0===y?void 0:y.height)&&void 0!==_?_:0)-x)/2,e.size={x:b,y:m,width:w,height:x},u(e,n)},f.onerror=function(t){console.error("ImgSrc load failed -> ".concat(JSON.stringify(e.source)),t)},f.src=((null===(r=e.source)||void 0===r?void 0:r.path)?(null===(c=i.icdt.config)||void 0===c?void 0:c.readfileuploadurl)+(null===(s=e.source)||void 0===s?void 0:s.path):null===(l=e.source)||void 0===l?void 0:l.url)||""};var u=function(t,e){if(t.slideStatus==a.icdt_Run.slideStatus){var n=(0,r.icdt_SvgImage)(Math.ceil(1e9*Math.random()),{size:t.size,source:{type:"image",image:null==t?void 0:t.source}}).element;setTimeout((function(){null==n||n.remove(),e()}),3e3)}else e()}},6322:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Test_Notify_Icon=void 0;var i=n(9427),r=n(451),o=n(5877),a=n(7389),u=n(5932),c=n(3331);e.icdt_Run_Test_Notify_Icon=function(t,e,n){var r,o,a,u,c=new Image;c.onload=function(){s(t,{width:c.naturalWidth,height:c.naturalHeight},e,n)},c.onerror=function(t){console.error("ImgSrc load failed -> ".concat(JSON.stringify(e.source)),t),n()},c.src=((null===(r=e.source)||void 0===r?void 0:r.path)?(null===(o=i.icdt.config)||void 0===o?void 0:o.readfileuploadurl)+(null===(a=e.source)||void 0===a?void 0:a.path):null===(u=e.source)||void 0===u?void 0:u.url)||""};var s=function(t,e,n,s){if(n.slideStatus==a.icdt_Run.slideStatus){var l,d,f=(0,o.icdt_RoundNumber)(e.width/e.height,100),h=0,v=0;f>=1?(h=e.width,h=Math.max(h,40),v=(h=Math.min(h,40))/f):(v=e.height,v=Math.max(v,40),h=(v=Math.min(v,40))/f);var p=t.size;l=p.x+p.width-h/2,d=p.y-v/2;var g=(0,u.icdt_SyncSvgNode4Design)(c.V_ID.TEST_GROUP,"g",void 0,i.icdt.target);(0,r.icdt_SvgImage)("icon-".concat(t.id),{size:{x:l,y:d,width:h,height:v},source:{type:"image",image:null==n?void 0:n.source}},g).element,setTimeout((function(){s()}),3e3)}else s()}},9380:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Test_Notify_Sound=void 0;var i=n(9427),r=n(7389);e.icdt_Run_Test_Notify_Sound=function(t,e,n){var o,a,u,c,s,l,d;if(e.slideStatus==r.icdt_Run.slideStatus){if(!(null===(o=e.source)||void 0===o?void 0:o.path)&&!(null===(a=e.source)||void 0===a?void 0:a.url))return console.warn("".concat(t.id," -> audio no source!")),void n();var f=jQuery("#"+t.id),h=null!==(u=e.iteration)&&void 0!==u?u:0;if(h<0&&(n(),n=function(){}),!(f.data("audio-running")&&h<0)){f.data("audio-running",!0);var v=new Audio;return v.autoplay=!0,v.loop=0!=h,v.preload="auto",v.controls=!0,v.setAttributeNode(document.createAttribute("playsinline")),v.addEventListener("canplay",(function(){var t=v.play();t&&t.then((function(t){f.data("audio-running",!0)})).catch((function(t){f.data("audio-running",!1),e.slideStatus===r.icdt_Run.slideStatus&&n()}))})),v.addEventListener("timeupdate",(function(){e.slideStatus!==r.icdt_Run.slideStatus&&function(t){t.pause(),t.remove(),f.data("audio-running",!1)}(this)})),v.addEventListener("canplaythrough",(function(){this.loop&&(h>0?h--:0==h&&(this.loop=!1))})),v.addEventListener("play",(function(){})),v.addEventListener("pause",(function(){})),v.addEventListener("ended",(function(){this.remove(),f.data("audio-running",!1),e.slideStatus===r.icdt_Run.slideStatus&&n()})),v.onerror=function(){this.remove(),f.data("audio-running",!1),e.slideStatus===r.icdt_Run.slideStatus&&n()},v.src=((null===(c=e.source)||void 0===c?void 0:c.path)?(null===(s=i.icdt.config)||void 0===s?void 0:s.readfileuploadurl)+(null===(l=e.source)||void 0===l?void 0:l.path):null===(d=e.source)||void 0===d?void 0:d.url)||"",v}}else n()}},7459:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Test=void 0;var i=n(9427),r=n(7389),o=n(7818),a=n(6322),u=n(5932),c=n(9380),s=n(3331),l=n(2866);e.icdt_Run_Test=function(t,e){var n,o,a,c,l,_,b=function(){};switch(null===(o=null===(n=t.source)||void 0===n?void 0:n.test)||void 0===o?void 0:o.type){case"truefalse":if(jQuery("#"+t.id).click((function(n){n.preventDefault();var i=r.icdt_Run.nodeStatus,o=r.icdt_Run.slideStatus;d(t,e,i,o,b)})),null===(a=e.test)||void 0===a?void 0:a.showselection){var m=(0,u.icdt_SyncSvgNode4Design)(s.V_ID.TEST_GROUP,"g",void 0,i.icdt.target);(0,u.syncTest)(m,e)}break;case"singlechoice":jQuery("#"+t.id).click((function(n){n.preventDefault();var i=r.icdt_Run.nodeStatus,o=r.icdt_Run.slideStatus;f(t,e,i,o,b)})),(null===(c=e.test)||void 0===c?void 0:c.showselection)&&(m=(0,u.icdt_SyncSvgNode4Design)(s.V_ID.TEST_GROUP,"g",void 0,i.icdt.target),(0,u.syncTest)(m,e));break;case"multichoice":jQuery("#"+t.id).click((function(n){n.preventDefault();var i=r.icdt_Run.nodeStatus,o=r.icdt_Run.slideStatus;h(t,e,i,o,b)})),(null===(l=e.test)||void 0===l?void 0:l.showselection)&&(m=(0,u.icdt_SyncSvgNode4Design)(s.V_ID.TEST_GROUP,"g",void 0,i.icdt.target),(0,u.syncTest)(m,e));break;case"fill":jQuery("#"+t.id).on("keyup",'input[type="text"]',(function(t){var e,n=jQuery("<div/>").css({"font-size":jQuery(t.target).css("font-size"),visibility:"hidden",float:"left"}).text(t.target.value).appendTo(window.document.body);jQuery(t.target).css({width:(null!==(e=n.width())&&void 0!==e?e:0)+30})})).on("keypress",'input[type="text"]',(function(t){13===(t.keyCode||t.charCode||t.which)&&(t.preventDefault(),t.stopPropagation(),jQuery(t.target).blur())})).on("change",'input[type="text"]',(function(n){var i,o,a,u=r.icdt_Run.nodeStatus,c=r.icdt_Run.slideStatus,s=null===(i=n.target)||void 0===i?void 0:i.getAttribute("data-key"),l=null===(a=null===(o=n.target)||void 0===o?void 0:o.value)||void 0===a?void 0:a.trim();v(t,e,u,c,{key:s,value:l},b),jQuery("#"+t.id).find('input[type="text"][data-key="'.concat(s,'"]')).val(l)})),(null===(_=e.test)||void 0===_?void 0:_.showselection)||jQuery("#"+t.id).addClass("hide-selection");break;case"matching-empty":jQuery("#"+t.id).on("touchmove",".ondrag-item",(function(t){t.preventDefault()})).kendoDraggable({filter:".ondrag-item",hint:function(e){var n=t.size.height/t.size.width;return'<div class="ondrag-hint" style="transform: translateX(100%) translateY(100%);width:'.concat(64,"px;height:").concat(64*n,'px;border-radius:8px;border:1px dashed #DADADA;padding:8px;box-sizing:content-box;background-color:rgba(255,255,255,0.8);">').concat(e.prop("outerHTML"),"</div>").replace(/\s+/g," ")},dragstart:function(n){var i;jQuery('svg foreignObject .ondrop-here[data-type2="matching-content"]:empty').addClass("actived"),jQuery('svg foreignObject .ondrop-here[data-type2="matching-empty"]').addClass("actived"),(null===(i=e.test)||void 0===i?void 0:i.showselection)||jQuery('svg foreignObject .ondrop-here[data-type="matching"]').addClass("hide-selection"),g(t,e)},drag:function(t){},dragend:function(t){jQuery("svg foreignObject .ondrop-here").removeClass("actived"),jQuery("svg foreignObject .ondrop-here").removeClass("focused")},dragcancel:function(){jQuery("svg foreignObject .ondrop-here").removeClass("actived"),jQuery("svg foreignObject .ondrop-here").removeClass("focused")}}),jQuery("#".concat(t.id," .ondrop-here")).kendoDropTarget({dragenter:function(t){t.dropTarget.hasClass("actived")&&t.dropTarget.addClass("focused")},dragleave:function(t){t.dropTarget.hasClass("actived")&&t.dropTarget.removeClass("focused")},drop:function(n){if(n.dropTarget.hasClass("actived")){n.dropTarget.removeClass("focused");var i=n.dropTarget,o=n.draggable.currentTarget;i.is(":empty")||i.find(".ondrag-item").appendTo($('svg foreignObject .ondrop-here[data-type2="matching-content"]:empty').first()),o.appendTo(i);var a=r.icdt_Run.nodeStatus,u=r.icdt_Run.slideStatus;p(t,e,a,u,{key:o.data("key")},b)}}});break;case"matching-content":jQuery("#"+t.id).on("touchmove",".ondrag-item",(function(t){t.preventDefault()})).kendoDraggable({filter:".ondrag-item",hint:function(e){var n=t.size.height/t.size.width;return'<div class="ondrag-hint" style="transform: translateX(100%) translateY(100%);width:'.concat(64,"px;height:").concat(64*n,'px;border-radius:8px;border:1px dashed #DADADA;padding:8px;box-sizing:content-box;background-color:rgba(255,255,255,0.8);">').concat(e.prop("outerHTML"),"</div>").replace(/\s+/g," ")},dragstart:function(t){var n;jQuery('svg foreignObject .ondrop-here[data-type2="matching-content"]:empty').addClass("actived"),jQuery('svg foreignObject .ondrop-here[data-type2="matching-empty"]').addClass("actived"),(null===(n=e.test)||void 0===n?void 0:n.showselection)||jQuery('svg foreignObject .ondrop-here[data-type="matching"]').addClass("hide-selection")},drag:function(t){},dragend:function(t){jQuery("svg foreignObject .ondrop-here").removeClass("actived"),jQuery("svg foreignObject .ondrop-here").removeClass("focused")},dragcancel:function(){jQuery("svg foreignObject .ondrop-here").removeClass("actived"),jQuery("svg foreignObject .ondrop-here").removeClass("focused")}}),jQuery("#".concat(t.id," .ondrop-here")).kendoDropTarget({dragenter:function(t){t.dropTarget.hasClass("actived")&&t.dropTarget.addClass("focused")},dragleave:function(t){t.dropTarget.hasClass("actived")&&t.dropTarget.removeClass("focused")},drop:function(t){if(t.dropTarget.hasClass("actived")){t.dropTarget.removeClass("focused");var e=t.dropTarget;t.draggable.currentTarget.appendTo(e)}}});break;case"speech":break;case"submit":jQuery("#"+t.id).click((function(n){n.preventDefault();var i=r.icdt_Run.nodeStatus,o=r.icdt_Run.slideStatus;y(t,e,i,o,b)}))}};var d=function(t,e,n,r,o){var a,c,l,d,f=null===(l=null===(c=null===(a=t.source)||void 0===a?void 0:a.test)||void 0===c?void 0:c.truefalse)||void 0===l?void 0:l.iscorrect;if(e.test?e.test.answer?e.test.answer.truefalse={value:t.id,iscorrect:f}:e.test.answer={truefalse:{value:t.id,iscorrect:f}}:e.test={answer:{truefalse:{value:t.id,iscorrect:f}}},null===(d=e.svg)||void 0===d?void 0:d.nodes.find((function(t){var e,n;return"submit"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)}))){if(e.test.showselection){var h=(0,u.icdt_SyncSvgNode4Design)(s.V_ID.TEST_GROUP,"g",void 0,i.icdt.target);(0,u.syncTest)(h,e)}}else _(t,e,n,r,{iscorrect:f},o);console.log("node source ->",t.source),console.log("slide test ->",e.test)},f=function(t,e,n,r,o){var a,c,l,d,f=null===(l=null===(c=null===(a=t.source)||void 0===a?void 0:a.test)||void 0===c?void 0:c.singlechoice)||void 0===l?void 0:l.iscorrect;if(e.test?e.test.answer?e.test.answer.singlechoice={value:t.id,iscorrect:f}:e.test.answer={singlechoice:{value:t.id,iscorrect:f}}:e.test={answer:{singlechoice:{value:t.id,iscorrect:f}}},null===(d=e.svg)||void 0===d?void 0:d.nodes.find((function(t){var e,n;return"submit"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)}))){if(e.test.showselection){var h=(0,u.icdt_SyncSvgNode4Design)(s.V_ID.TEST_GROUP,"g",void 0,i.icdt.target);(0,u.syncTest)(h,e)}}else _(t,e,n,r,{iscorrect:f},o);console.log("node source ->",t.source),console.log("slide test ->",e.test)},h=function(t,e,n,r,o){var a,c,l,d,f=null===(l=null===(c=null===(a=t.source)||void 0===a?void 0:a.test)||void 0===c?void 0:c.multichoice)||void 0===l?void 0:l.iscorrect;if(e.test?e.test.answer?e.test.answer.multichoice?e.test.answer.multichoice.find((function(e){return e.value==t.id}))?e.test.answer.multichoice=e.test.answer.multichoice.filter((function(e){return e.value!=t.id})):e.test.answer.multichoice.push({value:t.id,iscorrect:f}):e.test.answer.multichoice=[{value:t.id,iscorrect:f}]:e.test.answer={multichoice:[{value:t.id,iscorrect:f}]}:e.test={answer:{multichoice:[{value:t.id,iscorrect:f}]}},null===(d=e.svg)||void 0===d?void 0:d.nodes.find((function(t){var e,n;return"submit"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)}))){if(e.test.showselection){var h=(0,u.icdt_SyncSvgNode4Design)(s.V_ID.TEST_GROUP,"g",void 0,i.icdt.target);(0,u.syncTest)(h,e)}}else _(t,e,n,r,{iscorrect:f},o);console.log("node source ->",t.source),console.log("slide test ->",e.test)},v=function(t,e,n,i,r,o){var a,u,c,s,l,d,f=(null!==(s=null===(c=null===(u=null===(a=t.source)||void 0===a?void 0:a.test)||void 0===u?void 0:u.fill)||void 0===c?void 0:c.find((function(t){return t.key=="[[".concat(r.key,"]]")})))&&void 0!==s?s:{}).value,h=f&&f.map((function(t){return null==t?void 0:t.toLocaleLowerCase()})).includes(null===(l=r.value)||void 0===l?void 0:l.toLocaleLowerCase());(null===(d=e.svg)||void 0===d?void 0:d.nodes.find((function(t){var e,n;return"submit"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)})))||_(t,e,n,i,{iscorrect:h},o),r.iscorrect=h,e.test?e.test.answer?e.test.answer.fill?e.test.answer.fill.find((function(t){return t.key==r.key}))?e.test.answer.fill.filter((function(t){return t.key==r.key})).forEach((function(t){t.value=r.value,t.iscorrect=r.iscorrect})):e.test.answer.fill.push(r):e.test.answer.fill=[r]:e.test.answer={fill:[r]}:e.test={answer:{fill:[r]}},console.log("node source ->",t.source),console.log("slide test ->",e.test)},p=function(t,e,n,i,r,o){var a,u,c,s,l=(null!==(c=null===(u=null===(a=t.source)||void 0===a?void 0:a.test)||void 0===u?void 0:u.matching)&&void 0!==c?c:{key:"KIEN"}).key,d=r.key==l;(null===(s=e.svg)||void 0===s?void 0:s.nodes.find((function(t){var e,n;return"submit"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)})))||_(t,e,n,i,{iscorrect:d},o),g(t,e);var f={id:t.id,key:null!=l?l:"",value:r.key};e.test?e.test.answer?e.test.answer.matching?e.test.answer.matching.find((function(t){return t.id==f.id}))?e.test.answer.matching.filter((function(t){return t.id==f.id})).forEach((function(t){t.key=f.key,t.value=f.value})):e.test.answer.matching.push(f):e.test.answer.matching=[f]:e.test.answer={matching:[f]}:e.test={answer:{matching:[f]}},console.log("node source ->",t.source),console.log("slide test ->",e.test)},g=function(t,e){var n,i,r;null===(r=null===(i=null===(n=e.test)||void 0===n?void 0:n.answer)||void 0===i?void 0:i.matching)||void 0===r||r.filter((function(e){return e.id==t.id})).forEach((function(t){return t.value=""})),jQuery("#node-".concat(t.id)).remove()},y=function(t,e,n,i,r){var o,a,u,c,s,l,d,f,h,v,p,g,y,b,m,w,x,S,M,E,k,T,N,A,O,R,C,I,j,P,z,D,V,L,B,F,G,U,K;(null===(a=null===(o=null==e?void 0:e.test)||void 0===o?void 0:o.answer)||void 0===a?void 0:a.truefalse)?K=null===(s=null===(c=null===(u=null==e?void 0:e.test)||void 0===u?void 0:u.answer)||void 0===c?void 0:c.truefalse)||void 0===s?void 0:s.iscorrect:(null===(d=null===(l=null==e?void 0:e.test)||void 0===l?void 0:l.answer)||void 0===d?void 0:d.singlechoice)?K=null===(v=null===(h=null===(f=null==e?void 0:e.test)||void 0===f?void 0:f.answer)||void 0===h?void 0:h.singlechoice)||void 0===v?void 0:v.iscorrect:(null===(g=null===(p=null==e?void 0:e.test)||void 0===p?void 0:p.answer)||void 0===g?void 0:g.multichoice)?K=1==[null===(m=null===(b=null===(y=null==e?void 0:e.test)||void 0===y?void 0:y.answer)||void 0===b?void 0:b.multichoice)||void 0===m?void 0:m.length,null===(M=null===(S=null===(x=null===(w=null==e?void 0:e.test)||void 0===w?void 0:w.answer)||void 0===x?void 0:x.multichoice)||void 0===S?void 0:S.map((function(t){return t.iscorrect?1:0})))||void 0===M?void 0:M.reduce((function(t,e){return t+e})),null===(T=null===(k=null===(E=null==e?void 0:e.svg)||void 0===E?void 0:E.nodes)||void 0===k?void 0:k.filter((function(t){var e,n,i,r,o;return"multichoice"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)&&(null===(o=null===(r=null===(i=t.source)||void 0===i?void 0:i.test)||void 0===r?void 0:r.multichoice)||void 0===o?void 0:o.iscorrect)})))||void 0===T?void 0:T.length].filter((function(t,e,n){return n.indexOf(t)==e})).length:(null===(A=null===(N=null==e?void 0:e.test)||void 0===N?void 0:N.answer)||void 0===A?void 0:A.fill)?K=(null===(I=null===(C=null===(R=null===(O=null==e?void 0:e.test)||void 0===O?void 0:O.answer)||void 0===R?void 0:R.fill)||void 0===C?void 0:C.map((function(t){return t.iscorrect?1:0})))||void 0===I?void 0:I.reduce((function(t,e){return t+e})))==(null===(z=null===(P=null===(j=e.svg)||void 0===j?void 0:j.nodes)||void 0===P?void 0:P.filter((function(t){var e,n;return"fill"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)})))||void 0===z?void 0:z.length):(null===(V=null===(D=null==e?void 0:e.test)||void 0===D?void 0:D.answer)||void 0===V?void 0:V.matching)&&(K=(null===(F=null===(B=null===(L=e.svg)||void 0===L?void 0:L.nodes)||void 0===B?void 0:B.filter((function(t){var e,n;return"matching-empty"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)})))||void 0===F?void 0:F.length)==((null===(U=null===(G=null==e?void 0:e.test)||void 0===G?void 0:G.answer)||void 0===U?void 0:U.matching)||[]).map((function(t){return t.key==t.value?1:0})).reduce((function(t,e){return t+e}))),_(t,e,n,i,{iscorrect:K},r),console.log("node source ->",t.source),console.log("slide test ->",e.test)},_=function(t,e,n,i,r,u){var s,d,f,h,v,p,g,y,_,b,m,w,x,S,M,E,k,T;r.iscorrect?((null===(d=null===(s=e.test)||void 0===s?void 0:s.audiotrue)||void 0===d?void 0:d.path)&&(0,c.icdt_Run_Test_Notify_Sound)(t,{source:(0,l.extractSourceV1)(null===(f=e.test)||void 0===f?void 0:f.audiotrue),iteration:0,nodeStatus:n,slideStatus:i},u),(null===(v=null===(h=e.test)||void 0===h?void 0:h.icontrue)||void 0===v?void 0:v.path)&&(0,a.icdt_Run_Test_Notify_Icon)(t,{source:(0,l.extractSourceV1)(null===(p=e.test)||void 0===p?void 0:p.icontrue),iteration:0,nodeStatus:n,slideStatus:i},u),(null===(y=null===(g=e.test)||void 0===g?void 0:g.effecttrue)||void 0===y?void 0:y.path)&&(0,o.icdt_Run_Test_Notify_Effect)(t,{source:(0,l.extractSourceV1)(null===(_=e.test)||void 0===_?void 0:_.effecttrue),iteration:0,nodeStatus:n,slideStatus:i},u)):((null===(m=null===(b=e.test)||void 0===b?void 0:b.audiofalse)||void 0===m?void 0:m.path)&&(0,c.icdt_Run_Test_Notify_Sound)(t,{source:(0,l.extractSourceV1)(null===(w=e.test)||void 0===w?void 0:w.audiofalse),iteration:0,nodeStatus:n,slideStatus:i},u),(null===(S=null===(x=e.test)||void 0===x?void 0:x.iconfalse)||void 0===S?void 0:S.path)&&(0,a.icdt_Run_Test_Notify_Icon)(t,{source:(0,l.extractSourceV1)(null===(M=e.test)||void 0===M?void 0:M.iconfalse),iteration:0,nodeStatus:n,slideStatus:i},u),(null===(k=null===(E=e.test)||void 0===E?void 0:E.effectfalse)||void 0===k?void 0:k.path)&&(0,o.icdt_Run_Test_Notify_Effect)(t,{source:(0,l.extractSourceV1)(null===(T=e.test)||void 0===T?void 0:T.effectfalse),iteration:0,nodeStatus:n,slideStatus:i},u))}},4018:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Variable_NodeClick=void 0;var i=n(2121),r=n(9427),o=n(5677),a=n(2263);e.icdt_Run_Variable_NodeClick=function(t,e){var n;r.icdt.variable.setValueOperator(null===(n=t.variable)||void 0===n?void 0:n.click),u(e)};var u=function(t){var e,n=function(t,e){null==t||t.forEach((function(t){switch(t.type){case i.V_ShapeType.GROUP:(0,a.icdt_SvgGroup)(t.id,{},e?window.document.getElementById(e):null),n(t.nodes,t.id);break;case i.V_ShapeType.POLYGON:break;case i.V_ShapeType.TEXT:(0,o.icdt_SvgText)(t.id,{size:t.size,attribute:t.attribute,source:t.source},e?window.document.getElementById(e):null)}}))};n(null===(e=t.svg)||void 0===e?void 0:e.nodes)}},7790:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.icdt_Run_Variable_NodeInput=void 0;var i=n(2121),r=n(9427),o=n(5677),a=n(2263);e.icdt_Run_Variable_NodeInput=function(t,e,n){var i,o,a;r.icdt.variable.setValue(null!==(a=null===(o=null===(i=e.variable)||void 0===i?void 0:i.input)||void 0===o?void 0:o.variable)&&void 0!==a?a:"",t),u(n)};var u=function(t){var e,n=function(t,e){null==t||t.forEach((function(t){switch(t.type){case i.V_ShapeType.GROUP:(0,a.icdt_SvgGroup)(t.id,{},e?window.document.getElementById(e):null),n(t.nodes,t.id);break;case i.V_ShapeType.POLYGON:break;case i.V_ShapeType.TEXT:(0,o.icdt_SvgText)(t.id,{size:t.size,attribute:t.attribute,source:t.source},e?window.document.getElementById(e):null)}}))};n(null===(e=t.svg)||void 0===e?void 0:e.nodes)}},5932:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.syncTest=e.syncBackground=e.syncNodeIndex=e.syncNodeInteractive=e.syncNodeScan=e.syncNodeSelect=e.syncNodeResize=e.syncNodeCreate=e.icdt_SyncSvgNode4Design=e.icdt_SyncSvgNodeStyleActive=e.icdt_SyncSvgNodeSource=e.icdt_SyncSvgNodeStyle=e.icdt_SyncSvgNodeAttribute=e.icdt_SyncSvgNode=e.icdt_SvgRenew=e.icdt_SyncSvgStyle=e.icdt_SyncSvgBackground=e.icdt_Svg=void 0;var i=n(2121),r=n(3331),o=n(4225),a=n(825),u=n(9753),c=n(9427),s=n(4355),l=n(5127),d=n(451),f=n(303),h=n(7389),v=n(6383),p=n(5677);e.icdt_Svg=function(t,e){var n,i=window.document.querySelector(e);i||(i=window.document.createElementNS("http://www.w3.org/2000/svg","svg"),null===(n=window.document.querySelector(t))||void 0===n||n.appendChild(i));var r=c.icdt.screen.init(),o=r.svgViewBox,a=r.svgSize;i.setAttributeNS(null,"viewBox","".concat(o.x," ").concat(o.y," ").concat(o.width," ").concat(o.height)),i.setAttribute("id",e.replace("#","")),i.style.display="block",i.style.width="".concat(a.width,"px"),i.style.height="".concat(a.height,"px"),i.style.backgroundColor="#fafafa",i.style.cursor="default"},e.icdt_SyncSvgBackground=function(t){jQuery(c.icdt.target).find("#"+r.V_ID.BACKGROUND_GROUP).empty();var n=(0,e.icdt_SyncSvgNode4Design)(r.V_ID.BACKGROUND_GROUP,"g",void 0,c.icdt.target);(0,e.syncBackground)(n,t),function(){var n=window.document.getElementById(null==t?void 0:t.id);jQuery(n).find("#"+r.V_ID.BACKGROUND_GROUP).empty();var i=(0,e.icdt_SyncSvgNode4Design)(r.V_ID.BACKGROUND_GROUP,"g",void 0,n);(0,e.syncBackground)(i,t)}()},e.icdt_SyncSvgStyle=function(){var t=c.icdt.screen.svgViewBox,e=c.icdt.screen.svgSize;c.icdt.target&&(c.icdt.target.setAttributeNS(null,"viewBox","".concat(t.x," ").concat(t.y," ").concat(t.width," ").concat(t.height)),c.icdt.target.style.left="".concat(e.x,"px"),c.icdt.target.style.top="".concat(e.y,"px"),c.icdt.target.style.width="".concat(e.width,"px"),c.icdt.target.style.height="".concat(e.height,"px"))},e.icdt_SvgRenew=function(){jQuery(c.icdt.target).find(">*:not(defs)").remove()},e.icdt_SyncSvgNode=function(t,n,r,o,a){var u;return t?(u=jQuery(a||c.icdt.target).find("#"+t).get(0))||((u=window.document.createElementNS("http://www.w3.org/2000/svg",r)).setAttribute("id",t),n==i.V_ShapeType.FOREIGNOBJECT&&u.setAttribute("xmlns:html","http://www.w3.org/1999/xhtml"),jQuery(u).appendTo(a||c.icdt.target)):(u=window.document.createElementNS("http://www.w3.org/2000/svg",r),jQuery(u).appendTo(a||c.icdt.target)),(null==o?void 0:o.attribute)&&(0,e.icdt_SyncSvgNodeAttribute)(u,null==o?void 0:o.attribute),(null==o?void 0:o.style)&&(0,e.icdt_SyncSvgNodeStyle)(u,null==o?void 0:o.style),(null==o?void 0:o.source)&&(0,e.icdt_SyncSvgNodeSource)(u,n,null==o?void 0:o.source),u},e.icdt_SyncSvgNodeAttribute=function(t,e){var n,i,r,a;return jQuery(t).attr((n=Object.assign({},e||{}),null===(i=Object.keys(n))||void 0===i||i.forEach((function(t){var e,i,r,o,a,u,c,s,l,d,f,h;switch(t){case"fill":break;case"fillRule":Object.assign(n,{"fill-rule":null!==(e=n.fillRule)&&void 0!==e?e:null,fillRule:null});break;case"stroke":Object.assign(n,{"stroke-width":null!==(i=n.strokeWidth)&&void 0!==i?i:null,strokeWidth:null});break;case"strokeLinecap":Object.assign(n,{"stroke-linecap":null!==(r=n.strokeLinecap)&&void 0!==r?r:null,strokeLinecap:null});break;case"strokeLinejoin":Object.assign(n,{"stroke-linejoin":null!==(o=n.strokeLinejoin)&&void 0!==o?o:null,strokeLinejoin:null});break;case"strokeMiterlimit":Object.assign(n,{"stroke-miterlimit":null!==(a=n.strokeMiterlimit)&&void 0!==a?a:null,strokeMiterlimit:null});break;case"strokeDasharray":Object.assign(n,{"stroke-dasharray":null!==(u=n.strokeDasharray)&&void 0!==u?u:null,strokeDasharray:null});break;case"strokeDasharrays":Object.assign(n,{"stroke-dasharray":null!==(s=null===(c=n.strokeDasharrays)||void 0===c?void 0:c.join(" "))&&void 0!==s?s:null,strokeDasharrays:null});break;case"fontFamily":Object.assign(n,{"font-family":null!==(l=n.fontFamily)&&void 0!==l?l:null,fontFamily:null});break;case"fontWeight":Object.assign(n,{"font-weight":null!==(d=n.fontWeight)&&void 0!==d?d:null,fontWeight:null});break;case"fontSize":Object.assign(n,{"font-size":null!==(f=n.fontSize)&&void 0!==f?f:null,fontSize:null});break;case"textLength":Object.assign(n,{textLength:n.textLength?"".concat(n.textLength,"px"):null});break;case"transformOrigin":Object.assign(n,{"transform-origin":null!==(h=n.transformOrigin)&&void 0!==h?h:null,transformOrigin:null})}})),Object.assign({},null!=n?n:{},{fill:(null==n?void 0:n.fill)?(0,o.lib_hex2rgba)(n.fill,null!==(r=null==n?void 0:n.fillOpacity)&&void 0!==r?r:1):"rgba(0,0,0,0)",fillOpacity:null,stroke:(null==n?void 0:n.stroke)?(0,o.lib_hex2rgba)(n.stroke,null!==(a=null==n?void 0:n.strokeOpacity)&&void 0!==a?a:1):"rgba(0,0,0,0)",strokeOpacity:null}))),t},e.icdt_SyncSvgNodeStyle=function(t,e){var n,i;return jQuery(t).css((n=Object.assign({},e||{}),null===(i=Object.keys(n))||void 0===i||i.forEach((function(t){var e,i;switch(t){case"padding":Object.assign(n,{padding:n.padding?"".concat(n.padding,"px"):null});break;case"borderWidth":n.borderWidth&&n.borderColor?Object.assign(n,{"border-width":"".concat(n.borderWidth,"px"),"border-style":n.borderStyle||"solid","border-color":(0,o.lib_hex2rgba)(n.borderColor,null!==(e=n.borderOpacity)&&void 0!==e?e:1)}):Object.assign(n,{"border-width":"","border-style":"","border-color":""}),Object.assign(n,{borderWidth:null,borderStyle:null,borderColor:null,borderOpacity:null});break;case"borderRadius":Object.assign(n,{"border-radius":n.borderRadius?"".concat(n.borderRadius,"px"):null,borderRadius:null});break;case"backgroundColor":n.backgroundColor?Object.assign(n,{"background-color":(0,o.lib_hex2rgba)(n.backgroundColor,null!==(i=n.backgroundOpacity)&&void 0!==i?i:1)}):Object.assign(n,{"background-color":""}),Object.assign(n,{backgroundColor:null,backgroundOpacity:null})}})),n)),t},e.icdt_SyncSvgNodeSource=function(t,e,n){var r,o,u,s,l,d,f,h,v,p,g,y,_,b,m,w,x,S,M,E,k,T,N,A,O,R,C,I,j,P,z,D,V,L,B,F,G,U,K,H,Q,q,$,Y,W,X,J,Z,tt,et,nt,it,rt,ot;switch(e){case i.V_ShapeType.TEXT:jQuery(t).text(null!==(o=null===(r=null==n?void 0:n.text)||void 0===r?void 0:r.textContent)&&void 0!==o?o:"");break;case i.V_ShapeType.IMAGE:jQuery(t).attr("href",(null===(u=null==n?void 0:n.image)||void 0===u?void 0:u.base64)||((null===(s=null==n?void 0:n.image)||void 0===s?void 0:s.path)?(null===(l=c.icdt.config)||void 0===l?void 0:l.readfileuploadurl)+(null===(d=null==n?void 0:n.image)||void 0===d?void 0:d.path):null===(f=null==n?void 0:n.image)||void 0===f?void 0:f.url)||"");break;case i.V_ShapeType.FOREIGNOBJECT:switch(null==n?void 0:n.type){case"text":if((null===(h=n.text)||void 0===h?void 0:h.variableKeywords)&&(null===(v=n.text)||void 0===v?void 0:v.variableKeywords.length)){var at=c.icdt.variable.getKeys(),ut=(null===(p=n.text)||void 0===p?void 0:p.textContent)||"";n.text.variableKeywords.forEach((function(t){var e=t.replace(/[^a-zA-Z0-9_]/gm,"");if(at.indexOf(e)>=0){var n=c.icdt.variable.getValue(e);ut=ut.replace(t,n)}})),jQuery(t).text(ut)}else jQuery(t).text((null===(g=n.text)||void 0===g?void 0:g.textContent)||"");break;case"html":var ct=(null===(y=null==n?void 0:n.html)||void 0===y?void 0:y.htmlContent)||"";if((null===(_=n.html)||void 0===_?void 0:_.variableKeywords)&&(null===(b=n.html)||void 0===b?void 0:b.variableKeywords.length)){var st=c.icdt.variable.getKeys();n.html.variableKeywords.forEach((function(t){var e=t.replace(/[^a-zA-Z0-9_]/gm,"");if(st.indexOf(e)>=0){var n=c.icdt.variable.getValue(e);ct=ct.replace(t,n)}}))}jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;">'.concat(ct,"</div>")).find("img[path],video[path],iframe[path]").each((function(t,e){var n,i;e.setAttribute("src",(null!==(i=null===(n=c.icdt.config)||void 0===n?void 0:n.readfileuploadurl)&&void 0!==i?i:"")+e.getAttribute("path")),e.removeAttribute("path")}));break;case"input":(null===(m=n.input)||void 0===m?void 0:m.input)?jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;"><input type="text" placeholder="'.concat(null!==(x=null===(w=n.input)||void 0===w?void 0:w.placeholder)&&void 0!==x?x:"",'" maxlength="100" /></div>')):(null===(S=n.input)||void 0===S?void 0:S.textarea)&&jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;"><textarea placeholder="'.concat(null!==(E=null===(M=n.input)||void 0===M?void 0:M.placeholder)&&void 0!==E?E:"",'" maxlength="1000"></textarea></div>'));break;case"image":jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;"><img src="'.concat((null===(k=n.image)||void 0===k?void 0:k.base64)||((null===(T=n.image)||void 0===T?void 0:T.path)?(null===(N=c.icdt.config)||void 0===N?void 0:N.readfileuploadurl)+(null===(A=n.image)||void 0===A?void 0:A.path):null===(O=n.image)||void 0===O?void 0:O.url)||"",'" style="width:100%;height:100%;display:block;"/></div>'));break;case"iframe":jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;"><iframe src="'.concat(((null===(R=n.iframe)||void 0===R?void 0:R.path)?(null===(C=c.icdt.config)||void 0===C?void 0:C.readfileuploadurl)+(null===(I=n.iframe)||void 0===I?void 0:I.path):null===(j=n.iframe)||void 0===j?void 0:j.url)||"",'" frameborder="0" allowfullscreen\n                    webkitallowfullscreen allowtransparency="true" allow="autoplay; fullscreen" style="width:100%;height:100%;display:block;"></iframe></div>'));break;case"embed":var lt=(0,a.getMediaViewerUrl)({readfileuploadurl:null===(P=c.icdt.config)||void 0===P?void 0:P.readfileuploadurl,type:null===(z=n.embed)||void 0===z?void 0:z.type,oss:null===(D=n.embed)||void 0===D?void 0:D.oss,path:null===(V=n.embed)||void 0===V?void 0:V.path,url:null===(L=n.embed)||void 0===L?void 0:L.url});jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;"><iframe src="'.concat(lt,'" frameborder="0" allowfullscreen\n                    webkitallowfullscreen allowtransparency="true" allow="autoplay; fullscreen" style="width:100%;height:100%;display:block;"></iframe></div>'));break;case"svg":jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;">'.concat(null!==(F=null===(B=n.svg)||void 0===B?void 0:B.svgContent)&&void 0!==F?F:"","</div>"));break;case"test":var dt=(null===(G=null==n?void 0:n.html)||void 0===G?void 0:G.htmlContent)||"";if((null===(U=n.html)||void 0===U?void 0:U.variableKeywords)&&(null===(K=n.html)||void 0===K?void 0:K.variableKeywords.length)){var ft=c.icdt.variable.getKeys();n.html.variableKeywords.forEach((function(t){var e=t.replace(/[^a-zA-Z0-9_]/gm,"");if(ft.indexOf(e)>=0){var n=c.icdt.variable.getValue(e);dt=dt.replace(t,n)}}))}switch(null===(H=null==n?void 0:n.test)||void 0===H?void 0:H.type){case"truefalse":jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;" data-node="test" data-type="'.concat(null==n?void 0:n.test.type,'" data-correct="').concat((null===(Q=null==n?void 0:n.test.truefalse)||void 0===Q?void 0:Q.iscorrect)?1:0,'"><div style="display:flex;align-items:center;width:100%;height:100%;"><div style="width:100%">').concat(dt,"</div></div></div>"));break;case"singlechoice":jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;" data-node="test" data-type="'.concat(null==n?void 0:n.test.type,'" data-correct="').concat((null===(q=null==n?void 0:n.test.singlechoice)||void 0===q?void 0:q.iscorrect)?1:0,'"><div style="display:flex;align-items:center;width:100%;height:100%;"><div style="width:100%">').concat(dt,"</div></div></div>"));break;case"multichoice":jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;" data-node="test" data-type="'.concat(null==n?void 0:n.test.type,'" data-correct="').concat((null===($=null==n?void 0:n.test.multichoice)||void 0===$?void 0:$.iscorrect)?1:0,'"><div style="display:flex;align-items:center;width:100%;height:100%;"><div style="width:100%">').concat(dt,"</div></div></div>"));break;case"matching-empty":jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;" class="ondrop-here" data-node="test" data-type="matching" data-type2="matching-empty" data-key="'.concat(null===(Y=null==n?void 0:n.test.matching)||void 0===Y?void 0:Y.key,'"></div>'));break;case"matching-content":jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;" class="ondrop-here" data-node="test" data-type="matching" data-type2="matching-content" data-key="'.concat(null===(W=null==n?void 0:n.test.matching)||void 0===W?void 0:W.key,'"><div class="ondrag-item" data-key="').concat(null!==(Z=null===(J=null===(X=null==n?void 0:n.test)||void 0===X?void 0:X.matching)||void 0===J?void 0:J.key)&&void 0!==Z?Z:"KIEN",'"><div style="display:flex;align-items:center;width:100%;height:100%;"><div style="width:100%">').concat(dt,"</div></div></div></div>"));break;case"fill":((null===(tt=n.html)||void 0===tt?void 0:tt.fillKeywords)||[]).forEach((function(t){var e='<input type="text" maxlength="128" style="display:inline-block;width:100px;min-width:100px;max-width:100%;padding:0px 10px;margin:0px;box-sizing:border-box;outline:none;box-shadow:none;border-width:0px 0px 1px;border-top-style:initial;border-right-style:initial;border-left-style:initial;border-top-color:initial;border-right-color:initial;border-left-color:initial;border-image:initial;border-bottom-style:dashed;border-bottom-color:rgb(123,146,254);background:transparent;animation:0.3s ease-in-out 0s 1 normal none running width;text-align:inherit;" data-key="'.concat(t.replace(/[^a-zA-Z0-9]+/gm,""),'"/>');dt=dt.replace(new RegExp(t.replace(/\[/g,"\\[").replace(/\]/g,"\\]"),"g"),e)})),jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;" data-node="test"><div style="display:flex;align-items:center;width:100%;height:100%;"><div style="width:100%">'.concat(dt,"</div></div></div>"));break;case"speech":jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;" data-node="test"><div style="display:flex;align-items:center;width:100%;height:100%;"><img src="images/svg/component/microphone4.svg" width="60" height="60"/></div></div>');break;case"submit":jQuery(t).html('<div xmlns="http://www.w3.org/1999/xhtml" style="width:100%;height:100%;display:block;" data-node="test"><img src="'.concat(null!==(ot=(null===(et=n.image)||void 0===et?void 0:et.path)?(null===(nt=c.icdt.config)||void 0===nt?void 0:nt.readfileuploadurl)+(null===(it=n.image)||void 0===it?void 0:it.path):null===(rt=n.image)||void 0===rt?void 0:rt.url)&&void 0!==ot?ot:"",'" style="width:100%;height:100%;display:block;"/></div>'))}jQuery(t).find("img[path],video[path],iframe[path]").each((function(t,e){var n,i;e.setAttribute("src",(null!==(i=null===(n=c.icdt.config)||void 0===n?void 0:n.readfileuploadurl)&&void 0!==i?i:"")+e.getAttribute("path")),e.removeAttribute("path")}))}}},e.icdt_SyncSvgNodeStyleActive=function(t,e){return e?jQuery(t).css({filter:"url(#nodeSelected)"}):jQuery(c.icdt.target).find("[style]").css("filter",""),t},e.icdt_SyncSvgNode4Design=function(t,e,n,i){var r=jQuery(i||c.icdt.target).find("#"+t).get(0);return r||((r=window.document.createElementNS("http://www.w3.org/2000/svg",e)).setAttribute("id",t),jQuery(r).appendTo(i||c.icdt.target)),jQuery(r).attr((null==n?void 0:n.attribute)||{}),jQuery(r).css((null==n?void 0:n.style)||{}),r},e.syncNodeCreate=function(t,n){var i=(0,s.icdt_ScaleNumber)(2),r={fill:u.svgCreate_RectCenterAttribute.fill,stroke:u.svgCreate_RectCenterAttribute.stroke,"stroke-width":(0,s.icdt_ScaleNumber)(u.svgCreate_RectCenterAttribute.strokeWidth)};return[{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-create-rect-center","rect",{attribute:Object.assign({x:n.x-i,y:n.y-i,width:n.width+2*i,height:n.height+2*i},r)},t),posType:"rect-center"}]},e.syncNodeResize=function(t,n){var i=n.size,r=(0,s.icdt_ScaleNumber)(1),o=(0,s.icdt_ScaleNumber)(2),a=(0,s.icdt_ScaleNumber)(5),c={stroke:u.svgDesign_LineAttribute.stroke,"stroke-width":(0,s.icdt_ScaleNumber)(u.svgDesign_LineAttribute.strokeWidth),"stroke-linecap":u.svgDesign_LineAttribute.strokeLinecap},l={fill:u.svgDesign_RectCenterAttribute.fill,stroke:u.svgDesign_RectCenterAttribute.stroke,"stroke-width":(0,s.icdt_ScaleNumber)(u.svgDesign_RectCenterAttribute.strokeWidth)},d={fill:u.svgDesign_RectAttribute.fill,stroke:u.svgDesign_RectAttribute.stroke,"stroke-width":(0,s.icdt_ScaleNumber)(u.svgDesign_RectAttribute.strokeWidth),width:(0,s.icdt_ScaleNumber)(u.svgDesign_RectAttribute.width),height:(0,s.icdt_ScaleNumber)(u.svgDesign_RectAttribute.height)};return(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-line-left","line",{attribute:Object.assign({x1:i.x-r,y1:i.y,x2:i.x-r,y2:i.y+i.height},c)},t),(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-line-top","line",{attribute:Object.assign({x1:i.x,y1:i.y-r,x2:i.x+i.width,y2:i.y-r},c)},t),(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-line-right","line",{attribute:Object.assign({x1:i.x+i.width+r,y1:i.y,x2:i.x+i.width+r,y2:i.y+i.height},c)},t),(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-line-bottom","line",{attribute:Object.assign({x1:i.x,y1:i.y+i.height+r,x2:i.x+i.width,y2:i.y+i.height+r},c)},t),[{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-rect-center","rect",{attribute:Object.assign({x:i.x,y:i.y,width:i.width,height:i.height},l),style:{cursor:"move"}},t),posType:"rect-center"},{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-rect-top-left","rect",{attribute:Object.assign({x:i.x-a,y:i.y-a},d),style:{cursor:"nw-resize"}},t),posType:"rect-top-left"},{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-rect-top-right","rect",{attribute:Object.assign({x:i.x+i.width-o,y:i.y-a},d),style:{cursor:"ne-resize"}},t),posType:"rect-top-right"},{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-rect-bottom-left","rect",{attribute:Object.assign({x:i.x-a,y:i.y+i.height-o},d),style:{cursor:"sw-resize"}},t),posType:"rect-bottom-left"},{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-rect-bottom-right","rect",{attribute:Object.assign({x:i.x+i.width-o,y:i.y+i.height-o},d),style:{cursor:"se-resize"}},t),posType:"rect-bottom-right"},{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-rect-top","rect",{attribute:Object.assign({x:i.x+i.width/2-o-r,y:i.y-a},d),style:{cursor:"n-resize"}},t),posType:"rect-top"},{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-rect-right","rect",{attribute:Object.assign({x:i.x+i.width-o,y:i.y+i.height/2-o-r},d),style:{cursor:"e-resize"}},t),posType:"rect-right"},{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-rect-bottom","rect",{attribute:Object.assign({x:i.x+i.width/2-o-r,y:i.y+i.height-o},d),style:{cursor:"s-resize"}},t),posType:"rect-bottom"},{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-resize-rect-left","rect",{attribute:Object.assign({x:i.x-a,y:i.y+i.height/2-o-r},d),style:{cursor:"w-resize"}},t),posType:"rect-left"}]},e.syncNodeSelect=function(t,n,i){var r=(0,s.icdt_ScaleNumber)(1),o={stroke:u.svgDesign_LineAttribute.stroke,"stroke-width":(0,s.icdt_ScaleNumber)(u.svgDesign_LineAttribute.strokeWidth),"stroke-linecap":u.svgDesign_LineAttribute.strokeLinecap},a={fill:u.svgDesign_RectCenterAttribute.fill,stroke:u.svgDesign_RectCenterAttribute.stroke,"stroke-width":(0,s.icdt_ScaleNumber)(u.svgDesign_RectCenterAttribute.strokeWidth)},c={fill:u.svgSelect_RectNodeAttribute.fill,stroke:u.svgSelect_RectNodeAttribute.stroke,"stroke-width":(0,s.icdt_ScaleNumber)(u.svgSelect_RectNodeAttribute.strokeWidth)},l=((0,e.icdt_SyncSvgNode4Design)("icdt-temp-select-line-left","line",{attribute:Object.assign({x1:i.x-r,y1:i.y,x2:i.x-r,y2:i.y+i.height},o)},t),(0,e.icdt_SyncSvgNode4Design)("icdt-temp-select-line-top","line",{attribute:Object.assign({x1:i.x,y1:i.y-r,x2:i.x+i.width,y2:i.y-r},o)},t),(0,e.icdt_SyncSvgNode4Design)("icdt-temp-select-line-right","line",{attribute:Object.assign({x1:i.x+i.width+r,y1:i.y,x2:i.x+i.width+r,y2:i.y+i.height},o)},t),(0,e.icdt_SyncSvgNode4Design)("icdt-temp-select-line-bottom","line",{attribute:Object.assign({x1:i.x,y1:i.y+i.height+r,x2:i.x+i.width,y2:i.y+i.height+r},o)},t),(0,e.icdt_SyncSvgNode4Design)("icdt-temp-select-rect-center","rect",{attribute:Object.assign({x:i.x,y:i.y,width:i.width,height:i.height},a)},t));return n.forEach((function(n){var i=n.size;(0,e.icdt_SyncSvgNode4Design)("icdt-temp-select-rect-node-"+n.id,"rect",{attribute:Object.assign({x:i.x,y:i.y,width:i.width,height:i.height},c)},t)})),[{element:l,posType:"rect-center"}]},e.syncNodeScan=function(t,n){var i=(0,s.icdt_ScaleNumber)(1),r={stroke:u.svgDesign_LineAttribute.stroke,"stroke-width":(0,s.icdt_ScaleNumber)(u.svgDesign_LineAttribute.strokeWidth),"stroke-linecap":u.svgDesign_LineAttribute.strokeLinecap},o={fill:u.svgDesign_RectCenterAttribute.fill,stroke:u.svgDesign_RectCenterAttribute.stroke,"stroke-width":(0,s.icdt_ScaleNumber)(u.svgDesign_RectCenterAttribute.strokeWidth)};return(0,e.icdt_SyncSvgNode4Design)("icdt-temp-scan-line-left","line",{attribute:Object.assign({x1:n.x-i,y1:n.y,x2:n.x-i,y2:n.y+n.height},r)},t),(0,e.icdt_SyncSvgNode4Design)("icdt-temp-scan-line-top","line",{attribute:Object.assign({x1:n.x,y1:n.y-i,x2:n.x+n.width,y2:n.y-i},r)},t),(0,e.icdt_SyncSvgNode4Design)("icdt-temp-scan-line-right","line",{attribute:Object.assign({x1:n.x+n.width+i,y1:n.y,x2:n.x+n.width+i,y2:n.y+n.height},r)},t),(0,e.icdt_SyncSvgNode4Design)("icdt-temp-scan-line-bottom","line",{attribute:Object.assign({x1:n.x,y1:n.y+n.height+i,x2:n.x+n.width,y2:n.y+n.height+i},r)},t),[{element:(0,e.icdt_SyncSvgNode4Design)("icdt-temp-scan-rect-center","rect",{attribute:Object.assign({x:n.x,y:n.y,width:n.width,height:n.height},o)},t),posType:"rect-center"}]},e.syncNodeInteractive=function(t,n){(0,s.icdt_ScaleNumber)(-1),u.svgInteractive_LineAttribute.stroke,(0,s.icdt_ScaleNumber)(u.svgInteractive_LineAttribute.strokeWidth),u.svgInteractive_LineAttribute.strokeLinecap,(0,s.icdt_ScaleNumber)(u.svgInteractive_LineAttribute.strokeDasharray);var i={fill:u.svgInteractive_RectCenterAttribute.fill};return(0,e.icdt_SyncSvgNode4Design)("icdt-temp-interactive-rect-center","rect",{attribute:Object.assign({x:n.x,y:n.y,width:n.width,height:n.height,class:"cursor-draw"},i)},t),[]},e.syncNodeIndex=function(t,n){var i={fill:u.svgSetIdx_RectNodeAttribute.fill,stroke:u.svgSetIdx_RectNodeAttribute.stroke,"stroke-width":(0,s.icdt_ScaleNumber)(u.svgSetIdx_RectNodeAttribute.strokeWidth),"stroke-dasharray":(0,s.icdt_ScaleNumber)(u.svgSetIdx_RectNodeAttribute.strokeDasharray)};jQuery(t).empty(),n.forEach((function(r){var o,a,u=r.size;if(r.idx){(0,e.icdt_SyncSvgNode4Design)("icdt-temp-index-rect-node-"+r.id,"rect",{attribute:Object.assign({x:u.x-5,y:u.y-5,width:u.width+10,height:u.height+10},i)},t);var c=(0,v.icdt_SvgForeignObject)(Math.ceil(1e9*Math.random()),{size:{x:u.x-76,y:u.y-6,width:70,height:80},attribute:{},style:{},source:{type:"html",html:{htmlContent:'<div class="position-slide" style="position:relative;width:100%;height:100%;">\n                  <div style="position:absolute;top:0;right:0;line-height:22px;">\n                    <div title="Thứ tự xuất hiện">\n                        <div style="float:right;">\n                          <span style="display:block;width:18px;float:left;text-align:center;">\n                            <i class="fa fa-play" style="margin:6px 0;color:#7da7d9;font-size:12px;"></i>\n                          </span>\n                          <span style="display:block;width:50px;float:left;">\n                            <input type="number" name="idx" value="'.concat(null!==(o=r.idx)&&void 0!==o?o:0,'" min="0" max="999" step="1" style="box-sizing:border-box;width:100%;padding:0;border:1px solid #ddd;outline:0;text-align:center;background:#eee;background: radial-gradient(#fff, #eee);font-size:12px;">\n                          </span>\n                        </div>\n                        <div style="clear:both;"></div>\n                    </div>\n                    <div title="Thời gian đợi(s), nếu giá trị = 0 sẽ chuyển sang đợi hoàn tất hoạt động và âm thanh" style="margin-top:2px;">\n                        <div style="float:right;">\n                          <span style="display:block;width:18px;float:left;text-align:center;">\n                            <i class="fa fa-clock-o" style="margin:5px 0;color:#7da7d9;font-size:14px;"></i>\n                          </span>\n                          <span style="display:block;width:50px;float:left;">\n                            <input type="number" name="time" value="').concat(null!==(a=r.time)&&void 0!==a?a:0,'" min="0" max="999" step="0.5" style="box-sizing:border-box;width:100%;padding:0;border:1px solid #ddd;outline:0;text-align:center;background:#eee;background: radial-gradient(#fff, #eee);font-size:12px;">\n                          </span>\n                        </div>\n                        <div style="clear:both;"></div>\n                    </div>\n                    <div title="Hủy thiết lập" style="margin-top:2px;">\n                        <div style="float:right;">\n                          <button name="remove" style="box-sizing:border-box;width:24px;height:24px;padding:0;border:1px solid #ddd;line-height: 0;outline:none;background:#eee;background: radial-gradient(#fff, #eee);">\n                            <img src="assets/icon-png/xoa2.png" height="18">\n                          </button>\n                        </div>\n                        <div style="clear:both;"></div>\n                    </div>\n                  </div>\n              </div>')}}},t).element;c.classList.add("node-input"),jQuery(c).on("change",'input[name="idx"]',(function(t){var e;r.idx=parseInt(null!==(e=t.target.value)&&void 0!==e?e:"0")})).on("change",'input[name="time"]',(function(t){var e;r.time=parseFloat(null!==(e=t.target.value)&&void 0!==e?e:"0")})).on("click",'button[name="remove"]',(function(i){r.idx=0,r.time=null,(0,e.syncNodeIndex)(t,n)}))}}))},e.syncBackground=function(t,e){var n,i,r,o,a,u,c=null!==(i=null===(n=null==e?void 0:e.svg)||void 0===n?void 0:n.background)&&void 0!==i?i:{},f=c.color,h=c.opacity,v=c.path,g=c.url,y=c.base64,_=null!==(o=null===(r=null==e?void 0:e.svg)||void 0===r?void 0:r.viewBox)&&void 0!==o?o:{x:0,y:0,width:0,height:0},b=_.x,m=_.y,w=_.width,x=_.height;(0,p.icdt_SvgText)(void 0,{size:{x:0,y:(0,s.icdt_ScaleNumber)(-21),width:w,height:x},attribute:{fill:"#999",fontSize:(0,s.icdt_ScaleNumber)(14),class:"hide-on-viewer"},source:{type:"text",text:{textContent:null!==(u=null!==(a=null==e?void 0:e.name)&&void 0!==a?a:null==e?void 0:e.code)&&void 0!==u?u:void 0}}},t),(0,l.icdt_SvgRect)(void 0,{size:{x:b,y:m,width:w,height:x},attribute:{fill:"#fff",stroke:"#999",strokeWidth:(0,s.icdt_ScaleNumber)(1),strokeDasharray:(0,s.icdt_ScaleNumber)(10),class:"hide-on-viewer"}},t),f&&(0,l.icdt_SvgRect)(void 0,{size:{x:b,y:m,width:w,height:x},attribute:{fill:f,fillOpacity:h}},t),v&&(0,d.icdt_SvgImage)(void 0,{size:{x:b,y:m,width:w,height:x},source:{type:"image",image:{path:v,url:g,base64:y}}},t)},e.syncTest=function(t,e){var n,i,r,o,a,u,c,s,d,v,p,g,y,_,b,m,w,x,S,M,E,k,T,N,A;switch(jQuery(t).empty(),null===(n=e.test)||void 0===n?void 0:n.type){case"truefalse":var O=null===(o=null===(r=null===(i=null==e?void 0:e.test)||void 0===i?void 0:i.answer)||void 0===r?void 0:r.truefalse)||void 0===o?void 0:o.value,R=null===(a=e.svg)||void 0===a?void 0:a.nodes.find((function(t){var e,n;return"submit"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)}));null===(u=e.svg)||void 0===u||u.nodes.filter((function(t){var e,n;return"truefalse"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)&&(t.id!=O||!R)})).forEach((function(e){var n,i=null!==(n=null==e?void 0:e.size)&&void 0!==n?n:{x:0,y:0,width:0,height:0},r=i.x,o=i.y,a=i.width,u=i.height;(0,f.icdt_SvgCircle)(Math.ceil(1e9*Math.random()),{size:{x:r-.5,y:o-.5,width:a+1,height:u+1},attribute:{fill:"none",stroke:"#5F6CE1",strokeWidth:1,strokeDasharray:4}},t)})),(null===(s=null===(c=null==e?void 0:e.test)||void 0===c?void 0:c.answer)||void 0===s?void 0:s.truefalse)&&O&&R&&function(){var e,n=h.icdt_Run.findNode(O),i=null!==(e=null==n?void 0:n.size)&&void 0!==e?e:{x:0,y:0,width:0,height:0},r=i.x,o=i.y,a=i.width,u=i.height;(0,f.icdt_SvgCircle)(Math.ceil(1e9*Math.random()),{size:{x:r-2,y:o-2,width:a+4,height:u+4},attribute:{fill:"none",stroke:"#5F6CE1",strokeWidth:4}},t)}();break;case"singlechoice":var C=null===(p=null===(v=null===(d=null==e?void 0:e.test)||void 0===d?void 0:d.answer)||void 0===v?void 0:v.singlechoice)||void 0===p?void 0:p.value,I=null===(g=e.svg)||void 0===g?void 0:g.nodes.find((function(t){var e,n;return"submit"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)}));null===(y=e.svg)||void 0===y||y.nodes.filter((function(t){var e,n;return"singlechoice"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)&&(t.id!=C||!I)})).forEach((function(e){var n,i=null!==(n=null==e?void 0:e.size)&&void 0!==n?n:{x:0,y:0,width:0,height:0},r=i.x,o=i.y,a=i.width,u=i.height;(0,f.icdt_SvgCircle)(Math.ceil(1e9*Math.random()),{size:{x:r-.5,y:o-.5,width:a+1,height:u+1},attribute:{fill:"none",stroke:"#5F6CE1",strokeWidth:1,strokeDasharray:4}},t)})),(null===(b=null===(_=null==e?void 0:e.test)||void 0===_?void 0:_.answer)||void 0===b?void 0:b.singlechoice)&&C&&I&&function(){var e,n=h.icdt_Run.findNode(C),i=null!==(e=null==n?void 0:n.size)&&void 0!==e?e:{x:0,y:0,width:0,height:0},r=i.x,o=i.y,a=i.width,u=i.height;(0,f.icdt_SvgCircle)(Math.ceil(1e9*Math.random()),{size:{x:r-2,y:o-2,width:a+4,height:u+4},attribute:{fill:"none",stroke:"#5F6CE1",strokeWidth:4}},t)}();break;case"multichoice":var j=null!==(S=null===(x=null===(w=null===(m=null==e?void 0:e.test)||void 0===m?void 0:m.answer)||void 0===w?void 0:w.multichoice)||void 0===x?void 0:x.map((function(t){return t.value})))&&void 0!==S?S:[],P=null===(M=e.svg)||void 0===M?void 0:M.nodes.find((function(t){var e,n;return"submit"==(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)}));null===(E=e.svg)||void 0===E||E.nodes.filter((function(t){var e,n;return!("multichoice"!=(null===(n=null===(e=t.source)||void 0===e?void 0:e.test)||void 0===n?void 0:n.type)||j.includes(t.id)&&P)})).forEach((function(e){var n,i=null!==(n=null==e?void 0:e.size)&&void 0!==n?n:{x:0,y:0,width:0,height:0},r=i.x,o=i.y,a=i.width,u=i.height;(0,l.icdt_SvgRect)(Math.ceil(1e9*Math.random()),{size:{x:r-.5,y:o-.5,width:a+1,height:u+1},attribute:{fill:"none",stroke:"#5F6CE1",strokeWidth:1,strokeDasharray:4}},t)})),(null===(T=null===(k=null==e?void 0:e.test)||void 0===k?void 0:k.answer)||void 0===T?void 0:T.multichoice)&&j.length&&P&&(null===(A=null===(N=null==e?void 0:e.test)||void 0===N?void 0:N.answer)||void 0===A||A.multichoice.forEach((function(e){var n,i=h.icdt_Run.findNode(e.value),r=null!==(n=null==i?void 0:i.size)&&void 0!==n?n:{x:0,y:0,width:0,height:0},o=r.x,a=r.y,u=r.width,c=r.height;(0,l.icdt_SvgRect)(Math.ceil(1e9*Math.random()),{size:{x:o-2,y:a-2,width:u+4,height:c+4},attribute:{fill:"none",stroke:"#5F6CE1",strokeWidth:4}},t)})))}}},825:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getMediaViewerUrl=void 0;var i=n(7144),r=n(8271);e.getMediaViewerUrl=function(t){var e,n,a,u,c;switch(null==t?void 0:t.type){case i.v_mediatype.IMAGE:return"assets/iframe/lib/mk-image-viewer/viewer.html?url="+t.readfileuploadurl+t.path;case i.v_mediatype.AUDIO:return"assets/iframe/lib/mk-audio-player/player.html?url="+t.readfileuploadurl+t.path;case i.v_mediatype.VIDEO:return"assets/iframe/lib/mk-video-player/player.html?url="+t.readfileuploadurl+t.path;case i.v_mediatype.OFFICE:return"https://view.officeapps.live.com/op/view.aspx?src="+t.readfileuploadurl+t.path;case i.v_mediatype.PDF:return"assets/iframe/lib/PDFReader/web/viewer.html?file="+t.readfileuploadurl+t.path;case i.v_mediatype.HTML:case i.v_mediatype.IMAGE_ANIMATION:case i.v_mediatype.PHET:return""+t.readfileuploadurl+t.path;case i.v_mediatype.ZIP:case i.v_mediatype.SCORM:return"imsmanifest.xml"==(null===(n=null===(e=t.path)||void 0===e?void 0:e.split("/"))||void 0===n?void 0:n.pop())?"assets/iframe/lib/ScormPool_Player/player.html?url="+t.readfileuploadurl+t.path:""+t.readfileuploadurl+t.path;case i.v_mediatype.TRACK:case i.v_mediatype.TEXT:return""+t.readfileuploadurl+t.path;case i.v_mediatype.LINK:switch(t.oss){case r.v_osstype.SCORM:return"assets/iframe/lib/ScormPool_Player/player.html?url="+t.url;case r.v_osstype.YOUTUBE:return null!==(a=o(t.url))&&void 0!==a?a:"";case r.v_osstype.PHET:return null!==(u=t.url)&&void 0!==u?u:"";default:return null!==(c=t.url)&&void 0!==c?c:""}default:return""+t.readfileuploadurl+t.path}};var o=function(t){var e=a(t);return e?"https://www.youtube.com/embed/"+e+"?"+jQuery.param({wmode:"opaque",border:0,hd:1,autoplay:!1,autohide:1,enablejsapi:1,modestbranding:1,version:3,hl:"vi_VN",rel:0,showinfo:0,iv_load_policy:3}):null},a=function(t){var e=null==t?void 0:t.match(/(?:.+?)?(?:\/v\/|watch\/|\?v\=|\&v\=|youtu\.be\/|\/v\=|^youtu\.be\/|embed\/)([a-zA-Z0-9_-]{11})+/);return e&&e.length>=2?e[1]:null}},7508:(t,e,n)=>{"use strict";function i(t,e){return null==t||null==e?NaN:t<e?-1:t>e?1:t>=e?0:NaN}function r(t,e){return null==t||null==e?NaN:e<t?-1:e>t?1:e>=t?0:NaN}function o(t){let e,n,o;function u(t,i,r=0,o=t.length){if(r<o){if(0!==e(i,i))return o;do{const e=r+o>>>1;n(t[e],i)<0?r=e+1:o=e}while(r<o)}return r}return 2!==t.length?(e=i,n=(e,n)=>i(t(e),n),o=(e,n)=>t(e)-n):(e=t===i||t===r?t:a,n=t,o=t),{left:u,center:function(t,e,n=0,i=t.length){const r=u(t,e,n,i-1);return r>n&&o(t[r-1],e)>-o(t[r],e)?r-1:r},right:function(t,i,r=0,o=t.length){if(r<o){if(0!==e(i,i))return o;do{const e=r+o>>>1;n(t[e],i)<=0?r=e+1:o=e}while(r<o)}return r}}}function a(){return 0}function u(t){return null===t?NaN:+t}n.r(e),n.d(e,{Adder:()=>A,Delaunay:()=>Yu,FormatSpecifier:()=>hl,InternMap:()=>C,InternSet:()=>I,Node:()=>Vp,Path:()=>da,Voronoi:()=>Uu,ZoomTransform:()=>qE,active:()=>go,arc:()=>RS,area:()=>LS,areaRadial:()=>$S,ascending:()=>i,autoType:()=>Nc,axisBottom:()=>be,axisLeft:()=>me,axisRight:()=>_e,axisTop:()=>ye,bin:()=>ht,bisect:()=>f,bisectCenter:()=>d,bisectLeft:()=>l,bisectRight:()=>s,bisector:()=>o,blob:()=>ys,blur:()=>h,blur2:()=>v,blurImage:()=>p,brush:()=>Ho,brushSelection:()=>Go,brushX:()=>Uo,brushY:()=>Ko,buffer:()=>bs,chord:()=>na,chordDirected:()=>ra,chordTranspose:()=>ia,cluster:()=>Rp,color:()=>fi,contourDensity:()=>mu,contours:()=>fu,count:()=>m,create:()=>oS,creator:()=>Tn,cross:()=>M,csv:()=>Ms,csvFormat:()=>pc,csvFormatBody:()=>gc,csvFormatRow:()=>_c,csvFormatRows:()=>yc,csvFormatValue:()=>bc,csvParse:()=>hc,csvParseRows:()=>vc,cubehelix:()=>nu,cumsum:()=>E,curveBasis:()=>VM,curveBasisClosed:()=>BM,curveBasisOpen:()=>GM,curveBumpX:()=>JS,curveBumpY:()=>ZS,curveBundle:()=>KM,curveCardinal:()=>qM,curveCardinalClosed:()=>YM,curveCardinalOpen:()=>XM,curveCatmullRom:()=>tE,curveCatmullRomClosed:()=>nE,curveCatmullRomOpen:()=>rE,curveLinear:()=>PS,curveLinearClosed:()=>aE,curveMonotoneX:()=>vE,curveMonotoneY:()=>pE,curveNatural:()=>_E,curveStep:()=>mE,curveStepAfter:()=>xE,curveStepBefore:()=>wE,descending:()=>r,deviation:()=>T,difference:()=>Xt,disjoint:()=>Jt,dispatch:()=>ke,drag:()=>nc,dragDisable:()=>Qn,dragEnable:()=>qn,dsv:()=>Ss,dsvFormat:()=>dc,easeBack:()=>ds,easeBackIn:()=>ss,easeBackInOut:()=>ds,easeBackOut:()=>ls,easeBounce:()=>as,easeBounceIn:()=>os,easeBounceInOut:()=>us,easeBounceOut:()=>as,easeCircle:()=>$c,easeCircleIn:()=>Qc,easeCircleInOut:()=>$c,easeCircleOut:()=>qc,easeCubic:()=>fo,easeCubicIn:()=>so,easeCubicInOut:()=>fo,easeCubicOut:()=>lo,easeElastic:()=>vs,easeElasticIn:()=>hs,easeElasticInOut:()=>ps,easeElasticOut:()=>vs,easeExp:()=>Hc,easeExpIn:()=>Uc,easeExpInOut:()=>Hc,easeExpOut:()=>Kc,easeLinear:()=>Oc,easePoly:()=>zc,easePolyIn:()=>jc,easePolyInOut:()=>zc,easePolyOut:()=>Pc,easeQuad:()=>Ic,easeQuadIn:()=>Rc,easeQuadInOut:()=>Ic,easeQuadOut:()=>Cc,easeSin:()=>Fc,easeSinIn:()=>Lc,easeSinInOut:()=>Fc,easeSinOut:()=>Bc,every:()=>Ht,extent:()=>N,fcumsum:()=>R,filter:()=>qt,flatGroup:()=>G,flatRollup:()=>U,forceCenter:()=>Is,forceCollide:()=>Qs,forceLink:()=>Ys,forceManyBody:()=>rl,forceRadial:()=>ol,forceSimulation:()=>il,forceX:()=>al,forceY:()=>ul,format:()=>_l,formatDefaultLocale:()=>Sl,formatLocale:()=>xl,formatPrefix:()=>bl,formatSpecifier:()=>fl,fsum:()=>O,geoAlbers:()=>Qv,geoAlbersUsa:()=>qv,geoArea:()=>Td,geoAzimuthalEqualArea:()=>Xv,geoAzimuthalEqualAreaRaw:()=>Wv,geoAzimuthalEquidistant:()=>Zv,geoAzimuthalEquidistantRaw:()=>Jv,geoBounds:()=>sf,geoCentroid:()=>wf,geoCircle:()=>Cf,geoClipAntimeridian:()=>Uf,geoClipCircle:()=>Kf,geoClipExtent:()=>Jf,geoClipRectangle:()=>Xf,geoConicConformal:()=>op,geoConicConformalRaw:()=>rp,geoConicEqualArea:()=>Hv,geoConicEqualAreaRaw:()=>Kv,geoConicEquidistant:()=>sp,geoConicEquidistantRaw:()=>cp,geoContains:()=>ph,geoDistance:()=>ah,geoEqualEarth:()=>gp,geoEqualEarthRaw:()=>pp,geoEquirectangular:()=>up,geoEquirectangularRaw:()=>ap,geoGnomonic:()=>_p,geoGnomonicRaw:()=>yp,geoGraticule:()=>_h,geoGraticule10:()=>bh,geoIdentity:()=>bp,geoInterpolate:()=>mh,geoLength:()=>ih,geoMercator:()=>ep,geoMercatorRaw:()=>tp,geoNaturalEarth1:()=>wp,geoNaturalEarth1Raw:()=>mp,geoOrthographic:()=>Sp,geoOrthographicRaw:()=>xp,geoPath:()=>Tv,geoProjection:()=>Fv,geoProjectionMutator:()=>Gv,geoRotation:()=>Af,geoStereographic:()=>Ep,geoStereographicRaw:()=>Mp,geoStream:()=>id,geoTransform:()=>Nv,geoTransverseMercator:()=>Tp,geoTransverseMercatorRaw:()=>kp,gray:()=>za,greatest:()=>mt,greatestIndex:()=>Dt,group:()=>L,groupSort:()=>tt,groups:()=>B,hcl:()=>Ha,hierarchy:()=>Ip,histogram:()=>ht,hsl:()=>Ei,html:()=>Rs,image:()=>ks,index:()=>Q,indexes:()=>q,interpolate:()=>Xi,interpolateArray:()=>Ui,interpolateBasis:()=>Ri,interpolateBasisClosed:()=>Ci,interpolateBlues:()=>Cx,interpolateBrBG:()=>Kw,interpolateBuGn:()=>cx,interpolateBuPu:()=>lx,interpolateCividis:()=>Ux,interpolateCool:()=>Qx,interpolateCubehelix:()=>Jg,interpolateCubehelixDefault:()=>Kx,interpolateCubehelixLong:()=>Zg,interpolateDate:()=>Hi,interpolateDiscrete:()=>Lg,interpolateGnBu:()=>fx,interpolateGreens:()=>jx,interpolateGreys:()=>zx,interpolateHcl:()=>Yg,interpolateHclLong:()=>Wg,interpolateHsl:()=>Hg,interpolateHslLong:()=>Qg,interpolateHue:()=>Bg,interpolateInferno:()=>iS,interpolateLab:()=>qg,interpolateMagma:()=>nS,interpolateNumber:()=>Qi,interpolateNumberArray:()=>Fi,interpolateObject:()=>qi,interpolateOrRd:()=>vx,interpolateOranges:()=>Gx,interpolatePRGn:()=>Qw,interpolatePiYG:()=>$w,interpolatePlasma:()=>rS,interpolatePuBu:()=>_x,interpolatePuBuGn:()=>gx,interpolatePuOr:()=>Ww,interpolatePuRd:()=>mx,interpolatePurples:()=>Vx,interpolateRainbow:()=>$x,interpolateRdBu:()=>Jw,interpolateRdGy:()=>tx,interpolateRdPu:()=>xx,interpolateRdYlBu:()=>nx,interpolateRdYlGn:()=>rx,interpolateReds:()=>Bx,interpolateRgb:()=>Di,interpolateRgbBasis:()=>Li,interpolateRgbBasisClosed:()=>Bi,interpolateRound:()=>Fg,interpolateSinebow:()=>Jx,interpolateSpectral:()=>ax,interpolateString:()=>Wi,interpolateTransformCss:()=>Vr,interpolateTransformSvg:()=>Lr,interpolateTurbo:()=>Zx,interpolateViridis:()=>eS,interpolateWarm:()=>Hx,interpolateYlGn:()=>kx,interpolateYlGnBu:()=>Mx,interpolateYlOrBr:()=>Nx,interpolateYlOrRd:()=>Ox,interpolateZoom:()=>Ug,interrupt:()=>Cr,intersection:()=>Zt,interval:()=>KE,isoFormat:()=>FE,isoParse:()=>UE,json:()=>Ns,lab:()=>Da,lch:()=>Ka,least:()=>Pt,leastIndex:()=>zt,line:()=>VS,lineRadial:()=>qS,link:()=>iM,linkHorizontal:()=>rM,linkRadial:()=>aM,linkVertical:()=>oM,local:()=>uS,map:()=>$t,matcher:()=>Ce,max:()=>vt,maxIndex:()=>pt,mean:()=>kt,median:()=>Tt,medianIndex:()=>Nt,merge:()=>At,min:()=>gt,minIndex:()=>yt,mode:()=>Ot,namespace:()=>qe,namespaces:()=>Qe,nice:()=>dt,now:()=>dr,pack:()=>sg,packEnclose:()=>qp,packSiblings:()=>ug,pairs:()=>Rt,partition:()=>pg,path:()=>fa,pathRound:()=>ha,permute:()=>W,pie:()=>GS,piecewise:()=>ty,pointRadial:()=>YS,pointer:()=>Zi,pointers:()=>sS,polygonArea:()=>ny,polygonCentroid:()=>iy,polygonContains:()=>cy,polygonHull:()=>uy,polygonLength:()=>sy,precisionFixed:()=>Ml,precisionPrefix:()=>El,precisionRound:()=>kl,quadtree:()=>Vs,quantile:()=>wt,quantileIndex:()=>St,quantileSorted:()=>xt,quantize:()=>ey,quickselect:()=>_t,radialArea:()=>$S,radialLine:()=>qS,randomBates:()=>gy,randomBernoulli:()=>by,randomBeta:()=>xy,randomBinomial:()=>Sy,randomCauchy:()=>Ey,randomExponential:()=>yy,randomGamma:()=>wy,randomGeometric:()=>my,randomInt:()=>fy,randomIrwinHall:()=>py,randomLcg:()=>Ry,randomLogNormal:()=>vy,randomLogistic:()=>ky,randomNormal:()=>hy,randomPareto:()=>_y,randomPoisson:()=>Ty,randomUniform:()=>dy,randomWeibull:()=>My,range:()=>It,rank:()=>jt,reduce:()=>Yt,reverse:()=>Wt,rgb:()=>gi,ribbon:()=>Ma,ribbonArrow:()=>Ea,rollup:()=>K,rollups:()=>H,scaleBand:()=>zy,scaleDiverging:()=>Ew,scaleDivergingLog:()=>kw,scaleDivergingPow:()=>Nw,scaleDivergingSqrt:()=>Aw,scaleDivergingSymlog:()=>Tw,scaleIdentity:()=>Xy,scaleImplicit:()=>jy,scaleLinear:()=>Wy,scaleLog:()=>a_,scaleOrdinal:()=>Py,scalePoint:()=>Vy,scalePow:()=>p_,scaleQuantile:()=>b_,scaleQuantize:()=>m_,scaleRadial:()=>__,scaleSequential:()=>_w,scaleSequentialLog:()=>bw,scaleSequentialPow:()=>ww,scaleSequentialQuantile:()=>Sw,scaleSequentialSqrt:()=>xw,scaleSequentialSymlog:()=>mw,scaleSqrt:()=>g_,scaleSymlog:()=>l_,scaleThreshold:()=>w_,scaleTime:()=>vw,scaleUtc:()=>pw,scan:()=>Vt,schemeAccent:()=>Cw,schemeBlues:()=>Rx,schemeBrBG:()=>Uw,schemeBuGn:()=>ux,schemeBuPu:()=>sx,schemeCategory10:()=>Rw,schemeDark2:()=>Iw,schemeGnBu:()=>dx,schemeGreens:()=>Ix,schemeGreys:()=>Px,schemeObservable10:()=>jw,schemeOrRd:()=>hx,schemeOranges:()=>Fx,schemePRGn:()=>Hw,schemePaired:()=>Pw,schemePastel1:()=>zw,schemePastel2:()=>Dw,schemePiYG:()=>qw,schemePuBu:()=>yx,schemePuBuGn:()=>px,schemePuOr:()=>Yw,schemePuRd:()=>bx,schemePurples:()=>Dx,schemeRdBu:()=>Xw,schemeRdGy:()=>Zw,schemeRdPu:()=>wx,schemeRdYlBu:()=>ex,schemeRdYlGn:()=>ix,schemeReds:()=>Lx,schemeSet1:()=>Vw,schemeSet2:()=>Lw,schemeSet3:()=>Bw,schemeSpectral:()=>ox,schemeTableau10:()=>Fw,schemeYlGn:()=>Ex,schemeYlGnBu:()=>Sx,schemeYlOrBr:()=>Tx,schemeYlOrRd:()=>Ax,select:()=>Fn,selectAll:()=>lS,selection:()=>Bn,selector:()=>Ne,selectorAll:()=>Re,shuffle:()=>Lt,shuffler:()=>Bt,some:()=>Qt,sort:()=>X,stack:()=>TE,stackOffsetDiverging:()=>AE,stackOffsetExpand:()=>NE,stackOffsetNone:()=>SE,stackOffsetSilhouette:()=>OE,stackOffsetWiggle:()=>RE,stackOrderAppearance:()=>CE,stackOrderAscending:()=>jE,stackOrderDescending:()=>zE,stackOrderInsideOut:()=>DE,stackOrderNone:()=>ME,stackOrderReverse:()=>VE,stratify:()=>wg,style:()=>on,subset:()=>ie,sum:()=>Ft,superset:()=>ee,svg:()=>Cs,symbol:()=>jM,symbolAsterisk:()=>cM,symbolCircle:()=>sM,symbolCross:()=>lM,symbolDiamond:()=>hM,symbolDiamond2:()=>vM,symbolPlus:()=>pM,symbolSquare:()=>gM,symbolSquare2:()=>yM,symbolStar:()=>wM,symbolTimes:()=>RM,symbolTriangle:()=>SM,symbolTriangle2:()=>EM,symbolWye:()=>OM,symbolX:()=>RM,symbols:()=>CM,symbolsFill:()=>CM,symbolsStroke:()=>IM,text:()=>ws,thresholdFreedmanDiaconis:()=>Mt,thresholdScott:()=>Et,thresholdSturges:()=>ft,tickFormat:()=>$y,tickIncrement:()=>st,tickStep:()=>lt,ticks:()=>ct,timeDay:()=>U_,timeDays:()=>K_,timeFormat:()=>Ub,timeFormatDefaultLocale:()=>lw,timeFormatLocale:()=>Fb,timeFriday:()=>eb,timeFridays:()=>cb,timeHour:()=>L_,timeHours:()=>B_,timeInterval:()=>O_,timeMillisecond:()=>R_,timeMilliseconds:()=>C_,timeMinute:()=>P_,timeMinutes:()=>z_,timeMonday:()=>X_,timeMondays:()=>rb,timeMonth:()=>Eb,timeMonths:()=>kb,timeParse:()=>Kb,timeSaturday:()=>nb,timeSaturdays:()=>sb,timeSecond:()=>I_,timeSeconds:()=>j_,timeSunday:()=>W_,timeSundays:()=>ib,timeThursday:()=>tb,timeThursdays:()=>ub,timeTickInterval:()=>Db,timeTicks:()=>zb,timeTuesday:()=>J_,timeTuesdays:()=>ob,timeWednesday:()=>Z_,timeWednesdays:()=>ab,timeWeek:()=>W_,timeWeeks:()=>ib,timeYear:()=>Ab,timeYears:()=>Ob,timeout:()=>br,timer:()=>vr,timerFlush:()=>pr,transition:()=>ao,transpose:()=>Gt,tree:()=>Og,treemap:()=>Pg,treemapBinary:()=>zg,treemapDice:()=>vg,treemapResquarify:()=>Vg,treemapSlice:()=>Rg,treemapSliceDice:()=>Dg,treemapSquarify:()=>jg,tsv:()=>Es,tsvFormat:()=>Sc,tsvFormatBody:()=>Mc,tsvFormatRow:()=>kc,tsvFormatRows:()=>Ec,tsvFormatValue:()=>Tc,tsvParse:()=>wc,tsvParseRows:()=>xc,union:()=>re,unixDay:()=>q_,unixDays:()=>$_,utcDay:()=>H_,utcDays:()=>Q_,utcFormat:()=>Hb,utcFriday:()=>gb,utcFridays:()=>Sb,utcHour:()=>F_,utcHours:()=>G_,utcMillisecond:()=>R_,utcMilliseconds:()=>C_,utcMinute:()=>D_,utcMinutes:()=>V_,utcMonday:()=>fb,utcMondays:()=>bb,utcMonth:()=>Tb,utcMonths:()=>Nb,utcParse:()=>Qb,utcSaturday:()=>yb,utcSaturdays:()=>Mb,utcSecond:()=>I_,utcSeconds:()=>j_,utcSunday:()=>db,utcSundays:()=>_b,utcThursday:()=>pb,utcThursdays:()=>xb,utcTickInterval:()=>Pb,utcTicks:()=>jb,utcTuesday:()=>hb,utcTuesdays:()=>mb,utcWednesday:()=>vb,utcWednesdays:()=>wb,utcWeek:()=>db,utcWeeks:()=>_b,utcYear:()=>Rb,utcYears:()=>Cb,variance:()=>k,window:()=>tn,xml:()=>Os,zip:()=>Kt,zoom:()=>rk,zoomIdentity:()=>$E,zoomTransform:()=>YE});const c=o(i),s=c.right,l=c.left,d=o(u).center,f=s;function h(t,e){if(!((e=+e)>=0))throw new RangeError("invalid r");let n=t.length;if(!((n=Math.floor(n))>=0))throw new RangeError("invalid length");if(!n||!e)return t;const i=b(e),r=t.slice();return i(t,r,0,n,1),i(r,t,0,n,1),i(t,r,0,n,1),t}const v=g(b),p=g((function(t){const e=b(t);return(t,n,i,r,o)=>{e(t,n,0+(i<<=2),0+(r<<=2),o<<=2),e(t,n,i+1,r+1,o),e(t,n,i+2,r+2,o),e(t,n,i+3,r+3,o)}}));function g(t){return function(e,n,i=n){if(!((n=+n)>=0))throw new RangeError("invalid rx");if(!((i=+i)>=0))throw new RangeError("invalid ry");let{data:r,width:o,height:a}=e;if(!((o=Math.floor(o))>=0))throw new RangeError("invalid width");if(!((a=Math.floor(void 0!==a?a:r.length/o))>=0))throw new RangeError("invalid height");if(!o||!a||!n&&!i)return e;const u=n&&t(n),c=i&&t(i),s=r.slice();return u&&c?(y(u,s,r,o,a),y(u,r,s,o,a),y(u,s,r,o,a),_(c,r,s,o,a),_(c,s,r,o,a),_(c,r,s,o,a)):u?(y(u,r,s,o,a),y(u,s,r,o,a),y(u,r,s,o,a)):c&&(_(c,r,s,o,a),_(c,s,r,o,a),_(c,r,s,o,a)),e}}function y(t,e,n,i,r){for(let o=0,a=i*r;o<a;)t(e,n,o,o+=i,1)}function _(t,e,n,i,r){for(let o=0,a=i*r;o<i;++o)t(e,n,o,o+a,i)}function b(t){const e=Math.floor(t);if(e===t)return function(t){const e=2*t+1;return(n,i,r,o,a)=>{if(!((o-=a)>=r))return;let u=t*i[r];const c=a*t;for(let t=r,e=r+c;t<e;t+=a)u+=i[Math.min(o,t)];for(let t=r,s=o;t<=s;t+=a)u+=i[Math.min(o,t+c)],n[t]=u/e,u-=i[Math.max(r,t-c)]}}(t);const n=t-e,i=2*t+1;return(t,r,o,a,u)=>{if(!((a-=u)>=o))return;let c=e*r[o];const s=u*e,l=s+u;for(let t=o,e=o+s;t<e;t+=u)c+=r[Math.min(a,t)];for(let e=o,d=a;e<=d;e+=u)c+=r[Math.min(a,e+s)],t[e]=(c+n*(r[Math.max(o,e-l)]+r[Math.min(a,e+l)]))/i,c-=r[Math.max(o,e-s)]}}function m(t,e){let n=0;if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&++n;else{let i=-1;for(let r of t)null!=(r=e(r,++i,t))&&(r=+r)>=r&&++n}return n}function w(t){return 0|t.length}function x(t){return!(t>0)}function S(t){return"object"!=typeof t||"length"in t?t:Array.from(t)}function M(...t){const e="function"==typeof t[t.length-1]&&function(t){return e=>t(...e)}(t.pop()),n=(t=t.map(S)).map(w),i=t.length-1,r=new Array(i+1).fill(0),o=[];if(i<0||n.some(x))return o;for(;;){o.push(r.map(((e,n)=>t[n][e])));let a=i;for(;++r[a]===n[a];){if(0===a)return e?o.map(e):o;r[a--]=0}}}function E(t,e){var n=0,i=0;return Float64Array.from(t,void 0===e?t=>n+=+t||0:r=>n+=+e(r,i++,t)||0)}function k(t,e){let n,i=0,r=0,o=0;if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(n=e-r,r+=n/++i,o+=n*(e-r));else{let a=-1;for(let u of t)null!=(u=e(u,++a,t))&&(u=+u)>=u&&(n=u-r,r+=n/++i,o+=n*(u-r))}if(i>1)return o/(i-1)}function T(t,e){const n=k(t,e);return n?Math.sqrt(n):n}function N(t,e){let n,i;if(void 0===e)for(const e of t)null!=e&&(void 0===n?e>=e&&(n=i=e):(n>e&&(n=e),i<e&&(i=e)));else{let r=-1;for(let o of t)null!=(o=e(o,++r,t))&&(void 0===n?o>=o&&(n=i=o):(n>o&&(n=o),i<o&&(i=o)))}return[n,i]}class A{constructor(){this._partials=new Float64Array(32),this._n=0}add(t){const e=this._partials;let n=0;for(let i=0;i<this._n&&i<32;i++){const r=e[i],o=t+r,a=Math.abs(t)<Math.abs(r)?t-(o-r):r-(o-t);a&&(e[n++]=a),t=o}return e[n]=t,this._n=n+1,this}valueOf(){const t=this._partials;let e,n,i,r=this._n,o=0;if(r>0){for(o=t[--r];r>0&&(e=o,n=t[--r],o=e+n,i=n-(o-e),!i););r>0&&(i<0&&t[r-1]<0||i>0&&t[r-1]>0)&&(n=2*i,e=o+n,n==e-o&&(o=e))}return o}}function O(t,e){const n=new A;if(void 0===e)for(let e of t)(e=+e)&&n.add(e);else{let i=-1;for(let r of t)(r=+e(r,++i,t))&&n.add(r)}return+n}function R(t,e){const n=new A;let i=-1;return Float64Array.from(t,void 0===e?t=>n.add(+t||0):r=>n.add(+e(r,++i,t)||0))}class C extends Map{constructor(t,e=D){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:e}}),null!=t)for(const[e,n]of t)this.set(e,n)}get(t){return super.get(j(this,t))}has(t){return super.has(j(this,t))}set(t,e){return super.set(P(this,t),e)}delete(t){return super.delete(z(this,t))}}class I extends Set{constructor(t,e=D){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:e}}),null!=t)for(const e of t)this.add(e)}has(t){return super.has(j(this,t))}add(t){return super.add(P(this,t))}delete(t){return super.delete(z(this,t))}}function j({_intern:t,_key:e},n){const i=e(n);return t.has(i)?t.get(i):n}function P({_intern:t,_key:e},n){const i=e(n);return t.has(i)?t.get(i):(t.set(i,n),n)}function z({_intern:t,_key:e},n){const i=e(n);return t.has(i)&&(n=t.get(i),t.delete(i)),n}function D(t){return null!==t&&"object"==typeof t?t.valueOf():t}function V(t){return t}function L(t,...e){return Y(t,V,V,e)}function B(t,...e){return Y(t,Array.from,V,e)}function F(t,e){for(let n=1,i=e.length;n<i;++n)t=t.flatMap((t=>t.pop().map((([e,n])=>[...t,e,n]))));return t}function G(t,...e){return F(B(t,...e),e)}function U(t,e,...n){return F(H(t,e,...n),n)}function K(t,e,...n){return Y(t,V,e,n)}function H(t,e,...n){return Y(t,Array.from,e,n)}function Q(t,...e){return Y(t,V,$,e)}function q(t,...e){return Y(t,Array.from,$,e)}function $(t){if(1!==t.length)throw new Error("duplicate key");return t[0]}function Y(t,e,n,i){return function t(r,o){if(o>=i.length)return n(r);const a=new C,u=i[o++];let c=-1;for(const t of r){const e=u(t,++c,r),n=a.get(e);n?n.push(t):a.set(e,[t])}for(const[e,n]of a)a.set(e,t(n,o));return e(a)}(t,0)}function W(t,e){return Array.from(e,(e=>t[e]))}function X(t,...e){if("function"!=typeof t[Symbol.iterator])throw new TypeError("values is not iterable");t=Array.from(t);let[n]=e;if(n&&2!==n.length||e.length>1){const i=Uint32Array.from(t,((t,e)=>e));return e.length>1?(e=e.map((e=>t.map(e))),i.sort(((t,n)=>{for(const i of e){const e=Z(i[t],i[n]);if(e)return e}}))):(n=t.map(n),i.sort(((t,e)=>Z(n[t],n[e])))),W(t,i)}return t.sort(J(n))}function J(t=i){if(t===i)return Z;if("function"!=typeof t)throw new TypeError("compare is not a function");return(e,n)=>{const i=t(e,n);return i||0===i?i:(0===t(n,n))-(0===t(e,e))}}function Z(t,e){return(null==t||!(t>=t))-(null==e||!(e>=e))||(t<e?-1:t>e?1:0)}function tt(t,e,n){return(2!==e.length?X(K(t,e,n),(([t,e],[n,r])=>i(e,r)||i(t,n))):X(L(t,n),(([t,n],[r,o])=>e(n,o)||i(t,r)))).map((([t])=>t))}var et=Array.prototype,nt=et.slice;function it(t){return()=>t}et.map;const rt=Math.sqrt(50),ot=Math.sqrt(10),at=Math.sqrt(2);function ut(t,e,n){const i=(e-t)/Math.max(0,n),r=Math.floor(Math.log10(i)),o=i/Math.pow(10,r),a=o>=rt?10:o>=ot?5:o>=at?2:1;let u,c,s;return r<0?(s=Math.pow(10,-r)/a,u=Math.round(t*s),c=Math.round(e*s),u/s<t&&++u,c/s>e&&--c,s=-s):(s=Math.pow(10,r)*a,u=Math.round(t/s),c=Math.round(e/s),u*s<t&&++u,c*s>e&&--c),c<u&&.5<=n&&n<2?ut(t,e,2*n):[u,c,s]}function ct(t,e,n){if(!((n=+n)>0))return[];if((t=+t)==(e=+e))return[t];const i=e<t,[r,o,a]=i?ut(e,t,n):ut(t,e,n);if(!(o>=r))return[];const u=o-r+1,c=new Array(u);if(i)if(a<0)for(let t=0;t<u;++t)c[t]=(o-t)/-a;else for(let t=0;t<u;++t)c[t]=(o-t)*a;else if(a<0)for(let t=0;t<u;++t)c[t]=(r+t)/-a;else for(let t=0;t<u;++t)c[t]=(r+t)*a;return c}function st(t,e,n){return ut(t=+t,e=+e,n=+n)[2]}function lt(t,e,n){n=+n;const i=(e=+e)<(t=+t),r=i?st(e,t,n):st(t,e,n);return(i?-1:1)*(r<0?1/-r:r)}function dt(t,e,n){let i;for(;;){const r=st(t,e,n);if(r===i||0===r||!isFinite(r))return[t,e];r>0?(t=Math.floor(t/r)*r,e=Math.ceil(e/r)*r):r<0&&(t=Math.ceil(t*r)/r,e=Math.floor(e*r)/r),i=r}}function ft(t){return Math.max(1,Math.ceil(Math.log(m(t))/Math.LN2)+1)}function ht(){var t=V,e=N,n=ft;function i(i){Array.isArray(i)||(i=Array.from(i));var r,o,a,u=i.length,c=new Array(u);for(r=0;r<u;++r)c[r]=t(i[r],r,i);var s=e(c),l=s[0],d=s[1],h=n(c,l,d);if(!Array.isArray(h)){const t=d,n=+h;if(e===N&&([l,d]=dt(l,d,n)),(h=ct(l,d,n))[0]<=l&&(a=st(l,d,n)),h[h.length-1]>=d)if(t>=d&&e===N){const t=st(l,d,n);isFinite(t)&&(t>0?d=(Math.floor(d/t)+1)*t:t<0&&(d=(Math.ceil(d*-t)+1)/-t))}else h.pop()}for(var v=h.length,p=0,g=v;h[p]<=l;)++p;for(;h[g-1]>d;)--g;(p||g<v)&&(h=h.slice(p,g),v=g-p);var y,_=new Array(v+1);for(r=0;r<=v;++r)(y=_[r]=[]).x0=r>0?h[r-1]:l,y.x1=r<v?h[r]:d;if(isFinite(a)){if(a>0)for(r=0;r<u;++r)null!=(o=c[r])&&l<=o&&o<=d&&_[Math.min(v,Math.floor((o-l)/a))].push(i[r]);else if(a<0)for(r=0;r<u;++r)if(null!=(o=c[r])&&l<=o&&o<=d){const t=Math.floor((l-o)*a);_[Math.min(v,t+(h[t]<=o))].push(i[r])}}else for(r=0;r<u;++r)null!=(o=c[r])&&l<=o&&o<=d&&_[f(h,o,0,v)].push(i[r]);return _}return i.value=function(e){return arguments.length?(t="function"==typeof e?e:it(e),i):t},i.domain=function(t){return arguments.length?(e="function"==typeof t?t:it([t[0],t[1]]),i):e},i.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:it(Array.isArray(t)?nt.call(t):t),i):n},i}function vt(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n<e||void 0===n&&e>=e)&&(n=e);else{let i=-1;for(let r of t)null!=(r=e(r,++i,t))&&(n<r||void 0===n&&r>=r)&&(n=r)}return n}function pt(t,e){let n,i=-1,r=-1;if(void 0===e)for(const e of t)++r,null!=e&&(n<e||void 0===n&&e>=e)&&(n=e,i=r);else for(let o of t)null!=(o=e(o,++r,t))&&(n<o||void 0===n&&o>=o)&&(n=o,i=r);return i}function gt(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n>e||void 0===n&&e>=e)&&(n=e);else{let i=-1;for(let r of t)null!=(r=e(r,++i,t))&&(n>r||void 0===n&&r>=r)&&(n=r)}return n}function yt(t,e){let n,i=-1,r=-1;if(void 0===e)for(const e of t)++r,null!=e&&(n>e||void 0===n&&e>=e)&&(n=e,i=r);else for(let o of t)null!=(o=e(o,++r,t))&&(n>o||void 0===n&&o>=o)&&(n=o,i=r);return i}function _t(t,e,n=0,i=1/0,r){if(e=Math.floor(e),n=Math.floor(Math.max(0,n)),i=Math.floor(Math.min(t.length-1,i)),!(n<=e&&e<=i))return t;for(r=void 0===r?Z:J(r);i>n;){if(i-n>600){const o=i-n+1,a=e-n+1,u=Math.log(o),c=.5*Math.exp(2*u/3),s=.5*Math.sqrt(u*c*(o-c)/o)*(a-o/2<0?-1:1);_t(t,e,Math.max(n,Math.floor(e-a*c/o+s)),Math.min(i,Math.floor(e+(o-a)*c/o+s)),r)}const o=t[e];let a=n,u=i;for(bt(t,n,e),r(t[i],o)>0&&bt(t,n,i);a<u;){for(bt(t,a,u),++a,--u;r(t[a],o)<0;)++a;for(;r(t[u],o)>0;)--u}0===r(t[n],o)?bt(t,n,u):(++u,bt(t,u,i)),u<=e&&(n=u+1),e<=u&&(i=u-1)}return t}function bt(t,e,n){const i=t[e];t[e]=t[n],t[n]=i}function mt(t,e=i){let n,r=!1;if(1===e.length){let o;for(const a of t){const t=e(a);(r?i(t,o)>0:0===i(t,t))&&(n=a,o=t,r=!0)}}else for(const i of t)(r?e(i,n)>0:0===e(i,i))&&(n=i,r=!0);return n}function wt(t,e,n){if(t=Float64Array.from(function*(t,e){if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(yield e);else{let n=-1;for(let i of t)null!=(i=e(i,++n,t))&&(i=+i)>=i&&(yield i)}}(t,n)),(i=t.length)&&!isNaN(e=+e)){if(e<=0||i<2)return gt(t);if(e>=1)return vt(t);var i,r=(i-1)*e,o=Math.floor(r),a=vt(_t(t,o).subarray(0,o+1));return a+(gt(t.subarray(o+1))-a)*(r-o)}}function xt(t,e,n=u){if((i=t.length)&&!isNaN(e=+e)){if(e<=0||i<2)return+n(t[0],0,t);if(e>=1)return+n(t[i-1],i-1,t);var i,r=(i-1)*e,o=Math.floor(r),a=+n(t[o],o,t);return a+(+n(t[o+1],o+1,t)-a)*(r-o)}}function St(t,e,n=u){if(!isNaN(e=+e)){if(i=Float64Array.from(t,((e,i)=>u(n(t[i],i,t)))),e<=0)return yt(i);if(e>=1)return pt(i);var i,r=Uint32Array.from(t,((t,e)=>e)),o=i.length-1,a=Math.floor(o*e);return _t(r,a,0,o,((t,e)=>Z(i[t],i[e]))),(a=mt(r.subarray(0,a+1),(t=>i[t])))>=0?a:-1}}function Mt(t,e,n){const i=m(t),r=wt(t,.75)-wt(t,.25);return i&&r?Math.ceil((n-e)/(2*r*Math.pow(i,-1/3))):1}function Et(t,e,n){const i=m(t),r=T(t);return i&&r?Math.ceil((n-e)*Math.cbrt(i)/(3.49*r)):1}function kt(t,e){let n=0,i=0;if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(++n,i+=e);else{let r=-1;for(let o of t)null!=(o=e(o,++r,t))&&(o=+o)>=o&&(++n,i+=o)}if(n)return i/n}function Tt(t,e){return wt(t,.5,e)}function Nt(t,e){return St(t,.5,e)}function At(t){return Array.from(function*(t){for(const e of t)yield*e}(t))}function Ot(t,e){const n=new C;if(void 0===e)for(let e of t)null!=e&&e>=e&&n.set(e,(n.get(e)||0)+1);else{let i=-1;for(let r of t)null!=(r=e(r,++i,t))&&r>=r&&n.set(r,(n.get(r)||0)+1)}let i,r=0;for(const[t,e]of n)e>r&&(r=e,i=t);return i}function Rt(t,e=Ct){const n=[];let i,r=!1;for(const o of t)r&&n.push(e(i,o)),i=o,r=!0;return n}function Ct(t,e){return[t,e]}function It(t,e,n){t=+t,e=+e,n=(r=arguments.length)<2?(e=t,t=0,1):r<3?1:+n;for(var i=-1,r=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(r);++i<r;)o[i]=t+i*n;return o}function jt(t,e=i){if("function"!=typeof t[Symbol.iterator])throw new TypeError("values is not iterable");let n=Array.from(t);const r=new Float64Array(n.length);2!==e.length&&(n=n.map(e),e=i);const o=(t,i)=>e(n[t],n[i]);let a,u;return(t=Uint32Array.from(n,((t,e)=>e))).sort(e===i?(t,e)=>Z(n[t],n[e]):J(o)),t.forEach(((t,e)=>{const n=o(t,void 0===a?t:a);n>=0?((void 0===a||n>0)&&(a=t,u=e),r[t]=u):r[t]=NaN})),r}function Pt(t,e=i){let n,r=!1;if(1===e.length){let o;for(const a of t){const t=e(a);(r?i(t,o)<0:0===i(t,t))&&(n=a,o=t,r=!0)}}else for(const i of t)(r?e(i,n)<0:0===e(i,i))&&(n=i,r=!0);return n}function zt(t,e=i){if(1===e.length)return yt(t,e);let n,r=-1,o=-1;for(const i of t)++o,(r<0?0===e(i,i):e(i,n)<0)&&(n=i,r=o);return r}function Dt(t,e=i){if(1===e.length)return pt(t,e);let n,r=-1,o=-1;for(const i of t)++o,(r<0?0===e(i,i):e(i,n)>0)&&(n=i,r=o);return r}function Vt(t,e){const n=zt(t,e);return n<0?void 0:n}const Lt=Bt(Math.random);function Bt(t){return function(e,n=0,i=e.length){let r=i-(n=+n);for(;r;){const i=t()*r--|0,o=e[r+n];e[r+n]=e[i+n],e[i+n]=o}return e}}function Ft(t,e){let n=0;if(void 0===e)for(let e of t)(e=+e)&&(n+=e);else{let i=-1;for(let r of t)(r=+e(r,++i,t))&&(n+=r)}return n}function Gt(t){if(!(r=t.length))return[];for(var e=-1,n=gt(t,Ut),i=new Array(n);++e<n;)for(var r,o=-1,a=i[e]=new Array(r);++o<r;)a[o]=t[o][e];return i}function Ut(t){return t.length}function Kt(){return Gt(arguments)}function Ht(t,e){if("function"!=typeof e)throw new TypeError("test is not a function");let n=-1;for(const i of t)if(!e(i,++n,t))return!1;return!0}function Qt(t,e){if("function"!=typeof e)throw new TypeError("test is not a function");let n=-1;for(const i of t)if(e(i,++n,t))return!0;return!1}function qt(t,e){if("function"!=typeof e)throw new TypeError("test is not a function");const n=[];let i=-1;for(const r of t)e(r,++i,t)&&n.push(r);return n}function $t(t,e){if("function"!=typeof t[Symbol.iterator])throw new TypeError("values is not iterable");if("function"!=typeof e)throw new TypeError("mapper is not a function");return Array.from(t,((n,i)=>e(n,i,t)))}function Yt(t,e,n){if("function"!=typeof e)throw new TypeError("reducer is not a function");const i=t[Symbol.iterator]();let r,o,a=-1;if(arguments.length<3){if(({done:r,value:n}=i.next()),r)return;++a}for(;({done:r,value:o}=i.next()),!r;)n=e(n,o,++a,t);return n}function Wt(t){if("function"!=typeof t[Symbol.iterator])throw new TypeError("values is not iterable");return Array.from(t).reverse()}function Xt(t,...e){t=new I(t);for(const n of e)for(const e of n)t.delete(e);return t}function Jt(t,e){const n=e[Symbol.iterator](),i=new I;for(const e of t){if(i.has(e))return!1;let t,r;for(;({value:t,done:r}=n.next())&&!r;){if(Object.is(e,t))return!1;i.add(t)}}return!0}function Zt(t,...e){t=new I(t),e=e.map(te);t:for(const n of t)for(const i of e)if(!i.has(n)){t.delete(n);continue t}return t}function te(t){return t instanceof I?t:new I(t)}function ee(t,e){const n=t[Symbol.iterator](),i=new Set;for(const t of e){const e=ne(t);if(i.has(e))continue;let r,o;for(;({value:r,done:o}=n.next());){if(o)return!1;const t=ne(r);if(i.add(t),Object.is(e,t))break}}return!0}function ne(t){return null!==t&&"object"==typeof t?t.valueOf():t}function ie(t,e){return ee(e,t)}function re(...t){const e=new I;for(const n of t)for(const t of n)e.add(t);return e}function oe(t){return t}var ae=1,ue=2,ce=3,se=4,le=1e-6;function de(t){return"translate("+t+",0)"}function fe(t){return"translate(0,"+t+")"}function he(t){return e=>+t(e)}function ve(t,e){return e=Math.max(0,t.bandwidth()-2*e)/2,t.round()&&(e=Math.round(e)),n=>+t(n)+e}function pe(){return!this.__axis}function ge(t,e){var n=[],i=null,r=null,o=6,a=6,u=3,c="undefined"!=typeof window&&window.devicePixelRatio>1?0:.5,s=t===ae||t===se?-1:1,l=t===se||t===ue?"x":"y",d=t===ae||t===ce?de:fe;function f(f){var h=null==i?e.ticks?e.ticks.apply(e,n):e.domain():i,v=null==r?e.tickFormat?e.tickFormat.apply(e,n):oe:r,p=Math.max(o,0)+u,g=e.range(),y=+g[0]+c,_=+g[g.length-1]+c,b=(e.bandwidth?ve:he)(e.copy(),c),m=f.selection?f.selection():f,w=m.selectAll(".domain").data([null]),x=m.selectAll(".tick").data(h,e).order(),S=x.exit(),M=x.enter().append("g").attr("class","tick"),E=x.select("line"),k=x.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(M),E=E.merge(M.append("line").attr("stroke","currentColor").attr(l+"2",s*o)),k=k.merge(M.append("text").attr("fill","currentColor").attr(l,s*p).attr("dy",t===ae?"0em":t===ce?"0.71em":"0.32em")),f!==m&&(w=w.transition(f),x=x.transition(f),E=E.transition(f),k=k.transition(f),S=S.transition(f).attr("opacity",le).attr("transform",(function(t){return isFinite(t=b(t))?d(t+c):this.getAttribute("transform")})),M.attr("opacity",le).attr("transform",(function(t){var e=this.parentNode.__axis;return d((e&&isFinite(e=e(t))?e:b(t))+c)}))),S.remove(),w.attr("d",t===se||t===ue?a?"M"+s*a+","+y+"H"+c+"V"+_+"H"+s*a:"M"+c+","+y+"V"+_:a?"M"+y+","+s*a+"V"+c+"H"+_+"V"+s*a:"M"+y+","+c+"H"+_),x.attr("opacity",1).attr("transform",(function(t){return d(b(t)+c)})),E.attr(l+"2",s*o),k.attr(l,s*p).text(v),m.filter(pe).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===ue?"start":t===se?"end":"middle"),m.each((function(){this.__axis=b}))}return f.scale=function(t){return arguments.length?(e=t,f):e},f.ticks=function(){return n=Array.from(arguments),f},f.tickArguments=function(t){return arguments.length?(n=null==t?[]:Array.from(t),f):n.slice()},f.tickValues=function(t){return arguments.length?(i=null==t?null:Array.from(t),f):i&&i.slice()},f.tickFormat=function(t){return arguments.length?(r=t,f):r},f.tickSize=function(t){return arguments.length?(o=a=+t,f):o},f.tickSizeInner=function(t){return arguments.length?(o=+t,f):o},f.tickSizeOuter=function(t){return arguments.length?(a=+t,f):a},f.tickPadding=function(t){return arguments.length?(u=+t,f):u},f.offset=function(t){return arguments.length?(c=+t,f):c},f}function ye(t){return ge(ae,t)}function _e(t){return ge(ue,t)}function be(t){return ge(ce,t)}function me(t){return ge(se,t)}var we={value:()=>{}};function xe(){for(var t,e=0,n=arguments.length,i={};e<n;++e){if(!(t=arguments[e]+"")||t in i||/[\s.]/.test(t))throw new Error("illegal type: "+t);i[t]=[]}return new Se(i)}function Se(t){this._=t}function Me(t,e){for(var n,i=0,r=t.length;i<r;++i)if((n=t[i]).name===e)return n.value}function Ee(t,e,n){for(var i=0,r=t.length;i<r;++i)if(t[i].name===e){t[i]=we,t=t.slice(0,i).concat(t.slice(i+1));break}return null!=n&&t.push({name:e,value:n}),t}Se.prototype=xe.prototype={constructor:Se,on:function(t,e){var n,i,r=this._,o=(i=r,(t+"").trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!i.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))),a=-1,u=o.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<u;)if(n=(t=o[a]).type)r[n]=Ee(r[n],t.name,e);else if(null==e)for(n in r)r[n]=Ee(r[n],t.name,null);return this}for(;++a<u;)if((n=(t=o[a]).type)&&(n=Me(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Se(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,i,r=new Array(n),o=0;o<n;++o)r[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(i=this._[t]).length;o<n;++o)i[o].value.apply(e,r)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var i=this._[t],r=0,o=i.length;r<o;++r)i[r].value.apply(e,n)}};const ke=xe;function Te(){}function Ne(t){return null==t?Te:function(){return this.querySelector(t)}}function Ae(t){return null==t?[]:Array.isArray(t)?t:Array.from(t)}function Oe(){return[]}function Re(t){return null==t?Oe:function(){return this.querySelectorAll(t)}}function Ce(t){return function(){return this.matches(t)}}function Ie(t){return function(e){return e.matches(t)}}var je=Array.prototype.find;function Pe(){return this.firstElementChild}var ze=Array.prototype.filter;function De(){return Array.from(this.children)}function Ve(t){return new Array(t.length)}function Le(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function Be(t,e,n,i,r,o){for(var a,u=0,c=e.length,s=o.length;u<s;++u)(a=e[u])?(a.__data__=o[u],i[u]=a):n[u]=new Le(t,o[u]);for(;u<c;++u)(a=e[u])&&(r[u]=a)}function Fe(t,e,n,i,r,o,a){var u,c,s,l=new Map,d=e.length,f=o.length,h=new Array(d);for(u=0;u<d;++u)(c=e[u])&&(h[u]=s=a.call(c,c.__data__,u,e)+"",l.has(s)?r[u]=c:l.set(s,c));for(u=0;u<f;++u)s=a.call(t,o[u],u,o)+"",(c=l.get(s))?(i[u]=c,c.__data__=o[u],l.delete(s)):n[u]=new Le(t,o[u]);for(u=0;u<d;++u)(c=e[u])&&l.get(h[u])===c&&(r[u]=c)}function Ge(t){return t.__data__}function Ue(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function Ke(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}Le.prototype={constructor:Le,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var He="http://www.w3.org/1999/xhtml";const Qe={svg:"http://www.w3.org/2000/svg",xhtml:He,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function qe(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),Qe.hasOwnProperty(e)?{space:Qe[e],local:t}:t}function $e(t){return function(){this.removeAttribute(t)}}function Ye(t){return function(){this.removeAttributeNS(t.space,t.local)}}function We(t,e){return function(){this.setAttribute(t,e)}}function Xe(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function Je(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function Ze(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function tn(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function en(t){return function(){this.style.removeProperty(t)}}function nn(t,e,n){return function(){this.style.setProperty(t,e,n)}}function rn(t,e,n){return function(){var i=e.apply(this,arguments);null==i?this.style.removeProperty(t):this.style.setProperty(t,i,n)}}function on(t,e){return t.style.getPropertyValue(e)||tn(t).getComputedStyle(t,null).getPropertyValue(e)}function an(t){return function(){delete this[t]}}function un(t,e){return function(){this[t]=e}}function cn(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function sn(t){return t.trim().split(/^|\s+/)}function ln(t){return t.classList||new dn(t)}function dn(t){this._node=t,this._names=sn(t.getAttribute("class")||"")}function fn(t,e){for(var n=ln(t),i=-1,r=e.length;++i<r;)n.add(e[i])}function hn(t,e){for(var n=ln(t),i=-1,r=e.length;++i<r;)n.remove(e[i])}function vn(t){return function(){fn(this,t)}}function pn(t){return function(){hn(this,t)}}function gn(t,e){return function(){(e.apply(this,arguments)?fn:hn)(this,t)}}function yn(){this.textContent=""}function _n(t){return function(){this.textContent=t}}function bn(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function mn(){this.innerHTML=""}function wn(t){return function(){this.innerHTML=t}}function xn(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Sn(){this.nextSibling&&this.parentNode.appendChild(this)}function Mn(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function En(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===He&&e.documentElement.namespaceURI===He?e.createElement(t):e.createElementNS(n,t)}}function kn(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function Tn(t){var e=qe(t);return(e.local?kn:En)(e)}function Nn(){return null}function An(){var t=this.parentNode;t&&t.removeChild(this)}function On(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Rn(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Cn(t){return function(){var e=this.__on;if(e){for(var n,i=0,r=-1,o=e.length;i<o;++i)n=e[i],t.type&&n.type!==t.type||n.name!==t.name?e[++r]=n:this.removeEventListener(n.type,n.listener,n.options);++r?e.length=r:delete this.__on}}}function In(t,e,n){return function(){var i,r=this.__on,o=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(r)for(var a=0,u=r.length;a<u;++a)if((i=r[a]).type===t.type&&i.name===t.name)return this.removeEventListener(i.type,i.listener,i.options),this.addEventListener(i.type,i.listener=o,i.options=n),void(i.value=e);this.addEventListener(t.type,o,n),i={type:t.type,name:t.name,value:e,listener:o,options:n},r?r.push(i):this.__on=[i]}}function jn(t,e,n){var i=tn(t),r=i.CustomEvent;"function"==typeof r?r=new r(e,n):(r=i.document.createEvent("Event"),n?(r.initEvent(e,n.bubbles,n.cancelable),r.detail=n.detail):r.initEvent(e,!1,!1)),t.dispatchEvent(r)}function Pn(t,e){return function(){return jn(this,t,e)}}function zn(t,e){return function(){return jn(this,t,e.apply(this,arguments))}}dn.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Dn=[null];function Vn(t,e){this._groups=t,this._parents=e}function Ln(){return new Vn([[document.documentElement]],Dn)}Vn.prototype=Ln.prototype={constructor:Vn,select:function(t){"function"!=typeof t&&(t=Ne(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var o,a,u=e[r],c=u.length,s=i[r]=new Array(c),l=0;l<c;++l)(o=u[l])&&(a=t.call(o,o.__data__,l,u))&&("__data__"in o&&(a.__data__=o.__data__),s[l]=a);return new Vn(i,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return Ae(t.apply(this,arguments))}}(t):Re(t);for(var e=this._groups,n=e.length,i=[],r=[],o=0;o<n;++o)for(var a,u=e[o],c=u.length,s=0;s<c;++s)(a=u[s])&&(i.push(t.call(a,a.__data__,s,u)),r.push(a));return new Vn(i,r)},selectChild:function(t){return this.select(null==t?Pe:function(t){return function(){return je.call(this.children,t)}}("function"==typeof t?t:Ie(t)))},selectChildren:function(t){return this.selectAll(null==t?De:function(t){return function(){return ze.call(this.children,t)}}("function"==typeof t?t:Ie(t)))},filter:function(t){"function"!=typeof t&&(t=Ce(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var o,a=e[r],u=a.length,c=i[r]=[],s=0;s<u;++s)(o=a[s])&&t.call(o,o.__data__,s,a)&&c.push(o);return new Vn(i,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,Ge);var n,i=e?Fe:Be,r=this._parents,o=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var a=o.length,u=new Array(a),c=new Array(a),s=new Array(a),l=0;l<a;++l){var d=r[l],f=o[l],h=f.length,v=Ue(t.call(d,d&&d.__data__,l,r)),p=v.length,g=c[l]=new Array(p),y=u[l]=new Array(p);i(d,f,g,y,s[l]=new Array(h),v,e);for(var _,b,m=0,w=0;m<p;++m)if(_=g[m]){for(m>=w&&(w=m+1);!(b=y[w])&&++w<p;);_._next=b||null}}return(u=new Vn(u,r))._enter=c,u._exit=s,u},enter:function(){return new Vn(this._enter||this._groups.map(Ve),this._parents)},exit:function(){return new Vn(this._exit||this._groups.map(Ve),this._parents)},join:function(t,e,n){var i=this.enter(),r=this,o=this.exit();return"function"==typeof t?(i=t(i))&&(i=i.selection()):i=i.append(t+""),null!=e&&(r=e(r))&&(r=r.selection()),null==n?o.remove():n(o),i&&r?i.merge(r).order():r},merge:function(t){for(var e=t.selection?t.selection():t,n=this._groups,i=e._groups,r=n.length,o=i.length,a=Math.min(r,o),u=new Array(r),c=0;c<a;++c)for(var s,l=n[c],d=i[c],f=l.length,h=u[c]=new Array(f),v=0;v<f;++v)(s=l[v]||d[v])&&(h[v]=s);for(;c<r;++c)u[c]=n[c];return new Vn(u,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var i,r=t[e],o=r.length-1,a=r[o];--o>=0;)(i=r[o])&&(a&&4^i.compareDocumentPosition(a)&&a.parentNode.insertBefore(i,a),a=i);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=Ke);for(var n=this._groups,i=n.length,r=new Array(i),o=0;o<i;++o){for(var a,u=n[o],c=u.length,s=r[o]=new Array(c),l=0;l<c;++l)(a=u[l])&&(s[l]=a);s.sort(e)}return new Vn(r,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var i=t[e],r=0,o=i.length;r<o;++r){var a=i[r];if(a)return a}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,i=e.length;n<i;++n)for(var r,o=e[n],a=0,u=o.length;a<u;++a)(r=o[a])&&t.call(r,r.__data__,a,o);return this},attr:function(t,e){var n=qe(t);if(arguments.length<2){var i=this.node();return n.local?i.getAttributeNS(n.space,n.local):i.getAttribute(n)}return this.each((null==e?n.local?Ye:$e:"function"==typeof e?n.local?Ze:Je:n.local?Xe:We)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?en:"function"==typeof e?rn:nn)(t,e,null==n?"":n)):on(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?an:"function"==typeof e?cn:un)(t,e)):this.node()[t]},classed:function(t,e){var n=sn(t+"");if(arguments.length<2){for(var i=ln(this.node()),r=-1,o=n.length;++r<o;)if(!i.contains(n[r]))return!1;return!0}return this.each(("function"==typeof e?gn:e?vn:pn)(n,e))},text:function(t){return arguments.length?this.each(null==t?yn:("function"==typeof t?bn:_n)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?mn:("function"==typeof t?xn:wn)(t)):this.node().innerHTML},raise:function(){return this.each(Sn)},lower:function(){return this.each(Mn)},append:function(t){var e="function"==typeof t?t:Tn(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:Tn(t),i=null==e?Nn:"function"==typeof e?e:Ne(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),i.apply(this,arguments)||null)}))},remove:function(){return this.each(An)},clone:function(t){return this.select(t?Rn:On)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var i,r,o=function(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}(t+""),a=o.length;if(!(arguments.length<2)){for(u=e?In:Cn,i=0;i<a;++i)this.each(u(o[i],e,n));return this}var u=this.node().__on;if(u)for(var c,s=0,l=u.length;s<l;++s)for(i=0,c=u[s];i<a;++i)if((r=o[i]).type===c.type&&r.name===c.name)return c.value},dispatch:function(t,e){return this.each(("function"==typeof e?zn:Pn)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var i,r=t[e],o=0,a=r.length;o<a;++o)(i=r[o])&&(yield i)}};const Bn=Ln;function Fn(t){return"string"==typeof t?new Vn([[document.querySelector(t)]],[document.documentElement]):new Vn([[t]],Dn)}const Gn={passive:!1},Un={capture:!0,passive:!1};function Kn(t){t.stopImmediatePropagation()}function Hn(t){t.preventDefault(),t.stopImmediatePropagation()}function Qn(t){var e=t.document.documentElement,n=Fn(t).on("dragstart.drag",Hn,Un);"onselectstart"in e?n.on("selectstart.drag",Hn,Un):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}function qn(t,e){var n=t.document.documentElement,i=Fn(t).on("dragstart.drag",null);e&&(i.on("click.drag",Hn,Un),setTimeout((function(){i.on("click.drag",null)}),0)),"onselectstart"in n?i.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}function $n(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function Yn(t,e){var n=Object.create(t.prototype);for(var i in e)n[i]=e[i];return n}function Wn(){}var Xn=.7,Jn=1/Xn,Zn="\\s*([+-]?\\d+)\\s*",ti="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",ei="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",ni=/^#([0-9a-f]{3,8})$/,ii=new RegExp(`^rgb\\(${Zn},${Zn},${Zn}\\)$`),ri=new RegExp(`^rgb\\(${ei},${ei},${ei}\\)$`),oi=new RegExp(`^rgba\\(${Zn},${Zn},${Zn},${ti}\\)$`),ai=new RegExp(`^rgba\\(${ei},${ei},${ei},${ti}\\)$`),ui=new RegExp(`^hsl\\(${ti},${ei},${ei}\\)$`),ci=new RegExp(`^hsla\\(${ti},${ei},${ei},${ti}\\)$`),si={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function li(){return this.rgb().formatHex()}function di(){return this.rgb().formatRgb()}function fi(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=ni.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?hi(e):3===n?new yi(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?vi(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?vi(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=ii.exec(t))?new yi(e[1],e[2],e[3],1):(e=ri.exec(t))?new yi(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=oi.exec(t))?vi(e[1],e[2],e[3],e[4]):(e=ai.exec(t))?vi(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=ui.exec(t))?Si(e[1],e[2]/100,e[3]/100,1):(e=ci.exec(t))?Si(e[1],e[2]/100,e[3]/100,e[4]):si.hasOwnProperty(t)?hi(si[t]):"transparent"===t?new yi(NaN,NaN,NaN,0):null}function hi(t){return new yi(t>>16&255,t>>8&255,255&t,1)}function vi(t,e,n,i){return i<=0&&(t=e=n=NaN),new yi(t,e,n,i)}function pi(t){return t instanceof Wn||(t=fi(t)),t?new yi((t=t.rgb()).r,t.g,t.b,t.opacity):new yi}function gi(t,e,n,i){return 1===arguments.length?pi(t):new yi(t,e,n,null==i?1:i)}function yi(t,e,n,i){this.r=+t,this.g=+e,this.b=+n,this.opacity=+i}function _i(){return`#${xi(this.r)}${xi(this.g)}${xi(this.b)}`}function bi(){const t=mi(this.opacity);return`${1===t?"rgb(":"rgba("}${wi(this.r)}, ${wi(this.g)}, ${wi(this.b)}${1===t?")":`, ${t})`}`}function mi(t){return isNaN(t)?1:Math.max(0,Math.min(1,t))}function wi(t){return Math.max(0,Math.min(255,Math.round(t)||0))}function xi(t){return((t=wi(t))<16?"0":"")+t.toString(16)}function Si(t,e,n,i){return i<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new ki(t,e,n,i)}function Mi(t){if(t instanceof ki)return new ki(t.h,t.s,t.l,t.opacity);if(t instanceof Wn||(t=fi(t)),!t)return new ki;if(t instanceof ki)return t;var e=(t=t.rgb()).r/255,n=t.g/255,i=t.b/255,r=Math.min(e,n,i),o=Math.max(e,n,i),a=NaN,u=o-r,c=(o+r)/2;return u?(a=e===o?(n-i)/u+6*(n<i):n===o?(i-e)/u+2:(e-n)/u+4,u/=c<.5?o+r:2-o-r,a*=60):u=c>0&&c<1?0:a,new ki(a,u,c,t.opacity)}function Ei(t,e,n,i){return 1===arguments.length?Mi(t):new ki(t,e,n,null==i?1:i)}function ki(t,e,n,i){this.h=+t,this.s=+e,this.l=+n,this.opacity=+i}function Ti(t){return(t=(t||0)%360)<0?t+360:t}function Ni(t){return Math.max(0,Math.min(1,t||0))}function Ai(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Oi(t,e,n,i,r){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*i+a*r)/6}function Ri(t){var e=t.length-1;return function(n){var i=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),r=t[i],o=t[i+1],a=i>0?t[i-1]:2*r-o,u=i<e-1?t[i+2]:2*o-r;return Oi((n-i/e)*e,a,r,o,u)}}function Ci(t){var e=t.length;return function(n){var i=Math.floor(((n%=1)<0?++n:n)*e),r=t[(i+e-1)%e],o=t[i%e],a=t[(i+1)%e],u=t[(i+2)%e];return Oi((n-i/e)*e,r,o,a,u)}}$n(Wn,fi,{copy(t){return Object.assign(new this.constructor,this,t)},displayable(){return this.rgb().displayable()},hex:li,formatHex:li,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return Mi(this).formatHsl()},formatRgb:di,toString:di}),$n(yi,gi,Yn(Wn,{brighter(t){return t=null==t?Jn:Math.pow(Jn,t),new yi(this.r*t,this.g*t,this.b*t,this.opacity)},darker(t){return t=null==t?Xn:Math.pow(Xn,t),new yi(this.r*t,this.g*t,this.b*t,this.opacity)},rgb(){return this},clamp(){return new yi(wi(this.r),wi(this.g),wi(this.b),mi(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:_i,formatHex:_i,formatHex8:function(){return`#${xi(this.r)}${xi(this.g)}${xi(this.b)}${xi(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:bi,toString:bi})),$n(ki,Ei,Yn(Wn,{brighter(t){return t=null==t?Jn:Math.pow(Jn,t),new ki(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?Xn:Math.pow(Xn,t),new ki(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,i=n+(n<.5?n:1-n)*e,r=2*n-i;return new yi(Ai(t>=240?t-240:t+120,r,i),Ai(t,r,i),Ai(t<120?t+240:t-120,r,i),this.opacity)},clamp(){return new ki(Ti(this.h),Ni(this.s),Ni(this.l),mi(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const t=mi(this.opacity);return`${1===t?"hsl(":"hsla("}${Ti(this.h)}, ${100*Ni(this.s)}%, ${100*Ni(this.l)}%${1===t?")":`, ${t})`}`}}));const Ii=t=>()=>t;function ji(t,e){return function(n){return t+n*e}}function Pi(t,e){var n=e-t;return n?ji(t,n>180||n<-180?n-360*Math.round(n/360):n):Ii(isNaN(t)?e:t)}function zi(t,e){var n=e-t;return n?ji(t,n):Ii(isNaN(t)?e:t)}const Di=function t(e){var n=function(t){return 1==(t=+t)?zi:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(i){return Math.pow(t+i*e,n)}}(e,n,t):Ii(isNaN(e)?n:e)}}(e);function i(t,e){var i=n((t=gi(t)).r,(e=gi(e)).r),r=n(t.g,e.g),o=n(t.b,e.b),a=zi(t.opacity,e.opacity);return function(e){return t.r=i(e),t.g=r(e),t.b=o(e),t.opacity=a(e),t+""}}return i.gamma=t,i}(1);function Vi(t){return function(e){var n,i,r=e.length,o=new Array(r),a=new Array(r),u=new Array(r);for(n=0;n<r;++n)i=gi(e[n]),o[n]=i.r||0,a[n]=i.g||0,u[n]=i.b||0;return o=t(o),a=t(a),u=t(u),i.opacity=1,function(t){return i.r=o(t),i.g=a(t),i.b=u(t),i+""}}}var Li=Vi(Ri),Bi=Vi(Ci);function Fi(t,e){e||(e=[]);var n,i=t?Math.min(e.length,t.length):0,r=e.slice();return function(o){for(n=0;n<i;++n)r[n]=t[n]*(1-o)+e[n]*o;return r}}function Gi(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function Ui(t,e){return(Gi(e)?Fi:Ki)(t,e)}function Ki(t,e){var n,i=e?e.length:0,r=t?Math.min(i,t.length):0,o=new Array(r),a=new Array(i);for(n=0;n<r;++n)o[n]=Xi(t[n],e[n]);for(;n<i;++n)a[n]=e[n];return function(t){for(n=0;n<r;++n)a[n]=o[n](t);return a}}function Hi(t,e){var n=new Date;return t=+t,e=+e,function(i){return n.setTime(t*(1-i)+e*i),n}}function Qi(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function qi(t,e){var n,i={},r={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?i[n]=Xi(t[n],e[n]):r[n]=e[n];return function(t){for(n in i)r[n]=i[n](t);return r}}var $i=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Yi=new RegExp($i.source,"g");function Wi(t,e){var n,i,r,o=$i.lastIndex=Yi.lastIndex=0,a=-1,u=[],c=[];for(t+="",e+="";(n=$i.exec(t))&&(i=Yi.exec(e));)(r=i.index)>o&&(r=e.slice(o,r),u[a]?u[a]+=r:u[++a]=r),(n=n[0])===(i=i[0])?u[a]?u[a]+=i:u[++a]=i:(u[++a]=null,c.push({i:a,x:Qi(n,i)})),o=Yi.lastIndex;return o<e.length&&(r=e.slice(o),u[a]?u[a]+=r:u[++a]=r),u.length<2?c[0]?function(t){return function(e){return t(e)+""}}(c[0].x):function(t){return function(){return t}}(e):(e=c.length,function(t){for(var n,i=0;i<e;++i)u[(n=c[i]).i]=n.x(t);return u.join("")})}function Xi(t,e){var n,i=typeof e;return null==e||"boolean"===i?Ii(e):("number"===i?Qi:"string"===i?(n=fi(e))?(e=n,Di):Wi:e instanceof fi?Di:e instanceof Date?Hi:Gi(e)?Fi:Array.isArray(e)?Ki:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?qi:Qi)(t,e)}function Ji(t){let e;for(;e=t.sourceEvent;)t=e;return t}function Zi(t,e){if(t=Ji(t),void 0===e&&(e=t.currentTarget),e){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var i=n.createSVGPoint();return i.x=t.clientX,i.y=t.clientY,[(i=i.matrixTransform(e.getScreenCTM().inverse())).x,i.y]}if(e.getBoundingClientRect){var r=e.getBoundingClientRect();return[t.clientX-r.left-e.clientLeft,t.clientY-r.top-e.clientTop]}}return[t.pageX,t.pageY]}var tr,er,nr=0,ir=0,rr=0,or=1e3,ar=0,ur=0,cr=0,sr="object"==typeof performance&&performance.now?performance:Date,lr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function dr(){return ur||(lr(fr),ur=sr.now()+cr)}function fr(){ur=0}function hr(){this._call=this._time=this._next=null}function vr(t,e,n){var i=new hr;return i.restart(t,e,n),i}function pr(){dr(),++nr;for(var t,e=tr;e;)(t=ur-e._time)>=0&&e._call.call(void 0,t),e=e._next;--nr}function gr(){ur=(ar=sr.now())+cr,nr=ir=0;try{pr()}finally{nr=0,function(){for(var t,e,n=tr,i=1/0;n;)n._call?(i>n._time&&(i=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:tr=e);er=t,_r(i)}(),ur=0}}function yr(){var t=sr.now(),e=t-ar;e>or&&(cr-=e,ar=t)}function _r(t){nr||(ir&&(ir=clearTimeout(ir)),t-ur>24?(t<1/0&&(ir=setTimeout(gr,t-sr.now()-cr)),rr&&(rr=clearInterval(rr))):(rr||(ar=sr.now(),rr=setInterval(yr,or)),nr=1,lr(gr)))}function br(t,e,n){var i=new hr;return e=null==e?0:+e,i.restart((n=>{i.stop(),t(n+e)}),e,n),i}hr.prototype=vr.prototype={constructor:hr,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?dr():+n)+(null==e?0:+e),this._next||er===this||(er?er._next=this:tr=this,er=this),this._call=t,this._time=n,_r()},stop:function(){this._call&&(this._call=null,this._time=1/0,_r())}};var mr=ke("start","end","cancel","interrupt"),wr=[],xr=0,Sr=1,Mr=2,Er=3,kr=5,Tr=6;function Nr(t,e,n,i,r,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var i,r=t.__transition;function o(c){var s,l,d,f;if(n.state!==Sr)return u();for(s in r)if((f=r[s]).name===n.name){if(f.state===Er)return br(o);4===f.state?(f.state=Tr,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete r[s]):+s<e&&(f.state=Tr,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete r[s])}if(br((function(){n.state===Er&&(n.state=4,n.timer.restart(a,n.delay,n.time),a(c))})),n.state=Mr,n.on.call("start",t,t.__data__,n.index,n.group),n.state===Mr){for(n.state=Er,i=new Array(d=n.tween.length),s=0,l=-1;s<d;++s)(f=n.tween[s].value.call(t,t.__data__,n.index,n.group))&&(i[++l]=f);i.length=l+1}}function a(e){for(var r=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(u),n.state=kr,1),o=-1,a=i.length;++o<a;)i[o].call(t,r);n.state===kr&&(n.on.call("end",t,t.__data__,n.index,n.group),u())}function u(){for(var i in n.state=Tr,n.timer.stop(),delete r[e],r)return;delete t.__transition}r[e]=n,n.timer=vr((function(t){n.state=Sr,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}),0,n.time)}(t,n,{name:e,index:i,group:r,on:mr,tween:wr,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:xr})}function Ar(t,e){var n=Rr(t,e);if(n.state>xr)throw new Error("too late; already scheduled");return n}function Or(t,e){var n=Rr(t,e);if(n.state>Er)throw new Error("too late; already running");return n}function Rr(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function Cr(t,e){var n,i,r,o=t.__transition,a=!0;if(o){for(r in e=null==e?null:e+"",o)(n=o[r]).name===e?(i=n.state>Mr&&n.state<kr,n.state=Tr,n.timer.stop(),n.on.call(i?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[r]):a=!1;a&&delete t.__transition}}var Ir,jr=180/Math.PI,Pr={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function zr(t,e,n,i,r,o){var a,u,c;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(c=t*n+e*i)&&(n-=t*c,i-=e*c),(u=Math.sqrt(n*n+i*i))&&(n/=u,i/=u,c/=u),t*i<e*n&&(t=-t,e=-e,c=-c,a=-a),{translateX:r,translateY:o,rotate:Math.atan2(e,t)*jr,skewX:Math.atan(c)*jr,scaleX:a,scaleY:u}}function Dr(t,e,n,i){function r(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],c=[];return o=t(o),a=t(a),function(t,i,r,o,a,u){if(t!==r||i!==o){var c=a.push("translate(",null,e,null,n);u.push({i:c-4,x:Qi(t,r)},{i:c-2,x:Qi(i,o)})}else(r||o)&&a.push("translate("+r+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,u,c),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(r(n)+"rotate(",null,i)-2,x:Qi(t,e)})):e&&n.push(r(n)+"rotate("+e+i)}(o.rotate,a.rotate,u,c),function(t,e,n,o){t!==e?o.push({i:n.push(r(n)+"skewX(",null,i)-2,x:Qi(t,e)}):e&&n.push(r(n)+"skewX("+e+i)}(o.skewX,a.skewX,u,c),function(t,e,n,i,o,a){if(t!==n||e!==i){var u=o.push(r(o)+"scale(",null,",",null,")");a.push({i:u-4,x:Qi(t,n)},{i:u-2,x:Qi(e,i)})}else 1===n&&1===i||o.push(r(o)+"scale("+n+","+i+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,c),o=a=null,function(t){for(var e,n=-1,i=c.length;++n<i;)u[(e=c[n]).i]=e.x(t);return u.join("")}}}var Vr=Dr((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?Pr:zr(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),Lr=Dr((function(t){return null==t?Pr:(Ir||(Ir=document.createElementNS("http://www.w3.org/2000/svg","g")),Ir.setAttribute("transform",t),(t=Ir.transform.baseVal.consolidate())?zr((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Pr)}),", ",")",")");function Br(t,e){var n,i;return function(){var r=Or(this,t),o=r.tween;if(o!==n)for(var a=0,u=(i=n=o).length;a<u;++a)if(i[a].name===e){(i=i.slice()).splice(a,1);break}r.tween=i}}function Fr(t,e,n){var i,r;if("function"!=typeof n)throw new Error;return function(){var o=Or(this,t),a=o.tween;if(a!==i){r=(i=a).slice();for(var u={name:e,value:n},c=0,s=r.length;c<s;++c)if(r[c].name===e){r[c]=u;break}c===s&&r.push(u)}o.tween=r}}function Gr(t,e,n){var i=t._id;return t.each((function(){var t=Or(this,i);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return Rr(t,i).value[e]}}function Ur(t,e){var n;return("number"==typeof e?Qi:e instanceof fi?Di:(n=fi(e))?(e=n,Di):Wi)(t,e)}function Kr(t){return function(){this.removeAttribute(t)}}function Hr(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Qr(t,e,n){var i,r,o=n+"";return function(){var a=this.getAttribute(t);return a===o?null:a===i?r:r=e(i=a,n)}}function qr(t,e,n){var i,r,o=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===i?r:r=e(i=a,n)}}function $r(t,e,n){var i,r,o;return function(){var a,u,c=n(this);if(null!=c)return(a=this.getAttribute(t))===(u=c+"")?null:a===i&&u===r?o:(r=u,o=e(i=a,c));this.removeAttribute(t)}}function Yr(t,e,n){var i,r,o;return function(){var a,u,c=n(this);if(null!=c)return(a=this.getAttributeNS(t.space,t.local))===(u=c+"")?null:a===i&&u===r?o:(r=u,o=e(i=a,c));this.removeAttributeNS(t.space,t.local)}}function Wr(t,e){var n,i;function r(){var r=e.apply(this,arguments);return r!==i&&(n=(i=r)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}(t,r)),n}return r._value=e,r}function Xr(t,e){var n,i;function r(){var r=e.apply(this,arguments);return r!==i&&(n=(i=r)&&function(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}(t,r)),n}return r._value=e,r}function Jr(t,e){return function(){Ar(this,t).delay=+e.apply(this,arguments)}}function Zr(t,e){return e=+e,function(){Ar(this,t).delay=e}}function to(t,e){return function(){Or(this,t).duration=+e.apply(this,arguments)}}function eo(t,e){return e=+e,function(){Or(this,t).duration=e}}var no=Bn.prototype.constructor;function io(t){return function(){this.style.removeProperty(t)}}var ro=0;function oo(t,e,n,i){this._groups=t,this._parents=e,this._name=n,this._id=i}function ao(t){return Bn().transition(t)}function uo(){return++ro}var co=Bn.prototype;function so(t){return t*t*t}function lo(t){return--t*t*t+1}function fo(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}oo.prototype=ao.prototype={constructor:oo,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Ne(t));for(var i=this._groups,r=i.length,o=new Array(r),a=0;a<r;++a)for(var u,c,s=i[a],l=s.length,d=o[a]=new Array(l),f=0;f<l;++f)(u=s[f])&&(c=t.call(u,u.__data__,f,s))&&("__data__"in u&&(c.__data__=u.__data__),d[f]=c,Nr(d[f],e,n,f,d,Rr(u,n)));return new oo(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Re(t));for(var i=this._groups,r=i.length,o=[],a=[],u=0;u<r;++u)for(var c,s=i[u],l=s.length,d=0;d<l;++d)if(c=s[d]){for(var f,h=t.call(c,c.__data__,d,s),v=Rr(c,n),p=0,g=h.length;p<g;++p)(f=h[p])&&Nr(f,e,n,p,h,v);o.push(h),a.push(c)}return new oo(o,a,e,n)},selectChild:co.selectChild,selectChildren:co.selectChildren,filter:function(t){"function"!=typeof t&&(t=Ce(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var o,a=e[r],u=a.length,c=i[r]=[],s=0;s<u;++s)(o=a[s])&&t.call(o,o.__data__,s,a)&&c.push(o);return new oo(i,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,i=e.length,r=n.length,o=Math.min(i,r),a=new Array(i),u=0;u<o;++u)for(var c,s=e[u],l=n[u],d=s.length,f=a[u]=new Array(d),h=0;h<d;++h)(c=s[h]||l[h])&&(f[h]=c);for(;u<i;++u)a[u]=e[u];return new oo(a,this._parents,this._name,this._id)},selection:function(){return new no(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=uo(),i=this._groups,r=i.length,o=0;o<r;++o)for(var a,u=i[o],c=u.length,s=0;s<c;++s)if(a=u[s]){var l=Rr(a,e);Nr(a,t,n,s,u,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new oo(i,this._parents,t,n)},call:co.call,nodes:co.nodes,node:co.node,size:co.size,empty:co.empty,each:co.each,on:function(t,e){var n=this._id;return arguments.length<2?Rr(this.node(),n).on.on(t):this.each(function(t,e,n){var i,r,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?Ar:Or;return function(){var a=o(this,t),u=a.on;u!==i&&(r=(i=u).copy()).on(e,n),a.on=r}}(n,t,e))},attr:function(t,e){var n=qe(t),i="transform"===n?Lr:Ur;return this.attrTween(t,"function"==typeof e?(n.local?Yr:$r)(n,i,Gr(this,"attr."+t,e)):null==e?(n.local?Hr:Kr)(n):(n.local?qr:Qr)(n,i,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var i=qe(t);return this.tween(n,(i.local?Wr:Xr)(i,e))},style:function(t,e,n){var i="transform"==(t+="")?Vr:Ur;return null==e?this.styleTween(t,function(t,e){var n,i,r;return function(){var o=on(this,t),a=(this.style.removeProperty(t),on(this,t));return o===a?null:o===n&&a===i?r:r=e(n=o,i=a)}}(t,i)).on("end.style."+t,io(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var i,r,o;return function(){var a=on(this,t),u=n(this),c=u+"";return null==u&&(this.style.removeProperty(t),c=u=on(this,t)),a===c?null:a===i&&c===r?o:(r=c,o=e(i=a,u))}}(t,i,Gr(this,"style."+t,e))).each(function(t,e){var n,i,r,o,a="style."+e,u="end."+a;return function(){var c=Or(this,t),s=c.on,l=null==c.value[a]?o||(o=io(e)):void 0;s===n&&r===l||(i=(n=s).copy()).on(u,r=l),c.on=i}}(this._id,t)):this.styleTween(t,function(t,e,n){var i,r,o=n+"";return function(){var a=on(this,t);return a===o?null:a===i?r:r=e(i=a,n)}}(t,i,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var i="style."+(t+="");if(arguments.length<2)return(i=this.tween(i))&&i._value;if(null==e)return this.tween(i,null);if("function"!=typeof e)throw new Error;return this.tween(i,function(t,e,n){var i,r;function o(){var o=e.apply(this,arguments);return o!==r&&(i=(r=o)&&function(t,e,n){return function(i){this.style.setProperty(t,e.call(this,i),n)}}(t,o,n)),i}return o._value=e,o}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Gr(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,function(t){var e,n;function i(){var i=t.apply(this,arguments);return i!==n&&(e=(n=i)&&function(t){return function(e){this.textContent=t.call(this,e)}}(i)),e}return i._value=t,i}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var i,r=Rr(this.node(),n).tween,o=0,a=r.length;o<a;++o)if((i=r[o]).name===t)return i.value;return null}return this.each((null==e?Br:Fr)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Jr:Zr)(e,t)):Rr(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?to:eo)(e,t)):Rr(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){Or(this,t).ease=e}}(e,t)):Rr(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;Or(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,i=n._id,r=n.size();return new Promise((function(o,a){var u={value:a},c={value:function(){0==--r&&o()}};n.each((function(){var n=Or(this,i),r=n.on;r!==t&&((e=(t=r).copy())._.cancel.push(u),e._.interrupt.push(u),e._.end.push(c)),n.on=e})),0===r&&o()}))},[Symbol.iterator]:co[Symbol.iterator]};var ho={time:null,delay:0,duration:250,ease:fo};function vo(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}Bn.prototype.interrupt=function(t){return this.each((function(){Cr(this,t)}))},Bn.prototype.transition=function(t){var e,n;t instanceof oo?(e=t._id,t=t._name):(e=uo(),(n=ho).time=dr(),t=null==t?null:t+"");for(var i=this._groups,r=i.length,o=0;o<r;++o)for(var a,u=i[o],c=u.length,s=0;s<c;++s)(a=u[s])&&Nr(a,t,e,s,u,n||vo(a,e));return new oo(i,this._parents,t,e)};var po=[null];function go(t,e){var n,i,r=t.__transition;if(r)for(i in e=null==e?null:e+"",r)if((n=r[i]).state>Sr&&n.name===e)return new oo([[t]],po,e,+i);return null}const yo=t=>()=>t;function _o(t,{sourceEvent:e,target:n,selection:i,mode:r,dispatch:o}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:e,enumerable:!0,configurable:!0},target:{value:n,enumerable:!0,configurable:!0},selection:{value:i,enumerable:!0,configurable:!0},mode:{value:r,enumerable:!0,configurable:!0},_:{value:o}})}function bo(t){t.preventDefault(),t.stopImmediatePropagation()}var mo={name:"drag"},wo={name:"space"},xo={name:"handle"},So={name:"center"};const{abs:Mo,max:Eo,min:ko}=Math;function To(t){return[+t[0],+t[1]]}function No(t){return[To(t[0]),To(t[1])]}var Ao={name:"x",handles:["w","e"].map(Do),input:function(t,e){return null==t?null:[[+t[0],e[0][1]],[+t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Oo={name:"y",handles:["n","s"].map(Do),input:function(t,e){return null==t?null:[[e[0][0],+t[0]],[e[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Ro={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(Do),input:function(t){return null==t?null:No(t)},output:function(t){return t}},Co={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Io={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},jo={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Po={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},zo={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Do(t){return{type:t}}function Vo(t){return!t.ctrlKey&&!t.button}function Lo(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Bo(){return navigator.maxTouchPoints||"ontouchstart"in this}function Fo(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Go(t){var e=t.__brush;return e?e.dim.output(e.selection):null}function Uo(){return Qo(Ao)}function Ko(){return Qo(Oo)}function Ho(){return Qo(Ro)}function Qo(t){var e,n=Lo,i=Vo,r=Bo,o=!0,a=ke("start","brush","end"),u=6;function c(e){var n=e.property("__brush",p).selectAll(".overlay").data([Do("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Co.overlay).merge(n).each((function(){var t=Fo(this).extent;Fn(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),e.selectAll(".selection").data([Do("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Co.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var i=e.selectAll(".handle").data(t.handles,(function(t){return t.type}));i.exit().remove(),i.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return Co[t.type]})),e.each(s).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",f).filter(r).on("touchstart.brush",f).on("touchmove.brush",h).on("touchend.brush touchcancel.brush",v).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function s(){var t=Fn(this),e=Fo(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?e[1][0]-u/2:e[0][0]-u/2})).attr("y",(function(t){return"s"===t.type[0]?e[1][1]-u/2:e[0][1]-u/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+u:u})).attr("height",(function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+u:u}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function l(t,e,n){var i=t.__brush.emitter;return!i||n&&i.clean?new d(t,e,n):i}function d(t,e,n){this.that=t,this.args=e,this.state=t.__brush,this.active=0,this.clean=n}function f(n){if((!e||n.touches)&&i.apply(this,arguments)){var r,a,u,c,d,f,h,v,p,g,y,_=this,b=n.target.__data__.type,m="selection"===(o&&n.metaKey?b="overlay":b)?mo:o&&n.altKey?So:xo,w=t===Oo?null:Po[b],x=t===Ao?null:zo[b],S=Fo(_),M=S.extent,E=S.selection,k=M[0][0],T=M[0][1],N=M[1][0],A=M[1][1],O=0,R=0,C=w&&x&&o&&n.shiftKey,I=Array.from(n.touches||[n],(t=>{const e=t.identifier;return(t=Zi(t,_)).point0=t.slice(),t.identifier=e,t}));Cr(_);var j=l(_,arguments,!0).beforestart();if("overlay"===b){E&&(p=!0);const e=[I[0],I[1]||I[0]];S.selection=E=[[r=t===Oo?k:ko(e[0][0],e[1][0]),u=t===Ao?T:ko(e[0][1],e[1][1])],[d=t===Oo?N:Eo(e[0][0],e[1][0]),h=t===Ao?A:Eo(e[0][1],e[1][1])]],I.length>1&&L(n)}else r=E[0][0],u=E[0][1],d=E[1][0],h=E[1][1];a=r,c=u,f=d,v=h;var P=Fn(_).attr("pointer-events","none"),z=P.selectAll(".overlay").attr("cursor",Co[b]);if(n.touches)j.moved=V,j.ended=B;else{var D=Fn(n.view).on("mousemove.brush",V,!0).on("mouseup.brush",B,!0);o&&D.on("keydown.brush",(function(t){switch(t.keyCode){case 16:C=w&&x;break;case 18:m===xo&&(w&&(d=f-O*w,r=a+O*w),x&&(h=v-R*x,u=c+R*x),m=So,L(t));break;case 32:m!==xo&&m!==So||(w<0?d=f-O:w>0&&(r=a-O),x<0?h=v-R:x>0&&(u=c-R),m=wo,z.attr("cursor",Co.selection),L(t));break;default:return}bo(t)}),!0).on("keyup.brush",(function(t){switch(t.keyCode){case 16:C&&(g=y=C=!1,L(t));break;case 18:m===So&&(w<0?d=f:w>0&&(r=a),x<0?h=v:x>0&&(u=c),m=xo,L(t));break;case 32:m===wo&&(t.altKey?(w&&(d=f-O*w,r=a+O*w),x&&(h=v-R*x,u=c+R*x),m=So):(w<0?d=f:w>0&&(r=a),x<0?h=v:x>0&&(u=c),m=xo),z.attr("cursor",Co[b]),L(t));break;default:return}bo(t)}),!0),Qn(n.view)}s.call(_),j.start(n,m.name)}function V(t){for(const e of t.changedTouches||[t])for(const t of I)t.identifier===e.identifier&&(t.cur=Zi(e,_));if(C&&!g&&!y&&1===I.length){const t=I[0];Mo(t.cur[0]-t[0])>Mo(t.cur[1]-t[1])?y=!0:g=!0}for(const t of I)t.cur&&(t[0]=t.cur[0],t[1]=t.cur[1]);p=!0,bo(t),L(t)}function L(t){const e=I[0],n=e.point0;var i;switch(O=e[0]-n[0],R=e[1]-n[1],m){case wo:case mo:w&&(O=Eo(k-r,ko(N-d,O)),a=r+O,f=d+O),x&&(R=Eo(T-u,ko(A-h,R)),c=u+R,v=h+R);break;case xo:I[1]?(w&&(a=Eo(k,ko(N,I[0][0])),f=Eo(k,ko(N,I[1][0])),w=1),x&&(c=Eo(T,ko(A,I[0][1])),v=Eo(T,ko(A,I[1][1])),x=1)):(w<0?(O=Eo(k-r,ko(N-r,O)),a=r+O,f=d):w>0&&(O=Eo(k-d,ko(N-d,O)),a=r,f=d+O),x<0?(R=Eo(T-u,ko(A-u,R)),c=u+R,v=h):x>0&&(R=Eo(T-h,ko(A-h,R)),c=u,v=h+R));break;case So:w&&(a=Eo(k,ko(N,r-O*w)),f=Eo(k,ko(N,d+O*w))),x&&(c=Eo(T,ko(A,u-R*x)),v=Eo(T,ko(A,h+R*x)))}f<a&&(w*=-1,i=r,r=d,d=i,i=a,a=f,f=i,b in Io&&z.attr("cursor",Co[b=Io[b]])),v<c&&(x*=-1,i=u,u=h,h=i,i=c,c=v,v=i,b in jo&&z.attr("cursor",Co[b=jo[b]])),S.selection&&(E=S.selection),g&&(a=E[0][0],f=E[1][0]),y&&(c=E[0][1],v=E[1][1]),E[0][0]===a&&E[0][1]===c&&E[1][0]===f&&E[1][1]===v||(S.selection=[[a,c],[f,v]],s.call(_),j.brush(t,m.name))}function B(t){if(function(t){t.stopImmediatePropagation()}(t),t.touches){if(t.touches.length)return;e&&clearTimeout(e),e=setTimeout((function(){e=null}),500)}else qn(t.view,p),D.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);P.attr("pointer-events","all"),z.attr("cursor",Co.overlay),S.selection&&(E=S.selection),function(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}(E)&&(S.selection=null,s.call(_)),j.end(t,m.name)}}function h(t){l(this,arguments).moved(t)}function v(t){l(this,arguments).ended(t)}function p(){var e=this.__brush||{selection:null};return e.extent=No(n.apply(this,arguments)),e.dim=t,e}return c.move=function(e,n,i){e.tween?e.on("start.brush",(function(t){l(this,arguments).beforestart().start(t)})).on("interrupt.brush end.brush",(function(t){l(this,arguments).end(t)})).tween("brush",(function(){var e=this,i=e.__brush,r=l(e,arguments),o=i.selection,a=t.input("function"==typeof n?n.apply(this,arguments):n,i.extent),u=Xi(o,a);function c(t){i.selection=1===t&&null===a?null:u(t),s.call(e),r.brush()}return null!==o&&null!==a?c:c(1)})):e.each((function(){var e=this,r=arguments,o=e.__brush,a=t.input("function"==typeof n?n.apply(e,r):n,o.extent),u=l(e,r).beforestart();Cr(e),o.selection=null===a?null:a,s.call(e),u.start(i).brush(i).end(i)}))},c.clear=function(t,e){c.move(t,null,e)},d.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(t,e){return this.starting?(this.starting=!1,this.emit("start",t,e)):this.emit("brush",t),this},brush:function(t,e){return this.emit("brush",t,e),this},end:function(t,e){return 0==--this.active&&(delete this.state.emitter,this.emit("end",t,e)),this},emit:function(e,n,i){var r=Fn(this.that).datum();a.call(e,this.that,new _o(e,{sourceEvent:n,target:c,selection:t.output(this.state.selection),mode:i,dispatch:a}),r)}},c.extent=function(t){return arguments.length?(n="function"==typeof t?t:yo(No(t)),c):n},c.filter=function(t){return arguments.length?(i="function"==typeof t?t:yo(!!t),c):i},c.touchable=function(t){return arguments.length?(r="function"==typeof t?t:yo(!!t),c):r},c.handleSize=function(t){return arguments.length?(u=+t,c):u},c.keyModifiers=function(t){return arguments.length?(o=!!t,c):o},c.on=function(){var t=a.on.apply(a,arguments);return t===a?c:t},c}var qo=Math.abs,$o=Math.cos,Yo=Math.sin,Wo=Math.PI,Xo=Wo/2,Jo=2*Wo,Zo=Math.max,ta=1e-12;function ea(t,e){return Array.from({length:e-t},((e,n)=>t+n))}function na(){return oa(!1,!1)}function ia(){return oa(!1,!0)}function ra(){return oa(!0,!1)}function oa(t,e){var n=0,i=null,r=null,o=null;function a(a){var u,c=a.length,s=new Array(c),l=ea(0,c),d=new Array(c*c),f=new Array(c),h=0;a=Float64Array.from({length:c*c},e?(t,e)=>a[e%c][e/c|0]:(t,e)=>a[e/c|0][e%c]);for(let e=0;e<c;++e){let n=0;for(let i=0;i<c;++i)n+=a[e*c+i]+t*a[i*c+e];h+=s[e]=n}u=(h=Zo(0,Jo-n*c)/h)?n:Jo/c;{let e=0;i&&l.sort(((t,e)=>i(s[t],s[e])));for(const n of l){const i=e;if(t){const t=ea(1+~c,c).filter((t=>t<0?a[~t*c+n]:a[n*c+t]));r&&t.sort(((t,e)=>r(t<0?-a[~t*c+n]:a[n*c+t],e<0?-a[~e*c+n]:a[n*c+e])));for(const i of t)i<0?(d[~i*c+n]||(d[~i*c+n]={source:null,target:null})).target={index:n,startAngle:e,endAngle:e+=a[~i*c+n]*h,value:a[~i*c+n]}:(d[n*c+i]||(d[n*c+i]={source:null,target:null})).source={index:n,startAngle:e,endAngle:e+=a[n*c+i]*h,value:a[n*c+i]};f[n]={index:n,startAngle:i,endAngle:e,value:s[n]}}else{const t=ea(0,c).filter((t=>a[n*c+t]||a[t*c+n]));r&&t.sort(((t,e)=>r(a[n*c+t],a[n*c+e])));for(const i of t){let t;if(n<i?(t=d[n*c+i]||(d[n*c+i]={source:null,target:null}),t.source={index:n,startAngle:e,endAngle:e+=a[n*c+i]*h,value:a[n*c+i]}):(t=d[i*c+n]||(d[i*c+n]={source:null,target:null}),t.target={index:n,startAngle:e,endAngle:e+=a[n*c+i]*h,value:a[n*c+i]},n===i&&(t.source=t.target)),t.source&&t.target&&t.source.value<t.target.value){const e=t.source;t.source=t.target,t.target=e}}f[n]={index:n,startAngle:i,endAngle:e,value:s[n]}}e+=u}}return(d=Object.values(d)).groups=f,o?d.sort(o):d}return a.padAngle=function(t){return arguments.length?(n=Zo(0,t),a):n},a.sortGroups=function(t){return arguments.length?(i=t,a):i},a.sortSubgroups=function(t){return arguments.length?(r=t,a):r},a.sortChords=function(t){return arguments.length?(null==t?o=null:(e=t,o=function(t,n){return e(t.source.value+t.target.value,n.source.value+n.target.value)})._=t,a):o&&o._;var e},a}const aa=Math.PI,ua=2*aa,ca=1e-6,sa=ua-ca;function la(t){this._+=t[0];for(let e=1,n=t.length;e<n;++e)this._+=arguments[e]+t[e]}class da{constructor(t){this._x0=this._y0=this._x1=this._y1=null,this._="",this._append=null==t?la:function(t){let e=Math.floor(t);if(!(e>=0))throw new Error(`invalid digits: ${t}`);if(e>15)return la;const n=10**e;return function(t){this._+=t[0];for(let e=1,i=t.length;e<i;++e)this._+=Math.round(arguments[e]*n)/n+t[e]}}(t)}moveTo(t,e){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._append`Z`)}lineTo(t,e){this._append`L${this._x1=+t},${this._y1=+e}`}quadraticCurveTo(t,e,n,i){this._append`Q${+t},${+e},${this._x1=+n},${this._y1=+i}`}bezierCurveTo(t,e,n,i,r,o){this._append`C${+t},${+e},${+n},${+i},${this._x1=+r},${this._y1=+o}`}arcTo(t,e,n,i,r){if(t=+t,e=+e,n=+n,i=+i,(r=+r)<0)throw new Error(`negative radius: ${r}`);let o=this._x1,a=this._y1,u=n-t,c=i-e,s=o-t,l=a-e,d=s*s+l*l;if(null===this._x1)this._append`M${this._x1=t},${this._y1=e}`;else if(d>ca)if(Math.abs(l*u-c*s)>ca&&r){let f=n-o,h=i-a,v=u*u+c*c,p=f*f+h*h,g=Math.sqrt(v),y=Math.sqrt(d),_=r*Math.tan((aa-Math.acos((v+d-p)/(2*g*y)))/2),b=_/y,m=_/g;Math.abs(b-1)>ca&&this._append`L${t+b*s},${e+b*l}`,this._append`A${r},${r},0,0,${+(l*f>s*h)},${this._x1=t+m*u},${this._y1=e+m*c}`}else this._append`L${this._x1=t},${this._y1=e}`}arc(t,e,n,i,r,o){if(t=+t,e=+e,o=!!o,(n=+n)<0)throw new Error(`negative radius: ${n}`);let a=n*Math.cos(i),u=n*Math.sin(i),c=t+a,s=e+u,l=1^o,d=o?i-r:r-i;null===this._x1?this._append`M${c},${s}`:(Math.abs(this._x1-c)>ca||Math.abs(this._y1-s)>ca)&&this._append`L${c},${s}`,n&&(d<0&&(d=d%ua+ua),d>sa?this._append`A${n},${n},0,1,${l},${t-a},${e-u}A${n},${n},0,1,${l},${this._x1=c},${this._y1=s}`:d>ca&&this._append`A${n},${n},0,${+(d>=aa)},${l},${this._x1=t+n*Math.cos(r)},${this._y1=e+n*Math.sin(r)}`)}rect(t,e,n,i){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}h${n=+n}v${+i}h${-n}Z`}toString(){return this._}}function fa(){return new da}function ha(t=3){return new da(+t)}fa.prototype=da.prototype;var va=Array.prototype.slice;function pa(t){return function(){return t}}function ga(t){return t.source}function ya(t){return t.target}function _a(t){return t.radius}function ba(t){return t.startAngle}function ma(t){return t.endAngle}function wa(){return 0}function xa(){return 10}function Sa(t){var e=ga,n=ya,i=_a,r=_a,o=ba,a=ma,u=wa,c=null;function s(){var s,l=e.apply(this,arguments),d=n.apply(this,arguments),f=u.apply(this,arguments)/2,h=va.call(arguments),v=+i.apply(this,(h[0]=l,h)),p=o.apply(this,h)-Xo,g=a.apply(this,h)-Xo,y=+r.apply(this,(h[0]=d,h)),_=o.apply(this,h)-Xo,b=a.apply(this,h)-Xo;if(c||(c=s=fa()),f>ta&&(qo(g-p)>2*f+ta?g>p?(p+=f,g-=f):(p-=f,g+=f):p=g=(p+g)/2,qo(b-_)>2*f+ta?b>_?(_+=f,b-=f):(_-=f,b+=f):_=b=(_+b)/2),c.moveTo(v*$o(p),v*Yo(p)),c.arc(0,0,v,p,g),p!==_||g!==b)if(t){var m=y-+t.apply(this,arguments),w=(_+b)/2;c.quadraticCurveTo(0,0,m*$o(_),m*Yo(_)),c.lineTo(y*$o(w),y*Yo(w)),c.lineTo(m*$o(b),m*Yo(b))}else c.quadraticCurveTo(0,0,y*$o(_),y*Yo(_)),c.arc(0,0,y,_,b);if(c.quadraticCurveTo(0,0,v*$o(p),v*Yo(p)),c.closePath(),s)return c=null,s+""||null}return t&&(s.headRadius=function(e){return arguments.length?(t="function"==typeof e?e:pa(+e),s):t}),s.radius=function(t){return arguments.length?(i=r="function"==typeof t?t:pa(+t),s):i},s.sourceRadius=function(t){return arguments.length?(i="function"==typeof t?t:pa(+t),s):i},s.targetRadius=function(t){return arguments.length?(r="function"==typeof t?t:pa(+t),s):r},s.startAngle=function(t){return arguments.length?(o="function"==typeof t?t:pa(+t),s):o},s.endAngle=function(t){return arguments.length?(a="function"==typeof t?t:pa(+t),s):a},s.padAngle=function(t){return arguments.length?(u="function"==typeof t?t:pa(+t),s):u},s.source=function(t){return arguments.length?(e=t,s):e},s.target=function(t){return arguments.length?(n=t,s):n},s.context=function(t){return arguments.length?(c=null==t?null:t,s):c},s}function Ma(){return Sa()}function Ea(){return Sa(xa)}const ka=Math.PI/180,Ta=180/Math.PI,Na=.96422,Aa=1,Oa=.82521,Ra=4/29,Ca=6/29,Ia=3*Ca*Ca,ja=Ca*Ca*Ca;function Pa(t){if(t instanceof Va)return new Va(t.l,t.a,t.b,t.opacity);if(t instanceof Qa)return qa(t);t instanceof yi||(t=pi(t));var e,n,i=Ga(t.r),r=Ga(t.g),o=Ga(t.b),a=La((.2225045*i+.7168786*r+.0606169*o)/Aa);return i===r&&r===o?e=n=a:(e=La((.4360747*i+.3850649*r+.1430804*o)/Na),n=La((.0139322*i+.0971045*r+.7141733*o)/Oa)),new Va(116*a-16,500*(e-a),200*(a-n),t.opacity)}function za(t,e){return new Va(t,0,0,null==e?1:e)}function Da(t,e,n,i){return 1===arguments.length?Pa(t):new Va(t,e,n,null==i?1:i)}function Va(t,e,n,i){this.l=+t,this.a=+e,this.b=+n,this.opacity=+i}function La(t){return t>ja?Math.pow(t,1/3):t/Ia+Ra}function Ba(t){return t>Ca?t*t*t:Ia*(t-Ra)}function Fa(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Ga(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Ua(t){if(t instanceof Qa)return new Qa(t.h,t.c,t.l,t.opacity);if(t instanceof Va||(t=Pa(t)),0===t.a&&0===t.b)return new Qa(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*Ta;return new Qa(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Ka(t,e,n,i){return 1===arguments.length?Ua(t):new Qa(n,e,t,null==i?1:i)}function Ha(t,e,n,i){return 1===arguments.length?Ua(t):new Qa(t,e,n,null==i?1:i)}function Qa(t,e,n,i){this.h=+t,this.c=+e,this.l=+n,this.opacity=+i}function qa(t){if(isNaN(t.h))return new Va(t.l,0,0,t.opacity);var e=t.h*ka;return new Va(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}$n(Va,Da,Yn(Wn,{brighter(t){return new Va(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker(t){return new Va(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new yi(Fa(3.1338561*(e=Na*Ba(e))-1.6168667*(t=Aa*Ba(t))-.4906146*(n=Oa*Ba(n))),Fa(-.9787684*e+1.9161415*t+.033454*n),Fa(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),$n(Qa,Ha,Yn(Wn,{brighter(t){return new Qa(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker(t){return new Qa(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb(){return qa(this).rgb()}}));var $a=-.14861,Ya=1.78277,Wa=-.29227,Xa=-.90649,Ja=1.97294,Za=Ja*Xa,tu=Ja*Ya,eu=Ya*Wa-Xa*$a;function nu(t,e,n,i){return 1===arguments.length?function(t){if(t instanceof iu)return new iu(t.h,t.s,t.l,t.opacity);t instanceof yi||(t=pi(t));var e=t.r/255,n=t.g/255,i=t.b/255,r=(eu*i+Za*e-tu*n)/(eu+Za-tu),o=i-r,a=(Ja*(n-r)-Wa*o)/Xa,u=Math.sqrt(a*a+o*o)/(Ja*r*(1-r)),c=u?Math.atan2(a,o)*Ta-120:NaN;return new iu(c<0?c+360:c,u,r,t.opacity)}(t):new iu(t,e,n,null==i?1:i)}function iu(t,e,n,i){this.h=+t,this.s=+e,this.l=+n,this.opacity=+i}$n(iu,nu,Yn(Wn,{brighter(t){return t=null==t?Jn:Math.pow(Jn,t),new iu(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?Xn:Math.pow(Xn,t),new iu(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=isNaN(this.h)?0:(this.h+120)*ka,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),i=Math.cos(t),r=Math.sin(t);return new yi(255*(e+n*($a*i+Ya*r)),255*(e+n*(Wa*i+Xa*r)),255*(e+n*(Ja*i)),this.opacity)}}));var ru=Array.prototype.slice;function ou(t,e){return t-e}const au=t=>()=>t;function uu(t,e){for(var n,i=-1,r=e.length;++i<r;)if(n=cu(t,e[i]))return n;return 0}function cu(t,e){for(var n=e[0],i=e[1],r=-1,o=0,a=t.length,u=a-1;o<a;u=o++){var c=t[o],s=c[0],l=c[1],d=t[u],f=d[0],h=d[1];if(su(c,d,e))return 0;l>i!=h>i&&n<(f-s)*(i-l)/(h-l)+s&&(r=-r)}return r}function su(t,e,n){var i,r,o,a;return function(t,e,n){return(e[0]-t[0])*(n[1]-t[1])==(n[0]-t[0])*(e[1]-t[1])}(t,e,n)&&(r=t[i=+(t[0]===e[0])],o=n[i],a=e[i],r<=o&&o<=a||a<=o&&o<=r)}function lu(){}var du=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]];function fu(){var t=1,e=1,n=ft,i=u;function r(t){var e=n(t);if(Array.isArray(e))e=e.slice().sort(ou);else{const n=N(t,hu);for(e=ct(...dt(n[0],n[1],e),e);e[e.length-1]>=n[1];)e.pop();for(;e[1]<n[0];)e.shift()}return e.map((e=>o(t,e)))}function o(n,r){const o=null==r?NaN:+r;if(isNaN(o))throw new Error(`invalid value: ${r}`);var u=[],c=[];return function(n,i,r){var o,u,c,s,l,d,f=new Array,h=new Array;for(o=u=-1,s=vu(n[0],i),du[s<<1].forEach(v);++o<t-1;)c=s,s=vu(n[o+1],i),du[c|s<<1].forEach(v);for(du[s<<0].forEach(v);++u<e-1;){for(o=-1,s=vu(n[u*t+t],i),l=vu(n[u*t],i),du[s<<1|l<<2].forEach(v);++o<t-1;)c=s,s=vu(n[u*t+t+o+1],i),d=l,l=vu(n[u*t+o+1],i),du[c|s<<1|l<<2|d<<3].forEach(v);du[s|l<<3].forEach(v)}for(o=-1,l=n[u*t]>=i,du[l<<2].forEach(v);++o<t-1;)d=l,l=vu(n[u*t+o+1],i),du[l<<2|d<<3].forEach(v);function v(t){var e,n,i=[t[0][0]+o,t[0][1]+u],c=[t[1][0]+o,t[1][1]+u],s=a(i),l=a(c);(e=h[s])?(n=f[l])?(delete h[e.end],delete f[n.start],e===n?(e.ring.push(c),r(e.ring)):f[e.start]=h[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete h[e.end],e.ring.push(c),h[e.end=l]=e):(e=f[l])?(n=h[s])?(delete f[e.start],delete h[n.end],e===n?(e.ring.push(c),r(e.ring)):f[n.start]=h[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete f[e.start],e.ring.unshift(i),f[e.start=s]=e):f[s]=h[l]={start:s,end:l,ring:[i,c]}}du[l<<3].forEach(v)}(n,o,(function(t){i(t,n,o),function(t){for(var e=0,n=t.length,i=t[n-1][1]*t[0][0]-t[n-1][0]*t[0][1];++e<n;)i+=t[e-1][1]*t[e][0]-t[e-1][0]*t[e][1];return i}(t)>0?u.push([t]):c.push(t)})),c.forEach((function(t){for(var e,n=0,i=u.length;n<i;++n)if(-1!==uu((e=u[n])[0],t))return void e.push(t)})),{type:"MultiPolygon",value:r,coordinates:u}}function a(e){return 2*e[0]+e[1]*(t+1)*4}function u(n,i,r){n.forEach((function(n){var o=n[0],a=n[1],u=0|o,c=0|a,s=pu(i[c*t+u]);o>0&&o<t&&u===o&&(n[0]=gu(o,pu(i[c*t+u-1]),s,r)),a>0&&a<e&&c===a&&(n[1]=gu(a,pu(i[(c-1)*t+u]),s,r))}))}return r.contour=o,r.size=function(n){if(!arguments.length)return[t,e];var i=Math.floor(n[0]),o=Math.floor(n[1]);if(!(i>=0&&o>=0))throw new Error("invalid size");return t=i,e=o,r},r.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:Array.isArray(t)?au(ru.call(t)):au(t),r):n},r.smooth=function(t){return arguments.length?(i=t?u:lu,r):i===u},r}function hu(t){return isFinite(t)?t:NaN}function vu(t,e){return null!=t&&+t>=e}function pu(t){return null==t||isNaN(t=+t)?-1/0:t}function gu(t,e,n,i){const r=i-e,o=n-e,a=isFinite(r)||isFinite(o)?r/o:Math.sign(r)/Math.sign(o);return isNaN(a)?t:t+a-.5}function yu(t){return t[0]}function _u(t){return t[1]}function bu(){return 1}function mu(){var t=yu,e=_u,n=bu,i=960,r=500,o=20,a=2,u=3*o,c=i+2*u>>a,s=r+2*u>>a,l=au(20);function d(i){var r=new Float32Array(c*s),l=Math.pow(2,-a),d=-1;for(const o of i){var f=(t(o,++d,i)+u)*l,h=(e(o,d,i)+u)*l,p=+n(o,d,i);if(p&&f>=0&&f<c&&h>=0&&h<s){var g=Math.floor(f),y=Math.floor(h),_=f-g-.5,b=h-y-.5;r[g+y*c]+=(1-_)*(1-b)*p,r[g+1+y*c]+=_*(1-b)*p,r[g+1+(y+1)*c]+=_*b*p,r[g+(y+1)*c]+=(1-_)*b*p}}return v({data:r,width:c,height:s},o*l),r}function f(t){var e=d(t),n=l(e),i=Math.pow(2,2*a);return Array.isArray(n)||(n=ct(Number.MIN_VALUE,vt(e)/i,n)),fu().size([c,s]).thresholds(n.map((t=>t*i)))(e).map(((t,e)=>(t.value=+n[e],h(t))))}function h(t){return t.coordinates.forEach(p),t}function p(t){t.forEach(g)}function g(t){t.forEach(y)}function y(t){t[0]=t[0]*Math.pow(2,a)-u,t[1]=t[1]*Math.pow(2,a)-u}function _(){return c=i+2*(u=3*o)>>a,s=r+2*u>>a,f}return f.contours=function(t){var e=d(t),n=fu().size([c,s]),i=Math.pow(2,2*a),r=t=>{t=+t;var r=h(n.contour(e,t*i));return r.value=t,r};return Object.defineProperty(r,"max",{get:()=>vt(e)/i}),r},f.x=function(e){return arguments.length?(t="function"==typeof e?e:au(+e),f):t},f.y=function(t){return arguments.length?(e="function"==typeof t?t:au(+t),f):e},f.weight=function(t){return arguments.length?(n="function"==typeof t?t:au(+t),f):n},f.size=function(t){if(!arguments.length)return[i,r];var e=+t[0],n=+t[1];if(!(e>=0&&n>=0))throw new Error("invalid size");return i=e,r=n,_()},f.cellSize=function(t){if(!arguments.length)return 1<<a;if(!((t=+t)>=1))throw new Error("invalid cell size");return a=Math.floor(Math.log(t)/Math.LN2),_()},f.thresholds=function(t){return arguments.length?(l="function"==typeof t?t:Array.isArray(t)?au(ru.call(t)):au(t),f):l},f.bandwidth=function(t){if(!arguments.length)return Math.sqrt(o*(o+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return o=(Math.sqrt(4*t*t+1)-1)/2,_()},f}const wu=134217729;function xu(t,e,n,i,r){let o,a,u,c,s=e[0],l=i[0],d=0,f=0;l>s==l>-s?(o=s,s=e[++d]):(o=l,l=i[++f]);let h=0;if(d<t&&f<n)for(l>s==l>-s?(a=s+o,u=o-(a-s),s=e[++d]):(a=l+o,u=o-(a-l),l=i[++f]),o=a,0!==u&&(r[h++]=u);d<t&&f<n;)l>s==l>-s?(a=o+s,c=a-o,u=o-(a-c)+(s-c),s=e[++d]):(a=o+l,c=a-o,u=o-(a-c)+(l-c),l=i[++f]),o=a,0!==u&&(r[h++]=u);for(;d<t;)a=o+s,c=a-o,u=o-(a-c)+(s-c),s=e[++d],o=a,0!==u&&(r[h++]=u);for(;f<n;)a=o+l,c=a-o,u=o-(a-c)+(l-c),l=i[++f],o=a,0!==u&&(r[h++]=u);return 0===o&&0!==h||(r[h++]=o),h}function Su(t){return new Float64Array(t)}const Mu=Su(4),Eu=Su(8),ku=Su(12),Tu=Su(16),Nu=Su(4);function Au(t,e,n,i,r,o){const a=(e-o)*(n-r),u=(t-r)*(i-o),c=a-u,s=Math.abs(a+u);return Math.abs(c)>=33306690738754716e-32*s?c:-function(t,e,n,i,r,o,a){let u,c,s,l,d,f,h,v,p,g,y,_,b,m,w,x,S,M;const E=t-r,k=n-r,T=e-o,N=i-o;m=E*N,f=wu*E,h=f-(f-E),v=E-h,f=wu*N,p=f-(f-N),g=N-p,w=v*g-(m-h*p-v*p-h*g),x=T*k,f=wu*T,h=f-(f-T),v=T-h,f=wu*k,p=f-(f-k),g=k-p,S=v*g-(x-h*p-v*p-h*g),y=w-S,d=w-y,Mu[0]=w-(y+d)+(d-S),_=m+y,d=_-m,b=m-(_-d)+(y-d),y=b-x,d=b-y,Mu[1]=b-(y+d)+(d-x),M=_+y,d=M-_,Mu[2]=_-(M-d)+(y-d),Mu[3]=M;let A=function(t,e){let n=e[0];for(let t=1;t<4;t++)n+=e[t];return n}(0,Mu),O=22204460492503146e-32*a;if(A>=O||-A>=O)return A;if(d=t-E,u=t-(E+d)+(d-r),d=n-k,s=n-(k+d)+(d-r),d=e-T,c=e-(T+d)+(d-o),d=i-N,l=i-(N+d)+(d-o),0===u&&0===c&&0===s&&0===l)return A;if(O=11093356479670487e-47*a+33306690738754706e-32*Math.abs(A),A+=E*l+N*u-(T*s+k*c),A>=O||-A>=O)return A;m=u*N,f=wu*u,h=f-(f-u),v=u-h,f=wu*N,p=f-(f-N),g=N-p,w=v*g-(m-h*p-v*p-h*g),x=c*k,f=wu*c,h=f-(f-c),v=c-h,f=wu*k,p=f-(f-k),g=k-p,S=v*g-(x-h*p-v*p-h*g),y=w-S,d=w-y,Nu[0]=w-(y+d)+(d-S),_=m+y,d=_-m,b=m-(_-d)+(y-d),y=b-x,d=b-y,Nu[1]=b-(y+d)+(d-x),M=_+y,d=M-_,Nu[2]=_-(M-d)+(y-d),Nu[3]=M;const R=xu(4,Mu,4,Nu,Eu);m=E*l,f=wu*E,h=f-(f-E),v=E-h,f=wu*l,p=f-(f-l),g=l-p,w=v*g-(m-h*p-v*p-h*g),x=T*s,f=wu*T,h=f-(f-T),v=T-h,f=wu*s,p=f-(f-s),g=s-p,S=v*g-(x-h*p-v*p-h*g),y=w-S,d=w-y,Nu[0]=w-(y+d)+(d-S),_=m+y,d=_-m,b=m-(_-d)+(y-d),y=b-x,d=b-y,Nu[1]=b-(y+d)+(d-x),M=_+y,d=M-_,Nu[2]=_-(M-d)+(y-d),Nu[3]=M;const C=xu(R,Eu,4,Nu,ku);m=u*l,f=wu*u,h=f-(f-u),v=u-h,f=wu*l,p=f-(f-l),g=l-p,w=v*g-(m-h*p-v*p-h*g),x=c*s,f=wu*c,h=f-(f-c),v=c-h,f=wu*s,p=f-(f-s),g=s-p,S=v*g-(x-h*p-v*p-h*g),y=w-S,d=w-y,Nu[0]=w-(y+d)+(d-S),_=m+y,d=_-m,b=m-(_-d)+(y-d),y=b-x,d=b-y,Nu[1]=b-(y+d)+(d-x),M=_+y,d=M-_,Nu[2]=_-(M-d)+(y-d),Nu[3]=M;const I=xu(C,ku,4,Nu,Tu);return Tu[I-1]}(t,e,n,i,r,o,s)}Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(8),Su(8),Su(8),Su(4),Su(8),Su(8),Su(8),Su(12),Su(192),Su(192),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(8),Su(8),Su(8),Su(8),Su(8),Su(8),Su(8),Su(8),Su(8),Su(4),Su(4),Su(4),Su(8),Su(16),Su(16),Su(16),Su(32),Su(32),Su(48),Su(64),Su(1152),Su(1152),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(4),Su(24),Su(24),Su(24),Su(24),Su(24),Su(24),Su(24),Su(24),Su(24),Su(24),Su(1152),Su(1152),Su(1152),Su(1152),Su(1152),Su(2304),Su(2304),Su(3456),Su(5760),Su(8),Su(8),Su(8),Su(16),Su(24),Su(48),Su(48),Su(96),Su(192),Su(384),Su(384),Su(384),Su(768),Su(96),Su(96),Su(96),Su(1152);const Ou=Math.pow(2,-52),Ru=new Uint32Array(512);class Cu{static from(t,e=Vu,n=Lu){const i=t.length,r=new Float64Array(2*i);for(let o=0;o<i;o++){const i=t[o];r[2*o]=e(i),r[2*o+1]=n(i)}return new Cu(r)}constructor(t){const e=t.length>>1;if(e>0&&"number"!=typeof t[0])throw new Error("Expected coords to contain numbers.");this.coords=t;const n=Math.max(2*e-5,0);this._triangles=new Uint32Array(3*n),this._halfedges=new Int32Array(3*n),this._hashSize=Math.ceil(Math.sqrt(e)),this._hullPrev=new Uint32Array(e),this._hullNext=new Uint32Array(e),this._hullTri=new Uint32Array(e),this._hullHash=new Int32Array(this._hashSize),this._ids=new Uint32Array(e),this._dists=new Float64Array(e),this.update()}update(){const{coords:t,_hullPrev:e,_hullNext:n,_hullTri:i,_hullHash:r}=this,o=t.length>>1;let a=1/0,u=1/0,c=-1/0,s=-1/0;for(let e=0;e<o;e++){const n=t[2*e],i=t[2*e+1];n<a&&(a=n),i<u&&(u=i),n>c&&(c=n),i>s&&(s=i),this._ids[e]=e}const l=(a+c)/2,d=(u+s)/2;let f,h,v;for(let e=0,n=1/0;e<o;e++){const i=Iu(l,d,t[2*e],t[2*e+1]);i<n&&(f=e,n=i)}const p=t[2*f],g=t[2*f+1];for(let e=0,n=1/0;e<o;e++){if(e===f)continue;const i=Iu(p,g,t[2*e],t[2*e+1]);i<n&&i>0&&(h=e,n=i)}let y=t[2*h],_=t[2*h+1],b=1/0;for(let e=0;e<o;e++){if(e===f||e===h)continue;const n=Pu(p,g,y,_,t[2*e],t[2*e+1]);n<b&&(v=e,b=n)}let m=t[2*v],w=t[2*v+1];if(b===1/0){for(let e=0;e<o;e++)this._dists[e]=t[2*e]-t[0]||t[2*e+1]-t[1];zu(this._ids,this._dists,0,o-1);const e=new Uint32Array(o);let n=0;for(let t=0,i=-1/0;t<o;t++){const r=this._ids[t],o=this._dists[r];o>i&&(e[n++]=r,i=o)}return this.hull=e.subarray(0,n),this.triangles=new Uint32Array(0),void(this.halfedges=new Uint32Array(0))}if(Au(p,g,y,_,m,w)<0){const t=h,e=y,n=_;h=v,y=m,_=w,v=t,m=e,w=n}const x=function(t,e,n,i,r,o){const a=n-t,u=i-e,c=r-t,s=o-e,l=a*a+u*u,d=c*c+s*s,f=.5/(a*s-u*c);return{x:t+(s*l-u*d)*f,y:e+(a*d-c*l)*f}}(p,g,y,_,m,w);this._cx=x.x,this._cy=x.y;for(let e=0;e<o;e++)this._dists[e]=Iu(t[2*e],t[2*e+1],x.x,x.y);zu(this._ids,this._dists,0,o-1),this._hullStart=f;let S=3;n[f]=e[v]=h,n[h]=e[f]=v,n[v]=e[h]=f,i[f]=0,i[h]=1,i[v]=2,r.fill(-1),r[this._hashKey(p,g)]=f,r[this._hashKey(y,_)]=h,r[this._hashKey(m,w)]=v,this.trianglesLen=0,this._addTriangle(f,h,v,-1,-1,-1);for(let o,a,u=0;u<this._ids.length;u++){const c=this._ids[u],s=t[2*c],l=t[2*c+1];if(u>0&&Math.abs(s-o)<=Ou&&Math.abs(l-a)<=Ou)continue;if(o=s,a=l,c===f||c===h||c===v)continue;let d=0;for(let t=0,e=this._hashKey(s,l);t<this._hashSize&&(d=r[(e+t)%this._hashSize],-1===d||d===n[d]);t++);d=e[d];let p,g=d;for(;p=n[g],Au(s,l,t[2*g],t[2*g+1],t[2*p],t[2*p+1])>=0;)if(g=p,g===d){g=-1;break}if(-1===g)continue;let y=this._addTriangle(g,c,n[g],-1,-1,i[g]);i[c]=this._legalize(y+2),i[g]=y,S++;let _=n[g];for(;p=n[_],Au(s,l,t[2*_],t[2*_+1],t[2*p],t[2*p+1])<0;)y=this._addTriangle(_,c,p,i[c],-1,i[_]),i[c]=this._legalize(y+2),n[_]=_,S--,_=p;if(g===d)for(;p=e[g],Au(s,l,t[2*p],t[2*p+1],t[2*g],t[2*g+1])<0;)y=this._addTriangle(p,c,g,-1,i[g],i[p]),this._legalize(y+2),i[p]=y,n[g]=g,S--,g=p;this._hullStart=e[c]=g,n[g]=e[_]=c,n[c]=_,r[this._hashKey(s,l)]=c,r[this._hashKey(t[2*g],t[2*g+1])]=g}this.hull=new Uint32Array(S);for(let t=0,e=this._hullStart;t<S;t++)this.hull[t]=e,e=n[e];this.triangles=this._triangles.subarray(0,this.trianglesLen),this.halfedges=this._halfedges.subarray(0,this.trianglesLen)}_hashKey(t,e){return Math.floor(function(t,e){const n=t/(Math.abs(t)+Math.abs(e));return(e>0?3-n:1+n)/4}(t-this._cx,e-this._cy)*this._hashSize)%this._hashSize}_legalize(t){const{_triangles:e,_halfedges:n,coords:i}=this;let r=0,o=0;for(;;){const a=n[t],u=t-t%3;if(o=u+(t+2)%3,-1===a){if(0===r)break;t=Ru[--r];continue}const c=a-a%3,s=u+(t+1)%3,l=c+(a+2)%3,d=e[o],f=e[t],h=e[s],v=e[l];if(ju(i[2*d],i[2*d+1],i[2*f],i[2*f+1],i[2*h],i[2*h+1],i[2*v],i[2*v+1])){e[t]=v,e[a]=d;const i=n[l];if(-1===i){let e=this._hullStart;do{if(this._hullTri[e]===l){this._hullTri[e]=t;break}e=this._hullPrev[e]}while(e!==this._hullStart)}this._link(t,i),this._link(a,n[o]),this._link(o,l);const u=c+(a+1)%3;r<Ru.length&&(Ru[r++]=u)}else{if(0===r)break;t=Ru[--r]}}return o}_link(t,e){this._halfedges[t]=e,-1!==e&&(this._halfedges[e]=t)}_addTriangle(t,e,n,i,r,o){const a=this.trianglesLen;return this._triangles[a]=t,this._triangles[a+1]=e,this._triangles[a+2]=n,this._link(a,i),this._link(a+1,r),this._link(a+2,o),this.trianglesLen+=3,a}}function Iu(t,e,n,i){const r=t-n,o=e-i;return r*r+o*o}function ju(t,e,n,i,r,o,a,u){const c=t-a,s=e-u,l=n-a,d=i-u,f=r-a,h=o-u,v=l*l+d*d,p=f*f+h*h;return c*(d*p-v*h)-s*(l*p-v*f)+(c*c+s*s)*(l*h-d*f)<0}function Pu(t,e,n,i,r,o){const a=n-t,u=i-e,c=r-t,s=o-e,l=a*a+u*u,d=c*c+s*s,f=.5/(a*s-u*c),h=(s*l-u*d)*f,v=(a*d-c*l)*f;return h*h+v*v}function zu(t,e,n,i){if(i-n<=20)for(let r=n+1;r<=i;r++){const i=t[r],o=e[i];let a=r-1;for(;a>=n&&e[t[a]]>o;)t[a+1]=t[a--];t[a+1]=i}else{let r=n+1,o=i;Du(t,n+i>>1,r),e[t[n]]>e[t[i]]&&Du(t,n,i),e[t[r]]>e[t[i]]&&Du(t,r,i),e[t[n]]>e[t[r]]&&Du(t,n,r);const a=t[r],u=e[a];for(;;){do{r++}while(e[t[r]]<u);do{o--}while(e[t[o]]>u);if(o<r)break;Du(t,r,o)}t[n+1]=t[o],t[o]=a,i-r+1>=o-n?(zu(t,e,r,i),zu(t,e,n,o-1)):(zu(t,e,n,o-1),zu(t,e,r,i))}}function Du(t,e,n){const i=t[e];t[e]=t[n],t[n]=i}function Vu(t){return t[0]}function Lu(t){return t[1]}const Bu=1e-6;class Fu{constructor(){this._x0=this._y0=this._x1=this._y1=null,this._=""}moveTo(t,e){this._+=`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")}lineTo(t,e){this._+=`L${this._x1=+t},${this._y1=+e}`}arc(t,e,n){const i=(t=+t)+(n=+n),r=e=+e;if(n<0)throw new Error("negative radius");null===this._x1?this._+=`M${i},${r}`:(Math.abs(this._x1-i)>Bu||Math.abs(this._y1-r)>Bu)&&(this._+="L"+i+","+r),n&&(this._+=`A${n},${n},0,1,1,${t-n},${e}A${n},${n},0,1,1,${this._x1=i},${this._y1=r}`)}rect(t,e,n,i){this._+=`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}h${+n}v${+i}h${-n}Z`}value(){return this._||null}}class Gu{constructor(){this._=[]}moveTo(t,e){this._.push([t,e])}closePath(){this._.push(this._[0].slice())}lineTo(t,e){this._.push([t,e])}value(){return this._.length?this._:null}}class Uu{constructor(t,[e,n,i,r]=[0,0,960,500]){if(!((i=+i)>=(e=+e)&&(r=+r)>=(n=+n)))throw new Error("invalid bounds");this.delaunay=t,this._circumcenters=new Float64Array(2*t.points.length),this.vectors=new Float64Array(2*t.points.length),this.xmax=i,this.xmin=e,this.ymax=r,this.ymin=n,this._init()}update(){return this.delaunay.update(),this._init(),this}_init(){const{delaunay:{points:t,hull:e,triangles:n},vectors:i}=this;let r,o;const a=this.circumcenters=this._circumcenters.subarray(0,n.length/3*2);for(let i,u,c=0,s=0,l=n.length;c<l;c+=3,s+=2){const l=2*n[c],d=2*n[c+1],f=2*n[c+2],h=t[l],v=t[l+1],p=t[d],g=t[d+1],y=t[f],_=t[f+1],b=p-h,m=g-v,w=y-h,x=_-v,S=2*(b*x-m*w);if(Math.abs(S)<1e-9){if(void 0===r){r=o=0;for(const n of e)r+=t[2*n],o+=t[2*n+1];r/=e.length,o/=e.length}const n=1e9*Math.sign((r-h)*x-(o-v)*w);i=(h+y)/2-n*x,u=(v+_)/2+n*w}else{const t=1/S,e=b*b+m*m,n=w*w+x*x;i=h+(x*e-m*n)*t,u=v+(b*n-w*e)*t}a[s]=i,a[s+1]=u}let u,c,s,l=e[e.length-1],d=4*l,f=t[2*l],h=t[2*l+1];i.fill(0);for(let n=0;n<e.length;++n)l=e[n],u=d,c=f,s=h,d=4*l,f=t[2*l],h=t[2*l+1],i[u+2]=i[d]=s-h,i[u+3]=i[d+1]=f-c}render(t){const e=null==t?t=new Fu:void 0,{delaunay:{halfedges:n,inedges:i,hull:r},circumcenters:o,vectors:a}=this;if(r.length<=1)return null;for(let e=0,i=n.length;e<i;++e){const i=n[e];if(i<e)continue;const r=2*Math.floor(e/3),a=2*Math.floor(i/3),u=o[r],c=o[r+1],s=o[a],l=o[a+1];this._renderSegment(u,c,s,l,t)}let u,c=r[r.length-1];for(let e=0;e<r.length;++e){u=c,c=r[e];const n=2*Math.floor(i[c]/3),s=o[n],l=o[n+1],d=4*u,f=this._project(s,l,a[d+2],a[d+3]);f&&this._renderSegment(s,l,f[0],f[1],t)}return e&&e.value()}renderBounds(t){const e=null==t?t=new Fu:void 0;return t.rect(this.xmin,this.ymin,this.xmax-this.xmin,this.ymax-this.ymin),e&&e.value()}renderCell(t,e){const n=null==e?e=new Fu:void 0,i=this._clip(t);if(null===i||!i.length)return;e.moveTo(i[0],i[1]);let r=i.length;for(;i[0]===i[r-2]&&i[1]===i[r-1]&&r>1;)r-=2;for(let t=2;t<r;t+=2)i[t]===i[t-2]&&i[t+1]===i[t-1]||e.lineTo(i[t],i[t+1]);return e.closePath(),n&&n.value()}*cellPolygons(){const{delaunay:{points:t}}=this;for(let e=0,n=t.length/2;e<n;++e){const t=this.cellPolygon(e);t&&(t.index=e,yield t)}}cellPolygon(t){const e=new Gu;return this.renderCell(t,e),e.value()}_renderSegment(t,e,n,i,r){let o;const a=this._regioncode(t,e),u=this._regioncode(n,i);0===a&&0===u?(r.moveTo(t,e),r.lineTo(n,i)):(o=this._clipSegment(t,e,n,i,a,u))&&(r.moveTo(o[0],o[1]),r.lineTo(o[2],o[3]))}contains(t,e,n){return(e=+e)==e&&(n=+n)==n&&this.delaunay._step(t,e,n)===t}*neighbors(t){const e=this._clip(t);if(e)for(const n of this.delaunay.neighbors(t)){const t=this._clip(n);if(t)t:for(let i=0,r=e.length;i<r;i+=2)for(let o=0,a=t.length;o<a;o+=2)if(e[i]===t[o]&&e[i+1]===t[o+1]&&e[(i+2)%r]===t[(o+a-2)%a]&&e[(i+3)%r]===t[(o+a-1)%a]){yield n;break t}}}_cell(t){const{circumcenters:e,delaunay:{inedges:n,halfedges:i,triangles:r}}=this,o=n[t];if(-1===o)return null;const a=[];let u=o;do{const n=Math.floor(u/3);if(a.push(e[2*n],e[2*n+1]),u=u%3==2?u-2:u+1,r[u]!==t)break;u=i[u]}while(u!==o&&-1!==u);return a}_clip(t){if(0===t&&1===this.delaunay.hull.length)return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];const e=this._cell(t);if(null===e)return null;const{vectors:n}=this,i=4*t;return this._simplify(n[i]||n[i+1]?this._clipInfinite(t,e,n[i],n[i+1],n[i+2],n[i+3]):this._clipFinite(t,e))}_clipFinite(t,e){const n=e.length;let i,r,o,a,u=null,c=e[n-2],s=e[n-1],l=this._regioncode(c,s),d=0;for(let f=0;f<n;f+=2)if(i=c,r=s,c=e[f],s=e[f+1],o=l,l=this._regioncode(c,s),0===o&&0===l)a=d,d=0,u?u.push(c,s):u=[c,s];else{let e,n,f,h,v;if(0===o){if(null===(e=this._clipSegment(i,r,c,s,o,l)))continue;[n,f,h,v]=e}else{if(null===(e=this._clipSegment(c,s,i,r,l,o)))continue;[h,v,n,f]=e,a=d,d=this._edgecode(n,f),a&&d&&this._edge(t,a,d,u,u.length),u?u.push(n,f):u=[n,f]}a=d,d=this._edgecode(h,v),a&&d&&this._edge(t,a,d,u,u.length),u?u.push(h,v):u=[h,v]}if(u)a=d,d=this._edgecode(u[0],u[1]),a&&d&&this._edge(t,a,d,u,u.length);else if(this.contains(t,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2))return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];return u}_clipSegment(t,e,n,i,r,o){const a=r<o;for(a&&([t,e,n,i,r,o]=[n,i,t,e,o,r]);;){if(0===r&&0===o)return a?[n,i,t,e]:[t,e,n,i];if(r&o)return null;let u,c,s=r||o;8&s?(u=t+(n-t)*(this.ymax-e)/(i-e),c=this.ymax):4&s?(u=t+(n-t)*(this.ymin-e)/(i-e),c=this.ymin):2&s?(c=e+(i-e)*(this.xmax-t)/(n-t),u=this.xmax):(c=e+(i-e)*(this.xmin-t)/(n-t),u=this.xmin),r?(t=u,e=c,r=this._regioncode(t,e)):(n=u,i=c,o=this._regioncode(n,i))}}_clipInfinite(t,e,n,i,r,o){let a,u=Array.from(e);if((a=this._project(u[0],u[1],n,i))&&u.unshift(a[0],a[1]),(a=this._project(u[u.length-2],u[u.length-1],r,o))&&u.push(a[0],a[1]),u=this._clipFinite(t,u))for(let e,n=0,i=u.length,r=this._edgecode(u[i-2],u[i-1]);n<i;n+=2)e=r,r=this._edgecode(u[n],u[n+1]),e&&r&&(n=this._edge(t,e,r,u,n),i=u.length);else this.contains(t,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2)&&(u=[this.xmin,this.ymin,this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax]);return u}_edge(t,e,n,i,r){for(;e!==n;){let n,o;switch(e){case 5:e=4;continue;case 4:e=6,n=this.xmax,o=this.ymin;break;case 6:e=2;continue;case 2:e=10,n=this.xmax,o=this.ymax;break;case 10:e=8;continue;case 8:e=9,n=this.xmin,o=this.ymax;break;case 9:e=1;continue;case 1:e=5,n=this.xmin,o=this.ymin}i[r]===n&&i[r+1]===o||!this.contains(t,n,o)||(i.splice(r,0,n,o),r+=2)}return r}_project(t,e,n,i){let r,o,a,u=1/0;if(i<0){if(e<=this.ymin)return null;(r=(this.ymin-e)/i)<u&&(a=this.ymin,o=t+(u=r)*n)}else if(i>0){if(e>=this.ymax)return null;(r=(this.ymax-e)/i)<u&&(a=this.ymax,o=t+(u=r)*n)}if(n>0){if(t>=this.xmax)return null;(r=(this.xmax-t)/n)<u&&(o=this.xmax,a=e+(u=r)*i)}else if(n<0){if(t<=this.xmin)return null;(r=(this.xmin-t)/n)<u&&(o=this.xmin,a=e+(u=r)*i)}return[o,a]}_edgecode(t,e){return(t===this.xmin?1:t===this.xmax?2:0)|(e===this.ymin?4:e===this.ymax?8:0)}_regioncode(t,e){return(t<this.xmin?1:t>this.xmax?2:0)|(e<this.ymin?4:e>this.ymax?8:0)}_simplify(t){if(t&&t.length>4){for(let e=0;e<t.length;e+=2){const n=(e+2)%t.length,i=(e+4)%t.length;(t[e]===t[n]&&t[n]===t[i]||t[e+1]===t[n+1]&&t[n+1]===t[i+1])&&(t.splice(n,2),e-=2)}t.length||(t=null)}return t}}const Ku=2*Math.PI,Hu=Math.pow;function Qu(t){return t[0]}function qu(t){return t[1]}function $u(t,e,n){return[t+Math.sin(t+e)*n,e+Math.cos(t-e)*n]}class Yu{static from(t,e=Qu,n=qu,i){return new Yu("length"in t?function(t,e,n,i){const r=t.length,o=new Float64Array(2*r);for(let a=0;a<r;++a){const r=t[a];o[2*a]=e.call(i,r,a,t),o[2*a+1]=n.call(i,r,a,t)}return o}(t,e,n,i):Float64Array.from(function*(t,e,n,i){let r=0;for(const o of t)yield e.call(i,o,r,t),yield n.call(i,o,r,t),++r}(t,e,n,i)))}constructor(t){this._delaunator=new Cu(t),this.inedges=new Int32Array(t.length/2),this._hullIndex=new Int32Array(t.length/2),this.points=this._delaunator.coords,this._init()}update(){return this._delaunator.update(),this._init(),this}_init(){const t=this._delaunator,e=this.points;if(t.hull&&t.hull.length>2&&function(t){const{triangles:e,coords:n}=t;for(let t=0;t<e.length;t+=3){const i=2*e[t],r=2*e[t+1],o=2*e[t+2];if((n[o]-n[i])*(n[r+1]-n[i+1])-(n[r]-n[i])*(n[o+1]-n[i+1])>1e-10)return!1}return!0}(t)){this.collinear=Int32Array.from({length:e.length/2},((t,e)=>e)).sort(((t,n)=>e[2*t]-e[2*n]||e[2*t+1]-e[2*n+1]));const t=this.collinear[0],n=this.collinear[this.collinear.length-1],i=[e[2*t],e[2*t+1],e[2*n],e[2*n+1]],r=1e-8*Math.hypot(i[3]-i[1],i[2]-i[0]);for(let t=0,n=e.length/2;t<n;++t){const n=$u(e[2*t],e[2*t+1],r);e[2*t]=n[0],e[2*t+1]=n[1]}this._delaunator=new Cu(e)}else delete this.collinear;const n=this.halfedges=this._delaunator.halfedges,i=this.hull=this._delaunator.hull,r=this.triangles=this._delaunator.triangles,o=this.inedges.fill(-1),a=this._hullIndex.fill(-1);for(let t=0,e=n.length;t<e;++t){const e=r[t%3==2?t-2:t+1];-1!==n[t]&&-1!==o[e]||(o[e]=t)}for(let t=0,e=i.length;t<e;++t)a[i[t]]=t;i.length<=2&&i.length>0&&(this.triangles=new Int32Array(3).fill(-1),this.halfedges=new Int32Array(3).fill(-1),this.triangles[0]=i[0],o[i[0]]=1,2===i.length&&(o[i[1]]=0,this.triangles[1]=i[1],this.triangles[2]=i[1]))}voronoi(t){return new Uu(this,t)}*neighbors(t){const{inedges:e,hull:n,_hullIndex:i,halfedges:r,triangles:o,collinear:a}=this;if(a){const e=a.indexOf(t);return e>0&&(yield a[e-1]),void(e<a.length-1&&(yield a[e+1]))}const u=e[t];if(-1===u)return;let c=u,s=-1;do{if(yield s=o[c],c=c%3==2?c-2:c+1,o[c]!==t)return;if(c=r[c],-1===c){const e=n[(i[t]+1)%n.length];return void(e!==s&&(yield e))}}while(c!==u)}find(t,e,n=0){if((t=+t)!=t||(e=+e)!=e)return-1;const i=n;let r;for(;(r=this._step(n,t,e))>=0&&r!==n&&r!==i;)n=r;return r}_step(t,e,n){const{inedges:i,hull:r,_hullIndex:o,halfedges:a,triangles:u,points:c}=this;if(-1===i[t]||!c.length)return(t+1)%(c.length>>1);let s=t,l=Hu(e-c[2*t],2)+Hu(n-c[2*t+1],2);const d=i[t];let f=d;do{let i=u[f];const d=Hu(e-c[2*i],2)+Hu(n-c[2*i+1],2);if(d<l&&(l=d,s=i),f=f%3==2?f-2:f+1,u[f]!==t)break;if(f=a[f],-1===f){if(f=r[(o[t]+1)%r.length],f!==i&&Hu(e-c[2*f],2)+Hu(n-c[2*f+1],2)<l)return f;break}}while(f!==d);return s}render(t){const e=null==t?t=new Fu:void 0,{points:n,halfedges:i,triangles:r}=this;for(let e=0,o=i.length;e<o;++e){const o=i[e];if(o<e)continue;const a=2*r[e],u=2*r[o];t.moveTo(n[a],n[a+1]),t.lineTo(n[u],n[u+1])}return this.renderHull(t),e&&e.value()}renderPoints(t,e){void 0!==e||t&&"function"==typeof t.moveTo||(e=t,t=null),e=null==e?2:+e;const n=null==t?t=new Fu:void 0,{points:i}=this;for(let n=0,r=i.length;n<r;n+=2){const r=i[n],o=i[n+1];t.moveTo(r+e,o),t.arc(r,o,e,0,Ku)}return n&&n.value()}renderHull(t){const e=null==t?t=new Fu:void 0,{hull:n,points:i}=this,r=2*n[0],o=n.length;t.moveTo(i[r],i[r+1]);for(let e=1;e<o;++e){const r=2*n[e];t.lineTo(i[r],i[r+1])}return t.closePath(),e&&e.value()}hullPolygon(){const t=new Gu;return this.renderHull(t),t.value()}renderTriangle(t,e){const n=null==e?e=new Fu:void 0,{points:i,triangles:r}=this,o=2*r[t*=3],a=2*r[t+1],u=2*r[t+2];return e.moveTo(i[o],i[o+1]),e.lineTo(i[a],i[a+1]),e.lineTo(i[u],i[u+1]),e.closePath(),n&&n.value()}*trianglePolygons(){const{triangles:t}=this;for(let e=0,n=t.length/3;e<n;++e)yield this.trianglePolygon(e)}trianglePolygon(t){const e=new Gu;return this.renderTriangle(t,e),e.value()}}const Wu=t=>()=>t;function Xu(t,{sourceEvent:e,subject:n,target:i,identifier:r,active:o,x:a,y:u,dx:c,dy:s,dispatch:l}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:e,enumerable:!0,configurable:!0},subject:{value:n,enumerable:!0,configurable:!0},target:{value:i,enumerable:!0,configurable:!0},identifier:{value:r,enumerable:!0,configurable:!0},active:{value:o,enumerable:!0,configurable:!0},x:{value:a,enumerable:!0,configurable:!0},y:{value:u,enumerable:!0,configurable:!0},dx:{value:c,enumerable:!0,configurable:!0},dy:{value:s,enumerable:!0,configurable:!0},_:{value:l}})}function Ju(t){return!t.ctrlKey&&!t.button}function Zu(){return this.parentNode}function tc(t,e){return null==e?{x:t.x,y:t.y}:e}function ec(){return navigator.maxTouchPoints||"ontouchstart"in this}function nc(){var t,e,n,i,r=Ju,o=Zu,a=tc,u=ec,c={},s=ke("start","drag","end"),l=0,d=0;function f(t){t.on("mousedown.drag",h).filter(u).on("touchstart.drag",g).on("touchmove.drag",y,Gn).on("touchend.drag touchcancel.drag",_).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function h(a,u){if(!i&&r.call(this,a,u)){var c=b(this,o.call(this,a,u),a,u,"mouse");c&&(Fn(a.view).on("mousemove.drag",v,Un).on("mouseup.drag",p,Un),Qn(a.view),Kn(a),n=!1,t=a.clientX,e=a.clientY,c("start",a))}}function v(i){if(Hn(i),!n){var r=i.clientX-t,o=i.clientY-e;n=r*r+o*o>d}c.mouse("drag",i)}function p(t){Fn(t.view).on("mousemove.drag mouseup.drag",null),qn(t.view,n),Hn(t),c.mouse("end",t)}function g(t,e){if(r.call(this,t,e)){var n,i,a=t.changedTouches,u=o.call(this,t,e),c=a.length;for(n=0;n<c;++n)(i=b(this,u,t,e,a[n].identifier,a[n]))&&(Kn(t),i("start",t,a[n]))}}function y(t){var e,n,i=t.changedTouches,r=i.length;for(e=0;e<r;++e)(n=c[i[e].identifier])&&(Hn(t),n("drag",t,i[e]))}function _(t){var e,n,r=t.changedTouches,o=r.length;for(i&&clearTimeout(i),i=setTimeout((function(){i=null}),500),e=0;e<o;++e)(n=c[r[e].identifier])&&(Kn(t),n("end",t,r[e]))}function b(t,e,n,i,r,o){var u,d,h,v=s.copy(),p=Zi(o||n,e);if(null!=(h=a.call(t,new Xu("beforestart",{sourceEvent:n,target:f,identifier:r,active:l,x:p[0],y:p[1],dx:0,dy:0,dispatch:v}),i)))return u=h.x-p[0]||0,d=h.y-p[1]||0,function n(o,a,s){var g,y=p;switch(o){case"start":c[r]=n,g=l++;break;case"end":delete c[r],--l;case"drag":p=Zi(s||a,e),g=l}v.call(o,t,new Xu(o,{sourceEvent:a,subject:h,target:f,identifier:r,active:g,x:p[0]+u,y:p[1]+d,dx:p[0]-y[0],dy:p[1]-y[1],dispatch:v}),i)}}return f.filter=function(t){return arguments.length?(r="function"==typeof t?t:Wu(!!t),f):r},f.container=function(t){return arguments.length?(o="function"==typeof t?t:Wu(t),f):o},f.subject=function(t){return arguments.length?(a="function"==typeof t?t:Wu(t),f):a},f.touchable=function(t){return arguments.length?(u="function"==typeof t?t:Wu(!!t),f):u},f.on=function(){var t=s.on.apply(s,arguments);return t===s?f:t},f.clickDistance=function(t){return arguments.length?(d=(t=+t)*t,f):Math.sqrt(d)},f}Xu.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var ic={},rc={},oc=34,ac=10,uc=13;function cc(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+'] || ""'})).join(",")+"}")}function sc(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var i in t)i in e||n.push(e[i]=i)})),n}function lc(t,e){var n=t+"",i=n.length;return i<e?new Array(e-i+1).join(0)+n:n}function dc(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function i(t,e){var i,r=[],o=t.length,a=0,u=0,c=o<=0,s=!1;function l(){if(c)return rc;if(s)return s=!1,ic;var e,i,r=a;if(t.charCodeAt(r)===oc){for(;a++<o&&t.charCodeAt(a)!==oc||t.charCodeAt(++a)===oc;);return(e=a)>=o?c=!0:(i=t.charCodeAt(a++))===ac?s=!0:i===uc&&(s=!0,t.charCodeAt(a)===ac&&++a),t.slice(r+1,e-1).replace(/""/g,'"')}for(;a<o;){if((i=t.charCodeAt(e=a++))===ac)s=!0;else if(i===uc)s=!0,t.charCodeAt(a)===ac&&++a;else if(i!==n)continue;return t.slice(r,e)}return c=!0,t.slice(r,o)}for(t.charCodeAt(o-1)===ac&&--o,t.charCodeAt(o-1)===uc&&--o;(i=l())!==rc;){for(var d=[];i!==ic&&i!==rc;)d.push(i),i=l();e&&null==(d=e(d,u++))||r.push(d)}return r}function r(e,n){return e.map((function(e){return n.map((function(t){return a(e[t])})).join(t)}))}function o(e){return e.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?function(t){var e,n=t.getUTCHours(),i=t.getUTCMinutes(),r=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+lc(-e,6):e>9999?"+"+lc(e,6):lc(e,4))+"-"+lc(t.getUTCMonth()+1,2)+"-"+lc(t.getUTCDate(),2)+(o?"T"+lc(n,2)+":"+lc(i,2)+":"+lc(r,2)+"."+lc(o,3)+"Z":r?"T"+lc(n,2)+":"+lc(i,2)+":"+lc(r,2)+"Z":i||n?"T"+lc(n,2)+":"+lc(i,2)+"Z":"")}(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,r,o=i(t,(function(t,i){if(n)return n(t,i-1);r=t,n=e?function(t,e){var n=cc(t);return function(i,r){return e(n(i),r,t)}}(t,e):cc(t)}));return o.columns=r||[],o},parseRows:i,format:function(e,n){return null==n&&(n=sc(e)),[n.map(a).join(t)].concat(r(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=sc(t)),r(t,e).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:a}}var fc=dc(","),hc=fc.parse,vc=fc.parseRows,pc=fc.format,gc=fc.formatBody,yc=fc.formatRows,_c=fc.formatRow,bc=fc.formatValue,mc=dc("\t"),wc=mc.parse,xc=mc.parseRows,Sc=mc.format,Mc=mc.formatBody,Ec=mc.formatRows,kc=mc.formatRow,Tc=mc.formatValue;function Nc(t){for(var e in t){var n,i,r=t[e].trim();if(r)if("true"===r)r=!0;else if("false"===r)r=!1;else if("NaN"===r)r=NaN;else if(isNaN(n=+r)){if(!(i=r.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)))continue;Ac&&i[4]&&!i[7]&&(r=r.replace(/-/g,"/").replace(/T/," ")),r=new Date(r)}else r=n;else r=null;t[e]=r}return t}const Ac=new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours(),Oc=t=>+t;function Rc(t){return t*t}function Cc(t){return t*(2-t)}function Ic(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}var jc=function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n}(3),Pc=function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),zc=function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3),Dc=Math.PI,Vc=Dc/2;function Lc(t){return 1==+t?1:1-Math.cos(t*Vc)}function Bc(t){return Math.sin(t*Vc)}function Fc(t){return(1-Math.cos(Dc*t))/2}function Gc(t){return 1.0009775171065494*(Math.pow(2,-10*t)-.0009765625)}function Uc(t){return Gc(1-+t)}function Kc(t){return 1-Gc(t)}function Hc(t){return((t*=2)<=1?Gc(1-t):2-Gc(t-1))/2}function Qc(t){return 1-Math.sqrt(1-t*t)}function qc(t){return Math.sqrt(1- --t*t)}function $c(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var Yc=4/11,Wc=6/11,Xc=8/11,Jc=3/4,Zc=9/11,ts=10/11,es=15/16,ns=21/22,is=63/64,rs=1/Yc/Yc;function os(t){return 1-as(1-t)}function as(t){return(t=+t)<Yc?rs*t*t:t<Xc?rs*(t-=Wc)*t+Jc:t<ts?rs*(t-=Zc)*t+es:rs*(t-=ns)*t+is}function us(t){return((t*=2)<=1?1-as(1-t):as(t-1)+1)/2}var cs=1.70158,ss=function t(e){function n(t){return(t=+t)*t*(e*(t-1)+t)}return e=+e,n.overshoot=t,n}(cs),ls=function t(e){function n(t){return--t*t*((t+1)*e+t)+1}return e=+e,n.overshoot=t,n}(cs),ds=function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(cs),fs=2*Math.PI,hs=function t(e,n){var i=Math.asin(1/(e=Math.max(1,e)))*(n/=fs);function r(t){return e*Gc(- --t)*Math.sin((i-t)/n)}return r.amplitude=function(e){return t(e,n*fs)},r.period=function(n){return t(e,n)},r}(1,.3),vs=function t(e,n){var i=Math.asin(1/(e=Math.max(1,e)))*(n/=fs);function r(t){return 1-e*Gc(t=+t)*Math.sin((t+i)/n)}return r.amplitude=function(e){return t(e,n*fs)},r.period=function(n){return t(e,n)},r}(1,.3),ps=function t(e,n){var i=Math.asin(1/(e=Math.max(1,e)))*(n/=fs);function r(t){return((t=2*t-1)<0?e*Gc(-t)*Math.sin((i-t)/n):2-e*Gc(t)*Math.sin((i+t)/n))/2}return r.amplitude=function(e){return t(e,n*fs)},r.period=function(n){return t(e,n)},r}(1,.3);function gs(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}function ys(t,e){return fetch(t,e).then(gs)}function _s(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}function bs(t,e){return fetch(t,e).then(_s)}function ms(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}function ws(t,e){return fetch(t,e).then(ms)}function xs(t){return function(e,n,i){return 2===arguments.length&&"function"==typeof n&&(i=n,n=void 0),ws(e,n).then((function(e){return t(e,i)}))}}function Ss(t,e,n,i){3===arguments.length&&"function"==typeof n&&(i=n,n=void 0);var r=dc(t);return ws(e,n).then((function(t){return r.parse(t,i)}))}var Ms=xs(hc),Es=xs(wc);function ks(t,e){return new Promise((function(n,i){var r=new Image;for(var o in e)r[o]=e[o];r.onerror=i,r.onload=function(){n(r)},r.src=t}))}function Ts(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);if(204!==t.status&&205!==t.status)return t.json()}function Ns(t,e){return fetch(t,e).then(Ts)}function As(t){return(e,n)=>ws(e,n).then((e=>(new DOMParser).parseFromString(e,t)))}const Os=As("application/xml");var Rs=As("text/html"),Cs=As("image/svg+xml");function Is(t,e){var n,i=1;function r(){var r,o,a=n.length,u=0,c=0;for(r=0;r<a;++r)u+=(o=n[r]).x,c+=o.y;for(u=(u/a-t)*i,c=(c/a-e)*i,r=0;r<a;++r)(o=n[r]).x-=u,o.y-=c}return null==t&&(t=0),null==e&&(e=0),r.initialize=function(t){n=t},r.x=function(e){return arguments.length?(t=+e,r):t},r.y=function(t){return arguments.length?(e=+t,r):e},r.strength=function(t){return arguments.length?(i=+t,r):i},r}function js(t,e,n,i){if(isNaN(e)||isNaN(n))return t;var r,o,a,u,c,s,l,d,f,h=t._root,v={data:i},p=t._x0,g=t._y0,y=t._x1,_=t._y1;if(!h)return t._root=v,t;for(;h.length;)if((s=e>=(o=(p+y)/2))?p=o:y=o,(l=n>=(a=(g+_)/2))?g=a:_=a,r=h,!(h=h[d=l<<1|s]))return r[d]=v,t;if(u=+t._x.call(null,h.data),c=+t._y.call(null,h.data),e===u&&n===c)return v.next=h,r?r[d]=v:t._root=v,t;do{r=r?r[d]=new Array(4):t._root=new Array(4),(s=e>=(o=(p+y)/2))?p=o:y=o,(l=n>=(a=(g+_)/2))?g=a:_=a}while((d=l<<1|s)==(f=(c>=a)<<1|u>=o));return r[f]=h,r[d]=v,t}function Ps(t,e,n,i,r){this.node=t,this.x0=e,this.y0=n,this.x1=i,this.y1=r}function zs(t){return t[0]}function Ds(t){return t[1]}function Vs(t,e,n){var i=new Ls(null==e?zs:e,null==n?Ds:n,NaN,NaN,NaN,NaN);return null==t?i:i.addAll(t)}function Ls(t,e,n,i,r,o){this._x=t,this._y=e,this._x0=n,this._y0=i,this._x1=r,this._y1=o,this._root=void 0}function Bs(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var Fs=Vs.prototype=Ls.prototype;function Gs(t){return function(){return t}}function Us(t){return 1e-6*(t()-.5)}function Ks(t){return t.x+t.vx}function Hs(t){return t.y+t.vy}function Qs(t){var e,n,i,r=1,o=1;function a(){for(var t,a,c,s,l,d,f,h=e.length,v=0;v<o;++v)for(a=Vs(e,Ks,Hs).visitAfter(u),t=0;t<h;++t)c=e[t],d=n[c.index],f=d*d,s=c.x+c.vx,l=c.y+c.vy,a.visit(p);function p(t,e,n,o,a){var u=t.data,h=t.r,v=d+h;if(!u)return e>s+v||o<s-v||n>l+v||a<l-v;if(u.index>c.index){var p=s-u.x-u.vx,g=l-u.y-u.vy,y=p*p+g*g;y<v*v&&(0===p&&(y+=(p=Us(i))*p),0===g&&(y+=(g=Us(i))*g),y=(v-(y=Math.sqrt(y)))/y*r,c.vx+=(p*=y)*(v=(h*=h)/(f+h)),c.vy+=(g*=y)*v,u.vx-=p*(v=1-v),u.vy-=g*v)}}}function u(t){if(t.data)return t.r=n[t.data.index];for(var e=t.r=0;e<4;++e)t[e]&&t[e].r>t.r&&(t.r=t[e].r)}function c(){if(e){var i,r,o=e.length;for(n=new Array(o),i=0;i<o;++i)r=e[i],n[r.index]=+t(r,i,e)}}return"function"!=typeof t&&(t=Gs(null==t?1:+t)),a.initialize=function(t,n){e=t,i=n,c()},a.iterations=function(t){return arguments.length?(o=+t,a):o},a.strength=function(t){return arguments.length?(r=+t,a):r},a.radius=function(e){return arguments.length?(t="function"==typeof e?e:Gs(+e),c(),a):t},a}function qs(t){return t.index}function $s(t,e){var n=t.get(e);if(!n)throw new Error("node not found: "+e);return n}function Ys(t){var e,n,i,r,o,a,u=qs,c=function(t){return 1/Math.min(r[t.source.index],r[t.target.index])},s=Gs(30),l=1;function d(i){for(var r=0,u=t.length;r<l;++r)for(var c,s,d,f,h,v,p,g=0;g<u;++g)s=(c=t[g]).source,f=(d=c.target).x+d.vx-s.x-s.vx||Us(a),h=d.y+d.vy-s.y-s.vy||Us(a),f*=v=((v=Math.sqrt(f*f+h*h))-n[g])/v*i*e[g],h*=v,d.vx-=f*(p=o[g]),d.vy-=h*p,s.vx+=f*(p=1-p),s.vy+=h*p}function f(){if(i){var a,c,s=i.length,l=t.length,d=new Map(i.map(((t,e)=>[u(t,e,i),t])));for(a=0,r=new Array(s);a<l;++a)(c=t[a]).index=a,"object"!=typeof c.source&&(c.source=$s(d,c.source)),"object"!=typeof c.target&&(c.target=$s(d,c.target)),r[c.source.index]=(r[c.source.index]||0)+1,r[c.target.index]=(r[c.target.index]||0)+1;for(a=0,o=new Array(l);a<l;++a)c=t[a],o[a]=r[c.source.index]/(r[c.source.index]+r[c.target.index]);e=new Array(l),h(),n=new Array(l),v()}}function h(){if(i)for(var n=0,r=t.length;n<r;++n)e[n]=+c(t[n],n,t)}function v(){if(i)for(var e=0,r=t.length;e<r;++e)n[e]=+s(t[e],e,t)}return null==t&&(t=[]),d.initialize=function(t,e){i=t,a=e,f()},d.links=function(e){return arguments.length?(t=e,f(),d):t},d.id=function(t){return arguments.length?(u=t,d):u},d.iterations=function(t){return arguments.length?(l=+t,d):l},d.strength=function(t){return arguments.length?(c="function"==typeof t?t:Gs(+t),h(),d):c},d.distance=function(t){return arguments.length?(s="function"==typeof t?t:Gs(+t),v(),d):s},d}Fs.copy=function(){var t,e,n=new Ls(this._x,this._y,this._x0,this._y0,this._x1,this._y1),i=this._root;if(!i)return n;if(!i.length)return n._root=Bs(i),n;for(t=[{source:i,target:n._root=new Array(4)}];i=t.pop();)for(var r=0;r<4;++r)(e=i.source[r])&&(e.length?t.push({source:e,target:i.target[r]=new Array(4)}):i.target[r]=Bs(e));return n},Fs.add=function(t){const e=+this._x.call(null,t),n=+this._y.call(null,t);return js(this.cover(e,n),e,n,t)},Fs.addAll=function(t){var e,n,i,r,o=t.length,a=new Array(o),u=new Array(o),c=1/0,s=1/0,l=-1/0,d=-1/0;for(n=0;n<o;++n)isNaN(i=+this._x.call(null,e=t[n]))||isNaN(r=+this._y.call(null,e))||(a[n]=i,u[n]=r,i<c&&(c=i),i>l&&(l=i),r<s&&(s=r),r>d&&(d=r));if(c>l||s>d)return this;for(this.cover(c,s).cover(l,d),n=0;n<o;++n)js(this,a[n],u[n],t[n]);return this},Fs.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,i=this._y0,r=this._x1,o=this._y1;if(isNaN(n))r=(n=Math.floor(t))+1,o=(i=Math.floor(e))+1;else{for(var a,u,c=r-n||1,s=this._root;n>t||t>=r||i>e||e>=o;)switch(u=(e<i)<<1|t<n,(a=new Array(4))[u]=s,s=a,c*=2,u){case 0:r=n+c,o=i+c;break;case 1:n=r-c,o=i+c;break;case 2:r=n+c,i=o-c;break;case 3:n=r-c,i=o-c}this._root&&this._root.length&&(this._root=s)}return this._x0=n,this._y0=i,this._x1=r,this._y1=o,this},Fs.data=function(){var t=[];return this.visit((function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)})),t},Fs.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Fs.find=function(t,e,n){var i,r,o,a,u,c,s,l=this._x0,d=this._y0,f=this._x1,h=this._y1,v=[],p=this._root;for(p&&v.push(new Ps(p,l,d,f,h)),null==n?n=1/0:(l=t-n,d=e-n,f=t+n,h=e+n,n*=n);c=v.pop();)if(!(!(p=c.node)||(r=c.x0)>f||(o=c.y0)>h||(a=c.x1)<l||(u=c.y1)<d))if(p.length){var g=(r+a)/2,y=(o+u)/2;v.push(new Ps(p[3],g,y,a,u),new Ps(p[2],r,y,g,u),new Ps(p[1],g,o,a,y),new Ps(p[0],r,o,g,y)),(s=(e>=y)<<1|t>=g)&&(c=v[v.length-1],v[v.length-1]=v[v.length-1-s],v[v.length-1-s]=c)}else{var _=t-+this._x.call(null,p.data),b=e-+this._y.call(null,p.data),m=_*_+b*b;if(m<n){var w=Math.sqrt(n=m);l=t-w,d=e-w,f=t+w,h=e+w,i=p.data}}return i},Fs.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var e,n,i,r,o,a,u,c,s,l,d,f,h=this._root,v=this._x0,p=this._y0,g=this._x1,y=this._y1;if(!h)return this;if(h.length)for(;;){if((s=o>=(u=(v+g)/2))?v=u:g=u,(l=a>=(c=(p+y)/2))?p=c:y=c,e=h,!(h=h[d=l<<1|s]))return this;if(!h.length)break;(e[d+1&3]||e[d+2&3]||e[d+3&3])&&(n=e,f=d)}for(;h.data!==t;)if(i=h,!(h=h.next))return this;return(r=h.next)&&delete h.next,i?(r?i.next=r:delete i.next,this):e?(r?e[d]=r:delete e[d],(h=e[0]||e[1]||e[2]||e[3])&&h===(e[3]||e[2]||e[1]||e[0])&&!h.length&&(n?n[f]=h:this._root=h),this):(this._root=r,this)},Fs.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},Fs.root=function(){return this._root},Fs.size=function(){var t=0;return this.visit((function(e){if(!e.length)do{++t}while(e=e.next)})),t},Fs.visit=function(t){var e,n,i,r,o,a,u=[],c=this._root;for(c&&u.push(new Ps(c,this._x0,this._y0,this._x1,this._y1));e=u.pop();)if(!t(c=e.node,i=e.x0,r=e.y0,o=e.x1,a=e.y1)&&c.length){var s=(i+o)/2,l=(r+a)/2;(n=c[3])&&u.push(new Ps(n,s,l,o,a)),(n=c[2])&&u.push(new Ps(n,i,l,s,a)),(n=c[1])&&u.push(new Ps(n,s,r,o,l)),(n=c[0])&&u.push(new Ps(n,i,r,s,l))}return this},Fs.visitAfter=function(t){var e,n=[],i=[];for(this._root&&n.push(new Ps(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var r=e.node;if(r.length){var o,a=e.x0,u=e.y0,c=e.x1,s=e.y1,l=(a+c)/2,d=(u+s)/2;(o=r[0])&&n.push(new Ps(o,a,u,l,d)),(o=r[1])&&n.push(new Ps(o,l,u,c,d)),(o=r[2])&&n.push(new Ps(o,a,d,l,s)),(o=r[3])&&n.push(new Ps(o,l,d,c,s))}i.push(e)}for(;e=i.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},Fs.x=function(t){return arguments.length?(this._x=t,this):this._x},Fs.y=function(t){return arguments.length?(this._y=t,this):this._y};const Ws=1664525,Xs=1013904223,Js=4294967296;function Zs(t){return t.x}function tl(t){return t.y}var el=10,nl=Math.PI*(3-Math.sqrt(5));function il(t){var e,n=1,i=.001,r=1-Math.pow(i,1/300),o=0,a=.6,u=new Map,c=vr(d),s=ke("tick","end"),l=function(){let t=1;return()=>(t=(Ws*t+Xs)%Js)/Js}();function d(){f(),s.call("tick",e),n<i&&(c.stop(),s.call("end",e))}function f(i){var c,s,l=t.length;void 0===i&&(i=1);for(var d=0;d<i;++d)for(n+=(o-n)*r,u.forEach((function(t){t(n)})),c=0;c<l;++c)null==(s=t[c]).fx?s.x+=s.vx*=a:(s.x=s.fx,s.vx=0),null==s.fy?s.y+=s.vy*=a:(s.y=s.fy,s.vy=0);return e}function h(){for(var e,n=0,i=t.length;n<i;++n){if((e=t[n]).index=n,null!=e.fx&&(e.x=e.fx),null!=e.fy&&(e.y=e.fy),isNaN(e.x)||isNaN(e.y)){var r=el*Math.sqrt(.5+n),o=n*nl;e.x=r*Math.cos(o),e.y=r*Math.sin(o)}(isNaN(e.vx)||isNaN(e.vy))&&(e.vx=e.vy=0)}}function v(e){return e.initialize&&e.initialize(t,l),e}return null==t&&(t=[]),h(),e={tick:f,restart:function(){return c.restart(d),e},stop:function(){return c.stop(),e},nodes:function(n){return arguments.length?(t=n,h(),u.forEach(v),e):t},alpha:function(t){return arguments.length?(n=+t,e):n},alphaMin:function(t){return arguments.length?(i=+t,e):i},alphaDecay:function(t){return arguments.length?(r=+t,e):+r},alphaTarget:function(t){return arguments.length?(o=+t,e):o},velocityDecay:function(t){return arguments.length?(a=1-t,e):1-a},randomSource:function(t){return arguments.length?(l=t,u.forEach(v),e):l},force:function(t,n){return arguments.length>1?(null==n?u.delete(t):u.set(t,v(n)),e):u.get(t)},find:function(e,n,i){var r,o,a,u,c,s=0,l=t.length;for(null==i?i=1/0:i*=i,s=0;s<l;++s)(a=(r=e-(u=t[s]).x)*r+(o=n-u.y)*o)<i&&(c=u,i=a);return c},on:function(t,n){return arguments.length>1?(s.on(t,n),e):s.on(t)}}}function rl(){var t,e,n,i,r,o=Gs(-30),a=1,u=1/0,c=.81;function s(n){var r,o=t.length,a=Vs(t,Zs,tl).visitAfter(d);for(i=n,r=0;r<o;++r)e=t[r],a.visit(f)}function l(){if(t){var e,n,i=t.length;for(r=new Array(i),e=0;e<i;++e)n=t[e],r[n.index]=+o(n,e,t)}}function d(t){var e,n,i,o,a,u=0,c=0;if(t.length){for(i=o=a=0;a<4;++a)(e=t[a])&&(n=Math.abs(e.value))&&(u+=e.value,c+=n,i+=n*e.x,o+=n*e.y);t.x=i/c,t.y=o/c}else{(e=t).x=e.data.x,e.y=e.data.y;do{u+=r[e.data.index]}while(e=e.next)}t.value=u}function f(t,o,s,l){if(!t.value)return!0;var d=t.x-e.x,f=t.y-e.y,h=l-o,v=d*d+f*f;if(h*h/c<v)return v<u&&(0===d&&(v+=(d=Us(n))*d),0===f&&(v+=(f=Us(n))*f),v<a&&(v=Math.sqrt(a*v)),e.vx+=d*t.value*i/v,e.vy+=f*t.value*i/v),!0;if(!(t.length||v>=u)){(t.data!==e||t.next)&&(0===d&&(v+=(d=Us(n))*d),0===f&&(v+=(f=Us(n))*f),v<a&&(v=Math.sqrt(a*v)));do{t.data!==e&&(h=r[t.data.index]*i/v,e.vx+=d*h,e.vy+=f*h)}while(t=t.next)}}return s.initialize=function(e,i){t=e,n=i,l()},s.strength=function(t){return arguments.length?(o="function"==typeof t?t:Gs(+t),l(),s):o},s.distanceMin=function(t){return arguments.length?(a=t*t,s):Math.sqrt(a)},s.distanceMax=function(t){return arguments.length?(u=t*t,s):Math.sqrt(u)},s.theta=function(t){return arguments.length?(c=t*t,s):Math.sqrt(c)},s}function ol(t,e,n){var i,r,o,a=Gs(.1);function u(t){for(var a=0,u=i.length;a<u;++a){var c=i[a],s=c.x-e||1e-6,l=c.y-n||1e-6,d=Math.sqrt(s*s+l*l),f=(o[a]-d)*r[a]*t/d;c.vx+=s*f,c.vy+=l*f}}function c(){if(i){var e,n=i.length;for(r=new Array(n),o=new Array(n),e=0;e<n;++e)o[e]=+t(i[e],e,i),r[e]=isNaN(o[e])?0:+a(i[e],e,i)}}return"function"!=typeof t&&(t=Gs(+t)),null==e&&(e=0),null==n&&(n=0),u.initialize=function(t){i=t,c()},u.strength=function(t){return arguments.length?(a="function"==typeof t?t:Gs(+t),c(),u):a},u.radius=function(e){return arguments.length?(t="function"==typeof e?e:Gs(+e),c(),u):t},u.x=function(t){return arguments.length?(e=+t,u):e},u.y=function(t){return arguments.length?(n=+t,u):n},u}function al(t){var e,n,i,r=Gs(.1);function o(t){for(var r,o=0,a=e.length;o<a;++o)(r=e[o]).vx+=(i[o]-r.x)*n[o]*t}function a(){if(e){var o,a=e.length;for(n=new Array(a),i=new Array(a),o=0;o<a;++o)n[o]=isNaN(i[o]=+t(e[o],o,e))?0:+r(e[o],o,e)}}return"function"!=typeof t&&(t=Gs(null==t?0:+t)),o.initialize=function(t){e=t,a()},o.strength=function(t){return arguments.length?(r="function"==typeof t?t:Gs(+t),a(),o):r},o.x=function(e){return arguments.length?(t="function"==typeof e?e:Gs(+e),a(),o):t},o}function ul(t){var e,n,i,r=Gs(.1);function o(t){for(var r,o=0,a=e.length;o<a;++o)(r=e[o]).vy+=(i[o]-r.y)*n[o]*t}function a(){if(e){var o,a=e.length;for(n=new Array(a),i=new Array(a),o=0;o<a;++o)n[o]=isNaN(i[o]=+t(e[o],o,e))?0:+r(e[o],o,e)}}return"function"!=typeof t&&(t=Gs(null==t?0:+t)),o.initialize=function(t){e=t,a()},o.strength=function(t){return arguments.length?(r="function"==typeof t?t:Gs(+t),a(),o):r},o.y=function(e){return arguments.length?(t="function"==typeof e?e:Gs(+e),a(),o):t},o}function cl(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,i=t.slice(0,n);return[i.length>1?i[0]+i.slice(2):i,+t.slice(n+1)]}function sl(t){return(t=cl(Math.abs(t)))?t[1]:NaN}var ll,dl=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function fl(t){if(!(e=dl.exec(t)))throw new Error("invalid format: "+t);var e;return new hl({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function hl(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function vl(t,e){var n=cl(t,e);if(!n)return t+"";var i=n[0],r=n[1];return r<0?"0."+new Array(-r).join("0")+i:i.length>r+1?i.slice(0,r+1)+"."+i.slice(r+1):i+new Array(r-i.length+2).join("0")}fl.prototype=hl.prototype,hl.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const pl={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>vl(100*t,e),r:vl,s:function(t,e){var n=cl(t,e);if(!n)return t+"";var i=n[0],r=n[1],o=r-(ll=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,a=i.length;return o===a?i:o>a?i+new Array(o-a+1).join("0"):o>0?i.slice(0,o)+"."+i.slice(o):"0."+new Array(1-o).join("0")+cl(t,Math.max(0,e+o-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function gl(t){return t}var yl,_l,bl,ml=Array.prototype.map,wl=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function xl(t){var e,n,i=void 0===t.grouping||void 0===t.thousands?gl:(e=ml.call(t.grouping,Number),n=t.thousands+"",function(t,i){for(var r=t.length,o=[],a=0,u=e[0],c=0;r>0&&u>0&&(c+u+1>i&&(u=Math.max(1,i-c)),o.push(t.substring(r-=u,r+u)),!((c+=u+1)>i));)u=e[a=(a+1)%e.length];return o.reverse().join(n)}),r=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?gl:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(ml.call(t.numerals,String)),c=void 0===t.percent?"%":t.percent+"",s=void 0===t.minus?"−":t.minus+"",l=void 0===t.nan?"NaN":t.nan+"";function d(t){var e=(t=fl(t)).fill,n=t.align,d=t.sign,f=t.symbol,h=t.zero,v=t.width,p=t.comma,g=t.precision,y=t.trim,_=t.type;"n"===_?(p=!0,_="g"):pl[_]||(void 0===g&&(g=12),y=!0,_="g"),(h||"0"===e&&"="===n)&&(h=!0,e="0",n="=");var b="$"===f?r:"#"===f&&/[boxX]/.test(_)?"0"+_.toLowerCase():"",m="$"===f?o:/[%p]/.test(_)?c:"",w=pl[_],x=/[defgprs%]/.test(_);function S(t){var r,o,c,f=b,S=m;if("c"===_)S=w(t)+S,t="";else{var M=(t=+t)<0||1/t<0;if(t=isNaN(t)?l:w(Math.abs(t),g),y&&(t=function(t){t:for(var e,n=t.length,i=1,r=-1;i<n;++i)switch(t[i]){case".":r=e=i;break;case"0":0===r&&(r=i),e=i;break;default:if(!+t[i])break t;r>0&&(r=0)}return r>0?t.slice(0,r)+t.slice(e+1):t}(t)),M&&0==+t&&"+"!==d&&(M=!1),f=(M?"("===d?d:s:"-"===d||"("===d?"":d)+f,S=("s"===_?wl[8+ll/3]:"")+S+(M&&"("===d?")":""),x)for(r=-1,o=t.length;++r<o;)if(48>(c=t.charCodeAt(r))||c>57){S=(46===c?a+t.slice(r+1):t.slice(r))+S,t=t.slice(0,r);break}}p&&!h&&(t=i(t,1/0));var E=f.length+t.length+S.length,k=E<v?new Array(v-E+1).join(e):"";switch(p&&h&&(t=i(k+t,k.length?v-S.length:1/0),k=""),n){case"<":t=f+t+S+k;break;case"=":t=f+k+t+S;break;case"^":t=k.slice(0,E=k.length>>1)+f+t+S+k.slice(E);break;default:t=k+f+t+S}return u(t)}return g=void 0===g?6:/[gprs]/.test(_)?Math.max(1,Math.min(21,g)):Math.max(0,Math.min(20,g)),S.toString=function(){return t+""},S}return{format:d,formatPrefix:function(t,e){var n=d(((t=fl(t)).type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(sl(e)/3))),r=Math.pow(10,-i),o=wl[8+i/3];return function(t){return n(r*t)+o}}}}function Sl(t){return yl=xl(t),_l=yl.format,bl=yl.formatPrefix,yl}function Ml(t){return Math.max(0,-sl(Math.abs(t)))}function El(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(sl(e)/3)))-sl(Math.abs(t)))}function kl(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,sl(e)-sl(t))+1}Sl({thousands:",",grouping:[3],currency:["$",""]});var Tl=1e-6,Nl=1e-12,Al=Math.PI,Ol=Al/2,Rl=Al/4,Cl=2*Al,Il=180/Al,jl=Al/180,Pl=Math.abs,zl=Math.atan,Dl=Math.atan2,Vl=Math.cos,Ll=Math.ceil,Bl=Math.exp,Fl=(Math.floor,Math.hypot),Gl=Math.log,Ul=Math.pow,Kl=Math.sin,Hl=Math.sign||function(t){return t>0?1:t<0?-1:0},Ql=Math.sqrt,ql=Math.tan;function $l(t){return t>1?0:t<-1?Al:Math.acos(t)}function Yl(t){return t>1?Ol:t<-1?-Ol:Math.asin(t)}function Wl(t){return(t=Kl(t/2))*t}function Xl(){}function Jl(t,e){t&&td.hasOwnProperty(t.type)&&td[t.type](t,e)}var Zl={Feature:function(t,e){Jl(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,i=-1,r=n.length;++i<r;)Jl(n[i].geometry,e)}},td={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,i=-1,r=n.length;++i<r;)t=n[i],e.point(t[0],t[1],t[2])},LineString:function(t,e){ed(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,i=-1,r=n.length;++i<r;)ed(n[i],e,0)},Polygon:function(t,e){nd(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,i=-1,r=n.length;++i<r;)nd(n[i],e)},GeometryCollection:function(t,e){for(var n=t.geometries,i=-1,r=n.length;++i<r;)Jl(n[i],e)}};function ed(t,e,n){var i,r=-1,o=t.length-n;for(e.lineStart();++r<o;)i=t[r],e.point(i[0],i[1],i[2]);e.lineEnd()}function nd(t,e){var n=-1,i=t.length;for(e.polygonStart();++n<i;)ed(t[n],e,1);e.polygonEnd()}function id(t,e){t&&Zl.hasOwnProperty(t.type)?Zl[t.type](t,e):Jl(t,e)}var rd,od,ad,ud,cd,sd,ld,dd,fd,hd,vd,pd,gd,yd,_d,bd,md=new A,wd=new A,xd={point:Xl,lineStart:Xl,lineEnd:Xl,polygonStart:function(){md=new A,xd.lineStart=Sd,xd.lineEnd=Md},polygonEnd:function(){var t=+md;wd.add(t<0?Cl+t:t),this.lineStart=this.lineEnd=this.point=Xl},sphere:function(){wd.add(Cl)}};function Sd(){xd.point=Ed}function Md(){kd(rd,od)}function Ed(t,e){xd.point=kd,rd=t,od=e,ad=t*=jl,ud=Vl(e=(e*=jl)/2+Rl),cd=Kl(e)}function kd(t,e){var n=(t*=jl)-ad,i=n>=0?1:-1,r=i*n,o=Vl(e=(e*=jl)/2+Rl),a=Kl(e),u=cd*a,c=ud*o+u*Vl(r),s=u*i*Kl(r);md.add(Dl(s,c)),ad=t,ud=o,cd=a}function Td(t){return wd=new A,id(t,xd),2*wd}function Nd(t){return[Dl(t[1],t[0]),Yl(t[2])]}function Ad(t){var e=t[0],n=t[1],i=Vl(n);return[i*Vl(e),i*Kl(e),Kl(n)]}function Od(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function Rd(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function Cd(t,e){t[0]+=e[0],t[1]+=e[1],t[2]+=e[2]}function Id(t,e){return[t[0]*e,t[1]*e,t[2]*e]}function jd(t){var e=Ql(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}var Pd,zd,Dd,Vd,Ld,Bd,Fd,Gd,Ud,Kd,Hd,Qd,qd,$d,Yd,Wd,Xd={point:Jd,lineStart:tf,lineEnd:ef,polygonStart:function(){Xd.point=nf,Xd.lineStart=rf,Xd.lineEnd=of,yd=new A,xd.polygonStart()},polygonEnd:function(){xd.polygonEnd(),Xd.point=Jd,Xd.lineStart=tf,Xd.lineEnd=ef,md<0?(sd=-(dd=180),ld=-(fd=90)):yd>Tl?fd=90:yd<-Tl&&(ld=-90),bd[0]=sd,bd[1]=dd},sphere:function(){sd=-(dd=180),ld=-(fd=90)}};function Jd(t,e){_d.push(bd=[sd=t,dd=t]),e<ld&&(ld=e),e>fd&&(fd=e)}function Zd(t,e){var n=Ad([t*jl,e*jl]);if(gd){var i=Rd(gd,n),r=Rd([i[1],-i[0],0],i);jd(r),r=Nd(r);var o,a=t-hd,u=a>0?1:-1,c=r[0]*Il*u,s=Pl(a)>180;s^(u*hd<c&&c<u*t)?(o=r[1]*Il)>fd&&(fd=o):s^(u*hd<(c=(c+360)%360-180)&&c<u*t)?(o=-r[1]*Il)<ld&&(ld=o):(e<ld&&(ld=e),e>fd&&(fd=e)),s?t<hd?af(sd,t)>af(sd,dd)&&(dd=t):af(t,dd)>af(sd,dd)&&(sd=t):dd>=sd?(t<sd&&(sd=t),t>dd&&(dd=t)):t>hd?af(sd,t)>af(sd,dd)&&(dd=t):af(t,dd)>af(sd,dd)&&(sd=t)}else _d.push(bd=[sd=t,dd=t]);e<ld&&(ld=e),e>fd&&(fd=e),gd=n,hd=t}function tf(){Xd.point=Zd}function ef(){bd[0]=sd,bd[1]=dd,Xd.point=Jd,gd=null}function nf(t,e){if(gd){var n=t-hd;yd.add(Pl(n)>180?n+(n>0?360:-360):n)}else vd=t,pd=e;xd.point(t,e),Zd(t,e)}function rf(){xd.lineStart()}function of(){nf(vd,pd),xd.lineEnd(),Pl(yd)>Tl&&(sd=-(dd=180)),bd[0]=sd,bd[1]=dd,gd=null}function af(t,e){return(e-=t)<0?e+360:e}function uf(t,e){return t[0]-e[0]}function cf(t,e){return t[0]<=t[1]?t[0]<=e&&e<=t[1]:e<t[0]||t[1]<e}function sf(t){var e,n,i,r,o,a,u;if(fd=dd=-(sd=ld=1/0),_d=[],id(t,Xd),n=_d.length){for(_d.sort(uf),e=1,o=[i=_d[0]];e<n;++e)cf(i,(r=_d[e])[0])||cf(i,r[1])?(af(i[0],r[1])>af(i[0],i[1])&&(i[1]=r[1]),af(r[0],i[1])>af(i[0],i[1])&&(i[0]=r[0])):o.push(i=r);for(a=-1/0,e=0,i=o[n=o.length-1];e<=n;i=r,++e)r=o[e],(u=af(i[1],r[0]))>a&&(a=u,sd=r[0],dd=i[1])}return _d=bd=null,sd===1/0||ld===1/0?[[NaN,NaN],[NaN,NaN]]:[[sd,ld],[dd,fd]]}var lf={sphere:Xl,point:df,lineStart:hf,lineEnd:gf,polygonStart:function(){lf.lineStart=yf,lf.lineEnd=_f},polygonEnd:function(){lf.lineStart=hf,lf.lineEnd=gf}};function df(t,e){t*=jl;var n=Vl(e*=jl);ff(n*Vl(t),n*Kl(t),Kl(e))}function ff(t,e,n){++Pd,Dd+=(t-Dd)/Pd,Vd+=(e-Vd)/Pd,Ld+=(n-Ld)/Pd}function hf(){lf.point=vf}function vf(t,e){t*=jl;var n=Vl(e*=jl);$d=n*Vl(t),Yd=n*Kl(t),Wd=Kl(e),lf.point=pf,ff($d,Yd,Wd)}function pf(t,e){t*=jl;var n=Vl(e*=jl),i=n*Vl(t),r=n*Kl(t),o=Kl(e),a=Dl(Ql((a=Yd*o-Wd*r)*a+(a=Wd*i-$d*o)*a+(a=$d*r-Yd*i)*a),$d*i+Yd*r+Wd*o);zd+=a,Bd+=a*($d+($d=i)),Fd+=a*(Yd+(Yd=r)),Gd+=a*(Wd+(Wd=o)),ff($d,Yd,Wd)}function gf(){lf.point=df}function yf(){lf.point=bf}function _f(){mf(Qd,qd),lf.point=df}function bf(t,e){Qd=t,qd=e,t*=jl,e*=jl,lf.point=mf;var n=Vl(e);$d=n*Vl(t),Yd=n*Kl(t),Wd=Kl(e),ff($d,Yd,Wd)}function mf(t,e){t*=jl;var n=Vl(e*=jl),i=n*Vl(t),r=n*Kl(t),o=Kl(e),a=Yd*o-Wd*r,u=Wd*i-$d*o,c=$d*r-Yd*i,s=Fl(a,u,c),l=Yl(s),d=s&&-l/s;Ud.add(d*a),Kd.add(d*u),Hd.add(d*c),zd+=l,Bd+=l*($d+($d=i)),Fd+=l*(Yd+(Yd=r)),Gd+=l*(Wd+(Wd=o)),ff($d,Yd,Wd)}function wf(t){Pd=zd=Dd=Vd=Ld=Bd=Fd=Gd=0,Ud=new A,Kd=new A,Hd=new A,id(t,lf);var e=+Ud,n=+Kd,i=+Hd,r=Fl(e,n,i);return r<Nl&&(e=Bd,n=Fd,i=Gd,zd<Tl&&(e=Dd,n=Vd,i=Ld),(r=Fl(e,n,i))<Nl)?[NaN,NaN]:[Dl(n,e)*Il,Yl(i/r)*Il]}function xf(t){return function(){return t}}function Sf(t,e){function n(n,i){return n=t(n,i),e(n[0],n[1])}return t.invert&&e.invert&&(n.invert=function(n,i){return(n=e.invert(n,i))&&t.invert(n[0],n[1])}),n}function Mf(t,e){return Pl(t)>Al&&(t-=Math.round(t/Cl)*Cl),[t,e]}function Ef(t,e,n){return(t%=Cl)?e||n?Sf(Tf(t),Nf(e,n)):Tf(t):e||n?Nf(e,n):Mf}function kf(t){return function(e,n){return Pl(e+=t)>Al&&(e-=Math.round(e/Cl)*Cl),[e,n]}}function Tf(t){var e=kf(t);return e.invert=kf(-t),e}function Nf(t,e){var n=Vl(t),i=Kl(t),r=Vl(e),o=Kl(e);function a(t,e){var a=Vl(e),u=Vl(t)*a,c=Kl(t)*a,s=Kl(e),l=s*n+u*i;return[Dl(c*r-l*o,u*n-s*i),Yl(l*r+c*o)]}return a.invert=function(t,e){var a=Vl(e),u=Vl(t)*a,c=Kl(t)*a,s=Kl(e),l=s*r-c*o;return[Dl(c*r+s*o,u*n+l*i),Yl(l*n-u*i)]},a}function Af(t){function e(e){return(e=t(e[0]*jl,e[1]*jl))[0]*=Il,e[1]*=Il,e}return t=Ef(t[0]*jl,t[1]*jl,t.length>2?t[2]*jl:0),e.invert=function(e){return(e=t.invert(e[0]*jl,e[1]*jl))[0]*=Il,e[1]*=Il,e},e}function Of(t,e,n,i,r,o){if(n){var a=Vl(e),u=Kl(e),c=i*n;null==r?(r=e+i*Cl,o=e-c/2):(r=Rf(a,r),o=Rf(a,o),(i>0?r<o:r>o)&&(r+=i*Cl));for(var s,l=r;i>0?l>o:l<o;l-=c)s=Nd([a,-u*Vl(l),-u*Kl(l)]),t.point(s[0],s[1])}}function Rf(t,e){(e=Ad(e))[0]-=t,jd(e);var n=$l(-e[1]);return((-e[2]<0?-n:n)+Cl-Tl)%Cl}function Cf(){var t,e,n=xf([0,0]),i=xf(90),r=xf(2),o={point:function(n,i){t.push(n=e(n,i)),n[0]*=Il,n[1]*=Il}};function a(){var a=n.apply(this,arguments),u=i.apply(this,arguments)*jl,c=r.apply(this,arguments)*jl;return t=[],e=Ef(-a[0]*jl,-a[1]*jl,0).invert,Of(o,u,c,1),a={type:"Polygon",coordinates:[t]},t=e=null,a}return a.center=function(t){return arguments.length?(n="function"==typeof t?t:xf([+t[0],+t[1]]),a):n},a.radius=function(t){return arguments.length?(i="function"==typeof t?t:xf(+t),a):i},a.precision=function(t){return arguments.length?(r="function"==typeof t?t:xf(+t),a):r},a}function If(){var t,e=[];return{point:function(e,n,i){t.push([e,n,i])},lineStart:function(){e.push(t=[])},lineEnd:Xl,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}}function jf(t,e){return Pl(t[0]-e[0])<Tl&&Pl(t[1]-e[1])<Tl}function Pf(t,e,n,i){this.x=t,this.z=e,this.o=n,this.e=i,this.v=!1,this.n=this.p=null}function zf(t,e,n,i,r){var o,a,u=[],c=[];if(t.forEach((function(t){if(!((e=t.length-1)<=0)){var e,n,i=t[0],a=t[e];if(jf(i,a)){if(!i[2]&&!a[2]){for(r.lineStart(),o=0;o<e;++o)r.point((i=t[o])[0],i[1]);return void r.lineEnd()}a[0]+=2*Tl}u.push(n=new Pf(i,t,null,!0)),c.push(n.o=new Pf(i,null,n,!1)),u.push(n=new Pf(a,t,null,!1)),c.push(n.o=new Pf(a,null,n,!0))}})),u.length){for(c.sort(e),Df(u),Df(c),o=0,a=c.length;o<a;++o)c[o].e=n=!n;for(var s,l,d=u[0];;){for(var f=d,h=!0;f.v;)if((f=f.n)===d)return;s=f.z,r.lineStart();do{if(f.v=f.o.v=!0,f.e){if(h)for(o=0,a=s.length;o<a;++o)r.point((l=s[o])[0],l[1]);else i(f.x,f.n.x,1,r);f=f.n}else{if(h)for(s=f.p.z,o=s.length-1;o>=0;--o)r.point((l=s[o])[0],l[1]);else i(f.x,f.p.x,-1,r);f=f.p}s=(f=f.o).z,h=!h}while(!f.v);r.lineEnd()}}}function Df(t){if(e=t.length){for(var e,n,i=0,r=t[0];++i<e;)r.n=n=t[i],n.p=r,r=n;r.n=n=t[0],n.p=r}}function Vf(t){return Pl(t[0])<=Al?t[0]:Hl(t[0])*((Pl(t[0])+Al)%Cl-Al)}function Lf(t,e){var n=Vf(e),i=e[1],r=Kl(i),o=[Kl(n),-Vl(n),0],a=0,u=0,c=new A;1===r?i=Ol+Tl:-1===r&&(i=-Ol-Tl);for(var s=0,l=t.length;s<l;++s)if(f=(d=t[s]).length)for(var d,f,h=d[f-1],v=Vf(h),p=h[1]/2+Rl,g=Kl(p),y=Vl(p),_=0;_<f;++_,v=m,g=x,y=S,h=b){var b=d[_],m=Vf(b),w=b[1]/2+Rl,x=Kl(w),S=Vl(w),M=m-v,E=M>=0?1:-1,k=E*M,T=k>Al,N=g*x;if(c.add(Dl(N*E*Kl(k),y*S+N*Vl(k))),a+=T?M+E*Cl:M,T^v>=n^m>=n){var O=Rd(Ad(h),Ad(b));jd(O);var R=Rd(o,O);jd(R);var C=(T^M>=0?-1:1)*Yl(R[2]);(i>C||i===C&&(O[0]||O[1]))&&(u+=T^M>=0?1:-1)}}return(a<-Tl||a<Tl&&c<-Nl)^1&u}function Bf(t,e,n,i){return function(r){var o,a,u,c=e(r),s=If(),l=e(s),d=!1,f={point:h,lineStart:p,lineEnd:g,polygonStart:function(){f.point=y,f.lineStart=_,f.lineEnd=b,a=[],o=[]},polygonEnd:function(){f.point=h,f.lineStart=p,f.lineEnd=g,a=At(a);var t=Lf(o,i);a.length?(d||(r.polygonStart(),d=!0),zf(a,Gf,t,n,r)):t&&(d||(r.polygonStart(),d=!0),r.lineStart(),n(null,null,1,r),r.lineEnd()),d&&(r.polygonEnd(),d=!1),a=o=null},sphere:function(){r.polygonStart(),r.lineStart(),n(null,null,1,r),r.lineEnd(),r.polygonEnd()}};function h(e,n){t(e,n)&&r.point(e,n)}function v(t,e){c.point(t,e)}function p(){f.point=v,c.lineStart()}function g(){f.point=h,c.lineEnd()}function y(t,e){u.push([t,e]),l.point(t,e)}function _(){l.lineStart(),u=[]}function b(){y(u[0][0],u[0][1]),l.lineEnd();var t,e,n,i,c=l.clean(),f=s.result(),h=f.length;if(u.pop(),o.push(u),u=null,h)if(1&c){if((e=(n=f[0]).length-1)>0){for(d||(r.polygonStart(),d=!0),r.lineStart(),t=0;t<e;++t)r.point((i=n[t])[0],i[1]);r.lineEnd()}}else h>1&&2&c&&f.push(f.pop().concat(f.shift())),a.push(f.filter(Ff))}return f}}function Ff(t){return t.length>1}function Gf(t,e){return((t=t.x)[0]<0?t[1]-Ol-Tl:Ol-t[1])-((e=e.x)[0]<0?e[1]-Ol-Tl:Ol-e[1])}Mf.invert=Mf;const Uf=Bf((function(){return!0}),(function(t){var e,n=NaN,i=NaN,r=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(o,a){var u=o>0?Al:-Al,c=Pl(o-n);Pl(c-Al)<Tl?(t.point(n,i=(i+a)/2>0?Ol:-Ol),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(u,i),t.point(o,i),e=0):r!==u&&c>=Al&&(Pl(n-r)<Tl&&(n-=r*Tl),Pl(o-u)<Tl&&(o-=u*Tl),i=function(t,e,n,i){var r,o,a=Kl(t-n);return Pl(a)>Tl?zl((Kl(e)*(o=Vl(i))*Kl(n)-Kl(i)*(r=Vl(e))*Kl(t))/(r*o*a)):(e+i)/2}(n,i,o,a),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(u,i),e=0),t.point(n=o,i=a),r=u},lineEnd:function(){t.lineEnd(),n=i=NaN},clean:function(){return 2-e}}}),(function(t,e,n,i){var r;if(null==t)r=n*Ol,i.point(-Al,r),i.point(0,r),i.point(Al,r),i.point(Al,0),i.point(Al,-r),i.point(0,-r),i.point(-Al,-r),i.point(-Al,0),i.point(-Al,r);else if(Pl(t[0]-e[0])>Tl){var o=t[0]<e[0]?Al:-Al;r=n*o/2,i.point(-o,r),i.point(0,r),i.point(o,r)}else i.point(e[0],e[1])}),[-Al,-Ol]);function Kf(t){var e=Vl(t),n=2*jl,i=e>0,r=Pl(e)>Tl;function o(t,n){return Vl(t)*Vl(n)>e}function a(t,n,i){var r=[1,0,0],o=Rd(Ad(t),Ad(n)),a=Od(o,o),u=o[0],c=a-u*u;if(!c)return!i&&t;var s=e*a/c,l=-e*u/c,d=Rd(r,o),f=Id(r,s);Cd(f,Id(o,l));var h=d,v=Od(f,h),p=Od(h,h),g=v*v-p*(Od(f,f)-1);if(!(g<0)){var y=Ql(g),_=Id(h,(-v-y)/p);if(Cd(_,f),_=Nd(_),!i)return _;var b,m=t[0],w=n[0],x=t[1],S=n[1];w<m&&(b=m,m=w,w=b);var M=w-m,E=Pl(M-Al)<Tl;if(!E&&S<x&&(b=x,x=S,S=b),E||M<Tl?E?x+S>0^_[1]<(Pl(_[0]-m)<Tl?x:S):x<=_[1]&&_[1]<=S:M>Al^(m<=_[0]&&_[0]<=w)){var k=Id(h,(-v+y)/p);return Cd(k,f),[_,Nd(k)]}}}function u(e,n){var r=i?t:Al-t,o=0;return e<-r?o|=1:e>r&&(o|=2),n<-r?o|=4:n>r&&(o|=8),o}return Bf(o,(function(t){var e,n,c,s,l;return{lineStart:function(){s=c=!1,l=1},point:function(d,f){var h,v=[d,f],p=o(d,f),g=i?p?0:u(d,f):p?u(d+(d<0?Al:-Al),f):0;if(!e&&(s=c=p)&&t.lineStart(),p!==c&&(!(h=a(e,v))||jf(e,h)||jf(v,h))&&(v[2]=1),p!==c)l=0,p?(t.lineStart(),h=a(v,e),t.point(h[0],h[1])):(h=a(e,v),t.point(h[0],h[1],2),t.lineEnd()),e=h;else if(r&&e&&i^p){var y;g&n||!(y=a(v,e,!0))||(l=0,i?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1],3)))}!p||e&&jf(e,v)||t.point(v[0],v[1]),e=v,c=p,n=g},lineEnd:function(){c&&t.lineEnd(),e=null},clean:function(){return l|(s&&c)<<1}}}),(function(e,i,r,o){Of(o,t,n,r,e,i)}),i?[0,-t]:[-Al,t-Al])}var Hf,Qf,qf,$f,Yf=1e9,Wf=-Yf;function Xf(t,e,n,i){function r(r,o){return t<=r&&r<=n&&e<=o&&o<=i}function o(r,o,u,s){var l=0,d=0;if(null==r||(l=a(r,u))!==(d=a(o,u))||c(r,o)<0^u>0)do{s.point(0===l||3===l?t:n,l>1?i:e)}while((l=(l+u+4)%4)!==d);else s.point(o[0],o[1])}function a(i,r){return Pl(i[0]-t)<Tl?r>0?0:3:Pl(i[0]-n)<Tl?r>0?2:1:Pl(i[1]-e)<Tl?r>0?1:0:r>0?3:2}function u(t,e){return c(t.x,e.x)}function c(t,e){var n=a(t,1),i=a(e,1);return n!==i?n-i:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}return function(a){var c,s,l,d,f,h,v,p,g,y,_,b=a,m=If(),w={point:x,lineStart:function(){w.point=S,s&&s.push(l=[]),y=!0,g=!1,v=p=NaN},lineEnd:function(){c&&(S(d,f),h&&g&&m.rejoin(),c.push(m.result())),w.point=x,g&&b.lineEnd()},polygonStart:function(){b=m,c=[],s=[],_=!0},polygonEnd:function(){var e=function(){for(var e=0,n=0,r=s.length;n<r;++n)for(var o,a,u=s[n],c=1,l=u.length,d=u[0],f=d[0],h=d[1];c<l;++c)o=f,a=h,f=(d=u[c])[0],h=d[1],a<=i?h>i&&(f-o)*(i-a)>(h-a)*(t-o)&&++e:h<=i&&(f-o)*(i-a)<(h-a)*(t-o)&&--e;return e}(),n=_&&e,r=(c=At(c)).length;(n||r)&&(a.polygonStart(),n&&(a.lineStart(),o(null,null,1,a),a.lineEnd()),r&&zf(c,u,e,o,a),a.polygonEnd()),b=a,c=s=l=null}};function x(t,e){r(t,e)&&b.point(t,e)}function S(o,a){var u=r(o,a);if(s&&l.push([o,a]),y)d=o,f=a,h=u,y=!1,u&&(b.lineStart(),b.point(o,a));else if(u&&g)b.point(o,a);else{var c=[v=Math.max(Wf,Math.min(Yf,v)),p=Math.max(Wf,Math.min(Yf,p))],m=[o=Math.max(Wf,Math.min(Yf,o)),a=Math.max(Wf,Math.min(Yf,a))];!function(t,e,n,i,r,o){var a,u=t[0],c=t[1],s=0,l=1,d=e[0]-u,f=e[1]-c;if(a=n-u,d||!(a>0)){if(a/=d,d<0){if(a<s)return;a<l&&(l=a)}else if(d>0){if(a>l)return;a>s&&(s=a)}if(a=r-u,d||!(a<0)){if(a/=d,d<0){if(a>l)return;a>s&&(s=a)}else if(d>0){if(a<s)return;a<l&&(l=a)}if(a=i-c,f||!(a>0)){if(a/=f,f<0){if(a<s)return;a<l&&(l=a)}else if(f>0){if(a>l)return;a>s&&(s=a)}if(a=o-c,f||!(a<0)){if(a/=f,f<0){if(a>l)return;a>s&&(s=a)}else if(f>0){if(a<s)return;a<l&&(l=a)}return s>0&&(t[0]=u+s*d,t[1]=c+s*f),l<1&&(e[0]=u+l*d,e[1]=c+l*f),!0}}}}}(c,m,t,e,n,i)?u&&(b.lineStart(),b.point(o,a),_=!1):(g||(b.lineStart(),b.point(c[0],c[1])),b.point(m[0],m[1]),u||b.lineEnd(),_=!1)}v=o,p=a,g=u}return w}}function Jf(){var t,e,n,i=0,r=0,o=960,a=500;return n={stream:function(n){return t&&e===n?t:t=Xf(i,r,o,a)(e=n)},extent:function(u){return arguments.length?(i=+u[0][0],r=+u[0][1],o=+u[1][0],a=+u[1][1],t=e=null,n):[[i,r],[o,a]]}}}var Zf={sphere:Xl,point:Xl,lineStart:function(){Zf.point=eh,Zf.lineEnd=th},lineEnd:Xl,polygonStart:Xl,polygonEnd:Xl};function th(){Zf.point=Zf.lineEnd=Xl}function eh(t,e){Qf=t*=jl,qf=Kl(e*=jl),$f=Vl(e),Zf.point=nh}function nh(t,e){t*=jl;var n=Kl(e*=jl),i=Vl(e),r=Pl(t-Qf),o=Vl(r),a=i*Kl(r),u=$f*n-qf*i*o,c=qf*n+$f*i*o;Hf.add(Dl(Ql(a*a+u*u),c)),Qf=t,qf=n,$f=i}function ih(t){return Hf=new A,id(t,Zf),+Hf}var rh=[null,null],oh={type:"LineString",coordinates:rh};function ah(t,e){return rh[0]=t,rh[1]=e,ih(oh)}var uh={Feature:function(t,e){return sh(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,i=-1,r=n.length;++i<r;)if(sh(n[i].geometry,e))return!0;return!1}},ch={Sphere:function(){return!0},Point:function(t,e){return lh(t.coordinates,e)},MultiPoint:function(t,e){for(var n=t.coordinates,i=-1,r=n.length;++i<r;)if(lh(n[i],e))return!0;return!1},LineString:function(t,e){return dh(t.coordinates,e)},MultiLineString:function(t,e){for(var n=t.coordinates,i=-1,r=n.length;++i<r;)if(dh(n[i],e))return!0;return!1},Polygon:function(t,e){return fh(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,i=-1,r=n.length;++i<r;)if(fh(n[i],e))return!0;return!1},GeometryCollection:function(t,e){for(var n=t.geometries,i=-1,r=n.length;++i<r;)if(sh(n[i],e))return!0;return!1}};function sh(t,e){return!(!t||!ch.hasOwnProperty(t.type))&&ch[t.type](t,e)}function lh(t,e){return 0===ah(t,e)}function dh(t,e){for(var n,i,r,o=0,a=t.length;o<a;o++){if(0===(i=ah(t[o],e)))return!0;if(o>0&&(r=ah(t[o],t[o-1]))>0&&n<=r&&i<=r&&(n+i-r)*(1-Math.pow((n-i)/r,2))<Nl*r)return!0;n=i}return!1}function fh(t,e){return!!Lf(t.map(hh),vh(e))}function hh(t){return(t=t.map(vh)).pop(),t}function vh(t){return[t[0]*jl,t[1]*jl]}function ph(t,e){return(t&&uh.hasOwnProperty(t.type)?uh[t.type]:sh)(t,e)}function gh(t,e,n){var i=It(t,e-Tl,n).concat(e);return function(t){return i.map((function(e){return[t,e]}))}}function yh(t,e,n){var i=It(t,e-Tl,n).concat(e);return function(t){return i.map((function(e){return[e,t]}))}}function _h(){var t,e,n,i,r,o,a,u,c,s,l,d,f=10,h=f,v=90,p=360,g=2.5;function y(){return{type:"MultiLineString",coordinates:_()}}function _(){return It(Ll(i/v)*v,n,v).map(l).concat(It(Ll(u/p)*p,a,p).map(d)).concat(It(Ll(e/f)*f,t,f).filter((function(t){return Pl(t%v)>Tl})).map(c)).concat(It(Ll(o/h)*h,r,h).filter((function(t){return Pl(t%p)>Tl})).map(s))}return y.lines=function(){return _().map((function(t){return{type:"LineString",coordinates:t}}))},y.outline=function(){return{type:"Polygon",coordinates:[l(i).concat(d(a).slice(1),l(n).reverse().slice(1),d(u).reverse().slice(1))]}},y.extent=function(t){return arguments.length?y.extentMajor(t).extentMinor(t):y.extentMinor()},y.extentMajor=function(t){return arguments.length?(i=+t[0][0],n=+t[1][0],u=+t[0][1],a=+t[1][1],i>n&&(t=i,i=n,n=t),u>a&&(t=u,u=a,a=t),y.precision(g)):[[i,u],[n,a]]},y.extentMinor=function(n){return arguments.length?(e=+n[0][0],t=+n[1][0],o=+n[0][1],r=+n[1][1],e>t&&(n=e,e=t,t=n),o>r&&(n=o,o=r,r=n),y.precision(g)):[[e,o],[t,r]]},y.step=function(t){return arguments.length?y.stepMajor(t).stepMinor(t):y.stepMinor()},y.stepMajor=function(t){return arguments.length?(v=+t[0],p=+t[1],y):[v,p]},y.stepMinor=function(t){return arguments.length?(f=+t[0],h=+t[1],y):[f,h]},y.precision=function(f){return arguments.length?(g=+f,c=gh(o,r,90),s=yh(e,t,g),l=gh(u,a,90),d=yh(i,n,g),y):g},y.extentMajor([[-180,-90+Tl],[180,90-Tl]]).extentMinor([[-180,-80-Tl],[180,80+Tl]])}function bh(){return _h()()}function mh(t,e){var n=t[0]*jl,i=t[1]*jl,r=e[0]*jl,o=e[1]*jl,a=Vl(i),u=Kl(i),c=Vl(o),s=Kl(o),l=a*Vl(n),d=a*Kl(n),f=c*Vl(r),h=c*Kl(r),v=2*Yl(Ql(Wl(o-i)+a*c*Wl(r-n))),p=Kl(v),g=v?function(t){var e=Kl(t*=v)/p,n=Kl(v-t)/p,i=n*l+e*f,r=n*d+e*h,o=n*u+e*s;return[Dl(r,i)*Il,Dl(o,Ql(i*i+r*r))*Il]}:function(){return[n*Il,i*Il]};return g.distance=v,g}const wh=t=>t;var xh,Sh,Mh,Eh,kh=new A,Th=new A,Nh={point:Xl,lineStart:Xl,lineEnd:Xl,polygonStart:function(){Nh.lineStart=Ah,Nh.lineEnd=Ch},polygonEnd:function(){Nh.lineStart=Nh.lineEnd=Nh.point=Xl,kh.add(Pl(Th)),Th=new A},result:function(){var t=kh/2;return kh=new A,t}};function Ah(){Nh.point=Oh}function Oh(t,e){Nh.point=Rh,xh=Mh=t,Sh=Eh=e}function Rh(t,e){Th.add(Eh*t-Mh*e),Mh=t,Eh=e}function Ch(){Rh(xh,Sh)}const Ih=Nh;var jh=1/0,Ph=jh,zh=-jh,Dh=zh,Vh={point:function(t,e){t<jh&&(jh=t),t>zh&&(zh=t),e<Ph&&(Ph=e),e>Dh&&(Dh=e)},lineStart:Xl,lineEnd:Xl,polygonStart:Xl,polygonEnd:Xl,result:function(){var t=[[jh,Ph],[zh,Dh]];return zh=Dh=-(Ph=jh=1/0),t}};const Lh=Vh;var Bh,Fh,Gh,Uh,Kh=0,Hh=0,Qh=0,qh=0,$h=0,Yh=0,Wh=0,Xh=0,Jh=0,Zh={point:tv,lineStart:ev,lineEnd:rv,polygonStart:function(){Zh.lineStart=ov,Zh.lineEnd=av},polygonEnd:function(){Zh.point=tv,Zh.lineStart=ev,Zh.lineEnd=rv},result:function(){var t=Jh?[Wh/Jh,Xh/Jh]:Yh?[qh/Yh,$h/Yh]:Qh?[Kh/Qh,Hh/Qh]:[NaN,NaN];return Kh=Hh=Qh=qh=$h=Yh=Wh=Xh=Jh=0,t}};function tv(t,e){Kh+=t,Hh+=e,++Qh}function ev(){Zh.point=nv}function nv(t,e){Zh.point=iv,tv(Gh=t,Uh=e)}function iv(t,e){var n=t-Gh,i=e-Uh,r=Ql(n*n+i*i);qh+=r*(Gh+t)/2,$h+=r*(Uh+e)/2,Yh+=r,tv(Gh=t,Uh=e)}function rv(){Zh.point=tv}function ov(){Zh.point=uv}function av(){cv(Bh,Fh)}function uv(t,e){Zh.point=cv,tv(Bh=Gh=t,Fh=Uh=e)}function cv(t,e){var n=t-Gh,i=e-Uh,r=Ql(n*n+i*i);qh+=r*(Gh+t)/2,$h+=r*(Uh+e)/2,Yh+=r,Wh+=(r=Uh*t-Gh*e)*(Gh+t),Xh+=r*(Uh+e),Jh+=3*r,tv(Gh=t,Uh=e)}const sv=Zh;function lv(t){this._context=t}lv.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,Cl)}},result:Xl};var dv,fv,hv,vv,pv,gv=new A,yv={point:Xl,lineStart:function(){yv.point=_v},lineEnd:function(){dv&&bv(fv,hv),yv.point=Xl},polygonStart:function(){dv=!0},polygonEnd:function(){dv=null},result:function(){var t=+gv;return gv=new A,t}};function _v(t,e){yv.point=bv,fv=vv=t,hv=pv=e}function bv(t,e){vv-=t,pv-=e,gv.add(Ql(vv*vv+pv*pv)),vv=t,pv=e}const mv=yv;let wv,xv,Sv,Mv;class Ev{constructor(t){this._append=null==t?kv:function(t){const e=Math.floor(t);if(!(e>=0))throw new RangeError(`invalid digits: ${t}`);if(e>15)return kv;if(e!==wv){const t=10**e;wv=e,xv=function(e){let n=1;this._+=e[0];for(const i=e.length;n<i;++n)this._+=Math.round(arguments[n]*t)/t+e[n]}}return xv}(t),this._radius=4.5,this._=""}pointRadius(t){return this._radius=+t,this}polygonStart(){this._line=0}polygonEnd(){this._line=NaN}lineStart(){this._point=0}lineEnd(){0===this._line&&(this._+="Z"),this._point=NaN}point(t,e){switch(this._point){case 0:this._append`M${t},${e}`,this._point=1;break;case 1:this._append`L${t},${e}`;break;default:if(this._append`M${t},${e}`,this._radius!==Sv||this._append!==xv){const t=this._radius,e=this._;this._="",this._append`m0,${t}a${t},${t} 0 1,1 0,${-2*t}a${t},${t} 0 1,1 0,${2*t}z`,Sv=t,xv=this._append,Mv=this._,this._=e}this._+=Mv}}result(){const t=this._;return this._="",t.length?t:null}}function kv(t){let e=1;this._+=t[0];for(const n=t.length;e<n;++e)this._+=arguments[e]+t[e]}function Tv(t,e){let n,i,r=3,o=4.5;function a(t){return t&&("function"==typeof o&&i.pointRadius(+o.apply(this,arguments)),id(t,n(i))),i.result()}return a.area=function(t){return id(t,n(Ih)),Ih.result()},a.measure=function(t){return id(t,n(mv)),mv.result()},a.bounds=function(t){return id(t,n(Lh)),Lh.result()},a.centroid=function(t){return id(t,n(sv)),sv.result()},a.projection=function(e){return arguments.length?(n=null==e?(t=null,wh):(t=e).stream,a):t},a.context=function(t){return arguments.length?(i=null==t?(e=null,new Ev(r)):new lv(e=t),"function"!=typeof o&&i.pointRadius(o),a):e},a.pointRadius=function(t){return arguments.length?(o="function"==typeof t?t:(i.pointRadius(+t),+t),a):o},a.digits=function(t){if(!arguments.length)return r;if(null==t)r=null;else{const e=Math.floor(t);if(!(e>=0))throw new RangeError(`invalid digits: ${t}`);r=e}return null===e&&(i=new Ev(r)),a},a.projection(t).digits(r).context(e)}function Nv(t){return{stream:Av(t)}}function Av(t){return function(e){var n=new Ov;for(var i in t)n[i]=t[i];return n.stream=e,n}}function Ov(){}function Rv(t,e,n){var i=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=i&&t.clipExtent(null),id(n,t.stream(Lh)),e(Lh.result()),null!=i&&t.clipExtent(i),t}function Cv(t,e,n){return Rv(t,(function(n){var i=e[1][0]-e[0][0],r=e[1][1]-e[0][1],o=Math.min(i/(n[1][0]-n[0][0]),r/(n[1][1]-n[0][1])),a=+e[0][0]+(i-o*(n[1][0]+n[0][0]))/2,u=+e[0][1]+(r-o*(n[1][1]+n[0][1]))/2;t.scale(150*o).translate([a,u])}),n)}function Iv(t,e,n){return Cv(t,[[0,0],e],n)}function jv(t,e,n){return Rv(t,(function(n){var i=+e,r=i/(n[1][0]-n[0][0]),o=(i-r*(n[1][0]+n[0][0]))/2,a=-r*n[0][1];t.scale(150*r).translate([o,a])}),n)}function Pv(t,e,n){return Rv(t,(function(n){var i=+e,r=i/(n[1][1]-n[0][1]),o=-r*n[0][0],a=(i-r*(n[1][1]+n[0][1]))/2;t.scale(150*r).translate([o,a])}),n)}Ov.prototype={constructor:Ov,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var zv=16,Dv=Vl(30*jl);function Vv(t,e){return+e?function(t,e){function n(i,r,o,a,u,c,s,l,d,f,h,v,p,g){var y=s-i,_=l-r,b=y*y+_*_;if(b>4*e&&p--){var m=a+f,w=u+h,x=c+v,S=Ql(m*m+w*w+x*x),M=Yl(x/=S),E=Pl(Pl(x)-1)<Tl||Pl(o-d)<Tl?(o+d)/2:Dl(w,m),k=t(E,M),T=k[0],N=k[1],A=T-i,O=N-r,R=_*A-y*O;(R*R/b>e||Pl((y*A+_*O)/b-.5)>.3||a*f+u*h+c*v<Dv)&&(n(i,r,o,a,u,c,T,N,E,m/=S,w/=S,x,p,g),g.point(T,N),n(T,N,E,m,w,x,s,l,d,f,h,v,p,g))}}return function(e){var i,r,o,a,u,c,s,l,d,f,h,v,p={point:g,lineStart:y,lineEnd:b,polygonStart:function(){e.polygonStart(),p.lineStart=m},polygonEnd:function(){e.polygonEnd(),p.lineStart=y}};function g(n,i){n=t(n,i),e.point(n[0],n[1])}function y(){l=NaN,p.point=_,e.lineStart()}function _(i,r){var o=Ad([i,r]),a=t(i,r);n(l,d,s,f,h,v,l=a[0],d=a[1],s=i,f=o[0],h=o[1],v=o[2],zv,e),e.point(l,d)}function b(){p.point=g,e.lineEnd()}function m(){y(),p.point=w,p.lineEnd=x}function w(t,e){_(i=t,e),r=l,o=d,a=f,u=h,c=v,p.point=_}function x(){n(l,d,s,f,h,v,r,o,i,a,u,c,zv,e),p.lineEnd=b,b()}return p}}(t,e):function(t){return Av({point:function(e,n){e=t(e,n),this.stream.point(e[0],e[1])}})}(t)}var Lv=Av({point:function(t,e){this.stream.point(t*jl,e*jl)}});function Bv(t,e,n,i,r,o){if(!o)return function(t,e,n,i,r){function o(o,a){return[e+t*(o*=i),n-t*(a*=r)]}return o.invert=function(o,a){return[(o-e)/t*i,(n-a)/t*r]},o}(t,e,n,i,r);var a=Vl(o),u=Kl(o),c=a*t,s=u*t,l=a/t,d=u/t,f=(u*n-a*e)/t,h=(u*e+a*n)/t;function v(t,o){return[c*(t*=i)-s*(o*=r)+e,n-s*t-c*o]}return v.invert=function(t,e){return[i*(l*t-d*e+f),r*(h-d*t-l*e)]},v}function Fv(t){return Gv((function(){return t}))()}function Gv(t){var e,n,i,r,o,a,u,c,s,l,d=150,f=480,h=250,v=0,p=0,g=0,y=0,_=0,b=0,m=1,w=1,x=null,S=Uf,M=null,E=wh,k=.5;function T(t){return c(t[0]*jl,t[1]*jl)}function N(t){return(t=c.invert(t[0],t[1]))&&[t[0]*Il,t[1]*Il]}function A(){var t=Bv(d,0,0,m,w,b).apply(null,e(v,p)),i=Bv(d,f-t[0],h-t[1],m,w,b);return n=Ef(g,y,_),u=Sf(e,i),c=Sf(n,u),a=Vv(u,k),O()}function O(){return s=l=null,T}return T.stream=function(t){return s&&l===t?s:s=Lv(function(t){return Av({point:function(e,n){var i=t(e,n);return this.stream.point(i[0],i[1])}})}(n)(S(a(E(l=t)))))},T.preclip=function(t){return arguments.length?(S=t,x=void 0,O()):S},T.postclip=function(t){return arguments.length?(E=t,M=i=r=o=null,O()):E},T.clipAngle=function(t){return arguments.length?(S=+t?Kf(x=t*jl):(x=null,Uf),O()):x*Il},T.clipExtent=function(t){return arguments.length?(E=null==t?(M=i=r=o=null,wh):Xf(M=+t[0][0],i=+t[0][1],r=+t[1][0],o=+t[1][1]),O()):null==M?null:[[M,i],[r,o]]},T.scale=function(t){return arguments.length?(d=+t,A()):d},T.translate=function(t){return arguments.length?(f=+t[0],h=+t[1],A()):[f,h]},T.center=function(t){return arguments.length?(v=t[0]%360*jl,p=t[1]%360*jl,A()):[v*Il,p*Il]},T.rotate=function(t){return arguments.length?(g=t[0]%360*jl,y=t[1]%360*jl,_=t.length>2?t[2]%360*jl:0,A()):[g*Il,y*Il,_*Il]},T.angle=function(t){return arguments.length?(b=t%360*jl,A()):b*Il},T.reflectX=function(t){return arguments.length?(m=t?-1:1,A()):m<0},T.reflectY=function(t){return arguments.length?(w=t?-1:1,A()):w<0},T.precision=function(t){return arguments.length?(a=Vv(u,k=t*t),O()):Ql(k)},T.fitExtent=function(t,e){return Cv(T,t,e)},T.fitSize=function(t,e){return Iv(T,t,e)},T.fitWidth=function(t,e){return jv(T,t,e)},T.fitHeight=function(t,e){return Pv(T,t,e)},function(){return e=t.apply(this,arguments),T.invert=e.invert&&N,A()}}function Uv(t){var e=0,n=Al/3,i=Gv(t),r=i(e,n);return r.parallels=function(t){return arguments.length?i(e=t[0]*jl,n=t[1]*jl):[e*Il,n*Il]},r}function Kv(t,e){var n=Kl(t),i=(n+Kl(e))/2;if(Pl(i)<Tl)return function(t){var e=Vl(t);function n(t,n){return[t*e,Kl(n)/e]}return n.invert=function(t,n){return[t/e,Yl(n*e)]},n}(t);var r=1+n*(2*i-n),o=Ql(r)/i;function a(t,e){var n=Ql(r-2*i*Kl(e))/i;return[n*Kl(t*=i),o-n*Vl(t)]}return a.invert=function(t,e){var n=o-e,a=Dl(t,Pl(n))*Hl(n);return n*i<0&&(a-=Al*Hl(t)*Hl(n)),[a/i,Yl((r-(t*t+n*n)*i*i)/(2*i))]},a}function Hv(){return Uv(Kv).scale(155.424).center([0,33.6442])}function Qv(){return Hv().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function qv(){var t,e,n,i,r,o,a=Qv(),u=Hv().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=Hv().rotate([157,0]).center([-3,19.9]).parallels([8,18]),s={point:function(t,e){o=[t,e]}};function l(t){var e=t[0],a=t[1];return o=null,n.point(e,a),o||(i.point(e,a),o)||(r.point(e,a),o)}function d(){return t=e=null,l}return l.invert=function(t){var e=a.scale(),n=a.translate(),i=(t[0]-n[0])/e,r=(t[1]-n[1])/e;return(r>=.12&&r<.234&&i>=-.425&&i<-.214?u:r>=.166&&r<.234&&i>=-.214&&i<-.115?c:a).invert(t)},l.stream=function(n){return t&&e===n?t:(i=[a.stream(e=n),u.stream(n),c.stream(n)],r=i.length,t={point:function(t,e){for(var n=-1;++n<r;)i[n].point(t,e)},sphere:function(){for(var t=-1;++t<r;)i[t].sphere()},lineStart:function(){for(var t=-1;++t<r;)i[t].lineStart()},lineEnd:function(){for(var t=-1;++t<r;)i[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<r;)i[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<r;)i[t].polygonEnd()}});var i,r},l.precision=function(t){return arguments.length?(a.precision(t),u.precision(t),c.precision(t),d()):a.precision()},l.scale=function(t){return arguments.length?(a.scale(t),u.scale(.35*t),c.scale(t),l.translate(a.translate())):a.scale()},l.translate=function(t){if(!arguments.length)return a.translate();var e=a.scale(),o=+t[0],l=+t[1];return n=a.translate(t).clipExtent([[o-.455*e,l-.238*e],[o+.455*e,l+.238*e]]).stream(s),i=u.translate([o-.307*e,l+.201*e]).clipExtent([[o-.425*e+Tl,l+.12*e+Tl],[o-.214*e-Tl,l+.234*e-Tl]]).stream(s),r=c.translate([o-.205*e,l+.212*e]).clipExtent([[o-.214*e+Tl,l+.166*e+Tl],[o-.115*e-Tl,l+.234*e-Tl]]).stream(s),d()},l.fitExtent=function(t,e){return Cv(l,t,e)},l.fitSize=function(t,e){return Iv(l,t,e)},l.fitWidth=function(t,e){return jv(l,t,e)},l.fitHeight=function(t,e){return Pv(l,t,e)},l.scale(1070)}function $v(t){return function(e,n){var i=Vl(e),r=Vl(n),o=t(i*r);return o===1/0?[2,0]:[o*r*Kl(e),o*Kl(n)]}}function Yv(t){return function(e,n){var i=Ql(e*e+n*n),r=t(i),o=Kl(r),a=Vl(r);return[Dl(e*o,i*a),Yl(i&&n*o/i)]}}var Wv=$v((function(t){return Ql(2/(1+t))}));function Xv(){return Fv(Wv).scale(124.75).clipAngle(179.999)}Wv.invert=Yv((function(t){return 2*Yl(t/2)}));var Jv=$v((function(t){return(t=$l(t))&&t/Kl(t)}));function Zv(){return Fv(Jv).scale(79.4188).clipAngle(179.999)}function tp(t,e){return[t,Gl(ql((Ol+e)/2))]}function ep(){return np(tp).scale(961/Cl)}function np(t){var e,n,i,r=Fv(t),o=r.center,a=r.scale,u=r.translate,c=r.clipExtent,s=null;function l(){var o=Al*a(),u=r(Af(r.rotate()).invert([0,0]));return c(null==s?[[u[0]-o,u[1]-o],[u[0]+o,u[1]+o]]:t===tp?[[Math.max(u[0]-o,s),e],[Math.min(u[0]+o,n),i]]:[[s,Math.max(u[1]-o,e)],[n,Math.min(u[1]+o,i)]])}return r.scale=function(t){return arguments.length?(a(t),l()):a()},r.translate=function(t){return arguments.length?(u(t),l()):u()},r.center=function(t){return arguments.length?(o(t),l()):o()},r.clipExtent=function(t){return arguments.length?(null==t?s=e=n=i=null:(s=+t[0][0],e=+t[0][1],n=+t[1][0],i=+t[1][1]),l()):null==s?null:[[s,e],[n,i]]},l()}function ip(t){return ql((Ol+t)/2)}function rp(t,e){var n=Vl(t),i=t===e?Kl(t):Gl(n/Vl(e))/Gl(ip(e)/ip(t)),r=n*Ul(ip(t),i)/i;if(!i)return tp;function o(t,e){r>0?e<-Ol+Tl&&(e=-Ol+Tl):e>Ol-Tl&&(e=Ol-Tl);var n=r/Ul(ip(e),i);return[n*Kl(i*t),r-n*Vl(i*t)]}return o.invert=function(t,e){var n=r-e,o=Hl(i)*Ql(t*t+n*n),a=Dl(t,Pl(n))*Hl(n);return n*i<0&&(a-=Al*Hl(t)*Hl(n)),[a/i,2*zl(Ul(r/o,1/i))-Ol]},o}function op(){return Uv(rp).scale(109.5).parallels([30,30])}function ap(t,e){return[t,e]}function up(){return Fv(ap).scale(152.63)}function cp(t,e){var n=Vl(t),i=t===e?Kl(t):(n-Vl(e))/(e-t),r=n/i+t;if(Pl(i)<Tl)return ap;function o(t,e){var n=r-e,o=i*t;return[n*Kl(o),r-n*Vl(o)]}return o.invert=function(t,e){var n=r-e,o=Dl(t,Pl(n))*Hl(n);return n*i<0&&(o-=Al*Hl(t)*Hl(n)),[o/i,r-Hl(i)*Ql(t*t+n*n)]},o}function sp(){return Uv(cp).scale(131.154).center([0,13.9389])}Jv.invert=Yv((function(t){return t})),tp.invert=function(t,e){return[t,2*zl(Bl(e))-Ol]},ap.invert=ap;var lp=1.340264,dp=-.081106,fp=893e-6,hp=.003796,vp=Ql(3)/2;function pp(t,e){var n=Yl(vp*Kl(e)),i=n*n,r=i*i*i;return[t*Vl(n)/(vp*(lp+3*dp*i+r*(7*fp+9*hp*i))),n*(lp+dp*i+r*(fp+hp*i))]}function gp(){return Fv(pp).scale(177.158)}function yp(t,e){var n=Vl(e),i=Vl(t)*n;return[n*Kl(t)/i,Kl(e)/i]}function _p(){return Fv(yp).scale(144.049).clipAngle(60)}function bp(){var t,e,n,i,r,o,a,u=1,c=0,s=0,l=1,d=1,f=0,h=null,v=1,p=1,g=Av({point:function(t,e){var n=b([t,e]);this.stream.point(n[0],n[1])}}),y=wh;function _(){return v=u*l,p=u*d,o=a=null,b}function b(n){var i=n[0]*v,r=n[1]*p;if(f){var o=r*t-i*e;i=i*t+r*e,r=o}return[i+c,r+s]}return b.invert=function(n){var i=n[0]-c,r=n[1]-s;if(f){var o=r*t+i*e;i=i*t-r*e,r=o}return[i/v,r/p]},b.stream=function(t){return o&&a===t?o:o=g(y(a=t))},b.postclip=function(t){return arguments.length?(y=t,h=n=i=r=null,_()):y},b.clipExtent=function(t){return arguments.length?(y=null==t?(h=n=i=r=null,wh):Xf(h=+t[0][0],n=+t[0][1],i=+t[1][0],r=+t[1][1]),_()):null==h?null:[[h,n],[i,r]]},b.scale=function(t){return arguments.length?(u=+t,_()):u},b.translate=function(t){return arguments.length?(c=+t[0],s=+t[1],_()):[c,s]},b.angle=function(n){return arguments.length?(e=Kl(f=n%360*jl),t=Vl(f),_()):f*Il},b.reflectX=function(t){return arguments.length?(l=t?-1:1,_()):l<0},b.reflectY=function(t){return arguments.length?(d=t?-1:1,_()):d<0},b.fitExtent=function(t,e){return Cv(b,t,e)},b.fitSize=function(t,e){return Iv(b,t,e)},b.fitWidth=function(t,e){return jv(b,t,e)},b.fitHeight=function(t,e){return Pv(b,t,e)},b}function mp(t,e){var n=e*e,i=n*n;return[t*(.8707-.131979*n+i*(i*(.003971*n-.001529*i)-.013791)),e*(1.007226+n*(.015085+i*(.028874*n-.044475-.005916*i)))]}function wp(){return Fv(mp).scale(175.295)}function xp(t,e){return[Vl(e)*Kl(t),Kl(e)]}function Sp(){return Fv(xp).scale(249.5).clipAngle(90+Tl)}function Mp(t,e){var n=Vl(e),i=1+Vl(t)*n;return[n*Kl(t)/i,Kl(e)/i]}function Ep(){return Fv(Mp).scale(250).clipAngle(142)}function kp(t,e){return[Gl(ql((Ol+e)/2)),-t]}function Tp(){var t=np(kp),e=t.center,n=t.rotate;return t.center=function(t){return arguments.length?e([-t[1],t[0]]):[(t=e())[1],-t[0]]},t.rotate=function(t){return arguments.length?n([t[0],t[1],t.length>2?t[2]+90:90]):[(t=n())[0],t[1],t[2]-90]},n([0,0,90]).scale(159.155)}function Np(t,e){return t.parent===e.parent?1:2}function Ap(t,e){return t+e.x}function Op(t,e){return Math.max(t,e.y)}function Rp(){var t=Np,e=1,n=1,i=!1;function r(r){var o,a=0;r.eachAfter((function(e){var n=e.children;n?(e.x=function(t){return t.reduce(Ap,0)/t.length}(n),e.y=function(t){return 1+t.reduce(Op,0)}(n)):(e.x=o?a+=t(e,o):0,e.y=0,o=e)}));var u=function(t){for(var e;e=t.children;)t=e[0];return t}(r),c=function(t){for(var e;e=t.children;)t=e[e.length-1];return t}(r),s=u.x-t(u,c)/2,l=c.x+t(c,u)/2;return r.eachAfter(i?function(t){t.x=(t.x-r.x)*e,t.y=(r.y-t.y)*n}:function(t){t.x=(t.x-s)/(l-s)*e,t.y=(1-(r.y?t.y/r.y:1))*n})}return r.separation=function(e){return arguments.length?(t=e,r):t},r.size=function(t){return arguments.length?(i=!1,e=+t[0],n=+t[1],r):i?null:[e,n]},r.nodeSize=function(t){return arguments.length?(i=!0,e=+t[0],n=+t[1],r):i?[e,n]:null},r}function Cp(t){var e=0,n=t.children,i=n&&n.length;if(i)for(;--i>=0;)e+=n[i].value;else e=1;t.value=e}function Ip(t,e){t instanceof Map?(t=[void 0,t],void 0===e&&(e=Pp)):void 0===e&&(e=jp);for(var n,i,r,o,a,u=new Vp(t),c=[u];n=c.pop();)if((r=e(n.data))&&(a=(r=Array.from(r)).length))for(n.children=r,o=a-1;o>=0;--o)c.push(i=r[o]=new Vp(r[o])),i.parent=n,i.depth=n.depth+1;return u.eachBefore(Dp)}function jp(t){return t.children}function Pp(t){return Array.isArray(t)?t[1]:null}function zp(t){void 0!==t.data.value&&(t.value=t.data.value),t.data=t.data.data}function Dp(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function Vp(t){this.data=t,this.depth=this.height=0,this.parent=null}function Lp(t){return null==t?null:Bp(t)}function Bp(t){if("function"!=typeof t)throw new Error;return t}function Fp(){return 0}function Gp(t){return function(){return t}}pp.invert=function(t,e){for(var n,i=e,r=i*i,o=r*r*r,a=0;a<12&&(o=(r=(i-=n=(i*(lp+dp*r+o*(fp+hp*r))-e)/(lp+3*dp*r+o*(7*fp+9*hp*r)))*i)*r*r,!(Pl(n)<Nl));++a);return[vp*t*(lp+3*dp*r+o*(7*fp+9*hp*r))/Vl(i),Yl(Kl(i)/vp)]},yp.invert=Yv(zl),mp.invert=function(t,e){var n,i=e,r=25;do{var o=i*i,a=o*o;i-=n=(i*(1.007226+o*(.015085+a*(.028874*o-.044475-.005916*a)))-e)/(1.007226+o*(.045255+a*(.259866*o-.311325-.005916*11*a)))}while(Pl(n)>Tl&&--r>0);return[t/(.8707+(o=i*i)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),i]},xp.invert=Yv(Yl),Mp.invert=Yv((function(t){return 2*zl(t)})),kp.invert=function(t,e){return[-e,2*zl(Bl(t))-Ol]},Vp.prototype=Ip.prototype={constructor:Vp,count:function(){return this.eachAfter(Cp)},each:function(t,e){let n=-1;for(const i of this)t.call(e,i,++n,this);return this},eachAfter:function(t,e){for(var n,i,r,o=this,a=[o],u=[],c=-1;o=a.pop();)if(u.push(o),n=o.children)for(i=0,r=n.length;i<r;++i)a.push(n[i]);for(;o=u.pop();)t.call(e,o,++c,this);return this},eachBefore:function(t,e){for(var n,i,r=this,o=[r],a=-1;r=o.pop();)if(t.call(e,r,++a,this),n=r.children)for(i=n.length-1;i>=0;--i)o.push(n[i]);return this},find:function(t,e){let n=-1;for(const i of this)if(t.call(e,i,++n,this))return i},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,i=e.children,r=i&&i.length;--r>=0;)n+=i[r].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),i=e.ancestors(),r=null;for(t=n.pop(),e=i.pop();t===e;)r=t,t=n.pop(),e=i.pop();return r}(e,t),i=[e];e!==n;)e=e.parent,i.push(e);for(var r=i.length;t!==n;)i.splice(r,0,t),t=t.parent;return i},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){return Array.from(this)},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return Ip(this).eachBefore(zp)},[Symbol.iterator]:function*(){var t,e,n,i,r=this,o=[r];do{for(t=o.reverse(),o=[];r=t.pop();)if(yield r,e=r.children)for(n=0,i=e.length;n<i;++n)o.push(e[n])}while(o.length)}};const Up=1664525,Kp=1013904223,Hp=4294967296;function Qp(){let t=1;return()=>(t=(Up*t+Kp)%Hp)/Hp}function qp(t){return $p(t,Qp())}function $p(t,e){for(var n,i,r=0,o=(t=function(t,e){let n,i,r=t.length;for(;r;)i=e()*r--|0,n=t[r],t[r]=t[i],t[i]=n;return t}(Array.from(t),e)).length,a=[];r<o;)n=t[r],i&&Xp(i,n)?++r:(i=Zp(a=Yp(a,n)),r=0);return i}function Yp(t,e){var n,i;if(Jp(e,t))return[e];for(n=0;n<t.length;++n)if(Wp(e,t[n])&&Jp(tg(t[n],e),t))return[t[n],e];for(n=0;n<t.length-1;++n)for(i=n+1;i<t.length;++i)if(Wp(tg(t[n],t[i]),e)&&Wp(tg(t[n],e),t[i])&&Wp(tg(t[i],e),t[n])&&Jp(eg(t[n],t[i],e),t))return[t[n],t[i],e];throw new Error}function Wp(t,e){var n=t.r-e.r,i=e.x-t.x,r=e.y-t.y;return n<0||n*n<i*i+r*r}function Xp(t,e){var n=t.r-e.r+1e-9*Math.max(t.r,e.r,1),i=e.x-t.x,r=e.y-t.y;return n>0&&n*n>i*i+r*r}function Jp(t,e){for(var n=0;n<e.length;++n)if(!Xp(t,e[n]))return!1;return!0}function Zp(t){switch(t.length){case 1:return function(t){return{x:t.x,y:t.y,r:t.r}}(t[0]);case 2:return tg(t[0],t[1]);case 3:return eg(t[0],t[1],t[2])}}function tg(t,e){var n=t.x,i=t.y,r=t.r,o=e.x,a=e.y,u=e.r,c=o-n,s=a-i,l=u-r,d=Math.sqrt(c*c+s*s);return{x:(n+o+c/d*l)/2,y:(i+a+s/d*l)/2,r:(d+r+u)/2}}function eg(t,e,n){var i=t.x,r=t.y,o=t.r,a=e.x,u=e.y,c=e.r,s=n.x,l=n.y,d=n.r,f=i-a,h=i-s,v=r-u,p=r-l,g=c-o,y=d-o,_=i*i+r*r-o*o,b=_-a*a-u*u+c*c,m=_-s*s-l*l+d*d,w=h*v-f*p,x=(v*m-p*b)/(2*w)-i,S=(p*g-v*y)/w,M=(h*b-f*m)/(2*w)-r,E=(f*y-h*g)/w,k=S*S+E*E-1,T=2*(o+x*S+M*E),N=x*x+M*M-o*o,A=-(Math.abs(k)>1e-6?(T+Math.sqrt(T*T-4*k*N))/(2*k):N/T);return{x:i+x+S*A,y:r+M+E*A,r:A}}function ng(t,e,n){var i,r,o,a,u=t.x-e.x,c=t.y-e.y,s=u*u+c*c;s?(r=e.r+n.r,r*=r,a=t.r+n.r,r>(a*=a)?(i=(s+a-r)/(2*s),o=Math.sqrt(Math.max(0,a/s-i*i)),n.x=t.x-i*u-o*c,n.y=t.y-i*c+o*u):(i=(s+r-a)/(2*s),o=Math.sqrt(Math.max(0,r/s-i*i)),n.x=e.x+i*u-o*c,n.y=e.y+i*c+o*u)):(n.x=e.x+n.r,n.y=e.y)}function ig(t,e){var n=t.r+e.r-1e-6,i=e.x-t.x,r=e.y-t.y;return n>0&&n*n>i*i+r*r}function rg(t){var e=t._,n=t.next._,i=e.r+n.r,r=(e.x*n.r+n.x*e.r)/i,o=(e.y*n.r+n.y*e.r)/i;return r*r+o*o}function og(t){this._=t,this.next=null,this.previous=null}function ag(t,e){if(!(a=(n=t,t="object"==typeof n&&"length"in n?n:Array.from(n)).length))return 0;var n,i,r,o,a,u,c,s,l,d,f,h;if((i=t[0]).x=0,i.y=0,!(a>1))return i.r;if(r=t[1],i.x=-r.r,r.x=i.r,r.y=0,!(a>2))return i.r+r.r;ng(r,i,o=t[2]),i=new og(i),r=new og(r),o=new og(o),i.next=o.previous=r,r.next=i.previous=o,o.next=r.previous=i;t:for(s=3;s<a;++s){ng(i._,r._,o=t[s]),o=new og(o),l=r.next,d=i.previous,f=r._.r,h=i._.r;do{if(f<=h){if(ig(l._,o._)){r=l,i.next=r,r.previous=i,--s;continue t}f+=l._.r,l=l.next}else{if(ig(d._,o._)){(i=d).next=r,r.previous=i,--s;continue t}h+=d._.r,d=d.previous}}while(l!==d.next);for(o.previous=i,o.next=r,i.next=r.previous=r=o,u=rg(i);(o=o.next)!==r;)(c=rg(o))<u&&(i=o,u=c);r=i.next}for(i=[r._],o=r;(o=o.next)!==r;)i.push(o._);for(o=$p(i,e),s=0;s<a;++s)(i=t[s]).x-=o.x,i.y-=o.y;return o.r}function ug(t){return ag(t,Qp()),t}function cg(t){return Math.sqrt(t.value)}function sg(){var t=null,e=1,n=1,i=Fp;function r(r){const o=Qp();return r.x=e/2,r.y=n/2,t?r.eachBefore(lg(t)).eachAfter(dg(i,.5,o)).eachBefore(fg(1)):r.eachBefore(lg(cg)).eachAfter(dg(Fp,1,o)).eachAfter(dg(i,r.r/Math.min(e,n),o)).eachBefore(fg(Math.min(e,n)/(2*r.r))),r}return r.radius=function(e){return arguments.length?(t=Lp(e),r):t},r.size=function(t){return arguments.length?(e=+t[0],n=+t[1],r):[e,n]},r.padding=function(t){return arguments.length?(i="function"==typeof t?t:Gp(+t),r):i},r}function lg(t){return function(e){e.children||(e.r=Math.max(0,+t(e)||0))}}function dg(t,e,n){return function(i){if(r=i.children){var r,o,a,u=r.length,c=t(i)*e||0;if(c)for(o=0;o<u;++o)r[o].r+=c;if(a=ag(r,n),c)for(o=0;o<u;++o)r[o].r-=c;i.r=a+c}}}function fg(t){return function(e){var n=e.parent;e.r*=t,n&&(e.x=n.x+t*e.x,e.y=n.y+t*e.y)}}function hg(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)}function vg(t,e,n,i,r){for(var o,a=t.children,u=-1,c=a.length,s=t.value&&(i-e)/t.value;++u<c;)(o=a[u]).y0=n,o.y1=r,o.x0=e,o.x1=e+=o.value*s}function pg(){var t=1,e=1,n=0,i=!1;function r(r){var o=r.height+1;return r.x0=r.y0=n,r.x1=t,r.y1=e/o,r.eachBefore(function(t,e){return function(i){i.children&&vg(i,i.x0,t*(i.depth+1)/e,i.x1,t*(i.depth+2)/e);var r=i.x0,o=i.y0,a=i.x1-n,u=i.y1-n;a<r&&(r=a=(r+a)/2),u<o&&(o=u=(o+u)/2),i.x0=r,i.y0=o,i.x1=a,i.y1=u}}(e,o)),i&&r.eachBefore(hg),r}return r.round=function(t){return arguments.length?(i=!!t,r):i},r.size=function(n){return arguments.length?(t=+n[0],e=+n[1],r):[t,e]},r.padding=function(t){return arguments.length?(n=+t,r):n},r}var gg={depth:-1},yg={},_g={};function bg(t){return t.id}function mg(t){return t.parentId}function wg(){var t,e=bg,n=mg;function i(i){var r,o,a,u,c,s,l,d,f=Array.from(i),h=e,v=n,p=new Map;if(null!=t){const e=f.map(((e,n)=>function(t){let e=(t=`${t}`).length;return Sg(t,e-1)&&!Sg(t,e-2)&&(t=t.slice(0,-1)),"/"===t[0]?t:`/${t}`}(t(e,n,i)))),n=e.map(xg),r=new Set(e).add("");for(const t of n)r.has(t)||(r.add(t),e.push(t),n.push(xg(t)),f.push(_g));h=(t,n)=>e[n],v=(t,e)=>n[e]}for(a=0,r=f.length;a<r;++a)o=f[a],s=f[a]=new Vp(o),null!=(l=h(o,a,i))&&(l+="")&&(d=s.id=l,p.set(d,p.has(d)?yg:s)),null!=(l=v(o,a,i))&&(l+="")&&(s.parent=l);for(a=0;a<r;++a)if(l=(s=f[a]).parent){if(!(c=p.get(l)))throw new Error("missing: "+l);if(c===yg)throw new Error("ambiguous: "+l);c.children?c.children.push(s):c.children=[s],s.parent=c}else{if(u)throw new Error("multiple roots");u=s}if(!u)throw new Error("no root");if(null!=t){for(;u.data===_g&&1===u.children.length;)u=u.children[0],--r;for(let t=f.length-1;t>=0&&(s=f[t]).data===_g;--t)s.data=null}if(u.parent=gg,u.eachBefore((function(t){t.depth=t.parent.depth+1,--r})).eachBefore(Dp),u.parent=null,r>0)throw new Error("cycle");return u}return i.id=function(t){return arguments.length?(e=Lp(t),i):e},i.parentId=function(t){return arguments.length?(n=Lp(t),i):n},i.path=function(e){return arguments.length?(t=Lp(e),i):t},i}function xg(t){let e=t.length;if(e<2)return"";for(;--e>1&&!Sg(t,e););return t.slice(0,e)}function Sg(t,e){if("/"===t[e]){let n=0;for(;e>0&&"\\"===t[--e];)++n;if(0==(1&n))return!0}return!1}function Mg(t,e){return t.parent===e.parent?1:2}function Eg(t){var e=t.children;return e?e[0]:t.t}function kg(t){var e=t.children;return e?e[e.length-1]:t.t}function Tg(t,e,n){var i=n/(e.i-t.i);e.c-=i,e.s+=n,t.c+=i,e.z+=n,e.m+=n}function Ng(t,e,n){return t.a.parent===e.parent?t.a:n}function Ag(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}function Og(){var t=Mg,e=1,n=1,i=null;function r(r){var c=function(t){for(var e,n,i,r,o,a=new Ag(t,0),u=[a];e=u.pop();)if(i=e._.children)for(e.children=new Array(o=i.length),r=o-1;r>=0;--r)u.push(n=e.children[r]=new Ag(i[r],r)),n.parent=e;return(a.parent=new Ag(null,0)).children=[a],a}(r);if(c.eachAfter(o),c.parent.m=-c.z,c.eachBefore(a),i)r.eachBefore(u);else{var s=r,l=r,d=r;r.eachBefore((function(t){t.x<s.x&&(s=t),t.x>l.x&&(l=t),t.depth>d.depth&&(d=t)}));var f=s===l?1:t(s,l)/2,h=f-s.x,v=e/(l.x+f+h),p=n/(d.depth||1);r.eachBefore((function(t){t.x=(t.x+h)*v,t.y=t.depth*p}))}return r}function o(e){var n=e.children,i=e.parent.children,r=e.i?i[e.i-1]:null;if(n){!function(t){for(var e,n=0,i=0,r=t.children,o=r.length;--o>=0;)(e=r[o]).z+=n,e.m+=n,n+=e.s+(i+=e.c)}(e);var o=(n[0].z+n[n.length-1].z)/2;r?(e.z=r.z+t(e._,r._),e.m=e.z-o):e.z=o}else r&&(e.z=r.z+t(e._,r._));e.parent.A=function(e,n,i){if(n){for(var r,o=e,a=e,u=n,c=o.parent.children[0],s=o.m,l=a.m,d=u.m,f=c.m;u=kg(u),o=Eg(o),u&&o;)c=Eg(c),(a=kg(a)).a=e,(r=u.z+d-o.z-s+t(u._,o._))>0&&(Tg(Ng(u,e,i),e,r),s+=r,l+=r),d+=u.m,s+=o.m,f+=c.m,l+=a.m;u&&!kg(a)&&(a.t=u,a.m+=d-l),o&&!Eg(c)&&(c.t=o,c.m+=s-f,i=e)}return i}(e,r,e.parent.A||i[0])}function a(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function u(t){t.x*=e,t.y=t.depth*n}return r.separation=function(e){return arguments.length?(t=e,r):t},r.size=function(t){return arguments.length?(i=!1,e=+t[0],n=+t[1],r):i?null:[e,n]},r.nodeSize=function(t){return arguments.length?(i=!0,e=+t[0],n=+t[1],r):i?[e,n]:null},r}function Rg(t,e,n,i,r){for(var o,a=t.children,u=-1,c=a.length,s=t.value&&(r-n)/t.value;++u<c;)(o=a[u]).x0=e,o.x1=i,o.y0=n,o.y1=n+=o.value*s}Ag.prototype=Object.create(Vp.prototype);var Cg=(1+Math.sqrt(5))/2;function Ig(t,e,n,i,r,o){for(var a,u,c,s,l,d,f,h,v,p,g,y=[],_=e.children,b=0,m=0,w=_.length,x=e.value;b<w;){c=r-n,s=o-i;do{l=_[m++].value}while(!l&&m<w);for(d=f=l,g=l*l*(p=Math.max(s/c,c/s)/(x*t)),v=Math.max(f/g,g/d);m<w;++m){if(l+=u=_[m].value,u<d&&(d=u),u>f&&(f=u),g=l*l*p,(h=Math.max(f/g,g/d))>v){l-=u;break}v=h}y.push(a={value:l,dice:c<s,children:_.slice(b,m)}),a.dice?vg(a,n,i,r,x?i+=s*l/x:o):Rg(a,n,i,x?n+=c*l/x:r,o),x-=l,b=m}return y}const jg=function t(e){function n(t,n,i,r,o){Ig(e,t,n,i,r,o)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(Cg);function Pg(){var t=jg,e=!1,n=1,i=1,r=[0],o=Fp,a=Fp,u=Fp,c=Fp,s=Fp;function l(t){return t.x0=t.y0=0,t.x1=n,t.y1=i,t.eachBefore(d),r=[0],e&&t.eachBefore(hg),t}function d(e){var n=r[e.depth],i=e.x0+n,l=e.y0+n,d=e.x1-n,f=e.y1-n;d<i&&(i=d=(i+d)/2),f<l&&(l=f=(l+f)/2),e.x0=i,e.y0=l,e.x1=d,e.y1=f,e.children&&(n=r[e.depth+1]=o(e)/2,i+=s(e)-n,l+=a(e)-n,(d-=u(e)-n)<i&&(i=d=(i+d)/2),(f-=c(e)-n)<l&&(l=f=(l+f)/2),t(e,i,l,d,f))}return l.round=function(t){return arguments.length?(e=!!t,l):e},l.size=function(t){return arguments.length?(n=+t[0],i=+t[1],l):[n,i]},l.tile=function(e){return arguments.length?(t=Bp(e),l):t},l.padding=function(t){return arguments.length?l.paddingInner(t).paddingOuter(t):l.paddingInner()},l.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:Gp(+t),l):o},l.paddingOuter=function(t){return arguments.length?l.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):l.paddingTop()},l.paddingTop=function(t){return arguments.length?(a="function"==typeof t?t:Gp(+t),l):a},l.paddingRight=function(t){return arguments.length?(u="function"==typeof t?t:Gp(+t),l):u},l.paddingBottom=function(t){return arguments.length?(c="function"==typeof t?t:Gp(+t),l):c},l.paddingLeft=function(t){return arguments.length?(s="function"==typeof t?t:Gp(+t),l):s},l}function zg(t,e,n,i,r){var o,a,u=t.children,c=u.length,s=new Array(c+1);for(s[0]=a=o=0;o<c;++o)s[o+1]=a+=u[o].value;!function t(e,n,i,r,o,a,c){if(e>=n-1){var l=u[e];return l.x0=r,l.y0=o,l.x1=a,void(l.y1=c)}for(var d=s[e],f=i/2+d,h=e+1,v=n-1;h<v;){var p=h+v>>>1;s[p]<f?h=p+1:v=p}f-s[h-1]<s[h]-f&&e+1<h&&--h;var g=s[h]-d,y=i-g;if(a-r>c-o){var _=i?(r*y+a*g)/i:a;t(e,h,g,r,o,_,c),t(h,n,y,_,o,a,c)}else{var b=i?(o*y+c*g)/i:c;t(e,h,g,r,o,a,b),t(h,n,y,r,b,a,c)}}(0,c,t.value,e,n,i,r)}function Dg(t,e,n,i,r){(1&t.depth?Rg:vg)(t,e,n,i,r)}const Vg=function t(e){function n(t,n,i,r,o){if((a=t._squarify)&&a.ratio===e)for(var a,u,c,s,l,d=-1,f=a.length,h=t.value;++d<f;){for(c=(u=a[d]).children,s=u.value=0,l=c.length;s<l;++s)u.value+=c[s].value;u.dice?vg(u,n,i,r,h?i+=(o-i)*u.value/h:o):Rg(u,n,i,h?n+=(r-n)*u.value/h:r,o),h-=u.value}else t._squarify=a=Ig(e,t,n,i,r,o),a.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(Cg);function Lg(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}function Bg(t,e){var n=Pi(+t,+e);return function(t){var e=n(t);return e-360*Math.floor(e/360)}}function Fg(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}function Gg(t){return((t=Math.exp(t))+1/t)/2}const Ug=function t(e,n,i){function r(t,r){var o,a,u=t[0],c=t[1],s=t[2],l=r[0],d=r[1],f=r[2],h=l-u,v=d-c,p=h*h+v*v;if(p<1e-12)a=Math.log(f/s)/e,o=function(t){return[u+t*h,c+t*v,s*Math.exp(e*t*a)]};else{var g=Math.sqrt(p),y=(f*f-s*s+i*p)/(2*s*n*g),_=(f*f-s*s-i*p)/(2*f*n*g),b=Math.log(Math.sqrt(y*y+1)-y),m=Math.log(Math.sqrt(_*_+1)-_);a=(m-b)/e,o=function(t){var i,r=t*a,o=Gg(b),l=s/(n*g)*(o*(i=e*r+b,((i=Math.exp(2*i))-1)/(i+1))-function(t){return((t=Math.exp(t))-1/t)/2}(b));return[u+l*h,c+l*v,s*o/Gg(e*r+b)]}}return o.duration=1e3*a*e/Math.SQRT2,o}return r.rho=function(e){var n=Math.max(.001,+e),i=n*n;return t(n,i,i*i)},r}(Math.SQRT2,2,4);function Kg(t){return function(e,n){var i=t((e=Ei(e)).h,(n=Ei(n)).h),r=zi(e.s,n.s),o=zi(e.l,n.l),a=zi(e.opacity,n.opacity);return function(t){return e.h=i(t),e.s=r(t),e.l=o(t),e.opacity=a(t),e+""}}}const Hg=Kg(Pi);var Qg=Kg(zi);function qg(t,e){var n=zi((t=Da(t)).l,(e=Da(e)).l),i=zi(t.a,e.a),r=zi(t.b,e.b),o=zi(t.opacity,e.opacity);return function(e){return t.l=n(e),t.a=i(e),t.b=r(e),t.opacity=o(e),t+""}}function $g(t){return function(e,n){var i=t((e=Ha(e)).h,(n=Ha(n)).h),r=zi(e.c,n.c),o=zi(e.l,n.l),a=zi(e.opacity,n.opacity);return function(t){return e.h=i(t),e.c=r(t),e.l=o(t),e.opacity=a(t),e+""}}}const Yg=$g(Pi);var Wg=$g(zi);function Xg(t){return function e(n){function i(e,i){var r=t((e=nu(e)).h,(i=nu(i)).h),o=zi(e.s,i.s),a=zi(e.l,i.l),u=zi(e.opacity,i.opacity);return function(t){return e.h=r(t),e.s=o(t),e.l=a(Math.pow(t,n)),e.opacity=u(t),e+""}}return n=+n,i.gamma=e,i}(1)}const Jg=Xg(Pi);var Zg=Xg(zi);function ty(t,e){void 0===e&&(e=t,t=Xi);for(var n=0,i=e.length-1,r=e[0],o=new Array(i<0?0:i);n<i;)o[n]=t(r,r=e[++n]);return function(t){var e=Math.max(0,Math.min(i-1,Math.floor(t*=i)));return o[e](t-e)}}function ey(t,e){for(var n=new Array(e),i=0;i<e;++i)n[i]=t(i/(e-1));return n}function ny(t){for(var e,n=-1,i=t.length,r=t[i-1],o=0;++n<i;)e=r,r=t[n],o+=e[1]*r[0]-e[0]*r[1];return o/2}function iy(t){for(var e,n,i=-1,r=t.length,o=0,a=0,u=t[r-1],c=0;++i<r;)e=u,u=t[i],c+=n=e[0]*u[1]-u[0]*e[1],o+=(e[0]+u[0])*n,a+=(e[1]+u[1])*n;return[o/(c*=3),a/c]}function ry(t,e,n){return(e[0]-t[0])*(n[1]-t[1])-(e[1]-t[1])*(n[0]-t[0])}function oy(t,e){return t[0]-e[0]||t[1]-e[1]}function ay(t){const e=t.length,n=[0,1];let i,r=2;for(i=2;i<e;++i){for(;r>1&&ry(t[n[r-2]],t[n[r-1]],t[i])<=0;)--r;n[r++]=i}return n.slice(0,r)}function uy(t){if((n=t.length)<3)return null;var e,n,i=new Array(n),r=new Array(n);for(e=0;e<n;++e)i[e]=[+t[e][0],+t[e][1],e];for(i.sort(oy),e=0;e<n;++e)r[e]=[i[e][0],-i[e][1]];var o=ay(i),a=ay(r),u=a[0]===o[0],c=a[a.length-1]===o[o.length-1],s=[];for(e=o.length-1;e>=0;--e)s.push(t[i[o[e]][2]]);for(e=+u;e<a.length-c;++e)s.push(t[i[a[e]][2]]);return s}function cy(t,e){for(var n,i,r=t.length,o=t[r-1],a=e[0],u=e[1],c=o[0],s=o[1],l=!1,d=0;d<r;++d)n=(o=t[d])[0],(i=o[1])>u!=s>u&&a<(c-n)*(u-i)/(s-i)+n&&(l=!l),c=n,s=i;return l}function sy(t){for(var e,n,i=-1,r=t.length,o=t[r-1],a=o[0],u=o[1],c=0;++i<r;)e=a,n=u,e-=a=(o=t[i])[0],n-=u=o[1],c+=Math.hypot(e,n);return c}const ly=Math.random,dy=function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(ly),fy=function t(e){function n(t,n){return arguments.length<2&&(n=t,t=0),t=Math.floor(t),n=Math.floor(n)-t,function(){return Math.floor(e()*n+t)}}return n.source=t,n}(ly),hy=function t(e){function n(t,n){var i,r;return t=null==t?0:+t,n=null==n?1:+n,function(){var o;if(null!=i)o=i,i=null;else do{i=2*e()-1,o=2*e()-1,r=i*i+o*o}while(!r||r>1);return t+n*o*Math.sqrt(-2*Math.log(r)/r)}}return n.source=t,n}(ly),vy=function t(e){var n=hy.source(e);function i(){var t=n.apply(this,arguments);return function(){return Math.exp(t())}}return i.source=t,i}(ly),py=function t(e){function n(t){return(t=+t)<=0?()=>0:function(){for(var n=0,i=t;i>1;--i)n+=e();return n+i*e()}}return n.source=t,n}(ly),gy=function t(e){var n=py.source(e);function i(t){if(0==(t=+t))return e;var i=n(t);return function(){return i()/t}}return i.source=t,i}(ly),yy=function t(e){function n(t){return function(){return-Math.log1p(-e())/t}}return n.source=t,n}(ly),_y=function t(e){function n(t){if((t=+t)<0)throw new RangeError("invalid alpha");return t=1/-t,function(){return Math.pow(1-e(),t)}}return n.source=t,n}(ly),by=function t(e){function n(t){if((t=+t)<0||t>1)throw new RangeError("invalid p");return function(){return Math.floor(e()+t)}}return n.source=t,n}(ly),my=function t(e){function n(t){if((t=+t)<0||t>1)throw new RangeError("invalid p");return 0===t?()=>1/0:1===t?()=>1:(t=Math.log1p(-t),function(){return 1+Math.floor(Math.log1p(-e())/t)})}return n.source=t,n}(ly),wy=function t(e){var n=hy.source(e)();function i(t,i){if((t=+t)<0)throw new RangeError("invalid k");if(0===t)return()=>0;if(i=null==i?1:+i,1===t)return()=>-Math.log1p(-e())*i;var r=(t<1?t+1:t)-1/3,o=1/(3*Math.sqrt(r)),a=t<1?()=>Math.pow(e(),1/t):()=>1;return function(){do{do{var t=n(),u=1+o*t}while(u<=0);u*=u*u;var c=1-e()}while(c>=1-.0331*t*t*t*t&&Math.log(c)>=.5*t*t+r*(1-u+Math.log(u)));return r*u*a()*i}}return i.source=t,i}(ly),xy=function t(e){var n=wy.source(e);function i(t,e){var i=n(t),r=n(e);return function(){var t=i();return 0===t?0:t/(t+r())}}return i.source=t,i}(ly),Sy=function t(e){var n=my.source(e),i=xy.source(e);function r(t,e){return t=+t,(e=+e)>=1?()=>t:e<=0?()=>0:function(){for(var r=0,o=t,a=e;o*a>16&&o*(1-a)>16;){var u=Math.floor((o+1)*a),c=i(u,o-u+1)();c<=a?(r+=u,o-=u,a=(a-c)/(1-c)):(o=u-1,a/=c)}for(var s=a<.5,l=n(s?a:1-a),d=l(),f=0;d<=o;++f)d+=l();return r+(s?f:o-f)}}return r.source=t,r}(ly),My=function t(e){function n(t,n,i){var r;return 0==(t=+t)?r=t=>-Math.log(t):(t=1/t,r=e=>Math.pow(e,t)),n=null==n?0:+n,i=null==i?1:+i,function(){return n+i*r(-Math.log1p(-e()))}}return n.source=t,n}(ly),Ey=function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,function(){return t+n*Math.tan(Math.PI*e())}}return n.source=t,n}(ly),ky=function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,function(){var i=e();return t+n*Math.log(i/(1-i))}}return n.source=t,n}(ly),Ty=function t(e){var n=wy.source(e),i=Sy.source(e);function r(t){return function(){for(var r=0,o=t;o>16;){var a=Math.floor(.875*o),u=n(a)();if(u>o)return r+i(a-1,o/u)();r+=a,o-=u}for(var c=-Math.log1p(-e()),s=0;c<=o;++s)c-=Math.log1p(-e());return r+s}}return r.source=t,r}(ly),Ny=1664525,Ay=1013904223,Oy=1/4294967296;function Ry(t=Math.random()){let e=0|(0<=t&&t<1?t/Oy:Math.abs(t));return()=>(e=Ny*e+Ay|0,Oy*(e>>>0))}function Cy(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function Iy(t,e){switch(arguments.length){case 0:break;case 1:"function"==typeof t?this.interpolator(t):this.range(t);break;default:this.domain(t),"function"==typeof e?this.interpolator(e):this.range(e)}return this}const jy=Symbol("implicit");function Py(){var t=new C,e=[],n=[],i=jy;function r(r){let o=t.get(r);if(void 0===o){if(i!==jy)return i;t.set(r,o=e.push(r)-1)}return n[o%n.length]}return r.domain=function(n){if(!arguments.length)return e.slice();e=[],t=new C;for(const i of n)t.has(i)||t.set(i,e.push(i)-1);return r},r.range=function(t){return arguments.length?(n=Array.from(t),r):n.slice()},r.unknown=function(t){return arguments.length?(i=t,r):i},r.copy=function(){return Py(e,n).unknown(i)},Cy.apply(r,arguments),r}function zy(){var t,e,n=Py().unknown(void 0),i=n.domain,r=n.range,o=0,a=1,u=!1,c=0,s=0,l=.5;function d(){var n=i().length,d=a<o,f=d?a:o,h=d?o:a;t=(h-f)/Math.max(1,n-c+2*s),u&&(t=Math.floor(t)),f+=(h-f-t*(n-c))*l,e=t*(1-c),u&&(f=Math.round(f),e=Math.round(e));var v=It(n).map((function(e){return f+t*e}));return r(d?v.reverse():v)}return delete n.unknown,n.domain=function(t){return arguments.length?(i(t),d()):i()},n.range=function(t){return arguments.length?([o,a]=t,o=+o,a=+a,d()):[o,a]},n.rangeRound=function(t){return[o,a]=t,o=+o,a=+a,u=!0,d()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(u=!!t,d()):u},n.padding=function(t){return arguments.length?(c=Math.min(1,s=+t),d()):c},n.paddingInner=function(t){return arguments.length?(c=Math.min(1,t),d()):c},n.paddingOuter=function(t){return arguments.length?(s=+t,d()):s},n.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),d()):l},n.copy=function(){return zy(i(),[o,a]).round(u).paddingInner(c).paddingOuter(s).align(l)},Cy.apply(d(),arguments)}function Dy(t){var e=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return Dy(e())},t}function Vy(){return Dy(zy.apply(null,arguments).paddingInner(1))}function Ly(t){return+t}var By=[0,1];function Fy(t){return t}function Gy(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=isNaN(e)?NaN:.5,function(){return n});var n}function Uy(t,e,n){var i=t[0],r=t[1],o=e[0],a=e[1];return r<i?(i=Gy(r,i),o=n(a,o)):(i=Gy(i,r),o=n(o,a)),function(t){return o(i(t))}}function Ky(t,e,n){var i=Math.min(t.length,e.length)-1,r=new Array(i),o=new Array(i),a=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<i;)r[a]=Gy(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=f(t,e,1,i)-1;return o[n](r[n](e))}}function Hy(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Qy(){var t,e,n,i,r,o,a=By,u=By,c=Xi,s=Fy;function l(){var t=Math.min(a.length,u.length);return s!==Fy&&(s=function(t,e){var n;return t>e&&(n=t,t=e,e=n),function(n){return Math.max(t,Math.min(e,n))}}(a[0],a[t-1])),i=t>2?Ky:Uy,r=o=null,d}function d(e){return null==e||isNaN(e=+e)?n:(r||(r=i(a.map(t),u,c)))(t(s(e)))}return d.invert=function(n){return s(e((o||(o=i(u,a.map(t),Qi)))(n)))},d.domain=function(t){return arguments.length?(a=Array.from(t,Ly),l()):a.slice()},d.range=function(t){return arguments.length?(u=Array.from(t),l()):u.slice()},d.rangeRound=function(t){return u=Array.from(t),c=Fg,l()},d.clamp=function(t){return arguments.length?(s=!!t||Fy,l()):s!==Fy},d.interpolate=function(t){return arguments.length?(c=t,l()):c},d.unknown=function(t){return arguments.length?(n=t,d):n},function(n,i){return t=n,e=i,l()}}function qy(){return Qy()(Fy,Fy)}function $y(t,e,n,i){var r,o=lt(t,e,n);switch((i=fl(null==i?",f":i)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=i.precision||isNaN(r=El(o,a))||(i.precision=r),bl(i,a);case"":case"e":case"g":case"p":case"r":null!=i.precision||isNaN(r=kl(o,Math.max(Math.abs(t),Math.abs(e))))||(i.precision=r-("e"===i.type));break;case"f":case"%":null!=i.precision||isNaN(r=Ml(o))||(i.precision=r-2*("%"===i.type))}return _l(i)}function Yy(t){var e=t.domain;return t.ticks=function(t){var n=e();return ct(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var i=e();return $y(i[0],i[i.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var i,r,o=e(),a=0,u=o.length-1,c=o[a],s=o[u],l=10;for(s<c&&(r=c,c=s,s=r,r=a,a=u,u=r);l-- >0;){if((r=st(c,s,n))===i)return o[a]=c,o[u]=s,e(o);if(r>0)c=Math.floor(c/r)*r,s=Math.ceil(s/r)*r;else{if(!(r<0))break;c=Math.ceil(c*r)/r,s=Math.floor(s*r)/r}i=r}return t},t}function Wy(){var t=qy();return t.copy=function(){return Hy(t,Wy())},Cy.apply(t,arguments),Yy(t)}function Xy(t){var e;function n(t){return null==t||isNaN(t=+t)?e:t}return n.invert=n,n.domain=n.range=function(e){return arguments.length?(t=Array.from(e,Ly),n):t.slice()},n.unknown=function(t){return arguments.length?(e=t,n):e},n.copy=function(){return Xy(t).unknown(e)},t=arguments.length?Array.from(t,Ly):[0,1],Yy(n)}function Jy(t,e){var n,i=0,r=(t=t.slice()).length-1,o=t[i],a=t[r];return a<o&&(n=i,i=r,r=n,n=o,o=a,a=n),t[i]=e.floor(o),t[r]=e.ceil(a),t}function Zy(t){return Math.log(t)}function t_(t){return Math.exp(t)}function e_(t){return-Math.log(-t)}function n_(t){return-Math.exp(-t)}function i_(t){return isFinite(t)?+("1e"+t):t<0?0:t}function r_(t){return(e,n)=>-t(-e,n)}function o_(t){const e=t(Zy,t_),n=e.domain;let i,r,o=10;function a(){return i=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),e=>Math.log(e)/t)}(o),r=function(t){return 10===t?i_:t===Math.E?Math.exp:e=>Math.pow(t,e)}(o),n()[0]<0?(i=r_(i),r=r_(r),t(e_,n_)):t(Zy,t_),e}return e.base=function(t){return arguments.length?(o=+t,a()):o},e.domain=function(t){return arguments.length?(n(t),a()):n()},e.ticks=t=>{const e=n();let a=e[0],u=e[e.length-1];const c=u<a;c&&([a,u]=[u,a]);let s,l,d=i(a),f=i(u);const h=null==t?10:+t;let v=[];if(!(o%1)&&f-d<h){if(d=Math.floor(d),f=Math.ceil(f),a>0){for(;d<=f;++d)for(s=1;s<o;++s)if(l=d<0?s/r(-d):s*r(d),!(l<a)){if(l>u)break;v.push(l)}}else for(;d<=f;++d)for(s=o-1;s>=1;--s)if(l=d>0?s/r(-d):s*r(d),!(l<a)){if(l>u)break;v.push(l)}2*v.length<h&&(v=ct(a,u,h))}else v=ct(d,f,Math.min(f-d,h)).map(r);return c?v.reverse():v},e.tickFormat=(t,n)=>{if(null==t&&(t=10),null==n&&(n=10===o?"s":","),"function"!=typeof n&&(o%1||null!=(n=fl(n)).precision||(n.trim=!0),n=_l(n)),t===1/0)return n;const a=Math.max(1,o*t/e.ticks().length);return t=>{let e=t/r(Math.round(i(t)));return e*o<o-.5&&(e*=o),e<=a?n(t):""}},e.nice=()=>n(Jy(n(),{floor:t=>r(Math.floor(i(t))),ceil:t=>r(Math.ceil(i(t)))})),e}function a_(){const t=o_(Qy()).domain([1,10]);return t.copy=()=>Hy(t,a_()).base(t.base()),Cy.apply(t,arguments),t}function u_(t){return function(e){return Math.sign(e)*Math.log1p(Math.abs(e/t))}}function c_(t){return function(e){return Math.sign(e)*Math.expm1(Math.abs(e))*t}}function s_(t){var e=1,n=t(u_(e),c_(e));return n.constant=function(n){return arguments.length?t(u_(e=+n),c_(e)):e},Yy(n)}function l_(){var t=s_(Qy());return t.copy=function(){return Hy(t,l_()).constant(t.constant())},Cy.apply(t,arguments)}function d_(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function f_(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function h_(t){return t<0?-t*t:t*t}function v_(t){var e=t(Fy,Fy),n=1;return e.exponent=function(e){return arguments.length?1==(n=+e)?t(Fy,Fy):.5===n?t(f_,h_):t(d_(n),d_(1/n)):n},Yy(e)}function p_(){var t=v_(Qy());return t.copy=function(){return Hy(t,p_()).exponent(t.exponent())},Cy.apply(t,arguments),t}function g_(){return p_.apply(null,arguments).exponent(.5)}function y_(t){return Math.sign(t)*t*t}function __(){var t,e=qy(),n=[0,1],i=!1;function r(n){var r=function(t){return Math.sign(t)*Math.sqrt(Math.abs(t))}(e(n));return isNaN(r)?t:i?Math.round(r):r}return r.invert=function(t){return e.invert(y_(t))},r.domain=function(t){return arguments.length?(e.domain(t),r):e.domain()},r.range=function(t){return arguments.length?(e.range((n=Array.from(t,Ly)).map(y_)),r):n.slice()},r.rangeRound=function(t){return r.range(t).round(!0)},r.round=function(t){return arguments.length?(i=!!t,r):i},r.clamp=function(t){return arguments.length?(e.clamp(t),r):e.clamp()},r.unknown=function(e){return arguments.length?(t=e,r):t},r.copy=function(){return __(e.domain(),n).round(i).clamp(e.clamp()).unknown(t)},Cy.apply(r,arguments),Yy(r)}function b_(){var t,e=[],n=[],r=[];function o(){var t=0,i=Math.max(1,n.length);for(r=new Array(i-1);++t<i;)r[t-1]=xt(e,t/i);return a}function a(e){return null==e||isNaN(e=+e)?t:n[f(r,e)]}return a.invertExtent=function(t){var i=n.indexOf(t);return i<0?[NaN,NaN]:[i>0?r[i-1]:e[0],i<r.length?r[i]:e[e.length-1]]},a.domain=function(t){if(!arguments.length)return e.slice();e=[];for(let n of t)null==n||isNaN(n=+n)||e.push(n);return e.sort(i),o()},a.range=function(t){return arguments.length?(n=Array.from(t),o()):n.slice()},a.unknown=function(e){return arguments.length?(t=e,a):t},a.quantiles=function(){return r.slice()},a.copy=function(){return b_().domain(e).range(n).unknown(t)},Cy.apply(a,arguments)}function m_(){var t,e=0,n=1,i=1,r=[.5],o=[0,1];function a(e){return null!=e&&e<=e?o[f(r,e,0,i)]:t}function u(){var t=-1;for(r=new Array(i);++t<i;)r[t]=((t+1)*n-(t-i)*e)/(i+1);return a}return a.domain=function(t){return arguments.length?([e,n]=t,e=+e,n=+n,u()):[e,n]},a.range=function(t){return arguments.length?(i=(o=Array.from(t)).length-1,u()):o.slice()},a.invertExtent=function(t){var a=o.indexOf(t);return a<0?[NaN,NaN]:a<1?[e,r[0]]:a>=i?[r[i-1],n]:[r[a-1],r[a]]},a.unknown=function(e){return arguments.length?(t=e,a):a},a.thresholds=function(){return r.slice()},a.copy=function(){return m_().domain([e,n]).range(o).unknown(t)},Cy.apply(Yy(a),arguments)}function w_(){var t,e=[.5],n=[0,1],i=1;function r(r){return null!=r&&r<=r?n[f(e,r,0,i)]:t}return r.domain=function(t){return arguments.length?(e=Array.from(t),i=Math.min(e.length,n.length-1),r):e.slice()},r.range=function(t){return arguments.length?(n=Array.from(t),i=Math.min(e.length,n.length-1),r):n.slice()},r.invertExtent=function(t){var i=n.indexOf(t);return[e[i-1],e[i]]},r.unknown=function(e){return arguments.length?(t=e,r):t},r.copy=function(){return w_().domain(e).range(n).unknown(t)},Cy.apply(r,arguments)}const x_=1e3,S_=6e4,M_=36e5,E_=864e5,k_=6048e5,T_=31536e6,N_=new Date,A_=new Date;function O_(t,e,n,i){function r(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return r.floor=e=>(t(e=new Date(+e)),e),r.ceil=n=>(t(n=new Date(n-1)),e(n,1),t(n),n),r.round=t=>{const e=r(t),n=r.ceil(t);return t-e<n-t?e:n},r.offset=(t,n)=>(e(t=new Date(+t),null==n?1:Math.floor(n)),t),r.range=(n,i,o)=>{const a=[];if(n=r.ceil(n),o=null==o?1:Math.floor(o),!(n<i&&o>0))return a;let u;do{a.push(u=new Date(+n)),e(n,o),t(n)}while(u<n&&n<i);return a},r.filter=n=>O_((e=>{if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),((t,i)=>{if(t>=t)if(i<0)for(;++i<=0;)for(;e(t,-1),!n(t););else for(;--i>=0;)for(;e(t,1),!n(t););})),n&&(r.count=(e,i)=>(N_.setTime(+e),A_.setTime(+i),t(N_),t(A_),Math.floor(n(N_,A_))),r.every=t=>(t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(i?e=>i(e)%t==0:e=>r.count(0,e)%t==0):r:null)),r}const R_=O_((()=>{}),((t,e)=>{t.setTime(+t+e)}),((t,e)=>e-t));R_.every=t=>(t=Math.floor(t),isFinite(t)&&t>0?t>1?O_((e=>{e.setTime(Math.floor(e/t)*t)}),((e,n)=>{e.setTime(+e+n*t)}),((e,n)=>(n-e)/t)):R_:null);const C_=R_.range,I_=O_((t=>{t.setTime(t-t.getMilliseconds())}),((t,e)=>{t.setTime(+t+e*x_)}),((t,e)=>(e-t)/x_),(t=>t.getUTCSeconds())),j_=I_.range,P_=O_((t=>{t.setTime(t-t.getMilliseconds()-t.getSeconds()*x_)}),((t,e)=>{t.setTime(+t+e*S_)}),((t,e)=>(e-t)/S_),(t=>t.getMinutes())),z_=P_.range,D_=O_((t=>{t.setUTCSeconds(0,0)}),((t,e)=>{t.setTime(+t+e*S_)}),((t,e)=>(e-t)/S_),(t=>t.getUTCMinutes())),V_=D_.range,L_=O_((t=>{t.setTime(t-t.getMilliseconds()-t.getSeconds()*x_-t.getMinutes()*S_)}),((t,e)=>{t.setTime(+t+e*M_)}),((t,e)=>(e-t)/M_),(t=>t.getHours())),B_=L_.range,F_=O_((t=>{t.setUTCMinutes(0,0,0)}),((t,e)=>{t.setTime(+t+e*M_)}),((t,e)=>(e-t)/M_),(t=>t.getUTCHours())),G_=F_.range,U_=O_((t=>t.setHours(0,0,0,0)),((t,e)=>t.setDate(t.getDate()+e)),((t,e)=>(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*S_)/E_),(t=>t.getDate()-1)),K_=U_.range,H_=O_((t=>{t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+e)}),((t,e)=>(e-t)/E_),(t=>t.getUTCDate()-1)),Q_=H_.range,q_=O_((t=>{t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+e)}),((t,e)=>(e-t)/E_),(t=>Math.floor(t/E_))),$_=q_.range;function Y_(t){return O_((e=>{e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),((t,e)=>{t.setDate(t.getDate()+7*e)}),((t,e)=>(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*S_)/k_))}const W_=Y_(0),X_=Y_(1),J_=Y_(2),Z_=Y_(3),tb=Y_(4),eb=Y_(5),nb=Y_(6),ib=W_.range,rb=X_.range,ob=J_.range,ab=Z_.range,ub=tb.range,cb=eb.range,sb=nb.range;function lb(t){return O_((e=>{e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+7*e)}),((t,e)=>(e-t)/k_))}const db=lb(0),fb=lb(1),hb=lb(2),vb=lb(3),pb=lb(4),gb=lb(5),yb=lb(6),_b=db.range,bb=fb.range,mb=hb.range,wb=vb.range,xb=pb.range,Sb=gb.range,Mb=yb.range,Eb=O_((t=>{t.setDate(1),t.setHours(0,0,0,0)}),((t,e)=>{t.setMonth(t.getMonth()+e)}),((t,e)=>e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())),(t=>t.getMonth())),kb=Eb.range,Tb=O_((t=>{t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCMonth(t.getUTCMonth()+e)}),((t,e)=>e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())),(t=>t.getUTCMonth())),Nb=Tb.range,Ab=O_((t=>{t.setMonth(0,1),t.setHours(0,0,0,0)}),((t,e)=>{t.setFullYear(t.getFullYear()+e)}),((t,e)=>e.getFullYear()-t.getFullYear()),(t=>t.getFullYear()));Ab.every=t=>isFinite(t=Math.floor(t))&&t>0?O_((e=>{e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),((e,n)=>{e.setFullYear(e.getFullYear()+n*t)})):null;const Ob=Ab.range,Rb=O_((t=>{t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCFullYear(t.getUTCFullYear()+e)}),((t,e)=>e.getUTCFullYear()-t.getUTCFullYear()),(t=>t.getUTCFullYear()));Rb.every=t=>isFinite(t=Math.floor(t))&&t>0?O_((e=>{e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),((e,n)=>{e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null;const Cb=Rb.range;function Ib(t,e,n,i,r,a){const u=[[I_,1,x_],[I_,5,5e3],[I_,15,15e3],[I_,30,3e4],[a,1,S_],[a,5,3e5],[a,15,9e5],[a,30,18e5],[r,1,M_],[r,3,108e5],[r,6,216e5],[r,12,432e5],[i,1,E_],[i,2,1728e5],[n,1,k_],[e,1,2592e6],[e,3,7776e6],[t,1,T_]];function c(e,n,i){const r=Math.abs(n-e)/i,a=o((([,,t])=>t)).right(u,r);if(a===u.length)return t.every(lt(e/T_,n/T_,i));if(0===a)return R_.every(Math.max(lt(e,n,i),1));const[c,s]=u[r/u[a-1][2]<u[a][2]/r?a-1:a];return c.every(s)}return[function(t,e,n){const i=e<t;i&&([t,e]=[e,t]);const r=n&&"function"==typeof n.range?n:c(t,e,n),o=r?r.range(t,+e+1):[];return i?o.reverse():o},c]}const[jb,Pb]=Ib(Rb,Tb,db,q_,F_,D_),[zb,Db]=Ib(Ab,Eb,W_,U_,L_,P_);function Vb(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Lb(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Bb(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}function Fb(t){var e=t.dateTime,n=t.date,i=t.time,r=t.periods,o=t.days,a=t.shortDays,u=t.months,c=t.shortMonths,s=Zb(r),l=tm(r),d=Zb(o),f=tm(o),h=Zb(a),v=tm(a),p=Zb(u),g=tm(u),y=Zb(c),_=tm(c),b={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:wm,e:wm,f:km,g:Dm,G:Lm,H:xm,I:Sm,j:Mm,L:Em,m:Tm,M:Nm,p:function(t){return r[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:cw,s:sw,S:Am,u:Om,U:Rm,V:Im,w:jm,W:Pm,x:null,X:null,y:zm,Y:Vm,Z:Bm,"%":uw},m={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:Fm,e:Fm,f:Qm,g:iw,G:ow,H:Gm,I:Um,j:Km,L:Hm,m:qm,M:$m,p:function(t){return r[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:cw,s:sw,S:Ym,u:Wm,U:Xm,V:Zm,w:tw,W:ew,x:null,X:null,y:nw,Y:rw,Z:aw,"%":uw},w={a:function(t,e,n){var i=h.exec(e.slice(n));return i?(t.w=v.get(i[0].toLowerCase()),n+i[0].length):-1},A:function(t,e,n){var i=d.exec(e.slice(n));return i?(t.w=f.get(i[0].toLowerCase()),n+i[0].length):-1},b:function(t,e,n){var i=y.exec(e.slice(n));return i?(t.m=_.get(i[0].toLowerCase()),n+i[0].length):-1},B:function(t,e,n){var i=p.exec(e.slice(n));return i?(t.m=g.get(i[0].toLowerCase()),n+i[0].length):-1},c:function(t,n,i){return M(t,e,n,i)},d:dm,e:dm,f:ym,g:um,G:am,H:hm,I:hm,j:fm,L:gm,m:lm,M:vm,p:function(t,e,n){var i=s.exec(e.slice(n));return i?(t.p=l.get(i[0].toLowerCase()),n+i[0].length):-1},q:sm,Q:bm,s:mm,S:pm,u:nm,U:im,V:rm,w:em,W:om,x:function(t,e,i){return M(t,n,e,i)},X:function(t,e,n){return M(t,i,e,n)},y:um,Y:am,Z:cm,"%":_m};function x(t,e){return function(n){var i,r,o,a=[],u=-1,c=0,s=t.length;for(n instanceof Date||(n=new Date(+n));++u<s;)37===t.charCodeAt(u)&&(a.push(t.slice(c,u)),null!=(r=qb[i=t.charAt(++u)])?i=t.charAt(++u):r="e"===i?" ":"0",(o=e[i])&&(i=o(n,r)),a.push(i),c=u+1);return a.push(t.slice(c,u)),a.join("")}}function S(t,e){return function(n){var i,r,o=Bb(1900,void 0,1);if(M(o,t,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(e&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(r=(i=Lb(Bb(o.y,0,1))).getUTCDay(),i=r>4||0===r?fb.ceil(i):fb(i),i=H_.offset(i,7*(o.V-1)),o.y=i.getUTCFullYear(),o.m=i.getUTCMonth(),o.d=i.getUTCDate()+(o.w+6)%7):(r=(i=Vb(Bb(o.y,0,1))).getDay(),i=r>4||0===r?X_.ceil(i):X_(i),i=U_.offset(i,7*(o.V-1)),o.y=i.getFullYear(),o.m=i.getMonth(),o.d=i.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),r="Z"in o?Lb(Bb(o.y,0,1)).getUTCDay():Vb(Bb(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(r+5)%7:o.w+7*o.U-(r+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Lb(o)):Vb(o)}}function M(t,e,n,i){for(var r,o,a=0,u=e.length,c=n.length;a<u;){if(i>=c)return-1;if(37===(r=e.charCodeAt(a++))){if(r=e.charAt(a++),!(o=w[r in qb?e.charAt(a++):r])||(i=o(t,n,i))<0)return-1}else if(r!=n.charCodeAt(i++))return-1}return i}return b.x=x(n,b),b.X=x(i,b),b.c=x(e,b),m.x=x(n,m),m.X=x(i,m),m.c=x(e,m),{format:function(t){var e=x(t+="",b);return e.toString=function(){return t},e},parse:function(t){var e=S(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=x(t+="",m);return e.toString=function(){return t},e},utcParse:function(t){var e=S(t+="",!0);return e.toString=function(){return t},e}}}var Gb,Ub,Kb,Hb,Qb,qb={"-":"",_:" ",0:"0"},$b=/^\s*\d+/,Yb=/^%/,Wb=/[\\^$*+?|[\]().{}]/g;function Xb(t,e,n){var i=t<0?"-":"",r=(i?-t:t)+"",o=r.length;return i+(o<n?new Array(n-o+1).join(e)+r:r)}function Jb(t){return t.replace(Wb,"\\$&")}function Zb(t){return new RegExp("^(?:"+t.map(Jb).join("|")+")","i")}function tm(t){return new Map(t.map(((t,e)=>[t.toLowerCase(),e])))}function em(t,e,n){var i=$b.exec(e.slice(n,n+1));return i?(t.w=+i[0],n+i[0].length):-1}function nm(t,e,n){var i=$b.exec(e.slice(n,n+1));return i?(t.u=+i[0],n+i[0].length):-1}function im(t,e,n){var i=$b.exec(e.slice(n,n+2));return i?(t.U=+i[0],n+i[0].length):-1}function rm(t,e,n){var i=$b.exec(e.slice(n,n+2));return i?(t.V=+i[0],n+i[0].length):-1}function om(t,e,n){var i=$b.exec(e.slice(n,n+2));return i?(t.W=+i[0],n+i[0].length):-1}function am(t,e,n){var i=$b.exec(e.slice(n,n+4));return i?(t.y=+i[0],n+i[0].length):-1}function um(t,e,n){var i=$b.exec(e.slice(n,n+2));return i?(t.y=+i[0]+(+i[0]>68?1900:2e3),n+i[0].length):-1}function cm(t,e,n){var i=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return i?(t.Z=i[1]?0:-(i[2]+(i[3]||"00")),n+i[0].length):-1}function sm(t,e,n){var i=$b.exec(e.slice(n,n+1));return i?(t.q=3*i[0]-3,n+i[0].length):-1}function lm(t,e,n){var i=$b.exec(e.slice(n,n+2));return i?(t.m=i[0]-1,n+i[0].length):-1}function dm(t,e,n){var i=$b.exec(e.slice(n,n+2));return i?(t.d=+i[0],n+i[0].length):-1}function fm(t,e,n){var i=$b.exec(e.slice(n,n+3));return i?(t.m=0,t.d=+i[0],n+i[0].length):-1}function hm(t,e,n){var i=$b.exec(e.slice(n,n+2));return i?(t.H=+i[0],n+i[0].length):-1}function vm(t,e,n){var i=$b.exec(e.slice(n,n+2));return i?(t.M=+i[0],n+i[0].length):-1}function pm(t,e,n){var i=$b.exec(e.slice(n,n+2));return i?(t.S=+i[0],n+i[0].length):-1}function gm(t,e,n){var i=$b.exec(e.slice(n,n+3));return i?(t.L=+i[0],n+i[0].length):-1}function ym(t,e,n){var i=$b.exec(e.slice(n,n+6));return i?(t.L=Math.floor(i[0]/1e3),n+i[0].length):-1}function _m(t,e,n){var i=Yb.exec(e.slice(n,n+1));return i?n+i[0].length:-1}function bm(t,e,n){var i=$b.exec(e.slice(n));return i?(t.Q=+i[0],n+i[0].length):-1}function mm(t,e,n){var i=$b.exec(e.slice(n));return i?(t.s=+i[0],n+i[0].length):-1}function wm(t,e){return Xb(t.getDate(),e,2)}function xm(t,e){return Xb(t.getHours(),e,2)}function Sm(t,e){return Xb(t.getHours()%12||12,e,2)}function Mm(t,e){return Xb(1+U_.count(Ab(t),t),e,3)}function Em(t,e){return Xb(t.getMilliseconds(),e,3)}function km(t,e){return Em(t,e)+"000"}function Tm(t,e){return Xb(t.getMonth()+1,e,2)}function Nm(t,e){return Xb(t.getMinutes(),e,2)}function Am(t,e){return Xb(t.getSeconds(),e,2)}function Om(t){var e=t.getDay();return 0===e?7:e}function Rm(t,e){return Xb(W_.count(Ab(t)-1,t),e,2)}function Cm(t){var e=t.getDay();return e>=4||0===e?tb(t):tb.ceil(t)}function Im(t,e){return t=Cm(t),Xb(tb.count(Ab(t),t)+(4===Ab(t).getDay()),e,2)}function jm(t){return t.getDay()}function Pm(t,e){return Xb(X_.count(Ab(t)-1,t),e,2)}function zm(t,e){return Xb(t.getFullYear()%100,e,2)}function Dm(t,e){return Xb((t=Cm(t)).getFullYear()%100,e,2)}function Vm(t,e){return Xb(t.getFullYear()%1e4,e,4)}function Lm(t,e){var n=t.getDay();return Xb((t=n>=4||0===n?tb(t):tb.ceil(t)).getFullYear()%1e4,e,4)}function Bm(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Xb(e/60|0,"0",2)+Xb(e%60,"0",2)}function Fm(t,e){return Xb(t.getUTCDate(),e,2)}function Gm(t,e){return Xb(t.getUTCHours(),e,2)}function Um(t,e){return Xb(t.getUTCHours()%12||12,e,2)}function Km(t,e){return Xb(1+H_.count(Rb(t),t),e,3)}function Hm(t,e){return Xb(t.getUTCMilliseconds(),e,3)}function Qm(t,e){return Hm(t,e)+"000"}function qm(t,e){return Xb(t.getUTCMonth()+1,e,2)}function $m(t,e){return Xb(t.getUTCMinutes(),e,2)}function Ym(t,e){return Xb(t.getUTCSeconds(),e,2)}function Wm(t){var e=t.getUTCDay();return 0===e?7:e}function Xm(t,e){return Xb(db.count(Rb(t)-1,t),e,2)}function Jm(t){var e=t.getUTCDay();return e>=4||0===e?pb(t):pb.ceil(t)}function Zm(t,e){return t=Jm(t),Xb(pb.count(Rb(t),t)+(4===Rb(t).getUTCDay()),e,2)}function tw(t){return t.getUTCDay()}function ew(t,e){return Xb(fb.count(Rb(t)-1,t),e,2)}function nw(t,e){return Xb(t.getUTCFullYear()%100,e,2)}function iw(t,e){return Xb((t=Jm(t)).getUTCFullYear()%100,e,2)}function rw(t,e){return Xb(t.getUTCFullYear()%1e4,e,4)}function ow(t,e){var n=t.getUTCDay();return Xb((t=n>=4||0===n?pb(t):pb.ceil(t)).getUTCFullYear()%1e4,e,4)}function aw(){return"+0000"}function uw(){return"%"}function cw(t){return+t}function sw(t){return Math.floor(+t/1e3)}function lw(t){return Gb=Fb(t),Ub=Gb.format,Kb=Gb.parse,Hb=Gb.utcFormat,Qb=Gb.utcParse,Gb}function dw(t){return new Date(t)}function fw(t){return t instanceof Date?+t:+new Date(+t)}function hw(t,e,n,i,r,o,a,u,c,s){var l=qy(),d=l.invert,f=l.domain,h=s(".%L"),v=s(":%S"),p=s("%I:%M"),g=s("%I %p"),y=s("%a %d"),_=s("%b %d"),b=s("%B"),m=s("%Y");function w(t){return(c(t)<t?h:u(t)<t?v:a(t)<t?p:o(t)<t?g:i(t)<t?r(t)<t?y:_:n(t)<t?b:m)(t)}return l.invert=function(t){return new Date(d(t))},l.domain=function(t){return arguments.length?f(Array.from(t,fw)):f().map(dw)},l.ticks=function(e){var n=f();return t(n[0],n[n.length-1],null==e?10:e)},l.tickFormat=function(t,e){return null==e?w:s(e)},l.nice=function(t){var n=f();return t&&"function"==typeof t.range||(t=e(n[0],n[n.length-1],null==t?10:t)),t?f(Jy(n,t)):l},l.copy=function(){return Hy(l,hw(t,e,n,i,r,o,a,u,c,s))},l}function vw(){return Cy.apply(hw(zb,Db,Ab,Eb,W_,U_,L_,P_,I_,Ub).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}function pw(){return Cy.apply(hw(jb,Pb,Rb,Tb,db,H_,F_,D_,I_,Hb).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)}function gw(){var t,e,n,i,r,o=0,a=1,u=Fy,c=!1;function s(e){return null==e||isNaN(e=+e)?r:u(0===n?.5:(e=(i(e)-t)*n,c?Math.max(0,Math.min(1,e)):e))}function l(t){return function(e){var n,i;return arguments.length?([n,i]=e,u=t(n,i),s):[u(0),u(1)]}}return s.domain=function(r){return arguments.length?([o,a]=r,t=i(o=+o),e=i(a=+a),n=t===e?0:1/(e-t),s):[o,a]},s.clamp=function(t){return arguments.length?(c=!!t,s):c},s.interpolator=function(t){return arguments.length?(u=t,s):u},s.range=l(Xi),s.rangeRound=l(Fg),s.unknown=function(t){return arguments.length?(r=t,s):r},function(r){return i=r,t=r(o),e=r(a),n=t===e?0:1/(e-t),s}}function yw(t,e){return e.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function _w(){var t=Yy(gw()(Fy));return t.copy=function(){return yw(t,_w())},Iy.apply(t,arguments)}function bw(){var t=o_(gw()).domain([1,10]);return t.copy=function(){return yw(t,bw()).base(t.base())},Iy.apply(t,arguments)}function mw(){var t=s_(gw());return t.copy=function(){return yw(t,mw()).constant(t.constant())},Iy.apply(t,arguments)}function ww(){var t=v_(gw());return t.copy=function(){return yw(t,ww()).exponent(t.exponent())},Iy.apply(t,arguments)}function xw(){return ww.apply(null,arguments).exponent(.5)}function Sw(){var t=[],e=Fy;function n(n){if(null!=n&&!isNaN(n=+n))return e((f(t,n,1)-1)/(t.length-1))}return n.domain=function(e){if(!arguments.length)return t.slice();t=[];for(let n of e)null==n||isNaN(n=+n)||t.push(n);return t.sort(i),n},n.interpolator=function(t){return arguments.length?(e=t,n):e},n.range=function(){return t.map(((n,i)=>e(i/(t.length-1))))},n.quantiles=function(e){return Array.from({length:e+1},((n,i)=>wt(t,i/e)))},n.copy=function(){return Sw(e).domain(t)},Iy.apply(n,arguments)}function Mw(){var t,e,n,i,r,o,a,u=0,c=.5,s=1,l=1,d=Fy,f=!1;function h(t){return isNaN(t=+t)?a:(t=.5+((t=+o(t))-e)*(l*t<l*e?i:r),d(f?Math.max(0,Math.min(1,t)):t))}function v(t){return function(e){var n,i,r;return arguments.length?([n,i,r]=e,d=ty(t,[n,i,r]),h):[d(0),d(.5),d(1)]}}return h.domain=function(a){return arguments.length?([u,c,s]=a,t=o(u=+u),e=o(c=+c),n=o(s=+s),i=t===e?0:.5/(e-t),r=e===n?0:.5/(n-e),l=e<t?-1:1,h):[u,c,s]},h.clamp=function(t){return arguments.length?(f=!!t,h):f},h.interpolator=function(t){return arguments.length?(d=t,h):d},h.range=v(Xi),h.rangeRound=v(Fg),h.unknown=function(t){return arguments.length?(a=t,h):a},function(a){return o=a,t=a(u),e=a(c),n=a(s),i=t===e?0:.5/(e-t),r=e===n?0:.5/(n-e),l=e<t?-1:1,h}}function Ew(){var t=Yy(Mw()(Fy));return t.copy=function(){return yw(t,Ew())},Iy.apply(t,arguments)}function kw(){var t=o_(Mw()).domain([.1,1,10]);return t.copy=function(){return yw(t,kw()).base(t.base())},Iy.apply(t,arguments)}function Tw(){var t=s_(Mw());return t.copy=function(){return yw(t,Tw()).constant(t.constant())},Iy.apply(t,arguments)}function Nw(){var t=v_(Mw());return t.copy=function(){return yw(t,Nw()).exponent(t.exponent())},Iy.apply(t,arguments)}function Aw(){return Nw.apply(null,arguments).exponent(.5)}function Ow(t){for(var e=t.length/6|0,n=new Array(e),i=0;i<e;)n[i]="#"+t.slice(6*i,6*++i);return n}lw({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});const Rw=Ow("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Cw=Ow("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Iw=Ow("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),jw=Ow("4269d0efb118ff725c6cc5b03ca951ff8ab7a463f297bbf59c6b4e9498a0"),Pw=Ow("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),zw=Ow("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Dw=Ow("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Vw=Ow("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Lw=Ow("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Bw=Ow("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),Fw=Ow("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),Gw=t=>Li(t[t.length-1]);var Uw=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Ow);const Kw=Gw(Uw);var Hw=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Ow);const Qw=Gw(Hw);var qw=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Ow);const $w=Gw(qw);var Yw=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Ow);const Ww=Gw(Yw);var Xw=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Ow);const Jw=Gw(Xw);var Zw=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Ow);const tx=Gw(Zw);var ex=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Ow);const nx=Gw(ex);var ix=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Ow);const rx=Gw(ix);var ox=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Ow);const ax=Gw(ox);var ux=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Ow);const cx=Gw(ux);var sx=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Ow);const lx=Gw(sx);var dx=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Ow);const fx=Gw(dx);var hx=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Ow);const vx=Gw(hx);var px=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Ow);const gx=Gw(px);var yx=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Ow);const _x=Gw(yx);var bx=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Ow);const mx=Gw(bx);var wx=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Ow);const xx=Gw(wx);var Sx=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Ow);const Mx=Gw(Sx);var Ex=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Ow);const kx=Gw(Ex);var Tx=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Ow);const Nx=Gw(Tx);var Ax=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Ow);const Ox=Gw(Ax);var Rx=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Ow);const Cx=Gw(Rx);var Ix=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Ow);const jx=Gw(Ix);var Px=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Ow);const zx=Gw(Px);var Dx=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Ow);const Vx=Gw(Dx);var Lx=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Ow);const Bx=Gw(Lx);var Fx=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Ow);const Gx=Gw(Fx);function Ux(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-t*(35.34-t*(2381.73-t*(6402.7-t*(7024.72-2710.57*t)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+t*(170.73+t*(52.82-t*(131.46-t*(176.58-67.37*t)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+t*(442.36-t*(2482.43-t*(6167.24-t*(6614.94-2475.67*t)))))))+")"}const Kx=Zg(nu(300,.5,0),nu(-240,.5,1));var Hx=Zg(nu(-100,.75,.35),nu(80,1.5,.8)),Qx=Zg(nu(260,.75,.35),nu(80,1.5,.8)),qx=nu();function $x(t){(t<0||t>1)&&(t-=Math.floor(t));var e=Math.abs(t-.5);return qx.h=360*t-100,qx.s=1.5-1.5*e,qx.l=.8-.9*e,qx+""}var Yx=gi(),Wx=Math.PI/3,Xx=2*Math.PI/3;function Jx(t){var e;return t=(.5-t)*Math.PI,Yx.r=255*(e=Math.sin(t))*e,Yx.g=255*(e=Math.sin(t+Wx))*e,Yx.b=255*(e=Math.sin(t+Xx))*e,Yx+""}function Zx(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+t*(1172.33-t*(10793.56-t*(33300.12-t*(38394.49-14825.05*t)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+t*(557.33+t*(1225.33-t*(3574.96-t*(1073.77+707.56*t)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+t*(3211.1-t*(15327.97-t*(27814-t*(22569.18-6838.66*t)))))))+")"}function tS(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}const eS=tS(Ow("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));var nS=tS(Ow("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),iS=tS(Ow("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),rS=tS(Ow("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function oS(t){return Fn(Tn(t).call(document.documentElement))}var aS=0;function uS(){return new cS}function cS(){this._="@"+(++aS).toString(36)}function sS(t,e){return t.target&&(t=Ji(t),void 0===e&&(e=t.currentTarget),t=t.touches||[t]),Array.from(t,(t=>Zi(t,e)))}function lS(t){return"string"==typeof t?new Vn([document.querySelectorAll(t)],[document.documentElement]):new Vn([Ae(t)],Dn)}function dS(t){return function(){return t}}cS.prototype=uS.prototype={constructor:cS,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};const fS=Math.abs,hS=Math.atan2,vS=Math.cos,pS=Math.max,gS=Math.min,yS=Math.sin,_S=Math.sqrt,bS=1e-12,mS=Math.PI,wS=mS/2,xS=2*mS;function SS(t){return t>=1?wS:t<=-1?-wS:Math.asin(t)}function MS(t){let e=3;return t.digits=function(n){if(!arguments.length)return e;if(null==n)e=null;else{const t=Math.floor(n);if(!(t>=0))throw new RangeError(`invalid digits: ${n}`);e=t}return t},()=>new da(e)}function ES(t){return t.innerRadius}function kS(t){return t.outerRadius}function TS(t){return t.startAngle}function NS(t){return t.endAngle}function AS(t){return t&&t.padAngle}function OS(t,e,n,i,r,o,a){var u=t-n,c=e-i,s=(a?o:-o)/_S(u*u+c*c),l=s*c,d=-s*u,f=t+l,h=e+d,v=n+l,p=i+d,g=(f+v)/2,y=(h+p)/2,_=v-f,b=p-h,m=_*_+b*b,w=r-o,x=f*p-v*h,S=(b<0?-1:1)*_S(pS(0,w*w*m-x*x)),M=(x*b-_*S)/m,E=(-x*_-b*S)/m,k=(x*b+_*S)/m,T=(-x*_+b*S)/m,N=M-g,A=E-y,O=k-g,R=T-y;return N*N+A*A>O*O+R*R&&(M=k,E=T),{cx:M,cy:E,x01:-l,y01:-d,x11:M*(r/w-1),y11:E*(r/w-1)}}function RS(){var t=ES,e=kS,n=dS(0),i=null,r=TS,o=NS,a=AS,u=null,c=MS(s);function s(){var s,l,d,f=+t.apply(this,arguments),h=+e.apply(this,arguments),v=r.apply(this,arguments)-wS,p=o.apply(this,arguments)-wS,g=fS(p-v),y=p>v;if(u||(u=s=c()),h<f&&(l=h,h=f,f=l),h>bS)if(g>xS-bS)u.moveTo(h*vS(v),h*yS(v)),u.arc(0,0,h,v,p,!y),f>bS&&(u.moveTo(f*vS(p),f*yS(p)),u.arc(0,0,f,p,v,y));else{var _,b,m=v,w=p,x=v,S=p,M=g,E=g,k=a.apply(this,arguments)/2,T=k>bS&&(i?+i.apply(this,arguments):_S(f*f+h*h)),N=gS(fS(h-f)/2,+n.apply(this,arguments)),A=N,O=N;if(T>bS){var R=SS(T/f*yS(k)),C=SS(T/h*yS(k));(M-=2*R)>bS?(x+=R*=y?1:-1,S-=R):(M=0,x=S=(v+p)/2),(E-=2*C)>bS?(m+=C*=y?1:-1,w-=C):(E=0,m=w=(v+p)/2)}var I=h*vS(m),j=h*yS(m),P=f*vS(S),z=f*yS(S);if(N>bS){var D,V=h*vS(w),L=h*yS(w),B=f*vS(x),F=f*yS(x);if(g<mS)if(D=function(t,e,n,i,r,o,a,u){var c=n-t,s=i-e,l=a-r,d=u-o,f=d*c-l*s;if(!(f*f<bS))return[t+(f=(l*(e-o)-d*(t-r))/f)*c,e+f*s]}(I,j,B,F,V,L,P,z)){var G=I-D[0],U=j-D[1],K=V-D[0],H=L-D[1],Q=1/yS(((d=(G*K+U*H)/(_S(G*G+U*U)*_S(K*K+H*H)))>1?0:d<-1?mS:Math.acos(d))/2),q=_S(D[0]*D[0]+D[1]*D[1]);A=gS(N,(f-q)/(Q-1)),O=gS(N,(h-q)/(Q+1))}else A=O=0}E>bS?O>bS?(_=OS(B,F,I,j,h,O,y),b=OS(V,L,P,z,h,O,y),u.moveTo(_.cx+_.x01,_.cy+_.y01),O<N?u.arc(_.cx,_.cy,O,hS(_.y01,_.x01),hS(b.y01,b.x01),!y):(u.arc(_.cx,_.cy,O,hS(_.y01,_.x01),hS(_.y11,_.x11),!y),u.arc(0,0,h,hS(_.cy+_.y11,_.cx+_.x11),hS(b.cy+b.y11,b.cx+b.x11),!y),u.arc(b.cx,b.cy,O,hS(b.y11,b.x11),hS(b.y01,b.x01),!y))):(u.moveTo(I,j),u.arc(0,0,h,m,w,!y)):u.moveTo(I,j),f>bS&&M>bS?A>bS?(_=OS(P,z,V,L,f,-A,y),b=OS(I,j,B,F,f,-A,y),u.lineTo(_.cx+_.x01,_.cy+_.y01),A<N?u.arc(_.cx,_.cy,A,hS(_.y01,_.x01),hS(b.y01,b.x01),!y):(u.arc(_.cx,_.cy,A,hS(_.y01,_.x01),hS(_.y11,_.x11),!y),u.arc(0,0,f,hS(_.cy+_.y11,_.cx+_.x11),hS(b.cy+b.y11,b.cx+b.x11),y),u.arc(b.cx,b.cy,A,hS(b.y11,b.x11),hS(b.y01,b.x01),!y))):u.arc(0,0,f,S,x,y):u.lineTo(P,z)}else u.moveTo(0,0);if(u.closePath(),s)return u=null,s+""||null}return s.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,i=(+r.apply(this,arguments)+ +o.apply(this,arguments))/2-mS/2;return[vS(i)*n,yS(i)*n]},s.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:dS(+e),s):t},s.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:dS(+t),s):e},s.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:dS(+t),s):n},s.padRadius=function(t){return arguments.length?(i=null==t?null:"function"==typeof t?t:dS(+t),s):i},s.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:dS(+t),s):r},s.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:dS(+t),s):o},s.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:dS(+t),s):a},s.context=function(t){return arguments.length?(u=null==t?null:t,s):u},s}var CS=Array.prototype.slice;function IS(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function jS(t){this._context=t}function PS(t){return new jS(t)}function zS(t){return t[0]}function DS(t){return t[1]}function VS(t,e){var n=dS(!0),i=null,r=PS,o=null,a=MS(u);function u(u){var c,s,l,d=(u=IS(u)).length,f=!1;for(null==i&&(o=r(l=a())),c=0;c<=d;++c)!(c<d&&n(s=u[c],c,u))===f&&((f=!f)?o.lineStart():o.lineEnd()),f&&o.point(+t(s,c,u),+e(s,c,u));if(l)return o=null,l+""||null}return t="function"==typeof t?t:void 0===t?zS:dS(t),e="function"==typeof e?e:void 0===e?DS:dS(e),u.x=function(e){return arguments.length?(t="function"==typeof e?e:dS(+e),u):t},u.y=function(t){return arguments.length?(e="function"==typeof t?t:dS(+t),u):e},u.defined=function(t){return arguments.length?(n="function"==typeof t?t:dS(!!t),u):n},u.curve=function(t){return arguments.length?(r=t,null!=i&&(o=r(i)),u):r},u.context=function(t){return arguments.length?(null==t?i=o=null:o=r(i=t),u):i},u}function LS(t,e,n){var i=null,r=dS(!0),o=null,a=PS,u=null,c=MS(s);function s(s){var l,d,f,h,v,p=(s=IS(s)).length,g=!1,y=new Array(p),_=new Array(p);for(null==o&&(u=a(v=c())),l=0;l<=p;++l){if(!(l<p&&r(h=s[l],l,s))===g)if(g=!g)d=l,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),f=l-1;f>=d;--f)u.point(y[f],_[f]);u.lineEnd(),u.areaEnd()}g&&(y[l]=+t(h,l,s),_[l]=+e(h,l,s),u.point(i?+i(h,l,s):y[l],n?+n(h,l,s):_[l]))}if(v)return u=null,v+""||null}function l(){return VS().defined(r).curve(a).context(o)}return t="function"==typeof t?t:void 0===t?zS:dS(+t),e="function"==typeof e?e:dS(void 0===e?0:+e),n="function"==typeof n?n:void 0===n?DS:dS(+n),s.x=function(e){return arguments.length?(t="function"==typeof e?e:dS(+e),i=null,s):t},s.x0=function(e){return arguments.length?(t="function"==typeof e?e:dS(+e),s):t},s.x1=function(t){return arguments.length?(i=null==t?null:"function"==typeof t?t:dS(+t),s):i},s.y=function(t){return arguments.length?(e="function"==typeof t?t:dS(+t),n=null,s):e},s.y0=function(t){return arguments.length?(e="function"==typeof t?t:dS(+t),s):e},s.y1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:dS(+t),s):n},s.lineX0=s.lineY0=function(){return l().x(t).y(e)},s.lineY1=function(){return l().x(t).y(n)},s.lineX1=function(){return l().x(i).y(e)},s.defined=function(t){return arguments.length?(r="function"==typeof t?t:dS(!!t),s):r},s.curve=function(t){return arguments.length?(a=t,null!=o&&(u=a(o)),s):a},s.context=function(t){return arguments.length?(null==t?o=u=null:u=a(o=t),s):o},s}function BS(t,e){return e<t?-1:e>t?1:e>=t?0:NaN}function FS(t){return t}function GS(){var t=FS,e=BS,n=null,i=dS(0),r=dS(xS),o=dS(0);function a(a){var u,c,s,l,d,f=(a=IS(a)).length,h=0,v=new Array(f),p=new Array(f),g=+i.apply(this,arguments),y=Math.min(xS,Math.max(-xS,r.apply(this,arguments)-g)),_=Math.min(Math.abs(y)/f,o.apply(this,arguments)),b=_*(y<0?-1:1);for(u=0;u<f;++u)(d=p[v[u]=u]=+t(a[u],u,a))>0&&(h+=d);for(null!=e?v.sort((function(t,n){return e(p[t],p[n])})):null!=n&&v.sort((function(t,e){return n(a[t],a[e])})),u=0,s=h?(y-f*b)/h:0;u<f;++u,g=l)c=v[u],l=g+((d=p[c])>0?d*s:0)+b,p[c]={data:a[c],index:u,value:d,startAngle:g,endAngle:l,padAngle:_};return p}return a.value=function(e){return arguments.length?(t="function"==typeof e?e:dS(+e),a):t},a.sortValues=function(t){return arguments.length?(e=t,n=null,a):e},a.sort=function(t){return arguments.length?(n=t,e=null,a):n},a.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:dS(+t),a):i},a.endAngle=function(t){return arguments.length?(r="function"==typeof t?t:dS(+t),a):r},a.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:dS(+t),a):o},a}jS.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var US=HS(PS);function KS(t){this._curve=t}function HS(t){function e(e){return new KS(t(e))}return e._curve=t,e}function QS(t){var e=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?e(HS(t)):e()._curve},t}function qS(){return QS(VS().curve(US))}function $S(){var t=LS().curve(US),e=t.curve,n=t.lineX0,i=t.lineX1,r=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return QS(n())},delete t.lineX0,t.lineEndAngle=function(){return QS(i())},delete t.lineX1,t.lineInnerRadius=function(){return QS(r())},delete t.lineY0,t.lineOuterRadius=function(){return QS(o())},delete t.lineY1,t.curve=function(t){return arguments.length?e(HS(t)):e()._curve},t}function YS(t,e){return[(e=+e)*Math.cos(t-=Math.PI/2),e*Math.sin(t)]}KS.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};class WS{constructor(t,e){this._context=t,this._x=e}areaStart(){this._line=0}areaEnd(){this._line=NaN}lineStart(){this._point=0}lineEnd(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line}point(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._x?this._context.bezierCurveTo(this._x0=(this._x0+t)/2,this._y0,this._x0,e,t,e):this._context.bezierCurveTo(this._x0,this._y0=(this._y0+e)/2,t,this._y0,t,e)}this._x0=t,this._y0=e}}class XS{constructor(t){this._context=t}lineStart(){this._point=0}lineEnd(){}point(t,e){if(t=+t,e=+e,0===this._point)this._point=1;else{const n=YS(this._x0,this._y0),i=YS(this._x0,this._y0=(this._y0+e)/2),r=YS(t,this._y0),o=YS(t,e);this._context.moveTo(...n),this._context.bezierCurveTo(...i,...r,...o)}this._x0=t,this._y0=e}}function JS(t){return new WS(t,!0)}function ZS(t){return new WS(t,!1)}function tM(t){return new XS(t)}function eM(t){return t.source}function nM(t){return t.target}function iM(t){let e=eM,n=nM,i=zS,r=DS,o=null,a=null,u=MS(c);function c(){let c;const s=CS.call(arguments),l=e.apply(this,s),d=n.apply(this,s);if(null==o&&(a=t(c=u())),a.lineStart(),s[0]=l,a.point(+i.apply(this,s),+r.apply(this,s)),s[0]=d,a.point(+i.apply(this,s),+r.apply(this,s)),a.lineEnd(),c)return a=null,c+""||null}return c.source=function(t){return arguments.length?(e=t,c):e},c.target=function(t){return arguments.length?(n=t,c):n},c.x=function(t){return arguments.length?(i="function"==typeof t?t:dS(+t),c):i},c.y=function(t){return arguments.length?(r="function"==typeof t?t:dS(+t),c):r},c.context=function(e){return arguments.length?(null==e?o=a=null:a=t(o=e),c):o},c}function rM(){return iM(JS)}function oM(){return iM(ZS)}function aM(){const t=iM(tM);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}const uM=_S(3),cM={draw(t,e){const n=.59436*_S(e+gS(e/28,.75)),i=n/2,r=i*uM;t.moveTo(0,n),t.lineTo(0,-n),t.moveTo(-r,-i),t.lineTo(r,i),t.moveTo(-r,i),t.lineTo(r,-i)}},sM={draw(t,e){const n=_S(e/mS);t.moveTo(n,0),t.arc(0,0,n,0,xS)}},lM={draw(t,e){const n=_S(e/5)/2;t.moveTo(-3*n,-n),t.lineTo(-n,-n),t.lineTo(-n,-3*n),t.lineTo(n,-3*n),t.lineTo(n,-n),t.lineTo(3*n,-n),t.lineTo(3*n,n),t.lineTo(n,n),t.lineTo(n,3*n),t.lineTo(-n,3*n),t.lineTo(-n,n),t.lineTo(-3*n,n),t.closePath()}},dM=_S(1/3),fM=2*dM,hM={draw(t,e){const n=_S(e/fM),i=n*dM;t.moveTo(0,-n),t.lineTo(i,0),t.lineTo(0,n),t.lineTo(-i,0),t.closePath()}},vM={draw(t,e){const n=.62625*_S(e);t.moveTo(0,-n),t.lineTo(n,0),t.lineTo(0,n),t.lineTo(-n,0),t.closePath()}},pM={draw(t,e){const n=.87559*_S(e-gS(e/7,2));t.moveTo(-n,0),t.lineTo(n,0),t.moveTo(0,n),t.lineTo(0,-n)}},gM={draw(t,e){const n=_S(e),i=-n/2;t.rect(i,i,n,n)}},yM={draw(t,e){const n=.4431*_S(e);t.moveTo(n,n),t.lineTo(n,-n),t.lineTo(-n,-n),t.lineTo(-n,n),t.closePath()}},_M=yS(mS/10)/yS(7*mS/10),bM=yS(xS/10)*_M,mM=-vS(xS/10)*_M,wM={draw(t,e){const n=_S(.8908130915292852*e),i=bM*n,r=mM*n;t.moveTo(0,-n),t.lineTo(i,r);for(let e=1;e<5;++e){const o=xS*e/5,a=vS(o),u=yS(o);t.lineTo(u*n,-a*n),t.lineTo(a*i-u*r,u*i+a*r)}t.closePath()}},xM=_S(3),SM={draw(t,e){const n=-_S(e/(3*xM));t.moveTo(0,2*n),t.lineTo(-xM*n,-n),t.lineTo(xM*n,-n),t.closePath()}},MM=_S(3),EM={draw(t,e){const n=.6824*_S(e),i=n/2,r=n*MM/2;t.moveTo(0,-n),t.lineTo(r,i),t.lineTo(-r,i),t.closePath()}},kM=-.5,TM=_S(3)/2,NM=1/_S(12),AM=3*(NM/2+1),OM={draw(t,e){const n=_S(e/AM),i=n/2,r=n*NM,o=i,a=n*NM+n,u=-o,c=a;t.moveTo(i,r),t.lineTo(o,a),t.lineTo(u,c),t.lineTo(kM*i-TM*r,TM*i+kM*r),t.lineTo(kM*o-TM*a,TM*o+kM*a),t.lineTo(kM*u-TM*c,TM*u+kM*c),t.lineTo(kM*i+TM*r,kM*r-TM*i),t.lineTo(kM*o+TM*a,kM*a-TM*o),t.lineTo(kM*u+TM*c,kM*c-TM*u),t.closePath()}},RM={draw(t,e){const n=.6189*_S(e-gS(e/6,1.7));t.moveTo(-n,-n),t.lineTo(n,n),t.moveTo(-n,n),t.lineTo(n,-n)}},CM=[sM,lM,hM,gM,wM,SM,OM],IM=[sM,pM,RM,EM,cM,yM,vM];function jM(t,e){let n=null,i=MS(r);function r(){let r;if(n||(n=r=i()),t.apply(this,arguments).draw(n,+e.apply(this,arguments)),r)return n=null,r+""||null}return t="function"==typeof t?t:dS(t||sM),e="function"==typeof e?e:dS(void 0===e?64:+e),r.type=function(e){return arguments.length?(t="function"==typeof e?e:dS(e),r):t},r.size=function(t){return arguments.length?(e="function"==typeof t?t:dS(+t),r):e},r.context=function(t){return arguments.length?(n=null==t?null:t,r):n},r}function PM(){}function zM(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function DM(t){this._context=t}function VM(t){return new DM(t)}function LM(t){this._context=t}function BM(t){return new LM(t)}function FM(t){this._context=t}function GM(t){return new FM(t)}function UM(t,e){this._basis=new DM(t),this._beta=e}DM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:zM(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:zM(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}},LM.prototype={areaStart:PM,areaEnd:PM,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:zM(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}},FM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,i=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,i):this._context.moveTo(n,i);break;case 3:this._point=4;default:zM(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}},UM.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var i,r=t[0],o=e[0],a=t[n]-r,u=e[n]-o,c=-1;++c<=n;)i=c/n,this._basis.point(this._beta*t[c]+(1-this._beta)*(r+i*a),this._beta*e[c]+(1-this._beta)*(o+i*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};const KM=function t(e){function n(t){return 1===e?new DM(t):new UM(t,e)}return n.beta=function(e){return t(+e)},n}(.85);function HM(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function QM(t,e){this._context=t,this._k=(1-e)/6}QM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:HM(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:HM(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};const qM=function t(e){function n(t){return new QM(t,e)}return n.tension=function(e){return t(+e)},n}(0);function $M(t,e){this._context=t,this._k=(1-e)/6}$M.prototype={areaStart:PM,areaEnd:PM,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:HM(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};const YM=function t(e){function n(t){return new $M(t,e)}return n.tension=function(e){return t(+e)},n}(0);function WM(t,e){this._context=t,this._k=(1-e)/6}WM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:HM(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};const XM=function t(e){function n(t){return new WM(t,e)}return n.tension=function(e){return t(+e)},n}(0);function JM(t,e,n){var i=t._x1,r=t._y1,o=t._x2,a=t._y2;if(t._l01_a>bS){var u=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);i=(i*u-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,r=(r*u-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>bS){var s=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,l=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*s+t._x1*t._l23_2a-e*t._l12_2a)/l,a=(a*s+t._y1*t._l23_2a-n*t._l12_2a)/l}t._context.bezierCurveTo(i,r,o,a,t._x2,t._y2)}function ZM(t,e){this._context=t,this._alpha=e}ZM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,i=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:JM(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};const tE=function t(e){function n(t){return e?new ZM(t,e):new QM(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function eE(t,e){this._context=t,this._alpha=e}eE.prototype={areaStart:PM,areaEnd:PM,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,i=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:JM(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};const nE=function t(e){function n(t){return e?new eE(t,e):new $M(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function iE(t,e){this._context=t,this._alpha=e}iE.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,i=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+i*i,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:JM(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};const rE=function t(e){function n(t){return e?new iE(t,e):new WM(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function oE(t){this._context=t}function aE(t){return new oE(t)}function uE(t){return t<0?-1:1}function cE(t,e,n){var i=t._x1-t._x0,r=e-t._x1,o=(t._y1-t._y0)/(i||r<0&&-0),a=(n-t._y1)/(r||i<0&&-0),u=(o*r+a*i)/(i+r);return(uE(o)+uE(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(u))||0}function sE(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function lE(t,e,n){var i=t._x0,r=t._y0,o=t._x1,a=t._y1,u=(o-i)/3;t._context.bezierCurveTo(i+u,r+u*e,o-u,a-u*n,o,a)}function dE(t){this._context=t}function fE(t){this._context=new hE(t)}function hE(t){this._context=t}function vE(t){return new dE(t)}function pE(t){return new fE(t)}function gE(t){this._context=t}function yE(t){var e,n,i=t.length-1,r=new Array(i),o=new Array(i),a=new Array(i);for(r[0]=0,o[0]=2,a[0]=t[0]+2*t[1],e=1;e<i-1;++e)r[e]=1,o[e]=4,a[e]=4*t[e]+2*t[e+1];for(r[i-1]=2,o[i-1]=7,a[i-1]=8*t[i-1]+t[i],e=1;e<i;++e)n=r[e]/o[e-1],o[e]-=n,a[e]-=n*a[e-1];for(r[i-1]=a[i-1]/o[i-1],e=i-2;e>=0;--e)r[e]=(a[e]-r[e+1])/o[e];for(o[i-1]=(t[i]+r[i-1])/2,e=0;e<i-1;++e)o[e]=2*t[e+1]-r[e+1];return[r,o]}function _E(t){return new gE(t)}function bE(t,e){this._context=t,this._t=e}function mE(t){return new bE(t,.5)}function wE(t){return new bE(t,0)}function xE(t){return new bE(t,1)}function SE(t,e){if((r=t.length)>1)for(var n,i,r,o=1,a=t[e[0]],u=a.length;o<r;++o)for(i=a,a=t[e[o]],n=0;n<u;++n)a[n][1]+=a[n][0]=isNaN(i[n][1])?i[n][0]:i[n][1]}function ME(t){for(var e=t.length,n=new Array(e);--e>=0;)n[e]=e;return n}function EE(t,e){return t[e]}function kE(t){const e=[];return e.key=t,e}function TE(){var t=dS([]),e=ME,n=SE,i=EE;function r(r){var o,a,u=Array.from(t.apply(this,arguments),kE),c=u.length,s=-1;for(const t of r)for(o=0,++s;o<c;++o)(u[o][s]=[0,+i(t,u[o].key,s,r)]).data=t;for(o=0,a=IS(e(u));o<c;++o)u[a[o]].index=o;return n(u,a),u}return r.keys=function(e){return arguments.length?(t="function"==typeof e?e:dS(Array.from(e)),r):t},r.value=function(t){return arguments.length?(i="function"==typeof t?t:dS(+t),r):i},r.order=function(t){return arguments.length?(e=null==t?ME:"function"==typeof t?t:dS(Array.from(t)),r):e},r.offset=function(t){return arguments.length?(n=null==t?SE:t,r):n},r}function NE(t,e){if((i=t.length)>0){for(var n,i,r,o=0,a=t[0].length;o<a;++o){for(r=n=0;n<i;++n)r+=t[n][o][1]||0;if(r)for(n=0;n<i;++n)t[n][o][1]/=r}SE(t,e)}}function AE(t,e){if((u=t.length)>0)for(var n,i,r,o,a,u,c=0,s=t[e[0]].length;c<s;++c)for(o=a=0,n=0;n<u;++n)(r=(i=t[e[n]][c])[1]-i[0])>0?(i[0]=o,i[1]=o+=r):r<0?(i[1]=a,i[0]=a+=r):(i[0]=0,i[1]=r)}function OE(t,e){if((n=t.length)>0){for(var n,i=0,r=t[e[0]],o=r.length;i<o;++i){for(var a=0,u=0;a<n;++a)u+=t[a][i][1]||0;r[i][1]+=r[i][0]=-u/2}SE(t,e)}}function RE(t,e){if((r=t.length)>0&&(i=(n=t[e[0]]).length)>0){for(var n,i,r,o=0,a=1;a<i;++a){for(var u=0,c=0,s=0;u<r;++u){for(var l=t[e[u]],d=l[a][1]||0,f=(d-(l[a-1][1]||0))/2,h=0;h<u;++h){var v=t[e[h]];f+=(v[a][1]||0)-(v[a-1][1]||0)}c+=d,s+=f*d}n[a-1][1]+=n[a-1][0]=o,c&&(o-=s/c)}n[a-1][1]+=n[a-1][0]=o,SE(t,e)}}function CE(t){var e=t.map(IE);return ME(t).sort((function(t,n){return e[t]-e[n]}))}function IE(t){for(var e,n=-1,i=0,r=t.length,o=-1/0;++n<r;)(e=+t[n][1])>o&&(o=e,i=n);return i}function jE(t){var e=t.map(PE);return ME(t).sort((function(t,n){return e[t]-e[n]}))}function PE(t){for(var e,n=0,i=-1,r=t.length;++i<r;)(e=+t[i][1])&&(n+=e);return n}function zE(t){return jE(t).reverse()}function DE(t){var e,n,i=t.length,r=t.map(PE),o=CE(t),a=0,u=0,c=[],s=[];for(e=0;e<i;++e)n=o[e],a<u?(a+=r[n],c.push(n)):(u+=r[n],s.push(n));return s.reverse().concat(c)}function VE(t){return ME(t).reverse()}oE.prototype={areaStart:PM,areaEnd:PM,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}},dE.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:lE(this,this._t0,sE(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,lE(this,sE(this,n=cE(this,t,e)),n);break;default:lE(this,this._t0,n=cE(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(fE.prototype=Object.create(dE.prototype)).point=function(t,e){dE.prototype.point.call(this,e,t)},hE.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,i,r,o){this._context.bezierCurveTo(e,t,i,n,o,r)}},gE.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var i=yE(t),r=yE(e),o=0,a=1;a<n;++o,++a)this._context.bezierCurveTo(i[0][o],r[0][o],i[1][o],r[1][o],t[a],e[a]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}},bE.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};var LE="%Y-%m-%dT%H:%M:%S.%LZ",BE=Date.prototype.toISOString?function(t){return t.toISOString()}:Hb(LE);const FE=BE;var GE=+new Date("2000-01-01T00:00:00.000Z")?function(t){var e=new Date(t);return isNaN(e)?null:e}:Qb(LE);const UE=GE;function KE(t,e,n){var i=new hr,r=e;return null==e?(i.restart(t,e,n),i):(i._restart=i.restart,i.restart=function(t,e,n){e=+e,n=null==n?dr():+n,i._restart((function o(a){a+=r,i._restart(o,r+=e,n),t(a)}),e,n)},i.restart(t,e,n),i)}const HE=t=>()=>t;function QE(t,{sourceEvent:e,target:n,transform:i,dispatch:r}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:e,enumerable:!0,configurable:!0},target:{value:n,enumerable:!0,configurable:!0},transform:{value:i,enumerable:!0,configurable:!0},_:{value:r}})}function qE(t,e,n){this.k=t,this.x=e,this.y=n}qE.prototype={constructor:qE,scale:function(t){return 1===t?this:new qE(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new qE(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var $E=new qE(1,0,0);function YE(t){for(;!t.__zoom;)if(!(t=t.parentNode))return $E;return t.__zoom}function WE(t){t.stopImmediatePropagation()}function XE(t){t.preventDefault(),t.stopImmediatePropagation()}function JE(t){return!(t.ctrlKey&&"wheel"!==t.type||t.button)}function ZE(){var t=this;return t instanceof SVGElement?(t=t.ownerSVGElement||t).hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]:[[0,0],[t.clientWidth,t.clientHeight]]}function tk(){return this.__zoom||$E}function ek(t){return-t.deltaY*(1===t.deltaMode?.05:t.deltaMode?1:.002)*(t.ctrlKey?10:1)}function nk(){return navigator.maxTouchPoints||"ontouchstart"in this}function ik(t,e,n){var i=t.invertX(e[0][0])-n[0][0],r=t.invertX(e[1][0])-n[1][0],o=t.invertY(e[0][1])-n[0][1],a=t.invertY(e[1][1])-n[1][1];return t.translate(r>i?(i+r)/2:Math.min(0,i)||Math.max(0,r),a>o?(o+a)/2:Math.min(0,o)||Math.max(0,a))}function rk(){var t,e,n,i=JE,r=ZE,o=ik,a=ek,u=nk,c=[0,1/0],s=[[-1/0,-1/0],[1/0,1/0]],l=250,d=Ug,f=ke("start","zoom","end"),h=500,v=150,p=0,g=10;function y(t){t.property("__zoom",tk).on("wheel.zoom",M,{passive:!1}).on("mousedown.zoom",E).on("dblclick.zoom",k).filter(u).on("touchstart.zoom",T).on("touchmove.zoom",N).on("touchend.zoom touchcancel.zoom",A).style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function _(t,e){return(e=Math.max(c[0],Math.min(c[1],e)))===t.k?t:new qE(e,t.x,t.y)}function b(t,e,n){var i=e[0]-n[0]*t.k,r=e[1]-n[1]*t.k;return i===t.x&&r===t.y?t:new qE(t.k,i,r)}function m(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function w(t,e,n,i){t.on("start.zoom",(function(){x(this,arguments).event(i).start()})).on("interrupt.zoom end.zoom",(function(){x(this,arguments).event(i).end()})).tween("zoom",(function(){var t=this,o=arguments,a=x(t,o).event(i),u=r.apply(t,o),c=null==n?m(u):"function"==typeof n?n.apply(t,o):n,s=Math.max(u[1][0]-u[0][0],u[1][1]-u[0][1]),l=t.__zoom,f="function"==typeof e?e.apply(t,o):e,h=d(l.invert(c).concat(s/l.k),f.invert(c).concat(s/f.k));return function(t){if(1===t)t=f;else{var e=h(t),n=s/e[2];t=new qE(n,c[0]-e[0]*n,c[1]-e[1]*n)}a.zoom(null,t)}}))}function x(t,e,n){return!n&&t.__zooming||new S(t,e)}function S(t,e){this.that=t,this.args=e,this.active=0,this.sourceEvent=null,this.extent=r.apply(t,e),this.taps=0}function M(t,...e){if(i.apply(this,arguments)){var n=x(this,e).event(t),r=this.__zoom,u=Math.max(c[0],Math.min(c[1],r.k*Math.pow(2,a.apply(this,arguments)))),l=Zi(t);if(n.wheel)n.mouse[0][0]===l[0]&&n.mouse[0][1]===l[1]||(n.mouse[1]=r.invert(n.mouse[0]=l)),clearTimeout(n.wheel);else{if(r.k===u)return;n.mouse=[l,r.invert(l)],Cr(this),n.start()}XE(t),n.wheel=setTimeout((function(){n.wheel=null,n.end()}),v),n.zoom("mouse",o(b(_(r,u),n.mouse[0],n.mouse[1]),n.extent,s))}}function E(t,...e){if(!n&&i.apply(this,arguments)){var r=t.currentTarget,a=x(this,e,!0).event(t),u=Fn(t.view).on("mousemove.zoom",(function(t){if(XE(t),!a.moved){var e=t.clientX-l,n=t.clientY-d;a.moved=e*e+n*n>p}a.event(t).zoom("mouse",o(b(a.that.__zoom,a.mouse[0]=Zi(t,r),a.mouse[1]),a.extent,s))}),!0).on("mouseup.zoom",(function(t){u.on("mousemove.zoom mouseup.zoom",null),qn(t.view,a.moved),XE(t),a.event(t).end()}),!0),c=Zi(t,r),l=t.clientX,d=t.clientY;Qn(t.view),WE(t),a.mouse=[c,this.__zoom.invert(c)],Cr(this),a.start()}}function k(t,...e){if(i.apply(this,arguments)){var n=this.__zoom,a=Zi(t.changedTouches?t.changedTouches[0]:t,this),u=n.invert(a),c=n.k*(t.shiftKey?.5:2),d=o(b(_(n,c),a,u),r.apply(this,e),s);XE(t),l>0?Fn(this).transition().duration(l).call(w,d,a,t):Fn(this).call(y.transform,d,a,t)}}function T(n,...r){if(i.apply(this,arguments)){var o,a,u,c,s=n.touches,l=s.length,d=x(this,r,n.changedTouches.length===l).event(n);for(WE(n),a=0;a<l;++a)c=[c=Zi(u=s[a],this),this.__zoom.invert(c),u.identifier],d.touch0?d.touch1||d.touch0[2]===c[2]||(d.touch1=c,d.taps=0):(d.touch0=c,o=!0,d.taps=1+!!t);t&&(t=clearTimeout(t)),o&&(d.taps<2&&(e=c[0],t=setTimeout((function(){t=null}),h)),Cr(this),d.start())}}function N(t,...e){if(this.__zooming){var n,i,r,a,u=x(this,e).event(t),c=t.changedTouches,l=c.length;for(XE(t),n=0;n<l;++n)r=Zi(i=c[n],this),u.touch0&&u.touch0[2]===i.identifier?u.touch0[0]=r:u.touch1&&u.touch1[2]===i.identifier&&(u.touch1[0]=r);if(i=u.that.__zoom,u.touch1){var d=u.touch0[0],f=u.touch0[1],h=u.touch1[0],v=u.touch1[1],p=(p=h[0]-d[0])*p+(p=h[1]-d[1])*p,g=(g=v[0]-f[0])*g+(g=v[1]-f[1])*g;i=_(i,Math.sqrt(p/g)),r=[(d[0]+h[0])/2,(d[1]+h[1])/2],a=[(f[0]+v[0])/2,(f[1]+v[1])/2]}else{if(!u.touch0)return;r=u.touch0[0],a=u.touch0[1]}u.zoom("touch",o(b(i,r,a),u.extent,s))}}function A(t,...i){if(this.__zooming){var r,o,a=x(this,i).event(t),u=t.changedTouches,c=u.length;for(WE(t),n&&clearTimeout(n),n=setTimeout((function(){n=null}),h),r=0;r<c;++r)o=u[r],a.touch0&&a.touch0[2]===o.identifier?delete a.touch0:a.touch1&&a.touch1[2]===o.identifier&&delete a.touch1;if(a.touch1&&!a.touch0&&(a.touch0=a.touch1,delete a.touch1),a.touch0)a.touch0[1]=this.__zoom.invert(a.touch0[0]);else if(a.end(),2===a.taps&&(o=Zi(o,this),Math.hypot(e[0]-o[0],e[1]-o[1])<g)){var s=Fn(this).on("dblclick.zoom");s&&s.apply(this,arguments)}}}return y.transform=function(t,e,n,i){var r=t.selection?t.selection():t;r.property("__zoom",tk),t!==r?w(t,e,n,i):r.interrupt().each((function(){x(this,arguments).event(i).start().zoom(null,"function"==typeof e?e.apply(this,arguments):e).end()}))},y.scaleBy=function(t,e,n,i){y.scaleTo(t,(function(){return this.__zoom.k*("function"==typeof e?e.apply(this,arguments):e)}),n,i)},y.scaleTo=function(t,e,n,i){y.transform(t,(function(){var t=r.apply(this,arguments),i=this.__zoom,a=null==n?m(t):"function"==typeof n?n.apply(this,arguments):n,u=i.invert(a),c="function"==typeof e?e.apply(this,arguments):e;return o(b(_(i,c),a,u),t,s)}),n,i)},y.translateBy=function(t,e,n,i){y.transform(t,(function(){return o(this.__zoom.translate("function"==typeof e?e.apply(this,arguments):e,"function"==typeof n?n.apply(this,arguments):n),r.apply(this,arguments),s)}),null,i)},y.translateTo=function(t,e,n,i,a){y.transform(t,(function(){var t=r.apply(this,arguments),a=this.__zoom,u=null==i?m(t):"function"==typeof i?i.apply(this,arguments):i;return o($E.translate(u[0],u[1]).scale(a.k).translate("function"==typeof e?-e.apply(this,arguments):-e,"function"==typeof n?-n.apply(this,arguments):-n),t,s)}),i,a)},S.prototype={event:function(t){return t&&(this.sourceEvent=t),this},start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(t,e){return this.mouse&&"mouse"!==t&&(this.mouse[1]=e.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=e.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=e.invert(this.touch1[0])),this.that.__zoom=e,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(t){var e=Fn(this.that).datum();f.call(t,this.that,new QE(t,{sourceEvent:this.sourceEvent,target:y,type:t,transform:this.that.__zoom,dispatch:f}),e)}},y.wheelDelta=function(t){return arguments.length?(a="function"==typeof t?t:HE(+t),y):a},y.filter=function(t){return arguments.length?(i="function"==typeof t?t:HE(!!t),y):i},y.touchable=function(t){return arguments.length?(u="function"==typeof t?t:HE(!!t),y):u},y.extent=function(t){return arguments.length?(r="function"==typeof t?t:HE([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),y):r},y.scaleExtent=function(t){return arguments.length?(c[0]=+t[0],c[1]=+t[1],y):[c[0],c[1]]},y.translateExtent=function(t){return arguments.length?(s[0][0]=+t[0][0],s[1][0]=+t[1][0],s[0][1]=+t[0][1],s[1][1]=+t[1][1],y):[[s[0][0],s[0][1]],[s[1][0],s[1][1]]]},y.constrain=function(t){return arguments.length?(o=t,y):o},y.duration=function(t){return arguments.length?(l=+t,y):l},y.interpolate=function(t){return arguments.length?(d=t,y):d},y.on=function(){var t=f.on.apply(f,arguments);return t===f?y:t},y.clickDistance=function(t){return arguments.length?(p=(t=+t)*t,y):Math.sqrt(p)},y.tapDistance=function(t){return arguments.length?(g=+t,y):g},y}YE.prototype=qE.prototype}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={exports:{}};return t[i].call(o.exports,o,o.exports,n),o.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{"use strict";var t=n(9427),e=n(7389);window.addEventListener("load",(function(){var n;t.icdt.container="#mainContainer",t.icdt.svg="#mainSvg",t.icdt.config={fileuploadurl:(n={madonvi:"scorm",tendv:"[SCORM]",weburl:"https://tabca.vn/",fileuploadurl:"/",readfileuploadurl:"files/"}).fileuploadurl,readfileuploadurl:n.readfileuploadurl},e.icdt_Run.data=_board_content,e.icdt_Run.runSlide(1)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUd5UixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSx5REFDQSwrREFDQSxzRUFDQTBFLElBQUl3bEQsSUFFTixTQUFlbW1ELEdBQUssSUNaYixJQUFJLEdBQVMsSUFBSTloSCxNQUFNLEdBQUd5UixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSx5REFDQSwrREFDQSxzRUFDQTBFLElBQUl3bEQsSUFFTixTQUFlbW1ELEdBQUssSUNaYixJQUFJLEdBQVMsSUFBSTloSCxNQUFNLEdBQUd5UixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSx5REFDQSwrREFDQSxzRUFDQTBFLElBQUl3bEQsSUFFTixTQUFlbW1ELEdBQUssSUNaYixJQUFJLEdBQVMsSUFBSTloSCxNQUFNLEdBQUd5UixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSx5REFDQSwrREFDQSxzRUFDQTBFLElBQUl3bEQsSUFFTixTQUFlbW1ELEdBQUssSUNaYixJQUFJLEdBQVMsSUFBSTloSCxNQUFNLEdBQUd5UixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTBFLElBQUl3bEQsSUFFTixTQUFlbW1ELEdBQUssSUNWYixJQUFJLEdBQVMsSUFBSTloSCxNQUFNLEdBQUd5UixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTBFLElBQUl3bEQsSUFFTixTQUFlbW1ELEdBQUssSUNWYixJQUFJLEdBQVMsSUFBSTloSCxNQUFNLEdBQUd5UixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTBFLElBQUl3bEQsSUFFTixTQUFlbW1ELEdBQUssSUNWYixJQUFJLEdBQVMsSUFBSTloSCxNQUFNLEdBQUd5UixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTBFLElBQUl3bEQsSUFFTixTQUFlbW1ELEdBQUssSUNWYixJQUFJLEdBQVMsSUFBSTloSCxNQUFNLEdBQUd5UixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTBFLElBQUl3bEQsSUFFTixTQUFlbW1ELEdBQUssSUNWYixJQUFJLEdBQVMsSUFBSTloSCxNQUFNLEdBQUd5UixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTBFLElBQUl3bEQsSUFFTixTQUFlbW1ELEdBQUssSUNWYixJQUFJLEdBQVMsSUFBSTloSCxNQUFNLEdBQUd5UixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTBFLElBQUl3bEQsSUFFTixTQUFlbW1ELEdBQUssSUNWYixJQUFJLEdBQVMsSUFBSTloSCxNQUFNLEdBQUd5UixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTBFLElBQUl3bEQsSUFFTixTQUFlbW1ELEdBQUssSUNWYixJQUFJLEdBQVMsSUFBSTloSCxNQUFNLEdBQUd5UixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTBFLElBQUl3bEQsSUFFTixTQUFlbW1ELEdBQUssSUNWYixJQUFJLEdBQVMsSUFBSTloSCxNQUFNLEdBQUd5UixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTBFLElBQUl3bEQsSUFFTixTQUFlbW1ELEdBQUssSUNWYixJQUFJLEdBQVMsSUFBSTloSCxNQUFNLEdBQUd5UixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTBFLElBQUl3bEQsSUFFTixTQUFlbW1ELEdBQUssSUNWYixJQUFJLEdBQVMsSUFBSTloSCxNQUFNLEdBQUd5UixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQTBFLElBQUl3bEQsSUFFTixTQUFlbW1ELEdBQUssSUNWYixJ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UzZHLE9BQU91dkgsWUFBYSxDQUFFdnhILE1BQU8sV0FFN0RzQixPQUFPOHpFLGVBQWVqNkUsRUFBUyxhQUFjLENBQUU2RSxPQUFPLEdBQU8scUJDSjlELGNBQ0EsVUFFQXZCLE9BQU9rOUIsaUJBQWlCLFFBQVEsV0FJZCxJQUFFenZCLEVBSGhCLEVBQUFtUCxLQUFLaVosVUFBWSxpQkFDakIsRUFBQWpaLEtBQUtlLElBQU0sV0FFWCxFQUFBZixLQUFLblAsT0FFTSxDQUFFc2xILGVBRkd0bEgsRUFHYixDQUNDLFFBQVcsUUFDWCxNQUFTLFVBQ1QsT0FBVSxvQkFDVixjQUFpQixJQUNqQixrQkFBcUIsV0FQNEIsY0FDekJvUCxrQkFEbUJwUCxFQUFNLG1CQVVyRCxFQUFBMC9CLFNBQVMzdUMsS0FBT3cwSCxlQUdoQixFQUFBN2xGLFNBQVNDLFNBQVMsRUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvbG9jYWxmb3JhZ2UvZGlzdC9sb2NhbGZvcmFnZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvZGVmaW5lL3N2Zy1kZXNpZ24udHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL2Z1bmMvYWRhcHRlci50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvZnVuYy9leHRyYWN0LWZyb20tZGF0YS12MS50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvbGliL2NvbG9yLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9saWIvZXJhc2UudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL2xpYi9oZXgycmJnYS50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvbGliL2xvY2FsLXN0b3JhZ2UudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL2xpYi9yZ2JhMmhleC50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvbG9va3VwL1ZfSUQudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL2xvb2t1cC9WX0tleWJvYXJkLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9sb29rdXAvVl9QZW5UeXBlLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9sb29rdXAvVl9Qb2ludGVyVHlwZS50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvbG9va3VwL1ZfUG9seWdvblJhdGlvLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9sb29rdXAvVl9Qb2x5Z29uVHlwZS50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvbG9va3VwL1ZfU2hhcGVUeXBlLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9sb29rdXAvdl9tZWRpYXR5cGUudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL2xvb2t1cC92X29zc3R5cGUudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3Byb3RvdHlwZS9pY2R0LnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvY29tcG9uZW50L2VyYXNlci9lcmFzZXItY29tcG9uZW50LnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvY29tcG9uZW50L2VyYXNlci9lcmFzZXIvZXJhc2VyLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvY29tcG9uZW50L2ZvcmVpZ25vYmplY3QvZm9yZWlnbm9iamVjdC1jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9jb21wb25lbnQvaGFuZC9oYW5kLWNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L2NvbXBvbmVudC9pbWFnZS9pbWFnZS1jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9jb21wb25lbnQvaW5kZXgvaW5kZXgtY29tcG9uZW50LnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvY29tcG9uZW50L2luZGV4L3NjYW4vc2Nhbi50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L2NvbXBvbmVudC9rZXlib2FyZC9rZXlib2FyZC1jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9jb21wb25lbnQvcGVuL2RyYXcvZHJhdy50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L2NvbXBvbmVudC9wZW4vaGlnaGxpZ2h0L2hpZ2hsaWdodC50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L2NvbXBvbmVudC9wZW4vaW50ZXJhY3RpdmUvaW50ZXJhY3RpdmUudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9jb21wb25lbnQvcGVuL3Blbi1jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9jb21wb25lbnQvcG9pbnRlci9wb2ludGVyLWNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L2NvbXBvbmVudC9wb2ludGVyL3Jlc2l6ZS9yZXNpemUudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9jb21wb25lbnQvcG9pbnRlci9zY2FuL3NjYW4udHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9jb21wb25lbnQvcG9pbnRlci9zZWxlY3Qvc2VsZWN0LnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvY29tcG9uZW50L3JlbmRlci1jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9jb21wb25lbnQvc2hhcGUvc2hhcGUtY29tcG9uZW50LnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvY29tcG9uZW50L3NoYXBlL3N2Zy9jaXJjbGUvc3ZnLWNpcmNsZS1jcmVhdGUudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9jb21wb25lbnQvc2hhcGUvc3ZnL2NpcmNsZS9zdmctY2lyY2xlLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvY29tcG9uZW50L3NoYXBlL3N2Zy9lbGxpcHNlL3N2Zy1lbGxpcHNlLWNyZWF0ZS50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L2NvbXBvbmVudC9zaGFwZS9zdmcvZWxsaXBzZS9zdmctZWxsaXBzZS50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L2NvbXBvbmVudC9zaGFwZS9zdmcvZm9yZWlnbm9iamVjdC9zdmctZm9yZWlnbm9iamVjdC1jcmVhdGUudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9jb21wb25lbnQvc2hhcGUvc3ZnL2ZvcmVpZ25vYmplY3Qvc3ZnLWZvcmVpZ25vYmplY3QudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9jb21wb25lbnQvc2hhcGUvc3ZnL2dyb3VwL3N2Zy1ncm91cC50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L2NvbXBvbmVudC9zaGFwZS9zdmcvaW1hZ2Uvc3ZnLWltYWdlLWNyZWF0ZS50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L2NvbXBvbmVudC9zaGFwZS9zdmcvaW1hZ2Uvc3ZnLWltYWdlLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvY29tcG9uZW50L3NoYXBlL3N2Zy9saW5lL3N2Zy1saW5lLWNyZWF0ZS50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L2NvbXBvbmVudC9zaGFwZS9zdmcvbGluZS9zdmctbGluZS50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L2NvbXBvbmVudC9zaGFwZS9zdmcvcGF0aC9zdmctcGF0aC1jcmVhdGUudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9jb21wb25lbnQvc2hhcGUvc3ZnL3BhdGgvc3ZnLXBhdGgudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9jb21wb25lbnQvc2hhcGUvc3ZnL3BvbHlnb24vc3ZnLXBvbHlnb24tY3JlYXRlLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvY29tcG9uZW50L3NoYXBlL3N2Zy9wb2x5Z29uL3N2Zy1wb2x5Z29uLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvY29tcG9uZW50L3NoYXBlL3N2Zy9yZWN0L3N2Zy1yZWN0LWNyZWF0ZS50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L2NvbXBvbmVudC9zaGFwZS9zdmcvcmVjdC9zdmctcmVjdC50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L2NvbXBvbmVudC9zaGFwZS9zdmcvdGV4dC9zdmctdGV4dC1jcmVhdGUudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9jb21wb25lbnQvc2hhcGUvc3ZnL3RleHQvc3ZnLXRleHQudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9jb21wb25lbnQvdGV4dC90ZXh0LWNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L2hhbmRsZS9vZmZzZXQudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9oYW5kbGUvcm91bmQtbnVtYmVyLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvaGFuZGxlL3NjYWxlLW51bWJlci50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L2hhbmRsZS9zaXplLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvaW5pdC50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L21ldGhvZC9kYXRhLXNlbGVjdC50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L21ldGhvZC9kYXRhLXNsaWRlLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvbWV0aG9kL2RhdGEtc291cmNlLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvbWV0aG9kL2hpc3RvcnkudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9tZXRob2Qvc2NyZWVuLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvbWV0aG9kL3N2Zy1ub2RlLWF0dHJpYnV0ZS50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L21ldGhvZC92YXJpYWJsZS50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L3BvaW50ZXIvcG9pbnRlci1ldmVudC50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L3BvaW50ZXIvcG9pbnRlci1oYW5kbGUudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9wb2ludGVyL3BvaW50ZXItc2NhbGUudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9wb2ludGVyL3BvaW50ZXItdHlwZS50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L3J1bi50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L3J1bi9hbmltYXRlL2FuaW1hdGlvbi50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L3J1bi9pbnRlcmFjdGl2ZS9hY3Rpb24tYW5pbWF0aW9uLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvcnVuL2ludGVyYWN0aXZlL2FjdGlvbi1wb2ludHMudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9ydW4vaW50ZXJhY3RpdmUvYXVkaW8udHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9ydW4vaW50ZXJhY3RpdmUvbm9kZS1jbGljay50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L3J1bi9pbnRlcmFjdGl2ZS9ub2RlLXNob3cudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9ydW4vaW50ZXJhY3RpdmUvdHJpZ2dlci50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L3J1bi9ub2RlLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvcnVuL3NsaWRlLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvcnVuL3Rlc3Qvbm90aWZ5LWVmZmVjdC50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L3J1bi90ZXN0L25vdGlmeS1pY29uLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvcnVuL3Rlc3Qvbm90aWZ5LXNvdW5kLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvcnVuL3Rlc3QvdGVzdC50cyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9zcmMvX0lDRFQvc2NyaXB0L3J1bi92YXJpYWJsZS9ub2RlLWNsaWNrLnRzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL3NyYy9fSUNEVC9zY3JpcHQvcnVuL3ZhcmlhYmxlL25vZGUtaW5wdXQudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9zeW5jLWVsZW1lbnQvc3ZnLWVsZW1lbnQudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vc3JjL19JQ0RUL3NjcmlwdC9zeW5jLWVsZW1lbnQvdWkudHMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9hc2NlbmRpbmcuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9kZXNjZW5kaW5nLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0b3IuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3QuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9ibHVyLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvY291bnQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9jcm9zcy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2N1bXN1bS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3ZhcmlhbmNlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvZGV2aWF0aW9uLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvZXh0ZW50LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvZnN1bS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvaW50ZXJubWFwL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvZ3JvdXAuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9wZXJtdXRlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvc29ydC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2dyb3VwU29ydC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FycmF5LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aWNrcy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL25pY2UuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aHJlc2hvbGQvc3R1cmdlcy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpbi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21heC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21heEluZGV4LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWluLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWluSW5kZXguanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9xdWlja3NlbGVjdC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2dyZWF0ZXN0LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvcXVhbnRpbGUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aHJlc2hvbGQvZnJlZWRtYW5EaWFjb25pcy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RocmVzaG9sZC9zY290dC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21lYW4uanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tZWRpYW4uanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tZXJnZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21vZGUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9wYWlycy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3JhbmdlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvcmFuay5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2xlYXN0LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbGVhc3RJbmRleC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2dyZWF0ZXN0SW5kZXguanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9zY2FuLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvc2h1ZmZsZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3N1bS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RyYW5zcG9zZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3ppcC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2V2ZXJ5LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvc29tZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21hcC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3JlZHVjZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3JldmVyc2UuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9kaWZmZXJlbmNlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvZGlzam9pbnQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9pbnRlcnNlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9zdXBlcnNldC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3N1YnNldC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3VuaW9uLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvYXhpcy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZGlzcGF0Y2gvc3JjL2Rpc3BhdGNoLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2FycmF5LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yQWxsLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL21hdGNoZXIuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdENoaWxkLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RDaGlsZHJlbi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3BhcnNlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbnRlci5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0YS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc29ydC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2VzLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXR0ci5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3N0eWxlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xhc3NlZC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vdGV4dC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaHRtbC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmFpc2UuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2xvd2VyLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NyZWF0b3IuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2luc2VydC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmVtb3ZlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jbG9uZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb24uanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Rpc3BhdGNoLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RBbGwuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZXhpdC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vam9pbi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29yZGVyLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jYWxsLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9ub2Rlcy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2l6ZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW1wdHkuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VhY2guanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2FwcGVuZC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0dW0uanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2l0ZXJhdG9yLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvbm9ldmVudC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvbm9kcmFnLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvZGVmaW5lLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY29sb3IuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpcy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Jhc2lzQ2xvc2VkLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb2xvci5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JnYi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlckFycmF5LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9kYXRlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvb2JqZWN0LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvc3RyaW5nLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdmFsdWUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc291cmNlRXZlbnQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvcG9pbnRlci5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL3RpbWVyLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZW91dC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zY2hlZHVsZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvaW50ZXJydXB0LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2RlY29tcG9zZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9wYXJzZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9pbmRleC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90d2Vlbi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbnRlcnBvbGF0ZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9hdHRyLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHJUd2Vlbi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kZWxheS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kdXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2N1YmljLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3RBbGwuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZmlsdGVyLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL21lcmdlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vb24uanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGVUd2Vlbi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RleHRUd2Vlbi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZWFzZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lYXNlVmFyeWluZy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lbmQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi90cmFuc2l0aW9uLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbnRlcnJ1cHQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL2FjdGl2ZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtYnJ1c2gvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvZXZlbnQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9ub2V2ZW50LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvYnJ1c2guanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWNob3JkL3NyYy9tYXRoLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1jaG9yZC9zcmMvY2hvcmQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXBhdGgvc3JjL3BhdGguanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWNob3JkL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtY2hvcmQvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1jaG9yZC9zcmMvcmliYm9uLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvbWF0aC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2xhYi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2N1YmVoZWxpeC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtY29udG91ci9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL2FzY2VuZGluZy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtY29udG91ci9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL2NvbnRhaW5zLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9ub29wLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9jb250b3Vycy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtY29udG91ci9zcmMvYXJlYS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtY29udG91ci9zcmMvZGVuc2l0eS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvcm9idXN0LXByZWRpY2F0ZXMvZXNtL3V0aWwuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL3JvYnVzdC1wcmVkaWNhdGVzL2VzbS9vcmllbnQyZC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvcm9idXN0LXByZWRpY2F0ZXMvZXNtL29yaWVudDNkLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9yb2J1c3QtcHJlZGljYXRlcy9lc20vaW5jaXJjbGUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL3JvYnVzdC1wcmVkaWNhdGVzL2VzbS9pbnNwaGVyZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZGVsYXVuYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZGVsYXVuYXkvc3JjL3BhdGguanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWRlbGF1bmF5L3NyYy9wb2x5Z29uLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1kZWxhdW5heS9zcmMvdm9yb25vaS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZGVsYXVuYXkvc3JjL2RlbGF1bmF5LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvZXZlbnQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL2RyYWcuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvZHN2LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2Nzdi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZHN2L3NyYy90c3YuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvYXV0b1R5cGUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2xpbmVhci5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvcXVhZC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvcG9seS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvc2luLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9tYXRoLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9leHAuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2NpcmNsZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvYm91bmNlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9iYWNrLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9lbGFzdGljLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMvYmxvYi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL2J1ZmZlci5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL3RleHQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy9kc3YuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy9pbWFnZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL2pzb24uanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy94bWwuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9jZW50ZXIuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9hZGQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9xdWFkLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMveC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3kuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9xdWFkdHJlZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZm9yY2Uvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvamlnZ2xlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvY29sbGlkZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZm9yY2Uvc3JjL2xpbmsuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9jb3Zlci5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2RhdGEuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9leHRlbnQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9maW5kLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvcmVtb3ZlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvcm9vdC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3NpemUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy92aXNpdC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3Zpc2l0QWZ0ZXIuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9sY2cuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9zaW11bGF0aW9uLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvbWFueUJvZHkuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9yYWRpYWwuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy94LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMveS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXREZWNpbWFsLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2V4cG9uZW50LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFNwZWNpZmllci5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRQcmVmaXhBdXRvLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFJvdW5kZWQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHlwZXMuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvbG9jYWxlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0R3JvdXAuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0TnVtZXJhbHMuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHJpbS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25GaXhlZC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25QcmVmaXguanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uUm91bmQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvbWF0aC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9ub29wLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3N0cmVhbS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9hcmVhLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2JvdW5kcy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jYXJ0ZXNpYW4uanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2VudHJvaWQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY29tcG9zZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9yb3RhdGlvbi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jaXJjbGUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9idWZmZXIuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcG9pbnRFcXVhbC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL3Jlam9pbi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wb2x5Z29uQ29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9pbmRleC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2FudGltZXJpZGlhbi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2NpcmNsZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL3JlY3RhbmdsZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9sZW5ndGguanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9saW5lLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvZXh0ZW50LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2Rpc3RhbmNlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NvbnRhaW5zLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2dyYXRpY3VsZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9pbnRlcnBvbGF0ZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL2FyZWEuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9ib3VuZHMuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9jZW50cm9pZC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9tZWFzdXJlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvc3RyaW5nLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvdHJhbnNmb3JtLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vZml0LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vcmVzYW1wbGUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2NvbmljLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vY29uaWNFcXVhbEFyZWEuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9jeWxpbmRyaWNhbEVxdWFsQXJlYS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2FsYmVycy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2FsYmVyc1VzYS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2F6aW11dGhhbC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2F6aW11dGhhbEVxdWFsQXJlYS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2F6aW11dGhhbEVxdWlkaXN0YW50LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vbWVyY2F0b3IuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9jb25pY0NvbmZvcm1hbC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2VxdWlyZWN0YW5ndWxhci5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2NvbmljRXF1aWRpc3RhbnQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9lcXVhbEVhcnRoLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vZ25vbW9uaWMuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL25hdHVyYWxFYXJ0aDEuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9vcnRob2dyYXBoaWMuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9zdGVyZW9ncmFwaGljLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vdHJhbnN2ZXJzZU1lcmNhdG9yLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2NsdXN0ZXIuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2NvdW50LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9pbmRleC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9hY2Nlc3NvcnMuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2VhY2guanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2VhY2hBZnRlci5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZWFjaEJlZm9yZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZmluZC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvc3VtLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9zb3J0LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9wYXRoLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9hbmNlc3RvcnMuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2Rlc2NlbmRhbnRzLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9sZWF2ZXMuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2xpbmtzLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9sY2cuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvcGFjay9lbmNsb3NlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2FycmF5LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3BhY2svc2libGluZ3MuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvcGFjay9pbmRleC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL3JvdW5kLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWVtYXAvZGljZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9wYXJ0aXRpb24uanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvc3RyYXRpZnkuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL3NsaWNlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWVtYXAvc3F1YXJpZnkuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9pbmRleC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL2JpbmFyeS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL3NsaWNlRGljZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL3Jlc3F1YXJpZnkuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9kaXNjcmV0ZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2h1ZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JvdW5kLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvem9vbS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2hzbC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2xhYi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2hjbC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2N1YmVoZWxpeC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3BpZWNld2lzZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3F1YW50aXplLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1wb2x5Z29uL3NyYy9hcmVhLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1wb2x5Z29uL3NyYy9jZW50cm9pZC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtcG9seWdvbi9zcmMvY3Jvc3MuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXBvbHlnb24vc3JjL2h1bGwuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXBvbHlnb24vc3JjL2NvbnRhaW5zLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1wb2x5Z29uL3NyYy9sZW5ndGguanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvZGVmYXVsdFNvdXJjZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy91bmlmb3JtLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2ludC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9ub3JtYWwuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvbG9nTm9ybWFsLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2lyd2luSGFsbC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9iYXRlcy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9leHBvbmVudGlhbC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9wYXJldG8uanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvYmVybm91bGxpLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2dlb21ldHJpYy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9nYW1tYS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9iZXRhLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2Jpbm9taWFsLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL3dlaWJ1bGwuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvY2F1Y2h5LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2xvZ2lzdGljLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL3BvaXNzb24uanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvbGNnLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvaW5pdC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL29yZGluYWwuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9iYW5kLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbnVtYmVyLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvY29udGludW91cy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGlja0Zvcm1hdC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2xpbmVhci5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbmljZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2xvZy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3N5bWxvZy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3Bvdy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3JhZGlhbC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3F1YW50aWxlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvcXVhbnRpemUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy90aHJlc2hvbGQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2R1cmF0aW9uLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9pbnRlcnZhbC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbWlsbGlzZWNvbmQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3NlY29uZC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbWludXRlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9ob3VyLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9kYXkuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3dlZWsuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21vbnRoLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy95ZWFyLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy90aWNrcy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy90aW1lLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdXRjVGltZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3NlcXVlbnRpYWwuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9zZXF1ZW50aWFsUXVhbnRpbGUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9kaXZlcmdpbmcuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY29sb3JzLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL2NhdGVnb3J5MTAuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvQWNjZW50LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL0RhcmsyLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL29ic2VydmFibGUxMC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYWlyZWQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvUGFzdGVsMS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYXN0ZWwyLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1NldDEuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvU2V0Mi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9TZXQzLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1RhYmxlYXUxMC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9yYW1wLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9CckJHLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9QUkduLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9QaVlHLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9QdU9yLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZEJ1LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZEd5LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZFlsQnUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1JkWWxHbi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvU3BlY3RyYWwuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9CdUduLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvQnVQdS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL0duQnUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9PclJkLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvUHVCdUduLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvUHVCdS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1B1UmQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9SZFB1LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvWWxHbkJ1LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvWWxHbi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsT3JCci5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsT3JSZC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9CbHVlcy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9HcmVlbnMuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvR3JleXMuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvUHVycGxlcy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9SZWRzLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL09yYW5nZXMuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9jaXZpZGlzLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvY3ViZWhlbGl4LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvcmFpbmJvdy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL3NpbmVib3cuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS90dXJiby5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL3ZpcmlkaXMuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY3JlYXRlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2xvY2FsLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3BvaW50ZXJzLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdEFsbC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvbWF0aC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3BhdGguanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9hcmMuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2xpbmVhci5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3BvaW50LmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvbGluZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2FyZWEuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9kZXNjZW5kaW5nLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9waWUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9yYWRpYWwuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9saW5lUmFkaWFsLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvYXJlYVJhZGlhbC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3BvaW50UmFkaWFsLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvYnVtcC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2xpbmsuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvYXN0ZXJpc2suanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvY2lyY2xlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL2Nyb3NzLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL2RpYW1vbmQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvZGlhbW9uZDIuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvcGx1cy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3N5bWJvbC9zcXVhcmUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvc3F1YXJlMi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3N5bWJvbC9zdGFyLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL3RyaWFuZ2xlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL3RyaWFuZ2xlMi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3N5bWJvbC93eWUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvdGltZXMuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9ub29wLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvYmFzaXMuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9iYXNpc0Nsb3NlZC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2Jhc2lzT3Blbi5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2J1bmRsZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2NhcmRpbmFsLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2FyZGluYWxDbG9zZWQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXJkaW5hbE9wZW4uanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXRtdWxsUm9tLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2F0bXVsbFJvbUNsb3NlZC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2NhdG11bGxSb21PcGVuLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbGluZWFyQ2xvc2VkLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbW9ub3RvbmUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9uYXR1cmFsLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvc3RlcC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29mZnNldC9ub25lLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb3JkZXIvbm9uZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3N0YWNrLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb2Zmc2V0L2V4cGFuZC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29mZnNldC9kaXZlcmdpbmcuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vZmZzZXQvc2lsaG91ZXR0ZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29mZnNldC93aWdnbGUuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vcmRlci9hcHBlYXJhbmNlLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb3JkZXIvYXNjZW5kaW5nLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb3JkZXIvZGVzY2VuZGluZy5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29yZGVyL2luc2lkZU91dC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29yZGVyL3JldmVyc2UuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9pc29Gb3JtYXQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9pc29QYXJzZS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL2ludGVydmFsLmpzIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyLy4uL25vZGVfbW9kdWxlcy9kMy16b29tL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtem9vbS9zcmMvZXZlbnQuanMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi4vbm9kZV9tb2R1bGVzL2QzLXpvb20vc3JjL3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtem9vbS9zcmMvbm9ldmVudC5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci8uLi9ub2RlX21vZHVsZXMvZDMtem9vbS9zcmMvem9vbS5qcyIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9pY2R0LXNjb3JtLXZpZXdlci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2ljZHQtc2Nvcm0tdmlld2VyL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vaWNkdC1zY29ybS12aWV3ZXIvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gICAgbG9jYWxGb3JhZ2UgLS0gT2ZmbGluZSBTdG9yYWdlLCBJbXByb3ZlZFxuICAgIFZlcnNpb24gMS4xMC4wXG4gICAgaHR0cHM6Ly9sb2NhbGZvcmFnZS5naXRodWIuaW8vbG9jYWxGb3JhZ2VcbiAgICAoYykgMjAxMy0yMDE3IE1vemlsbGEsIEFwYWNoZSBMaWNlbnNlIDIuMFxuKi9cbihmdW5jdGlvbihmKXtpZih0eXBlb2YgZXhwb3J0cz09PVwib2JqZWN0XCImJnR5cGVvZiBtb2R1bGUhPT1cInVuZGVmaW5lZFwiKXttb2R1bGUuZXhwb3J0cz1mKCl9ZWxzZSBpZih0eXBlb2YgZGVmaW5lPT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoW10sZil9ZWxzZXt2YXIgZztpZih0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09XCJ1bmRlZmluZWRcIil7Zz1nbG9iYWx9ZWxzZSBpZih0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCIpe2c9c2VsZn1lbHNle2c9dGhpc31nLmxvY2FsZm9yYWdlID0gZigpfX0pKGZ1bmN0aW9uKCl7dmFyIGRlZmluZSxtb2R1bGUsZXhwb3J0cztyZXR1cm4gKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IChmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsIGYpfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIE11dGF0aW9uID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG5cbnZhciBzY2hlZHVsZURyYWluO1xuXG57XG4gIGlmIChNdXRhdGlvbikge1xuICAgIHZhciBjYWxsZWQgPSAwO1xuICAgIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbihuZXh0VGljayk7XG4gICAgdmFyIGVsZW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG9ic2VydmVyLm9ic2VydmUoZWxlbWVudCwge1xuICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICAgIH0pO1xuICAgIHNjaGVkdWxlRHJhaW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBlbGVtZW50LmRhdGEgPSAoY2FsbGVkID0gKytjYWxsZWQgJSAyKTtcbiAgICB9O1xuICB9IGVsc2UgaWYgKCFnbG9iYWwuc2V0SW1tZWRpYXRlICYmIHR5cGVvZiBnbG9iYWwuTWVzc2FnZUNoYW5uZWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIGNoYW5uZWwgPSBuZXcgZ2xvYmFsLk1lc3NhZ2VDaGFubmVsKCk7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBuZXh0VGljaztcbiAgICBzY2hlZHVsZURyYWluID0gZnVuY3Rpb24gKCkge1xuICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZSgwKTtcbiAgICB9O1xuICB9IGVsc2UgaWYgKCdkb2N1bWVudCcgaW4gZ2xvYmFsICYmICdvbnJlYWR5c3RhdGVjaGFuZ2UnIGluIGdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSkge1xuICAgIHNjaGVkdWxlRHJhaW4gPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgIHZhciBzY3JpcHRFbCA9IGdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgIHNjcmlwdEVsLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbmV4dFRpY2soKTtcblxuICAgICAgICBzY3JpcHRFbC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICBzY3JpcHRFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdEVsKTtcbiAgICAgICAgc2NyaXB0RWwgPSBudWxsO1xuICAgICAgfTtcbiAgICAgIGdsb2JhbC5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoc2NyaXB0RWwpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgc2NoZWR1bGVEcmFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHNldFRpbWVvdXQobmV4dFRpY2ssIDApO1xuICAgIH07XG4gIH1cbn1cblxudmFyIGRyYWluaW5nO1xudmFyIHF1ZXVlID0gW107XG4vL25hbWVkIG5leHRUaWNrIGZvciBsZXNzIGNvbmZ1c2luZyBzdGFjayB0cmFjZXNcbmZ1bmN0aW9uIG5leHRUaWNrKCkge1xuICBkcmFpbmluZyA9IHRydWU7XG4gIHZhciBpLCBvbGRRdWV1ZTtcbiAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgd2hpbGUgKGxlbikge1xuICAgIG9sZFF1ZXVlID0gcXVldWU7XG4gICAgcXVldWUgPSBbXTtcbiAgICBpID0gLTE7XG4gICAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgICAgb2xkUXVldWVbaV0oKTtcbiAgICB9XG4gICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICB9XG4gIGRyYWluaW5nID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW1tZWRpYXRlO1xuZnVuY3Rpb24gaW1tZWRpYXRlKHRhc2spIHtcbiAgaWYgKHF1ZXVlLnB1c2godGFzaykgPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgc2NoZWR1bGVEcmFpbigpO1xuICB9XG59XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxufSx7fV0sMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgaW1tZWRpYXRlID0gX2RlcmVxXygxKTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIElOVEVSTkFMKCkge31cblxudmFyIGhhbmRsZXJzID0ge307XG5cbnZhciBSRUpFQ1RFRCA9IFsnUkVKRUNURUQnXTtcbnZhciBGVUxGSUxMRUQgPSBbJ0ZVTEZJTExFRCddO1xudmFyIFBFTkRJTkcgPSBbJ1BFTkRJTkcnXTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9taXNlO1xuXG5mdW5jdGlvbiBQcm9taXNlKHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgcmVzb2x2ZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZXNvbHZlciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuICB0aGlzLnN0YXRlID0gUEVORElORztcbiAgdGhpcy5xdWV1ZSA9IFtdO1xuICB0aGlzLm91dGNvbWUgPSB2b2lkIDA7XG4gIGlmIChyZXNvbHZlciAhPT0gSU5URVJOQUwpIHtcbiAgICBzYWZlbHlSZXNvbHZlVGhlbmFibGUodGhpcywgcmVzb2x2ZXIpO1xuICB9XG59XG5cblByb21pc2UucHJvdG90eXBlW1wiY2F0Y2hcIl0gPSBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICByZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0ZWQpO1xufTtcblByb21pc2UucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbiAob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgaWYgKHR5cGVvZiBvbkZ1bGZpbGxlZCAhPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzLnN0YXRlID09PSBGVUxGSUxMRUQgfHxcbiAgICB0eXBlb2Ygb25SZWplY3RlZCAhPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzLnN0YXRlID09PSBSRUpFQ1RFRCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHZhciBwcm9taXNlID0gbmV3IHRoaXMuY29uc3RydWN0b3IoSU5URVJOQUwpO1xuICBpZiAodGhpcy5zdGF0ZSAhPT0gUEVORElORykge1xuICAgIHZhciByZXNvbHZlciA9IHRoaXMuc3RhdGUgPT09IEZVTEZJTExFRCA/IG9uRnVsZmlsbGVkIDogb25SZWplY3RlZDtcbiAgICB1bndyYXAocHJvbWlzZSwgcmVzb2x2ZXIsIHRoaXMub3V0Y29tZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5xdWV1ZS5wdXNoKG5ldyBRdWV1ZUl0ZW0ocHJvbWlzZSwgb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcbmZ1bmN0aW9uIFF1ZXVlSXRlbShwcm9taXNlLCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICBpZiAodHlwZW9mIG9uRnVsZmlsbGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5vbkZ1bGZpbGxlZCA9IG9uRnVsZmlsbGVkO1xuICAgIHRoaXMuY2FsbEZ1bGZpbGxlZCA9IHRoaXMub3RoZXJDYWxsRnVsZmlsbGVkO1xuICB9XG4gIGlmICh0eXBlb2Ygb25SZWplY3RlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMub25SZWplY3RlZCA9IG9uUmVqZWN0ZWQ7XG4gICAgdGhpcy5jYWxsUmVqZWN0ZWQgPSB0aGlzLm90aGVyQ2FsbFJlamVjdGVkO1xuICB9XG59XG5RdWV1ZUl0ZW0ucHJvdG90eXBlLmNhbGxGdWxmaWxsZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgaGFuZGxlcnMucmVzb2x2ZSh0aGlzLnByb21pc2UsIHZhbHVlKTtcbn07XG5RdWV1ZUl0ZW0ucHJvdG90eXBlLm90aGVyQ2FsbEZ1bGZpbGxlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB1bndyYXAodGhpcy5wcm9taXNlLCB0aGlzLm9uRnVsZmlsbGVkLCB2YWx1ZSk7XG59O1xuUXVldWVJdGVtLnByb3RvdHlwZS5jYWxsUmVqZWN0ZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgaGFuZGxlcnMucmVqZWN0KHRoaXMucHJvbWlzZSwgdmFsdWUpO1xufTtcblF1ZXVlSXRlbS5wcm90b3R5cGUub3RoZXJDYWxsUmVqZWN0ZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdW53cmFwKHRoaXMucHJvbWlzZSwgdGhpcy5vblJlamVjdGVkLCB2YWx1ZSk7XG59O1xuXG5mdW5jdGlvbiB1bndyYXAocHJvbWlzZSwgZnVuYywgdmFsdWUpIHtcbiAgaW1tZWRpYXRlKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmV0dXJuVmFsdWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVyblZhbHVlID0gZnVuYyh2YWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGhhbmRsZXJzLnJlamVjdChwcm9taXNlLCBlKTtcbiAgICB9XG4gICAgaWYgKHJldHVyblZhbHVlID09PSBwcm9taXNlKSB7XG4gICAgICBoYW5kbGVycy5yZWplY3QocHJvbWlzZSwgbmV3IFR5cGVFcnJvcignQ2Fubm90IHJlc29sdmUgcHJvbWlzZSB3aXRoIGl0c2VsZicpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFuZGxlcnMucmVzb2x2ZShwcm9taXNlLCByZXR1cm5WYWx1ZSk7XG4gICAgfVxuICB9KTtcbn1cblxuaGFuZGxlcnMucmVzb2x2ZSA9IGZ1bmN0aW9uIChzZWxmLCB2YWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gdHJ5Q2F0Y2goZ2V0VGhlbiwgdmFsdWUpO1xuICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gJ2Vycm9yJykge1xuICAgIHJldHVybiBoYW5kbGVycy5yZWplY3Qoc2VsZiwgcmVzdWx0LnZhbHVlKTtcbiAgfVxuICB2YXIgdGhlbmFibGUgPSByZXN1bHQudmFsdWU7XG5cbiAgaWYgKHRoZW5hYmxlKSB7XG4gICAgc2FmZWx5UmVzb2x2ZVRoZW5hYmxlKHNlbGYsIHRoZW5hYmxlKTtcbiAgfSBlbHNlIHtcbiAgICBzZWxmLnN0YXRlID0gRlVMRklMTEVEO1xuICAgIHNlbGYub3V0Y29tZSA9IHZhbHVlO1xuICAgIHZhciBpID0gLTE7XG4gICAgdmFyIGxlbiA9IHNlbGYucXVldWUubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICAgIHNlbGYucXVldWVbaV0uY2FsbEZ1bGZpbGxlZCh2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzZWxmO1xufTtcbmhhbmRsZXJzLnJlamVjdCA9IGZ1bmN0aW9uIChzZWxmLCBlcnJvcikge1xuICBzZWxmLnN0YXRlID0gUkVKRUNURUQ7XG4gIHNlbGYub3V0Y29tZSA9IGVycm9yO1xuICB2YXIgaSA9IC0xO1xuICB2YXIgbGVuID0gc2VsZi5xdWV1ZS5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBzZWxmLnF1ZXVlW2ldLmNhbGxSZWplY3RlZChlcnJvcik7XG4gIH1cbiAgcmV0dXJuIHNlbGY7XG59O1xuXG5mdW5jdGlvbiBnZXRUaGVuKG9iaikge1xuICAvLyBNYWtlIHN1cmUgd2Ugb25seSBhY2Nlc3MgdGhlIGFjY2Vzc29yIG9uY2UgYXMgcmVxdWlyZWQgYnkgdGhlIHNwZWNcbiAgdmFyIHRoZW4gPSBvYmogJiYgb2JqLnRoZW47XG4gIGlmIChvYmogJiYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpICYmIHR5cGVvZiB0aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGFwcHlUaGVuKCkge1xuICAgICAgdGhlbi5hcHBseShvYmosIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzYWZlbHlSZXNvbHZlVGhlbmFibGUoc2VsZiwgdGhlbmFibGUpIHtcbiAgLy8gRWl0aGVyIGZ1bGZpbGwsIHJlamVjdCBvciByZWplY3Qgd2l0aCBlcnJvclxuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIG9uRXJyb3IodmFsdWUpIHtcbiAgICBpZiAoY2FsbGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgaGFuZGxlcnMucmVqZWN0KHNlbGYsIHZhbHVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uU3VjY2Vzcyh2YWx1ZSkge1xuICAgIGlmIChjYWxsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICBoYW5kbGVycy5yZXNvbHZlKHNlbGYsIHZhbHVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyeVRvVW53cmFwKCkge1xuICAgIHRoZW5hYmxlKG9uU3VjY2Vzcywgb25FcnJvcik7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gdHJ5Q2F0Y2godHJ5VG9VbndyYXApO1xuICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gJ2Vycm9yJykge1xuICAgIG9uRXJyb3IocmVzdWx0LnZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cnlDYXRjaChmdW5jLCB2YWx1ZSkge1xuICB2YXIgb3V0ID0ge307XG4gIHRyeSB7XG4gICAgb3V0LnZhbHVlID0gZnVuYyh2YWx1ZSk7XG4gICAgb3V0LnN0YXR1cyA9ICdzdWNjZXNzJztcbiAgfSBjYXRjaCAoZSkge1xuICAgIG91dC5zdGF0dXMgPSAnZXJyb3InO1xuICAgIG91dC52YWx1ZSA9IGU7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cblxuUHJvbWlzZS5yZXNvbHZlID0gcmVzb2x2ZTtcbmZ1bmN0aW9uIHJlc29sdmUodmFsdWUpIHtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgdGhpcykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gaGFuZGxlcnMucmVzb2x2ZShuZXcgdGhpcyhJTlRFUk5BTCksIHZhbHVlKTtcbn1cblxuUHJvbWlzZS5yZWplY3QgPSByZWplY3Q7XG5mdW5jdGlvbiByZWplY3QocmVhc29uKSB7XG4gIHZhciBwcm9taXNlID0gbmV3IHRoaXMoSU5URVJOQUwpO1xuICByZXR1cm4gaGFuZGxlcnMucmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG59XG5cblByb21pc2UuYWxsID0gYWxsO1xuZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyYWJsZSkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICByZXR1cm4gdGhpcy5yZWplY3QobmV3IFR5cGVFcnJvcignbXVzdCBiZSBhbiBhcnJheScpKTtcbiAgfVxuXG4gIHZhciBsZW4gPSBpdGVyYWJsZS5sZW5ndGg7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgaWYgKCFsZW4pIHtcbiAgICByZXR1cm4gdGhpcy5yZXNvbHZlKFtdKTtcbiAgfVxuXG4gIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkobGVuKTtcbiAgdmFyIHJlc29sdmVkID0gMDtcbiAgdmFyIGkgPSAtMTtcbiAgdmFyIHByb21pc2UgPSBuZXcgdGhpcyhJTlRFUk5BTCk7XG5cbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIGFsbFJlc29sdmVyKGl0ZXJhYmxlW2ldLCBpKTtcbiAgfVxuICByZXR1cm4gcHJvbWlzZTtcbiAgZnVuY3Rpb24gYWxsUmVzb2x2ZXIodmFsdWUsIGkpIHtcbiAgICBzZWxmLnJlc29sdmUodmFsdWUpLnRoZW4ocmVzb2x2ZUZyb21BbGwsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgaGFuZGxlcnMucmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBmdW5jdGlvbiByZXNvbHZlRnJvbUFsbChvdXRWYWx1ZSkge1xuICAgICAgdmFsdWVzW2ldID0gb3V0VmFsdWU7XG4gICAgICBpZiAoKytyZXNvbHZlZCA9PT0gbGVuICYmICFjYWxsZWQpIHtcbiAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgaGFuZGxlcnMucmVzb2x2ZShwcm9taXNlLCB2YWx1ZXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5Qcm9taXNlLnJhY2UgPSByYWNlO1xuZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcmFibGUpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgcmV0dXJuIHRoaXMucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ211c3QgYmUgYW4gYXJyYXknKSk7XG4gIH1cblxuICB2YXIgbGVuID0gaXRlcmFibGUubGVuZ3RoO1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIGlmICghbGVuKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzb2x2ZShbXSk7XG4gIH1cblxuICB2YXIgaSA9IC0xO1xuICB2YXIgcHJvbWlzZSA9IG5ldyB0aGlzKElOVEVSTkFMKTtcblxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcmVzb2x2ZXIoaXRlcmFibGVbaV0pO1xuICB9XG4gIHJldHVybiBwcm9taXNlO1xuICBmdW5jdGlvbiByZXNvbHZlcih2YWx1ZSkge1xuICAgIHNlbGYucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgIGhhbmRsZXJzLnJlc29sdmUocHJvbWlzZSwgcmVzcG9uc2UpO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgaGFuZGxlcnMucmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG59LHtcIjFcIjoxfV0sMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5pZiAodHlwZW9mIGdsb2JhbC5Qcm9taXNlICE9PSAnZnVuY3Rpb24nKSB7XG4gIGdsb2JhbC5Qcm9taXNlID0gX2RlcmVxXygyKTtcbn1cblxufSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG59LHtcIjJcIjoyfV0sNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gZ2V0SURCKCkge1xuICAgIC8qIGdsb2JhbCBpbmRleGVkREIsd2Via2l0SW5kZXhlZERCLG1vekluZGV4ZWREQixPSW5kZXhlZERCLG1zSW5kZXhlZERCICovXG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbmRleGVkREIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXhlZERCO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygd2Via2l0SW5kZXhlZERCICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHdlYmtpdEluZGV4ZWREQjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG1vekluZGV4ZWREQiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBtb3pJbmRleGVkREI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBPSW5kZXhlZERCICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIE9JbmRleGVkREI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBtc0luZGV4ZWREQiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBtc0luZGV4ZWREQjtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbn1cblxudmFyIGlkYiA9IGdldElEQigpO1xuXG5mdW5jdGlvbiBpc0luZGV4ZWREQlZhbGlkKCkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIEluaXRpYWxpemUgSW5kZXhlZERCOyBmYWxsIGJhY2sgdG8gdmVuZG9yLXByZWZpeGVkIHZlcnNpb25zXG4gICAgICAgIC8vIGlmIG5lZWRlZC5cbiAgICAgICAgaWYgKCFpZGIgfHwgIWlkYi5vcGVuKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgbWltaWMgUG91Y2hEQiBoZXJlO1xuICAgICAgICAvL1xuICAgICAgICAvLyBXZSB0ZXN0IGZvciBvcGVuRGF0YWJhc2UgYmVjYXVzZSBJRSBNb2JpbGUgaWRlbnRpZmllcyBpdHNlbGZcbiAgICAgICAgLy8gYXMgU2FmYXJpLiBPaCB0aGUgbHVsei4uLlxuICAgICAgICB2YXIgaXNTYWZhcmkgPSB0eXBlb2Ygb3BlbkRhdGFiYXNlICE9PSAndW5kZWZpbmVkJyAmJiAvKFNhZmFyaXxpUGhvbmV8aVBhZHxpUG9kKS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiAhL0Nocm9tZS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiAhL0JsYWNrQmVycnkvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKTtcblxuICAgICAgICB2YXIgaGFzRmV0Y2ggPSB0eXBlb2YgZmV0Y2ggPT09ICdmdW5jdGlvbicgJiYgZmV0Y2gudG9TdHJpbmcoKS5pbmRleE9mKCdbbmF0aXZlIGNvZGUnKSAhPT0gLTE7XG5cbiAgICAgICAgLy8gU2FmYXJpIDwxMC4xIGRvZXMgbm90IG1lZXQgb3VyIHJlcXVpcmVtZW50cyBmb3IgSURCIHN1cHBvcnRcbiAgICAgICAgLy8gKHNlZTogaHR0cHM6Ly9naXRodWIuY29tL3BvdWNoZGIvcG91Y2hkYi9pc3N1ZXMvNTU3MikuXG4gICAgICAgIC8vIFNhZmFyaSAxMC4xIHNoaXBwZWQgd2l0aCBmZXRjaCwgd2UgY2FuIHVzZSB0aGF0IHRvIGRldGVjdCBpdC5cbiAgICAgICAgLy8gTm90ZTogdGhpcyBjcmVhdGVzIGlzc3VlcyB3aXRoIGB3aW5kb3cuZmV0Y2hgIHBvbHlmaWxscyBhbmRcbiAgICAgICAgLy8gb3ZlcnJpZGVzOyBzZWU6XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9sb2NhbEZvcmFnZS9sb2NhbEZvcmFnZS9pc3N1ZXMvODU2XG4gICAgICAgIHJldHVybiAoIWlzU2FmYXJpIHx8IGhhc0ZldGNoKSAmJiB0eXBlb2YgaW5kZXhlZERCICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAvLyBzb21lIG91dGRhdGVkIGltcGxlbWVudGF0aW9ucyBvZiBJREIgdGhhdCBhcHBlYXIgb24gU2Ftc3VuZ1xuICAgICAgICAvLyBhbmQgSFRDIEFuZHJvaWQgZGV2aWNlcyA8NC40IGFyZSBtaXNzaW5nIElEQktleVJhbmdlXG4gICAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvbG9jYWxGb3JhZ2UvaXNzdWVzLzEyOFxuICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL2xvY2FsRm9yYWdlL2lzc3Vlcy8yNzJcbiAgICAgICAgdHlwZW9mIElEQktleVJhbmdlICE9PSAndW5kZWZpbmVkJztcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbi8vIEFic3RyYWN0cyBjb25zdHJ1Y3RpbmcgYSBCbG9iIG9iamVjdCwgc28gaXQgYWxzbyB3b3JrcyBpbiBvbGRlclxuLy8gYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IHRoZSBuYXRpdmUgQmxvYiBjb25zdHJ1Y3Rvci4gKGkuZS5cbi8vIG9sZCBRdFdlYktpdCB2ZXJzaW9ucywgYXQgbGVhc3QpLlxuLy8gQWJzdHJhY3RzIGNvbnN0cnVjdGluZyBhIEJsb2Igb2JqZWN0LCBzbyBpdCBhbHNvIHdvcmtzIGluIG9sZGVyXG4vLyBicm93c2VycyB0aGF0IGRvbid0IHN1cHBvcnQgdGhlIG5hdGl2ZSBCbG9iIGNvbnN0cnVjdG9yLiAoaS5lLlxuLy8gb2xkIFF0V2ViS2l0IHZlcnNpb25zLCBhdCBsZWFzdCkuXG5mdW5jdGlvbiBjcmVhdGVCbG9iKHBhcnRzLCBwcm9wZXJ0aWVzKSB7XG4gICAgLyogZ2xvYmFsIEJsb2JCdWlsZGVyLE1TQmxvYkJ1aWxkZXIsTW96QmxvYkJ1aWxkZXIsV2ViS2l0QmxvYkJ1aWxkZXIgKi9cbiAgICBwYXJ0cyA9IHBhcnRzIHx8IFtdO1xuICAgIHByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzIHx8IHt9O1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBuZXcgQmxvYihwYXJ0cywgcHJvcGVydGllcyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZS5uYW1lICE9PSAnVHlwZUVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgQnVpbGRlciA9IHR5cGVvZiBCbG9iQnVpbGRlciAhPT0gJ3VuZGVmaW5lZCcgPyBCbG9iQnVpbGRlciA6IHR5cGVvZiBNU0Jsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IE1TQmxvYkJ1aWxkZXIgOiB0eXBlb2YgTW96QmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnID8gTW96QmxvYkJ1aWxkZXIgOiBXZWJLaXRCbG9iQnVpbGRlcjtcbiAgICAgICAgdmFyIGJ1aWxkZXIgPSBuZXcgQnVpbGRlcigpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBidWlsZGVyLmFwcGVuZChwYXJ0c1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1aWxkZXIuZ2V0QmxvYihwcm9wZXJ0aWVzLnR5cGUpO1xuICAgIH1cbn1cblxuLy8gVGhpcyBpcyBDb21tb25KUyBiZWNhdXNlIGxpZSBpcyBhbiBleHRlcm5hbCBkZXBlbmRlbmN5LCBzbyBSb2xsdXBcbi8vIGNhbiBqdXN0IGlnbm9yZSBpdC5cbmlmICh0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBJbiB0aGUgXCJub3Byb21pc2VzXCIgYnVpbGQgdGhpcyB3aWxsIGp1c3QgdGhyb3cgaWYgeW91IGRvbid0IGhhdmVcbiAgICAvLyBhIGdsb2JhbCBwcm9taXNlIG9iamVjdCwgYnV0IGl0IHdvdWxkIHRocm93IGFueXdheSBsYXRlci5cbiAgICBfZGVyZXFfKDMpO1xufVxudmFyIFByb21pc2UkMSA9IFByb21pc2U7XG5cbmZ1bmN0aW9uIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjaykge1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZXhlY3V0ZVR3b0NhbGxiYWNrcyhwcm9taXNlLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJvbWlzZS50aGVuKGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGVycm9yQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJvbWlzZVtcImNhdGNoXCJdKGVycm9yQ2FsbGJhY2spO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplS2V5KGtleSkge1xuICAgIC8vIENhc3QgdGhlIGtleSB0byBhIHN0cmluZywgYXMgdGhhdCdzIGFsbCB3ZSBjYW4gc2V0IGFzIGEga2V5LlxuICAgIGlmICh0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zb2xlLndhcm4oa2V5ICsgJyB1c2VkIGFzIGEga2V5LCBidXQgaXQgaXMgbm90IGEgc3RyaW5nLicpO1xuICAgICAgICBrZXkgPSBTdHJpbmcoa2V5KTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5O1xufVxuXG5mdW5jdGlvbiBnZXRDYWxsYmFjaygpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAmJiB0eXBlb2YgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcbiAgICB9XG59XG5cbi8vIFNvbWUgY29kZSBvcmlnaW5hbGx5IGZyb20gYXN5bmNfc3RvcmFnZS5qcyBpblxuLy8gW0dhaWFdKGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhLWIyZy9nYWlhKS5cblxudmFyIERFVEVDVF9CTE9CX1NVUFBPUlRfU1RPUkUgPSAnbG9jYWwtZm9yYWdlLWRldGVjdC1ibG9iLXN1cHBvcnQnO1xudmFyIHN1cHBvcnRzQmxvYnMgPSB2b2lkIDA7XG52YXIgZGJDb250ZXh0cyA9IHt9O1xudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLy8gVHJhbnNhY3Rpb24gTW9kZXNcbnZhciBSRUFEX09OTFkgPSAncmVhZG9ubHknO1xudmFyIFJFQURfV1JJVEUgPSAncmVhZHdyaXRlJztcblxuLy8gVHJhbnNmb3JtIGEgYmluYXJ5IHN0cmluZyB0byBhbiBhcnJheSBidWZmZXIsIGJlY2F1c2Ugb3RoZXJ3aXNlXG4vLyB3ZWlyZCBzdHVmZiBoYXBwZW5zIHdoZW4geW91IHRyeSB0byB3b3JrIHdpdGggdGhlIGJpbmFyeSBzdHJpbmcgZGlyZWN0bHkuXG4vLyBJdCBpcyBrbm93bi5cbi8vIEZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNDk2NzY0Ny8gKGNvbnRpbnVlcyBvbiBuZXh0IGxpbmUpXG4vLyBlbmNvZGUtZGVjb2RlLWltYWdlLXdpdGgtYmFzZTY0LWJyZWFrcy1pbWFnZSAoMjAxMy0wNC0yMSlcbmZ1bmN0aW9uIF9iaW5TdHJpbmdUb0FycmF5QnVmZmVyKGJpbikge1xuICAgIHZhciBsZW5ndGggPSBiaW4ubGVuZ3RoO1xuICAgIHZhciBidWYgPSBuZXcgQXJyYXlCdWZmZXIobGVuZ3RoKTtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoYnVmKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFycltpXSA9IGJpbi5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgICByZXR1cm4gYnVmO1xufVxuXG4vL1xuLy8gQmxvYnMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gYWxsIHZlcnNpb25zIG9mIEluZGV4ZWREQiwgbm90YWJseVxuLy8gQ2hyb21lIDwzNyBhbmQgQW5kcm9pZCA8NS4gSW4gdGhvc2UgdmVyc2lvbnMsIHN0b3JpbmcgYSBibG9iIHdpbGwgdGhyb3cuXG4vL1xuLy8gVmFyaW91cyBvdGhlciBibG9iIGJ1Z3MgZXhpc3QgaW4gQ2hyb21lIHYzNy00MiAoaW5jbHVzaXZlKS5cbi8vIERldGVjdGluZyB0aGVtIGlzIGV4cGVuc2l2ZSBhbmQgY29uZnVzaW5nIHRvIHVzZXJzLCBhbmQgQ2hyb21lIDM3LTQyXG4vLyBpcyBhdCB2ZXJ5IGxvdyB1c2FnZSB3b3JsZHdpZGUsIHNvIHdlIGRvIGEgaGFja3kgdXNlckFnZW50IGNoZWNrIGluc3RlYWQuXG4vL1xuLy8gY29udGVudC10eXBlIGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQwODEyMFxuLy8gNDA0IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0NzkxNlxuLy8gRmlsZVJlYWRlciBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDc4MzZcbi8vXG4vLyBDb2RlIGJvcnJvd2VkIGZyb20gUG91Y2hEQi4gU2VlOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3BvdWNoZGIvcG91Y2hkYi9ibG9iL21hc3Rlci9wYWNrYWdlcy9ub2RlX21vZHVsZXMvcG91Y2hkYi1hZGFwdGVyLWlkYi9zcmMvYmxvYlN1cHBvcnQuanNcbi8vXG5mdW5jdGlvbiBfY2hlY2tCbG9iU3VwcG9ydFdpdGhvdXRDYWNoaW5nKGlkYikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIHZhciB0eG4gPSBpZGIudHJhbnNhY3Rpb24oREVURUNUX0JMT0JfU1VQUE9SVF9TVE9SRSwgUkVBRF9XUklURSk7XG4gICAgICAgIHZhciBibG9iID0gY3JlYXRlQmxvYihbJyddKTtcbiAgICAgICAgdHhuLm9iamVjdFN0b3JlKERFVEVDVF9CTE9CX1NVUFBPUlRfU1RPUkUpLnB1dChibG9iLCAna2V5Jyk7XG5cbiAgICAgICAgdHhuLm9uYWJvcnQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIHRyYW5zYWN0aW9uIGFib3J0cyBub3cgaXRzIGR1ZSB0byBub3QgYmVpbmcgYWJsZSB0b1xuICAgICAgICAgICAgLy8gd3JpdGUgdG8gdGhlIGRhdGFiYXNlLCBsaWtlbHkgZHVlIHRvIHRoZSBkaXNrIGJlaW5nIGZ1bGxcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0eG4ub25jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaGVkQ2hyb21lID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLyk7XG4gICAgICAgICAgICB2YXIgbWF0Y2hlZEVkZ2UgPSBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9FZGdlXFwvLyk7XG4gICAgICAgICAgICAvLyBNUyBFZGdlIHByZXRlbmRzIHRvIGJlIENocm9tZSA0MjpcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaGg4NjkzMDElMjh2PXZzLjg1JTI5LmFzcHhcbiAgICAgICAgICAgIHJlc29sdmUobWF0Y2hlZEVkZ2UgfHwgIW1hdGNoZWRDaHJvbWUgfHwgcGFyc2VJbnQobWF0Y2hlZENocm9tZVsxXSwgMTApID49IDQzKTtcbiAgICAgICAgfTtcbiAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBlcnJvciwgc28gYXNzdW1lIHVuc3VwcG9ydGVkXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIF9jaGVja0Jsb2JTdXBwb3J0KGlkYikge1xuICAgIGlmICh0eXBlb2Ygc3VwcG9ydHNCbG9icyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlJDEucmVzb2x2ZShzdXBwb3J0c0Jsb2JzKTtcbiAgICB9XG4gICAgcmV0dXJuIF9jaGVja0Jsb2JTdXBwb3J0V2l0aG91dENhY2hpbmcoaWRiKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBzdXBwb3J0c0Jsb2JzID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBzdXBwb3J0c0Jsb2JzO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBfZGVmZXJSZWFkaW5lc3MoZGJJbmZvKSB7XG4gICAgdmFyIGRiQ29udGV4dCA9IGRiQ29udGV4dHNbZGJJbmZvLm5hbWVdO1xuXG4gICAgLy8gQ3JlYXRlIGEgZGVmZXJyZWQgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBkYXRhYmFzZSBvcGVyYXRpb24uXG4gICAgdmFyIGRlZmVycmVkT3BlcmF0aW9uID0ge307XG5cbiAgICBkZWZlcnJlZE9wZXJhdGlvbi5wcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGRlZmVycmVkT3BlcmF0aW9uLnJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICBkZWZlcnJlZE9wZXJhdGlvbi5yZWplY3QgPSByZWplY3Q7XG4gICAgfSk7XG5cbiAgICAvLyBFbnF1ZXVlIHRoZSBkZWZlcnJlZCBvcGVyYXRpb24uXG4gICAgZGJDb250ZXh0LmRlZmVycmVkT3BlcmF0aW9ucy5wdXNoKGRlZmVycmVkT3BlcmF0aW9uKTtcblxuICAgIC8vIENoYWluIGl0cyBwcm9taXNlIHRvIHRoZSBkYXRhYmFzZSByZWFkaW5lc3MuXG4gICAgaWYgKCFkYkNvbnRleHQuZGJSZWFkeSkge1xuICAgICAgICBkYkNvbnRleHQuZGJSZWFkeSA9IGRlZmVycmVkT3BlcmF0aW9uLnByb21pc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZGJDb250ZXh0LmRiUmVhZHkgPSBkYkNvbnRleHQuZGJSZWFkeS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZE9wZXJhdGlvbi5wcm9taXNlO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9hZHZhbmNlUmVhZGluZXNzKGRiSW5mbykge1xuICAgIHZhciBkYkNvbnRleHQgPSBkYkNvbnRleHRzW2RiSW5mby5uYW1lXTtcblxuICAgIC8vIERlcXVldWUgYSBkZWZlcnJlZCBvcGVyYXRpb24uXG4gICAgdmFyIGRlZmVycmVkT3BlcmF0aW9uID0gZGJDb250ZXh0LmRlZmVycmVkT3BlcmF0aW9ucy5wb3AoKTtcblxuICAgIC8vIFJlc29sdmUgaXRzIHByb21pc2UgKHdoaWNoIGlzIHBhcnQgb2YgdGhlIGRhdGFiYXNlIHJlYWRpbmVzc1xuICAgIC8vIGNoYWluIG9mIHByb21pc2VzKS5cbiAgICBpZiAoZGVmZXJyZWRPcGVyYXRpb24pIHtcbiAgICAgICAgZGVmZXJyZWRPcGVyYXRpb24ucmVzb2x2ZSgpO1xuICAgICAgICByZXR1cm4gZGVmZXJyZWRPcGVyYXRpb24ucHJvbWlzZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9yZWplY3RSZWFkaW5lc3MoZGJJbmZvLCBlcnIpIHtcbiAgICB2YXIgZGJDb250ZXh0ID0gZGJDb250ZXh0c1tkYkluZm8ubmFtZV07XG5cbiAgICAvLyBEZXF1ZXVlIGEgZGVmZXJyZWQgb3BlcmF0aW9uLlxuICAgIHZhciBkZWZlcnJlZE9wZXJhdGlvbiA9IGRiQ29udGV4dC5kZWZlcnJlZE9wZXJhdGlvbnMucG9wKCk7XG5cbiAgICAvLyBSZWplY3QgaXRzIHByb21pc2UgKHdoaWNoIGlzIHBhcnQgb2YgdGhlIGRhdGFiYXNlIHJlYWRpbmVzc1xuICAgIC8vIGNoYWluIG9mIHByb21pc2VzKS5cbiAgICBpZiAoZGVmZXJyZWRPcGVyYXRpb24pIHtcbiAgICAgICAgZGVmZXJyZWRPcGVyYXRpb24ucmVqZWN0KGVycik7XG4gICAgICAgIHJldHVybiBkZWZlcnJlZE9wZXJhdGlvbi5wcm9taXNlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX2dldENvbm5lY3Rpb24oZGJJbmZvLCB1cGdyYWRlTmVlZGVkKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBkYkNvbnRleHRzW2RiSW5mby5uYW1lXSA9IGRiQ29udGV4dHNbZGJJbmZvLm5hbWVdIHx8IGNyZWF0ZURiQ29udGV4dCgpO1xuXG4gICAgICAgIGlmIChkYkluZm8uZGIpIHtcbiAgICAgICAgICAgIGlmICh1cGdyYWRlTmVlZGVkKSB7XG4gICAgICAgICAgICAgICAgX2RlZmVyUmVhZGluZXNzKGRiSW5mbyk7XG4gICAgICAgICAgICAgICAgZGJJbmZvLmRiLmNsb3NlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGRiSW5mby5kYik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGJBcmdzID0gW2RiSW5mby5uYW1lXTtcblxuICAgICAgICBpZiAodXBncmFkZU5lZWRlZCkge1xuICAgICAgICAgICAgZGJBcmdzLnB1c2goZGJJbmZvLnZlcnNpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wZW5yZXEgPSBpZGIub3Blbi5hcHBseShpZGIsIGRiQXJncyk7XG5cbiAgICAgICAgaWYgKHVwZ3JhZGVOZWVkZWQpIHtcbiAgICAgICAgICAgIG9wZW5yZXEub251cGdyYWRlbmVlZGVkID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGIgPSBvcGVucmVxLnJlc3VsdDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZShkYkluZm8uc3RvcmVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUub2xkVmVyc2lvbiA8PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGRlZCB3aGVuIHN1cHBvcnQgZm9yIGJsb2Igc2hpbXMgd2FzIGFkZGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZShERVRFQ1RfQkxPQl9TVVBQT1JUX1NUT1JFKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChleC5uYW1lID09PSAnQ29uc3RyYWludEVycm9yJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdUaGUgZGF0YWJhc2UgXCInICsgZGJJbmZvLm5hbWUgKyAnXCInICsgJyBoYXMgYmVlbiB1cGdyYWRlZCBmcm9tIHZlcnNpb24gJyArIGUub2xkVmVyc2lvbiArICcgdG8gdmVyc2lvbiAnICsgZS5uZXdWZXJzaW9uICsgJywgYnV0IHRoZSBzdG9yYWdlIFwiJyArIGRiSW5mby5zdG9yZU5hbWUgKyAnXCIgYWxyZWFkeSBleGlzdHMuJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBleDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBvcGVucmVxLm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgcmVqZWN0KG9wZW5yZXEuZXJyb3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIG9wZW5yZXEub25zdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGRiID0gb3BlbnJlcS5yZXN1bHQ7XG4gICAgICAgICAgICBkYi5vbnZlcnNpb25jaGFuZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIC8vIFRyaWdnZXJlZCB3aGVuIHRoZSBkYXRhYmFzZSBpcyBtb2RpZmllZCAoZS5nLiBhZGRpbmcgYW4gb2JqZWN0U3RvcmUpIG9yXG4gICAgICAgICAgICAgICAgLy8gZGVsZXRlZCAoZXZlbiB3aGVuIGluaXRpYXRlZCBieSBvdGhlciBzZXNzaW9ucyBpbiBkaWZmZXJlbnQgdGFicykuXG4gICAgICAgICAgICAgICAgLy8gQ2xvc2luZyB0aGUgY29ubmVjdGlvbiBoZXJlIHByZXZlbnRzIHRob3NlIG9wZXJhdGlvbnMgZnJvbSBiZWluZyBibG9ja2VkLlxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBkYXRhYmFzZSBpcyBhY2Nlc3NlZCBhZ2FpbiBsYXRlciBieSB0aGlzIGluc3RhbmNlLCB0aGUgY29ubmVjdGlvblxuICAgICAgICAgICAgICAgIC8vIHdpbGwgYmUgcmVvcGVuZWQgb3IgdGhlIGRhdGFiYXNlIHJlY3JlYXRlZCBhcyBuZWVkZWQuXG4gICAgICAgICAgICAgICAgZS50YXJnZXQuY2xvc2UoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXNvbHZlKGRiKTtcbiAgICAgICAgICAgIF9hZHZhbmNlUmVhZGluZXNzKGRiSW5mbyk7XG4gICAgICAgIH07XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIF9nZXRPcmlnaW5hbENvbm5lY3Rpb24oZGJJbmZvKSB7XG4gICAgcmV0dXJuIF9nZXRDb25uZWN0aW9uKGRiSW5mbywgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBfZ2V0VXBncmFkZWRDb25uZWN0aW9uKGRiSW5mbykge1xuICAgIHJldHVybiBfZ2V0Q29ubmVjdGlvbihkYkluZm8sIHRydWUpO1xufVxuXG5mdW5jdGlvbiBfaXNVcGdyYWRlTmVlZGVkKGRiSW5mbywgZGVmYXVsdFZlcnNpb24pIHtcbiAgICBpZiAoIWRiSW5mby5kYikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgaXNOZXdTdG9yZSA9ICFkYkluZm8uZGIub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyhkYkluZm8uc3RvcmVOYW1lKTtcbiAgICB2YXIgaXNEb3duZ3JhZGUgPSBkYkluZm8udmVyc2lvbiA8IGRiSW5mby5kYi52ZXJzaW9uO1xuICAgIHZhciBpc1VwZ3JhZGUgPSBkYkluZm8udmVyc2lvbiA+IGRiSW5mby5kYi52ZXJzaW9uO1xuXG4gICAgaWYgKGlzRG93bmdyYWRlKSB7XG4gICAgICAgIC8vIElmIHRoZSB2ZXJzaW9uIGlzIG5vdCB0aGUgZGVmYXVsdCBvbmVcbiAgICAgICAgLy8gdGhlbiB3YXJuIGZvciBpbXBvc3NpYmxlIGRvd25ncmFkZS5cbiAgICAgICAgaWYgKGRiSW5mby52ZXJzaW9uICE9PSBkZWZhdWx0VmVyc2lvbikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdUaGUgZGF0YWJhc2UgXCInICsgZGJJbmZvLm5hbWUgKyAnXCInICsgXCIgY2FuJ3QgYmUgZG93bmdyYWRlZCBmcm9tIHZlcnNpb24gXCIgKyBkYkluZm8uZGIudmVyc2lvbiArICcgdG8gdmVyc2lvbiAnICsgZGJJbmZvLnZlcnNpb24gKyAnLicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFsaWduIHRoZSB2ZXJzaW9ucyB0byBwcmV2ZW50IGVycm9ycy5cbiAgICAgICAgZGJJbmZvLnZlcnNpb24gPSBkYkluZm8uZGIudmVyc2lvbjtcbiAgICB9XG5cbiAgICBpZiAoaXNVcGdyYWRlIHx8IGlzTmV3U3RvcmUpIHtcbiAgICAgICAgLy8gSWYgdGhlIHN0b3JlIGlzIG5ldyB0aGVuIGluY3JlbWVudCB0aGUgdmVyc2lvbiAoaWYgbmVlZGVkKS5cbiAgICAgICAgLy8gVGhpcyB3aWxsIHRyaWdnZXIgYW4gXCJ1cGdyYWRlbmVlZGVkXCIgZXZlbnQgd2hpY2ggaXMgcmVxdWlyZWRcbiAgICAgICAgLy8gZm9yIGNyZWF0aW5nIGEgc3RvcmUuXG4gICAgICAgIGlmIChpc05ld1N0b3JlKSB7XG4gICAgICAgICAgICB2YXIgaW5jVmVyc2lvbiA9IGRiSW5mby5kYi52ZXJzaW9uICsgMTtcbiAgICAgICAgICAgIGlmIChpbmNWZXJzaW9uID4gZGJJbmZvLnZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICBkYkluZm8udmVyc2lvbiA9IGluY1ZlcnNpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIGVuY29kZSBhIGJsb2IgZm9yIGluZGV4ZWRkYiBlbmdpbmVzIHRoYXQgZG9uJ3Qgc3VwcG9ydCBibG9ic1xuZnVuY3Rpb24gX2VuY29kZUJsb2IoYmxvYikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgIHJlYWRlci5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgICByZWFkZXIub25sb2FkZW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHZhciBiYXNlNjQgPSBidG9hKGUudGFyZ2V0LnJlc3VsdCB8fCAnJyk7XG4gICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgICBfX2xvY2FsX2ZvcmFnZV9lbmNvZGVkX2Jsb2I6IHRydWUsXG4gICAgICAgICAgICAgICAgZGF0YTogYmFzZTY0LFxuICAgICAgICAgICAgICAgIHR5cGU6IGJsb2IudHlwZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHJlYWRlci5yZWFkQXNCaW5hcnlTdHJpbmcoYmxvYik7XG4gICAgfSk7XG59XG5cbi8vIGRlY29kZSBhbiBlbmNvZGVkIGJsb2JcbmZ1bmN0aW9uIF9kZWNvZGVCbG9iKGVuY29kZWRCbG9iKSB7XG4gICAgdmFyIGFycmF5QnVmZiA9IF9iaW5TdHJpbmdUb0FycmF5QnVmZmVyKGF0b2IoZW5jb2RlZEJsb2IuZGF0YSkpO1xuICAgIHJldHVybiBjcmVhdGVCbG9iKFthcnJheUJ1ZmZdLCB7IHR5cGU6IGVuY29kZWRCbG9iLnR5cGUgfSk7XG59XG5cbi8vIGlzIHRoaXMgb25lIG9mIG91ciBmYW5jeSBlbmNvZGVkIGJsb2JzP1xuZnVuY3Rpb24gX2lzRW5jb2RlZEJsb2IodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdmFsdWUuX19sb2NhbF9mb3JhZ2VfZW5jb2RlZF9ibG9iO1xufVxuXG4vLyBTcGVjaWFsaXplIHRoZSBkZWZhdWx0IGByZWFkeSgpYCBmdW5jdGlvbiBieSBtYWtpbmcgaXQgZGVwZW5kZW50XG4vLyBvbiB0aGUgY3VycmVudCBkYXRhYmFzZSBvcGVyYXRpb25zLiBUaHVzLCB0aGUgZHJpdmVyIHdpbGwgYmUgYWN0dWFsbHlcbi8vIHJlYWR5IHdoZW4gaXQncyBiZWVuIGluaXRpYWxpemVkIChkZWZhdWx0KSAqYW5kKiB0aGVyZSBhcmUgbm8gcGVuZGluZ1xuLy8gb3BlcmF0aW9ucyBvbiB0aGUgZGF0YWJhc2UgKGluaXRpYXRlZCBieSBzb21lIG90aGVyIGluc3RhbmNlcykuXG5mdW5jdGlvbiBfZnVsbHlSZWFkeShjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciBwcm9taXNlID0gc2VsZi5faW5pdFJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYkNvbnRleHQgPSBkYkNvbnRleHRzW3NlbGYuX2RiSW5mby5uYW1lXTtcblxuICAgICAgICBpZiAoZGJDb250ZXh0ICYmIGRiQ29udGV4dC5kYlJlYWR5KSB7XG4gICAgICAgICAgICByZXR1cm4gZGJDb250ZXh0LmRiUmVhZHk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGV4ZWN1dGVUd29DYWxsYmFja3MocHJvbWlzZSwgY2FsbGJhY2ssIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuLy8gVHJ5IHRvIGVzdGFibGlzaCBhIG5ldyBkYiBjb25uZWN0aW9uIHRvIHJlcGxhY2UgdGhlXG4vLyBjdXJyZW50IG9uZSB3aGljaCBpcyBicm9rZW4gKGkuZS4gZXhwZXJpZW5jaW5nXG4vLyBJbnZhbGlkU3RhdGVFcnJvciB3aGlsZSBjcmVhdGluZyBhIHRyYW5zYWN0aW9uKS5cbmZ1bmN0aW9uIF90cnlSZWNvbm5lY3QoZGJJbmZvKSB7XG4gICAgX2RlZmVyUmVhZGluZXNzKGRiSW5mbyk7XG5cbiAgICB2YXIgZGJDb250ZXh0ID0gZGJDb250ZXh0c1tkYkluZm8ubmFtZV07XG4gICAgdmFyIGZvcmFnZXMgPSBkYkNvbnRleHQuZm9yYWdlcztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9yYWdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZm9yYWdlID0gZm9yYWdlc1tpXTtcbiAgICAgICAgaWYgKGZvcmFnZS5fZGJJbmZvLmRiKSB7XG4gICAgICAgICAgICBmb3JhZ2UuX2RiSW5mby5kYi5jbG9zZSgpO1xuICAgICAgICAgICAgZm9yYWdlLl9kYkluZm8uZGIgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRiSW5mby5kYiA9IG51bGw7XG5cbiAgICByZXR1cm4gX2dldE9yaWdpbmFsQ29ubmVjdGlvbihkYkluZm8pLnRoZW4oZnVuY3Rpb24gKGRiKSB7XG4gICAgICAgIGRiSW5mby5kYiA9IGRiO1xuICAgICAgICBpZiAoX2lzVXBncmFkZU5lZWRlZChkYkluZm8pKSB7XG4gICAgICAgICAgICAvLyBSZW9wZW4gdGhlIGRhdGFiYXNlIGZvciB1cGdyYWRpbmcuXG4gICAgICAgICAgICByZXR1cm4gX2dldFVwZ3JhZGVkQ29ubmVjdGlvbihkYkluZm8pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYjtcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChkYikge1xuICAgICAgICAvLyBzdG9yZSB0aGUgbGF0ZXN0IGRiIHJlZmVyZW5jZVxuICAgICAgICAvLyBpbiBjYXNlIHRoZSBkYiB3YXMgdXBncmFkZWRcbiAgICAgICAgZGJJbmZvLmRiID0gZGJDb250ZXh0LmRiID0gZGI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9yYWdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZm9yYWdlc1tpXS5fZGJJbmZvLmRiID0gZGI7XG4gICAgICAgIH1cbiAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgX3JlamVjdFJlYWRpbmVzcyhkYkluZm8sIGVycik7XG4gICAgICAgIHRocm93IGVycjtcbiAgICB9KTtcbn1cblxuLy8gRkYgZG9lc24ndCBsaWtlIFByb21pc2VzIChtaWNyby10YXNrcykgYW5kIElEREIgc3RvcmUgb3BlcmF0aW9ucyxcbi8vIHNvIHdlIGhhdmUgdG8gZG8gaXQgd2l0aCBjYWxsYmFja3NcbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zYWN0aW9uKGRiSW5mbywgbW9kZSwgY2FsbGJhY2ssIHJldHJpZXMpIHtcbiAgICBpZiAocmV0cmllcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHJpZXMgPSAxO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIHZhciB0eCA9IGRiSW5mby5kYi50cmFuc2FjdGlvbihkYkluZm8uc3RvcmVOYW1lLCBtb2RlKTtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgdHgpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAocmV0cmllcyA+IDAgJiYgKCFkYkluZm8uZGIgfHwgZXJyLm5hbWUgPT09ICdJbnZhbGlkU3RhdGVFcnJvcicgfHwgZXJyLm5hbWUgPT09ICdOb3RGb3VuZEVycm9yJykpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlJDEucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICghZGJJbmZvLmRiIHx8IGVyci5uYW1lID09PSAnTm90Rm91bmRFcnJvcicgJiYgIWRiSW5mby5kYi5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKGRiSW5mby5zdG9yZU5hbWUpICYmIGRiSW5mby52ZXJzaW9uIDw9IGRiSW5mby5kYi52ZXJzaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGluY3JlYXNlIHRoZSBkYiB2ZXJzaW9uLCB0byBjcmVhdGUgdGhlIG5ldyBPYmplY3RTdG9yZVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGJJbmZvLmRiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYkluZm8udmVyc2lvbiA9IGRiSW5mby5kYi52ZXJzaW9uICsgMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBSZW9wZW4gdGhlIGRhdGFiYXNlIGZvciB1cGdyYWRpbmcuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfZ2V0VXBncmFkZWRDb25uZWN0aW9uKGRiSW5mbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90cnlSZWNvbm5lY3QoZGJJbmZvKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlVHJhbnNhY3Rpb24oZGJJbmZvLCBtb2RlLCBjYWxsYmFjaywgcmV0cmllcyAtIDEpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShjYWxsYmFjayk7XG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRGJDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8vIFJ1bm5pbmcgbG9jYWxGb3JhZ2VzIHNoYXJpbmcgYSBkYXRhYmFzZS5cbiAgICAgICAgZm9yYWdlczogW10sXG4gICAgICAgIC8vIFNoYXJlZCBkYXRhYmFzZS5cbiAgICAgICAgZGI6IG51bGwsXG4gICAgICAgIC8vIERhdGFiYXNlIHJlYWRpbmVzcyAocHJvbWlzZSkuXG4gICAgICAgIGRiUmVhZHk6IG51bGwsXG4gICAgICAgIC8vIERlZmVycmVkIG9wZXJhdGlvbnMgb24gdGhlIGRhdGFiYXNlLlxuICAgICAgICBkZWZlcnJlZE9wZXJhdGlvbnM6IFtdXG4gICAgfTtcbn1cblxuLy8gT3BlbiB0aGUgSW5kZXhlZERCIGRhdGFiYXNlIChhdXRvbWF0aWNhbGx5IGNyZWF0ZXMgb25lIGlmIG9uZSBkaWRuJ3Rcbi8vIHByZXZpb3VzbHkgZXhpc3QpLCB1c2luZyBhbnkgb3B0aW9ucyBzZXQgaW4gdGhlIGNvbmZpZy5cbmZ1bmN0aW9uIF9pbml0U3RvcmFnZShvcHRpb25zKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBkYkluZm8gPSB7XG4gICAgICAgIGRiOiBudWxsXG4gICAgfTtcblxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGZvciAodmFyIGkgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgZGJJbmZvW2ldID0gb3B0aW9uc1tpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdldCB0aGUgY3VycmVudCBjb250ZXh0IG9mIHRoZSBkYXRhYmFzZTtcbiAgICB2YXIgZGJDb250ZXh0ID0gZGJDb250ZXh0c1tkYkluZm8ubmFtZV07XG5cbiAgICAvLyAuLi5vciBjcmVhdGUgYSBuZXcgY29udGV4dC5cbiAgICBpZiAoIWRiQ29udGV4dCkge1xuICAgICAgICBkYkNvbnRleHQgPSBjcmVhdGVEYkNvbnRleHQoKTtcbiAgICAgICAgLy8gUmVnaXN0ZXIgdGhlIG5ldyBjb250ZXh0IGluIHRoZSBnbG9iYWwgY29udGFpbmVyLlxuICAgICAgICBkYkNvbnRleHRzW2RiSW5mby5uYW1lXSA9IGRiQ29udGV4dDtcbiAgICB9XG5cbiAgICAvLyBSZWdpc3RlciBpdHNlbGYgYXMgYSBydW5uaW5nIGxvY2FsRm9yYWdlIGluIHRoZSBjdXJyZW50IGNvbnRleHQuXG4gICAgZGJDb250ZXh0LmZvcmFnZXMucHVzaChzZWxmKTtcblxuICAgIC8vIFJlcGxhY2UgdGhlIGRlZmF1bHQgYHJlYWR5KClgIGZ1bmN0aW9uIHdpdGggdGhlIHNwZWNpYWxpemVkIG9uZS5cbiAgICBpZiAoIXNlbGYuX2luaXRSZWFkeSkge1xuICAgICAgICBzZWxmLl9pbml0UmVhZHkgPSBzZWxmLnJlYWR5O1xuICAgICAgICBzZWxmLnJlYWR5ID0gX2Z1bGx5UmVhZHk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGFuIGFycmF5IG9mIGluaXRpYWxpemF0aW9uIHN0YXRlcyBvZiB0aGUgcmVsYXRlZCBsb2NhbEZvcmFnZXMuXG4gICAgdmFyIGluaXRQcm9taXNlcyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gaWdub3JlRXJyb3JzKCkge1xuICAgICAgICAvLyBEb24ndCBoYW5kbGUgZXJyb3JzIGhlcmUsXG4gICAgICAgIC8vIGp1c3QgbWFrZXMgc3VyZSByZWxhdGVkIGxvY2FsRm9yYWdlcyBhcmVuJ3QgcGVuZGluZy5cbiAgICAgICAgcmV0dXJuIFByb21pc2UkMS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBkYkNvbnRleHQuZm9yYWdlcy5sZW5ndGg7IGorKykge1xuICAgICAgICB2YXIgZm9yYWdlID0gZGJDb250ZXh0LmZvcmFnZXNbal07XG4gICAgICAgIGlmIChmb3JhZ2UgIT09IHNlbGYpIHtcbiAgICAgICAgICAgIC8vIERvbid0IHdhaXQgZm9yIGl0c2VsZi4uLlxuICAgICAgICAgICAgaW5pdFByb21pc2VzLnB1c2goZm9yYWdlLl9pbml0UmVhZHkoKVtcImNhdGNoXCJdKGlnbm9yZUVycm9ycykpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGFrZSBhIHNuYXBzaG90IG9mIHRoZSByZWxhdGVkIGxvY2FsRm9yYWdlcy5cbiAgICB2YXIgZm9yYWdlcyA9IGRiQ29udGV4dC5mb3JhZ2VzLnNsaWNlKDApO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgY29ubmVjdGlvbiBwcm9jZXNzIG9ubHkgd2hlblxuICAgIC8vIGFsbCB0aGUgcmVsYXRlZCBsb2NhbEZvcmFnZXMgYXJlbid0IHBlbmRpbmcuXG4gICAgcmV0dXJuIFByb21pc2UkMS5hbGwoaW5pdFByb21pc2VzKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGJJbmZvLmRiID0gZGJDb250ZXh0LmRiO1xuICAgICAgICAvLyBHZXQgdGhlIGNvbm5lY3Rpb24gb3Igb3BlbiBhIG5ldyBvbmUgd2l0aG91dCB1cGdyYWRlLlxuICAgICAgICByZXR1cm4gX2dldE9yaWdpbmFsQ29ubmVjdGlvbihkYkluZm8pO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKGRiKSB7XG4gICAgICAgIGRiSW5mby5kYiA9IGRiO1xuICAgICAgICBpZiAoX2lzVXBncmFkZU5lZWRlZChkYkluZm8sIHNlbGYuX2RlZmF1bHRDb25maWcudmVyc2lvbikpIHtcbiAgICAgICAgICAgIC8vIFJlb3BlbiB0aGUgZGF0YWJhc2UgZm9yIHVwZ3JhZGluZy5cbiAgICAgICAgICAgIHJldHVybiBfZ2V0VXBncmFkZWRDb25uZWN0aW9uKGRiSW5mbyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRiO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKGRiKSB7XG4gICAgICAgIGRiSW5mby5kYiA9IGRiQ29udGV4dC5kYiA9IGRiO1xuICAgICAgICBzZWxmLl9kYkluZm8gPSBkYkluZm87XG4gICAgICAgIC8vIFNoYXJlIHRoZSBmaW5hbCBjb25uZWN0aW9uIGFtb25nc3QgcmVsYXRlZCBsb2NhbEZvcmFnZXMuXG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgZm9yYWdlcy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgdmFyIGZvcmFnZSA9IGZvcmFnZXNba107XG4gICAgICAgICAgICBpZiAoZm9yYWdlICE9PSBzZWxmKSB7XG4gICAgICAgICAgICAgICAgLy8gU2VsZiBpcyBhbHJlYWR5IHVwLXRvLWRhdGUuXG4gICAgICAgICAgICAgICAgZm9yYWdlLl9kYkluZm8uZGIgPSBkYkluZm8uZGI7XG4gICAgICAgICAgICAgICAgZm9yYWdlLl9kYkluZm8udmVyc2lvbiA9IGRiSW5mby52ZXJzaW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEl0ZW0oa2V5LCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIGtleSA9IG5vcm1hbGl6ZUtleShrZXkpO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY3JlYXRlVHJhbnNhY3Rpb24oc2VsZi5fZGJJbmZvLCBSRUFEX09OTFksIGZ1bmN0aW9uIChlcnIsIHRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoc2VsZi5fZGJJbmZvLnN0b3JlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXEgPSBzdG9yZS5nZXQoa2V5KTtcblxuICAgICAgICAgICAgICAgICAgICByZXEub25zdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcmVxLnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9pc0VuY29kZWRCbG9iKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gX2RlY29kZUJsb2IodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVxLmVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuLy8gSXRlcmF0ZSBvdmVyIGFsbCBpdGVtcyBzdG9yZWQgaW4gZGF0YWJhc2UuXG5mdW5jdGlvbiBpdGVyYXRlKGl0ZXJhdG9yLCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHNlbGYucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNyZWF0ZVRyYW5zYWN0aW9uKHNlbGYuX2RiSW5mbywgUkVBRF9PTkxZLCBmdW5jdGlvbiAoZXJyLCB0cmFuc2FjdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHNlbGYuX2RiSW5mby5zdG9yZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVxID0gc3RvcmUub3BlbkN1cnNvcigpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlcmF0aW9uTnVtYmVyID0gMTtcblxuICAgICAgICAgICAgICAgICAgICByZXEub25zdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnNvciA9IHJlcS5yZXN1bHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJzb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBjdXJzb3IudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9pc0VuY29kZWRCbG9iKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IF9kZWNvZGVCbG9iKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yKHZhbHVlLCBjdXJzb3Iua2V5LCBpdGVyYXRpb25OdW1iZXIrKyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSBpdGVyYXRvciBjYWxsYmFjayByZXR1cm5zIGFueVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIChub24tYHVuZGVmaW5lZGApIHZhbHVlLCB0aGVuIHdlIHN0b3BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgaXRlcmF0aW9uIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3JbXCJjb250aW51ZVwiXSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHJlcS5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlcS5lcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0ocmVqZWN0KTtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gc2V0SXRlbShrZXksIHZhbHVlLCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIGtleSA9IG5vcm1hbGl6ZUtleShrZXkpO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIGRiSW5mbztcbiAgICAgICAgc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZGJJbmZvID0gc2VsZi5fZGJJbmZvO1xuICAgICAgICAgICAgaWYgKHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBCbG9iXScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NoZWNrQmxvYlN1cHBvcnQoZGJJbmZvLmRiKS50aGVuKGZ1bmN0aW9uIChibG9iU3VwcG9ydCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmxvYlN1cHBvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2VuY29kZUJsb2IodmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgY3JlYXRlVHJhbnNhY3Rpb24oc2VsZi5fZGJJbmZvLCBSRUFEX1dSSVRFLCBmdW5jdGlvbiAoZXJyLCB0cmFuc2FjdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHNlbGYuX2RiSW5mby5zdG9yZU5hbWUpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSByZWFzb24gd2UgZG9uJ3QgX3NhdmVfIG51bGwgaXMgYmVjYXVzZSBJRSAxMCBkb2VzXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdCBzdXBwb3J0IHNhdmluZyB0aGUgYG51bGxgIHR5cGUgaW4gSW5kZXhlZERCLiBIb3dcbiAgICAgICAgICAgICAgICAgICAgLy8gaXJvbmljLCBnaXZlbiB0aGUgYnVnIGJlbG93IVxuICAgICAgICAgICAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL2xvY2FsRm9yYWdlL2lzc3Vlcy8xNjFcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXEgPSBzdG9yZS5wdXQodmFsdWUsIGtleSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24ub25jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhc3QgdG8gdW5kZWZpbmVkIHNvIHRoZSB2YWx1ZSBwYXNzZWQgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGxiYWNrL3Byb21pc2UgaXMgdGhlIHNhbWUgYXMgd2hhdCBvbmUgd291bGQgZ2V0IG91dFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb2YgYGdldEl0ZW0oKWAgbGF0ZXIuIFRoaXMgbGVhZHMgdG8gc29tZSB3ZWlyZG5lc3NcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIChzZXRJdGVtKCdmb28nLCB1bmRlZmluZWQpIHdpbGwgcmV0dXJuIGBudWxsYCksIGJ1dFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXQncyBub3QgbXkgZmF1bHQgbG9jYWxTdG9yYWdlIGlzIG91ciBiYXNlbGluZSBhbmQgdGhhdFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXQncyB3ZWlyZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24ub25hYm9ydCA9IHRyYW5zYWN0aW9uLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyID0gcmVxLmVycm9yID8gcmVxLmVycm9yIDogcmVxLnRyYW5zYWN0aW9uLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0ocmVqZWN0KTtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUl0ZW0oa2V5LCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIGtleSA9IG5vcm1hbGl6ZUtleShrZXkpO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY3JlYXRlVHJhbnNhY3Rpb24oc2VsZi5fZGJJbmZvLCBSRUFEX1dSSVRFLCBmdW5jdGlvbiAoZXJyLCB0cmFuc2FjdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHNlbGYuX2RiSW5mby5zdG9yZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSB1c2UgYSBHcnVudCB0YXNrIHRvIG1ha2UgdGhpcyBzYWZlIGZvciBJRSBhbmQgc29tZVxuICAgICAgICAgICAgICAgICAgICAvLyB2ZXJzaW9ucyBvZiBBbmRyb2lkIChpbmNsdWRpbmcgdGhvc2UgdXNlZCBieSBDb3Jkb3ZhKS5cbiAgICAgICAgICAgICAgICAgICAgLy8gTm9ybWFsbHkgSUUgd29uJ3QgbGlrZSBgLmRlbGV0ZSgpYCBhbmQgd2lsbCBpbnNpc3Qgb25cbiAgICAgICAgICAgICAgICAgICAgLy8gdXNpbmcgYFsnZGVsZXRlJ10oKWAsIGJ1dCB3ZSBoYXZlIGEgYnVpbGQgc3RlcCB0aGF0XG4gICAgICAgICAgICAgICAgICAgIC8vIGZpeGVzIHRoaXMgZm9yIHVzIG5vdy5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcSA9IHN0b3JlW1wiZGVsZXRlXCJdKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24ub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXEuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSByZXF1ZXN0IHdpbGwgYmUgYWxzbyBiZSBhYm9ydGVkIGlmIHdlJ3ZlIGV4Y2VlZGVkIG91ciBzdG9yYWdlXG4gICAgICAgICAgICAgICAgICAgIC8vIHNwYWNlLlxuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbi5vbmFib3J0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVyciA9IHJlcS5lcnJvciA/IHJlcS5lcnJvciA6IHJlcS50cmFuc2FjdGlvbi5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVtcImNhdGNoXCJdKHJlamVjdCk7XG4gICAgfSk7XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBjbGVhcihjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHNlbGYucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNyZWF0ZVRyYW5zYWN0aW9uKHNlbGYuX2RiSW5mbywgUkVBRF9XUklURSwgZnVuY3Rpb24gKGVyciwgdHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShzZWxmLl9kYkluZm8uc3RvcmVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcSA9IHN0b3JlLmNsZWFyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24ub25jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbi5vbmFib3J0ID0gdHJhbnNhY3Rpb24ub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnIgPSByZXEuZXJyb3IgPyByZXEuZXJyb3IgOiByZXEudHJhbnNhY3Rpb24uZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoKGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY3JlYXRlVHJhbnNhY3Rpb24oc2VsZi5fZGJJbmZvLCBSRUFEX09OTFksIGZ1bmN0aW9uIChlcnIsIHRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoc2VsZi5fZGJJbmZvLnN0b3JlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXEgPSBzdG9yZS5jb3VudCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlcS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcS5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHJlcS5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlcS5lcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0ocmVqZWN0KTtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIGtleShuLCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGlmIChuIDwgMCkge1xuICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY3JlYXRlVHJhbnNhY3Rpb24oc2VsZi5fZGJJbmZvLCBSRUFEX09OTFksIGZ1bmN0aW9uIChlcnIsIHRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoc2VsZi5fZGJJbmZvLnN0b3JlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhZHZhbmNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVxID0gc3RvcmUub3BlbktleUN1cnNvcigpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlcS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3Vyc29yID0gcmVxLnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY3Vyc29yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBtZWFucyB0aGVyZSB3ZXJlbid0IGVub3VnaCBrZXlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4gPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIHRoZSBmaXJzdCBrZXksIHJldHVybiBpdCBpZiB0aGF0J3Mgd2hhdCB0aGV5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2FudGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoY3Vyc29yLmtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYWR2YW5jZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBhc2sgdGhlIGN1cnNvciB0byBza2lwIGFoZWFkIG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVjb3Jkcy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWR2YW5jZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3IuYWR2YW5jZShuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHdlIGdldCBoZXJlLCB3ZSd2ZSBnb3QgdGhlIG50aCBrZXkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoY3Vyc29yLmtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHJlcS5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlcS5lcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0ocmVqZWN0KTtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIGtleXMoY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjcmVhdGVUcmFuc2FjdGlvbihzZWxmLl9kYkluZm8sIFJFQURfT05MWSwgZnVuY3Rpb24gKGVyciwgdHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShzZWxmLl9kYkluZm8uc3RvcmVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcSA9IHN0b3JlLm9wZW5LZXlDdXJzb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleXMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICByZXEub25zdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnNvciA9IHJlcS5yZXN1bHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY3Vyc29yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShrZXlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGtleXMucHVzaChjdXJzb3Iua2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcltcImNvbnRpbnVlXCJdKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVxLmVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gZHJvcEluc3RhbmNlKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2sgPSBnZXRDYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgdmFyIGN1cnJlbnRDb25maWcgPSB0aGlzLmNvbmZpZygpO1xuICAgIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyAhPT0gJ2Z1bmN0aW9uJyAmJiBvcHRpb25zIHx8IHt9O1xuICAgIGlmICghb3B0aW9ucy5uYW1lKSB7XG4gICAgICAgIG9wdGlvbnMubmFtZSA9IG9wdGlvbnMubmFtZSB8fCBjdXJyZW50Q29uZmlnLm5hbWU7XG4gICAgICAgIG9wdGlvbnMuc3RvcmVOYW1lID0gb3B0aW9ucy5zdG9yZU5hbWUgfHwgY3VycmVudENvbmZpZy5zdG9yZU5hbWU7XG4gICAgfVxuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBwcm9taXNlO1xuICAgIGlmICghb3B0aW9ucy5uYW1lKSB7XG4gICAgICAgIHByb21pc2UgPSBQcm9taXNlJDEucmVqZWN0KCdJbnZhbGlkIGFyZ3VtZW50cycpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpc0N1cnJlbnREYiA9IG9wdGlvbnMubmFtZSA9PT0gY3VycmVudENvbmZpZy5uYW1lICYmIHNlbGYuX2RiSW5mby5kYjtcblxuICAgICAgICB2YXIgZGJQcm9taXNlID0gaXNDdXJyZW50RGIgPyBQcm9taXNlJDEucmVzb2x2ZShzZWxmLl9kYkluZm8uZGIpIDogX2dldE9yaWdpbmFsQ29ubmVjdGlvbihvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChkYikge1xuICAgICAgICAgICAgdmFyIGRiQ29udGV4dCA9IGRiQ29udGV4dHNbb3B0aW9ucy5uYW1lXTtcbiAgICAgICAgICAgIHZhciBmb3JhZ2VzID0gZGJDb250ZXh0LmZvcmFnZXM7XG4gICAgICAgICAgICBkYkNvbnRleHQuZGIgPSBkYjtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9yYWdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGZvcmFnZXNbaV0uX2RiSW5mby5kYiA9IGRiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRiO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIW9wdGlvbnMuc3RvcmVOYW1lKSB7XG4gICAgICAgICAgICBwcm9taXNlID0gZGJQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRiKSB7XG4gICAgICAgICAgICAgICAgX2RlZmVyUmVhZGluZXNzKG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGRiQ29udGV4dCA9IGRiQ29udGV4dHNbb3B0aW9ucy5uYW1lXTtcbiAgICAgICAgICAgICAgICB2YXIgZm9yYWdlcyA9IGRiQ29udGV4dC5mb3JhZ2VzO1xuXG4gICAgICAgICAgICAgICAgZGIuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZvcmFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvcmFnZSA9IGZvcmFnZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGZvcmFnZS5fZGJJbmZvLmRiID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgZHJvcERCUHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVxID0gaWRiLmRlbGV0ZURhdGFiYXNlKG9wdGlvbnMubmFtZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGIgPSByZXEucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGIuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXEuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHJlcS5vbmJsb2NrZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDbG9zaW5nIGFsbCBvcGVuIGNvbm5lY3Rpb25zIGluIG9udmVyc2lvbmNoYW5nZSBoYW5kbGVyIHNob3VsZCBwcmV2ZW50IHRoaXMgc2l0dWF0aW9uLCBidXQgaWZcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGRvIGdldCBoZXJlLCBpdCBqdXN0IG1lYW5zIHRoZSByZXF1ZXN0IHJlbWFpbnMgcGVuZGluZyAtIGV2ZW50dWFsbHkgaXQgd2lsbCBzdWNjZWVkIG9yIGVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2Ryb3BJbnN0YW5jZSBibG9ja2VkIGZvciBkYXRhYmFzZSBcIicgKyBvcHRpb25zLm5hbWUgKyAnXCIgdW50aWwgYWxsIG9wZW4gY29ubmVjdGlvbnMgYXJlIGNsb3NlZCcpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHJlcS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGIgPSByZXEucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGIuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGIpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRyb3BEQlByb21pc2UudGhlbihmdW5jdGlvbiAoZGIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGJDb250ZXh0LmRiID0gZGI7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9yYWdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9mb3JhZ2UgPSBmb3JhZ2VzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2FkdmFuY2VSZWFkaW5lc3MoX2ZvcmFnZS5fZGJJbmZvKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAoX3JlamVjdFJlYWRpbmVzcyhvcHRpb25zLCBlcnIpIHx8IFByb21pc2UkMS5yZXNvbHZlKCkpW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKCkge30pO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb21pc2UgPSBkYlByb21pc2UudGhlbihmdW5jdGlvbiAoZGIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWRiLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMob3B0aW9ucy5zdG9yZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgbmV3VmVyc2lvbiA9IGRiLnZlcnNpb24gKyAxO1xuXG4gICAgICAgICAgICAgICAgX2RlZmVyUmVhZGluZXNzKG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGRiQ29udGV4dCA9IGRiQ29udGV4dHNbb3B0aW9ucy5uYW1lXTtcbiAgICAgICAgICAgICAgICB2YXIgZm9yYWdlcyA9IGRiQ29udGV4dC5mb3JhZ2VzO1xuXG4gICAgICAgICAgICAgICAgZGIuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZvcmFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvcmFnZSA9IGZvcmFnZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGZvcmFnZS5fZGJJbmZvLmRiID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgZm9yYWdlLl9kYkluZm8udmVyc2lvbiA9IG5ld1ZlcnNpb247XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGRyb3BPYmplY3RQcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXEgPSBpZGIub3BlbihvcHRpb25zLm5hbWUsIG5ld1ZlcnNpb24pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlcS5vbmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRiID0gcmVxLnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRiLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICByZXEub251cGdyYWRlbmVlZGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRiID0gcmVxLnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRiLmRlbGV0ZU9iamVjdFN0b3JlKG9wdGlvbnMuc3RvcmVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICByZXEub25zdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRiID0gcmVxLnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRiLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRiKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkcm9wT2JqZWN0UHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYikge1xuICAgICAgICAgICAgICAgICAgICBkYkNvbnRleHQuZGIgPSBkYjtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBmb3JhZ2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2ZvcmFnZTIgPSBmb3JhZ2VzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2ZvcmFnZTIuX2RiSW5mby5kYiA9IGRiO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2FkdmFuY2VSZWFkaW5lc3MoX2ZvcmFnZTIuX2RiSW5mbyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgKF9yZWplY3RSZWFkaW5lc3Mob3B0aW9ucywgZXJyKSB8fCBQcm9taXNlJDEucmVzb2x2ZSgpKVtcImNhdGNoXCJdKGZ1bmN0aW9uICgpIHt9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG52YXIgYXN5bmNTdG9yYWdlID0ge1xuICAgIF9kcml2ZXI6ICdhc3luY1N0b3JhZ2UnLFxuICAgIF9pbml0U3RvcmFnZTogX2luaXRTdG9yYWdlLFxuICAgIF9zdXBwb3J0OiBpc0luZGV4ZWREQlZhbGlkKCksXG4gICAgaXRlcmF0ZTogaXRlcmF0ZSxcbiAgICBnZXRJdGVtOiBnZXRJdGVtLFxuICAgIHNldEl0ZW06IHNldEl0ZW0sXG4gICAgcmVtb3ZlSXRlbTogcmVtb3ZlSXRlbSxcbiAgICBjbGVhcjogY2xlYXIsXG4gICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAga2V5OiBrZXksXG4gICAga2V5czoga2V5cyxcbiAgICBkcm9wSW5zdGFuY2U6IGRyb3BJbnN0YW5jZVxufTtcblxuZnVuY3Rpb24gaXNXZWJTUUxWYWxpZCgpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9wZW5EYXRhYmFzZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLy8gU2FkbHksIHRoZSBiZXN0IHdheSB0byBzYXZlIGJpbmFyeSBkYXRhIGluIFdlYlNRTC9sb2NhbFN0b3JhZ2UgaXMgc2VyaWFsaXppbmdcbi8vIGl0IHRvIEJhc2U2NCwgc28gdGhpcyBpcyBob3cgd2Ugc3RvcmUgaXQgdG8gcHJldmVudCB2ZXJ5IHN0cmFuZ2UgZXJyb3JzIHdpdGggbGVzc1xuLy8gdmVyYm9zZSB3YXlzIG9mIGJpbmFyeSA8LT4gc3RyaW5nIGRhdGEgc3RvcmFnZS5cbnZhciBCQVNFX0NIQVJTID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nO1xuXG52YXIgQkxPQl9UWVBFX1BSRUZJWCA9ICd+fmxvY2FsX2ZvcmFnZV90eXBlfic7XG52YXIgQkxPQl9UWVBFX1BSRUZJWF9SRUdFWCA9IC9efn5sb2NhbF9mb3JhZ2VfdHlwZX4oW15+XSspfi87XG5cbnZhciBTRVJJQUxJWkVEX01BUktFUiA9ICdfX2xmc2NfXzonO1xudmFyIFNFUklBTElaRURfTUFSS0VSX0xFTkdUSCA9IFNFUklBTElaRURfTUFSS0VSLmxlbmd0aDtcblxuLy8gT01HIHRoZSBzZXJpYWxpemF0aW9ucyFcbnZhciBUWVBFX0FSUkFZQlVGRkVSID0gJ2FyYmYnO1xudmFyIFRZUEVfQkxPQiA9ICdibG9iJztcbnZhciBUWVBFX0lOVDhBUlJBWSA9ICdzaTA4JztcbnZhciBUWVBFX1VJTlQ4QVJSQVkgPSAndWkwOCc7XG52YXIgVFlQRV9VSU5UOENMQU1QRURBUlJBWSA9ICd1aWM4JztcbnZhciBUWVBFX0lOVDE2QVJSQVkgPSAnc2kxNic7XG52YXIgVFlQRV9JTlQzMkFSUkFZID0gJ3NpMzInO1xudmFyIFRZUEVfVUlOVDE2QVJSQVkgPSAndXIxNic7XG52YXIgVFlQRV9VSU5UMzJBUlJBWSA9ICd1aTMyJztcbnZhciBUWVBFX0ZMT0FUMzJBUlJBWSA9ICdmbDMyJztcbnZhciBUWVBFX0ZMT0FUNjRBUlJBWSA9ICdmbDY0JztcbnZhciBUWVBFX1NFUklBTElaRURfTUFSS0VSX0xFTkdUSCA9IFNFUklBTElaRURfTUFSS0VSX0xFTkdUSCArIFRZUEVfQVJSQVlCVUZGRVIubGVuZ3RoO1xuXG52YXIgdG9TdHJpbmckMSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbmZ1bmN0aW9uIHN0cmluZ1RvQnVmZmVyKHNlcmlhbGl6ZWRTdHJpbmcpIHtcbiAgICAvLyBGaWxsIHRoZSBzdHJpbmcgaW50byBhIEFycmF5QnVmZmVyLlxuICAgIHZhciBidWZmZXJMZW5ndGggPSBzZXJpYWxpemVkU3RyaW5nLmxlbmd0aCAqIDAuNzU7XG4gICAgdmFyIGxlbiA9IHNlcmlhbGl6ZWRTdHJpbmcubGVuZ3RoO1xuICAgIHZhciBpO1xuICAgIHZhciBwID0gMDtcbiAgICB2YXIgZW5jb2RlZDEsIGVuY29kZWQyLCBlbmNvZGVkMywgZW5jb2RlZDQ7XG5cbiAgICBpZiAoc2VyaWFsaXplZFN0cmluZ1tzZXJpYWxpemVkU3RyaW5nLmxlbmd0aCAtIDFdID09PSAnPScpIHtcbiAgICAgICAgYnVmZmVyTGVuZ3RoLS07XG4gICAgICAgIGlmIChzZXJpYWxpemVkU3RyaW5nW3NlcmlhbGl6ZWRTdHJpbmcubGVuZ3RoIC0gMl0gPT09ICc9Jykge1xuICAgICAgICAgICAgYnVmZmVyTGVuZ3RoLS07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ1ZmZlckxlbmd0aCk7XG4gICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgICAgICBlbmNvZGVkMSA9IEJBU0VfQ0hBUlMuaW5kZXhPZihzZXJpYWxpemVkU3RyaW5nW2ldKTtcbiAgICAgICAgZW5jb2RlZDIgPSBCQVNFX0NIQVJTLmluZGV4T2Yoc2VyaWFsaXplZFN0cmluZ1tpICsgMV0pO1xuICAgICAgICBlbmNvZGVkMyA9IEJBU0VfQ0hBUlMuaW5kZXhPZihzZXJpYWxpemVkU3RyaW5nW2kgKyAyXSk7XG4gICAgICAgIGVuY29kZWQ0ID0gQkFTRV9DSEFSUy5pbmRleE9mKHNlcmlhbGl6ZWRTdHJpbmdbaSArIDNdKTtcblxuICAgICAgICAvKmpzbGludCBiaXR3aXNlOiB0cnVlICovXG4gICAgICAgIGJ5dGVzW3ArK10gPSBlbmNvZGVkMSA8PCAyIHwgZW5jb2RlZDIgPj4gNDtcbiAgICAgICAgYnl0ZXNbcCsrXSA9IChlbmNvZGVkMiAmIDE1KSA8PCA0IHwgZW5jb2RlZDMgPj4gMjtcbiAgICAgICAgYnl0ZXNbcCsrXSA9IChlbmNvZGVkMyAmIDMpIDw8IDYgfCBlbmNvZGVkNCAmIDYzO1xuICAgIH1cbiAgICByZXR1cm4gYnVmZmVyO1xufVxuXG4vLyBDb252ZXJ0cyBhIGJ1ZmZlciB0byBhIHN0cmluZyB0byBzdG9yZSwgc2VyaWFsaXplZCwgaW4gdGhlIGJhY2tlbmRcbi8vIHN0b3JhZ2UgbGlicmFyeS5cbmZ1bmN0aW9uIGJ1ZmZlclRvU3RyaW5nKGJ1ZmZlcikge1xuICAgIC8vIGJhc2U2NC1hcnJheWJ1ZmZlclxuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XG4gICAgdmFyIGJhc2U2NFN0cmluZyA9ICcnO1xuICAgIHZhciBpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIC8qanNsaW50IGJpdHdpc2U6IHRydWUgKi9cbiAgICAgICAgYmFzZTY0U3RyaW5nICs9IEJBU0VfQ0hBUlNbYnl0ZXNbaV0gPj4gMl07XG4gICAgICAgIGJhc2U2NFN0cmluZyArPSBCQVNFX0NIQVJTWyhieXRlc1tpXSAmIDMpIDw8IDQgfCBieXRlc1tpICsgMV0gPj4gNF07XG4gICAgICAgIGJhc2U2NFN0cmluZyArPSBCQVNFX0NIQVJTWyhieXRlc1tpICsgMV0gJiAxNSkgPDwgMiB8IGJ5dGVzW2kgKyAyXSA+PiA2XTtcbiAgICAgICAgYmFzZTY0U3RyaW5nICs9IEJBU0VfQ0hBUlNbYnl0ZXNbaSArIDJdICYgNjNdO1xuICAgIH1cblxuICAgIGlmIChieXRlcy5sZW5ndGggJSAzID09PSAyKSB7XG4gICAgICAgIGJhc2U2NFN0cmluZyA9IGJhc2U2NFN0cmluZy5zdWJzdHJpbmcoMCwgYmFzZTY0U3RyaW5nLmxlbmd0aCAtIDEpICsgJz0nO1xuICAgIH0gZWxzZSBpZiAoYnl0ZXMubGVuZ3RoICUgMyA9PT0gMSkge1xuICAgICAgICBiYXNlNjRTdHJpbmcgPSBiYXNlNjRTdHJpbmcuc3Vic3RyaW5nKDAsIGJhc2U2NFN0cmluZy5sZW5ndGggLSAyKSArICc9PSc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2U2NFN0cmluZztcbn1cblxuLy8gU2VyaWFsaXplIGEgdmFsdWUsIGFmdGVyd2FyZHMgZXhlY3V0aW5nIGEgY2FsbGJhY2sgKHdoaWNoIHVzdWFsbHlcbi8vIGluc3RydWN0cyB0aGUgYHNldEl0ZW0oKWAgY2FsbGJhY2svcHJvbWlzZSB0byBiZSBleGVjdXRlZCkuIFRoaXMgaXMgaG93XG4vLyB3ZSBzdG9yZSBiaW5hcnkgZGF0YSB3aXRoIGxvY2FsU3RvcmFnZS5cbmZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWx1ZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgdmFsdWVUeXBlID0gJyc7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlVHlwZSA9IHRvU3RyaW5nJDEuY2FsbCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gQ2Fubm90IHVzZSBgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcmAgb3Igc3VjaCBoZXJlLCBhcyB0aGVzZVxuICAgIC8vIGNoZWNrcyBmYWlsIHdoZW4gcnVubmluZyB0aGUgdGVzdHMgdXNpbmcgY2FzcGVyLmpzLi4uXG4gICAgLy9cbiAgICAvLyBUT0RPOiBTZWUgd2h5IHRob3NlIHRlc3RzIGZhaWwgYW5kIHVzZSBhIGJldHRlciBzb2x1dGlvbi5cbiAgICBpZiAodmFsdWUgJiYgKHZhbHVlVHlwZSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyB8fCB2YWx1ZS5idWZmZXIgJiYgdG9TdHJpbmckMS5jYWxsKHZhbHVlLmJ1ZmZlcikgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXScpKSB7XG4gICAgICAgIC8vIENvbnZlcnQgYmluYXJ5IGFycmF5cyB0byBhIHN0cmluZyBhbmQgcHJlZml4IHRoZSBzdHJpbmcgd2l0aFxuICAgICAgICAvLyBhIHNwZWNpYWwgbWFya2VyLlxuICAgICAgICB2YXIgYnVmZmVyO1xuICAgICAgICB2YXIgbWFya2VyID0gU0VSSUFMSVpFRF9NQVJLRVI7XG5cbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IHZhbHVlO1xuICAgICAgICAgICAgbWFya2VyICs9IFRZUEVfQVJSQVlCVUZGRVI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBidWZmZXIgPSB2YWx1ZS5idWZmZXI7XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZVR5cGUgPT09ICdbb2JqZWN0IEludDhBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyICs9IFRZUEVfSU5UOEFSUkFZO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZVR5cGUgPT09ICdbb2JqZWN0IFVpbnQ4QXJyYXldJykge1xuICAgICAgICAgICAgICAgIG1hcmtlciArPSBUWVBFX1VJTlQ4QVJSQVk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlVHlwZSA9PT0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJykge1xuICAgICAgICAgICAgICAgIG1hcmtlciArPSBUWVBFX1VJTlQ4Q0xBTVBFREFSUkFZO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZVR5cGUgPT09ICdbb2JqZWN0IEludDE2QXJyYXldJykge1xuICAgICAgICAgICAgICAgIG1hcmtlciArPSBUWVBFX0lOVDE2QVJSQVk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlVHlwZSA9PT0gJ1tvYmplY3QgVWludDE2QXJyYXldJykge1xuICAgICAgICAgICAgICAgIG1hcmtlciArPSBUWVBFX1VJTlQxNkFSUkFZO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZVR5cGUgPT09ICdbb2JqZWN0IEludDMyQXJyYXldJykge1xuICAgICAgICAgICAgICAgIG1hcmtlciArPSBUWVBFX0lOVDMyQVJSQVk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlVHlwZSA9PT0gJ1tvYmplY3QgVWludDMyQXJyYXldJykge1xuICAgICAgICAgICAgICAgIG1hcmtlciArPSBUWVBFX1VJTlQzMkFSUkFZO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZVR5cGUgPT09ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyICs9IFRZUEVfRkxPQVQzMkFSUkFZO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZVR5cGUgPT09ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyICs9IFRZUEVfRkxPQVQ2NEFSUkFZO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhuZXcgRXJyb3IoJ0ZhaWxlZCB0byBnZXQgdHlwZSBmb3IgQmluYXJ5QXJyYXknKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFjayhtYXJrZXIgKyBidWZmZXJUb1N0cmluZyhidWZmZXIpKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlVHlwZSA9PT0gJ1tvYmplY3QgQmxvYl0nKSB7XG4gICAgICAgIC8vIENvbnZlciB0aGUgYmxvYiB0byBhIGJpbmFyeUFycmF5IGFuZCB0aGVuIHRvIGEgc3RyaW5nLlxuICAgICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbiAgICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBCYWNrd2FyZHMtY29tcGF0aWJsZSBwcmVmaXggZm9yIHRoZSBibG9iIHR5cGUuXG4gICAgICAgICAgICB2YXIgc3RyID0gQkxPQl9UWVBFX1BSRUZJWCArIHZhbHVlLnR5cGUgKyAnficgKyBidWZmZXJUb1N0cmluZyh0aGlzLnJlc3VsdCk7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKFNFUklBTElaRURfTUFSS0VSICsgVFlQRV9CTE9CICsgc3RyKTtcbiAgICAgICAgfTtcblxuICAgICAgICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2FsbGJhY2soSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkNvdWxkbid0IGNvbnZlcnQgdmFsdWUgaW50byBhIEpTT04gc3RyaW5nOiBcIiwgdmFsdWUpO1xuXG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gRGVzZXJpYWxpemUgZGF0YSB3ZSd2ZSBpbnNlcnRlZCBpbnRvIGEgdmFsdWUgY29sdW1uL2ZpZWxkLiBXZSBwbGFjZVxuLy8gc3BlY2lhbCBtYXJrZXJzIGludG8gb3VyIHN0cmluZ3MgdG8gbWFyayB0aGVtIGFzIGVuY29kZWQ7IHRoaXMgaXNuJ3Rcbi8vIGFzIG5pY2UgYXMgYSBtZXRhIGZpZWxkLCBidXQgaXQncyB0aGUgb25seSBzYW5lIHRoaW5nIHdlIGNhbiBkbyB3aGlsc3Rcbi8vIGtlZXBpbmcgbG9jYWxTdG9yYWdlIHN1cHBvcnQgaW50YWN0LlxuLy9cbi8vIE9mdGVudGltZXMgdGhpcyB3aWxsIGp1c3QgZGVzZXJpYWxpemUgSlNPTiBjb250ZW50LCBidXQgaWYgd2UgaGF2ZSBhXG4vLyBzcGVjaWFsIG1hcmtlciAoU0VSSUFMSVpFRF9NQVJLRVIsIGRlZmluZWQgYWJvdmUpLCB3ZSB3aWxsIGV4dHJhY3Rcbi8vIHNvbWUga2luZCBvZiBhcnJheWJ1ZmZlci9iaW5hcnkgZGF0YS90eXBlZCBhcnJheSBvdXQgb2YgdGhlIHN0cmluZy5cbmZ1bmN0aW9uIGRlc2VyaWFsaXplKHZhbHVlKSB7XG4gICAgLy8gSWYgd2UgaGF2ZW4ndCBtYXJrZWQgdGhpcyBzdHJpbmcgYXMgYmVpbmcgc3BlY2lhbGx5IHNlcmlhbGl6ZWQgKGkuZS5cbiAgICAvLyBzb21ldGhpbmcgb3RoZXIgdGhhbiBzZXJpYWxpemVkIEpTT04pLCB3ZSBjYW4ganVzdCByZXR1cm4gaXQgYW5kIGJlXG4gICAgLy8gZG9uZSB3aXRoIGl0LlxuICAgIGlmICh2YWx1ZS5zdWJzdHJpbmcoMCwgU0VSSUFMSVpFRF9NQVJLRVJfTEVOR1RIKSAhPT0gU0VSSUFMSVpFRF9NQVJLRVIpIHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUpO1xuICAgIH1cblxuICAgIC8vIFRoZSBmb2xsb3dpbmcgY29kZSBkZWFscyB3aXRoIGRlc2VyaWFsaXppbmcgc29tZSBraW5kIG9mIEJsb2Igb3JcbiAgICAvLyBUeXBlZEFycmF5LiBGaXJzdCB3ZSBzZXBhcmF0ZSBvdXQgdGhlIHR5cGUgb2YgZGF0YSB3ZSdyZSBkZWFsaW5nXG4gICAgLy8gd2l0aCBmcm9tIHRoZSBkYXRhIGl0c2VsZi5cbiAgICB2YXIgc2VyaWFsaXplZFN0cmluZyA9IHZhbHVlLnN1YnN0cmluZyhUWVBFX1NFUklBTElaRURfTUFSS0VSX0xFTkdUSCk7XG4gICAgdmFyIHR5cGUgPSB2YWx1ZS5zdWJzdHJpbmcoU0VSSUFMSVpFRF9NQVJLRVJfTEVOR1RILCBUWVBFX1NFUklBTElaRURfTUFSS0VSX0xFTkdUSCk7XG5cbiAgICB2YXIgYmxvYlR5cGU7XG4gICAgLy8gQmFja3dhcmRzLWNvbXBhdGlibGUgYmxvYiB0eXBlIHNlcmlhbGl6YXRpb24gc3RyYXRlZ3kuXG4gICAgLy8gREJzIGNyZWF0ZWQgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiBsb2NhbEZvcmFnZSB3aWxsIHNpbXBseSBub3QgaGF2ZSB0aGUgYmxvYiB0eXBlLlxuICAgIGlmICh0eXBlID09PSBUWVBFX0JMT0IgJiYgQkxPQl9UWVBFX1BSRUZJWF9SRUdFWC50ZXN0KHNlcmlhbGl6ZWRTdHJpbmcpKSB7XG4gICAgICAgIHZhciBtYXRjaGVyID0gc2VyaWFsaXplZFN0cmluZy5tYXRjaChCTE9CX1RZUEVfUFJFRklYX1JFR0VYKTtcbiAgICAgICAgYmxvYlR5cGUgPSBtYXRjaGVyWzFdO1xuICAgICAgICBzZXJpYWxpemVkU3RyaW5nID0gc2VyaWFsaXplZFN0cmluZy5zdWJzdHJpbmcobWF0Y2hlclswXS5sZW5ndGgpO1xuICAgIH1cbiAgICB2YXIgYnVmZmVyID0gc3RyaW5nVG9CdWZmZXIoc2VyaWFsaXplZFN0cmluZyk7XG5cbiAgICAvLyBSZXR1cm4gdGhlIHJpZ2h0IHR5cGUgYmFzZWQgb24gdGhlIGNvZGUvdHlwZSBzZXQgZHVyaW5nXG4gICAgLy8gc2VyaWFsaXphdGlvbi5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBUWVBFX0FSUkFZQlVGRkVSOlxuICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICAgICAgY2FzZSBUWVBFX0JMT0I6XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlQmxvYihbYnVmZmVyXSwgeyB0eXBlOiBibG9iVHlwZSB9KTtcbiAgICAgICAgY2FzZSBUWVBFX0lOVDhBUlJBWTpcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW50OEFycmF5KGJ1ZmZlcik7XG4gICAgICAgIGNhc2UgVFlQRV9VSU5UOEFSUkFZOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XG4gICAgICAgIGNhc2UgVFlQRV9VSU5UOENMQU1QRURBUlJBWTpcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhDbGFtcGVkQXJyYXkoYnVmZmVyKTtcbiAgICAgICAgY2FzZSBUWVBFX0lOVDE2QVJSQVk6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEludDE2QXJyYXkoYnVmZmVyKTtcbiAgICAgICAgY2FzZSBUWVBFX1VJTlQxNkFSUkFZOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50MTZBcnJheShidWZmZXIpO1xuICAgICAgICBjYXNlIFRZUEVfSU5UMzJBUlJBWTpcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW50MzJBcnJheShidWZmZXIpO1xuICAgICAgICBjYXNlIFRZUEVfVUlOVDMyQVJSQVk6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQzMkFycmF5KGJ1ZmZlcik7XG4gICAgICAgIGNhc2UgVFlQRV9GTE9BVDMyQVJSQVk6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShidWZmZXIpO1xuICAgICAgICBjYXNlIFRZUEVfRkxPQVQ2NEFSUkFZOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDY0QXJyYXkoYnVmZmVyKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rb3duIHR5cGU6ICcgKyB0eXBlKTtcbiAgICB9XG59XG5cbnZhciBsb2NhbGZvcmFnZVNlcmlhbGl6ZXIgPSB7XG4gICAgc2VyaWFsaXplOiBzZXJpYWxpemUsXG4gICAgZGVzZXJpYWxpemU6IGRlc2VyaWFsaXplLFxuICAgIHN0cmluZ1RvQnVmZmVyOiBzdHJpbmdUb0J1ZmZlcixcbiAgICBidWZmZXJUb1N0cmluZzogYnVmZmVyVG9TdHJpbmdcbn07XG5cbi8qXG4gKiBJbmNsdWRlcyBjb2RlIGZyb206XG4gKlxuICogYmFzZTY0LWFycmF5YnVmZmVyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmlrbGFzdmgvYmFzZTY0LWFycmF5YnVmZmVyXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIE5pa2xhcyB2b24gSGVydHplblxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZURiVGFibGUodCwgZGJJbmZvLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuICAgIHQuZXhlY3V0ZVNxbCgnQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgJyArIGRiSW5mby5zdG9yZU5hbWUgKyAnICcgKyAnKGlkIElOVEVHRVIgUFJJTUFSWSBLRVksIGtleSB1bmlxdWUsIHZhbHVlKScsIFtdLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XG59XG5cbi8vIE9wZW4gdGhlIFdlYlNRTCBkYXRhYmFzZSAoYXV0b21hdGljYWxseSBjcmVhdGVzIG9uZSBpZiBvbmUgZGlkbid0XG4vLyBwcmV2aW91c2x5IGV4aXN0KSwgdXNpbmcgYW55IG9wdGlvbnMgc2V0IGluIHRoZSBjb25maWcuXG5mdW5jdGlvbiBfaW5pdFN0b3JhZ2UkMShvcHRpb25zKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBkYkluZm8gPSB7XG4gICAgICAgIGRiOiBudWxsXG4gICAgfTtcblxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGZvciAodmFyIGkgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgZGJJbmZvW2ldID0gdHlwZW9mIG9wdGlvbnNbaV0gIT09ICdzdHJpbmcnID8gb3B0aW9uc1tpXS50b1N0cmluZygpIDogb3B0aW9uc1tpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkYkluZm9Qcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIC8vIE9wZW4gdGhlIGRhdGFiYXNlOyB0aGUgb3BlbkRhdGFiYXNlIEFQSSB3aWxsIGF1dG9tYXRpY2FsbHlcbiAgICAgICAgLy8gY3JlYXRlIGl0IGZvciB1cyBpZiBpdCBkb2Vzbid0IGV4aXN0LlxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGJJbmZvLmRiID0gb3BlbkRhdGFiYXNlKGRiSW5mby5uYW1lLCBTdHJpbmcoZGJJbmZvLnZlcnNpb24pLCBkYkluZm8uZGVzY3JpcHRpb24sIGRiSW5mby5zaXplKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBvdXIga2V5L3ZhbHVlIHRhYmxlIGlmIGl0IGRvZXNuJ3QgZXhpc3QuXG4gICAgICAgIGRiSW5mby5kYi50cmFuc2FjdGlvbihmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgY3JlYXRlRGJUYWJsZSh0LCBkYkluZm8sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9kYkluZm8gPSBkYkluZm87XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHQsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZGJJbmZvLnNlcmlhbGl6ZXIgPSBsb2NhbGZvcmFnZVNlcmlhbGl6ZXI7XG4gICAgcmV0dXJuIGRiSW5mb1Byb21pc2U7XG59XG5cbmZ1bmN0aW9uIHRyeUV4ZWN1dGVTcWwodCwgZGJJbmZvLCBzcWxTdGF0ZW1lbnQsIGFyZ3MsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgdC5leGVjdXRlU3FsKHNxbFN0YXRlbWVudCwgYXJncywgY2FsbGJhY2ssIGZ1bmN0aW9uICh0LCBlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gZXJyb3IuU1lOVEFYX0VSUikge1xuICAgICAgICAgICAgdC5leGVjdXRlU3FsKCdTRUxFQ1QgbmFtZSBGUk9NIHNxbGl0ZV9tYXN0ZXIgJyArIFwiV0hFUkUgdHlwZT0ndGFibGUnIEFORCBuYW1lID0gP1wiLCBbZGJJbmZvLnN0b3JlTmFtZV0sIGZ1bmN0aW9uICh0LCByZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bHRzLnJvd3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSB0YWJsZSBpcyBtaXNzaW5nICh3YXMgZGVsZXRlZClcbiAgICAgICAgICAgICAgICAgICAgLy8gcmUtY3JlYXRlIGl0IHRhYmxlIGFuZCByZXRyeVxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVEYlRhYmxlKHQsIGRiSW5mbywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdC5leGVjdXRlU3FsKHNxbFN0YXRlbWVudCwgYXJncywgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICB9LCBlcnJvckNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKHQsIGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBlcnJvckNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVycm9yQ2FsbGJhY2sodCwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfSwgZXJyb3JDYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIGdldEl0ZW0kMShrZXksIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAga2V5ID0gbm9ybWFsaXplS2V5KGtleSk7XG5cbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZGJJbmZvID0gc2VsZi5fZGJJbmZvO1xuICAgICAgICAgICAgZGJJbmZvLmRiLnRyYW5zYWN0aW9uKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdHJ5RXhlY3V0ZVNxbCh0LCBkYkluZm8sICdTRUxFQ1QgKiBGUk9NICcgKyBkYkluZm8uc3RvcmVOYW1lICsgJyBXSEVSRSBrZXkgPSA/IExJTUlUIDEnLCBba2V5XSwgZnVuY3Rpb24gKHQsIHJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHJlc3VsdHMucm93cy5sZW5ndGggPyByZXN1bHRzLnJvd3MuaXRlbSgwKS52YWx1ZSA6IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoaXMgaXMgc2VyaWFsaXplZCBjb250ZW50IHdlIG5lZWQgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gdW5wYWNrLlxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBkYkluZm8uc2VyaWFsaXplci5kZXNlcmlhbGl6ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICh0LCBlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0ocmVqZWN0KTtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIGl0ZXJhdGUkMShpdGVyYXRvciwgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZGJJbmZvID0gc2VsZi5fZGJJbmZvO1xuXG4gICAgICAgICAgICBkYkluZm8uZGIudHJhbnNhY3Rpb24oZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB0cnlFeGVjdXRlU3FsKHQsIGRiSW5mbywgJ1NFTEVDVCAqIEZST00gJyArIGRiSW5mby5zdG9yZU5hbWUsIFtdLCBmdW5jdGlvbiAodCwgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcm93cyA9IHJlc3VsdHMucm93cztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IHJvd3MubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gcm93cy5pdGVtKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGl0ZW0udmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGlzIGlzIHNlcmlhbGl6ZWQgY29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byB1bnBhY2suXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZGJJbmZvLnNlcmlhbGl6ZXIuZGVzZXJpYWxpemUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gaXRlcmF0b3IocmVzdWx0LCBpdGVtLmtleSwgaSArIDEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB2b2lkKDApIHByZXZlbnRzIHByb2JsZW1zIHdpdGggcmVkZWZpbml0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvZiBgdW5kZWZpbmVkYC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHQsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gX3NldEl0ZW0oa2V5LCB2YWx1ZSwgY2FsbGJhY2ssIHJldHJpZXNMZWZ0KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAga2V5ID0gbm9ybWFsaXplS2V5KGtleSk7XG5cbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBUaGUgbG9jYWxTdG9yYWdlIEFQSSBkb2Vzbid0IHJldHVybiB1bmRlZmluZWQgdmFsdWVzIGluIGFuXG4gICAgICAgICAgICAvLyBcImV4cGVjdGVkXCIgd2F5LCBzbyB1bmRlZmluZWQgaXMgYWx3YXlzIGNhc3QgdG8gbnVsbCBpbiBhbGxcbiAgICAgICAgICAgIC8vIGRyaXZlcnMuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvbG9jYWxGb3JhZ2UvcHVsbC80MlxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNhdmUgdGhlIG9yaWdpbmFsIHZhbHVlIHRvIHBhc3MgdG8gdGhlIGNhbGxiYWNrLlxuICAgICAgICAgICAgdmFyIG9yaWdpbmFsVmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICAgICAgdmFyIGRiSW5mbyA9IHNlbGYuX2RiSW5mbztcbiAgICAgICAgICAgIGRiSW5mby5zZXJpYWxpemVyLnNlcmlhbGl6ZSh2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlLCBlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRiSW5mby5kYi50cmFuc2FjdGlvbihmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5RXhlY3V0ZVNxbCh0LCBkYkluZm8sICdJTlNFUlQgT1IgUkVQTEFDRSBJTlRPICcgKyBkYkluZm8uc3RvcmVOYW1lICsgJyAnICsgJyhrZXksIHZhbHVlKSBWQUxVRVMgKD8sID8pJywgW2tleSwgdmFsdWVdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShvcmlnaW5hbFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICh0LCBlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHNxbEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgdHJhbnNhY3Rpb24gZmFpbGVkOyBjaGVja1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gc2VlIGlmIGl0J3MgYSBxdW90YSBlcnJvci5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcWxFcnJvci5jb2RlID09PSBzcWxFcnJvci5RVU9UQV9FUlIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSByZWplY3QgdGhlIGNhbGxiYWNrIG91dHJpZ2h0IGZvciBub3csIGJ1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0J3Mgd29ydGggdHJ5aW5nIHRvIHJlLXJ1biB0aGUgdHJhbnNhY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXZlbiBpZiB0aGUgdXNlciBhY2NlcHRzIHRoZSBwcm9tcHQgdG8gdXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbW9yZSBzdG9yYWdlIG9uIFNhZmFyaSwgdGhpcyBlcnJvciB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmUgY2FsbGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJ5IHRvIHJlLXJ1biB0aGUgdHJhbnNhY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldHJpZXNMZWZ0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKF9zZXRJdGVtLmFwcGx5KHNlbGYsIFtrZXksIG9yaWdpbmFsVmFsdWUsIGNhbGxiYWNrLCByZXRyaWVzTGVmdCAtIDFdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHNxbEVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0ocmVqZWN0KTtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIHNldEl0ZW0kMShrZXksIHZhbHVlLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBfc2V0SXRlbS5hcHBseSh0aGlzLCBba2V5LCB2YWx1ZSwgY2FsbGJhY2ssIDFdKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlSXRlbSQxKGtleSwgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBrZXkgPSBub3JtYWxpemVLZXkoa2V5KTtcblxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHNlbGYucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBkYkluZm8gPSBzZWxmLl9kYkluZm87XG4gICAgICAgICAgICBkYkluZm8uZGIudHJhbnNhY3Rpb24oZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB0cnlFeGVjdXRlU3FsKHQsIGRiSW5mbywgJ0RFTEVURSBGUk9NICcgKyBkYkluZm8uc3RvcmVOYW1lICsgJyBXSEVSRSBrZXkgPSA/JywgW2tleV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICh0LCBlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0ocmVqZWN0KTtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbi8vIERlbGV0ZXMgZXZlcnkgaXRlbSBpbiB0aGUgdGFibGUuXG4vLyBUT0RPOiBGaW5kIG91dCBpZiB0aGlzIHJlc2V0cyB0aGUgQVVUT19JTkNSRU1FTlQgbnVtYmVyLlxuZnVuY3Rpb24gY2xlYXIkMShjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHNlbGYucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBkYkluZm8gPSBzZWxmLl9kYkluZm87XG4gICAgICAgICAgICBkYkluZm8uZGIudHJhbnNhY3Rpb24oZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB0cnlFeGVjdXRlU3FsKHQsIGRiSW5mbywgJ0RFTEVURSBGUk9NICcgKyBkYkluZm8uc3RvcmVOYW1lLCBbXSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHQsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuLy8gRG9lcyBhIHNpbXBsZSBgQ09VTlQoa2V5KWAgdG8gZ2V0IHRoZSBudW1iZXIgb2YgaXRlbXMgc3RvcmVkIGluXG4vLyBsb2NhbEZvcmFnZS5cbmZ1bmN0aW9uIGxlbmd0aCQxKGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGRiSW5mbyA9IHNlbGYuX2RiSW5mbztcbiAgICAgICAgICAgIGRiSW5mby5kYi50cmFuc2FjdGlvbihmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIC8vIEFoaGgsIFNRTCBtYWtlcyB0aGlzIG9uZSBzb29vb29vIGVhc3kuXG4gICAgICAgICAgICAgICAgdHJ5RXhlY3V0ZVNxbCh0LCBkYkluZm8sICdTRUxFQ1QgQ09VTlQoa2V5KSBhcyBjIEZST00gJyArIGRiSW5mby5zdG9yZU5hbWUsIFtdLCBmdW5jdGlvbiAodCwgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gcmVzdWx0cy5yb3dzLml0ZW0oMCkuYztcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICh0LCBlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0ocmVqZWN0KTtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbi8vIFJldHVybiB0aGUga2V5IGxvY2F0ZWQgYXQga2V5IGluZGV4IFg7IGVzc2VudGlhbGx5IGdldHMgdGhlIGtleSBmcm9tIGFcbi8vIGBXSEVSRSBpZCA9ID9gLiBUaGlzIGlzIHRoZSBtb3N0IGVmZmljaWVudCB3YXkgSSBjYW4gdGhpbmsgdG8gaW1wbGVtZW50XG4vLyB0aGlzIHJhcmVseS11c2VkIChpbiBteSBleHBlcmllbmNlKSBwYXJ0IG9mIHRoZSBBUEksIGJ1dCBpdCBjYW4gc2VlbVxuLy8gaW5jb25zaXN0ZW50LCBiZWNhdXNlIHdlIGRvIGBJTlNFUlQgT1IgUkVQTEFDRSBJTlRPYCBvbiBgc2V0SXRlbSgpYCwgc29cbi8vIHRoZSBJRCBvZiBlYWNoIGtleSB3aWxsIGNoYW5nZSBldmVyeSB0aW1lIGl0J3MgdXBkYXRlZC4gUGVyaGFwcyBhIHN0b3JlZFxuLy8gcHJvY2VkdXJlIGZvciB0aGUgYHNldEl0ZW0oKWAgU1FMIHdvdWxkIHNvbHZlIHRoaXMgcHJvYmxlbT9cbi8vIFRPRE86IERvbid0IGNoYW5nZSBJRCBvbiBgc2V0SXRlbSgpYC5cbmZ1bmN0aW9uIGtleSQxKG4sIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGRiSW5mbyA9IHNlbGYuX2RiSW5mbztcbiAgICAgICAgICAgIGRiSW5mby5kYi50cmFuc2FjdGlvbihmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHRyeUV4ZWN1dGVTcWwodCwgZGJJbmZvLCAnU0VMRUNUIGtleSBGUk9NICcgKyBkYkluZm8uc3RvcmVOYW1lICsgJyBXSEVSRSBpZCA9ID8gTElNSVQgMScsIFtuICsgMV0sIGZ1bmN0aW9uICh0LCByZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSByZXN1bHRzLnJvd3MubGVuZ3RoID8gcmVzdWx0cy5yb3dzLml0ZW0oMCkua2V5IDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICh0LCBlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0ocmVqZWN0KTtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIGtleXMkMShjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHNlbGYucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBkYkluZm8gPSBzZWxmLl9kYkluZm87XG4gICAgICAgICAgICBkYkluZm8uZGIudHJhbnNhY3Rpb24oZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB0cnlFeGVjdXRlU3FsKHQsIGRiSW5mbywgJ1NFTEVDVCBrZXkgRlJPTSAnICsgZGJJbmZvLnN0b3JlTmFtZSwgW10sIGZ1bmN0aW9uICh0LCByZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXlzID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLnJvd3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleXMucHVzaChyZXN1bHRzLnJvd3MuaXRlbShpKS5rZXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShrZXlzKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAodCwgZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVtcImNhdGNoXCJdKHJlamVjdCk7XG4gICAgfSk7XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvd2ViZGF0YWJhc2UvI2RhdGFiYXNlc1xuLy8gPiBUaGVyZSBpcyBubyB3YXkgdG8gZW51bWVyYXRlIG9yIGRlbGV0ZSB0aGUgZGF0YWJhc2VzIGF2YWlsYWJsZSBmb3IgYW4gb3JpZ2luIGZyb20gdGhpcyBBUEkuXG5mdW5jdGlvbiBnZXRBbGxTdG9yZU5hbWVzKGRiKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBkYi50cmFuc2FjdGlvbihmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdC5leGVjdXRlU3FsKCdTRUxFQ1QgbmFtZSBGUk9NIHNxbGl0ZV9tYXN0ZXIgJyArIFwiV0hFUkUgdHlwZT0ndGFibGUnIEFORCBuYW1lIDw+ICdfX1dlYktpdERhdGFiYXNlSW5mb1RhYmxlX18nXCIsIFtdLCBmdW5jdGlvbiAodCwgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgIHZhciBzdG9yZU5hbWVzID0gW107XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMucm93cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBzdG9yZU5hbWVzLnB1c2gocmVzdWx0cy5yb3dzLml0ZW0oaSkubmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgIGRiOiBkYixcbiAgICAgICAgICAgICAgICAgICAgc3RvcmVOYW1lczogc3RvcmVOYW1lc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHQsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAoc3FsRXJyb3IpIHtcbiAgICAgICAgICAgIHJlamVjdChzcWxFcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBkcm9wSW5zdGFuY2UkMShvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0gZ2V0Q2FsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHZhciBjdXJyZW50Q29uZmlnID0gdGhpcy5jb25maWcoKTtcbiAgICBvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgIT09ICdmdW5jdGlvbicgJiYgb3B0aW9ucyB8fCB7fTtcbiAgICBpZiAoIW9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLm5hbWUgPSBvcHRpb25zLm5hbWUgfHwgY3VycmVudENvbmZpZy5uYW1lO1xuICAgICAgICBvcHRpb25zLnN0b3JlTmFtZSA9IG9wdGlvbnMuc3RvcmVOYW1lIHx8IGN1cnJlbnRDb25maWcuc3RvcmVOYW1lO1xuICAgIH1cblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgcHJvbWlzZTtcbiAgICBpZiAoIW9wdGlvbnMubmFtZSkge1xuICAgICAgICBwcm9taXNlID0gUHJvbWlzZSQxLnJlamVjdCgnSW52YWxpZCBhcmd1bWVudHMnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgdmFyIGRiO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubmFtZSA9PT0gY3VycmVudENvbmZpZy5uYW1lKSB7XG4gICAgICAgICAgICAgICAgLy8gdXNlIHRoZSBkYiByZWZlcmVuY2Ugb2YgdGhlIGN1cnJlbnQgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICBkYiA9IHNlbGYuX2RiSW5mby5kYjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGIgPSBvcGVuRGF0YWJhc2Uob3B0aW9ucy5uYW1lLCAnJywgJycsIDApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuc3RvcmVOYW1lKSB7XG4gICAgICAgICAgICAgICAgLy8gZHJvcCBhbGwgZGF0YWJhc2UgdGFibGVzXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShnZXRBbGxTdG9yZU5hbWVzKGRiKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICBkYjogZGIsXG4gICAgICAgICAgICAgICAgICAgIHN0b3JlTmFtZXM6IFtvcHRpb25zLnN0b3JlTmFtZV1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAob3BlcmF0aW9uSW5mbykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbkluZm8uZGIudHJhbnNhY3Rpb24oZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZHJvcFRhYmxlKHN0b3JlTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuZXhlY3V0ZVNxbCgnRFJPUCBUQUJMRSBJRiBFWElTVFMgJyArIHN0b3JlTmFtZSwgW10sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICh0LCBlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgb3BlcmF0aW9ucyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gb3BlcmF0aW9uSW5mby5zdG9yZU5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb25zLnB1c2goZHJvcFRhYmxlKG9wZXJhdGlvbkluZm8uc3RvcmVOYW1lc1tpXSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgUHJvbWlzZSQxLmFsbChvcGVyYXRpb25zKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoc3FsRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHNxbEVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG52YXIgd2ViU1FMU3RvcmFnZSA9IHtcbiAgICBfZHJpdmVyOiAnd2ViU1FMU3RvcmFnZScsXG4gICAgX2luaXRTdG9yYWdlOiBfaW5pdFN0b3JhZ2UkMSxcbiAgICBfc3VwcG9ydDogaXNXZWJTUUxWYWxpZCgpLFxuICAgIGl0ZXJhdGU6IGl0ZXJhdGUkMSxcbiAgICBnZXRJdGVtOiBnZXRJdGVtJDEsXG4gICAgc2V0SXRlbTogc2V0SXRlbSQxLFxuICAgIHJlbW92ZUl0ZW06IHJlbW92ZUl0ZW0kMSxcbiAgICBjbGVhcjogY2xlYXIkMSxcbiAgICBsZW5ndGg6IGxlbmd0aCQxLFxuICAgIGtleToga2V5JDEsXG4gICAga2V5czoga2V5cyQxLFxuICAgIGRyb3BJbnN0YW5jZTogZHJvcEluc3RhbmNlJDFcbn07XG5cbmZ1bmN0aW9uIGlzTG9jYWxTdG9yYWdlVmFsaWQoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBsb2NhbFN0b3JhZ2UgIT09ICd1bmRlZmluZWQnICYmICdzZXRJdGVtJyBpbiBsb2NhbFN0b3JhZ2UgJiZcbiAgICAgICAgLy8gaW4gSUU4IHR5cGVvZiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSA9PT0gJ29iamVjdCdcbiAgICAgICAgISFsb2NhbFN0b3JhZ2Uuc2V0SXRlbTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9nZXRLZXlQcmVmaXgob3B0aW9ucywgZGVmYXVsdENvbmZpZykge1xuICAgIHZhciBrZXlQcmVmaXggPSBvcHRpb25zLm5hbWUgKyAnLyc7XG5cbiAgICBpZiAob3B0aW9ucy5zdG9yZU5hbWUgIT09IGRlZmF1bHRDb25maWcuc3RvcmVOYW1lKSB7XG4gICAgICAgIGtleVByZWZpeCArPSBvcHRpb25zLnN0b3JlTmFtZSArICcvJztcbiAgICB9XG4gICAgcmV0dXJuIGtleVByZWZpeDtcbn1cblxuLy8gQ2hlY2sgaWYgbG9jYWxTdG9yYWdlIHRocm93cyB3aGVuIHNhdmluZyBhbiBpdGVtXG5mdW5jdGlvbiBjaGVja0lmTG9jYWxTdG9yYWdlVGhyb3dzKCkge1xuICAgIHZhciBsb2NhbFN0b3JhZ2VUZXN0S2V5ID0gJ19sb2NhbGZvcmFnZV9zdXBwb3J0X3Rlc3QnO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0obG9jYWxTdG9yYWdlVGVzdEtleSwgdHJ1ZSk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGxvY2FsU3RvcmFnZVRlc3RLZXkpO1xuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cblxuLy8gQ2hlY2sgaWYgbG9jYWxTdG9yYWdlIGlzIHVzYWJsZSBhbmQgYWxsb3dzIHRvIHNhdmUgYW4gaXRlbVxuLy8gVGhpcyBtZXRob2QgY2hlY2tzIGlmIGxvY2FsU3RvcmFnZSBpcyB1c2FibGUgaW4gU2FmYXJpIFByaXZhdGUgQnJvd3Npbmdcbi8vIG1vZGUsIG9yIGluIGFueSBvdGhlciBjYXNlIHdoZXJlIHRoZSBhdmFpbGFibGUgcXVvdGEgZm9yIGxvY2FsU3RvcmFnZVxuLy8gaXMgMCBhbmQgdGhlcmUgd2Fzbid0IGFueSBzYXZlZCBpdGVtcyB5ZXQuXG5mdW5jdGlvbiBfaXNMb2NhbFN0b3JhZ2VVc2FibGUoKSB7XG4gICAgcmV0dXJuICFjaGVja0lmTG9jYWxTdG9yYWdlVGhyb3dzKCkgfHwgbG9jYWxTdG9yYWdlLmxlbmd0aCA+IDA7XG59XG5cbi8vIENvbmZpZyB0aGUgbG9jYWxTdG9yYWdlIGJhY2tlbmQsIHVzaW5nIG9wdGlvbnMgc2V0IGluIHRoZSBjb25maWcuXG5mdW5jdGlvbiBfaW5pdFN0b3JhZ2UkMihvcHRpb25zKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBkYkluZm8gPSB7fTtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgICBmb3IgKHZhciBpIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGRiSW5mb1tpXSA9IG9wdGlvbnNbaV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkYkluZm8ua2V5UHJlZml4ID0gX2dldEtleVByZWZpeChvcHRpb25zLCBzZWxmLl9kZWZhdWx0Q29uZmlnKTtcblxuICAgIGlmICghX2lzTG9jYWxTdG9yYWdlVXNhYmxlKCkpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UkMS5yZWplY3QoKTtcbiAgICB9XG5cbiAgICBzZWxmLl9kYkluZm8gPSBkYkluZm87XG4gICAgZGJJbmZvLnNlcmlhbGl6ZXIgPSBsb2NhbGZvcmFnZVNlcmlhbGl6ZXI7XG5cbiAgICByZXR1cm4gUHJvbWlzZSQxLnJlc29sdmUoKTtcbn1cblxuLy8gUmVtb3ZlIGFsbCBrZXlzIGZyb20gdGhlIGRhdGFzdG9yZSwgZWZmZWN0aXZlbHkgZGVzdHJveWluZyBhbGwgZGF0YSBpblxuLy8gdGhlIGFwcCdzIGtleS92YWx1ZSBzdG9yZSFcbmZ1bmN0aW9uIGNsZWFyJDIoY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHByb21pc2UgPSBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBrZXlQcmVmaXggPSBzZWxmLl9kYkluZm8ua2V5UHJlZml4O1xuXG4gICAgICAgIGZvciAodmFyIGkgPSBsb2NhbFN0b3JhZ2UubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBsb2NhbFN0b3JhZ2Uua2V5KGkpO1xuXG4gICAgICAgICAgICBpZiAoa2V5LmluZGV4T2Yoa2V5UHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbi8vIFJldHJpZXZlIGFuIGl0ZW0gZnJvbSB0aGUgc3RvcmUuIFVubGlrZSB0aGUgb3JpZ2luYWwgYXN5bmNfc3RvcmFnZVxuLy8gbGlicmFyeSBpbiBHYWlhLCB3ZSBkb24ndCBtb2RpZnkgcmV0dXJuIHZhbHVlcyBhdCBhbGwuIElmIGEga2V5J3MgdmFsdWVcbi8vIGlzIGB1bmRlZmluZWRgLCB3ZSBwYXNzIHRoYXQgdmFsdWUgdG8gdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuZnVuY3Rpb24gZ2V0SXRlbSQyKGtleSwgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBrZXkgPSBub3JtYWxpemVLZXkoa2V5KTtcblxuICAgIHZhciBwcm9taXNlID0gc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGJJbmZvID0gc2VsZi5fZGJJbmZvO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oZGJJbmZvLmtleVByZWZpeCArIGtleSk7XG5cbiAgICAgICAgLy8gSWYgYSByZXN1bHQgd2FzIGZvdW5kLCBwYXJzZSBpdCBmcm9tIHRoZSBzZXJpYWxpemVkXG4gICAgICAgIC8vIHN0cmluZyBpbnRvIGEgSlMgb2JqZWN0LiBJZiByZXN1bHQgaXNuJ3QgdHJ1dGh5LCB0aGUga2V5XG4gICAgICAgIC8vIGlzIGxpa2VseSB1bmRlZmluZWQgYW5kIHdlJ2xsIHBhc3MgaXQgc3RyYWlnaHQgdG8gdGhlXG4gICAgICAgIC8vIGNhbGxiYWNrLlxuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQgPSBkYkluZm8uc2VyaWFsaXplci5kZXNlcmlhbGl6ZShyZXN1bHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbi8vIEl0ZXJhdGUgb3ZlciBhbGwgaXRlbXMgaW4gdGhlIHN0b3JlLlxuZnVuY3Rpb24gaXRlcmF0ZSQyKGl0ZXJhdG9yLCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciBwcm9taXNlID0gc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGJJbmZvID0gc2VsZi5fZGJJbmZvO1xuICAgICAgICB2YXIga2V5UHJlZml4ID0gZGJJbmZvLmtleVByZWZpeDtcbiAgICAgICAgdmFyIGtleVByZWZpeExlbmd0aCA9IGtleVByZWZpeC5sZW5ndGg7XG4gICAgICAgIHZhciBsZW5ndGggPSBsb2NhbFN0b3JhZ2UubGVuZ3RoO1xuXG4gICAgICAgIC8vIFdlIHVzZSBhIGRlZGljYXRlZCBpdGVyYXRvciBpbnN0ZWFkIG9mIHRoZSBgaWAgdmFyaWFibGUgYmVsb3dcbiAgICAgICAgLy8gc28gb3RoZXIga2V5cyB3ZSBmZXRjaCBpbiBsb2NhbFN0b3JhZ2UgYXJlbid0IGNvdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIGBpdGVyYXRpb25OdW1iZXJgIGFyZ3VtZW50IHBhc3NlZCB0byB0aGUgYGl0ZXJhdGUoKWBcbiAgICAgICAgLy8gY2FsbGJhY2suXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFNlZTogZ2l0aHViLmNvbS9tb3ppbGxhL2xvY2FsRm9yYWdlL3B1bGwvNDM1I2Rpc2N1c3Npb25fcjM4MDYxNTMwXG4gICAgICAgIHZhciBpdGVyYXRpb25OdW1iZXIgPSAxO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBsb2NhbFN0b3JhZ2Uua2V5KGkpO1xuICAgICAgICAgICAgaWYgKGtleS5pbmRleE9mKGtleVByZWZpeCkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG5cbiAgICAgICAgICAgIC8vIElmIGEgcmVzdWx0IHdhcyBmb3VuZCwgcGFyc2UgaXQgZnJvbSB0aGUgc2VyaWFsaXplZFxuICAgICAgICAgICAgLy8gc3RyaW5nIGludG8gYSBKUyBvYmplY3QuIElmIHJlc3VsdCBpc24ndCB0cnV0aHksIHRoZVxuICAgICAgICAgICAgLy8ga2V5IGlzIGxpa2VseSB1bmRlZmluZWQgYW5kIHdlJ2xsIHBhc3MgaXQgc3RyYWlnaHRcbiAgICAgICAgICAgIC8vIHRvIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gZGJJbmZvLnNlcmlhbGl6ZXIuZGVzZXJpYWxpemUodmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWx1ZSA9IGl0ZXJhdG9yKHZhbHVlLCBrZXkuc3Vic3RyaW5nKGtleVByZWZpeExlbmd0aCksIGl0ZXJhdGlvbk51bWJlcisrKTtcblxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbi8vIFNhbWUgYXMgbG9jYWxTdG9yYWdlJ3Mga2V5KCkgbWV0aG9kLCBleGNlcHQgdGFrZXMgYSBjYWxsYmFjay5cbmZ1bmN0aW9uIGtleSQyKG4sIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBwcm9taXNlID0gc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGJJbmZvID0gc2VsZi5fZGJJbmZvO1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gbG9jYWxTdG9yYWdlLmtleShuKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgdGhlIHByZWZpeCBmcm9tIHRoZSBrZXksIGlmIGEga2V5IGlzIGZvdW5kLlxuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc3Vic3RyaW5nKGRiSW5mby5rZXlQcmVmaXgubGVuZ3RoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBrZXlzJDIoY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHByb21pc2UgPSBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYkluZm8gPSBzZWxmLl9kYkluZm87XG4gICAgICAgIHZhciBsZW5ndGggPSBsb2NhbFN0b3JhZ2UubGVuZ3RoO1xuICAgICAgICB2YXIga2V5cyA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtS2V5ID0gbG9jYWxTdG9yYWdlLmtleShpKTtcbiAgICAgICAgICAgIGlmIChpdGVtS2V5LmluZGV4T2YoZGJJbmZvLmtleVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBrZXlzLnB1c2goaXRlbUtleS5zdWJzdHJpbmcoZGJJbmZvLmtleVByZWZpeC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBrZXlzO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuLy8gU3VwcGx5IHRoZSBudW1iZXIgb2Yga2V5cyBpbiB0aGUgZGF0YXN0b3JlIHRvIHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbmZ1bmN0aW9uIGxlbmd0aCQyKGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBwcm9taXNlID0gc2VsZi5rZXlzKCkudGhlbihmdW5jdGlvbiAoa2V5cykge1xuICAgICAgICByZXR1cm4ga2V5cy5sZW5ndGg7XG4gICAgfSk7XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG4vLyBSZW1vdmUgYW4gaXRlbSBmcm9tIHRoZSBzdG9yZSwgbmljZSBhbmQgc2ltcGxlLlxuZnVuY3Rpb24gcmVtb3ZlSXRlbSQyKGtleSwgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBrZXkgPSBub3JtYWxpemVLZXkoa2V5KTtcblxuICAgIHZhciBwcm9taXNlID0gc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGJJbmZvID0gc2VsZi5fZGJJbmZvO1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShkYkluZm8ua2V5UHJlZml4ICsga2V5KTtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbi8vIFNldCBhIGtleSdzIHZhbHVlIGFuZCBydW4gYW4gb3B0aW9uYWwgY2FsbGJhY2sgb25jZSB0aGUgdmFsdWUgaXMgc2V0LlxuLy8gVW5saWtlIEdhaWEncyBpbXBsZW1lbnRhdGlvbiwgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIHBhc3NlZCB0aGUgdmFsdWUsXG4vLyBpbiBjYXNlIHlvdSB3YW50IHRvIG9wZXJhdGUgb24gdGhhdCB2YWx1ZSBvbmx5IGFmdGVyIHlvdSdyZSBzdXJlIGl0XG4vLyBzYXZlZCwgb3Igc29tZXRoaW5nIGxpa2UgdGhhdC5cbmZ1bmN0aW9uIHNldEl0ZW0kMihrZXksIHZhbHVlLCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIGtleSA9IG5vcm1hbGl6ZUtleShrZXkpO1xuXG4gICAgdmFyIHByb21pc2UgPSBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIENvbnZlcnQgdW5kZWZpbmVkIHZhbHVlcyB0byBudWxsLlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9sb2NhbEZvcmFnZS9wdWxsLzQyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTYXZlIHRoZSBvcmlnaW5hbCB2YWx1ZSB0byBwYXNzIHRvIHRoZSBjYWxsYmFjay5cbiAgICAgICAgdmFyIG9yaWdpbmFsVmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgZGJJbmZvID0gc2VsZi5fZGJJbmZvO1xuICAgICAgICAgICAgZGJJbmZvLnNlcmlhbGl6ZXIuc2VyaWFsaXplKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGRiSW5mby5rZXlQcmVmaXggKyBrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUob3JpZ2luYWxWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvY2FsU3RvcmFnZSBjYXBhY2l0eSBleGNlZWRlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IE1ha2UgdGhpcyBhIHNwZWNpZmljIGVycm9yL2V2ZW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1F1b3RhRXhjZWVkZWRFcnJvcicgfHwgZS5uYW1lID09PSAnTlNfRVJST1JfRE9NX1FVT1RBX1JFQUNIRUQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gZHJvcEluc3RhbmNlJDIob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9IGdldENhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICBvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgIT09ICdmdW5jdGlvbicgJiYgb3B0aW9ucyB8fCB7fTtcbiAgICBpZiAoIW9wdGlvbnMubmFtZSkge1xuICAgICAgICB2YXIgY3VycmVudENvbmZpZyA9IHRoaXMuY29uZmlnKCk7XG4gICAgICAgIG9wdGlvbnMubmFtZSA9IG9wdGlvbnMubmFtZSB8fCBjdXJyZW50Q29uZmlnLm5hbWU7XG4gICAgICAgIG9wdGlvbnMuc3RvcmVOYW1lID0gb3B0aW9ucy5zdG9yZU5hbWUgfHwgY3VycmVudENvbmZpZy5zdG9yZU5hbWU7XG4gICAgfVxuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBwcm9taXNlO1xuICAgIGlmICghb3B0aW9ucy5uYW1lKSB7XG4gICAgICAgIHByb21pc2UgPSBQcm9taXNlJDEucmVqZWN0KCdJbnZhbGlkIGFyZ3VtZW50cycpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuc3RvcmVOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShvcHRpb25zLm5hbWUgKyAnLycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKF9nZXRLZXlQcmVmaXgob3B0aW9ucywgc2VsZi5fZGVmYXVsdENvbmZpZykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChrZXlQcmVmaXgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBsb2NhbFN0b3JhZ2UubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gbG9jYWxTdG9yYWdlLmtleShpKTtcblxuICAgICAgICAgICAgICAgIGlmIChrZXkuaW5kZXhPZihrZXlQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG52YXIgbG9jYWxTdG9yYWdlV3JhcHBlciA9IHtcbiAgICBfZHJpdmVyOiAnbG9jYWxTdG9yYWdlV3JhcHBlcicsXG4gICAgX2luaXRTdG9yYWdlOiBfaW5pdFN0b3JhZ2UkMixcbiAgICBfc3VwcG9ydDogaXNMb2NhbFN0b3JhZ2VWYWxpZCgpLFxuICAgIGl0ZXJhdGU6IGl0ZXJhdGUkMixcbiAgICBnZXRJdGVtOiBnZXRJdGVtJDIsXG4gICAgc2V0SXRlbTogc2V0SXRlbSQyLFxuICAgIHJlbW92ZUl0ZW06IHJlbW92ZUl0ZW0kMixcbiAgICBjbGVhcjogY2xlYXIkMixcbiAgICBsZW5ndGg6IGxlbmd0aCQyLFxuICAgIGtleToga2V5JDIsXG4gICAga2V5czoga2V5cyQyLFxuICAgIGRyb3BJbnN0YW5jZTogZHJvcEluc3RhbmNlJDJcbn07XG5cbnZhciBzYW1lVmFsdWUgPSBmdW5jdGlvbiBzYW1lVmFsdWUoeCwgeSkge1xuICAgIHJldHVybiB4ID09PSB5IHx8IHR5cGVvZiB4ID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgeSA9PT0gJ251bWJlcicgJiYgaXNOYU4oeCkgJiYgaXNOYU4oeSk7XG59O1xuXG52YXIgaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyhhcnJheSwgc2VhcmNoRWxlbWVudCkge1xuICAgIHZhciBsZW4gPSBhcnJheS5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIGlmIChzYW1lVmFsdWUoYXJyYXlbaV0sIHNlYXJjaEVsZW1lbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcmcpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG4vLyBEcml2ZXJzIGFyZSBzdG9yZWQgaGVyZSB3aGVuIGBkZWZpbmVEcml2ZXIoKWAgaXMgY2FsbGVkLlxuLy8gVGhleSBhcmUgc2hhcmVkIGFjcm9zcyBhbGwgaW5zdGFuY2VzIG9mIGxvY2FsRm9yYWdlLlxudmFyIERlZmluZWREcml2ZXJzID0ge307XG5cbnZhciBEcml2ZXJTdXBwb3J0ID0ge307XG5cbnZhciBEZWZhdWx0RHJpdmVycyA9IHtcbiAgICBJTkRFWEVEREI6IGFzeW5jU3RvcmFnZSxcbiAgICBXRUJTUUw6IHdlYlNRTFN0b3JhZ2UsXG4gICAgTE9DQUxTVE9SQUdFOiBsb2NhbFN0b3JhZ2VXcmFwcGVyXG59O1xuXG52YXIgRGVmYXVsdERyaXZlck9yZGVyID0gW0RlZmF1bHREcml2ZXJzLklOREVYRUREQi5fZHJpdmVyLCBEZWZhdWx0RHJpdmVycy5XRUJTUUwuX2RyaXZlciwgRGVmYXVsdERyaXZlcnMuTE9DQUxTVE9SQUdFLl9kcml2ZXJdO1xuXG52YXIgT3B0aW9uYWxEcml2ZXJNZXRob2RzID0gWydkcm9wSW5zdGFuY2UnXTtcblxudmFyIExpYnJhcnlNZXRob2RzID0gWydjbGVhcicsICdnZXRJdGVtJywgJ2l0ZXJhdGUnLCAna2V5JywgJ2tleXMnLCAnbGVuZ3RoJywgJ3JlbW92ZUl0ZW0nLCAnc2V0SXRlbSddLmNvbmNhdChPcHRpb25hbERyaXZlck1ldGhvZHMpO1xuXG52YXIgRGVmYXVsdENvbmZpZyA9IHtcbiAgICBkZXNjcmlwdGlvbjogJycsXG4gICAgZHJpdmVyOiBEZWZhdWx0RHJpdmVyT3JkZXIuc2xpY2UoKSxcbiAgICBuYW1lOiAnbG9jYWxmb3JhZ2UnLFxuICAgIC8vIERlZmF1bHQgREIgc2l6ZSBpcyBfSlVTVCBVTkRFUl8gNU1CLCBhcyBpdCdzIHRoZSBoaWdoZXN0IHNpemVcbiAgICAvLyB3ZSBjYW4gdXNlIHdpdGhvdXQgYSBwcm9tcHQuXG4gICAgc2l6ZTogNDk4MDczNixcbiAgICBzdG9yZU5hbWU6ICdrZXl2YWx1ZXBhaXJzJyxcbiAgICB2ZXJzaW9uOiAxLjBcbn07XG5cbmZ1bmN0aW9uIGNhbGxXaGVuUmVhZHkobG9jYWxGb3JhZ2VJbnN0YW5jZSwgbGlicmFyeU1ldGhvZCkge1xuICAgIGxvY2FsRm9yYWdlSW5zdGFuY2VbbGlicmFyeU1ldGhvZF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgcmV0dXJuIGxvY2FsRm9yYWdlSW5zdGFuY2UucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbEZvcmFnZUluc3RhbmNlW2xpYnJhcnlNZXRob2RdLmFwcGx5KGxvY2FsRm9yYWdlSW5zdGFuY2UsIF9hcmdzKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgICAgaWYgKGFyZykge1xuICAgICAgICAgICAgZm9yICh2YXIgX2tleSBpbiBhcmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXJnLmhhc093blByb3BlcnR5KF9rZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0FycmF5KGFyZ1tfa2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50c1swXVtfa2V5XSA9IGFyZ1tfa2V5XS5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzWzBdW19rZXldID0gYXJnW19rZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbn1cblxudmFyIExvY2FsRm9yYWdlID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExvY2FsRm9yYWdlKG9wdGlvbnMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvY2FsRm9yYWdlKTtcblxuICAgICAgICBmb3IgKHZhciBkcml2ZXJUeXBlS2V5IGluIERlZmF1bHREcml2ZXJzKSB7XG4gICAgICAgICAgICBpZiAoRGVmYXVsdERyaXZlcnMuaGFzT3duUHJvcGVydHkoZHJpdmVyVHlwZUtleSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZHJpdmVyID0gRGVmYXVsdERyaXZlcnNbZHJpdmVyVHlwZUtleV07XG4gICAgICAgICAgICAgICAgdmFyIGRyaXZlck5hbWUgPSBkcml2ZXIuX2RyaXZlcjtcbiAgICAgICAgICAgICAgICB0aGlzW2RyaXZlclR5cGVLZXldID0gZHJpdmVyTmFtZTtcblxuICAgICAgICAgICAgICAgIGlmICghRGVmaW5lZERyaXZlcnNbZHJpdmVyTmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgZG9uJ3QgbmVlZCB0byB3YWl0IGZvciB0aGUgcHJvbWlzZSxcbiAgICAgICAgICAgICAgICAgICAgLy8gc2luY2UgdGhlIGRlZmF1bHQgZHJpdmVycyBjYW4gYmUgZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAvLyBpbiBhIGJsb2NraW5nIG1hbm5lclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmluZURyaXZlcihkcml2ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2RlZmF1bHRDb25maWcgPSBleHRlbmQoe30sIERlZmF1bHRDb25maWcpO1xuICAgICAgICB0aGlzLl9jb25maWcgPSBleHRlbmQoe30sIHRoaXMuX2RlZmF1bHRDb25maWcsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9kcml2ZXJTZXQgPSBudWxsO1xuICAgICAgICB0aGlzLl9pbml0RHJpdmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcmVhZHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZGJJbmZvID0gbnVsbDtcblxuICAgICAgICB0aGlzLl93cmFwTGlicmFyeU1ldGhvZHNXaXRoUmVhZHkoKTtcbiAgICAgICAgdGhpcy5zZXREcml2ZXIodGhpcy5fY29uZmlnLmRyaXZlcilbXCJjYXRjaFwiXShmdW5jdGlvbiAoKSB7fSk7XG4gICAgfVxuXG4gICAgLy8gU2V0IGFueSBjb25maWcgdmFsdWVzIGZvciBsb2NhbEZvcmFnZTsgY2FuIGJlIGNhbGxlZCBhbnl0aW1lIGJlZm9yZVxuICAgIC8vIHRoZSBmaXJzdCBBUEkgY2FsbCAoZS5nLiBgZ2V0SXRlbWAsIGBzZXRJdGVtYCkuXG4gICAgLy8gV2UgbG9vcCB0aHJvdWdoIG9wdGlvbnMgc28gd2UgZG9uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGNvbmZpZ1xuICAgIC8vIHZhbHVlcy5cblxuXG4gICAgTG9jYWxGb3JhZ2UucHJvdG90eXBlLmNvbmZpZyA9IGZ1bmN0aW9uIGNvbmZpZyhvcHRpb25zKSB7XG4gICAgICAgIC8vIElmIHRoZSBvcHRpb25zIGFyZ3VtZW50IGlzIGFuIG9iamVjdCwgd2UgdXNlIGl0IHRvIHNldCB2YWx1ZXMuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgd2UgcmV0dXJuIGVpdGhlciBhIHNwZWNpZmllZCBjb25maWcgdmFsdWUgb3IgYWxsXG4gICAgICAgIC8vIGNvbmZpZyB2YWx1ZXMuXG4gICAgICAgIGlmICgodHlwZW9mIG9wdGlvbnMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9wdGlvbnMpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIC8vIElmIGxvY2FsZm9yYWdlIGlzIHJlYWR5IGFuZCBmdWxseSBpbml0aWFsaXplZCwgd2UgY2FuJ3Qgc2V0XG4gICAgICAgICAgICAvLyBhbnkgbmV3IGNvbmZpZ3VyYXRpb24gdmFsdWVzLiBJbnN0ZWFkLCB3ZSByZXR1cm4gYW4gZXJyb3IuXG4gICAgICAgICAgICBpZiAodGhpcy5fcmVhZHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiQ2FuJ3QgY2FsbCBjb25maWcoKSBhZnRlciBsb2NhbGZvcmFnZSBcIiArICdoYXMgYmVlbiB1c2VkLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gJ3N0b3JlTmFtZScpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1tpXSA9IG9wdGlvbnNbaV0ucmVwbGFjZSgvXFxXL2csICdfJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09ICd2ZXJzaW9uJyAmJiB0eXBlb2Ygb3B0aW9uc1tpXSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignRGF0YWJhc2UgdmVyc2lvbiBtdXN0IGJlIGEgbnVtYmVyLicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbmZpZ1tpXSA9IG9wdGlvbnNbaV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGFmdGVyIGFsbCBjb25maWcgb3B0aW9ucyBhcmUgc2V0IGFuZFxuICAgICAgICAgICAgLy8gdGhlIGRyaXZlciBvcHRpb24gaXMgdXNlZCwgdHJ5IHNldHRpbmcgaXRcbiAgICAgICAgICAgIGlmICgnZHJpdmVyJyBpbiBvcHRpb25zICYmIG9wdGlvbnMuZHJpdmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0RHJpdmVyKHRoaXMuX2NvbmZpZy5kcml2ZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb25maWdbb3B0aW9uc107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIFVzZWQgdG8gZGVmaW5lIGEgY3VzdG9tIGRyaXZlciwgc2hhcmVkIGFjcm9zcyBhbGwgaW5zdGFuY2VzIG9mXG4gICAgLy8gbG9jYWxGb3JhZ2UuXG5cblxuICAgIExvY2FsRm9yYWdlLnByb3RvdHlwZS5kZWZpbmVEcml2ZXIgPSBmdW5jdGlvbiBkZWZpbmVEcml2ZXIoZHJpdmVyT2JqZWN0LCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgZHJpdmVyTmFtZSA9IGRyaXZlck9iamVjdC5fZHJpdmVyO1xuICAgICAgICAgICAgICAgIHZhciBjb21wbGlhbmNlRXJyb3IgPSBuZXcgRXJyb3IoJ0N1c3RvbSBkcml2ZXIgbm90IGNvbXBsaWFudDsgc2VlICcgKyAnaHR0cHM6Ly9tb3ppbGxhLmdpdGh1Yi5pby9sb2NhbEZvcmFnZS8jZGVmaW5lZHJpdmVyJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBBIGRyaXZlciBuYW1lIHNob3VsZCBiZSBkZWZpbmVkIGFuZCBub3Qgb3ZlcmxhcCB3aXRoIHRoZVxuICAgICAgICAgICAgICAgIC8vIGxpYnJhcnktZGVmaW5lZCwgZGVmYXVsdCBkcml2ZXJzLlxuICAgICAgICAgICAgICAgIGlmICghZHJpdmVyT2JqZWN0Ll9kcml2ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGNvbXBsaWFuY2VFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgZHJpdmVyTWV0aG9kcyA9IExpYnJhcnlNZXRob2RzLmNvbmNhdCgnX2luaXRTdG9yYWdlJyk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGRyaXZlck1ldGhvZHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRyaXZlck1ldGhvZE5hbWUgPSBkcml2ZXJNZXRob2RzW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIHByb3BlcnR5IGlzIHRoZXJlLFxuICAgICAgICAgICAgICAgICAgICAvLyBpdCBzaG91bGQgYmUgYSBtZXRob2QgZXZlbiB3aGVuIG9wdGlvbmFsXG4gICAgICAgICAgICAgICAgICAgIHZhciBpc1JlcXVpcmVkID0gIWluY2x1ZGVzKE9wdGlvbmFsRHJpdmVyTWV0aG9kcywgZHJpdmVyTWV0aG9kTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoaXNSZXF1aXJlZCB8fCBkcml2ZXJPYmplY3RbZHJpdmVyTWV0aG9kTmFtZV0pICYmIHR5cGVvZiBkcml2ZXJPYmplY3RbZHJpdmVyTWV0aG9kTmFtZV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChjb21wbGlhbmNlRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGNvbmZpZ3VyZU1pc3NpbmdNZXRob2RzID0gZnVuY3Rpb24gY29uZmlndXJlTWlzc2luZ01ldGhvZHMoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXRob2ROb3RJbXBsZW1lbnRlZEZhY3RvcnkgPSBmdW5jdGlvbiBtZXRob2ROb3RJbXBsZW1lbnRlZEZhY3RvcnkobWV0aG9kTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoJ01ldGhvZCAnICsgbWV0aG9kTmFtZSArICcgaXMgbm90IGltcGxlbWVudGVkIGJ5IHRoZSBjdXJyZW50IGRyaXZlcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9taXNlID0gUHJvbWlzZSQxLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9sZW4gPSBPcHRpb25hbERyaXZlck1ldGhvZHMubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcHRpb25hbERyaXZlck1ldGhvZCA9IE9wdGlvbmFsRHJpdmVyTWV0aG9kc1tfaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRyaXZlck9iamVjdFtvcHRpb25hbERyaXZlck1ldGhvZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcml2ZXJPYmplY3Rbb3B0aW9uYWxEcml2ZXJNZXRob2RdID0gbWV0aG9kTm90SW1wbGVtZW50ZWRGYWN0b3J5KG9wdGlvbmFsRHJpdmVyTWV0aG9kKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBjb25maWd1cmVNaXNzaW5nTWV0aG9kcygpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHNldERyaXZlclN1cHBvcnQgPSBmdW5jdGlvbiBzZXREcml2ZXJTdXBwb3J0KHN1cHBvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKERlZmluZWREcml2ZXJzW2RyaXZlck5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oJ1JlZGVmaW5pbmcgTG9jYWxGb3JhZ2UgZHJpdmVyOiAnICsgZHJpdmVyTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgRGVmaW5lZERyaXZlcnNbZHJpdmVyTmFtZV0gPSBkcml2ZXJPYmplY3Q7XG4gICAgICAgICAgICAgICAgICAgIERyaXZlclN1cHBvcnRbZHJpdmVyTmFtZV0gPSBzdXBwb3J0O1xuICAgICAgICAgICAgICAgICAgICAvLyBkb24ndCB1c2UgYSB0aGVuLCBzbyB0aGF0IHdlIGNhbiBkZWZpbmVcbiAgICAgICAgICAgICAgICAgICAgLy8gZHJpdmVycyB0aGF0IGhhdmUgc2ltcGxlIF9zdXBwb3J0IG1ldGhvZHNcbiAgICAgICAgICAgICAgICAgICAgLy8gaW4gYSBibG9ja2luZyBtYW5uZXJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAoJ19zdXBwb3J0JyBpbiBkcml2ZXJPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRyaXZlck9iamVjdC5fc3VwcG9ydCAmJiB0eXBlb2YgZHJpdmVyT2JqZWN0Ll9zdXBwb3J0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcml2ZXJPYmplY3QuX3N1cHBvcnQoKS50aGVuKHNldERyaXZlclN1cHBvcnQsIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXREcml2ZXJTdXBwb3J0KCEhZHJpdmVyT2JqZWN0Ll9zdXBwb3J0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNldERyaXZlclN1cHBvcnQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXhlY3V0ZVR3b0NhbGxiYWNrcyhwcm9taXNlLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICBMb2NhbEZvcmFnZS5wcm90b3R5cGUuZHJpdmVyID0gZnVuY3Rpb24gZHJpdmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZHJpdmVyIHx8IG51bGw7XG4gICAgfTtcblxuICAgIExvY2FsRm9yYWdlLnByb3RvdHlwZS5nZXREcml2ZXIgPSBmdW5jdGlvbiBnZXREcml2ZXIoZHJpdmVyTmFtZSwgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGdldERyaXZlclByb21pc2UgPSBEZWZpbmVkRHJpdmVyc1tkcml2ZXJOYW1lXSA/IFByb21pc2UkMS5yZXNvbHZlKERlZmluZWREcml2ZXJzW2RyaXZlck5hbWVdKSA6IFByb21pc2UkMS5yZWplY3QobmV3IEVycm9yKCdEcml2ZXIgbm90IGZvdW5kLicpKTtcblxuICAgICAgICBleGVjdXRlVHdvQ2FsbGJhY2tzKGdldERyaXZlclByb21pc2UsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuIGdldERyaXZlclByb21pc2U7XG4gICAgfTtcblxuICAgIExvY2FsRm9yYWdlLnByb3RvdHlwZS5nZXRTZXJpYWxpemVyID0gZnVuY3Rpb24gZ2V0U2VyaWFsaXplcihjYWxsYmFjaykge1xuICAgICAgICB2YXIgc2VyaWFsaXplclByb21pc2UgPSBQcm9taXNlJDEucmVzb2x2ZShsb2NhbGZvcmFnZVNlcmlhbGl6ZXIpO1xuICAgICAgICBleGVjdXRlVHdvQ2FsbGJhY2tzKHNlcmlhbGl6ZXJQcm9taXNlLCBjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiBzZXJpYWxpemVyUHJvbWlzZTtcbiAgICB9O1xuXG4gICAgTG9jYWxGb3JhZ2UucHJvdG90eXBlLnJlYWR5ID0gZnVuY3Rpb24gcmVhZHkoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIHZhciBwcm9taXNlID0gc2VsZi5fZHJpdmVyU2V0LnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHNlbGYuX3JlYWR5ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fcmVhZHkgPSBzZWxmLl9pbml0RHJpdmVyKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZWFkeTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXhlY3V0ZVR3b0NhbGxiYWNrcyhwcm9taXNlLCBjYWxsYmFjaywgY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgTG9jYWxGb3JhZ2UucHJvdG90eXBlLnNldERyaXZlciA9IGZ1bmN0aW9uIHNldERyaXZlcihkcml2ZXJzLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCFpc0FycmF5KGRyaXZlcnMpKSB7XG4gICAgICAgICAgICBkcml2ZXJzID0gW2RyaXZlcnNdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN1cHBvcnRlZERyaXZlcnMgPSB0aGlzLl9nZXRTdXBwb3J0ZWREcml2ZXJzKGRyaXZlcnMpO1xuXG4gICAgICAgIGZ1bmN0aW9uIHNldERyaXZlclRvQ29uZmlnKCkge1xuICAgICAgICAgICAgc2VsZi5fY29uZmlnLmRyaXZlciA9IHNlbGYuZHJpdmVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBleHRlbmRTZWxmV2l0aERyaXZlcihkcml2ZXIpIHtcbiAgICAgICAgICAgIHNlbGYuX2V4dGVuZChkcml2ZXIpO1xuICAgICAgICAgICAgc2V0RHJpdmVyVG9Db25maWcoKTtcblxuICAgICAgICAgICAgc2VsZi5fcmVhZHkgPSBzZWxmLl9pbml0U3RvcmFnZShzZWxmLl9jb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3JlYWR5O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5pdERyaXZlcihzdXBwb3J0ZWREcml2ZXJzKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50RHJpdmVySW5kZXggPSAwO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZHJpdmVyUHJvbWlzZUxvb3AoKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50RHJpdmVySW5kZXggPCBzdXBwb3J0ZWREcml2ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRyaXZlck5hbWUgPSBzdXBwb3J0ZWREcml2ZXJzW2N1cnJlbnREcml2ZXJJbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RHJpdmVySW5kZXgrKztcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fZGJJbmZvID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3JlYWR5ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZ2V0RHJpdmVyKGRyaXZlck5hbWUpLnRoZW4oZXh0ZW5kU2VsZldpdGhEcml2ZXIpW1wiY2F0Y2hcIl0oZHJpdmVyUHJvbWlzZUxvb3ApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0RHJpdmVyVG9Db25maWcoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCdObyBhdmFpbGFibGUgc3RvcmFnZSBtZXRob2QgZm91bmQuJyk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2RyaXZlclNldCA9IFByb21pc2UkMS5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5fZHJpdmVyU2V0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBkcml2ZXJQcm9taXNlTG9vcCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZXJlIG1pZ2h0IGJlIGEgZHJpdmVyIGluaXRpYWxpemF0aW9uIGluIHByb2dyZXNzXG4gICAgICAgIC8vIHNvIHdhaXQgZm9yIGl0IHRvIGZpbmlzaCBpbiBvcmRlciB0byBhdm9pZCBhIHBvc3NpYmxlXG4gICAgICAgIC8vIHJhY2UgY29uZGl0aW9uIHRvIHNldCBfZGJJbmZvXG4gICAgICAgIHZhciBvbGREcml2ZXJTZXREb25lID0gdGhpcy5fZHJpdmVyU2V0ICE9PSBudWxsID8gdGhpcy5fZHJpdmVyU2V0W1wiY2F0Y2hcIl0oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UkMS5yZXNvbHZlKCk7XG4gICAgICAgIH0pIDogUHJvbWlzZSQxLnJlc29sdmUoKTtcblxuICAgICAgICB0aGlzLl9kcml2ZXJTZXQgPSBvbGREcml2ZXJTZXREb25lLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGRyaXZlck5hbWUgPSBzdXBwb3J0ZWREcml2ZXJzWzBdO1xuICAgICAgICAgICAgc2VsZi5fZGJJbmZvID0gbnVsbDtcbiAgICAgICAgICAgIHNlbGYuX3JlYWR5ID0gbnVsbDtcblxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuZ2V0RHJpdmVyKGRyaXZlck5hbWUpLnRoZW4oZnVuY3Rpb24gKGRyaXZlcikge1xuICAgICAgICAgICAgICAgIHNlbGYuX2RyaXZlciA9IGRyaXZlci5fZHJpdmVyO1xuICAgICAgICAgICAgICAgIHNldERyaXZlclRvQ29uZmlnKCk7XG4gICAgICAgICAgICAgICAgc2VsZi5fd3JhcExpYnJhcnlNZXRob2RzV2l0aFJlYWR5KCk7XG4gICAgICAgICAgICAgICAgc2VsZi5faW5pdERyaXZlciA9IGluaXREcml2ZXIoc3VwcG9ydGVkRHJpdmVycyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZXREcml2ZXJUb0NvbmZpZygpO1xuICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCdObyBhdmFpbGFibGUgc3RvcmFnZSBtZXRob2QgZm91bmQuJyk7XG4gICAgICAgICAgICBzZWxmLl9kcml2ZXJTZXQgPSBQcm9taXNlJDEucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kcml2ZXJTZXQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGV4ZWN1dGVUd29DYWxsYmFja3ModGhpcy5fZHJpdmVyU2V0LCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XG4gICAgICAgIHJldHVybiB0aGlzLl9kcml2ZXJTZXQ7XG4gICAgfTtcblxuICAgIExvY2FsRm9yYWdlLnByb3RvdHlwZS5zdXBwb3J0cyA9IGZ1bmN0aW9uIHN1cHBvcnRzKGRyaXZlck5hbWUpIHtcbiAgICAgICAgcmV0dXJuICEhRHJpdmVyU3VwcG9ydFtkcml2ZXJOYW1lXTtcbiAgICB9O1xuXG4gICAgTG9jYWxGb3JhZ2UucHJvdG90eXBlLl9leHRlbmQgPSBmdW5jdGlvbiBfZXh0ZW5kKGxpYnJhcnlNZXRob2RzQW5kUHJvcGVydGllcykge1xuICAgICAgICBleHRlbmQodGhpcywgbGlicmFyeU1ldGhvZHNBbmRQcm9wZXJ0aWVzKTtcbiAgICB9O1xuXG4gICAgTG9jYWxGb3JhZ2UucHJvdG90eXBlLl9nZXRTdXBwb3J0ZWREcml2ZXJzID0gZnVuY3Rpb24gX2dldFN1cHBvcnRlZERyaXZlcnMoZHJpdmVycykge1xuICAgICAgICB2YXIgc3VwcG9ydGVkRHJpdmVycyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZHJpdmVycy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIGRyaXZlck5hbWUgPSBkcml2ZXJzW2ldO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3VwcG9ydHMoZHJpdmVyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBzdXBwb3J0ZWREcml2ZXJzLnB1c2goZHJpdmVyTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cHBvcnRlZERyaXZlcnM7XG4gICAgfTtcblxuICAgIExvY2FsRm9yYWdlLnByb3RvdHlwZS5fd3JhcExpYnJhcnlNZXRob2RzV2l0aFJlYWR5ID0gZnVuY3Rpb24gX3dyYXBMaWJyYXJ5TWV0aG9kc1dpdGhSZWFkeSgpIHtcbiAgICAgICAgLy8gQWRkIGEgc3R1YiBmb3IgZWFjaCBkcml2ZXIgQVBJIG1ldGhvZCB0aGF0IGRlbGF5cyB0aGUgY2FsbCB0byB0aGVcbiAgICAgICAgLy8gY29ycmVzcG9uZGluZyBkcml2ZXIgbWV0aG9kIHVudGlsIGxvY2FsRm9yYWdlIGlzIHJlYWR5LiBUaGVzZSBzdHVic1xuICAgICAgICAvLyB3aWxsIGJlIHJlcGxhY2VkIGJ5IHRoZSBkcml2ZXIgbWV0aG9kcyBhcyBzb29uIGFzIHRoZSBkcml2ZXIgaXNcbiAgICAgICAgLy8gbG9hZGVkLCBzbyB0aGVyZSBpcyBubyBwZXJmb3JtYW5jZSBpbXBhY3QuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBMaWJyYXJ5TWV0aG9kcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY2FsbFdoZW5SZWFkeSh0aGlzLCBMaWJyYXJ5TWV0aG9kc1tpXSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgTG9jYWxGb3JhZ2UucHJvdG90eXBlLmNyZWF0ZUluc3RhbmNlID0gZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2Uob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IExvY2FsRm9yYWdlKG9wdGlvbnMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gTG9jYWxGb3JhZ2U7XG59KCk7XG5cbi8vIFRoZSBhY3R1YWwgbG9jYWxGb3JhZ2Ugb2JqZWN0IHRoYXQgd2UgZXhwb3NlIGFzIGEgbW9kdWxlIG9yIHZpYSBhXG4vLyBnbG9iYWwuIEl0J3MgZXh0ZW5kZWQgYnkgcHVsbGluZyBpbiBvbmUgb2Ygb3VyIG90aGVyIGxpYnJhcmllcy5cblxuXG52YXIgbG9jYWxmb3JhZ2VfanMgPSBuZXcgTG9jYWxGb3JhZ2UoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBsb2NhbGZvcmFnZV9qcztcblxufSx7XCIzXCI6M31dfSx7fSxbNF0pKDQpXG59KTtcbiIsIlxyXG5leHBvcnQgY29uc3Qgc3ZnQ3JlYXRlX1JlY3RDZW50ZXJBdHRyaWJ1dGUgPSB7XHJcbiAgICBmaWxsOiBcInRyYW5zcGFyZW50XCIsXHJcbiAgICBzdHJva2U6IFwiIzEyOWJmZlwiLFxyXG4gICAgc3Ryb2tlV2lkdGg6IDEsICAvL2ljZHRfU2NhbGVOdW1iZXJcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBzdmdEZXNpZ25fTGluZUF0dHJpYnV0ZSA9IHtcclxuICAgIHN0cm9rZTogXCIjNUY2Q0UxXCIsXHJcbiAgICBzdHJva2VXaWR0aDogMSwgIC8vaWNkdF9TY2FsZU51bWJlclxyXG4gICAgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiLFxyXG4gICAgc3Ryb2tlRGFzaGFycmF5czogWzQsIDIsIDEsIDJdICAgIC8vW10ubWFwKG0gPT4gaWNkdF9TY2FsZU51bWJlcihtKSkuam9pbignICcpXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgc3ZnRGVzaWduX1JlY3RBdHRyaWJ1dGUgPSB7XHJcbiAgICBmaWxsOiBcIiNGRkZGRkZcIixcclxuICAgIHN0cm9rZTogXCIjNUY2Q0UxXCIsXHJcbiAgICBzdHJva2VXaWR0aDogMSwgIC8vaWNkdF9TY2FsZU51bWJlclxyXG4gICAgd2lkdGg6IDcsICAvL2ljZHRfU2NhbGVOdW1iZXJcclxuICAgIGhlaWdodDogNyAgLy9pY2R0X1NjYWxlTnVtYmVyXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgc3ZnRGVzaWduX1JlY3RDZW50ZXJBdHRyaWJ1dGUgPSB7XHJcbiAgICBmaWxsOiBcInRyYW5zcGFyZW50XCIsXHJcbiAgICBzdHJva2U6IFwidHJhbnNwYXJlbnRcIixcclxuICAgIHN0cm9rZVdpZHRoOiAxLCAgLy9pY2R0X1NjYWxlTnVtYmVyXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgc3ZnU2VsZWN0X1JlY3ROb2RlQXR0cmlidXRlID0ge1xyXG4gICAgZmlsbDogXCJub25lXCIsXHJcbiAgICBzdHJva2U6IFwiIzVGNkNFMVwiLFxyXG4gICAgc3Ryb2tlV2lkdGg6IDEsICAvL2ljZHRfU2NhbGVOdW1iZXJcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBzdmdJbnRlcmFjdGl2ZV9MaW5lQXR0cmlidXRlID0ge1xyXG4gICAgc3Ryb2tlOiBcIiMxMjliZmZcIixcclxuICAgIHN0cm9rZVdpZHRoOiAxLCAgLy9pY2R0X1NjYWxlTnVtYmVyXHJcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXHJcbiAgICBzdHJva2VEYXNoYXJyYXk6IDggICAgLy9pY2R0X1NjYWxlTnVtYmVyXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgc3ZnSW50ZXJhY3RpdmVfUmVjdENlbnRlckF0dHJpYnV0ZSA9IHtcclxuICAgIGZpbGw6IFwidHJhbnNwYXJlbnRcIlxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHN2Z1NldElkeF9SZWN0Tm9kZUF0dHJpYnV0ZSA9IHtcclxuICAgIGZpbGw6IFwibm9uZVwiLFxyXG4gICAgc3Ryb2tlOiBcIiM5OTlcIixcclxuICAgIHN0cm9rZVdpZHRoOiAxLCAgLy9pY2R0X1NjYWxlTnVtYmVyXHJcbiAgICBzdHJva2VEYXNoYXJyYXk6IDIgICAgLy9pY2R0X1NjYWxlTnVtYmVyXHJcbn07XHJcbiIsImltcG9ydCB7IGljZHRfUm91bmROdW1iZXIgfSBmcm9tIFwiLi4vc2NyaXB0L2hhbmRsZS9yb3VuZC1udW1iZXJcIjtcclxuXHJcbi8vIEFEQVBURVIgRk9SIFBBVEhcclxuZXhwb3J0IGNvbnN0IGljZHRfQWRhcHRlcl9QYXRoRF8yX1BvaW50TWFwcyA9IChkOiBzdHJpbmcpID0+IHtcclxuICAgIHJldHVybiBkXHJcbiAgICAgICAgLnNwbGl0KC8oPz1bTUxDU1FUQUhWWm1sY3NxdGFodnpdKS8pXHJcbiAgICAgICAgPy5tYXAoKG06IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcG9pbnRUeXBlID0geyB0eXBlOiBtLnN1YnN0cmluZygwLCAxKSB9IGFzIGFueSxcclxuICAgICAgICAgICAgICAgIHBvaW50cyA9ICgoc3RyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0ciA/IHN0ci5zcGxpdCgvXFxzLykubWFwKG0gPT4gaWNkdF9Sb3VuZE51bWJlcihwYXJzZUZsb2F0KG0pLCAxMDAwMDAwKSkgOiBbXVxyXG4gICAgICAgICAgICAgICAgfSkoXHJcbiAgICAgICAgICAgICAgICAgICAgbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxzP1xcLT9bMC05XFwuXStlLVswLTldKy9nLCAnIDAnKSAgIC8vY8OhYyBz4buRIHF1w6Egbmjhu48gdGjDrCBsw6BtIHRyw7JuIHbhu4EgMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwsL2csICcgJykgICAgICAgICAgICAgICAgICAgICAgICAvL2xv4bqhaSBi4buPIGPDoWMga8OtIHThu7EgLCB0aMOgbmggxJHhu5NuZyBi4buZIGtob+G6o25nIHRy4bqvbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xccz9cXC0vZywgJyAtJykgICAgICAgICAgICAgICAgICAgIC8vxJHhu4tuaCBk4bqhbmcgbOG6oWkgZOG7ryBsaeG7h3UgdGhlbyBj4bqldSB0csO6YyBjaHXhuqluLCBt4buXaSBz4buRIGPDoWNoIG5oYXUgYuG6sW5nIGtob+G6o25nIHRy4bqvbmcsIGvhu4MgY+G6oyBz4buRIMOibSAoLSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyhcXC5bMC05XSspKFxcLlswLTldKykvZywgJyQxIDAkMicpIC8vc+G7rWEgxJHhu4tuaCBk4bqhbmcgMC4wNTcuNDc3IC0+IDAuMDU3IDAuNDc3XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXC1cXC4vZywgJy0wLicpICAgICAgICAgICAgICAgICAgICAvL3Phu61hIMSR4buLbmggZOG6oW5nIC0uMDU3IC0+IC0wLjA1N1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvW14wLTlcXC5cXC1dL2csICcgJykgICAgICAgICAgICAgICAgLy94w7NhIGPDoWMga8O9IHThu7EgxJHhurdjIGJp4buHdCBuZ2/DoGkgc+G7kSB2w6Aga8OtIGhp4buHdSAtIC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xccysvZywgJyAnKSAgICAgICAgICAgICAgICAgICAgICAgLy/EkeG7i25oIGThuqFuZyBs4bqhaSBk4buvIGxp4buHdSAxIGzhuqduIG7hu69hLCB4w7NhIGtob+G6o25nIHRy4bqvbmcgbOG7m25cclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRyaW0oKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2Phuq90IHRy4bqvbmcgxJHhuqd1IMSRdcO0aVxyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChwb2ludHMubGVuZ3RoKSB7IHBvaW50VHlwZS5wb2ludHMgPSBwb2ludHMgfVxyXG4gICAgICAgICAgICByZXR1cm4gcG9pbnRUeXBlXHJcbiAgICAgICAgfSkgYXMgQXJyYXk8eyB0eXBlOiBzdHJpbmcsIHBvaW50cz86IEFycmF5PG51bWJlcj4gfT47XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X0FkYXB0ZXJfUG9pbnRNYXBzXzJfUGF0aEQgPSAocG9pbnRNYXBzOiBBcnJheTx7IHR5cGU6IHN0cmluZywgcG9pbnRzPzogQXJyYXk8bnVtYmVyPiB9PikgPT4ge1xyXG4gICAgcmV0dXJuIHBvaW50TWFwc1xyXG4gICAgICAgIC5tYXAocG9pbnRNYXAgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gYCR7cG9pbnRNYXAudHlwZX0ke3BvaW50TWFwLnBvaW50cz8uam9pbignICcpID8/ICcnfWA7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuam9pbignJykgYXMgc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9BZGFwdGVyX1BvaW50TWFwc19FeHRyYWN0X01pbk1heFhZID0gKHBvaW50TWFwczogQXJyYXk8eyB0eXBlOiBzdHJpbmcsIHBvaW50cz86IEFycmF5PG51bWJlcj4gfT4pID0+IHtcclxuICAgIGxldCBhcnJfeDogYW55ID0gW10sIGFycl95OiBhbnkgPSBbXTtcclxuICAgIGxldCBwb2ludF94OiBhbnkgPSBbXSwgcG9pbnRfeTogYW55ID0gW107XHJcblxyXG4gICAgcG9pbnRNYXBzXHJcbiAgICAgICAgLmZvckVhY2goKGU6IHsgdHlwZTogc3RyaW5nLCBwb2ludHM/OiBBcnJheTxudW1iZXI+IH0pID0+IHtcclxuICAgICAgICAgICAgaWYgKFsnTScsICdMJywgJ0MnLCAnUycsICdRJywgJ1QnXS5pbmNsdWRlcyhlLnR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5wb2ludHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnBvaW50cy5mb3JFYWNoKChwb2ludCwgaWR4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHggJSAyID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycl94LnB1c2gocG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyX3kucHVzaChwb2ludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKGUudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnQSc6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5wb2ludHM/Lmxlbmd0aCA9PSA3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50X3gucHVzaChlLnBvaW50c1s1XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50X3kucHVzaChlLnBvaW50c1s2XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnSCc6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5wb2ludHM/Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJfeC5wdXNoKGUucG9pbnRzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRfeC5wdXNoKGUucG9pbnRzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdWJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnBvaW50cz8ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycl95LnB1c2goZS5wb2ludHNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludF95LnB1c2goZS5wb2ludHNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2EnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUucG9pbnRzPy5sZW5ndGggPT0gNykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbnVtWCA9IGFycl94W2Fycl94Lmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJfeC5wdXNoKG51bVggKyBlLnBvaW50c1s1XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50X3gucHVzaChudW1YICsgZS5wb2ludHNbNV0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG51bVkgPSBhcnJfeVthcnJfeS5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyX3kucHVzaChudW1ZICsgZS5wb2ludHNbNl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludF95LnB1c2gobnVtWSArIGUucG9pbnRzWzZdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdoJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnBvaW50cz8ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBudW0gPSBhcnJfeFthcnJfeC5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyX3gucHVzaChudW0gKyBlLnBvaW50c1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50X3gucHVzaChudW0gKyBlLnBvaW50c1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAndic6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5wb2ludHM/Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbnVtID0gYXJyX3lbYXJyX3kubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycl95LnB1c2gobnVtICsgZS5wb2ludHNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludF95LnB1c2gobnVtICsgZS5wb2ludHNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnTCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdDJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1MnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnUSc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdUJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucG9pbnRzPy5mb3JFYWNoKChwb2ludCwgaWR4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHggJSAyID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50X3gucHVzaChwb2ludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludF95LnB1c2gocG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ20nOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnbCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3MnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAncSc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICd0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucG9pbnRzPy5mb3JFYWNoKChwb2ludCwgaWR4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHggJSAyID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBudW0gPSBhcnJfeFthcnJfeC5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycl94LnB1c2gobnVtICsgcG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50X3gucHVzaChudW0gKyBwb2ludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbnVtID0gYXJyX3lbYXJyX3kubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJfeS5wdXNoKG51bSArIHBvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludF95LnB1c2gobnVtICsgcG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWluWDogTWF0aC5taW4uYXBwbHkobnVsbCwgcG9pbnRfeCksXHJcbiAgICAgICAgbWluWTogTWF0aC5taW4uYXBwbHkobnVsbCwgcG9pbnRfeSksXHJcbiAgICAgICAgbWF4WDogTWF0aC5tYXguYXBwbHkobnVsbCwgcG9pbnRfeCksXHJcbiAgICAgICAgbWF4WTogTWF0aC5tYXguYXBwbHkobnVsbCwgcG9pbnRfeSlcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfQWRhcHRlcl9Qb2ludE1hcHNfMl9SYXRpb01hcHMgPSAoc2l6ZTogeyB4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgfSwgcG9pbnRNYXBzOiBBcnJheTx7IHR5cGU6IHN0cmluZywgcG9pbnRzPzogQXJyYXk8bnVtYmVyPiB9PikgPT4ge1xyXG4gICAgcmV0dXJuIHBvaW50TWFwc1xyXG4gICAgICAgIC5tYXAocG9pbnRNYXAgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcmF0aW9zOiBBcnJheTxBcnJheTxudW1iZXI+PiA9IFtdO1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoIChwb2ludE1hcC50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAvL0EgNDUgNDUsIDAsIDEsIDEsIDI3NSAyNzVcclxuICAgICAgICAgICAgICAgIC8vQTogcnggcnkgeC1heGlzLXJvdGF0aW9uIGxhcmdlLWFyYy1mbGFnIHN3ZWVwLWZsYWcgeCB5XHJcbiAgICAgICAgICAgICAgICAvL2E6IHJ4IHJ5IHgtYXhpcy1yb3RhdGlvbiBsYXJnZS1hcmMtZmxhZyBzd2VlcC1mbGFnIGR4IGR5XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwb2ludE1hcC5wb2ludHM/Lmxlbmd0aCA9PSA3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdGlvcy5wdXNoKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljZHRfUm91bmROdW1iZXIoKHBvaW50TWFwLnBvaW50c1swXSkgLyBzaXplLndpZHRoLCAxMDAwMDAwKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljZHRfUm91bmROdW1iZXIoKHBvaW50TWFwLnBvaW50c1sxXSkgLyBzaXplLmhlaWdodCwgMTAwMDAwMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludE1hcC5wb2ludHNbMl0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludE1hcC5wb2ludHNbM10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludE1hcC5wb2ludHNbNF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY2R0X1JvdW5kTnVtYmVyKChwb2ludE1hcC5wb2ludHNbNV0pIC8gc2l6ZS53aWR0aCwgMTAwMDAwMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY2R0X1JvdW5kTnVtYmVyKChwb2ludE1hcC5wb2ludHNbNl0pIC8gc2l6ZS5oZWlnaHQsIDEwMDAwMDApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdBJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwb2ludE1hcC5wb2ludHM/Lmxlbmd0aCA9PSA3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdGlvcy5wdXNoKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljZHRfUm91bmROdW1iZXIoKHBvaW50TWFwLnBvaW50c1swXSkgLyBzaXplLndpZHRoLCAxMDAwMDAwKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljZHRfUm91bmROdW1iZXIoKHBvaW50TWFwLnBvaW50c1sxXSkgLyBzaXplLmhlaWdodCwgMTAwMDAwMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludE1hcC5wb2ludHNbMl0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludE1hcC5wb2ludHNbM10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludE1hcC5wb2ludHNbNF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY2R0X1JvdW5kTnVtYmVyKChwb2ludE1hcC5wb2ludHNbNV0gLSBzaXplLngpIC8gc2l6ZS53aWR0aCwgMTAwMDAwMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY2R0X1JvdW5kTnVtYmVyKChwb2ludE1hcC5wb2ludHNbNl0gLSBzaXplLnkpIC8gc2l6ZS5oZWlnaHQsIDEwMDAwMDApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL0ggMFxyXG4gICAgICAgICAgICAgICAgLy9IOiB4XHJcbiAgICAgICAgICAgICAgICBjYXNlICdoJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwb2ludE1hcC5wb2ludHM/Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByYXRpb3MucHVzaChbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY2R0X1JvdW5kTnVtYmVyKChwb2ludE1hcC5wb2ludHNbMF0pIC8gc2l6ZS53aWR0aCwgMTAwMDAwMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnSCc6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocG9pbnRNYXAucG9pbnRzPy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmF0aW9zLnB1c2goW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNkdF9Sb3VuZE51bWJlcigocG9pbnRNYXAucG9pbnRzWzBdIC0gc2l6ZS54KSAvIHNpemUud2lkdGgsIDEwMDAwMDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vViAwXHJcbiAgICAgICAgICAgICAgICAvL1Y6IHlcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3YnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvaW50TWFwLnBvaW50cz8ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdGlvcy5wdXNoKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljZHRfUm91bmROdW1iZXIoKHBvaW50TWFwLnBvaW50c1swXSkgLyBzaXplLmhlaWdodCwgMTAwMDAwMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnVic6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocG9pbnRNYXAucG9pbnRzPy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmF0aW9zLnB1c2goW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNkdF9Sb3VuZE51bWJlcigocG9pbnRNYXAucG9pbnRzWzBdIC0gc2l6ZS55KSAvIHNpemUuaGVpZ2h0LCAxMDAwMDAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL2Nsb3NlXHJcbiAgICAgICAgICAgICAgICBjYXNlICd6JzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1onOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL018Q3xTfFF8VHxMIDAgMFxyXG4gICAgICAgICAgICAgICAgLy9NQ1NRVEw6IHggeVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdMJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0MnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnUyc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdRJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1QnOlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvaW50TWFwLnBvaW50cz8ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcG9pbnRNYXAucG9pbnRzLmxlbmd0aCAtIDE7IGkgPCBsZW47IGkgKz0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdGlvcy5wdXNoKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNkdF9Sb3VuZE51bWJlcigocG9pbnRNYXAucG9pbnRzW2ldIC0gc2l6ZS54KSAvIHNpemUud2lkdGgsIDEwMDAwMDApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY2R0X1JvdW5kTnVtYmVyKChwb2ludE1hcC5wb2ludHNbaSArIDFdIC0gc2l6ZS55KSAvIHNpemUuaGVpZ2h0LCAxMDAwMDAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ20nOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnbCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3MnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAncSc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICd0JzpcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb2ludE1hcC5wb2ludHM/Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHBvaW50TWFwLnBvaW50cy5sZW5ndGggLSAxOyBpIDwgbGVuOyBpICs9IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXRpb3MucHVzaChbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljZHRfUm91bmROdW1iZXIoKHBvaW50TWFwLnBvaW50c1tpXSkgLyBzaXplLndpZHRoLCAxMDAwMDAwKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNkdF9Sb3VuZE51bWJlcigocG9pbnRNYXAucG9pbnRzW2kgKyAxXSkgLyBzaXplLmhlaWdodCwgMTAwMDAwMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChyYXRpb3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyB0eXBlOiBwb2ludE1hcC50eXBlLCByYXRpb3M6IHJhdGlvcyB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogcG9pbnRNYXAudHlwZSB9XHJcbiAgICAgICAgfSkgYXMgQXJyYXk8eyB0eXBlOiBzdHJpbmcsIHJhdGlvcz86IEFycmF5PEFycmF5PG51bWJlcj4+IH0+O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9BZGFwdGVyX1JhdGlvTWFwc18yX1BhdGhEID0gKHNpemU6IHsgeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyIH0sIHJhdGlvTWFwczogQXJyYXk8eyB0eXBlOiBzdHJpbmcsIHJhdGlvcz86IEFycmF5PEFycmF5PG51bWJlcj4+IH0+KSA9PiB7XHJcbiAgICByZXR1cm4gcmF0aW9NYXBzXHJcbiAgICAgICAgLm1hcChyYXRpb01hcCA9PiB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAocmF0aW9NYXAudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYSc6IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7cmF0aW9NYXAudHlwZX0ke3JhdGlvTWFwLnJhdGlvc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA/Lm1hcChyYXRpbyA9PiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY2R0X1JvdW5kTnVtYmVyKHNpemUud2lkdGggKiAocmF0aW9bMF0gPz8gMCksIDEwMDAwMDApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNkdF9Sb3VuZE51bWJlcihzaXplLmhlaWdodCAqIChyYXRpb1sxXSA/PyAwKSwgMTAwMDAwMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXRpb1syXSA/PyAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF0aW9bM10gPz8gMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdGlvWzRdID8/IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY2R0X1JvdW5kTnVtYmVyKHNpemUud2lkdGggKiAocmF0aW9bNV0gPz8gMCksIDEwMDAwMDApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNkdF9Sb3VuZE51bWJlcihzaXplLmhlaWdodCAqIChyYXRpb1s2XSA/PyAwKSwgMTAwMDAwMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgPy5tYXAobSA9PiBtLmpvaW4oJyAnKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgPy5qb2luKCcgJykgPz8gJyd9YFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnQSc6IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7cmF0aW9NYXAudHlwZX0ke3JhdGlvTWFwLnJhdGlvc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA/Lm1hcChyYXRpbyA9PiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY2R0X1JvdW5kTnVtYmVyKHNpemUud2lkdGggKiAocmF0aW9bMF0gPz8gMCksIDEwMDAwMDApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNkdF9Sb3VuZE51bWJlcihzaXplLmhlaWdodCAqIChyYXRpb1sxXSA/PyAwKSwgMTAwMDAwMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXRpb1syXSA/PyAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF0aW9bM10gPz8gMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdGlvWzRdID8/IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY2R0X1JvdW5kTnVtYmVyKHNpemUueCArIHNpemUud2lkdGggKiAocmF0aW9bNV0gPz8gMCksIDEwMDAwMDApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNkdF9Sb3VuZE51bWJlcihzaXplLnkgKyBzaXplLmhlaWdodCAqIChyYXRpb1s2XSA/PyAwKSwgMTAwMDAwMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgPy5tYXAobSA9PiBtLmpvaW4oJyAnKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgPy5qb2luKCcgJykgPz8gJyd9YFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnaCc6IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7cmF0aW9NYXAudHlwZX0ke3JhdGlvTWFwLnJhdGlvc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA/Lm1hcChyYXRpbyA9PiBpY2R0X1JvdW5kTnVtYmVyKHNpemUud2lkdGggKiAocmF0aW9bMF0gPz8gMCksIDEwMDAwMDApKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/LmpvaW4oJyAnKSA/PyAnJ31gXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdIJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtyYXRpb01hcC50eXBlfSR7cmF0aW9NYXAucmF0aW9zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8ubWFwKHJhdGlvID0+IGljZHRfUm91bmROdW1iZXIoc2l6ZS54ICsgc2l6ZS53aWR0aCAqIChyYXRpb1swXSA/PyAwKSwgMTAwMDAwMCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8uam9pbignICcpID8/ICcnfWBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ3YnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke3JhdGlvTWFwLnR5cGV9JHtyYXRpb01hcC5yYXRpb3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgPy5tYXAocmF0aW8gPT4gaWNkdF9Sb3VuZE51bWJlcihzaXplLmhlaWdodCAqIChyYXRpb1swXSA/PyAwKSwgMTAwMDAwMCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8uam9pbignICcpID8/ICcnfWBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ1YnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke3JhdGlvTWFwLnR5cGV9JHtyYXRpb01hcC5yYXRpb3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgPy5tYXAocmF0aW8gPT4gaWNkdF9Sb3VuZE51bWJlcihzaXplLnkgKyBzaXplLmhlaWdodCAqIChyYXRpb1swXSA/PyAwKSwgMTAwMDAwMCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8uam9pbignICcpID8/ICcnfWBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ3onOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnWic6IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmF0aW9NYXAudHlwZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnTCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdDJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1MnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnUSc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdUJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtyYXRpb01hcC50eXBlfSR7cmF0aW9NYXAucmF0aW9zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8ubWFwKHJhdGlvID0+IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljZHRfUm91bmROdW1iZXIoc2l6ZS54ICsgc2l6ZS53aWR0aCAqIChyYXRpb1swXSA/PyAwKSwgMTAwMDAwMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY2R0X1JvdW5kTnVtYmVyKHNpemUueSArIHNpemUuaGVpZ2h0ICogKHJhdGlvWzFdID8/IDApLCAxMDAwMDAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/Lm1hcChtID0+IG0uam9pbignICcpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/LmpvaW4oJyAnKSA/PyAnJ31gXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdtJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2wnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnYyc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdzJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3EnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAndCc6IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7cmF0aW9NYXAudHlwZX0ke3JhdGlvTWFwLnJhdGlvc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA/Lm1hcChyYXRpbyA9PiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY2R0X1JvdW5kTnVtYmVyKHNpemUud2lkdGggKiAocmF0aW9bMF0gPz8gMCksIDEwMDAwMDApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNkdF9Sb3VuZE51bWJlcihzaXplLmhlaWdodCAqIChyYXRpb1sxXSA/PyAwKSwgMTAwMDAwMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgPy5tYXAobSA9PiBtLmpvaW4oJyAnKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgPy5qb2luKCcgJykgPz8gJyd9YFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmpvaW4oJycpIGFzIHN0cmluZztcclxufVxyXG5cclxuLy8gQURBUFRFUiBGT1IgUE9MWUdPTlxyXG5leHBvcnQgY29uc3QgaWNkdF9BZGFwdGVyX1BvbHlnb25Qb2ludHNfMl9Qb2ludHMgPSAocG9pbnRzOiBzdHJpbmcpID0+IHtcclxuICAgIHJldHVybiAoKHN0cikgPT4ge1xyXG4gICAgICAgIHJldHVybiBzdHIgPyBzdHIuc3BsaXQoL1xccy8pLm1hcChtID0+IHBhcnNlRmxvYXQobSkpIDogW11cclxuICAgIH0pKHBvaW50cy5yZXBsYWNlKC9cXCwvZywgJyAnKS5yZXBsYWNlKC9cXC0vZywgJyAtJykucmVwbGFjZSgvW14wLTlcXC5cXC1dL2csICcgJykucmVwbGFjZSgvXFxzKy9nLCAnICcpLnRyaW0oKSkgYXMgQXJyYXk8bnVtYmVyPjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfQWRhcHRlcl9Qb2ludHNfRXh0cmFjdF9NaW5NYXhYWSA9IChwb2ludHM6IEFycmF5PG51bWJlcj4pID0+IHtcclxuICAgIGxldCBwb2ludF94OiBhbnkgPSBbXSwgcG9pbnRfeTogYW55ID0gW107XHJcblxyXG4gICAgcG9pbnRzLmZvckVhY2goKHBvaW50LCBpZHgpID0+IHtcclxuICAgICAgICBpZiAoaWR4ICUgMiA9PSAwKSB7XHJcbiAgICAgICAgICAgIHBvaW50X3gucHVzaChwb2ludCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwb2ludF95LnB1c2gocG9pbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWluWDogTWF0aC5taW4uYXBwbHkobnVsbCwgcG9pbnRfeCksXHJcbiAgICAgICAgbWluWTogTWF0aC5taW4uYXBwbHkobnVsbCwgcG9pbnRfeSksXHJcbiAgICAgICAgbWF4WDogTWF0aC5tYXguYXBwbHkobnVsbCwgcG9pbnRfeCksXHJcbiAgICAgICAgbWF4WTogTWF0aC5tYXguYXBwbHkobnVsbCwgcG9pbnRfeSlcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfQWRhcHRlcl9Qb2ludHNfMl9SYXRpb3MgPSAoc2l6ZTogeyB4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgfSwgcG9pbnRzOiBBcnJheTxudW1iZXI+KSA9PiB7XHJcbiAgICBsZXQgcmF0aW9zOiBBcnJheTxBcnJheTxudW1iZXI+PiA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwb2ludHMubGVuZ3RoIC0gMTsgaSA8IGxlbjsgaSArPSAyKSB7XHJcbiAgICAgICAgcmF0aW9zLnB1c2goW1xyXG4gICAgICAgICAgICAocG9pbnRzW2ldIC0gc2l6ZS54KSAvIHNpemUud2lkdGgsXHJcbiAgICAgICAgICAgIChwb2ludHNbaSArIDFdIC0gc2l6ZS55KSAvIHNpemUuaGVpZ2h0XHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmF0aW9zIGFzIEFycmF5PEFycmF5PG51bWJlcj4+O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9BZGFwdGVyX1JhdGlvc18yX1BvbHlnb25Qb2ludHMgPSAoc2l6ZTogeyB4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgfSwgcmF0aW9zOiBBcnJheTxBcnJheTxudW1iZXI+PikgPT4ge1xyXG4gICAgcmV0dXJuIHJhdGlvc1xyXG4gICAgICAgIC5tYXAocmF0aW8gPT4gW1xyXG4gICAgICAgICAgICBpY2R0X1JvdW5kTnVtYmVyKHNpemUueCArIHNpemUud2lkdGggKiByYXRpb1swXSwgMTAwMDAwMCksXHJcbiAgICAgICAgICAgIGljZHRfUm91bmROdW1iZXIoc2l6ZS55ICsgc2l6ZS5oZWlnaHQgKiByYXRpb1sxXSwgMTAwMDAwMClcclxuICAgICAgICBdKVxyXG4gICAgICAgIC5tYXAobSA9PiBtLmpvaW4oJyAnKSlcclxuICAgICAgICAuam9pbignICcpIGFzIHN0cmluZztcclxufVxyXG5cclxuLy8gbWF0cml4KDEuMDI1MzUgMCAwIDEgMzYwIDQ2MClcclxuLy8gbWF0cml4KDEsMCwwLDEsdHgsdHkpXHJcbi8vIG1hdHJpeChhLGIsYyxkLGUsZilcclxuZXhwb3J0IGNvbnN0IGljZHRfQWRhcHRlcl9leHRyYWN0X21hdHJpeCA9IChtYXRyaXhBQkNERUY6IHN0cmluZykgPT4ge1xyXG4gICAgbGV0IGFyck51bTogbnVtYmVyW10gPSBtYXRyaXhBQkNERUZcclxuICAgICAgICAucmVwbGFjZSgvXFxzP1xcLT9bMC05XFwuXStlLVswLTldKy9nLCAnIDAnKSAgIC8vY8OhYyBz4buRIHF1w6Egbmjhu48gdGjDrCBsw6BtIHRyw7JuIHbhu4EgMFxyXG4gICAgICAgIC5yZXBsYWNlKC9cXCwvZywgJyAnKSAgICAgICAgICAgICAgICAgICAgICAgIC8vbG/huqFpIGLhu48gY8OhYyBrw60gdOG7sSAsIHRow6BuaCDEkeG7k25nIGLhu5kga2hv4bqjbmcgdHLhuq9uZ1xyXG4gICAgICAgIC5yZXBsYWNlKC9cXHM/XFwtL2csICcgLScpICAgICAgICAgICAgICAgICAgICAvL8SR4buLbmggZOG6oW5nIGzhuqFpIGThu68gbGnhu4d1IHRoZW8gY+G6pXUgdHLDumMgY2h14bqpbiwgbeG7l2kgc+G7kSBjw6FjaCBuaGF1IGLhurFuZyBraG/huqNuZyB0cuG6r25nLCBr4buDIGPhuqMgc+G7kSDDom0gKC0pXHJcbiAgICAgICAgLnJlcGxhY2UoLyhcXC5bMC05XSspKFxcLlswLTldKykvZywgJyQxIDAkMicpIC8vc+G7rWEgxJHhu4tuaCBk4bqhbmcgMC4wNTcuNDc3IC0+IDAuMDU3IDAuNDc3XHJcbiAgICAgICAgLnJlcGxhY2UoL1xcLVxcLi9nLCAnLTAuJykgICAgICAgICAgICAgICAgICAgIC8vc+G7rWEgxJHhu4tuaCBk4bqhbmcgLS4wNTcgLT4gLTAuMDU3XHJcbiAgICAgICAgLnJlcGxhY2UoL1teMC05XFwuXFwtXS9nLCAnICcpICAgICAgICAgICAgICAgIC8veMOzYSBjw6FjIGvDvSB04buxIMSR4bq3YyBiaeG7h3Qgbmdvw6BpIHPhu5EgdsOgIGvDrSBoaeG7h3UgLSAuXHJcbiAgICAgICAgLnJlcGxhY2UoL1xccysvZywgJyAnKSAgICAgICAgICAgICAgICAgICAgICAgLy/EkeG7i25oIGThuqFuZyBs4bqhaSBk4buvIGxp4buHdSAxIGzhuqduIG7hu69hLCB4w7NhIGtob+G6o25nIHRy4bqvbmcgbOG7m25cclxuICAgICAgICAudHJpbSgpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY+G6r3QgdHLhuq9uZyDEkeG6p3UgxJF1w7RpXHJcbiAgICAgICAgLnNwbGl0KCcgJylcclxuICAgICAgICAubWFwKG0gPT4gaWNkdF9Sb3VuZE51bWJlcihwYXJzZUZsb2F0KG0pLCAxMDAwMDAwKSk7XHJcblxyXG4gICAgaWYgKGFyck51bS5sZW5ndGggPT0gNikge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGE6IGFyck51bVswXSxcclxuICAgICAgICAgICAgYjogYXJyTnVtWzFdLFxyXG4gICAgICAgICAgICBjOiBhcnJOdW1bMl0sXHJcbiAgICAgICAgICAgIGQ6IGFyck51bVszXSxcclxuICAgICAgICAgICAgZTogYXJyTnVtWzRdLFxyXG4gICAgICAgICAgICBmOiBhcnJOdW1bNV0sXHJcbiAgICAgICAgICAgIC8vYWxwaGE6IGljZHRfUm91bmROdW1iZXIoTWF0aC5hdGFuMihhcnJOdW1bMV0sIGFyck51bVswXSkgKiAxODAgLyBNYXRoLlBJLCAxMDApXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X0FkYXB0ZXJfTWFwX1BhdGhEX01hdHJpeCA9IChwYXRoRDogc3RyaW5nLCBtYXRyaXhBQkNERUY6IHN0cmluZykgPT4ge1xyXG4gICAgbGV0IG1hdHJpeCA9IGljZHRfQWRhcHRlcl9leHRyYWN0X21hdHJpeChtYXRyaXhBQkNERUYpO1xyXG4gICAgaWYgKG1hdHJpeCkge1xyXG4gICAgICAgIC8vIGxldCBwb2ludE1hcHMgPSBpY2R0X0FkYXB0ZXJfUGF0aERfMl9Qb2ludE1hcHMocGF0aEQpO1xyXG5cclxuICAgICAgICAvLyBwb2ludE1hcHMuZm9yRWFjaChwb2ludE1hcCA9PiB7XHJcbiAgICAgICAgLy8gICAgIGlmIChwb2ludE1hcC5wb2ludHM/Lmxlbmd0aCkge1xyXG4gICAgICAgIC8vICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHBvaW50TWFwLnBvaW50cy5sZW5ndGggLSAxOyBpIDwgbGVuOyBpICs9IDIpIHtcclxuICAgICAgICAvLyAgICAgICAgICAgICBwb2ludE1hcC5wb2ludHNbaV0vKngqLyA9IG1hdHJpeFgocG9pbnRNYXAucG9pbnRzW2ldLCBwb2ludE1hcC5wb2ludHNbaSArIDFdLCBtYXRyaXgpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHBvaW50TWFwLnBvaW50c1tpICsgMV0vKnkqLyA9IG1hdHJpeFkocG9pbnRNYXAucG9pbnRzW2ldLCBwb2ludE1hcC5wb2ludHNbaSArIDFdLCBtYXRyaXgpO1xyXG4gICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfSk7XHJcblxyXG4gICAgICAgIC8vIHJldHVybiBpY2R0X0FkYXB0ZXJfUG9pbnRNYXBzXzJfUGF0aEQocG9pbnRNYXBzKTtcclxuXHJcbiAgICAgICAgcmV0dXJuICh3aW5kb3cgYXMgYW55KS5TbmFwLnBhdGgubWFwKHBhdGhELCBuZXcgKHdpbmRvdyBhcyBhbnkpLlNuYXAuTWF0cml4KG1hdHJpeC5hLCBtYXRyaXguYiwgbWF0cml4LmMsIG1hdHJpeC5kLCBtYXRyaXguZSwgbWF0cml4LmYpKS50b1N0cmluZygpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGF0aEQ7XHJcbn1cclxuXHJcbi8qXHJcbmZ1bmN0aW9uIG1hcFBhdGgocGF0aCwgbWF0cml4KSB7XHJcbiAgICBpZiAoIW1hdHJpeCkge1xyXG4gICAgICAgIHJldHVybiBwYXRoO1xyXG4gICAgfVxyXG4gICAgdmFyIHgsIHksIGksIGosIGlpLCBqaiwgcGF0aGk7XHJcbiAgICBwYXRoID0gcGF0aDJjdXJ2ZShwYXRoKTtcclxuICAgIGZvciAoaSA9IDAsIGlpID0gcGF0aC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XHJcbiAgICAgICAgcGF0aGkgPSBwYXRoW2ldO1xyXG4gICAgICAgIGZvciAoaiA9IDEsIGpqID0gcGF0aGkubGVuZ3RoOyBqIDwgamo7IGogKz0gMikge1xyXG4gICAgICAgICAgICB4ID0gbWF0cml4LngocGF0aGlbal0sIHBhdGhpW2ogKyAxXSk7XHJcbiAgICAgICAgICAgIHkgPSBtYXRyaXgueShwYXRoaVtqXSwgcGF0aGlbaiArIDFdKTtcclxuICAgICAgICAgICAgcGF0aGlbal0gPSB4O1xyXG4gICAgICAgICAgICBwYXRoaVtqICsgMV0gPSB5O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwYXRoO1xyXG59XHJcblxyXG5cclxuXHJcbiovXHJcblxyXG4vKlxcXHJcbiogTWF0cml4LnhcclxuWyBtZXRob2QgXVxyXG4qKlxyXG4qIFJldHVybnMgeCBjb29yZGluYXRlIGZvciBnaXZlbiBwb2ludCBhZnRlciB0cmFuc2Zvcm1hdGlvbiBkZXNjcmliZWQgYnkgdGhlIG1hdHJpeC4gU2VlIGFsc28gQE1hdHJpeC55XHJcbi0geCAobnVtYmVyKVxyXG4tIHkgKG51bWJlcilcclxuPSAobnVtYmVyKSB4XHJcblxcKi9cclxuY29uc3QgbWF0cml4WCA9IGZ1bmN0aW9uICh4OiBudW1iZXIsIHk6IG51bWJlciwgbWF0cml4OiBhbnkpIHtcclxuICAgIHJldHVybiB4ICogbWF0cml4LmEgKyB5ICogbWF0cml4LmMgKyBtYXRyaXguZTtcclxufTtcclxuLypcXFxyXG4gKiBNYXRyaXgueVxyXG4gWyBtZXRob2QgXVxyXG4gKipcclxuICogUmV0dXJucyB5IGNvb3JkaW5hdGUgZm9yIGdpdmVuIHBvaW50IGFmdGVyIHRyYW5zZm9ybWF0aW9uIGRlc2NyaWJlZCBieSB0aGUgbWF0cml4LiBTZWUgYWxzbyBATWF0cml4LnhcclxuIC0geCAobnVtYmVyKVxyXG4gLSB5IChudW1iZXIpXHJcbiA9IChudW1iZXIpIHlcclxuXFwqL1xyXG5jb25zdCBtYXRyaXhZID0gZnVuY3Rpb24gKHg6IG51bWJlciwgeTogbnVtYmVyLCBtYXRyaXg6IGFueSkge1xyXG4gICAgcmV0dXJuIHggKiBtYXRyaXguYiArIHkgKiBtYXRyaXguZCArIG1hdHJpeC5mO1xyXG59OyIsImltcG9ydCB7IGljZHRfSURhdGFOb2RlLCBpY2R0X0lEYXRhTm9kZUFuaW1hdGUsIGljZHRfSURhdGFOb2RlQXR0cmlidXRlLCBpY2R0X0lEYXRhTm9kZUludGVyYWN0aXZlLCBpY2R0X0lEYXRhTm9kZVNpemUsIGljZHRfSURhdGFOb2RlU291cmNlLCBpY2R0X0lEYXRhTm9kZVN0eWxlLCBpY2R0X0lEYXRhTm9kZVRlc3QsIGljZHRfSURhdGFOb2RlVmFyaWFibGUsIGljZHRfSURhdGFTbGlkZSwgaWNkdF9JRGF0YVNvdXJjZSB9IGZyb20gJy4uL2ludGVyZmFjZS9JRGF0YVNvdXJjZSc7XHJcbmltcG9ydCB7IGljZHQgfSBmcm9tICcuLi9wcm90b3R5cGUvaWNkdCc7XHJcbmltcG9ydCB7IFZfU2hhcGVUeXBlIH0gZnJvbSAnLi4vbG9va3VwL1ZfU2hhcGVUeXBlJztcclxuaW1wb3J0IHsgbGliX2NvbG9yX2V4dHJhY3QySGV4QWxwaGEgfSBmcm9tICcuLi9saWIvY29sb3InO1xyXG5cclxuaW50ZXJmYWNlIElEYXRhU291cmNlVjEge1xyXG4gICAgZGF0YTogQXJyYXk8SURhdGFWMT4sXHJcbiAgICB2YXJpYWJsZToge1xyXG4gICAgICAgIHZhcmlhYmxlczogYW55LFxyXG4gICAgICAgIGNvbmRpdGlvbnM6IGFueVxyXG4gICAgfSxcclxuICAgIHNjcmVlbjoge1xyXG4gICAgICAgIHc6IG51bWJlcixcclxuICAgICAgICBoOiBudW1iZXJcclxuICAgIH0sXHJcbiAgICBpbmZvOiBhbnksXHJcbiAgICByZXNvdXJjZXM6IGFueVxyXG59XHJcblxyXG5pbnRlcmZhY2UgSURhdGFWMSB7XHJcbiAgICBpZDogMCxcclxuICAgIGJhY2tncm91bmQ6IG51bGwsXHJcbiAgICBjb3ZlcjogbnVsbCxcclxuICAgIHN2ZzogbnVsbCxcclxuICAgIGh0bWw6IG51bGwsXHJcbiAgICBzcGxpdHRlcjogbnVsbCxcclxuICAgIGF1ZGlvOiBudWxsLFxyXG4gICAgdGVzdDogbnVsbCxcclxuICAgIHRlc3QyOiB7XHJcbiAgICAgICAgdHlwZTogc3RyaW5nLFxyXG4gICAgICAgIGRhdGE6IG51bGwsXHJcbiAgICAgICAgYW5zd2VyZWQ6IG51bGwsXHJcbiAgICAgICAgcGFzc2VkOiBmYWxzZSxcclxuICAgICAgICBhY3Rpb25zOiB7XHJcbiAgICAgICAgICAgIHJpZ2h0YW5zd2VyOiBbXHJcbiAgICAgICAgICAgICAgICAvL3tcclxuICAgICAgICAgICAgICAgIC8vICAgIGVsZW1lbnRJZDogbnVsbCxcclxuICAgICAgICAgICAgICAgIC8vICAgIHNvdXJjZToge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgIHR5cGU6IG51bGwsIC8vYXVkaW8gfHwgdmlkZW8gfHwgaW1hZ2UgfHwgbGluayB8fCBzbGlkZVxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgIGJhc2U2NDogbnVsbCxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICB1cmw6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgdGFyZ2V0OiBudWxsLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgIG51bTogbnVsbFxyXG4gICAgICAgICAgICAgICAgLy8gICAgfVxyXG4gICAgICAgICAgICAgICAgLy99XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIHdyb25nYW5zd2VyOiBbXHJcbiAgICAgICAgICAgICAgICAvL3tcclxuICAgICAgICAgICAgICAgIC8vICAgIGVsZW1lbnRJZDogbnVsbCxcclxuICAgICAgICAgICAgICAgIC8vICAgIHNvdXJjZToge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgIHR5cGU6IG51bGwsIC8vYXVkaW8gfHwgdmlkZW8gfHwgaW1hZ2UgfHwgbGluayB8fCBzbGlkZVxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgIGJhc2U2NDogbnVsbCxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICB1cmw6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgdGFyZ2V0OiBudWxsLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgIG51bTogbnVsbFxyXG4gICAgICAgICAgICAgICAgLy8gICAgfVxyXG4gICAgICAgICAgICAgICAgLy99XHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGF1ZGlvdHJ1ZT86IHtcclxuICAgICAgICAgICAgdXJsPzogc3RyaW5nLFxyXG4gICAgICAgICAgICBwYXRoPzogc3RyaW5nLFxyXG4gICAgICAgICAgICBuYW1lPzogc3RyaW5nXHJcbiAgICAgICAgfSxcclxuICAgICAgICBhdWRpb2ZhbHNlPzoge1xyXG4gICAgICAgICAgICB1cmw/OiBzdHJpbmcsXHJcbiAgICAgICAgICAgIHBhdGg/OiBzdHJpbmcsXHJcbiAgICAgICAgICAgIG5hbWU/OiBzdHJpbmdcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVmZmVjdHRydWU/OiB7XHJcbiAgICAgICAgICAgIHVybD86IHN0cmluZyxcclxuICAgICAgICAgICAgcGF0aD86IHN0cmluZyxcclxuICAgICAgICAgICAgbmFtZT86IHN0cmluZ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWZmZWN0ZmFsc2U/OiB7XHJcbiAgICAgICAgICAgIHVybD86IHN0cmluZyxcclxuICAgICAgICAgICAgcGF0aD86IHN0cmluZyxcclxuICAgICAgICAgICAgbmFtZT86IHN0cmluZ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaWNvbnRydWU/OiB7XHJcbiAgICAgICAgICAgIHVybD86IHN0cmluZyxcclxuICAgICAgICAgICAgcGF0aD86IHN0cmluZyxcclxuICAgICAgICAgICAgbmFtZT86IHN0cmluZ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaWNvbmZhbHNlPzoge1xyXG4gICAgICAgICAgICB1cmw/OiBzdHJpbmcsXHJcbiAgICAgICAgICAgIHBhdGg/OiBzdHJpbmcsXHJcbiAgICAgICAgICAgIG5hbWU/OiBzdHJpbmdcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1hdGNoaW5nPzogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZDogc3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgYm94SWQ6IHN0cmluZyxcclxuICAgICAgICAgICAgICAgIGRyYWdJZDogc3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgZHJvcElkOiBzdHJpbmdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgdHJ1ZWZhbHNlPzogQXJyYXk8c3RyaW5nPixcclxuICAgICAgICBzaW5nbGVjaG9pY2U/OiBBcnJheTxzdHJpbmc+LFxyXG4gICAgICAgIG11bHRpY2hvaWNlPzogQXJyYXk8c3RyaW5nPixcclxuICAgICAgICBmaWxsPzogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZDogc3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgdmFscz86IFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkeDogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBzdHJpbmdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdLFxyXG4gICAgICAgIHNwZWVjaD86IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWQ6IHN0cmluZyxcclxuICAgICAgICAgICAgICAgIHZhbHM/OiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZHg6IG51bWJlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogc3RyaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXSxcclxuICAgIH0sXHJcbiAgICB0ZXh0OiBbXHJcbiAgICAgICAgLy97XHJcbiAgICAgICAgLy8gICAgbm9kZUlkOiAwLFxyXG4gICAgICAgIC8vICAgIHRleHQ6IG51bGxcclxuICAgICAgICAvL31cclxuICAgIF0sXHJcbiAgICB0ZXh0TWFwcGluZzogW1xyXG4gICAgICAgIC8ve1xyXG4gICAgICAgIC8vICAgIG5vZGVJZDogMCxcclxuICAgICAgICAvLyAgICBkYXRhOiB7XHJcbiAgICAgICAgLy8gICAgICAgIG5vZGVJZDogMCxcclxuICAgICAgICAvLyAgICAgICAgc2xpZGVJZDogMCxcclxuICAgICAgICAvLyAgICB9XHJcbiAgICAgICAgLy99XHJcbiAgICBdLFxyXG4gICAgZ2FtZTogbnVsbCxcclxuICAgIGFjdGlvbnM6IHtcclxuICAgICAgICBzaG93OiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZTogYm9vbGVhbixcclxuICAgICAgICAgICAgICAgIGVsZW1lbnRJZDogbnVsbCxcclxuICAgICAgICAgICAgICAgIHNvdXJjZToge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd3b3JrJyB8ICdhdWRpbycgfCAndmlkZW8nIHwgJ2ltYWdlJyB8ICdsaW5rJyB8ICdzbGlkZScgfCAnbm9kZScgfCAnbm9kZTInLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcInZpYnJhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBiYXNlNjQ6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBudWxsLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgbnVtOiBudWxsLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpdGVyYXRpb246IG51bWJlcixcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6IG51bWJlcixcclxuICAgICAgICAgICAgICAgICAgICB0aW1lOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiBbXSxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiNzE5ODgwMzE0XCIsXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlkczogW1wiNDA0MzkyODkxXCJdLFxyXG4gICAgICAgICAgICAgICAgICAgIGFzeW5jOiBcInRpbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBbJ2hpZGUnLCAnc2hvdycsICdydW4nXSxcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdLFxyXG4gICAgICAgIGNsaWNrOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZTogYm9vbGVhbixcclxuICAgICAgICAgICAgICAgIGVsZW1lbnRJZDogbnVsbCxcclxuICAgICAgICAgICAgICAgIHNvdXJjZToge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd3b3JrJyB8ICdhdWRpbycgfCAndmlkZW8nIHwgJ2ltYWdlJyB8ICdsaW5rJyB8ICdzbGlkZScgfCAnbm9kZScgfCAnbm9kZTInLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcInZpYnJhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBiYXNlNjQ6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBudWxsLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgbnVtOiBudWxsLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpdGVyYXRpb246IG51bWJlcixcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgdGltZTogMCxcclxuICAgICAgICAgICAgICAgICAgICBwb2ludHM6IFtdLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZDogXCI3MTk4ODAzMTRcIixcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWRzOiBbXCI0MDQzOTI4OTFcIl0sXHJcbiAgICAgICAgICAgICAgICAgICAgYXN5bmM6IFwidGltZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IFsnaGlkZScsICdzaG93JywgJ3J1biddLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXSxcclxuICAgICAgICBob3ZlcjogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmU6IGJvb2xlYW4sXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50SWQ6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnd29yaycgfCAnYXVkaW8nIHwgJ3ZpZGVvJyB8ICdpbWFnZScgfCAnbGluaycgfCAnc2xpZGUnXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwidmlicmF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGJhc2U2NDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IG51bGwsXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBudW06IG51bGwsXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdGlvbjogMCxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgdGltZTogMCxcclxuICAgICAgICAgICAgICAgICAgICBwb2ludHM6IFtdLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXSxcclxuICAgICAgICByZWFkdGV4dDogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50SWQ6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBudWxsLCAvL2F1ZGlvXHJcbiAgICAgICAgICAgICAgICAgICAgYmFzZTY0OiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIHVybDogbnVsbCxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF1cclxuICAgIH0sXHJcbiAgICBhbmltYXRlczogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZWxlbWVudElkOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbFxyXG4gICAgICAgIH1cclxuICAgIF0sXHJcbiAgICByZXNvdXJjZXM6IFtdLFxyXG4gICAgbm9kZXM6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICBpbmZvOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgbm9kZW5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xyXG5cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBodG1sOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgc291cmNlOiB7XHJcblxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdmFyaWFibGU/OiB7XHJcbiAgICAgICAgICAgICAgICB2YXJpYWJsZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBudWxsLCAgICAgLy8rIC0gKiAvID1cclxuICAgICAgICAgICAgICAgIHZhbHVldHlwZTogbnVsbCwgICAgLy92YXJpYWJsZSwgdmFsdWVcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBudWxsLCAgICAgICAgLy9udW1iZXIsIHN0cmluZywgdmFyaWFibGVcclxuICAgICAgICAgICAgICAgIGFjdGlvbjogbnVsbCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIF1cclxufVxyXG5cclxudmFyIG1hdGNoVXJsID0gZnVuY3Rpb24gKHN0cj86IHN0cmluZyB8IG51bGwpIHtcclxuICAgIHJldHVybiBzdHIgJiZcclxuICAgICAgICAoc3RyLm1hdGNoKC9odHRwKHMpPzpcXC9cXC8vKSA9PT0gbnVsbCA/IGZhbHNlIDogdHJ1ZSk7XHJcbn07XHJcblxyXG52YXIgbWF0Y2hCYXNlNjQgPSBmdW5jdGlvbiAoc3RyPzogc3RyaW5nIHwgbnVsbCkge1xyXG4gICAgcmV0dXJuIHN0ciAmJlxyXG4gICAgICAgIChzdHIubWF0Y2goL2RhdGE6W147XSs7YmFzZTY0LC8pID09PSBudWxsID8gZmFsc2UgOiB0cnVlKTtcclxufTtcclxuXHJcbnZhciBtYXRjaENvbG9yID0gZnVuY3Rpb24gKHN0cj86IHN0cmluZyB8IG51bGwpIHtcclxuICAgIHJldHVybiBzdHIgJiYgKFxyXG4gICAgICAgIChzdHIubWF0Y2goLyMoW2EtekEtWjAtOV0rKS8pID09PSBudWxsID8gZmFsc2UgOiB0cnVlKSB8fFxyXG4gICAgICAgIChzdHIubWF0Y2goL3JnYlxcKFswLTldKyxbMC05XSssWzAtOV0rXFwpLykgPT09IG51bGwgPyBmYWxzZSA6IHRydWUpIHx8XHJcbiAgICAgICAgKHN0ci5tYXRjaCgvcmdiYVxcKFswLTldKyxbMC05XSssWzAtOV0rLFswLTldK1xcKS8pID09PSBudWxsID8gZmFsc2UgOiB0cnVlKVxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBleHRyYWN0U291cmNlVjEgPSAob3B0aW9ucz86IHsgdXJsPzogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCwgcGF0aD86IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQsIHNyYz86IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQgfSkgPT4ge1xyXG4gICAgcmV0dXJuIGV4dHJhY3RTb3VyY2Uob3B0aW9ucz8udXJsLCBvcHRpb25zPy5wYXRoLCBvcHRpb25zPy5zcmMpO1xyXG59XHJcblxyXG52YXIgZXh0cmFjdFNvdXJjZSA9IChzVXJsPzogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCwgc1BhdGg/OiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkLCBzU3JjPzogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4ge1xyXG4gICAgbGV0IHVybCwgcGF0aCwgc3JjLCBuYW1lO1xyXG5cclxuICAgIGlmIChzVXJsKSB7XHJcbiAgICAgICAgdXJsID0gc1VybC5yZXBsYWNlKC9cXFxcL2csICdcXC8nKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc1BhdGgpIHtcclxuICAgICAgICBwYXRoID0gc1BhdGgucmVwbGFjZSgvXFxcXC9nLCAnXFwvJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHNTcmMpIHtcclxuICAgICAgICBzcmMgPSBzU3JjLnJlcGxhY2UoL1xcXFwvZywgJ1xcLycpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChwYXRoICYmICF1cmwpIHtcclxuICAgICAgICB1cmwgPSBpY2R0LmNvbmZpZz8ucmVhZGZpbGV1cGxvYWR1cmwgKyBwYXRoO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgKCFwYXRoICYmIHVybCkge1xyXG4gICAgLy8gICAgIGlmIChtYXRjaFVybCh1cmwpKSB7XHJcbiAgICAvLyAgICAgICAgIHBhdGggPSB1cmwucmVwbGFjZSgvXlthLXpBLVowLTlcXC1cXF9cXC9cXFxcXFw6XFwuXSsodXBsb2FkfEZpbGVVcGxvYWR8ZmlsZXN8cmVhZGZpbGV1cGxvYWR8ZmlsZXJlYWRlcnxyZWFkZmlsZSlcXC8vZywgJycpO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICBlbHNlIHtcclxuICAgIC8vICAgICAgICAgcGF0aCA9IHVybC5yZXBsYWNlKC9eXFwvKy8sICcnKTtcclxuICAgIC8vICAgICAgICAgdXJsID0gaWNkdC5jb25maWc/LnJlYWRmaWxldXBsb2FkdXJsICsgcGF0aDtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9XHJcbiAgICBpZiAoc3JjICYmICFwYXRoICYmICF1cmwpIHtcclxuICAgICAgICBwYXRoID0gc3JjLnJlcGxhY2UoL15bYS16QS1aMC05XFwtXFxfXFwvXFxcXFxcOlxcLl0rKHVwbG9hZHxGaWxlVXBsb2FkfGZpbGVzfHJlYWRmaWxldXBsb2FkfGZpbGVyZWFkZXJ8cmVhZGZpbGUpXFwvL2csICcnKTtcclxuICAgICAgICB1cmwgPSBpY2R0LmNvbmZpZz8ucmVhZGZpbGV1cGxvYWR1cmwgKyBwYXRoO1xyXG4gICAgfVxyXG5cclxuICAgIG5hbWUgPSAodXJsID8/ICcnKS5zcGxpdCgnLycpLnBvcCgpIHx8IChwYXRoID8/ICcnKS5zcGxpdCgnLycpLnBvcCgpIHx8ICcnO1xyXG5cclxuICAgIC8vY29uc29sZS5sb2coc1VybCwgc1BhdGgsIHNTcmMpO1xyXG4gICAgLy9jb25zb2xlLmxvZyh1cmwsIHBhdGgsIG5hbWUpO1xyXG5cclxuICAgIHJldHVybiB7IHVybCwgcGF0aCwgbmFtZSB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZXh0cmFjdEZyb21EYXRhVjEgPSAoZGF0YVNvdXJjZTogSURhdGFTb3VyY2VWMSkgPT4ge1xyXG5cclxuICAgIGxldCB2aWV3Qm94ID0geyB4OiAwLCB5OiAwLCB3aWR0aDogZGF0YVNvdXJjZS5zY3JlZW4udywgaGVpZ2h0OiBkYXRhU291cmNlLnNjcmVlbi5oIH07XHJcblxyXG4gICAgbGV0IHNsaWRlczogQXJyYXk8aWNkdF9JRGF0YVNsaWRlPiA9IFtdO1xyXG5cclxuICAgIGRhdGFTb3VyY2UuZGF0YS5mb3JFYWNoKChjdXJyZW50RGF0YTogSURhdGFWMSwgc2xpZGVJZHg6IG51bWJlcikgPT4ge1xyXG5cclxuICAgICAgICBsZXQgc2xpZGU6IGljZHRfSURhdGFTbGlkZSA9IHtcclxuICAgICAgICAgICAgaWQ6IHR5cGVvZiBjdXJyZW50RGF0YS5pZCA9PSAnbnVtYmVyJyA/IGN1cnJlbnREYXRhLmlkIDogaWNkdC5kYXRhLm5ld1NsaWRlSWQsXHJcbiAgICAgICAgICAgIGNvZGU6IGN1cnJlbnREYXRhLmlkPy50b1N0cmluZygpLFxyXG4gICAgICAgICAgICBuYW1lOiB0eXBlb2YgY3VycmVudERhdGEuaWQgPT0gJ3N0cmluZycgPyBjdXJyZW50RGF0YS5pZCA6IGBUcmFuZyAke3NsaWRlSWR4ICsgMX1gLFxyXG5cclxuICAgICAgICAgICAgc3ZnOiB7XHJcbiAgICAgICAgICAgICAgICB2aWV3Qm94OiB2aWV3Qm94LFxyXG4gICAgICAgICAgICAgICAgbm9kZXM6IFtdLFxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgdGVzdDogKHRlc3QyID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdGVzdDIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge307XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRlc3QyLmF1ZGlvdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlc3QyLmF1ZGlvdHJ1ZSA9IGV4dHJhY3RTb3VyY2VWMSh7IHBhdGg6IHRlc3QyLmF1ZGlvdHJ1ZS5wYXRoIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0ZXN0Mi5hdWRpb2ZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVzdDIuYXVkaW9mYWxzZSA9IGV4dHJhY3RTb3VyY2VWMSh7IHBhdGg6IHRlc3QyLmF1ZGlvZmFsc2UucGF0aCB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGVzdDIuZWZmZWN0dHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlc3QyLmVmZmVjdHRydWUgPSBleHRyYWN0U291cmNlVjEoeyBwYXRoOiB0ZXN0Mi5lZmZlY3R0cnVlLnBhdGggfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRlc3QyLmVmZmVjdGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVzdDIuZWZmZWN0ZmFsc2UgPSBleHRyYWN0U291cmNlVjEoeyBwYXRoOiB0ZXN0Mi5lZmZlY3RmYWxzZS5wYXRoIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0ZXN0Mi5pY29udHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlc3QyLmljb250cnVlID0gZXh0cmFjdFNvdXJjZVYxKHsgcGF0aDogdGVzdDIuaWNvbnRydWUucGF0aCB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGVzdDIuaWNvbmZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVzdDIuaWNvbmZhbHNlID0gZXh0cmFjdFNvdXJjZVYxKHsgcGF0aDogdGVzdDIuaWNvbmZhbHNlLnBhdGggfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRlc3QyO1xyXG4gICAgICAgICAgICB9KShjdXJyZW50RGF0YS50ZXN0MilcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIGlmIChjdXJyZW50RGF0YS5iYWNrZ3JvdW5kICYmIHNsaWRlLnN2Zykge1xyXG4gICAgICAgICAgICBpZiAobWF0Y2hDb2xvcihjdXJyZW50RGF0YS5iYWNrZ3JvdW5kKSkge1xyXG4gICAgICAgICAgICAgICAgc2xpZGUuc3ZnLmJhY2tncm91bmQgPSB7IGNvbG9yOiBjdXJyZW50RGF0YS5iYWNrZ3JvdW5kIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobWF0Y2hCYXNlNjQoY3VycmVudERhdGEuYmFja2dyb3VuZCkpIHtcclxuICAgICAgICAgICAgICAgIHNsaWRlLnN2Zy5iYWNrZ3JvdW5kID0geyBiYXNlNjQ6IGN1cnJlbnREYXRhLmJhY2tncm91bmQgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChtYXRjaFVybChjdXJyZW50RGF0YS5iYWNrZ3JvdW5kKSkge1xyXG4gICAgICAgICAgICAgICAgLy9zbGlkZS5zdmcuYmFja2dyb3VuZCA9IHsgdXJsOiBjdXJyZW50RGF0YS5iYWNrZ3JvdW5kIH07XHJcbiAgICAgICAgICAgICAgICBzbGlkZS5zdmcuYmFja2dyb3VuZCA9IGV4dHJhY3RTb3VyY2UoY3VycmVudERhdGEuYmFja2dyb3VuZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvL3NsaWRlLnN2Zy5iYWNrZ3JvdW5kID0geyBwYXRoOiBjdXJyZW50RGF0YS5iYWNrZ3JvdW5kIH07XHJcbiAgICAgICAgICAgICAgICBzbGlkZS5zdmcuYmFja2dyb3VuZCA9IGV4dHJhY3RTb3VyY2UodW5kZWZpbmVkLCBjdXJyZW50RGF0YS5iYWNrZ3JvdW5kKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICBqUXVlcnkoY3VycmVudERhdGEuc3ZnID8/IFwiXCIpLmZpbmQoJy5zdmctbm9kZScpLmVhY2goKGlkeDogbnVtYmVyLCBlbDogRWxlbWVudCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgbGV0IHBOb2RlID0galF1ZXJ5KGVsKS5wYXJlbnRzKCcuaW5kZXhzJyk7XHJcblxyXG4gICAgICAgICAgICBsZXQgbm9kZUluZGV4ID0gcE5vZGUuYXR0cignZGF0YS1pbmRleCcpLFxyXG4gICAgICAgICAgICAgICAgbm9kZVRpbWUgPSBwTm9kZS5hdHRyKCdkYXRhLXRpbWUnKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBub2RlSWQgPSBlbC5nZXRBdHRyaWJ1dGUoJ2lkJykgPz8gXCIwXCI7XHJcblxyXG4gICAgICAgICAgICBsZXQgbm9kZTogaWNkdF9JRGF0YU5vZGUgPSB7XHJcbiAgICAgICAgICAgICAgICBpZDogcGFyc2VJbnQobm9kZUlkKSxcclxuICAgICAgICAgICAgICAgIGNvZGU6IGAke2VsLm5vZGVOYW1lfS0ke2VsLmdldEF0dHJpYnV0ZSgnaWQnKX1gLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogZWwubm9kZU5hbWUsXHJcblxyXG4gICAgICAgICAgICAgICAgaWR4OiBub2RlSW5kZXggPyBwYXJzZUludChub2RlSW5kZXgpIDogMCxcclxuICAgICAgICAgICAgICAgIHRpbWU6IG5vZGVUaW1lID8gcGFyc2VGbG9hdChub2RlVGltZSkgOiAwLFxyXG5cclxuICAgICAgICAgICAgICAgIC8vdHlwZTogVl9TaGFwZVR5cGU7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZWwubm9kZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncG9seWdvbic6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBWX1NoYXBlVHlwZS5QT0xZR09OO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NpcmNsZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBWX1NoYXBlVHlwZS5DSVJDTEU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZWxsaXBzZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBWX1NoYXBlVHlwZS5FTExJUFNFO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xpbmUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVl9TaGFwZVR5cGUuTElORTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyZWN0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFZfU2hhcGVUeXBlLlJFQ1Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZm9yZWlnbk9iamVjdCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBWX1NoYXBlVHlwZS5GT1JFSUdOT0JKRUNUO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgICAgfSkoKSxcclxuXHJcbiAgICAgICAgICAgICAgICAvL3NpemU6IGljZHRfSURhdGFOb2RlU2l6ZTtcclxuICAgICAgICAgICAgICAgIHNpemU6ICgoKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB4OiBudW1iZXIgPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBudW1iZXIgPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogbnVtYmVyID0gMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBudW1iZXIgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgcmF0aW9zOiBhbnkgPSBudWxsLCBwb2ludHM6IGFueSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCByb3RhdGUgPSBwYXJzZUZsb2F0KGVsLmdldEF0dHJpYnV0ZSgndHJhbnNmb3JtJyk/LnJlcGxhY2UoJ3JvdGF0ZSgnLCAnJykucmVwbGFjZSgnKScsICcnKSB8fCAnMCcpIHx8IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZWwubm9kZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncG9seWdvbic6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwb2ludF94OiBhbnkgPSBbXSwgcG9pbnRfeTogYW55ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWluWCA9IDk5OTk5OTk5OSwgbWluWSA9IDk5OTk5OTk5OSwgbWF4WCA9IDAsIG1heFkgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbOG6pXkgdOG7tyBs4buHXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXRpb3MgPSBKU09OLnBhcnNlKGVsLmdldEF0dHJpYnV0ZSgncmF0aW9zJykgfHwgJ1tdJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9s4bqleSBkYW5oIHPDoWNoIHThu41hIMSR4buZXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSBlbC5nZXRBdHRyaWJ1dGUoJ3BvaW50cycpPy5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAocG9pbnQpIHsgcmV0dXJuIHBvaW50LnNwbGl0KCcgJykubWFwKGZ1bmN0aW9uICh4eSkgeyByZXR1cm4gcGFyc2VGbG9hdCh4eSk7IH0pOyB9KSA/PyBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbiAocG9pbnQ6IEFycmF5PG51bWJlcj4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludF94LnB1c2gocG9pbnRbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50X3kucHVzaChwb2ludFsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5YID0gTWF0aC5taW4uYXBwbHkobnVsbCwgcG9pbnRfeCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5ZID0gTWF0aC5taW4uYXBwbHkobnVsbCwgcG9pbnRfeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhYID0gTWF0aC5tYXguYXBwbHkobnVsbCwgcG9pbnRfeCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhZID0gTWF0aC5tYXguYXBwbHkobnVsbCwgcG9pbnRfeSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IG1pblg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gbWluWTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gbWF4WCAtIHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBtYXhZIC0geTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3JldHVybiB7IHgsIHksIHdpZHRoLCBoZWlnaHQsIHJhdGlvcywgcG9pbnRzIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjaXJjbGUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3ggPSBwYXJzZUZsb2F0KGVsLmdldEF0dHJpYnV0ZSgnY3gnKSB8fCAnMCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN5ID0gcGFyc2VGbG9hdChlbC5nZXRBdHRyaWJ1dGUoJ2N5JykgfHwgJzAnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gcGFyc2VGbG9hdChlbC5nZXRBdHRyaWJ1dGUoJ3InKSB8fCAnMCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPSBjeCAtIHI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gY3kgLSByO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSByICogMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IHIgKiAyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmV0dXJuIHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZWxsaXBzZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBleCA9IHBhcnNlRmxvYXQoZWwuZ2V0QXR0cmlidXRlKCdjeCcpIHx8ICcwJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXkgPSBwYXJzZUZsb2F0KGVsLmdldEF0dHJpYnV0ZSgnY3knKSB8fCAnMCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ4ID0gcGFyc2VGbG9hdChlbC5nZXRBdHRyaWJ1dGUoJ3J4JykgfHwgJzAnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByeSA9IHBhcnNlRmxvYXQoZWwuZ2V0QXR0cmlidXRlKCdyeScpIHx8ICcwJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IGV4IC0gcng7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gZXkgLSByeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gcnggKiAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gcnkgKiAyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmV0dXJuIHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbGluZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB4MSA9IHBhcnNlRmxvYXQoZWwuZ2V0QXR0cmlidXRlKCd4MScpIHx8ICcwJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTEgPSBwYXJzZUZsb2F0KGVsLmdldEF0dHJpYnV0ZSgneTEnKSB8fCAnMCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyID0gcGFyc2VGbG9hdChlbC5nZXRBdHRyaWJ1dGUoJ3gyJykgfHwgJzAnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MiA9IHBhcnNlRmxvYXQoZWwuZ2V0QXR0cmlidXRlKCd5MicpIHx8ICcwJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1pblggPSA5OTk5OTk5OTksIG1pblkgPSA5OTk5OTk5OTksIG1heFggPSAwLCBtYXhZID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5YID0gTWF0aC5taW4oeDEsIHgyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pblkgPSBNYXRoLm1pbih5MSwgeTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4WCA9IE1hdGgubWF4KHgxLCB4Mik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhZID0gTWF0aC5tYXgoeTEsIHkyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gbWluWDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBtaW5ZO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBtYXhYIC0geDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IG1heFkgLSB5O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdGlvcyA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh4MSAtIHgpIC8gKHdpZHRoIHx8IDEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoeTEgLSB5KSAvIChoZWlnaHQgfHwgMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHgyIC0geCkgLyAod2lkdGggfHwgMSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh5MiAtIHkpIC8gKGhlaWdodCB8fCAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9yZXR1cm4geyB4LCB5LCB3aWR0aCwgaGVpZ2h0LCByYXRpb3MgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JlY3QnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gcGFyc2VGbG9hdChlbC5nZXRBdHRyaWJ1dGUoJ3gnKSB8fCAnMCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IHBhcnNlRmxvYXQoZWwuZ2V0QXR0cmlidXRlKCd5JykgfHwgJzAnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gcGFyc2VGbG9hdChlbC5nZXRBdHRyaWJ1dGUoJ3dpZHRoJykgfHwgJzAnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IHBhcnNlRmxvYXQoZWwuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKSB8fCAnMCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmV0dXJuIHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZm9yZWlnbk9iamVjdCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPSBwYXJzZUZsb2F0KGVsLmdldEF0dHJpYnV0ZSgneCcpIHx8ICcwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gcGFyc2VGbG9hdChlbC5nZXRBdHRyaWJ1dGUoJ3knKSB8fCAnMCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBwYXJzZUZsb2F0KGVsLmdldEF0dHJpYnV0ZSgnd2lkdGgnKSB8fCAnMCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gcGFyc2VGbG9hdChlbC5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpIHx8ICcwJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9yZXR1cm4geyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHsgeCwgeSwgd2lkdGgsIGhlaWdodCwgcmF0aW9zLCBwb2ludHMsIHJvdGF0ZSB9KTtcclxuICAgICAgICAgICAgICAgIH0pKCkgYXMgaWNkdF9JRGF0YU5vZGVTaXplLFxyXG5cclxuICAgICAgICAgICAgICAgIC8vYXR0cmlidXRlOiBpY2R0X0lEYXRhTm9kZUF0dHJpYnV0ZTtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlbC5ub2RlTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdwb2x5Z29uJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY2lyY2xlJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZWxsaXBzZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xpbmUnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyZWN0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGwgPSBlbC5nZXRBdHRyaWJ1dGUoJ2ZpbGwnKSA/PyBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZSA9IGVsLmdldEF0dHJpYnV0ZSgnc3Ryb2tlJykgPz8gbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VXaWR0aCA9IHBhcnNlRmxvYXQoZWwuZ2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnKSB8fCAnMCcpID8/IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlTGluZWNhcCA9IGVsLmdldEF0dHJpYnV0ZSgnc3Ryb2tlLWxpbmVjYXAnKSA/PyBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZUxpbmVqb2luID0gZWwuZ2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWpvaW4nKSA/PyBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZURhc2hhcnJheSA9IHBhcnNlRmxvYXQoZWwuZ2V0QXR0cmlidXRlKCdzdHJva2UtZGFzaGFycmF5JykgfHwgJzAnKSA/PyBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzLCB7IGZpbGwsIHN0cm9rZSwgc3Ryb2tlV2lkdGgsIHN0cm9rZUxpbmVjYXAsIHN0cm9rZUxpbmVqb2luLCBzdHJva2VEYXNoYXJyYXkgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdmb3JlaWduT2JqZWN0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGV0IHN2Z0VkaXRvckNvbnRlbnQgPSBqUXVlcnkoZWwpLmZpbmQoJy5zdmctZWRpdG9yLWNvbnRlbnQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIChzdmdFZGl0b3JDb250ZW50Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBsZXQgZGF0YVN0eWxlID0gSlNPTi5wYXJzZSgoc3ZnRWRpdG9yQ29udGVudC5hdHRyKCdkYXRhLXN0eWxlJykgfHwgJ3t9JykucmVwbGFjZSgvXFwmcXVvdFxcOy9nbSwgJ1xcXCInKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBPYmplY3QuYXNzaWduKHJlcywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGZvbnRGYW1pbHk6IGRhdGFTdHlsZS5Gb250RmFtaWx5ID8/IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgZm9udFNpemU6IGRhdGFTdHlsZS5Gb250U2l6ZSA/PyBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbG9yOiBkYXRhU3R5bGUuVGV4dENvbG9yID8/IG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgICAgICAgICAgfSkoKSBhcyBpY2R0X0lEYXRhTm9kZUF0dHJpYnV0ZSxcclxuXHJcbiAgICAgICAgICAgICAgICAvL3N0eWxlOiBpY2R0X0lEYXRhTm9kZVN0eWxlO1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6ICgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZWwubm9kZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncG9seWdvbic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NpcmNsZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VsbGlwc2UnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdsaW5lJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncmVjdCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZvcmVpZ25PYmplY3QnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3ZnQ29udGFpbmVyID0galF1ZXJ5KGVsKS5maW5kKCcuc3ZnLWNvbnRhaW5lcicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN2Z0NvbnRhaW5lci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYm9yZGVyV2lkdGggPSBwYXJzZUZsb2F0KHN2Z0NvbnRhaW5lci5jc3MoJ2JvcmRlci13aWR0aCcpIHx8ICcwJykgfHwgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyU3R5bGUgPSBzdmdDb250YWluZXIuY3NzKCdib3JkZXItc3R5bGUnKSB8fCBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvciA9IHN2Z0NvbnRhaW5lci5jc3MoJ2JvcmRlci1jb2xvcicpIHx8IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlck9wYWNpdHkgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3IgPSBzdmdDb250YWluZXIuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJykgfHwgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZE9wYWNpdHkgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgeyBoZXgsIGFscGhhIH0gPSBsaWJfY29sb3JfZXh0cmFjdDJIZXhBbHBoYShib3JkZXJDb2xvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yID0gaGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJPcGFjaXR5ID0gYWxwaGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHsgaGV4LCBhbHBoYSB9ID0gbGliX2NvbG9yX2V4dHJhY3QySGV4QWxwaGEoYmFja2dyb3VuZENvbG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yID0gaGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kT3BhY2l0eSA9IGFscGhhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzLCB7IGJvcmRlcldpZHRoLCBib3JkZXJTdHlsZSwgYm9yZGVyQ29sb3IsIGJvcmRlck9wYWNpdHksIGJhY2tncm91bmRDb2xvciwgYmFja2dyb3VuZE9wYWNpdHkgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN2Z0VkaXRvckNvbnRlbnQgPSBqUXVlcnkoZWwpLmZpbmQoJy5zdmctZWRpdG9yLWNvbnRlbnQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdmdFZGl0b3JDb250ZW50Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhU3R5bGUgPSBKU09OLnBhcnNlKChzdmdFZGl0b3JDb250ZW50LmF0dHIoJ2RhdGEtc3R5bGUnKSB8fCAne30nKS5yZXBsYWNlKC9cXCZxdW90XFw7L2dtLCAnXFxcIicpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHsgaGV4LCBhbHBoYSB9ID0gbGliX2NvbG9yX2V4dHJhY3QySGV4QWxwaGEoZGF0YVN0eWxlLlRleHRDb2xvcik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IGRhdGFTdHlsZS5Gb250RmFtaWx5ID8/IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBkYXRhU3R5bGUuRm9udFNpemUgPz8gbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGhleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogYWxwaGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgICAgICAgICAgfSkoKSBhcyBpY2R0X0lEYXRhTm9kZVN0eWxlLFxyXG5cclxuICAgICAgICAgICAgICAgIC8vc291cmNlOiBpY2R0X0lEYXRhTm9kZVNvdXJjZTtcclxuICAgICAgICAgICAgICAgIHNvdXJjZTogKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzID0ge30gYXMgYW55O1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZWwubm9kZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncG9seWdvbic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NpcmNsZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VsbGlwc2UnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdsaW5lJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncmVjdCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZvcmVpZ25PYmplY3QnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnRlbnQgdGV4dCwgY29udGVudCBodG1sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocE5vZGUuaGFzQ2xhc3MoJ2VkaXRvcnMnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdmdFZGl0b3JDb250ZW50ID0galF1ZXJ5KGVsKS5maW5kKCcuc3ZnLWVkaXRvci1jb250ZW50Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN2Z0VkaXRvckNvbnRlbnQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdGV4dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAoc3ZnRWRpdG9yQ29udGVudC5hdHRyKCdkYXRhLXN0eWxlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGxldCB0ZXh0Q29udGVudCA9IHN2Z0VkaXRvckNvbnRlbnQudGV4dCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIHZhcmlhYmxlS2V5d29yZHMgPSAodGV4dENvbnRlbnQgPz8gJycpLm1hdGNoKC9cXHtbYS16QS1aMC05X10rXFx9L2dtKSA/PyBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBPYmplY3QuYXNzaWduKHJlcywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHRleHRDb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICB2YXJpYWJsZUtleXdvcmRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9odG1sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgbGV0IGh0bWxDb250ZW50ID0gc3ZnRWRpdG9yQ29udGVudC5odG1sKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgdmFyaWFibGVLZXl3b3JkcyA9IChodG1sQ29udGVudCA/PyAnJykubWF0Y2goL1xce1thLXpBLVowLTlfXStcXH0vZ20pID8/IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIE9iamVjdC5hc3NpZ24ocmVzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgdHlwZTogJ2h0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIGh0bWw6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgaHRtbENvbnRlbnQsIHZhcmlhYmxlS2V5d29yZHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaHRtbENvbnRlbnQgPSBzdmdFZGl0b3JDb250ZW50Lmh0bWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlS2V5d29yZHMgPSAoaHRtbENvbnRlbnQgPz8gJycpLm1hdGNoKC9cXHtbYS16QS1aMC05X10rXFx9L2dtKSA/PyBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbENvbnRlbnQsIHZhcmlhYmxlS2V5d29yZHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pbnB1dCBkYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwTm9kZS5oYXNDbGFzcygnaW5wdXRzJykgfHwgcE5vZGUuaGFzQ2xhc3MoJ3RleHRhcmVhcycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2lucHV0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiAhIWpRdWVyeShlbCkuZmluZCgnaW5wdXQnKS5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0YXJlYTogISFqUXVlcnkoZWwpLmZpbmQoJ3RleHRhcmVhJykubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29udGVudCB0ZXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwTm9kZS5oYXNDbGFzcygndGVzdHMnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBub2RlVGVzdCA9IGpRdWVyeShlbCkuZmluZCgnLnN2Zy10ZXN0Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwTm9kZS5oYXNDbGFzcygndGVzdHMtdHJ1ZWZhbHNlJykpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBodG1sQ29udGVudCA9IG5vZGVUZXN0LmZpbmQoJy5zdmctZWRpdG9yLWNvbnRlbnQnKS5odG1sKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZUtleXdvcmRzID0gKGh0bWxDb250ZW50ID8/ICcnKS5tYXRjaCgvXFx7W2EtekEtWjAtOV9dK1xcfS9nbSkgPz8gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlcywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3Rlc3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0cnVlZmFsc2UnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWVmYWxzZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc2NvcnJlY3Q6IGN1cnJlbnREYXRhLnRlc3QyLnRydWVmYWxzZT8uaW5jbHVkZXMobm9kZUlkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbENvbnRlbnQ6IGh0bWxDb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlS2V5d29yZHM6IHZhcmlhYmxlS2V5d29yZHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBOb2RlLmhhc0NsYXNzKCd0ZXN0cy1zaW5nbGVjaG9pY2UnKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGh0bWxDb250ZW50ID0gbm9kZVRlc3QuZmluZCgnLnN2Zy1lZGl0b3ItY29udGVudCcpLmh0bWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlS2V5d29yZHMgPSAoaHRtbENvbnRlbnQgPz8gJycpLm1hdGNoKC9cXHtbYS16QS1aMC05X10rXFx9L2dtKSA/PyBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGVzdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3NpbmdsZWNob2ljZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2luZ2xlY2hvaWNlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzY29ycmVjdDogY3VycmVudERhdGEudGVzdDIuc2luZ2xlY2hvaWNlPy5pbmNsdWRlcyhub2RlSWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWw6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sQ29udGVudDogaHRtbENvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVLZXl3b3JkczogdmFyaWFibGVLZXl3b3Jkc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocE5vZGUuaGFzQ2xhc3MoJ3Rlc3RzLW11bHRpY2hvaWNlJykpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBodG1sQ29udGVudCA9IG5vZGVUZXN0LmZpbmQoJy5zdmctZWRpdG9yLWNvbnRlbnQnKS5odG1sKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZUtleXdvcmRzID0gKGh0bWxDb250ZW50ID8/ICcnKS5tYXRjaCgvXFx7W2EtekEtWjAtOV9dK1xcfS9nbSkgPz8gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlcywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3Rlc3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdtdWx0aWNob2ljZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGljaG9pY2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNjb3JyZWN0OiBjdXJyZW50RGF0YS50ZXN0Mi5tdWx0aWNob2ljZT8uaW5jbHVkZXMobm9kZUlkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbENvbnRlbnQ6IGh0bWxDb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlS2V5d29yZHM6IHZhcmlhYmxlS2V5d29yZHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBOb2RlLmhhc0NsYXNzKCd0ZXN0cy1maWxsJykpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBodG1sQ29udGVudCA9IG5vZGVUZXN0LmZpbmQoJy5zdmctZWRpdG9yLWNvbnRlbnQnKS5odG1sKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZUtleXdvcmRzID0gKGh0bWxDb250ZW50ID8/ICcnKS5tYXRjaCgvXFx7W2EtekEtWjAtOV9dK1xcfS9nbSkgPz8gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsS2V5d29yZHMgPSAoaHRtbENvbnRlbnQgPz8gJycpLm1hdGNoKC9cXFtcXFtbYS16QS1aMC05XStcXF1cXF0vZ20pID8/IFtdIGFzIEFycmF5PGFueT47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xvYWkgYm8gcGhhbiB0dSB0cnVuZyBuaGF1XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZmlsbEtleXdvcmRzID0gZmlsbEtleXdvcmRzLnJlZHVjZSgodW5pcXVlOiBhbnksIGl0ZW06IGFueSkgPT4gdW5pcXVlLmluY2x1ZGVzKGl0ZW0pID8gdW5pcXVlIDogWy4uLnVuaXF1ZSwgaXRlbV0sIFtdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbEtleXdvcmRzID0gZmlsbEtleXdvcmRzLmZpbHRlcigodiwgaSwgYSkgPT4gYS5pbmRleE9mKHYpID09IGkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3Q6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZmlsbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogZmlsbEtleXdvcmRzLm1hcChtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogbSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdXJyZW50RGF0YS50ZXN0Mi5maWxsPy5maW5kKGYgPT4gZi5pZCA9PSBub2RlSWQpPy52YWxzPy5tYXAobSA9PiBtLnRleHQpLmZpbHRlcihmID0+ICFbXCJcIiwgbnVsbCwgdW5kZWZpbmVkLCBOYU5dLmluY2x1ZGVzKGYpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbENvbnRlbnQ6IGh0bWxDb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlS2V5d29yZHM6IHZhcmlhYmxlS2V5d29yZHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbEtleXdvcmRzOiBmaWxsS2V5d29yZHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBOb2RlLmhhc0NsYXNzKCd0ZXN0cy1tYXRjaGluZycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlVGVzdC5oYXNDbGFzcygnc3ZnLXRlc3QtZW1wdHknKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGVzdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbWF0Y2hpbmctZW1wdHknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGluZzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBub2RlVGVzdC5hdHRyKCdkYXRhLW5hbWUnKSB8fCBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChub2RlVGVzdC5oYXNDbGFzcygnc3ZnLXRlc3QtY29udGVudCcpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGh0bWxDb250ZW50ID0gbm9kZVRlc3QuZmluZCgnLnN2Zy1lZGl0b3ItY29udGVudCcpLmh0bWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZUtleXdvcmRzID0gKGh0bWxDb250ZW50ID8/ICcnKS5tYXRjaCgvXFx7W2EtekEtWjAtOV9dK1xcfS9nbSkgPz8gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGVzdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbWF0Y2hpbmctY29udGVudCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoaW5nOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IG5vZGVUZXN0LmF0dHIoJ2RhdGEtbmFtZScpIHx8IG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sQ29udGVudDogaHRtbENvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlS2V5d29yZHM6IHZhcmlhYmxlS2V5d29yZHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwTm9kZS5oYXNDbGFzcygndGVzdHMtc3BlZWNoJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzcGVlY2gnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BlZWNoOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN1cnJlbnREYXRhLnRlc3QyLnNwZWVjaD8uZmluZChmID0+IGYuaWQgPT0gbm9kZUlkKT8udmFscz8ubWFwKG0gPT4gbS50ZXh0KS5maWx0ZXIoZiA9PiAhW1wiXCIsIG51bGwsIHVuZGVmaW5lZCwgTmFOXS5pbmNsdWRlcyhmKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBOb2RlLmhhc0NsYXNzKCd0ZXN0cy1zdWJtaXQnKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVsSW1nID0galF1ZXJ5KGVsKS5maW5kKCcuc3ZnLWNvbnRhaW5lciBpbWcnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGVzdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3N1Ym1pdCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZTogZXh0cmFjdFNvdXJjZShlbEltZy5hdHRyKCd1cmwnKSwgZWxJbWcuYXR0cigncGF0aCcpLCBlbEltZy5hdHRyKCdzcmMnKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9maWxlIGltYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwTm9kZS5oYXNDbGFzcygnaW1hZ2VzJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZWxJbWcgPSBqUXVlcnkoZWwpLmZpbmQoJy5zdmctZWRpdG9yLWNvbnRlbnQgaW1nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsSW1nLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlcywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2ltYWdlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiBleHRyYWN0U291cmNlKGVsSW1nLmF0dHIoJ3VybCcpLCBlbEltZy5hdHRyKCdwYXRoJyksIGVsSW1nLmF0dHIoJ3NyYycpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlbElmcmFtZSA9IGpRdWVyeShlbCkuZmluZCgnaWZyYW1lJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlcywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2lmcmFtZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZnJhbWU6IGV4dHJhY3RTb3VyY2UoZWxJZnJhbWUuYXR0cigndXJsJyksIGVsSWZyYW1lLmF0dHIoJ3BhdGgnKSwgZWxJZnJhbWUuYXR0cignc3JjJykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZmlsZSBzb3VuZCAtIGF1ZGlvIGluIGFjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocE5vZGUuaGFzQ2xhc3MoJ3NvdW5kcycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVsSW1nID0galF1ZXJ5KGVsKS5maW5kKCcuc3ZnLWVkaXRvci1jb250ZW50IGltZycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbEltZy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbWFnZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZTogZXh0cmFjdFNvdXJjZShlbEltZy5hdHRyKCd1cmwnKSwgZWxJbWcuYXR0cigncGF0aCcpLCBlbEltZy5hdHRyKCdzcmMnKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9maWxlIGh0bWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBOb2RlLmhhc0NsYXNzKCdodG1scycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVsSWZyYW1lID0galF1ZXJ5KGVsKS5maW5kKCdpZnJhbWUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxJZnJhbWUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaWZyYW1lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmcmFtZTogZXh0cmFjdFNvdXJjZShlbElmcmFtZS5hdHRyKCd1cmwnKSwgZWxJZnJhbWUuYXR0cigncGF0aCcpLCBlbElmcmFtZS5hdHRyKCdzcmMnKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocE5vZGUuaGFzQ2xhc3MoJ3N2Z3MnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlbFN2ZyA9IGpRdWVyeShlbCkuZmluZCgnc3ZnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsU3ZnLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlcywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3N2ZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdmc6IE9iamVjdC5hc3NpZ24oZXh0cmFjdFNvdXJjZShlbFN2Zy5hdHRyKCd1cmwnKSwgZWxTdmcuYXR0cigncGF0aCcpLCBlbFN2Zy5hdHRyKCdzcmMnKSksIHsgc3ZnQ29udGVudDogZWxTdmcuZ2V0KDApPy5vdXRlckhUTUwgPz8gbnVsbCB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2ZpbGUgbWVkaWFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBOb2RlLmhhc0NsYXNzKCdtZWRpYXMnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtZWRpYUl0ZW0gPSBqUXVlcnkoZWwpLmZpbmQoJy5tZWRpYS1pdGVtJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lZGlhSXRlbS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1lZGlhVHlwZSA9IG1lZGlhSXRlbS5hdHRyKCd0eXBlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobWVkaWFUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhdWRpbyc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlcywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYXVkaW8nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdWRpbzogZXh0cmFjdFNvdXJjZShtZWRpYUl0ZW0uYXR0cigndXJsJyksIG1lZGlhSXRlbS5hdHRyKCdwYXRoJyksIG1lZGlhSXRlbS5hdHRyKCdzcmMnKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZpZGVvJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd2aWRlbycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvOiBleHRyYWN0U291cmNlKG1lZGlhSXRlbS5hdHRyKCd1cmwnKSwgbWVkaWFJdGVtLmF0dHIoJ3BhdGgnKSwgbWVkaWFJdGVtLmF0dHIoJ3NyYycpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZmlsZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlcywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZmlsZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGU6IGV4dHJhY3RTb3VyY2UobWVkaWFJdGVtLmF0dHIoJ3VybCcpLCBtZWRpYUl0ZW0uYXR0cigncGF0aCcpLCBtZWRpYUl0ZW0uYXR0cignc3JjJykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2xpbmsnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IG1lZGlhSXRlbS5hdHRyKCd1cmwnKSA/PyBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVsSW1nQ292ZXIgPSBqUXVlcnkoZWwpLmZpbmQoJ2ltZycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbEltZ0NvdmVyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlcywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IGV4dHJhY3RTb3VyY2UoZWxJbWdDb3Zlci5hdHRyKCd1cmwnKSwgZWxJbWdDb3Zlci5hdHRyKCdwYXRoJyksIGVsSW1nQ292ZXIuYXR0cignc3JjJykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXMudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW1hZ2UnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgICAgICAgICB9KSgpIGFzIGljZHRfSURhdGFOb2RlU291cmNlLFxyXG5cclxuICAgICAgICAgICAgICAgIC8vYW5pbWF0ZTogaWNkdF9JRGF0YU5vZGVBbmltYXRlO1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0ZTogKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhbmltYXRlcyA9IGN1cnJlbnREYXRhLmFuaW1hdGVzPy5maW5kKGYgPT4gZi5lbGVtZW50SWQgPT0gbm9kZUlkKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBhbmltYXRlcy52YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgICAgICAgICB9KSgpIGFzIGljZHRfSURhdGFOb2RlQW5pbWF0ZSxcclxuXHJcbiAgICAgICAgICAgICAgICAvL2ludGVyYWN0aXZlOiBpY2R0X0lEYXRhTm9kZUludGVyYWN0aXZlO1xyXG4gICAgICAgICAgICAgICAgaW50ZXJhY3RpdmU6ICgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlcyA9IHt9IGFzIGFueTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9zaG93XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFjdGlvblNob3dzID0gY3VycmVudERhdGEuYWN0aW9ucy5zaG93LmZpbHRlcihmID0+IGYuZWxlbWVudElkID09IG5vZGVJZCAmJiBmLmFjdGl2ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvblNob3dzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMuc2hvdyA9IHt9IGFzIGFueTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvblNob3dzLmZvckVhY2goYWN0aW9uID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB7IHNvdXJjZSB9ID0gYWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChzb3VyY2U/LnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd3b3JrJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMuc2hvdy5hY3Rpb24gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXMuc2hvdy5hY3Rpb24sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzb3VyY2UudmFsdWUgPz8gbnVsbCwgICAgICAgICAgICAvL2xv4bqhaSBob+G6oXQgxJHhu5luZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlcmF0aW9uOiBzb3VyY2UuaXRlcmF0aW9uID8/IG51bGwsICAgIC8vc+G7kSBs4bqnbiBs4bq3cCBs4bqhaVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluaXNoOiBzb3VyY2UuZW5kID8/IG51bGwsICAgICAgICAgICAgIC8vbG/huqFpIGvhur90IHRow7pjXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiBzb3VyY2UudGltZSA/PyBudWxsLCAgICAgICAgICAgICAgLy90aOG7nWkgZ2lhbiBob+G6oXQgxJHhu5luZyAoc2Vjb25kKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiBzb3VyY2UucG9pbnRzID8/IG51bGwgICAgICAgICAgIC8vxJFp4buDbSBkaSBjaHV54buDbiAob2Zmc2V0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2F1ZGlvJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMuc2hvdy5hdWRpbyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlcy5zaG93LmF1ZGlvLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IGV4dHJhY3RTb3VyY2UobnVsbCwgbnVsbCwgc291cmNlLnVybCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRpb246IHNvdXJjZS5pdGVyYXRpb24gPz8gbnVsbCwgICAgLy9z4buRIGzhuqduIGzhurdwIGzhuqFpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2g6IHNvdXJjZS5lbmQgPz8gbnVsbCwgICAgICAgICAgICAgLy9sb+G6oWkga+G6v3QgdGjDumNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IHNvdXJjZS50aW1lID8/IG51bGwsICAgICAgICAgICAgICAvL3Ro4budaSBnaWFuIGhv4bqhdCDEkeG7mW5nIChzZWNvbmQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3luYzogc291cmNlLml0ZXJhdGlvbiA9PSAtMSA/ICdjaGFuZ2Utc2xpZGUnIDogJ2NoYW5nZS1ub2RlJyAgIC8vxJHhu5NuZyBi4buZIMOibSB0aGFuaFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ25vZGUnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ25vZGUyJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlLm9wdGlvbnMuaW5jbHVkZXMoJ3Nob3cnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnNob3cudHJpZ2dlcnNob3cgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzLnNob3cudHJpZ2dlcnNob3csIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogcGFyc2VJbnQoc291cmNlLmlkID8/ICcwJykgPz8gbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHM6IHNvdXJjZS5pZHM/Lm1hcCgobTogc3RyaW5nKSA9PiBwYXJzZUludChtKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmM6IHNvdXJjZS5hc3luYyA/PyBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IHNvdXJjZS50aW1lID8/IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlLm9wdGlvbnMuaW5jbHVkZXMoJ3J1bicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMuc2hvdy50cmlnZ2VycnVuID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlcy5zaG93LnRyaWdnZXJydW4sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogcGFyc2VJbnQoc291cmNlLmlkID8/ICcwJykgPz8gbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHM6IHNvdXJjZS5pZHM/Lm1hcCgobTogc3RyaW5nKSA9PiBwYXJzZUludChtKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmM6IHNvdXJjZS5hc3luYyA/PyBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IHNvdXJjZS50aW1lID8/IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlLm9wdGlvbnMuaW5jbHVkZXMoJ2hpZGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnNob3cudHJpZ2dlcmhpZGUgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzLnNob3cudHJpZ2dlcmhpZGUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogcGFyc2VJbnQoc291cmNlLmlkID8/ICcwJykgPz8gbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHM6IHNvdXJjZS5pZHM/Lm1hcCgobTogc3RyaW5nKSA9PiBwYXJzZUludChtKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmM6IHNvdXJjZS5hc3luYyA/PyBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IHNvdXJjZS50aW1lID8/IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9jbGlja1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhY3Rpb25DbGlja3MgPSBjdXJyZW50RGF0YS5hY3Rpb25zLmNsaWNrLmZpbHRlcihmID0+IGYuZWxlbWVudElkID09IG5vZGVJZCAmJiBmLmFjdGl2ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbkNsaWNrcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMuY2xpY2sgPSB7fSBhcyBhbnk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25DbGlja3MuZm9yRWFjaChhY3Rpb24gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHsgc291cmNlIH0gPSBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHNvdXJjZT8udHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3dvcmsnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5jbGljay5hY3Rpb24gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXMuY2xpY2suYWN0aW9uLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc291cmNlLnZhbHVlID8/IG51bGwsICAgICAgICAgICAgLy9sb+G6oWkgaG/huqF0IMSR4buZbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdGlvbjogc291cmNlLml0ZXJhdGlvbiA/PyBudWxsLCAgICAvL3Phu5EgbOG6p24gbOG6t3AgbOG6oWlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaDogc291cmNlLmVuZCA/PyBudWxsLCAgICAgICAgICAgICAvL2xv4bqhaSBr4bq/dCB0aMO6Y1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogc291cmNlLnRpbWUgPz8gbnVsbCwgICAgICAgICAgICAgIC8vdGjhu51pIGdpYW4gaG/huqF0IMSR4buZbmcgKHNlY29uZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50czogc291cmNlLnBvaW50cyA/PyBudWxsICAgICAgICAgICAvL8SRaeG7g20gZGkgY2h1eeG7g24gKG9mZnNldClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhdWRpbyc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmNsaWNrLmF1ZGlvID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzLmNsaWNrLmF1ZGlvLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IGV4dHJhY3RTb3VyY2UobnVsbCwgbnVsbCwgc291cmNlLnVybCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRpb246IHNvdXJjZS5pdGVyYXRpb24gPz8gbnVsbCwgICAgLy9z4buRIGzhuqduIGzhurdwIGzhuqFpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2g6IHNvdXJjZS5lbmQgPz8gbnVsbCwgICAgICAgICAgICAgLy9sb+G6oWkga+G6v3QgdGjDumNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IHNvdXJjZS50aW1lID8/IG51bGwsICAgICAgICAgICAgICAvL3Ro4budaSBnaWFuIGhv4bqhdCDEkeG7mW5nIChzZWNvbmQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3luYzogc291cmNlLml0ZXJhdGlvbiA9PSAtMSA/ICdjaGFuZ2Utc2xpZGUnIDogJ2NoYW5nZS1ub2RlJyAgIC8vxJHhu5NuZyBi4buZIMOibSB0aGFuaFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ25vZGUnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ25vZGUyJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlLm9wdGlvbnMuaW5jbHVkZXMoJ3Nob3cnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmNsaWNrLnRyaWdnZXJzaG93ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlcy5jbGljay50cmlnZ2Vyc2hvdywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBwYXJzZUludChzb3VyY2UuaWQgPz8gJzAnKSA/PyBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkczogc291cmNlLmlkcz8ubWFwKChtOiBzdHJpbmcpID0+IHBhcnNlSW50KG0pKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3luYzogc291cmNlLmFzeW5jID8/IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogc291cmNlLnRpbWUgPz8gbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2Uub3B0aW9ucy5pbmNsdWRlcygncnVuJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5jbGljay50cmlnZ2VycnVuID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlcy5jbGljay50cmlnZ2VycnVuLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHBhcnNlSW50KHNvdXJjZS5pZCA/PyAnMCcpID8/IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRzOiBzb3VyY2UuaWRzPy5tYXAoKG06IHN0cmluZykgPT4gcGFyc2VJbnQobSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzeW5jOiBzb3VyY2UuYXN5bmMgPz8gbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiBzb3VyY2UudGltZSA/PyBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZS5vcHRpb25zLmluY2x1ZGVzKCdoaWRlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5jbGljay50cmlnZ2VyaGlkZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXMuY2xpY2sudHJpZ2dlcmhpZGUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogcGFyc2VJbnQoc291cmNlLmlkID8/ICcwJykgPz8gbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHM6IHNvdXJjZS5pZHM/Lm1hcCgobTogc3RyaW5nKSA9PiBwYXJzZUludChtKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmM6IHNvdXJjZS5hc3luYyA/PyBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IHNvdXJjZS50aW1lID8/IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2xpZGUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5jbGljay5zbGlkZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlcy5jbGljay5zbGlkZSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHBhcnNlSW50KHNvdXJjZS5pZCA/PyAnMCcpIHx8IHNvdXJjZS5udW0gfHwgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IHNvdXJjZS5pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgICAgICAgICB9KSgpIGFzIGljZHRfSURhdGFOb2RlSW50ZXJhY3RpdmUsXHJcblxyXG4gICAgICAgICAgICAgICAgLy92YXJpYWJsZTogaWNkdF9JRGF0YU5vZGVWYXJpYWJsZTtcclxuICAgICAgICAgICAgICAgIHZhcmlhYmxlOiAoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXMgPSB7fSBhcyBhbnk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vaW5wdXRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXZhcmlhYmxlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmlucHV0ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzLmlucHV0LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZTogZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXZhcmlhYmxlJykgPz8gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vY2xpY2tcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbm9kZVZhcmlhYmxlID0gY3VycmVudERhdGEubm9kZXM/LmZpbmQoZiA9PiBmLmlkID09IG5vZGVJZCk/LnZhcmlhYmxlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlVmFyaWFibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmNsaWNrID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzLmNsaWNrLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZTogbm9kZVZhcmlhYmxlLnZhcmlhYmxlID8/IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjogbm9kZVZhcmlhYmxlLm9wZXJhdG9yID8/IG51bGwsICAgICAvLysgLSAqIC8gPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWV0eXBlOiBub2RlVmFyaWFibGUudmFsdWV0eXBlID8/IG51bGwsICAgIC8vdmFyaWFibGUsIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbm9kZVZhcmlhYmxlLnZhbHVlID8/IG51bGwgICAgICAgIC8vbnVtYmVyLCBzdHJpbmcsIHZhcmlhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICAgICAgICAgIH0pKCkgYXMgaWNkdF9JRGF0YU5vZGVWYXJpYWJsZSxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIHNsaWRlLnN2Zz8ubm9kZXMucHVzaChub2RlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICBzbGlkZXMucHVzaChzbGlkZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNjcmVlbjogeyB3aWR0aDogZGF0YVNvdXJjZS5zY3JlZW4udywgaGVpZ2h0OiBkYXRhU291cmNlLnNjcmVlbi5oIH0sXHJcbiAgICAgICAgZGF0YTogeyBzbGlkZXMgfSBhcyBpY2R0X0lEYXRhU291cmNlLFxyXG4gICAgICAgIHZhcmlhYmxlOiBkYXRhU291cmNlLnZhcmlhYmxlXHJcbiAgICB9O1xyXG5cclxufSIsIi8qKlxyXG4gKiAjMDAwXHJcbiAqICMwMDAwMDBcclxuICogcmdiKDAsMCwwKVxyXG4gKiByZ2JhKDAsMCwwLDApXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgaWNkdF9Sb3VuZE51bWJlciB9IGZyb20gXCIuLi9zY3JpcHQvaGFuZGxlL3JvdW5kLW51bWJlclwiO1xyXG5cclxudmFyIEhFWF9SRUdFWCA9IC9eI1thLWZBLUYwLTldKyQvaTtcclxuXHJcbnZhciBSR0JBX1JFR0VYID0gL15yZ2JhXFwoKFxcZCspLChcXGQrKSwoXFxkKyksKFxcZCspXFwpJC9pO1xyXG52YXIgUkdCX1JFR0VYID0gL15yZ2JcXCgoXFxkKyksKFxcZCspLChcXGQrKVxcKSQvaTtcclxuXHJcbmV4cG9ydCBjb25zdCBsaWJfY29sb3JfZXh0cmFjdDJIZXhBbHBoYSA9IChjb2xvcjogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4ge1xyXG4gICAgbGV0IGhleDogc3RyaW5nIHwgbnVsbCA9IG51bGwsXHJcbiAgICAgICAgYWxwaGE6IG51bWJlciB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIGlmIChjb2xvcikge1xyXG4gICAgICAgIGlmIChjb2xvciA9PSAndHJhbnNwYXJlbnQnKSB7XHJcbiAgICAgICAgICAgIGhleCA9ICcjMDAwMDAwJztcclxuICAgICAgICAgICAgYWxwaGEgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjb2xvci5tYXRjaChIRVhfUkVHRVgpKSB7XHJcbiAgICAgICAgICAgIGhleCA9IGNvbG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29sb3IgPSBjb2xvci5yZXBsYWNlKC9cXHMrL2csICcnKTtcclxuICAgICAgICAgICAgbGV0IHJnYmEgPSBjb2xvci5tYXRjaChSR0JBX1JFR0VYKSBhcyBhbnk7XHJcbiAgICAgICAgICAgIGlmIChyZ2JhKSB7XHJcbiAgICAgICAgICAgICAgICBoZXggPSAnIydcclxuICAgICAgICAgICAgICAgICAgICArIChyZ2JhWzFdIHwgMSA8PCA4KS50b1N0cmluZygxNikuc2xpY2UoMSlcclxuICAgICAgICAgICAgICAgICAgICArIChyZ2JhWzJdIHwgMSA8PCA4KS50b1N0cmluZygxNikuc2xpY2UoMSlcclxuICAgICAgICAgICAgICAgICAgICArIChyZ2JhWzNdIHwgMSA8PCA4KS50b1N0cmluZygxNikuc2xpY2UoMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgYWxwaGEgPSBpY2R0X1JvdW5kTnVtYmVyKHBhcnNlRmxvYXQocmdiYVs0XSksIDEwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmdiID0gY29sb3IubWF0Y2goUkdCX1JFR0VYKSBhcyBhbnk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmdiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGV4ID0gJyMnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgKHJnYlsxXSB8IDEgPDwgOCkudG9TdHJpbmcoMTYpLnNsaWNlKDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgKHJnYlsyXSB8IDEgPDwgOCkudG9TdHJpbmcoMTYpLnNsaWNlKDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgKHJnYlszXSB8IDEgPDwgOCkudG9TdHJpbmcoMTYpLnNsaWNlKDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vY29uc29sZS5sb2coJ2xpYl9jb2xvcl9leHRyYWN0MkhleEFscGhhJywgY29sb3IsIGhleCwgYWxwaGEpO1xyXG5cclxuICAgIHJldHVybiB7IGhleCwgYWxwaGEgfTtcclxufSIsIi8qXHJcbiogIEZpbGVuYW1lOiBlcmFzZS5qc1xyXG4qICBBbiBlcmFzZXIgZnVuY3Rpb24gZGVzaWduZWQgZm9yIHVzZSB3aXRoIFN0YW5kYXJkIFZlY3RvciBHcmFwaGljcy5cclxuKiAgQXV0aG9yOiBEYXZpZCBCcm9rYXcsIHdpdGggRXJpayBXZWl0bmF1ZXIgYW5kIERhdmlkIExhbmR5XHJcbiogIENyZWF0ZWQ6IFNwcmluZyAyMDE0XHJcbiogIExhc3QgTW9kaWZpZWQgT246IDIwMTQvMDUvMTlcclxuKiAgTGFzdCBNb2RpZmllZCBCeTogRGF2aWQgQnJva2F3XHJcbiovXHJcblxyXG4vKipcclxuICAgIFRoZSBmdW5jdGlvbiBnZXRzIGFuIGFycmF5IG9mIHBhdGhzIGFuZCBhbiBlcmFzZVBhdGguIEl0IHJldHVybnMgYSBuZXdcclxuICAgIGFycmF5IG9mIHBhdGhzIHRoYXQgYXJlIHRoZSByZXN1bHQgb2YgcmVtb3ZpbmcgZXZlcnl0aGluZyBpbiB0aGUgZXJhc2VyIHBhdGhcclxuICAgIGZyb20gdGhlIHBhdGhzLlxyXG5cclxuICAgIEVhY2ggaW5kaXZpZHVhbCBwYXRoIGlzIHJlcHJlc2VudGVkIGFzIGFuIGFycmF5IG9mIHBvaW50cywgd2l0aCBlYWNoIHBvaW50IGJlaW5nXHJcbiAgICBhbiBbeCwgeV0gYXJyYXkuIGBbWzAsMF0sIFsxMDAsMTAwXV1gIGlzIGFuIGV4YW1wbGUgb2YgYSBwYXRoIGNvbnNpc3Rpbmcgb2YgYSBzaW5nbGVcclxuICAgIGxpbmUgc2VnbWVudCBmcm9tIHRoZSBvcmlnaW4gdG8gKDEwMCwxMDApLiBgWzIwLDEwXWAgd291bGQgYWxzbyBiZSBhIHZhbGlkIHBhdGgsXHJcbiAgICBjb25zaXN0aW5nIG9mIGEgc2luZ2xlIHBvaW50IGF0IHRoZSBwb3NpdGlvbiAoMjAsMTApLlxyXG5cclxuICAgIFRoZSBlcmFzZVJhZGl1cyBpcyB0aGUgcmFkaXVzIG9mIHRoZSBpbWFnaW5lZCBjaXJjdWxhciBlcmFzZXIgbW92ZWQgb3ZlciB0aGUgY2FudmFzLlxyXG4gICAgSXQncyB0aGUgc2FtZSBhcyBoYWxmIG9mIHRoZSBzdHJva2Ugd2lkdGguIFdlIHdpbGwgYXNzdW1lIGZvciBub3cgdGhhdCB0aGUgc3Ryb2tlIHdpZHRoXHJcbiAgICAvIHJhZGl1cyBvZiB0aGUgYWN0dWFsIHBhdGhzIHRoYXQgYXJlIHRvIGJlIGVyYXNlZCBpcyB6ZXJvLlxyXG4qL1xyXG5leHBvcnQgY29uc3QgbGliX2VyYXNlID0gKHBhdGhzOiBhbnksIGVyYXNlUGF0aDogYW55LCBlcmFzZVJhZGl1czogYW55KSA9PiB7XHJcblxyXG4gICAgLy92YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAvL3ZhciB0aW1lMSA9IGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCk7XHJcbiAgICBlcmFzZVJhZGl1cyA9IGVyYXNlUmFkaXVzIHx8IDIwO1xyXG5cclxuICAgIC8qXHJcbiAgICAqIFRvIGdldCB0ZXN0IGNhc2U6IHVuY29tbWVudCB0aGlzIGJsb2NrIGFuZCB0aGUgYmxvY2sgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSByZXR1cm4gc3RhdGVtZW50LlxyXG4gICAgKlxyXG4gICAgY29uc29sZS5sb2coIFwiZXJhc2UgcmFkaXVzOiBcIiArIGVyYXNlUmFkaXVzICk7XHJcbiAgICBjb25zb2xlLmxvZyggXCJlcmFzZSBwYXRoOlwiICk7XHJcbiAgICBsb2dQYXRoKCBlcmFzZVBhdGgsIDEgKTtcclxuICAgIGNvbnNvbGUubG9nKCBcInBhdGhzOlwiICk7XHJcbiAgICBsb2dQYXRocyggcGF0aHMgKTtcclxuICAgICovXHJcblxyXG4gICAgdmFyIG5ld1BhdGhzID0gW10gYXMgYW55O1xyXG5cclxuICAgIC8vIHBvaW50RXJhc2UgaXMgZm9yIHVzZSB3aGVuIGVyYXNlUGF0aCBpcyBvZiBsZW5ndGggMS4gIEluIHRoaXMgY2FzZSB0aGUgZXJhc2luZyBlbGVtZW50IGlzIGEgY2lyY2xlLCBub3QgYSBjYXBzdWxlLlxyXG4gICAgdmFyIHBvaW50RXJhc2UgPSBmdW5jdGlvbiAocGF0aDogYW55KSB7XHJcbiAgICAgICAgdmFyIGVYID0gZXJhc2VQYXRoWzBdWzBdO1xyXG4gICAgICAgIHZhciBlWSA9IGVyYXNlUGF0aFswXVsxXTtcclxuXHJcbiAgICAgICAgdmFyIGkgPSAwO1xyXG4gICAgICAgIHZhciBsYXN0ID0gMDtcclxuXHJcbiAgICAgICAgLy8gaGFuZGxlIHBvaW50IHBhdGhcclxuICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgaWYgKCF3aXRoaW5DaXJjbGUocGF0aFswXVswXSwgcGF0aFswXVsxXSwgZVgsIGVZLCBlcmFzZVJhZGl1cykpIHtcclxuICAgICAgICAgICAgICAgIG5ld1BhdGhzLnB1c2gocGF0aCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBuZXdQYXRoO1xyXG4gICAgICAgIHdoaWxlIChpIDwgKHBhdGgubGVuZ3RoIC0gMSkpIHtcclxuICAgICAgICAgICAgdmFyIHAwID0gcGF0aFtpXTtcclxuICAgICAgICAgICAgdmFyIHAxID0gcGF0aFtpICsgMV07XHJcbiAgICAgICAgICAgIHZhciBwMF93aXRoaW5DaXJjbGUgPSB3aXRoaW5DaXJjbGUocDBbMF0sIHAwWzFdLCBlWCwgZVksIGVyYXNlUmFkaXVzKTtcclxuICAgICAgICAgICAgdmFyIHAxX3dpdGhpbkNpcmNsZSA9IHdpdGhpbkNpcmNsZShwMVswXSwgcDFbMV0sIGVYLCBlWSwgZXJhc2VSYWRpdXMpO1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgYm90aCBwb2ludHMgYXJlIGluIHRoZSBlcmFzZSBhcmVhLCB0aGUgZmlyc3QgcG9pbnQgZG9lcyBub3QgY29udHJpYnV0ZSB0byBhIG5ldyBwYXRoIGFuZCBjYW4gYmUgaWdub3JlZFxyXG4gICAgICAgICAgICBpZiAocDBfd2l0aGluQ2lyY2xlICYmIHAxX3dpdGhpbkNpcmNsZSkge1xyXG4gICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgbGFzdCA9IGk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIElmIHAwIGlzIGluIHRoZSBlcmFzZSBhcmVhIGFuZCBwMSBpcyBub3QsIHRoZSBmaXJzdCBwb2ludCBjYW4gYmUgcmVwbGFjZWQgYnkgdGhlIHBvaW50IG9mIGludGVyc2VjdGlvblxyXG4gICAgICAgICAgICAvLyAgIGJldHdlZW4gdGhlIHNlZ21lbnQgcDAtPnAxIGFuZCB0aGUgYm9yZGVyIG9mIHRoZSBlcmFzZSBhcmVhLiBFcmFzaW5nIGNhbiBjb250aW51ZSBmcm9tIHRoZXJlIGFzIGlmIHRoZSBpbnRlcnNlY3Rpb24gXHJcbiAgICAgICAgICAgIC8vICAgd2FzIHRoZSBmaXJzdCBwb2ludCBpbiB0aGUgcGF0aC5cclxuICAgICAgICAgICAgZWxzZSBpZiAocDBfd2l0aGluQ2lyY2xlICYmICFwMV93aXRoaW5DaXJjbGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciB4ID0gZ2V0Q2lyY2xlSW50ZXJzZWN0aW9uKHAwWzBdLCBwMFsxXSwgcDFbMF0sIHAxWzFdLCBlWCwgZVksIGVyYXNlUmFkaXVzKTtcclxuICAgICAgICAgICAgICAgIGlmICh4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aFtpXSA9IHg7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdCA9IGk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIElmIHAwIGlzIG91dHNpZGUgdGhlIGVyYXNlIGFyZWEsIGFuZCBwMSBpcyBpbnNpZGUsIHRoZW4gYWxsIHBvaW50cyBiZWZvcmUgYW5kIGluY2x1ZGluZyBwMCBhbmQgdGhlIHBvaW50IG9mIGludGVyc2VjdGlvblxyXG4gICAgICAgICAgICAvLyAgIGNvbnRyaWJ1dGUgdG8gYSBuZXcgcGF0aC4gIFByb2Nlc3NpbmcgdGhlbiBjb250aW51ZXMgYXQgcDEuXHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCFwMF93aXRoaW5DaXJjbGUgJiYgcDFfd2l0aGluQ2lyY2xlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgeCA9IGdldENpcmNsZUludGVyc2VjdGlvbihwMVswXSwgcDFbMV0sIHAwWzBdLCBwMFsxXSwgZVgsIGVZLCBlcmFzZVJhZGl1cyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoeCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1BhdGggPSBwYXRoLnNsaWNlKGxhc3QsIGkgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdQYXRoLnB1c2goeCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3UGF0aHMucHVzaChuZXdQYXRoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgICAgIGxhc3QgPSBpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gTmVpdGhlciBwMCBvciBwMSBpcyBpbiB0aGUgZXJhc2UgYXJlYSwgc28gdGhlcmUgbWF5IG9yIG1heSBub3QgYmUgYSBwYWlyIG9mIGludGVyc2VjdGlvbnMuXHJcbiAgICAgICAgICAgICAgICB2YXIgcG9zc0ludGVyc2VjdHMgPSBnZXRDaXJjbGVJbnRlcnNlY3Rpb25zKHAwWzBdLCBwMFsxXSwgcDFbMF0sIHAxWzFdLCBlWCwgZVksIGVyYXNlUmFkaXVzKTtcclxuICAgICAgICAgICAgICAgIGlmIChwb3NzSW50ZXJzZWN0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIG5ldyBwYXRoIHRoYXQgZ29lcyBmcm9tIHRoZSBiZWdpbm5pbmcgb2Ygb3VyIGN1cnJlbnQgcGF0aFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIHRoZSBpbnRlcnNlY3Rpb24gcG9pbnRcclxuICAgICAgICAgICAgICAgICAgICBuZXdQYXRoID0gcGF0aC5zbGljZShsYXN0LCBpICsgMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgYWRkIHRoZSBpbnRlcnNlY3Rpb24gcG9pbnQgaWYgaXQgaXMgbm90IGlkZW50aWNhbCB0byB0aGUgbGFzdFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHBvaW50IGluIHRoZSBwYXRoXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1BhdGhbbmV3UGF0aC5sZW5ndGggLSAxXVswXSAhPT0gcG9zc0ludGVyc2VjdHNbMF1bMF0gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3UGF0aFtuZXdQYXRoLmxlbmd0aCAtIDFdWzFdICE9PSBwb3NzSW50ZXJzZWN0c1swXVsxXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdQYXRoLnB1c2gocG9zc0ludGVyc2VjdHNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2Ugb25seSB3YW50IHBhdGhzIHdpdGggbGVuZ3RoID4gMVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdQYXRoLmxlbmd0aCA+IDEpIG5ld1BhdGhzLnB1c2gobmV3UGF0aCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIHdpbGwgcHV0IHRoZSBzZWNvbmQgaW50ZXJzZWN0aW9uIHBvaW50IGludG8gdGhlIGN1cnJlbnQgcG9zaXRpb25cclxuICAgICAgICAgICAgICAgICAgICAvLyBvZiBvdXIgcGF0aCwgYnV0IG9ubHkgaWYgaXQgaXMgbm90IGlkZW50aWNhbCB0byB0aGUgbmV4dCBwb2ludCBpblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBwYXRoICh3ZSBkb24ndCBuZWVkIGR1cGxpY2F0ZSBwb2ludHMpXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aFtpXSA9IHBvc3NJbnRlcnNlY3RzWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXRoW2kgKyAxXSAmJiBwYXRoW2kgKyAxXVswXSA9PSBwb3NzSW50ZXJzZWN0c1sxXVswXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiBwYXRoW2kgKyAxXVsxXSA9PSBwb3NzSW50ZXJzZWN0c1sxXVsxXSkgaSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3QgPSBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRoZSByZW1haW5pbmcgcG9pbnRzIGFyZSBhc3NlbWJsZWQgaW50byBhIG5ldyBwYXRoXHJcbiAgICAgICAgaWYgKGxhc3QgIT09IGkpIHtcclxuICAgICAgICAgICAgbmV3UGF0aCA9IHBhdGguc2xpY2UobGFzdCwgcGF0aC5sZW5ndGgpO1xyXG4gICAgICAgICAgICBpZiAobmV3UGF0aCkge1xyXG4gICAgICAgICAgICAgICAgbmV3UGF0aHMucHVzaChuZXdQYXRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0gLy8gZW5kIHBvaW50RXJhc2VcclxuXHJcbiAgICAvLyBJZiB0aGUgZXJhc2VQYXRoIGhhcyBhIGxlbmd0aCBncmVhdGVyIHRoYW4gb25lLCB0aGVuIGVhY2ggc3VjY2Vzc2l2ZSBwYWlyIG9mIGNvb3JkaW5hdGUgcGFpcnMgY2FuIGJlIHVzZWQgdG8gZm9ybSBhIGNhcHN1bGUtXHJcbiAgICAvLyAgIHNoYXBlIGFsb25nIHdpdGggdGhlIGVyYXNlUmFkaXVzLiAgRWFjaCBjYXBzdWxlIGluIHRoZSBlcmFzZVBhdGggY2FuIGFjdCBpbmRlcGVuZGVudGx5IG9mIGVhY2ggb3RoZXIuXHJcbiAgICB2YXIgY2Fwc3VsZUVyYXNlID0gZnVuY3Rpb24gKHBhdGg6IGFueSwgaWk6IGFueSkge1xyXG4gICAgICAgIHZhciBlMCA9IGVyYXNlUGF0aFtpaV07XHJcbiAgICAgICAgdmFyIGUxID0gZXJhc2VQYXRoW2lpICsgMV07XHJcblxyXG4gICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICB2YXIgbGFzdCA9IDA7XHJcblxyXG4gICAgICAgIC8vIGhhbmRsZSBwb2ludCBwYXRoXHJcbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIHZhciBwMF9sb2NhdGlvbkluZGV4ID0gd2l0aGluQ2Fwc3VsZShwYXRoWzBdWzBdLCBwYXRoWzBdWzFdLCBlMFswXSwgZTBbMV0sIGUxWzBdLCBlMVsxXSwgZXJhc2VSYWRpdXMpO1xyXG4gICAgICAgICAgICBpZiAocDBfbG9jYXRpb25JbmRleC5pbmRleE9mKDEpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgbmV3UGF0aHMucHVzaChwYXRoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbmV3UGF0aDtcclxuICAgICAgICB3aGlsZSAoaSA8IChwYXRoLmxlbmd0aCAtIDEpKSB7XHJcbiAgICAgICAgICAgIHZhciBwMCA9IHBhdGhbaV07XHJcbiAgICAgICAgICAgIHZhciBwMSA9IHBhdGhbaSArIDFdO1xyXG4gICAgICAgICAgICB2YXIgcDBfbG9jYXRpb25JbmRleCA9IHdpdGhpbkNhcHN1bGUocDBbMF0sIHAwWzFdLCBlMFswXSwgZTBbMV0sIGUxWzBdLCBlMVsxXSwgZXJhc2VSYWRpdXMpO1xyXG4gICAgICAgICAgICB2YXIgcDFfbG9jYXRpb25JbmRleCA9IHdpdGhpbkNhcHN1bGUocDFbMF0sIHAxWzFdLCBlMFswXSwgZTBbMV0sIGUxWzBdLCBlMVsxXSwgZXJhc2VSYWRpdXMpO1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgYm90aCBwb2ludHMgYXJlIGluIHRoZSBlcmFzZSBhcmVhLCB0aGUgZmlyc3QgcG9pbnQgZG9lcyBub3QgY29udHJpYnV0ZSB0byBhIG5ldyBwYXRoIGFuZCBjYW4gYmUgaWdub3JlZFxyXG4gICAgICAgICAgICBpZiAocDBfbG9jYXRpb25JbmRleC5pbmRleE9mKDEpICE9PSAtMSAmJiBwMV9sb2NhdGlvbkluZGV4LmluZGV4T2YoMSkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICBsYXN0ID0gaTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSWYgcDAgaXMgaW4gdGhlIGVyYXNlIGFyZWEgYW5kIHAxIGlzIG5vdCwgdGhlIGZpcnN0IHBvaW50IGNhbiBiZSByZXBsYWNlZCBieSB0aGUgcG9pbnQgb2YgaW50ZXJzZWN0aW9uXHJcbiAgICAgICAgICAgIC8vICAgYmV0d2VlbiB0aGUgc2VnbWVudCBwMC0+cDEgYW5kIHRoZSBib3JkZXIgb2YgdGhlIGVyYXNlIGFyZWEuIEVyYXNpbmcgY2FuIGNvbnRpbnVlIGZyb20gdGhlcmUgYXMgaWYgdGhlIGludGVyc2VjdGlvbiBcclxuICAgICAgICAgICAgLy8gICB3YXMgdGhlIGZpcnN0IHBvaW50IGluIHRoZSBwYXRoLlxyXG4gICAgICAgICAgICBlbHNlIGlmIChwMF9sb2NhdGlvbkluZGV4LmluZGV4T2YoMSkgIT09IC0xICYmIHAxX2xvY2F0aW9uSW5kZXguaW5kZXhPZigxKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHZhciB4ID0gZ2V0Q2Fwc3VsZUludGVyc2VjdGlvbihwMFswXSwgcDBbMV0sIHAwX2xvY2F0aW9uSW5kZXgsIHAxWzBdLCBwMVsxXSwgZTBbMF0sIGUwWzFdLCBlMVswXSwgZTFbMV0sIGVyYXNlUmFkaXVzKTtcclxuICAgICAgICAgICAgICAgIGlmICh4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aFtpXSA9IHg7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdCA9IGk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIElmIHAwIGlzIG91dHNpZGUgdGhlIGVyYXNlIGFyZWEsIGFuZCBwMSBpcyBpbnNpZGUsIHRoZW4gYWxsIHBvaW50cyBiZWZvcmUgYW5kIGluY2x1ZGluZyBwMCBhbmQgdGhlIHBvaW50IG9mIGludGVyc2VjdGlvblxyXG4gICAgICAgICAgICAvLyAgIGNvbnRyaWJ1dGUgdG8gYSBuZXcgcGF0aC4gIFByb2Nlc3NpbmcgdGhlbiBjb250aW51ZXMgYXQgcDEuXHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHAwX2xvY2F0aW9uSW5kZXguaW5kZXhPZigxKSA9PT0gLTEgJiYgcDFfbG9jYXRpb25JbmRleC5pbmRleE9mKDEpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHggPSBnZXRDYXBzdWxlSW50ZXJzZWN0aW9uKHAxWzBdLCBwMVsxXSwgcDFfbG9jYXRpb25JbmRleCwgcDBbMF0sIHAwWzFdLCBlMFswXSwgZTBbMV0sIGUxWzBdLCBlMVsxXSwgZXJhc2VSYWRpdXMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHgpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdQYXRoID0gcGF0aC5zbGljZShsYXN0LCBpICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3UGF0aC5wdXNoKHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1BhdGhzLnB1c2gobmV3UGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3QgPSBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gTmVpdGhlciBwMCBvciBwMSBpcyBpbiB0aGUgZXJhc2UgYXJlYSwgc28gdGhlcmUgbWF5IG9yIG1heSBub3QgYmUgYSBwYWlyIG9mIGludGVyc2VjdGlvbnMuXHJcbiAgICAgICAgICAgICAgICB2YXIgcG9zc0ludGVyc2VjdHMgPSBnZXRDYXBzdWxlSW50ZXJzZWN0aW9ucyhwMFswXSwgcDBbMV0sIHAxWzBdLCBwMVsxXSwgZTBbMF0sIGUwWzFdLCBlMVswXSwgZTFbMV0sIGVyYXNlUmFkaXVzKTtcclxuICAgICAgICAgICAgICAgIGlmIChwb3NzSW50ZXJzZWN0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIG5ldyBwYXRoIHRoYXQgZ29lcyBmcm9tIHRoZSBiZWdpbm5pbmcgb2Ygb3VyIGN1cnJlbnQgcGF0aFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIHRoZSBpbnRlcnNlY3Rpb24gcG9pbnRcclxuICAgICAgICAgICAgICAgICAgICBuZXdQYXRoID0gcGF0aC5zbGljZShsYXN0LCBpICsgMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgYWRkIHRoZSBpbnRlcnNlY3Rpb24gcG9pbnQgaWYgaXQgaXMgbm90IGlkZW50aWNhbCB0byB0aGUgbGFzdFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHBvaW50IGluIHRoZSBwYXRoXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1BhdGhbbmV3UGF0aC5sZW5ndGggLSAxXVswXSAhPT0gcG9zc0ludGVyc2VjdHNbMF1bMF0gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3UGF0aFtuZXdQYXRoLmxlbmd0aCAtIDFdWzFdICE9PSBwb3NzSW50ZXJzZWN0c1swXVsxXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdQYXRoLnB1c2gocG9zc0ludGVyc2VjdHNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2Ugb25seSB3YW50IHBhdGhzIHdpdGggbGVuZ3RoID4gMVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdQYXRoLmxlbmd0aCA+IDEpIG5ld1BhdGhzLnB1c2gobmV3UGF0aCk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyB3ZSB3aWxsIHB1dCB0aGUgc2Vjb25kIGludGVyc2VjdGlvbiBwb2ludCBpbnRvIHRoZSBjdXJyZW50IHBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gb2Ygb3VyIHBhdGgsIGJ1dCBvbmx5IGlmIGl0IGlzIG5vdCBpZGVudGljYWwgdG8gdGhlIG5leHQgcG9pbnQgaW5cclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgcGF0aCAod2UgZG9uJ3QgbmVlZCBkdXBsaWNhdGUgcG9pbnRzKVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhbaV0gPSBwb3NzSW50ZXJzZWN0c1sxXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGF0aFtpICsgMV0gJiYgcGF0aFtpICsgMV1bMF0gPT0gcG9zc0ludGVyc2VjdHNbMV1bMF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgcGF0aFtpICsgMV1bMV0gPT0gcG9zc0ludGVyc2VjdHNbMV1bMV0pIGkrKztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdCA9IGk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYXNzZW1ibGUgdGhlIHJlbWFpbmluZyBwb2ludHMgaW50byBhIG5ldyBwYXRoXHJcbiAgICAgICAgaWYgKGxhc3QgIT09IGkpIHtcclxuICAgICAgICAgICAgbmV3UGF0aCA9IHBhdGguc2xpY2UobGFzdCwgcGF0aC5sZW5ndGgpO1xyXG4gICAgICAgICAgICBpZiAobmV3UGF0aCkge1xyXG4gICAgICAgICAgICAgICAgbmV3UGF0aHMucHVzaChuZXdQYXRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0gLy8gZW5kIGNhcHN1bGVFcmFzZVxyXG5cclxuICAgIC8vIG1haW5cclxuICAgIC8qXHJcbiAgICBmb3IgKHZhciBjPTA7IGM8KHBhdGhzLmxlbmd0aCk7IGMrKykge1xyXG4gICAgICAgIG5ld1BhdGhzLnB1c2goY2xlYW5QYXRoKHBhdGhzW2NdKSk7XHJcbiAgICB9XHJcbiAgICBwYXRocyA9IG5ld1BhdGhzO1xyXG4gICAgKi9cclxuICAgIGVyYXNlUGF0aCA9IGNsZWFuUGF0aChlcmFzZVBhdGgpO1xyXG4gICAgaWYgKGVyYXNlUGF0aC5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICBmb3IgKHZhciBwID0gMDsgcCA8IHBhdGhzLmxlbmd0aDsgcCsrKSB7XHJcbiAgICAgICAgICAgIHBvaW50RXJhc2UocGF0aHNbcF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwYXRocyA9IG5ld1BhdGhzO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZm9yICh2YXIgZSA9IDA7IGUgPCAoZXJhc2VQYXRoLmxlbmd0aCAtIDEpOyBlKyspIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCAocGF0aHMubGVuZ3RoKTsgcCsrKSB7XHJcbiAgICAgICAgICAgICAgICBjYXBzdWxlRXJhc2UocGF0aHNbcF0sIGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHBhdGhzID0gbmV3UGF0aHM7XHJcbiAgICAgICAgICAgIG5ld1BhdGhzID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgfSAvLyBlbmQgbWFpblxyXG5cclxuICAgIC8vIHJvdW5kIGFsbCBjb29yZGluYXRlc1xyXG4gICAgZm9yICh2YXIgciA9IDA7IHIgPCAocGF0aHMubGVuZ3RoKTsgcisrKSB7XHJcbiAgICAgICAgZm9yICh2YXIgcnIgPSAwOyByciA8IHBhdGhzW3JdLmxlbmd0aDsgcnIrKykge1xyXG4gICAgICAgICAgICBwYXRoc1tyXVtycl1bMF0gPSBNYXRoLnJvdW5kKHBhdGhzW3JdW3JyXVswXSk7XHJcbiAgICAgICAgICAgIHBhdGhzW3JdW3JyXVsxXSA9IE1hdGgucm91bmQocGF0aHNbcl1bcnJdWzFdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgICogVG8gZ2V0IHRlc3QgY2FzZTogdW5jb21tZW50IHRoaXMgYmxvY2sgYW5kIHRoZSBibG9jayBhdCB0aGUgdG9wIG9mIGVyYXNlKCkuXHJcbiAgICAqXHJcbiAgICBjb25zb2xlLmxvZyggXCJlcmFzZSBwYXRoIChjbGVhbmVkKTpcIiApO1xyXG4gICAgbG9nUGF0aCggZXJhc2VQYXRoLCAxICk7XHJcbiAgICBjb25zb2xlLmxvZyggXCJwYXRoczpcIiApO1xyXG4gICAgbG9nUGF0aHMoIHBhdGhzICk7XHJcbiAgICAqL1xyXG4gICAgLy92YXIgdGltZTIgPSBkYXRlLmdldE1pbGxpc2Vjb25kcygpO1xyXG4gICAgLy92YXIgZGVsdGFUID0gdGltZTIgLSB0aW1lMTtcclxuICAgIC8vY29uc29sZS5sb2coZGVsdGFUKTtcclxuXHJcbiAgICByZXR1cm4gcGF0aHM7XHJcbn1cclxuXHJcbi8qXHJcbiogIFRha2VzIGEgcGF0aC5cclxuKiAgY2xlYW5QYXRoIHdpbGwgcmVtb3ZlIGFsbCBzZXF1ZW50aWFsLCBkdXBsaWNhdGUgY29vcmRpbmF0ZS1wYWlycyBmcm9tIHRoZSBwYXRoLlxyXG4qICBSZXR1cm5zIGEgcGF0aC5cclxuKi9cclxuZnVuY3Rpb24gY2xlYW5QYXRoKHBhdGg6IGFueSkge1xyXG4gICAgdmFyIGNsZWFuZWQgPSBbXTtcclxuICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgIGNsZWFuZWQgPSBwYXRoO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFyIHBDbGVhbiA9IDA7XHJcbiAgICAgICAgd2hpbGUgKHBDbGVhbiA8IChwYXRoLmxlbmd0aCAtIDEpKSB7XHJcbiAgICAgICAgICAgIGlmIChwYXRoW3BDbGVhbl1bMF0gIT09IHBhdGhbcENsZWFuICsgMV1bMF0gfHwgcGF0aFtwQ2xlYW5dWzFdICE9PSBwYXRoW3BDbGVhbiArIDFdWzFdKSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhbmVkLnB1c2gocGF0aFtwQ2xlYW5dKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwQ2xlYW4rKztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoICE9PSAwICYmIGNsZWFuZWQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGNsZWFuZWQucHVzaChwYXRoWzBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhdGhbcGF0aC5sZW5ndGggLSAxXVswXSAhPT0gcGF0aFtjbGVhbmVkLmxlbmd0aCAtIDFdWzBdIHx8IHBhdGhbcGF0aC5sZW5ndGggLSAxXVsxXSAhPT0gcGF0aFtjbGVhbmVkLmxlbmd0aCAtIDFdWzFdKSB7XHJcbiAgICAgICAgICAgIGNsZWFuZWQucHVzaChwYXRoW3BDbGVhbl0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjbGVhbmVkO1xyXG59XHJcblxyXG4vKlxyXG4qICBUYWtlcyB0aGUgeCBhbmQgeSBjb29yZGluYXRlcyBvZiB0d28gcG9pbnRzLiAgXHJcbiogIFRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRob3NlIHR3byBwb2ludHMgaXMgY2FsY3VsYXRlZC5cclxuKiAgUmV0dXJucyBhIGZsb2F0aW5nLXBvaW50IG51bWJlci5cclxuKi9cclxuZnVuY3Rpb24gZ2V0RGlzdGFuY2UoYVg6IG51bWJlciwgYVk6IG51bWJlciwgYlg6IG51bWJlciwgYlk6IG51bWJlcikge1xyXG4gICAgcmV0dXJuIChNYXRoLnNxcnQoTWF0aC5wb3coKGJYIC0gYVgpLCAyKSArIE1hdGgucG93KChiWSAtIGFZKSwgMikpKTtcclxufVxyXG5cclxuLypcclxuKiBUYWtlcyB4LCB5OiB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIHBvaW50IHRvIGJlIHRlc3RlZFxyXG4qIFRha2VzIGNYLCBjWTogdGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBjZW50ZXIgb2YgdGhlIGNpcmNsZVxyXG4qIFRha2VzIHI6IHRoZSByYWRpdXMgb2YgdGhlIGNpcmNsZSBsb2NhdGVkIGF0IChjWCwgY1kpXHJcbiogUmV0dXJucyAwIG9yIDE6IDAgaWYgdGhlIHBvaW50IGlzIG91dHNpZGUgdGhlIGNpcmNsZSwgMSBpZiB3aXRoaW5cclxuKi9cclxuZnVuY3Rpb24gd2l0aGluQ2lyY2xlKHg6IG51bWJlciwgeTogbnVtYmVyLCBjWDogbnVtYmVyLCBjWTogbnVtYmVyLCByOiBudW1iZXIpIHtcclxuICAgIHZhciBkaXN0ID0gZ2V0RGlzdGFuY2UoeCwgeSwgY1gsIGNZKTtcclxuICAgIGlmIChkaXN0IDwgcikgcmV0dXJuIDE7XHJcbiAgICBlbHNlIHJldHVybiAwO1xyXG59XHJcblxyXG4vKlxyXG4qIFRha2VzIHBYLCBwWTogdGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBwb2ludCB0byBiZSB0ZXN0ZWRcclxuKiBUYWtlcyBhWCwgYVksIGJYLCBiWTogdGhlIGNvbXBvbmVudHMgb2YgdGhlIHBvaW50cyB0aGF0IGRlZmluZSB0aGUgbGluZSBzZWdtZW50IEFCXHJcbiogVGFrZXMgcjogdGhlIFwiZXJhc2VSYWRpdXMuXCIgVGhpcyB3aWxsIGJlIGhhbGYgdGhlIHdpZHRoIG9mIHRoZSBib3hcclxuKiBSZXR1cm5zIDAgb3IgMTogMCBpZiB0aGUgcG9pbnQgaXMgb3V0c2lkZSB0aGUgYm94LCAxIGlmIHdpdGhpblxyXG4qIEV4YW1wbGU6ICgxLCAxLCAtNSwgMCwgNSwgMCwgNSkgPT4gMVxyXG4qL1xyXG5mdW5jdGlvbiB3aXRoaW5Cb3gocFg6IG51bWJlciwgcFk6IG51bWJlciwgYVg6IG51bWJlciwgYVk6IG51bWJlciwgYlg6IG51bWJlciwgYlk6IG51bWJlciwgcjogbnVtYmVyKSB7XHJcbiAgICAvLyB2ZWN0b3JzXHJcbiAgICB2YXIgdmVjX2FiID0gWyhiWCAtIGFYKSwgKGJZIC0gYVkpXTtcclxuICAgIHZhciB2ZWNfYXAgPSBbKHBYIC0gYVgpLCAocFkgLSBhWSldO1xyXG5cclxuICAgIC8vIHRvb2xzIGZvciBjYWxjdWxhdGluZyBwcm9qZWN0aW9uc1xyXG4gICAgdmFyIHZlY19uID0gWy12ZWNfYWJbMV0sIHZlY19hYlswXV07XHJcbiAgICB2YXIgbWFnX24gPSBNYXRoLnNxcnQoTWF0aC5wb3codmVjX25bMF0sIDIpICsgTWF0aC5wb3codmVjX25bMV0sIDIpKTtcclxuICAgIHZhciB1X3ZlY19uID0gW3ZlY19uWzBdIC8gbWFnX24sIHZlY19uWzFdIC8gbWFnX25dXHJcbiAgICB2YXIgbWFnX2FiID0gTWF0aC5zcXJ0KE1hdGgucG93KHZlY19hYlswXSwgMikgKyBNYXRoLnBvdyh2ZWNfYWJbMV0sIDIpKTtcclxuICAgIHZhciB1X3ZlY19hYiA9IFt2ZWNfYWJbMF0gLyBtYWdfYWIsIHZlY19hYlsxXSAvIG1hZ19hYl07XHJcblxyXG4gICAgLy8gdXNlIHByb2plY3Rpb25zIG9mIEFQIHRvIGRldGVybWluZSB3aGVyZSBQIGlzIGluIHJlbGF0aW9uIHRvIHRoZSBib3ggXHJcbiAgICB2YXIgYXBfcHJval9hYiA9IHZlY19hcFswXSAqIHVfdmVjX2FiWzBdICsgdmVjX2FwWzFdICogdV92ZWNfYWJbMV07XHJcbiAgICBpZiAoYXBfcHJval9hYiA8PSAwIHx8IGFwX3Byb2pfYWIgPj0gbWFnX2FiKSByZXR1cm4gMDtcclxuXHJcbiAgICB2YXIgYXBfcHJval9uID0gdmVjX2FwWzBdICogdV92ZWNfblswXSArIHZlY19hcFsxXSAqIHVfdmVjX25bMV07XHJcbiAgICBpZiAoYXBfcHJval9uID49IHIgfHwgYXBfcHJval9uIDw9IC1yKSByZXR1cm4gMDtcclxuXHJcbiAgICByZXR1cm4gMTtcclxufVxyXG5cclxuLypcclxuKiBUYWtlcyBwWCwgcFk6IHRoZSBwb2ludCBpbiBxdWVzdGlvblxyXG4qIFRha2VzIGFYLCBhWSwgYlgsIGJZOiB0aGUgY29tcG9uZW50cyBvZiB0aGUgcG9pbnRzIHRoYXQgZGVmaW5lIHRoZSBsaW5lIHNlZ21lbnQgQUJcclxuKiBUYWtlcyByOiB0aGUgXCJlcmFzZVJhZGl1cy5cIiAgXHJcbiogQSBjYXBzdWxlIGlzIGEgc2hhcGUgdGhhdCBjYW4gYmUgZGVzY3JpYmVkIGFzIHR3byBsaW5lIHNlZ21lbnRzIHRoYXQgcnVuIHBhcmFsbGVsIHRvIHRoZSBsaW5lIHNlZ21lbnQgQUIgYXQgZGlzdGFuY2UgZXJhc2VSYWRpdXMsXHJcbiogICB3aXRoIGEgY2lyY2xlIGNlbnRlcmVkIG9uIGVhY2ggcG9pbnQgQSBhbmQgQiBoYXZpbmcgcmFkaXVzIGVyYXNlUmFkaXVzLlxyXG4qIFxyXG4qIFJldHVybnMgYW4gYXJyYXkgb2YgbGVuZ3RoIDMuICBUaGlzIGFycmF5IHNwZWNpZmllcyB3aGVyZSBpbiB0aGUgY2Fwc3VsZSB0aGUgcG9pbnQgbWF5IG9yIG1heSBub3QgYmUgbG9jYXRlZC5cclxuKiAxIGlmIGl0IGlzIHdpdGhpbiB0aGF0IGFyZWEsIDAgaWYgbm90LlxyXG4qIGFyclswXSA9PiB3aXRoaW4gdGhlIGNpcmNsZSBzdXJyb3VuZGluZyBwb2ludCBhP1xyXG4qIGFyclsxXSA9PiB3aXRoaW4gdGhlIGNpcmNsZSBzdXJyb3VuZGluZyBwb2ludCBiP1xyXG4qIGFyclsyXSA9PiB3aXRoaW4gdGhlIGJveCwgZGVmaW5lZCBieSB0aGUgbGluZSBzZWdtZW50cyBwYXJhbGxlbCB0byB0aGUgbGluZSBzZWdtZW50IEFCP1xyXG4qIDAsIDEsIG9yIDIgb2YgdGhlc2UgdmFsdWVzIGNhbiBiZSAxIHNpbXVsdGFuZW91c2x5LlxyXG4qIFRoaXMgYXJyYXkgaXMgcmVmZXJyZWQgdG8gYXMgdGhlIGxvY2F0aW9uIGluZGV4IGluIG90aGVyIHBhcnRzIG9mIHRoaXMgZG9jdW1lbnQuXHJcbiovXHJcbmZ1bmN0aW9uIHdpdGhpbkNhcHN1bGUocFg6IG51bWJlciwgcFk6IG51bWJlciwgYVg6IG51bWJlciwgYVk6IG51bWJlciwgYlg6IG51bWJlciwgYlk6IG51bWJlciwgcjogbnVtYmVyKSB7XHJcbiAgICB2YXIgbG9jYXRpb25JbmRleCA9IFtdO1xyXG4gICAgbG9jYXRpb25JbmRleC5wdXNoKHdpdGhpbkNpcmNsZShwWCwgcFksIGFYLCBhWSwgcikpO1xyXG4gICAgbG9jYXRpb25JbmRleC5wdXNoKHdpdGhpbkNpcmNsZShwWCwgcFksIGJYLCBiWSwgcikpO1xyXG4gICAgbG9jYXRpb25JbmRleC5wdXNoKHdpdGhpbkJveChwWCwgcFksIGFYLCBhWSwgYlgsIGJZLCByKSk7XHJcbiAgICByZXR1cm4gbG9jYXRpb25JbmRleDtcclxuXHJcbn1cclxuXHJcbi8qXHJcbiogVGFrZXMgYVgsIGFZLCBiWCwgYlk6IHRoZSBjb29yZGluYXRlcyBvZiBwb2ludHMgQSBhbmQgQiB0aGF0IGRlZmluZSBhIGxpbmUgc2VnbWVudCBBQlxyXG4qIFRha2VzIHI6IHRoZSBcImVyYXNlUmFkaXVzXCJcclxuKiBSZXR1cm5zIGFuIGFycmF5IG9mIGFycmF5czogdGhlIHBvaW50cyB0aGF0IGRlZmluZSBhIGJveCBhcm91bmQgdGhhdCBsaW5lIHNlZ21lbnQuICBcclxuKiBMZW5ndGg6IHRoZSBsZW5ndGggb2YgbGluZSBzZWdtZW50IEFCLCB3aWR0aDogMnIuXHJcbipcclxuKiBFeGFtcGxlIGJveDpcclxuXHRcclxuICAgIGJveFswXSAgICAgICAgICAgICAgICAgIGJveFszXVxyXG4gICAgLlx0X19fX19fX19fX19fX19fX19fX19fIC5cclxuICAgIHwgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICAgIHwgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICAgIEEgICAgICAgICAgICAgICAgICAgICAgIEJcclxuICAgIHwgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICAgIHwgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICAgIC4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS5cclxuICAgIGJveFsxXSAgICAgICAgICAgICAgICAgIGJveFsyXVxyXG4gICAgIFxyXG4gICAgIGRpc3RhbmNlIGZyb20gYm94WzBdIHRvIGJveFsxXSA9IGRpc3RhbmNlIGZyb20gYm94WzJdIHRvIGJveFszXSA9IDIqclxyXG4gICAgIFxyXG4qL1xyXG5mdW5jdGlvbiBnZXRQYXJhbGxlbFNlZ21lbnRzKGFYOiBudW1iZXIsIGFZOiBudW1iZXIsIGJYOiBudW1iZXIsIGJZOiBudW1iZXIsIHI6IG51bWJlcikge1xyXG4gICAgdmFyIHZlY192ID0gWyhiWCAtIGFYKSwgKGJZIC0gYVkpXTtcclxuICAgIHZhciB2ZWNfbiA9IFstdmVjX3ZbMV0sIHZlY192WzBdXTtcclxuICAgIHZhciBtYWdfbiA9IE1hdGguc3FydChNYXRoLnBvdyh2ZWNfblswXSwgMikgKyBNYXRoLnBvdyh2ZWNfblsxXSwgMikpO1xyXG4gICAgdmFyIHVfdmVjX24gPSBbdmVjX25bMF0gLyBtYWdfbiwgdmVjX25bMV0gLyBtYWdfbl07XHJcblxyXG4gICAgdmFyIGIwID0gWyhhWCArIHIgKiB1X3ZlY19uWzBdKSwgKGFZICsgciAqIHVfdmVjX25bMV0pXTtcclxuICAgIHZhciBiMSA9IFsoYVggLSByICogdV92ZWNfblswXSksIChhWSAtIHIgKiB1X3ZlY19uWzFdKV07XHJcbiAgICB2YXIgYjIgPSBbKGJYIC0gciAqIHVfdmVjX25bMF0pLCAoYlkgLSByICogdV92ZWNfblsxXSldO1xyXG4gICAgdmFyIGIzID0gWyhiWCArIHIgKiB1X3ZlY19uWzBdKSwgKGJZICsgciAqIHVfdmVjX25bMV0pXTtcclxuXHJcbiAgICByZXR1cm4gW2IwLCBiMSwgYjIsIGIzXTtcclxufVxyXG5cclxuLypcclxuKiBVc2UgdGhpcyBmdW5jdGlvbiB3aGVuIGl0IGlzIGtub3duIHRoYXQgb25lIHBvaW50IGlzIGluc2lkZSB0aGUgY2lyY2xlIGFuZCB0aGUgb3RoZXIgaXMgb3V0LlxyXG4qIFRha2VzIGFYLCBhWTogdGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBwb2ludCBpbnNpZGUgdGhlIGNpcmNsZVxyXG4qIFRha2VzIGJYLCBiWTogdGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBwb2ludCBvdXRzaWRlIHRoZSBjaXJjbGVcclxuKiBUYWtlcyBjWCwgY1k6IHRoZSBjZW50ZXIgcG9pbnQgY29vcmRpbmF0ZXMgb2YgdGhlIGNpcmNsZVxyXG4qIFRha2VzIHI6IHRoZSByYWRpdXMgb2YgdGhlIGNpcmNsZVxyXG4qIFJldHVybnMgYW4gYXJyYXk6IHRoZSB4IGFuZCB5IGNvb3JkaW5hdGVzIG9mIHRoZSBpbnRlcnNlY3Rpb24gYmV0d2VlbiB0aGUgbGluZSBzZWdtZW50IEFCIGFuZCB0aGUgY2lyY2xlLlxyXG4qL1xyXG5mdW5jdGlvbiBnZXRDaXJjbGVJbnRlcnNlY3Rpb24oYVg6IG51bWJlciwgYVk6IG51bWJlciwgYlg6IG51bWJlciwgYlk6IG51bWJlciwgY1g6IG51bWJlciwgY1k6IG51bWJlciwgcjogbnVtYmVyKSB7XHJcbiAgICB2YXIgdmVjX2FjID0gWyhjWCAtIGFYKSwgKGNZIC0gYVkpXTtcclxuICAgIHZhciB2ZWNfYWIgPSBbKGJYIC0gYVgpLCAoYlkgLSBhWSldO1xyXG5cclxuICAgIHZhciBtYWdfYWIgPSBNYXRoLnNxcnQoTWF0aC5wb3codmVjX2FiWzBdLCAyKSArIE1hdGgucG93KHZlY19hYlsxXSwgMikpO1xyXG4gICAgdmFyIHVfdmVjX2FiID0gWyh2ZWNfYWJbMF0gLyBtYWdfYWIpLCAodmVjX2FiWzFdIC8gbWFnX2FiKV07XHJcbiAgICB2YXIgYWNfcHJval9hYiA9IHZlY19hY1swXSAqIHVfdmVjX2FiWzBdICsgdmVjX2FjWzFdICogdV92ZWNfYWJbMV07XHJcblxyXG4gICAgLy8gcmlnaHRQb2ludCBpcyB0aGUgcG9pbnQgb24gdGhlIGxpbmUgc2VnbWVudCBBQiBjbG9zZXN0IHRvIENcclxuICAgIHZhciByaWdodFBvaW50ID0gWyhhWCArIGFjX3Byb2pfYWIgKiB1X3ZlY19hYlswXSksIChhWSArIGFjX3Byb2pfYWIgKiB1X3ZlY19hYlsxXSldO1xyXG4gICAgdmFyIGRpc3RDVG9SaWdodFBvaW50ID0gTWF0aC5zcXJ0KE1hdGgucG93KChjWCAtIHJpZ2h0UG9pbnRbMF0pLCAyKSArIE1hdGgucG93KChjWSAtIHJpZ2h0UG9pbnRbMV0pLCAyKSk7XHJcbiAgICB2YXIgYjtcclxuICAgIGlmIChkaXN0Q1RvUmlnaHRQb2ludCA9PT0gMCkge1xyXG4gICAgICAgIGIgPSByO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgYiA9IE1hdGguc3FydChNYXRoLnBvdyhyLCAyKSAtIE1hdGgucG93KGRpc3RDVG9SaWdodFBvaW50LCAyKSk7XHJcbiAgICB9XHJcbiAgICB2YXIgaW50ZXJzZWN0aW9uID0gWyhhWCArIGFjX3Byb2pfYWIgKiB1X3ZlY19hYlswXSArIGIgKiB1X3ZlY19hYlswXSksIChhWSArIGFjX3Byb2pfYWIgKiB1X3ZlY19hYlsxXSArIGIgKiB1X3ZlY19hYlsxXSldO1xyXG4gICAgaWYgKGludGVyc2VjdGlvblswXSA9PT0gYVggJiYgaW50ZXJzZWN0aW9uWzFdID09PSBhWSkgcmV0dXJuIG51bGw7XHJcbiAgICByZXR1cm4gaW50ZXJzZWN0aW9uO1xyXG59XHJcblxyXG4vKlxyXG4qIFVzZSB0aGlzIGZ1bmN0aW9uIHdoZW4gaXQgaXMga25vd24gdGhhdCBib3RoIHBvaW50cyBBIGFuZCBCIGFyZSBvdXRzaWRlIHRoZSBjaXJjbGUuXHJcbiogVGFrZXMgYVgsIGFZLCBiWCwgYlk6IHRoZSBjb29yZGluYXRlcyBvZiB0aGUgdHdvIHBvaW50cyBvdXRzaWRlIHRoZSBjaXJjbGUsIGRlZmluaW5nIGxpbmUgc2VnbWVudCBBQi5cclxuKiBUYWtlcyBjWCwgY1k6IHRoZSBjb29yZGluYXRlcyBvZiB0aGUgY2VudGVyIG9mIHRoZSBjaXJjbGUuXHJcbiogVGFrZXMgcjogdGhlIHJhZGl1cyBvZiB0aGUgY2lyY2xlLlxyXG4qIFJldHVybnMgZWl0aGVyIGFuZCBhcnJheSBvZiB0d28gYXJyYXlzIG9yIG51bGw6XHJcbiogICBBbiBhcnJheSBpZiB0aGUgbGluZSBzZWdtZW50IEFCIGRvZXMgaW50ZXJzZWN0IHRoZSBjaXJjbGUgYXQgdHdvIHBvaW50cyAoc2luZ2xlIGludGVyc2VjdGlvbnMgYXJlIG5vdCBhbGxvd2VkKS5cclxuKiAgIE51bGwgaWYgdGhlcmUgd2VyZSBubyBpbnRlcnNlY3Rpb25zLlxyXG4qL1xyXG5mdW5jdGlvbiBnZXRDaXJjbGVJbnRlcnNlY3Rpb25zKGFYOiBudW1iZXIsIGFZOiBudW1iZXIsIGJYOiBudW1iZXIsIGJZOiBudW1iZXIsIGNYOiBudW1iZXIsIGNZOiBudW1iZXIsIHI6IG51bWJlcikge1xyXG4gICAgdmFyIHZlY19hYyA9IFsoY1ggLSBhWCksIChjWSAtIGFZKV07XHJcbiAgICB2YXIgdmVjX2FiID0gWyhiWCAtIGFYKSwgKGJZIC0gYVkpXTtcclxuXHJcbiAgICB2YXIgdmVjX24gPSBbLXZlY19hYlsxXSwgdmVjX2FiWzBdXTtcclxuICAgIHZhciBtYWdfbiA9IE1hdGguc3FydChNYXRoLnBvdyh2ZWNfblswXSwgMikgKyBNYXRoLnBvdyh2ZWNfblsxXSwgMikpO1xyXG4gICAgdmFyIHVfdmVjX24gPSBbdmVjX25bMF0gLyBtYWdfbiwgdmVjX25bMV0gLyBtYWdfbl07XHJcblxyXG4gICAgLy8gbWFnX2QgaXMgdGhlIHNob3J0ZXN0IGRpc3RhbmNlIGZyb20gQyB0byB0aGUgbGluZSB0aHJvdWdoIEFCXHJcbiAgICB2YXIgbWFnX2QgPSB2ZWNfYWNbMF0gKiB1X3ZlY19uWzBdICsgdmVjX2FjWzFdICogdV92ZWNfblsxXTtcclxuXHJcbiAgICAvLyBhbHRob3VnaCBtYWdfZCBtYXkgYmUgbGVzcyB0aGFuIHIsIHRoaXMgZG9lcyBub3QgZXhjbHVzaXZlbHkgZ3VhcmFudGVlIHRoYXQgdGhlIGxpbmUgc2VnbWVudCBpbnRlcnNlY3RzIFxyXG4gICAgdmFyIGNsb3Nlc3QgPSBnZXRDbG9zZXN0UG9pbnRPblNlZ21lbnQoW2FYLCBhWV0sIFtiWCwgYlldLCBbY1gsIGNZXSk7XHJcbiAgICB2YXIgZGlzdCA9IGdldExlbmd0aChbY2xvc2VzdFswXSAtIGNYLCBjbG9zZXN0WzFdIC0gY1ldKTtcclxuICAgIGlmIChkaXN0ID49IHIpIHJldHVybiBudWxsO1xyXG5cclxuICAgIC8vIHggaXMgdGhlIGRpc3RhbmNlIGZyb20gdGhlIGNpcmN1bWZlcmVuY2Ugb2YgdGhlIGNpcmNsZSB0byB0aGUgcG9pbnQgb24gdGhlIGxpbmUgc2VnbWVudCBBQiBjbG9zZXN0IHRvIENcclxuICAgIC8vIGQgaXMgdGhhdCBjbG9zZXN0IHBvaW50XHJcbiAgICB2YXIgeCA9IE1hdGguc3FydChNYXRoLnBvdyhyLCAyKSAtIE1hdGgucG93KG1hZ19kLCAyKSk7XHJcbiAgICB2YXIgdmVjX2NkID0gWyhjWCAtIG1hZ19kICogdV92ZWNfblswXSksIChjWSAtIG1hZ19kICogdV92ZWNfblsxXSldO1xyXG5cclxuICAgIHZhciBtYWdfYWIgPSBNYXRoLnNxcnQoTWF0aC5wb3codmVjX2FiWzBdLCAyKSArIE1hdGgucG93KHZlY19hYlsxXSwgMikpO1xyXG4gICAgdmFyIHVfdmVjX2FiID0gWyh2ZWNfYWJbMF0gLyBtYWdfYWIpLCAodmVjX2FiWzFdIC8gbWFnX2FiKV07XHJcblxyXG4gICAgdmFyIGludGVyc2VjdGlvbnMgPSBbWyh2ZWNfY2RbMF0gLSB1X3ZlY19hYlswXSAqIHgpLCAodmVjX2NkWzFdIC0gdV92ZWNfYWJbMV0gKiB4KV0sIFsodmVjX2NkWzBdICsgdV92ZWNfYWJbMF0gKiB4KSwgKHZlY19jZFsxXSArIHVfdmVjX2FiWzFdICogeCldXTtcclxuICAgIGlmIChpbnRlcnNlY3Rpb25zWzBdWzBdID09PSBhWCAmJiBpbnRlcnNlY3Rpb25zWzBdWzFdID09PSBhWSkgcmV0dXJuIG51bGw7XHJcbiAgICByZXR1cm4gaW50ZXJzZWN0aW9ucztcclxufVxyXG5cclxuLypcclxuKiBUYWtlcyB0aGUgcG9pbnRzIHRoYXQgcmVwcmVzZW50IHR3byBsaW5lIHNlZ21lbnRzOlxyXG4qIFx0QSBhbmQgQiBhcmUgbGluZSBzZWdtZW50IDEsIEMgYW5kIEQgYXJlIGxpbmUgc2VnbWVudCAyLlxyXG4qIFJldHVybnMgbnVsbCBpZiB0aGUgbGluZSBzZWdtZW50cyBkbyBub3QgaW50ZXJzZWN0LlxyXG4qIFJldHVybnMgdGhlIGNvb3JkaW5hdGUtcGFpciBvZiB0aGUgaW50ZXJzZWN0aW9uIGlmIGl0IGV4aXN0cy5cclxuKi9cclxuZnVuY3Rpb24gZ2V0TGluZUludGVyc2VjdGlvbihhWDogbnVtYmVyLCBhWTogbnVtYmVyLCBiWDogbnVtYmVyLCBiWTogbnVtYmVyLCBjWDogbnVtYmVyLCBjWTogbnVtYmVyLCBkWDogbnVtYmVyLCBkWTogbnVtYmVyKSB7XHJcbiAgICB2YXIgczFfeCwgczFfeSwgczJfeCwgczJfeTtcclxuICAgIHMxX3ggPSBiWCAtIGFYO1xyXG4gICAgczFfeSA9IGJZIC0gYVk7XHJcbiAgICBzMl94ID0gZFggLSBjWDtcclxuICAgIHMyX3kgPSBkWSAtIGNZO1xyXG5cclxuICAgIHZhciBzLCB0O1xyXG4gICAgaWYgKCgtczJfeCAqIHMxX3kgKyBzMV94ICogczJfeSkgPT09IDApIHJldHVybiBudWxsO1xyXG4gICAgcyA9ICgtczFfeSAqIChhWCAtIGNYKSArIHMxX3ggKiAoYVkgLSBjWSkpIC8gKC1zMl94ICogczFfeSArIHMxX3ggKiBzMl95KTtcclxuICAgIHQgPSAoczJfeCAqIChhWSAtIGNZKSAtIHMyX3kgKiAoYVggLSBjWCkpIC8gKC1zMl94ICogczFfeSArIHMxX3ggKiBzMl95KTtcclxuXHJcbiAgICBpZiAocyA+PSAwICYmIHMgPD0gMSAmJiB0ID49IDAgJiYgdCA8PSAxKSB7XHJcbiAgICAgICAgLy8gQ29sbGlzaW9uIGRldGVjdGVkXHJcbiAgICAgICAgdmFyIGludFggPSBhWCArICh0ICogczFfeCk7XHJcbiAgICAgICAgdmFyIGludFkgPSBhWSArICh0ICogczFfeSk7XHJcbiAgICAgICAgcmV0dXJuIFtpbnRYLCBpbnRZXTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsOyAvLyBObyBjb2xsaXNpb25cclxufVxyXG5cclxuLypcclxuKiBVc2UgdGhpcyB3aGVuIHAwIGlzIGluIHRoZSBjYXBzdWxlIGFuZCBwMSBpc24ndC4gIFBhc3MgaW4gcDAncyBsb2NhdGlvbiBpbmRleC5cclxuKiBUYWtlcyBhWCwgYVksIGxvY2F0aW9uSW5kZXg6IHRoZSBjb29yZGluYXRlcyBvZiB0aGUgcG9pbnQgaW5zaWRlIHRoZSBjYXBzdWxlOyAgXHJcbiogICB0aGUgbG9jYXRpb24gaW5kZXggc3BlY2lmaWVzIGV4YWN0bHkgd2hlcmUgaXQgaXMuXHJcbiogVGFrZXMgYlgsIGJZOiB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIHBvaW50IG91dHNpZGUgdGhlIGNpcmNsZS5cclxuKiBUYWtlcyBjMF94LCBjMF95LCBjMV94LCBjMV95LCByOiB0aGUgcGFyYW1ldGVycyB0aGF0IGRlZmluZSB0aGUgY2Fwc3VsZTogdGhlIGxpbmUgc2VnbWVudCBmcm9tIGMwIHRvIGMxIGFuZCB0aGUgcmFkaXVzLlxyXG4qIFJldHVybnMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIHBvaW50IG9mIGludGVyc2VjdGlvbiBiZXR3ZWVuIHRoZSBsaW5lIHNlZ21lbnQgYmV0d2VlbiBBIGFuZCBCIGFuZCB0aGUgY2Fwc3VsZVxyXG4qL1xyXG5mdW5jdGlvbiBnZXRDYXBzdWxlSW50ZXJzZWN0aW9uKGFYOiBudW1iZXIsIGFZOiBudW1iZXIsIGxvY2F0aW9uSW5kZXg6IEFycmF5PG51bWJlcj4sIGJYOiBudW1iZXIsIGJZOiBudW1iZXIsIGMwX3g6IG51bWJlciwgYzBfeTogbnVtYmVyLCBjMV94OiBudW1iZXIsIGMxX3k6IG51bWJlciwgcjogbnVtYmVyKSB7XHJcbiAgICB2YXIgYm94ID0gZ2V0UGFyYWxsZWxTZWdtZW50cyhjMF94LCBjMF95LCBjMV94LCBjMV95LCByKTtcclxuICAgIHZhciBpbnRlcnNlY3Rpb25zID0gW10gYXMgYW55O1xyXG5cclxuICAgIGlmIChsb2NhdGlvbkluZGV4WzBdICYmICFsb2NhdGlvbkluZGV4WzFdKSB7XHJcbiAgICAgICAgaW50ZXJzZWN0aW9ucy5wdXNoKGdldENpcmNsZUludGVyc2VjdGlvbihhWCwgYVksIGJYLCBiWSwgYzBfeCwgYzBfeSwgcikpO1xyXG4gICAgICAgIGludGVyc2VjdGlvbnMucHVzaChnZXRMaW5lSW50ZXJzZWN0aW9uKGFYLCBhWSwgYlgsIGJZLCBib3hbMF1bMF0sIGJveFswXVsxXSwgYm94WzNdWzBdLCBib3hbM11bMV0pKTtcclxuICAgICAgICBpbnRlcnNlY3Rpb25zLnB1c2goZ2V0TGluZUludGVyc2VjdGlvbihhWCwgYVksIGJYLCBiWSwgYm94WzFdWzBdLCBib3hbMV1bMV0sIGJveFsyXVswXSwgYm94WzJdWzFdKSk7XHJcbiAgICAgICAgdmFyIGkgPSBnZXRDaXJjbGVJbnRlcnNlY3Rpb25zKGFYLCBhWSwgYlgsIGJZLCBjMV94LCBjMV95LCByKTtcclxuICAgICAgICBpZiAoaSkgaW50ZXJzZWN0aW9ucy5wdXNoKGlbMF0sIGlbMV0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIWxvY2F0aW9uSW5kZXhbMF0gJiYgbG9jYXRpb25JbmRleFsxXSkge1xyXG4gICAgICAgIGludGVyc2VjdGlvbnMucHVzaChnZXRDaXJjbGVJbnRlcnNlY3Rpb24oYVgsIGFZLCBiWCwgYlksIGMxX3gsIGMxX3ksIHIpKTtcclxuICAgICAgICBpbnRlcnNlY3Rpb25zLnB1c2goZ2V0TGluZUludGVyc2VjdGlvbihhWCwgYVksIGJYLCBiWSwgYm94WzBdWzBdLCBib3hbMF1bMV0sIGJveFszXVswXSwgYm94WzNdWzFdKSk7XHJcbiAgICAgICAgaW50ZXJzZWN0aW9ucy5wdXNoKGdldExpbmVJbnRlcnNlY3Rpb24oYVgsIGFZLCBiWCwgYlksIGJveFsxXVswXSwgYm94WzFdWzFdLCBib3hbMl1bMF0sIGJveFsyXVsxXSkpO1xyXG4gICAgICAgIHZhciBpID0gZ2V0Q2lyY2xlSW50ZXJzZWN0aW9ucyhhWCwgYVksIGJYLCBiWSwgYzBfeCwgYzBfeSwgcik7XHJcbiAgICAgICAgaWYgKGkpIGludGVyc2VjdGlvbnMucHVzaChpWzBdLCBpWzFdKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGxvY2F0aW9uSW5kZXhbMF0gJiYgbG9jYXRpb25JbmRleFsxXSkge1xyXG4gICAgICAgIGludGVyc2VjdGlvbnMucHVzaChnZXRDaXJjbGVJbnRlcnNlY3Rpb24oYVgsIGFZLCBiWCwgYlksIGMwX3gsIGMwX3ksIHIpKTtcclxuICAgICAgICBpbnRlcnNlY3Rpb25zLnB1c2goZ2V0TGluZUludGVyc2VjdGlvbihhWCwgYVksIGJYLCBiWSwgYm94WzBdWzBdLCBib3hbMF1bMV0sIGJveFszXVswXSwgYm94WzNdWzFdKSk7XHJcbiAgICAgICAgaW50ZXJzZWN0aW9ucy5wdXNoKGdldExpbmVJbnRlcnNlY3Rpb24oYVgsIGFZLCBiWCwgYlksIGJveFsxXVswXSwgYm94WzFdWzFdLCBib3hbMl1bMF0sIGJveFsyXVsxXSkpO1xyXG4gICAgICAgIGludGVyc2VjdGlvbnMucHVzaChnZXRDaXJjbGVJbnRlcnNlY3Rpb24oYVgsIGFZLCBiWCwgYlksIGMxX3gsIGMxX3ksIHIpKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZhciBpID0gZ2V0Q2lyY2xlSW50ZXJzZWN0aW9ucyhhWCwgYVksIGJYLCBiWSwgYzFfeCwgYzFfeSwgcik7XHJcbiAgICAgICAgdmFyIGogPSBnZXRDaXJjbGVJbnRlcnNlY3Rpb25zKGFYLCBhWSwgYlgsIGJZLCBjMF94LCBjMF95LCByKTtcclxuICAgICAgICBpZiAoaSkgaW50ZXJzZWN0aW9ucy5wdXNoKGlbMF0sIGlbMV0pO1xyXG4gICAgICAgIGlmIChqKSBpbnRlcnNlY3Rpb25zLnB1c2goalswXSwgalsxXSk7XHJcbiAgICAgICAgaW50ZXJzZWN0aW9ucy5wdXNoKGdldExpbmVJbnRlcnNlY3Rpb24oYVgsIGFZLCBiWCwgYlksIGJveFswXVswXSwgYm94WzBdWzFdLCBib3hbM11bMF0sIGJveFszXVsxXSkpO1xyXG4gICAgICAgIGludGVyc2VjdGlvbnMucHVzaChnZXRMaW5lSW50ZXJzZWN0aW9uKGFYLCBhWSwgYlgsIGJZLCBib3hbMV1bMF0sIGJveFsxXVsxXSwgYm94WzJdWzBdLCBib3hbMl1bMV0pKTtcclxuICAgIH1cclxuICAgIHZhciBpbnRlcnNlY3Rpb24gPSBbYVgsIGFZXSBhcyBhbnk7XHJcbiAgICBmb3IgKHZhciBuID0gMDsgbiA8IChpbnRlcnNlY3Rpb25zLmxlbmd0aCk7IG4rKykge1xyXG4gICAgICAgIGlmIChpbnRlcnNlY3Rpb25zW25dKSB7XHJcbiAgICAgICAgICAgIGlmIChnZXREaXN0YW5jZShpbnRlcnNlY3Rpb25zW25dWzBdLCBpbnRlcnNlY3Rpb25zW25dWzFdLCBiWCwgYlkpIDxcclxuICAgICAgICAgICAgICAgIGdldERpc3RhbmNlKGludGVyc2VjdGlvblswXSwgaW50ZXJzZWN0aW9uWzFdLCBiWCwgYlkpKSB7XHJcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb25zW25dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGludGVyc2VjdGlvblswXSA9PT0gYVggJiYgaW50ZXJzZWN0aW9uWzFdID09PSBhWSkgcmV0dXJuIG51bGw7XHJcbiAgICByZXR1cm4gaW50ZXJzZWN0aW9uO1xyXG59XHJcblxyXG4vKlxyXG4qIFVzZSB0aGlzIHdoZW4gbmVpdGhlciBvZiB0aGUgcG9pbnRzIGFyZSBpbiB0aGUgY2Fwc3VsZS5cclxuKlx0VGFrZXMgYVgsIGFZOiB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIHBvaW50IGluc2lkZSB0aGUgY2Fwc3VsZVxyXG4qIFRha2VzIGJYLCBiWTogdGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBwb2ludCBvdXRzaWRlIHRoZSBjaXJjbGVcclxuKiBUYWtlcyBjMF94LCBjMF95LCBjMV94LCBjMV95LCByOiB0aGUgcGFyYW1ldGVycyB0aGF0IGRlZmluZSB0aGUgY2Fwc3VsZTogdGhlIGxpbmUgc2VnbWVudCBmcm9tIGMwIHRvIGMxIGFuZCB0aGUgcmFkaXVzXHJcbiogUmV0dXJucyBhbiBhcnJheSBvZiB0d28gYXJyYXlzLFxyXG4qICAgY29udGFpbmluZyB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIHBvaW50cyBvZiBpbnRlcnNlY3Rpb24gYmV0d2VlbiB0aGUgbGluZSBzZWdtZW50IGJldHdlZW4gQSBhbmQgQiBhbmQgdGhlIGNhcHN1bGVcclxuKiBSZXR1cm5zIG51bGwgaWYgdGhlIGxpbmUgc2VnbWVudCBBQiBkb2VzIG5vdCBpbnRlcnNlY3Qgd2l0aCB0aGUgY2Fwc3VsZVxyXG4qL1xyXG5mdW5jdGlvbiBnZXRDYXBzdWxlSW50ZXJzZWN0aW9ucyhhWDogbnVtYmVyLCBhWTogbnVtYmVyLCBiWDogbnVtYmVyLCBiWTogbnVtYmVyLCBjMF94OiBudW1iZXIsIGMwX3k6IG51bWJlciwgYzFfeDogbnVtYmVyLCBjMV95OiBudW1iZXIsIHI6IG51bWJlcikge1xyXG4gICAgdmFyIGJveCA9IGdldFBhcmFsbGVsU2VnbWVudHMoYzBfeCwgYzBfeSwgYzFfeCwgYzFfeSwgcik7XHJcbiAgICB2YXIgaW50ZXJzZWN0aW9ucyA9IFtdIGFzIGFueTtcclxuXHJcbiAgICB2YXIgdG1wID0gZ2V0Q2lyY2xlSW50ZXJzZWN0aW9ucyhhWCwgYVksIGJYLCBiWSwgYzBfeCwgYzBfeSwgcik7XHJcbiAgICBpZiAodG1wKSBpbnRlcnNlY3Rpb25zLnB1c2godG1wWzBdLCB0bXBbMV0pO1xyXG4gICAgdG1wID0gZ2V0Q2lyY2xlSW50ZXJzZWN0aW9ucyhhWCwgYVksIGJYLCBiWSwgYzFfeCwgYzFfeSwgcik7XHJcbiAgICBpZiAodG1wKSBpbnRlcnNlY3Rpb25zLnB1c2godG1wWzBdLCB0bXBbMV0pO1xyXG4gICAgaW50ZXJzZWN0aW9ucy5wdXNoKGdldExpbmVJbnRlcnNlY3Rpb24oYVgsIGFZLCBiWCwgYlksIGJveFswXVswXSwgYm94WzBdWzFdLCBib3hbM11bMF0sIGJveFszXVsxXSkpO1xyXG4gICAgaW50ZXJzZWN0aW9ucy5wdXNoKGdldExpbmVJbnRlcnNlY3Rpb24oYVgsIGFZLCBiWCwgYlksIGJveFsxXVswXSwgYm94WzFdWzFdLCBib3hbMl1bMF0sIGJveFsyXVsxXSkpO1xyXG5cclxuICAgIC8vIHRoZSBmYXJ0aGVzdCBwb3NzaWJsZSBpbnRlcnNlY3Rpb24gdG8gZWFjaCBwb2ludCBBIG9yIEIgd291bGQgYmUgQiBhbmQgQSwgcmVzcGVjdGl2ZWx5XHJcbiAgICB2YXIgaW50ZXJzZWN0aW9uMCA9IFtiWCwgYlldO1xyXG4gICAgdmFyIGludGVyc2VjdGlvbjEgPSBbYVgsIGFZXTtcclxuXHJcbiAgICBmb3IgKHZhciBuID0gMDsgbiA8IChpbnRlcnNlY3Rpb25zLmxlbmd0aCk7IG4rKykge1xyXG4gICAgICAgIGlmIChpbnRlcnNlY3Rpb25zW25dKSB7XHJcbiAgICAgICAgICAgIGlmIChnZXREaXN0YW5jZShpbnRlcnNlY3Rpb25zW25dWzBdLCBpbnRlcnNlY3Rpb25zW25dWzFdLCBhWCwgYVkpIDxcclxuICAgICAgICAgICAgICAgIGdldERpc3RhbmNlKGludGVyc2VjdGlvbjBbMF0sIGludGVyc2VjdGlvbjBbMV0sIGFYLCBhWSkpIHtcclxuICAgICAgICAgICAgICAgIGludGVyc2VjdGlvbjAgPSBpbnRlcnNlY3Rpb25zW25dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgbSA9IDA7IG0gPCAoaW50ZXJzZWN0aW9ucy5sZW5ndGgpOyBtKyspIHtcclxuICAgICAgICBpZiAoaW50ZXJzZWN0aW9uc1ttXSkge1xyXG4gICAgICAgICAgICBpZiAoZ2V0RGlzdGFuY2UoaW50ZXJzZWN0aW9uc1ttXVswXSwgaW50ZXJzZWN0aW9uc1ttXVsxXSwgYlgsIGJZKSA8XHJcbiAgICAgICAgICAgICAgICBnZXREaXN0YW5jZShpbnRlcnNlY3Rpb24xWzBdLCBpbnRlcnNlY3Rpb24xWzFdLCBiWCwgYlkpKSB7XHJcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb24xID0gaW50ZXJzZWN0aW9uc1ttXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICgoaW50ZXJzZWN0aW9uMFswXSA9PT0gYlggJiYgaW50ZXJzZWN0aW9uMFsxXSA9PT0gYlkpIHx8XHJcbiAgICAgICAgKGludGVyc2VjdGlvbjFbMF0gPT09IGFYICYmIGludGVyc2VjdGlvbjFbMV0gPT09IGFZKSkgcmV0dXJuIG51bGw7XHJcbiAgICBlbHNlIHJldHVybiBbaW50ZXJzZWN0aW9uMCwgaW50ZXJzZWN0aW9uMV07XHJcbn1cclxuXHJcbi8qXHJcbiogVGFrZXMgYW4gYXJyYXkgb2YgY29vcmRpbmF0ZXMgUC5cclxuKiBSZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhhdCB2ZWN0b3IgKGRpc3RhbmNlIGZyb20gdGhlIG9yaWdpbiB0byBwb2ludCBQKS5cclxuKi9cclxudmFyIGdldExlbmd0aCA9IGZ1bmN0aW9uIChQOiBBcnJheTxudW1iZXI+KSB7XHJcbiAgICByZXR1cm4gTWF0aC5zcXJ0KFBbMF0gKiBQWzBdICsgUFsxXSAqIFBbMV0pO1xyXG59XHJcblxyXG52YXIgRVBTID0gMWUtNjtcclxuXHJcbi8qXHJcbiogVGFrZXMgdGhlIHBvaW50cyBBIGFuZCBCIChsZW5ndGggMiBhcnJheXMpOiB0aGUgcG9pbnRzIHRoYXQgZGVmaW5lIHRoZSBsaW5lIHNlZ21lbnQuXHJcbiogVGFrZXMgUDogdGhlIHBvaW50IGluIHF1ZXN0aW9uLlxyXG4qIFJldHVybnMgdGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIGxpbmUgc2VnbWVudCBBQiB0byBwb2ludCBQLlxyXG4qL1xyXG52YXIgZ2V0Q2xvc2VzdFBvaW50T25TZWdtZW50ID0gZnVuY3Rpb24gKEE6IEFycmF5PG51bWJlcj4sIEI6IEFycmF5PG51bWJlcj4sIFA6IEFycmF5PG51bWJlcj4pIHtcclxuICAgIHZhciBBQiA9IFtCWzBdIC0gQVswXSwgQlsxXSAtIEFbMV1dXHJcbiAgICAgICAgLCBsZW4gPSBnZXRMZW5ndGgoQUIpO1xyXG4gICAgaWYgKGxlbiA8IEVQUykgcmV0dXJuIEE7XHJcbiAgICB2YXIgUEEgPSBbUFswXSAtIEFbMF0sIFBbMV0gLSBBWzFdXTtcclxuICAgIHZhciBrID0gKEFCWzBdICogUEFbMF0gKyBBQlsxXSAqIFBBWzFdKSAvIGxlbjtcclxuICAgIGlmIChrIDwgMCkgcmV0dXJuIEE7XHJcbiAgICBpZiAoayA+IGxlbikgcmV0dXJuIEI7XHJcbiAgICByZXR1cm4gW0FbMF0gKyBBQlswXSAqIGsgLyBsZW4sIEFbMV0gKyBBQlsxXSAqIGsgLyBsZW5dO1xyXG59IiwiaW1wb3J0IHsgbGliX3JnYmEyaGV4IH0gZnJvbSBcIi4vcmdiYTJoZXhcIjtcclxuXHJcbi8qKlxyXG4gKiBDb25zdGFudHMuXHJcbiAqL1xyXG52YXIgQkFTRSA9IDE2O1xyXG52YXIgSEVYX1JFR0VYID0gL14jP1thLWZBLUYwLTldKyQvO1xyXG52YXIgSEVYX1NIT1JUSEFORF9MRU5HVEggPSAzO1xyXG52YXIgSEVYX0xFTkdUSCA9IDY7XHJcblxyXG4vKipcclxuICogQ29udmVydHMgaGV4YWRlY2ltYWwgdG8gUkdCQS5cclxuICpcclxuICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgaGV4ICAgICAtIFRoZSBoZXhhZGVjaW1hbC5cclxuICogQHBhcmFtICB7TnVtYmVyfFN0cmluZ30gW2FscGhhXSAtIFRoZSBhbHBoYSB0cmFuc3BhcmVuY3kuXHJcbiAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgICAgICAgICAgLSBUaGUgUkdCQS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBsaWJfaGV4MnJnYmEgPSAoaGV4OiBzdHJpbmcsIGFscGhhOiBudW1iZXIgfCBzdHJpbmcpID0+IHtcclxuXHJcbiAgICBoZXggPSBoZXggPz8gJyc7XHJcblxyXG4gICAgaWYgKGhleCA9PSAnbm9uZScpIHtcclxuICAgICAgICByZXR1cm4gJ25vbmUnO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChoZXggPT0gJ3RyYW5zcGFyZW50Jykge1xyXG4gICAgICAgIHJldHVybiAncmdiYSgwLDAsMCwwKSc7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGhleC5pbmNsdWRlcygncmdiYSgnKSkge1xyXG4gICAgICAgIHJldHVybiBoZXg7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGhleC5pbmNsdWRlcygncmdiKCcpKSB7XHJcbiAgICAgICAgaGV4ID0gbGliX3JnYmEyaGV4KGhleCk7XHJcbiAgICB9XHJcblxyXG4gICAgaGV4ID0gaGV4LnJlcGxhY2UoL1teMC05YS1mQS1GXS9nLCAnJyk7XHJcblxyXG4gICAgaWYgKCFoZXgpIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFIRVhfUkVHRVgudGVzdChoZXgpKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgaGV4MnJnYmEgLT4gJHtoZXh9OiBmaXJzdCBhcmd1bWVudCBoYXMgaW52YWxpZCBoZXhhZGVjaW1hbCBjaGFyYWN0ZXJzYCk7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHRyaW0gdW5uZWNlc3NhcnkgY2hhcmFjdGVyc1xyXG4gICAgaWYgKGhleFswXSA9PT0gJyMnKSB7XHJcbiAgICAgICAgaGV4ID0gaGV4LnNsaWNlKDEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGV4cGFuZCBzaG9ydGhhbmRcclxuICAgIGlmIChoZXgubGVuZ3RoID09PSBIRVhfU0hPUlRIQU5EX0xFTkdUSCkge1xyXG4gICAgICAgIGxldCBoZXhzID0gaGV4LnNwbGl0KCcnKTtcclxuICAgICAgICBoZXhzLnNwbGljZSgyLCAwLCBoZXhbMl0pO1xyXG4gICAgICAgIGhleHMuc3BsaWNlKDEsIDAsIGhleFsxXSk7XHJcbiAgICAgICAgaGV4cy5zcGxpY2UoMCwgMCwgaGV4WzBdKTtcclxuICAgICAgICBoZXggPSBoZXhzLmpvaW4oJycpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChoZXgubGVuZ3RoICE9PSBIRVhfTEVOR1RIKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignaGV4MnJnYmE6IGZpcnN0IGFyZ3VtZW50IGhhcyBpbnZhbGlkIGhleGFkZWNpbWFsIGxlbmd0aCcpO1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuXHJcbiAgICAvLyBjb252ZXJ0IGhleCB0byByZ2JcclxuICAgIHZhciB2YWx1ZXMgPSBbXHJcbiAgICAgICAgcGFyc2VJbnQoaGV4LnNsaWNlKDAsIDIpLCBCQVNFKSxcclxuICAgICAgICBwYXJzZUludChoZXguc2xpY2UoMiwgNCksIEJBU0UpLFxyXG4gICAgICAgIHBhcnNlSW50KGhleC5zbGljZSg0LCA2KSwgQkFTRSlcclxuICAgIF07XHJcblxyXG4gICAgYWxwaGEgPSB0eXBlb2YgYWxwaGEgPT09ICdudW1iZXInID8gYWxwaGEgOiBwYXJzZUZsb2F0KGFscGhhKTtcclxuICAgIGlmIChhbHBoYSA+PSAwICYmIGFscGhhIDw9IDEpIHtcclxuICAgICAgICB2YWx1ZXMucHVzaChhbHBoYSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhbHVlcy5wdXNoKDEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAncmdiYSgnICsgdmFsdWVzLmpvaW4oJywnKSArICcpJztcclxufTsiLCJpbXBvcnQgKiBhcyBsb2NhbEZvcmFnZSBmcm9tICdsb2NhbGZvcmFnZSc7XHJcblxyXG5sb2NhbEZvcmFnZS5jb25maWcoe1xyXG4gICAgZHJpdmVyOiBbXHJcbiAgICAgICAgbG9jYWxGb3JhZ2UuSU5ERVhFRERCLFxyXG4gICAgICAgIGxvY2FsRm9yYWdlLkxPQ0FMU1RPUkFHRSxcclxuICAgICAgICBsb2NhbEZvcmFnZS5XRUJTUUwsXHJcbiAgICBdLFxyXG4gICAgbmFtZTogJ19sb2NhbERhdGFEQicsICAgICAvLyBUaGVzZSBmaWVsZHNcclxuICAgIHZlcnNpb246IDEuMCwgICAgICAvLyBhcmUgdG90YWxseSBvcHRpb25hbFxyXG59KTtcclxuLy8gY29uc3Qgc3RvcmUgPSBuZXcgU3RvcmFnZSh7XHJcbi8vICAgICBuYW1lOiAnX2xvY2FsRGF0YURCJyxcclxuLy8gICAgIGRyaXZlck9yZGVyOiBbRHJpdmVycy5JbmRleGVkREIsIERyaXZlcnMuTG9jYWxTdG9yYWdlXVxyXG4vLyB9KTtcclxuXHJcbmNvbnN0IHN0b3JlID0ge1xyXG4gICAgY3JlYXRlOiBhc3luYyAoKSA9PiB7IHJldHVybiBsb2NhbEZvcmFnZTsgfSxcclxuICAgIGdldDogYXN5bmMgKGtleTogc3RyaW5nKSA9PiB7IHJldHVybiBsb2NhbEZvcmFnZS5nZXRJdGVtKGtleSkgfSxcclxuICAgIHNldDogYXN5bmMgKGtleTogc3RyaW5nLCBkYXRhOiBhbnkpID0+IHsgcmV0dXJuIGxvY2FsRm9yYWdlLnNldEl0ZW0oa2V5LCBkYXRhKSB9XHJcbn07XHJcblxyXG5leHBvcnQge1xyXG4gICAgTG9jYWxTdG9yYWdlX0dldERhdGEsIExvY2FsU3RvcmFnZV9TZXREYXRhLFxyXG4gICAgTG9jYWxTdG9yYWdlX0dldENvbmZpZywgTG9jYWxTdG9yYWdlX1NldENvbmZpZyxcclxuICAgIExvY2FsU3RvcmFnZV9HZXRDbGlwYm9hcmQsIExvY2FsU3RvcmFnZV9TZXRDbGlwYm9hcmRcclxufVxyXG5cclxuY29uc3QgTG9jYWxTdG9yYWdlX0dldERhdGEgPSBhc3luYyAob3B0aW9uczogYW55KSA9PiB7XHJcbiAgICBhd2FpdCBzdG9yZS5jcmVhdGUoKTtcclxuXHJcbiAgICB2YXIgZGF0YUNvbnRleHQgPSAoYXdhaXQgc3RvcmUuZ2V0KCdpY2R0LWRhdGEnKSB8fCBbXSk7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmNhbGxiYWNrID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBvcHRpb25zLmNhbGxiYWNrKGRhdGFDb250ZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyB0cnkge1xyXG4gICAgLy8gICAgIHZhciBkYXRhQ29udGV4dCA9IChhd2FpdCBzdG9yZS5nZXQoJ2ljZHQtZGF0YScpIHx8IFtdKTtcclxuXHJcbiAgICAvLyAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNhbGxiYWNrID09ICdmdW5jdGlvbicpIHtcclxuICAgIC8vICAgICAgICAgb3B0aW9ucy5jYWxsYmFjayhkYXRhQ29udGV4dCk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG4gICAgLy8gY2F0Y2ggKGVycikge1xyXG4gICAgLy8gICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5jYWxsYmFjayA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAvLyAgICAgICAgb3B0aW9ucy5jYWxsYmFjayhudWxsKTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgLy8gfVxyXG5cclxufVxyXG5cclxuY29uc3QgTG9jYWxTdG9yYWdlX1NldERhdGEgPSBhc3luYyAob3B0aW9uczogYW55KSA9PiB7XHJcbiAgICBhd2FpdCBzdG9yZS5jcmVhdGUoKTtcclxuXHJcbiAgICBvcHRpb25zLnBhcmFtcyA9IG9wdGlvbnMucGFyYW1zIHx8IHt9O1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgLy92YXIgZGF0YUNvbnRleHQgPSAoYXdhaXQgc3RvcmUuZ2V0KCdkYXRhJykgfHwgW10pO1xyXG4gICAgICAgIC8vZGF0YUNvbnRleHQucHVzaChvcHRpb25zLnBhcmFtcyk7XHJcblxyXG4gICAgICAgIGF3YWl0IHN0b3JlLnNldCgnaWNkdC1kYXRhJywgb3B0aW9ucy5wYXJhbXMpO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuY2FsbGJhY2sgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBvcHRpb25zLmNhbGxiYWNrKG9wdGlvbnMucGFyYW1zKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNhbGxiYWNrID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5jYWxsYmFjayhudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuY29uc3QgTG9jYWxTdG9yYWdlX0dldENvbmZpZyA9IGFzeW5jIChvcHRpb25zOiBhbnkpID0+IHtcclxuICAgIGF3YWl0IHN0b3JlLmNyZWF0ZSgpO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgdmFyIGRhdGFDb250ZXh0ID0gKGF3YWl0IHN0b3JlLmdldCgnaWNkdC1jb25maWcnKSB8fCB7fSk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5jYWxsYmFjayA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuY2FsbGJhY2soZGF0YUNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuY2FsbGJhY2sgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBvcHRpb25zLmNhbGxiYWNrKG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5jb25zdCBMb2NhbFN0b3JhZ2VfU2V0Q29uZmlnID0gYXN5bmMgKG9wdGlvbnM6IGFueSkgPT4ge1xyXG4gICAgYXdhaXQgc3RvcmUuY3JlYXRlKCk7XHJcblxyXG4gICAgb3B0aW9ucy5wYXJhbXMgPSBvcHRpb25zLnBhcmFtcyB8fCB7fTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vdmFyIGRhdGFDb250ZXh0ID0gKGF3YWl0IHN0b3JlLmdldCgnY29uZmlnJykgfHwge30pO1xyXG4gICAgICAgIC8vZGF0YUNvbnRleHQucHVzaChvcHRpb25zLnBhcmFtcyk7XHJcblxyXG4gICAgICAgIGF3YWl0IHN0b3JlLnNldCgnaWNkdC1jb25maWcnLCBvcHRpb25zLnBhcmFtcyk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5jYWxsYmFjayA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuY2FsbGJhY2sob3B0aW9ucy5wYXJhbXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuY2FsbGJhY2sgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBvcHRpb25zLmNhbGxiYWNrKG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5jb25zdCBMb2NhbFN0b3JhZ2VfR2V0Q2xpcGJvYXJkID0gYXN5bmMgKG9wdGlvbnM6IGFueSkgPT4ge1xyXG4gICAgYXdhaXQgc3RvcmUuY3JlYXRlKCk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICB2YXIgZGF0YUNvbnRleHQgPSAoYXdhaXQgc3RvcmUuZ2V0KCdpY2R0LWNsaXBib2FyZCcpIHx8IHt9KTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNhbGxiYWNrID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5jYWxsYmFjayhkYXRhQ29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5jYWxsYmFjayA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuY2FsbGJhY2sobnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmNvbnN0IExvY2FsU3RvcmFnZV9TZXRDbGlwYm9hcmQgPSBhc3luYyAob3B0aW9uczogYW55KSA9PiB7XHJcbiAgICBhd2FpdCBzdG9yZS5jcmVhdGUoKTtcclxuXHJcbiAgICBvcHRpb25zLnBhcmFtcyA9IG9wdGlvbnMucGFyYW1zIHx8IHt9O1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgYXdhaXQgc3RvcmUuc2V0KCdpY2R0LWNsaXBib2FyZCcsIG9wdGlvbnMucGFyYW1zKTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNhbGxiYWNrID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5jYWxsYmFjayhvcHRpb25zLnBhcmFtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5jYWxsYmFjayA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuY2FsbGJhY2sobnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgIH1cclxuXHJcbn1cclxuIiwiLypcclxuICAgIGxpYl9yZ2JhMmhleChcInJnYmEoMCwgMCwgMCwgMC43NClcIik7ICAgIC0+ICMwMDAwMDBiY1xyXG4gICAgbGliX3JnYmEyaGV4KFwicmdiYSgwLCAwLCAwLCAxKVwiLHRydWUpOyAgLT4gIzAwMDAwMFxyXG4gICAgbGliX3JnYmEyaGV4KFwicmdiKDAsIDI1NSwgMClcIik7ICAgICAgICAgLT4gIzAwZmYwMFxyXG4gICAgbGliX3JnYmEyaGV4KFwicmdiKDAsIDI1NSwgMClcIix0cnVlKTsgICAgLT4gIzAwZmYwMGZmXHJcbiovXHJcbmV4cG9ydCBjb25zdCBsaWJfcmdiYTJoZXggPSAob3JpZzogc3RyaW5nLCBpc0FscGhhPzogYm9vbGVhbikgPT4ge1xyXG4gICAgaWYgKCFvcmlnKSB7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCByZ2IgPSBvcmlnLnJlcGxhY2UoL1xccy9nLCAnJykubWF0Y2goL15yZ2JhP1xcKChcXGQrKSwoXFxkKyksKFxcZCspLD8oW14sXFxzKV0rKT8vaSkgYXMgYW55LFxyXG4gICAgICAgIGFscGhhID0gKHJnYiAmJiByZ2JbNF0gfHwgXCJcIikudHJpbSgpLFxyXG4gICAgICAgIGhleCA9IHJnYiA/IChyZ2JbMV0gfCAxIDw8IDgpLnRvU3RyaW5nKDE2KS5zbGljZSgxKVxyXG4gICAgICAgICAgICArIChyZ2JbMl0gfCAxIDw8IDgpLnRvU3RyaW5nKDE2KS5zbGljZSgxKVxyXG4gICAgICAgICAgICArIChyZ2JbM10gfCAxIDw8IDgpLnRvU3RyaW5nKDE2KS5zbGljZSgxKSA6IG9yaWdcclxuXHJcbiAgICBpZiAoYWxwaGEgPT0gXCIwXCIpIHtcclxuICAgICAgICByZXR1cm4gXCJ0cmFuc3BhcmVudFwiO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc0FscGhhKSB7XHJcbiAgICAgICAgbGV0IGE7XHJcblxyXG4gICAgICAgIGlmIChhbHBoYSAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICBhID0gYWxwaGE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBhID0gJzAxJztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gbXVsdGlwbHkgYmVmb3JlIGNvbnZlcnQgdG8gSEVYXHJcbiAgICAgICAgYSA9ICgoYSAqIDI1NSkgfCAxIDw8IDgpLnRvU3RyaW5nKDE2KS5zbGljZSgxKVxyXG4gICAgICAgIGhleCA9IGhleCArIGE7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc29sZS5sb2coYGxpYl9yZ2JhMmhleDogJHtvcmlnfSAtPiAke2hleH1gKTtcclxuXHJcbiAgICByZXR1cm4gYCMke2hleH1gO1xyXG59XHJcbiIsImV4cG9ydCBjb25zdCBWX0lEID0ge1xyXG4gICAgUkVTSVpFX0dST1VQOiAnaWNkdC1yZXNpemUtZycsXHJcbiAgICBTRUxFQ1RfR1JPVVA6ICdpY2R0LXNlbGVjdC1nJyxcclxuICAgIFNDQU5fR1JPVVA6ICdpY2R0LXNjYW4tZycsXHJcbiAgICBDUkVBVEVfR1JPVVA6ICdpY2R0LWNyZWF0ZS1nJyxcclxuICAgIElOVEVSQUNUSVZFX0dST1VQOiAnaWNkdC1pbnRlcmFjdGl2ZS1nJyxcclxuICAgIElOREVYX0dST1VQOiAnaWNkdC1pbmRleC1nJyxcclxuICAgIEJBQ0tHUk9VTkRfR1JPVVA6ICdpY2R0LWJhY2tncm91bmQtZycsXHJcbiAgICBURVNUX0dST1VQOiAnaWNkdC10ZXN0LWcnLFxyXG59IiwiZXhwb3J0IGNvbnN0IFZfS2V5Ym9hcmQgPSB7XHJcblxyXG4gICAgRGlnaXQxOiA0OSxcclxuICAgIERpZ2l0MjogNTAsXHJcbiAgICBEaWdpdDM6IDUxLFxyXG4gICAgRGlnaXQ0OiA1MixcclxuICAgIERpZ2l0NTogNTMsXHJcbiAgICBEaWdpdDY6IDU0LFxyXG4gICAgRGlnaXQ3OiA1NSxcclxuICAgIERpZ2l0ODogNTYsXHJcbiAgICBEaWdpdDk6IDU3LFxyXG4gICAgRGlnaXQwOiA0OCxcclxuXHJcbiAgICBLZXlBOiA2NSxcclxuICAgIEtleUI6IDY2LFxyXG4gICAgS2V5QzogNjcsXHJcbiAgICBLZXlEOiA2OCxcclxuICAgIEtleUU6IDY5LFxyXG4gICAgS2V5RjogNzAsXHJcbiAgICBLZXlHOiA3MSxcclxuICAgIEtleUg6IDcyLFxyXG4gICAgS2V5STogNzMsXHJcbiAgICBLZXlKOiA3NCxcclxuICAgIEtleUs6IDc1LFxyXG4gICAgS2V5TDogNzYsXHJcbiAgICBLZXlNOiA3NyxcclxuICAgIEtleU46IDc4LFxyXG4gICAgS2V5TzogNzksXHJcbiAgICBLZXlQOiA4MCxcclxuICAgIEtleVE6IDgxLFxyXG4gICAgS2V5UjogODIsXHJcbiAgICBLZXlTOiA4MyxcclxuICAgIEtleVQ6IDg0LFxyXG4gICAgS2V5VTogODUsXHJcbiAgICBLZXlWOiA4NixcclxuICAgIEtleVc6IDg3LFxyXG4gICAgS2V5WDogODgsXHJcbiAgICBLZXlZOiA4OSxcclxuICAgIEtleVo6IDkwLFxyXG5cclxuICAgIEYxOiAxMTIsXHJcbiAgICBGMjogMTEzLFxyXG4gICAgRjM6IDExNCxcclxuICAgIEY0OiAxMTUsXHJcbiAgICBGNTogMTE2LFxyXG4gICAgRjY6IDExNyxcclxuICAgIEY3OiAxMTgsXHJcbiAgICBGODogMTE5LFxyXG4gICAgRjk6IDEyMCxcclxuICAgIEYxMDogMTIxLFxyXG4gICAgRjExOiAxMjIsXHJcbiAgICBGMTI6IDEyMyxcclxuXHJcbiAgICBJbnNlcnQ6IDQ1LFxyXG4gICAgRGVsZXRlOiA0NixcclxuXHJcbiAgICBIb21lOiAzNixcclxuICAgIEVuZDogMzUsXHJcblxyXG4gICAgUGFnZVVwOiAzMyxcclxuICAgIFBhZ2VEb3duOiAzNCxcclxuXHJcbiAgICBBcnJvd1VwOiAzOCxcclxuICAgIEFycm93RG93bjogNDAsXHJcbiAgICBBcnJvd0xlZnQ6IDM3LFxyXG4gICAgQXJyb3dSaWdodDogMzksXHJcblxyXG4gICAgRXNjYXBlOiAyNyxcclxuICAgIFRhYjogOSxcclxuICAgIEJhY2tzcGFjZTogOCxcclxuICAgIEVudGVyOiAxMyxcclxuICAgIFNwYWNlOiAzMixcclxuXHJcbiAgICBCcmFja2V0TGVmdDogMjE5LCAgIC8vIFtcclxuICAgIEJyYWNrZXRSaWdodDogMjIxLCAgLy8gXVxyXG59XHJcblxyXG4vKlxyXG5jb25zdCBjcmVhdGVLZXkgPSAoKSA9PiB7XHJcbiAgICB2YXIgYXJyS2V5cyA9IFtdO1xyXG5cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB2YXIgcmVzID0ge307XHJcbiAgICAgICAgcmVzW2UuY29kZV0gPSBlLmtleUNvZGU7XHJcbiAgICAgICAgYXJyS2V5cy5wdXNoKHJlcyk7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKGFycktleXMubWFwKG0gPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gYCR7T2JqZWN0LmtleXMobSl9OiR7bVtPYmplY3Qua2V5cyhtKV19LCBcXG5gXHJcbiAgICAgICAgfSkuam9pbignJykpXHJcbiAgICB9KTtcclxufVxyXG4qLyIsImV4cG9ydCBjb25zdCBWX1BlblR5cGUgPSB7XHJcbiAgICBEUkFXOiAxLFxyXG4gICAgSElHSFRMSUdIOiAyLFxyXG4gICAgSU5URVJBQ1RJVkU6IDMsXHJcbn0iLCJleHBvcnQgY29uc3QgVl9Qb2ludGVyVHlwZSA9IHtcclxuICAgIFBPSU5URVI6IDAsXHJcbiAgICBIQU5EOiAxLFxyXG4gICAgUEVOOiAyLCAvLy0+IFZfUGVuVHlwZVxyXG4gICAgU0hBUEU6IDMsIC8vLT4gVl9TaGFwZVR5cGVcclxuICAgIEZPUkVJR05PQkpFQ1Q6IDYsIC8vLT4gVl9Gb3JlaWduT2JqZWN0VHlwZVxyXG4gICAgSU1BR0U6IDcsXHJcbiAgICBURVhUOiA0LFxyXG4gICAgRVJBU0VSOiA1LFxyXG4gICAgSU5ERVg6IDhcclxufSIsImltcG9ydCB7IFZfUG9seWdvblR5cGUgfSBmcm9tIFwiLi9WX1BvbHlnb25UeXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgVl9Qb2x5Z29uUmF0aW8gPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ3RhbSBnacOhYyB2dcO0bmcnLFxyXG4gICAgICAgIHR5cGU6IFZfUG9seWdvblR5cGUuVFJJQU5HTEVfSVNPU0NFTEVTLFxyXG4gICAgICAgIHJhdGlvczogW1swLCAwXSwgWzEsIDFdLCBbMCwgMV1dXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICd0YW0gZ2nDoWMgY8OibicsXHJcbiAgICAgICAgdHlwZTogVl9Qb2x5Z29uVHlwZS5UUklBTkdMRV9FUVVJTEFURVJBTCxcclxuICAgICAgICByYXRpb3M6IFtbMC41LCAwXSwgWzAsIDFdLCBbMSwgMV1dXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdow6xuaCBjaOG7ryBuaOG6rXQnLFxyXG4gICAgICAgIHR5cGU6IFZfUG9seWdvblR5cGUuUkVDVEFOR0xFLFxyXG4gICAgICAgIHJhdGlvczogW1swLCAwXSwgWzEsIDBdLCBbMSwgMV0sIFswLCAxXV1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ2jDrG5oIG5nxakgZ2nDoWMgxJHhu4F1JyxcclxuICAgICAgICB0eXBlOiBWX1BvbHlnb25UeXBlLlBFTlRBR09OLFxyXG4gICAgICAgIHJhdGlvczogW1swLjUsIDBdLCBbMSwgMC40XSwgWzAuOCwgMV0sIFswLjIsIDFdLCBbMCwgMC40XV1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ2jDrG5oIGzhu6VjIGdpw6FjIMSR4buBdScsXHJcbiAgICAgICAgdHlwZTogVl9Qb2x5Z29uVHlwZS5IRVhBR09OLFxyXG4gICAgICAgIHJhdGlvczogW1swLjUsIDBdLCBbMSwgMC4yNV0sIFsxLCAwLjc1XSwgWzAuNSwgMV0sIFswLCAwLjc1XSwgWzAsIDAuMjVdXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAna2h1bmcgxJHDoW5oIGThuqV1IHbhu4sgdHLDrScsXHJcbiAgICAgICAgdHlwZTogVl9Qb2x5Z29uVHlwZS5CT09LTUFSSyxcclxuICAgICAgICByYXRpb3M6IFtbMCwgMF0sIFsxLCAwXSwgWzEsIDAuOF0sIFswLjUsIDFdLCBbMCwgMC44XV1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ2todW5nIMSRw6FuaCB0csOyIGNodXnhu4duJyxcclxuICAgICAgICB0eXBlOiBWX1BvbHlnb25UeXBlLkNPTU1FTlQsXHJcbiAgICAgICAgcmF0aW9zOiBbWzAsIDBdLCBbMSwgMF0sIFsxLCAwLjldLCBbMC4zLCAwLjldLCBbMC4yLCAxXSwgWzAuMSwgMC45XSwgWzAsIDAuOV1dXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdow6xuaCBjaOG7ryB0aOG6rXAnLFxyXG4gICAgICAgIHR5cGU6IFZfUG9seWdvblR5cGUuQ1JPU1MsXHJcbiAgICAgICAgcmF0aW9zOiBbWzAsIDAuM10sIFswLjMsIDAuM10sIFswLjMsIDBdLCBbMC43LCAwXSwgWzAuNywgMC4zXSwgWzEsIDAuM10sIFsxLCAwLjddLCBbMC43LCAwLjddLCBbMC43LCAxXSwgWzAuMywgMV0sIFswLjMsIDAuN10sIFswLCAwLjddXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnaMOsbmggbcWpaSB0w6puIDEgY2hp4buBdScsXHJcbiAgICAgICAgdHlwZTogVl9Qb2x5Z29uVHlwZS5BUlJPV19PTkVXQVksXHJcbiAgICAgICAgcmF0aW9zOiBbWzAsIDAuMl0sIFswLjgsIDAuMl0sIFswLjgsIDBdLCBbMSwgMC41XSwgWzAuOCwgMV0sIFswLjgsIDAuOF0sIFswLCAwLjhdXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnaMOsbmggbcWpaSB0w6puIDIgY2hp4buBdScsXHJcbiAgICAgICAgdHlwZTogVl9Qb2x5Z29uVHlwZS5BUlJPV19UV09XQVksXHJcbiAgICAgICAgcmF0aW9zOiBbWzAuMiwgMF0sIFswLjIsIDAuMl0sIFswLjgsIDAuMl0sIFswLjgsIDBdLCBbMSwgMC41XSwgWzAuOCwgMV0sIFswLjgsIDAuOF0sIFswLjIsIDAuOF0sIFswLjIsIDFdLCBbMCwgMC41XV1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ2jDrG5oIG5nw7RpIHNhbyA0IGPDoW5oJyxcclxuICAgICAgICB0eXBlOiBWX1BvbHlnb25UeXBlLlNUQVJfRk9VUixcclxuICAgICAgICByYXRpb3M6IFtbMC41LCAwXSwgWzAuNjUsIDAuMzVdLCBbMSwgMC41XSwgWzAuNjUsIDAuNjVdLCBbMC41LCAxXSwgWzAuMzUsIDAuNjVdLCBbMCwgMC41XSwgWzAuMzUsIDAuMzVdXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnaMOsbmggbmfDtGkgc2FvIDUgY8OhbmgnLFxyXG4gICAgICAgIHR5cGU6IFZfUG9seWdvblR5cGUuU1RBUl9GSVZFLFxyXG4gICAgICAgIHJhdGlvczogW1swLjUsIDBdLCBbMC42MjUsIDAuNF0sIFsxLCAwLjRdLCBbMC42NzUsIDAuNjI1XSwgWzAuOCwgMV0sIFswLjUsIDAuNzc1XSwgWzAuMiwgMV0sIFswLjMyNSwgMC42MjVdLCBbMCwgMC40XSwgWzAuMzc1LCAwLjRdXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnaMOsbmggbmfDtGkgc2FvIDYgY8OhbmgnLFxyXG4gICAgICAgIHR5cGU6IFZfUG9seWdvblR5cGUuU1RBUl9TSVgsXHJcbiAgICAgICAgcmF0aW9zOiBbWzAuNSwgMF0sIFswLjUgKyAwLjE2NywgMC4yNV0sIFsxLCAwLjI1XSwgWzAuNSArIDAuMzM0LCAwLjVdLCBbMSwgMC43NV0sIFswLjUgKyAwLjE2NywgMC43NV0sIFswLjUsIDFdLCBbMC4zMzQsIDAuNzVdLCBbMCwgMC43NV0sIFswLjE2NywgMC41XSwgWzAsIDAuMjVdLCBbMC4zMzQsIDAuMjVdXVxyXG4gICAgfVxyXG5dOyIsImV4cG9ydCBjb25zdCBWX1BvbHlnb25UeXBlID0ge1xyXG4gICAgVFJJQU5HTEVfSVNPU0NFTEVTOiAzLCAvL3RhbSBnaWFjIHZ1b25nXHJcbiAgICBUUklBTkdMRV9FUVVJTEFURVJBTDogMzEsIC8vdGFtIGdpYWMgZGV1XHJcblxyXG4gICAgUkVDVEFOR0xFOiA0LCAvL2hpbmggY2h1IG5oYXRcclxuXHJcbiAgICBQRU5UQUdPTjogNSwgLy9oaW5oIG5ndSBnaWFjXHJcblxyXG4gICAgSEVYQUdPTjogNiwgLy9oaW5oIGx1YyBnaWFjXHJcblxyXG4gICAgQk9PS01BUks6IDEwMSwgLy9oaW5oIGRhbmggZGF1IHRyYW5nXHJcbiAgICBDT01NRU5UOiAxMDIsIC8vaGluaCBjb21tZW50XHJcblxyXG4gICAgQ1JPU1M6IDEwNCwgLy9oaW5oIGNodSB0aGFwXHJcblxyXG4gICAgQVJST1dfT05FV0FZOiAyMDEsIC8vbXVpIHRlbiAxIGNoaWV1XHJcbiAgICBBUlJPV19UV09XQVk6IDIwMiwgLy9tdWkgdGVuIDIgY2hpZXVcclxuXHJcbiAgICBTVEFSX0ZPVVI6IDMwNCwgLy9uZ29pIHNhbyA0IGNhbmhcclxuICAgIFNUQVJfRklWRTogMzA1LCAvL25nb2kgc2FvIDUgY2FuaFxyXG4gICAgU1RBUl9TSVg6IDMwNiwgLy9uZ29pIHNhbyA2IGNhbmhcclxufSIsImV4cG9ydCBjb25zdCBWX1NoYXBlVHlwZSA9IHtcclxuICAgIEdST1VQOiAwLFxyXG4gICAgQ0lSQ0xFOiAxLFxyXG4gICAgRUxMSVBTRTogMixcclxuICAgIExJTkU6IDUsXHJcbiAgICBSRUNUOiAzLFxyXG4gICAgUE9MWUdPTjogNCwgIC8vLT4gVl9Qb2x5Z29uVHlwZVxyXG4gICAgRk9SRUlHTk9CSkVDVDogNiwgICAvLy0+IFZfRm9yZWlnbk9iamVjdFR5cGVcclxuICAgIElNQUdFOiA5LFxyXG4gICAgVEVYVDogNyxcclxuICAgIFBBVEg6IDgsXHJcbn0iLCJleHBvcnQgY29uc3Qgdl9tZWRpYXR5cGUgPSB7XHJcbiAgICBURVhUOiA5MDAsXHJcbiAgICBJTUFHRTogOTAxLFxyXG4gICAgQVVESU86IDkwMixcclxuICAgIFZJREVPOiA5MDMsXHJcbiAgICBMSU5LOiA5MDQsXHJcbiAgICBaSVA6IDkwNSxcclxuICAgIEhUTUw6IDkwNixcclxuICAgIFRSQUNLOiA5MDcsXHJcbiAgICBPRkZJQ0U6IDkwOCxcclxuICAgIFBERjogOTA5LFxyXG4gICAgUEhFVDogOTEwLFxyXG4gICAgSU1BR0VfQU5JTUFUSU9OOiA5MTEsXHJcbiAgICBTQ09STTogOTEyLFxyXG59IiwiZXhwb3J0IGNvbnN0IHZfb3NzdHlwZSA9IHtcclxuICAgIE9ORURSSVZFOiAxMDAwLFxyXG4gICAgR09PR0xFRFJJVkU6IDEwMDEsXHJcbiAgICBZT1VUVUJFOiAxMDAyLFxyXG4gICAgU0NPUk06IDEwMDMsXHJcbiAgICBQSEVUOiAxMDA1LFxyXG4gICAgT1RIRVI6IDEwMDRcclxufSIsImltcG9ydCB7IGljZHRfSURhdGFTb3VyY2UgfSBmcm9tIFwiLi4vaW50ZXJmYWNlL0lEYXRhU291cmNlXCI7XHJcbmltcG9ydCB7IGljZHRfSURhdGFWYXJpYWJsZSB9IGZyb20gXCIuLi9pbnRlcmZhY2UvSURhdGFWYXJpYWJsZVwiO1xyXG5pbXBvcnQgeyBpY2R0X0luaXQgfSBmcm9tIFwiLi4vc2NyaXB0L2luaXRcIjtcclxuaW1wb3J0IHsgaWNkdF9EYXRhU2VsZWN0IH0gZnJvbSBcIi4uL3NjcmlwdC9tZXRob2QvZGF0YS1zZWxlY3RcIjtcclxuaW1wb3J0IHsgaWNkdF9EYXRhU2xpZGUgfSBmcm9tIFwiLi4vc2NyaXB0L21ldGhvZC9kYXRhLXNsaWRlXCI7XHJcbmltcG9ydCB7IGljZHRfRGF0YVNvdXJjZSB9IGZyb20gXCIuLi9zY3JpcHQvbWV0aG9kL2RhdGEtc291cmNlXCI7XHJcbmltcG9ydCB7IGljZHRfSGlzdG9yeSB9IGZyb20gXCIuLi9zY3JpcHQvbWV0aG9kL2hpc3RvcnlcIjtcclxuaW1wb3J0IHsgaWNkdF9TY3JlZW5fTW9LYW0gfSBmcm9tIFwiLi4vc2NyaXB0L21ldGhvZC9zY3JlZW5cIjtcclxuaW1wb3J0IHsgaWNkdF9TdmdOb2RlQXR0cmlidXRlX1RydW1DdW9pWGFIb2kgfSBmcm9tIFwiLi4vc2NyaXB0L21ldGhvZC9zdmctbm9kZS1hdHRyaWJ1dGVcIjtcclxuaW1wb3J0IHsgaWNkdF9WYXJpYWJsZV9UcnVtQ3VvaSB9IGZyb20gXCIuLi9zY3JpcHQvbWV0aG9kL3ZhcmlhYmxlXCI7XHJcbmltcG9ydCB7IGljZHRfUG9pbnRlclR5cGVfQ2hpQ2hpQ2hvQ2hvIH0gZnJvbSBcIi4uL3NjcmlwdC9wb2ludGVyL3BvaW50ZXItdHlwZVwiO1xyXG5cclxuY2xhc3MgaWNkdF9raWVuZGVwdHJhaSB7XHJcblxyXG4gICAgcHJpdmF0ZSBfY29uZmlnPzoge1xyXG4gICAgICAgIGZpbGV1cGxvYWR1cmw6IHN0cmluZztcclxuICAgICAgICByZWFkZmlsZXVwbG9hZHVybDogc3RyaW5nO1xyXG4gICAgfTtcclxuXHJcbiAgICBwcml2YXRlIF9jb250YWluZXI6IHN0cmluZyA9ICcnO1xyXG4gICAgcHJpdmF0ZSBfc3ZnOiBzdHJpbmcgPSAnJztcclxuXHJcbiAgICBwcml2YXRlIF9zY3JlZW46IGljZHRfU2NyZWVuX01vS2FtID0gaWNkdF9TY3JlZW5fTW9LYW0ucHJvdG90eXBlO1xyXG5cclxuICAgIHByaXZhdGUgX2RhdGE6IGljZHRfRGF0YVNvdXJjZSA9IGljZHRfRGF0YVNvdXJjZS5wcm90b3R5cGU7XHJcbiAgICBwcml2YXRlIF9kYXRhU2VsZWN0OiBpY2R0X0RhdGFTZWxlY3QgPSBpY2R0X0RhdGFTZWxlY3QucHJvdG90eXBlO1xyXG5cclxuICAgIHByaXZhdGUgX3NsaWRlOiBpY2R0X0RhdGFTbGlkZSA9IGljZHRfRGF0YVNsaWRlLnByb3RvdHlwZTtcclxuXHJcbiAgICBwcml2YXRlIF9oaXN0b3J5OiBpY2R0X0hpc3RvcnkgPSBpY2R0X0hpc3RvcnkucHJvdG90eXBlO1xyXG5cclxuICAgIHByaXZhdGUgX2F0dHJpYnV0ZTogaWNkdF9TdmdOb2RlQXR0cmlidXRlX1RydW1DdW9pWGFIb2kgPSBpY2R0X1N2Z05vZGVBdHRyaWJ1dGVfVHJ1bUN1b2lYYUhvaS5wcm90b3R5cGU7XHJcblxyXG4gICAgcHJpdmF0ZSBfcG9pbnRlcjogaWNkdF9Qb2ludGVyVHlwZV9DaGlDaGlDaG9DaG8gPSBpY2R0X1BvaW50ZXJUeXBlX0NoaUNoaUNob0Noby5wcm90b3R5cGU7XHJcblxyXG4gICAgcHJpdmF0ZSBfdmFyaWFibGU6IGljZHRfVmFyaWFibGVfVHJ1bUN1b2kgPSBpY2R0X1ZhcmlhYmxlX1RydW1DdW9pLnByb3RvdHlwZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLl9kYXRhID0gbmV3IGljZHRfRGF0YVNvdXJjZSgpO1xyXG4gICAgICAgIHRoaXMuX2RhdGFTZWxlY3QgPSBuZXcgaWNkdF9EYXRhU2VsZWN0KCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3NsaWRlID0gbmV3IGljZHRfRGF0YVNsaWRlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2hpc3RvcnkgPSBuZXcgaWNkdF9IaXN0b3J5KCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2F0dHJpYnV0ZSA9IG5ldyBpY2R0X1N2Z05vZGVBdHRyaWJ1dGVfVHJ1bUN1b2lYYUhvaSgpO1xyXG4gICAgICAgIHRoaXMuX3BvaW50ZXIgPSBuZXcgaWNkdF9Qb2ludGVyVHlwZV9DaGlDaGlDaG9DaG8oKTtcclxuXHJcbiAgICAgICAgdGhpcy5fdmFyaWFibGUgPSBuZXcgaWNkdF9WYXJpYWJsZV9UcnVtQ3VvaSgpO1xyXG5cclxuICAgICAgICAvL8SR4buVaSBsb+G6oWkgY29uIHRy4buPIHRo4buJIGLhu48gc2VsZWN0IGx1w7RuXHJcbiAgICAgICAgdGhpcy5fcG9pbnRlci5vbmNoYW5nZVBvaW50ZXJUeXBlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRhU2VsZWN0Lmlkcy5sZW5ndGggPyB0aGlzLl9kYXRhU2VsZWN0LmlkcyA9IFtdIDogbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fcG9pbnRlci5vbmNoYW5nZVBvaW50ZXJUeXBlVGVtcCA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fZGF0YVNlbGVjdC5pZHMubGVuZ3RoID8gdGhpcy5fZGF0YVNlbGVjdC5pZHMgPSBbXSA6IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL8SR4buVaSBzbGlkZSB0aMOsIGLhu48gc2VsZWN0XHJcbiAgICAgICAgdGhpcy5fZGF0YS5vbkNoYW5nZVNsaWRlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRhU2VsZWN0Lmlkcy5sZW5ndGggPyB0aGlzLl9kYXRhU2VsZWN0LmlkcyA9IFtdIDogbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNvbmZpZygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBjb25maWcoY29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBkYXRhU291cmNlKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1vZHVsZXM6IFwiaWNkdFYyXCIsXHJcbiAgICAgICAgICAgIHNjcmVlbjogdGhpcy5fc2NyZWVuLmdldCxcclxuICAgICAgICAgICAgZGF0YTogdGhpcy5fZGF0YS5nZXQsXHJcbiAgICAgICAgICAgIHJlc291cmNlczogdGhpcy5fZGF0YS5nZXRSZXNvdXJjZSxcclxuICAgICAgICAgICAgdmFyaWFibGU6IHRoaXMuX3ZhcmlhYmxlLmdldCxcclxuICAgICAgICAgICAgaW5mbzoge31cclxuICAgICAgICB9IGFzIHtcclxuICAgICAgICAgICAgbW9kdWxlczogc3RyaW5nLFxyXG4gICAgICAgICAgICBzY3JlZW46IHsgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgfSxcclxuICAgICAgICAgICAgZGF0YTogaWNkdF9JRGF0YVNvdXJjZSxcclxuICAgICAgICAgICAgcmVzb3VyY2VzOiBBcnJheTxzdHJpbmc+LFxyXG4gICAgICAgICAgICB2YXJpYWJsZTogaWNkdF9JRGF0YVZhcmlhYmxlLFxyXG4gICAgICAgICAgICBpbmZvOiB7fVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGRhdGFTb3VyY2UoZDogeyBzY3JlZW4/OiB7IHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyIH0sIGRhdGE/OiBhbnksIHZhcmlhYmxlPzogYW55IH0pIHtcclxuICAgICAgICB0aGlzLl9zY3JlZW4uc2V0ID0gZC5zY3JlZW4gfHwgeyB3aWR0aDogMTA4MCwgaGVpZ2h0OiAxMDgwIH07XHJcbiAgICAgICAgdGhpcy5fZGF0YS5zZXQgPSBkLmRhdGEgfHwge307XHJcbiAgICAgICAgdGhpcy5fdmFyaWFibGUuc2V0ID0gZC52YXJpYWJsZSB8fCB7fTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY29udGFpbmVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250YWluZXI7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGNvbnRhaW5lcihpZEVsZW1lbnQ6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IGlkRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc3ZnKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdmc7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHN2ZyhpZEVsZW1lbnQ6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX3N2ZyA9IGlkRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdGFyZ2V0KCkge1xyXG4gICAgICAgIHJldHVybiAod2luZG93IGFzIGFueSkuZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9zdmcpIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBzY3JlZW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NjcmVlbjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGF0YSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGF0YVNlbGVjdCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVNlbGVjdDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc2xpZGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NsaWRlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBoaXN0b3J5KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9oaXN0b3J5O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBhdHRyaWJ1dGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F0dHJpYnV0ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcG9pbnRlcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcG9pbnRlcjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdmFyaWFibGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhcmlhYmxlO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbG9hZFZpZXcoKSB7XHJcbiAgICAgICAgdGhpcy5fc2NyZWVuLnNjcmVlbiA9ICgob2Zmc2V0LCB3aWR0aCwgaGVpZ2h0KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWxvYWRWaWV3JywgSlNPTi5zdHJpbmdpZnkoeyBvZmZzZXQsIHdpZHRoLCBoZWlnaHQgfSkpXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IHtcclxuICAgICAgICAgICAgICAgICAgICB4OiBvZmZzZXQ/LmxlZnQgPz8gMCxcclxuICAgICAgICAgICAgICAgICAgICB5OiBvZmZzZXQ/LnRvcCA/PyAwXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoID8/IDAsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCA/PyAwXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KShqUXVlcnkodGhpcy5fY29udGFpbmVyKS5vZmZzZXQoKSwgalF1ZXJ5KHRoaXMuX2NvbnRhaW5lcikud2lkdGgoKSwgalF1ZXJ5KHRoaXMuX2NvbnRhaW5lcikuaGVpZ2h0KCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXQob3B0aW9uczogeyB3aWR0aD86IG51bWJlciwgaGVpZ2h0PzogbnVtYmVyLCBjb250YWluZXI6IHN0cmluZywgdGFyZ2V0OiBzdHJpbmcsIGlza2V5Ym9hcmQ/OiBib29sZWFuIH0pIHtcclxuXHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gb3B0aW9ucy5jb250YWluZXI7XHJcbiAgICAgICAgdGhpcy5fc3ZnID0gb3B0aW9ucy50YXJnZXQ7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdGhpcy5fc2NyZWVuID0gbmV3IGljZHRfU2NyZWVuX01vS2FtKCk7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgaWNkdF9Jbml0KHtcclxuICAgICAgICAgICAgY29udGFpbmVyOiBvcHRpb25zLmNvbnRhaW5lcixcclxuICAgICAgICAgICAgdGFyZ2V0OiBvcHRpb25zLnRhcmdldCxcclxuICAgICAgICAgICAgaXNrZXlib2FyZDogb3B0aW9ucy5pc2tleWJvYXJkXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0ID0gbmV3IGljZHRfa2llbmRlcHRyYWkoKTtcclxuIiwiaW1wb3J0IHsgaWNkdF9Qb2ludGVyRXZlbnQsIGljZHRfUG9pbnRlckV2ZW50cyB9IGZyb20gXCIuLi8uLi9wb2ludGVyL3BvaW50ZXItZXZlbnRcIjtcclxuaW1wb3J0IHsgaWNkdF9FcmFzZXIgfSBmcm9tIFwiLi9lcmFzZXIvZXJhc2VyXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9FcmFzZXJDb21wb25lbnQgPSAoZXZlbnRzOiB7IG1vdXNlRXZlbnQ/OiBNb3VzZUV2ZW50LCB0b3VjaEV2ZW50PzogVG91Y2hFdmVudCB9KSA9PiB7XHJcbiAgICBpY2R0X1BvaW50ZXJFdmVudHMoZXZlbnRzLCBuZXcgaWNkdF9FcmFzZXIoKSk7XHJcbn0iLCJpbXBvcnQgeyBWX1NoYXBlVHlwZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9sb29rdXAvVl9TaGFwZVR5cGVcIjtcclxuaW1wb3J0IHsgbGliX2VyYXNlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2xpYi9lcmFzZVwiO1xyXG5pbXBvcnQgeyBpY2R0IH0gZnJvbSBcIi4uLy4uLy4uLy4uL3Byb3RvdHlwZS9pY2R0XCI7XHJcbmltcG9ydCB7IGljZHRfT2Zmc2V0MlNpemUgfSBmcm9tIFwiLi4vLi4vLi4vaGFuZGxlL29mZnNldFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z1BhdGggfSBmcm9tIFwiLi4vLi4vc2hhcGUvc3ZnL3BhdGgvc3ZnLXBhdGhcIjtcclxuaW1wb3J0IHsgaWNkdF9TeW5jU3ZnTm9kZUF0dHJpYnV0ZSB9IGZyb20gXCIuLi8uLi8uLi9zeW5jLWVsZW1lbnQvc3ZnLWVsZW1lbnRcIjtcclxuaW1wb3J0IHsgaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vaW50ZXJmYWNlL0lEYXRhU291cmNlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgaWNkdF9FcmFzZXIge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBsZXQgdGhpc0F0dHJpYnV0ZSA9IHtcclxuICAgICAgICAgICAgc3Ryb2tlOiAnI2RkZCcsXHJcbiAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAxMCxcclxuICAgICAgICAgICAgc3Ryb2tlTGluZWNhcDogJ3JvdW5kJyxcclxuICAgICAgICAgICAgc3Ryb2tlTGluZWpvaW46ICdyb3VuZCcsXHJcbiAgICAgICAgfSBhcyBpY2R0X0lEYXRhTm9kZUF0dHJpYnV0ZTtcclxuXHJcbiAgICAgICAgbGV0IHsgbm9kZUlkLCBlbGVtZW50LCBhdHRyaWJ1dGUsIHNpemUgfSA9IGljZHRfU3ZnUGF0aChNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMDApKTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICBpY2R0X1N5bmNTdmdOb2RlQXR0cmlidXRlKGVsZW1lbnQsIHRoaXNBdHRyaWJ1dGUpO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIGxldCBkID0gJyc7XHJcblxyXG4gICAgICAgIHZhciBoYW5kbGVEcmF3ID0gKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBkICs9IGAgJHt4fSAke3l9YDtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkJywgZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaGFuZGxlRXJhc2VyID0gKG9mZnNldHM6IEFycmF5PEFycmF5PG51bWJlcj4+KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB4MTogbnVtYmVyID0gOTk5OSwgeTE6IG51bWJlciA9IDk5OTksIHgyOiBudW1iZXIgPSAtOTk5OSwgeTI6IG51bWJlciA9IC05OTk5O1xyXG5cclxuICAgICAgICAgICAgb2Zmc2V0cy5mb3JFYWNoKG9mZnNldCA9PiB7XHJcbiAgICAgICAgICAgICAgICB4MSA9IE1hdGgubWluKHgxLCBvZmZzZXRbMF0pO1xyXG4gICAgICAgICAgICAgICAgeTEgPSBNYXRoLm1pbih5MSwgb2Zmc2V0WzFdKTtcclxuICAgICAgICAgICAgICAgIHgyID0gTWF0aC5tYXgoeDIsIG9mZnNldFswXSk7XHJcbiAgICAgICAgICAgICAgICB5MiA9IE1hdGgubWF4KHkyLCBvZmZzZXRbMV0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHNpemUgPSBpY2R0X09mZnNldDJTaXplKHgxLCB5MSwgeDIsIHkyLCB7IHBvaW50czogb2Zmc2V0cyB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcblxyXG4gICAgICAgICAgICBsZXQgbm9kZUlkcyA9IGljZHQuZGF0YS5nZXROb2RlSW5BcmVhKDAsIDAsIDE5MjAsIDE5MjAsIFZfU2hhcGVUeXBlLlBBVEgpO1xyXG5cclxuICAgICAgICAgICAgbm9kZUlkcy5mb3JFYWNoKChub2RlSWQ6IG51bWJlcikgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBub2RlID0gaWNkdC5kYXRhLmdldE5vZGUobm9kZUlkKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgcG9pbnRzID0gbGliX2VyYXNlKG5vZGUuc2l6ZS5wb2ludHMsIG9mZnNldHMsIDIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHBvaW50cyk7XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN0YXJ0OiAob2Zmc2V0OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkID0gYE0gJHtvZmZzZXQueH0gJHtvZmZzZXQueX0gTCAke29mZnNldC54fSAke29mZnNldC55fWA7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1vdmU6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0sIG9mZnNldHM6IEFycmF5PEFycmF5PG51bWJlcj4+KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVEcmF3KG9mZnNldC54LCBvZmZzZXQueSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVuZDogKG9mZnNldDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSwgb2Zmc2V0czogQXJyYXk8QXJyYXk8bnVtYmVyPj4pID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlRXJhc2VyKG9mZnNldHMpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgeyBpY2R0X1BvaW50ZXJFdmVudCwgaWNkdF9Qb2ludGVyRXZlbnRzIH0gZnJvbSBcIi4uLy4uL3BvaW50ZXIvcG9pbnRlci1ldmVudFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z0ZvcmVpZ25PYmplY3RDcmVhdGUgfSBmcm9tIFwiLi4vc2hhcGUvc3ZnL2ZvcmVpZ25vYmplY3Qvc3ZnLWZvcmVpZ25vYmplY3QtY3JlYXRlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9Gb3JlaWduT2JqZWN0Q29tcG9uZW50ID0gKGV2ZW50czogeyBtb3VzZUV2ZW50PzogTW91c2VFdmVudCwgdG91Y2hFdmVudD86IFRvdWNoRXZlbnQgfSkgPT4ge1xyXG4gICAgaWNkdF9Qb2ludGVyRXZlbnRzKGV2ZW50cywgbmV3IGljZHRfU3ZnRm9yZWlnbk9iamVjdENyZWF0ZSgpKTtcclxufSIsImltcG9ydCB7IGljZHQgfSBmcm9tIFwiLi4vLi4vLi4vcHJvdG90eXBlL2ljZHRcIjtcclxuaW1wb3J0IHsgaWNkdF9Qb2ludGVyRXZlbnQsIGljZHRfUG9pbnRlckV2ZW50cyB9IGZyb20gXCIuLi8uLi9wb2ludGVyL3BvaW50ZXItZXZlbnRcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X0hhbmRDb21wb25lbnQgPSAoZXZlbnRzOiB7IG1vdXNlRXZlbnQ/OiBNb3VzZUV2ZW50LCB0b3VjaEV2ZW50PzogVG91Y2hFdmVudCB9KSA9PiB7XHJcbiAgICAvL2ljZHRfUG9pbnRlckV2ZW50cyhldmVudHMsIG5ldyBpY2R0X0hhbmRfUG9pbnRlckV2ZW50KCksIDEpO1xyXG4gICAgaWNkdF9Qb2ludGVyRXZlbnRzKGV2ZW50cywgbmV3IGljZHRfSGFuZF9Qb2ludGVyRXZlbnQoKSwgMSwgeyB4OiAwLCB5OiAwIH0pO1xyXG59XHJcblxyXG5jbGFzcyBpY2R0X0hhbmRfUG9pbnRlckV2ZW50IHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgbGV0IHsgeCwgeSB9ID0gaWNkdC5zY3JlZW4uZGlzbG9jYXRpb247XHJcblxyXG4gICAgICAgIHZhciBoYW5kbGUgPSAoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICBpY2R0LnNjcmVlbi5tb3ZlKHsgeCwgeSB9LCB7XHJcbiAgICAgICAgICAgICAgICB4OiAoeDIgLSB4MSksXHJcbiAgICAgICAgICAgICAgICB5OiAoeTIgLSB5MSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdGFydDogKG9mZnNldDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbW92ZTogKG9mZnNldDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSwgb2Zmc2V0czogQXJyYXk8QXJyYXk8bnVtYmVyPj4pID0+IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZShvZmZzZXRzWzBdWzBdLCBvZmZzZXRzWzBdWzFdLCBvZmZzZXQueCwgb2Zmc2V0LnkpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbmQ6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0sIG9mZnNldHM6IEFycmF5PEFycmF5PG51bWJlcj4+KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGUob2Zmc2V0c1swXVswXSwgb2Zmc2V0c1swXVsxXSwgb2Zmc2V0LngsIG9mZnNldC55KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgeyBpY2R0X1BvaW50ZXJFdmVudCwgaWNkdF9Qb2ludGVyRXZlbnRzIH0gZnJvbSBcIi4uLy4uL3BvaW50ZXIvcG9pbnRlci1ldmVudFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z0ltYWdlQ3JlYXRlIH0gZnJvbSBcIi4uL3NoYXBlL3N2Zy9pbWFnZS9zdmctaW1hZ2UtY3JlYXRlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9JbWFnZUNvbXBvbmVudCA9IChldmVudHM6IHsgbW91c2VFdmVudD86IE1vdXNlRXZlbnQsIHRvdWNoRXZlbnQ/OiBUb3VjaEV2ZW50IH0pID0+IHtcclxuICAgIGljZHRfUG9pbnRlckV2ZW50cyhldmVudHMsIG5ldyBpY2R0X1N2Z0ltYWdlQ3JlYXRlKCkpO1xyXG59IiwiaW1wb3J0IHsgVl9JRCB9IGZyb20gXCIuLi8uLi8uLi9sb29rdXAvVl9JRFwiO1xyXG5pbXBvcnQgeyBpY2R0IH0gZnJvbSBcIi4uLy4uLy4uL3Byb3RvdHlwZS9pY2R0XCI7XHJcbmltcG9ydCB7IGljZHRfU2NhbiB9IGZyb20gXCIuL3NjYW4vc2NhblwiO1xyXG5pbXBvcnQgeyBpY2R0X0lEYXRhTm9kZSwgaWNkdF9JRGF0YVNsaWRlIH0gZnJvbSBcIi4uLy4uLy4uL2ludGVyZmFjZS9JRGF0YVNvdXJjZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbiwgc3luY05vZGVJbmRleCB9IGZyb20gXCIuLi8uLi9zeW5jLWVsZW1lbnQvc3ZnLWVsZW1lbnRcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X0luZGV4Q29tcG9uZW50ID0gKGV2ZW50czogeyBtb3VzZUV2ZW50PzogTW91c2VFdmVudCwgdG91Y2hFdmVudD86IFRvdWNoRXZlbnQgfSkgPT4ge1xyXG4gICAgbGV0IHRhcmdldCA9IChldmVudHMubW91c2VFdmVudD8udGFyZ2V0IHx8IGV2ZW50cy50b3VjaEV2ZW50Py50YXJnZXQpIGFzIEVsZW1lbnQsXHJcbiAgICAgICAgdGFyZ2V0SWQgPSB0YXJnZXQ/LmdldEF0dHJpYnV0ZSgnaWQnKSB8fCAnJyxcclxuICAgICAgICB0YXJnZXROYW1lID0gdGFyZ2V0Py5ub2RlTmFtZTtcclxuXHJcbiAgICAvL2xldCB0YXJnZXRQSWQxID0gKHRhcmdldD8ucGFyZW50Tm9kZSBhcyBFbGVtZW50KT8uZ2V0QXR0cmlidXRlKCdpZCcpIHx8ICcnO1xyXG4gICAgbGV0IHRhcmdldFBJZCA9IGpRdWVyeSh0YXJnZXQpLnBhcmVudHMoJ2dbaWRdJykuYXR0cignaWQnKSB8fCAnJztcclxuXHJcbiAgICAvL3RoYW8gdMOhYyB0csOqbiBjw6FjIGFuaCBlbSByZXNpemVcclxuICAgIGlmIChbVl9JRC5JTkRFWF9HUk9VUF0uaW5jbHVkZXModGFyZ2V0UElkKSkge1xyXG4gICAgICAgIC8vZXZlbnRzLm1vdXNlRXZlbnQ/LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIC8vZXZlbnRzLm1vdXNlRXZlbnQ/LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vcXXDqXQgY2jhu41uXHJcbiAgICBpZiAoZXZlbnRzLm1vdXNlRXZlbnQ/LmFsdEtleSB8fCBldmVudHMudG91Y2hFdmVudD8uYWx0S2V5IHx8ICF0YXJnZXRJZCB8fCB0YXJnZXRJZC5tYXRjaCgvW14wLTldLykgfHwgIWljZHQuZGF0YVNlbGVjdC5ub2RlTmFtZS5pbmNsdWRlcyh0YXJnZXROYW1lKSkge1xyXG4gICAgICAgIC8vaWNkdC5kYXRhU2VsZWN0LmlkcyA9IFtdO1xyXG4gICAgICAgIGljZHQuZGF0YVNlbGVjdC5pZHMubGVuZ3RoID8gaWNkdC5kYXRhU2VsZWN0LmlkcyA9IFtdIDogbnVsbDtcclxuXHJcbiAgICAgICAgLy9xdcOpdCBjaOG7jW4sIGto4bqjIGThu6VuZyDEkeG7kWkgduG7m2kgY2h14buZdCB0csOhaSwgaG/hurdjIHRvdWNoXHJcbiAgICAgICAgaWYgKGV2ZW50cy5tb3VzZUV2ZW50Py5idXR0b24gPT0gMCB8fCBldmVudHMudG91Y2hFdmVudCkge1xyXG4gICAgICAgICAgICBpY2R0X1NjYW4oZXZlbnRzLCBoYW5kbGVJbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy9t4bq3YyDEkeG7i25oIHRow6wgY2jhu41uIHbDoG8gxJHhu5FpIHTGsOG7o25nIHRow6wgc+G6vSBjaOG7jW4gxJHhu4MgZWRpdFxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgbGV0IG5vZGVJZCA9IHBhcnNlRmxvYXQodGFyZ2V0SWQgfHwgJzAnKTtcclxuXHJcbiAgICAgICAgLy/EkeG7kWkgdMaw4bujbmcgxJHGsOG7o2MgY2jhu41uXHJcbiAgICAgICAgaWYgKGV2ZW50cy5tb3VzZUV2ZW50Py5zaGlmdEtleSB8fCBldmVudHMudG91Y2hFdmVudD8uc2hpZnRLZXkpIHtcclxuICAgICAgICAgICAgaWNkdC5kYXRhU2VsZWN0LmlkcyA9IFtub2RlSWRdLmNvbmNhdChpY2R0LmRhdGFTZWxlY3QuaWRzKS5maWx0ZXIoKHZhbHVlLCBpbmRleCwgYXJyYXkpID0+IGFycmF5LmluZGV4T2YodmFsdWUpID09IGluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGljZHQuZGF0YVNlbGVjdC5pZHMgPSBbbm9kZUlkXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBub2RlcyA9IGljZHQuZGF0YVNlbGVjdC5ub2RlcztcclxuXHJcbiAgICAgICAgaGFuZGxlSW5kZXgobm9kZXMpO1xyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBoYW5kbGVJbmRleCA9IChub2RlczogQXJyYXk8aWNkdF9JRGF0YU5vZGU+KSA9PiB7XHJcblxyXG4gICAgbGV0IGlkeCA9IDE7XHJcblxyXG4gICAgaWYgKG5vZGVzLmxlbmd0aCkge1xyXG4gICAgICAgIGlkeCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIGljZHQuZGF0YS5zbGlkZT8uc3ZnPy5ub2Rlcy5tYXAobSA9PiBtLmlkeCA/PyAwKSA/PyBbMF0pICsgMTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobm9kZXMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICBpZiAoIW5vZGVzWzBdLmlkeCkge1xyXG4gICAgICAgICAgICBub2Rlc1swXS5pZHggPSBpZHg7XHJcbiAgICAgICAgICAgIG5vZGVzWzBdLnRpbWUgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKG5vZGVzLmxlbmd0aCA+PSAwKSB7XHJcblxyXG4gICAgICAgIGxldCBpZHhzID0gbm9kZXMubWFwKG0gPT4gbS5pZHggPz8gMCkuZmlsdGVyKGYgPT4gZiA+IDApO1xyXG5cclxuICAgICAgICBsZXQgbWluSWR4ID0gaWR4cy5sZW5ndGggPyBNYXRoLm1pbi5hcHBseShudWxsLCBpZHhzKSA6IGlkeDtcclxuXHJcbiAgICAgICAgbm9kZXMuZm9yRWFjaChub2RlID0+IHtcclxuICAgICAgICAgICAgbm9kZS5pZHggPSBtaW5JZHg7XHJcbiAgICAgICAgICAgIG5vZGUudGltZSA9IG5vZGUudGltZSA/PyAwO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vXHJcbiAgICBsZXQgZWxlR3JvdXAgPSBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbihWX0lELklOREVYX0dST1VQLCAnZycpO1xyXG4gICAgc3luY05vZGVJbmRleChlbGVHcm91cCwgaWNkdC5kYXRhLnNsaWRlPy5zdmc/Lm5vZGVzID8/IFtdKTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfU2xpZGVDbGVhck5vZGVJbmRleCA9IChzbGlkZT86IGljZHRfSURhdGFTbGlkZSkgPT4ge1xyXG4gICAgaWYgKHNsaWRlPy5zdmc/Lm5vZGVzKSB7XHJcbiAgICAgICAgc2xpZGUuc3ZnLm5vZGVzLmZvckVhY2gobm9kZSA9PiB7XHJcbiAgICAgICAgICAgIG5vZGUuaWR4ID0gMDtcclxuICAgICAgICAgICAgbm9kZS50aW1lID0gbnVsbDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvL1xyXG4gICAgbGV0IGVsZUdyb3VwID0gaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24oVl9JRC5JTkRFWF9HUk9VUCwgJ2cnKTtcclxuICAgIHN5bmNOb2RlSW5kZXgoZWxlR3JvdXAsIGljZHQuZGF0YS5zbGlkZT8uc3ZnPy5ub2RlcyA/PyBbXSk7XHJcbn0iLCJpbXBvcnQgeyBWX0lEIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2xvb2t1cC9WX0lEXCI7XHJcbmltcG9ydCB7IGljZHQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vcHJvdG90eXBlL2ljZHRcIjtcclxuaW1wb3J0IHsgaWNkdF9JRGF0YU5vZGVTaXplIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2ludGVyZmFjZS9JRGF0YVNvdXJjZVwiO1xyXG5pbXBvcnQgeyBpY2R0X09mZnNldDJTaXplIH0gZnJvbSBcIi4uLy4uLy4uL2hhbmRsZS9vZmZzZXRcIjtcclxuaW1wb3J0IHsgaWNkdF9Qb2ludGVyRXZlbnQsIGljZHRfUG9pbnRlckV2ZW50cyB9IGZyb20gXCIuLi8uLi8uLi9wb2ludGVyL3BvaW50ZXItZXZlbnRcIjtcclxuaW1wb3J0IHsgaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24sIHN5bmNOb2RlU2NhbiB9IGZyb20gXCIuLi8uLi8uLi9zeW5jLWVsZW1lbnQvc3ZnLWVsZW1lbnRcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X1NjYW4gPSAoZXZlbnRzOiB7IG1vdXNlRXZlbnQ/OiBNb3VzZUV2ZW50LCB0b3VjaEV2ZW50PzogVG91Y2hFdmVudCB9LCBjYWxsYmFjazogRnVuY3Rpb24pID0+IHtcclxuXHJcbiAgICBsZXQgeDE6IG51bWJlciA9IDAsXHJcbiAgICAgICAgeTE6IG51bWJlciA9IDAsXHJcbiAgICAgICAgeDI6IG51bWJlciA9IDEsXHJcbiAgICAgICAgeTI6IG51bWJlciA9IDE7XHJcblxyXG4gICAgbGV0IGVsZUdyb3VwID0gaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24oVl9JRC5TQ0FOX0dST1VQLCAnZycpO1xyXG5cclxuICAgIGxldCBzaXplID0gaWNkdF9PZmZzZXQyU2l6ZSh4MSwgeTEsIHgyLCB5Mik7XHJcblxyXG4gICAgc3luY05vZGVTY2FuKGVsZUdyb3VwLCBzaXplKTtcclxuXHJcbiAgICBtb3ZlKGV2ZW50cywgc2l6ZSwgZWxlR3JvdXAsIGNhbGxiYWNrKTtcclxufVxyXG5cclxuY29uc3QgbW92ZSA9IChldmVudHM6IHsgbW91c2VFdmVudD86IE1vdXNlRXZlbnQsIHRvdWNoRXZlbnQ/OiBUb3VjaEV2ZW50IH0sIHNpemU6IGljZHRfSURhdGFOb2RlU2l6ZSwgZWxlR3JvdXA6IEhUTUxFbGVtZW50LCBjYWxsYmFjazogRnVuY3Rpb24pID0+IHtcclxuXHJcbiAgICBsZXQgaGFuZGxlQXR0cmlidXRlID0gKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpID0+IHtcclxuXHJcbiAgICAgICAgc2l6ZSA9IGljZHRfT2Zmc2V0MlNpemUoeDEsIHkxLCB4MiwgeTIpO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIHN5bmNOb2RlU2NhbihlbGVHcm91cCwgc2l6ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGNvbXBvbmVudCA9IHtcclxuICAgICAgICBzdGFydDogKG9mZnNldDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSkgPT4ge1xyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbW92ZTogKG9mZnNldDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSwgb2Zmc2V0czogQXJyYXk8QXJyYXk8bnVtYmVyPj4pID0+IHtcclxuICAgICAgICAgICAgaGFuZGxlQXR0cmlidXRlKG9mZnNldHNbMF1bMF0sIG9mZnNldHNbMF1bMV0sIG9mZnNldC54LCBvZmZzZXQueSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbmQ6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0sIG9mZnNldHM6IEFycmF5PEFycmF5PG51bWJlcj4+KSA9PiB7XHJcbiAgICAgICAgICAgIC8vaGFuZGxlQXR0cmlidXRlKG9mZnNldHNbMF1bMF0sIG9mZnNldHNbMF1bMV0sIG9mZnNldC54LCBvZmZzZXQueSk7XHJcblxyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICBlbGVHcm91cD8ucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICBpY2R0LmRhdGFTZWxlY3QuaWRzID0gaWNkdC5kYXRhLmdldE5vZGVJbkFyZWEoXHJcbiAgICAgICAgICAgICAgICBNYXRoLm1pbihvZmZzZXRzWzBdWzBdLCBvZmZzZXQueCksXHJcbiAgICAgICAgICAgICAgICBNYXRoLm1pbihvZmZzZXRzWzBdWzFdLCBvZmZzZXQueSksXHJcbiAgICAgICAgICAgICAgICBNYXRoLm1heChvZmZzZXRzWzBdWzBdLCBvZmZzZXQueCksXHJcbiAgICAgICAgICAgICAgICBNYXRoLm1heChvZmZzZXRzWzBdWzFdLCBvZmZzZXQueSlcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBub2RlcyA9IGljZHQuZGF0YVNlbGVjdC5ub2RlcztcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIGNhbGxiYWNrKG5vZGVzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWNkdF9Qb2ludGVyRXZlbnRzKGV2ZW50cywgY29tcG9uZW50KTtcclxufSIsImltcG9ydCB7IExvY2FsU3RvcmFnZV9HZXRDbGlwYm9hcmQsIExvY2FsU3RvcmFnZV9TZXRDbGlwYm9hcmQgfSBmcm9tIFwiLi4vLi4vLi4vbGliL2xvY2FsLXN0b3JhZ2VcIjtcclxuaW1wb3J0IHsgVl9LZXlib2FyZCB9IGZyb20gXCIuLi8uLi8uLi9sb29rdXAvVl9LZXlib2FyZFwiO1xyXG5pbXBvcnQgeyBWX1BvaW50ZXJUeXBlIH0gZnJvbSBcIi4uLy4uLy4uL2xvb2t1cC9WX1BvaW50ZXJUeXBlXCI7XHJcbmltcG9ydCB7IGljZHQgfSBmcm9tIFwiLi4vLi4vLi4vcHJvdG90eXBlL2ljZHRcIjtcclxuaW1wb3J0IHsgaWNkdF9SZXNpemUgfSBmcm9tIFwiLi4vcG9pbnRlci9yZXNpemUvcmVzaXplXCI7XHJcbmltcG9ydCB7IGljZHRfU2VsZWN0IH0gZnJvbSBcIi4uL3BvaW50ZXIvc2VsZWN0L3NlbGVjdFwiO1xyXG5pbXBvcnQgeyBpY2R0X0lEYXRhTm9kZSB9IGZyb20gXCIuLi8uLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuaW1wb3J0IHsgaWNkdF9SZW5kZXJDb21wb25lbnQgfSBmcm9tIFwiLi4vcmVuZGVyLWNvbXBvbmVudFwiO1xyXG5pbXBvcnQgeyBpY2R0X1NjYWxlTnVtYmVyIH0gZnJvbSBcIi4uLy4uL2hhbmRsZS9zY2FsZS1udW1iZXJcIjtcclxuaW1wb3J0IHsgaWNkdF9Sb3VuZE51bWJlciB9IGZyb20gXCIuLi8uLi9oYW5kbGUvcm91bmQtbnVtYmVyXCI7XHJcbmltcG9ydCB7IHNpemVYLCBzaXplWSB9IGZyb20gXCIuLi8uLi9oYW5kbGUvc2l6ZVwiO1xyXG5cclxuY2xhc3MgaWNkdF9LZXlib2FyZF9DdWN1YyB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIC8vYuG7jyBjaOG7jW4gbm9kZVxyXG4gICAgICAgIHRoaXMub25jaGFuZ2UgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdrZXlkb3duJyxcclxuICAgICAgICAgICAga2V5OiBWX0tleWJvYXJkLkVzY2FwZSxcclxuICAgICAgICAgICAgZm46ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGljZHQuZGF0YVNlbGVjdC5pZHMubGVuZ3RoID8gaWNkdC5kYXRhU2VsZWN0LmlkcyA9IFtdIDogbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8veMOzYSBjw6FjIG5vZGUgxJHDoyBjaOG7jW5cclxuICAgICAgICB0aGlzLm9uY2hhbmdlID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAna2V5ZG93bicsXHJcbiAgICAgICAgICAgIGtleTogVl9LZXlib2FyZC5EZWxldGUsXHJcbiAgICAgICAgICAgIGZuOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpY2R0LmRhdGFTZWxlY3QuZGVsZXRlTm9kZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9jaHV54buDbiDEkeG7lWkgbmhhbmggY29uIHRy4buPIHbhu4EgZOG6oW5nIG1vdmVcclxuICAgICAgICB0aGlzLm9uY2hhbmdlID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAna2V5ZG93bicsXHJcbiAgICAgICAgICAgIGtleTogVl9LZXlib2FyZC5TcGFjZSxcclxuICAgICAgICAgICAgZm46ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGljZHQucG9pbnRlci5wb2ludGVyX3R5cGVfdGVtcCA9IFZfUG9pbnRlclR5cGUuSEFORDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5vbmNoYW5nZSA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ2tleXVwJyxcclxuICAgICAgICAgICAga2V5OiBWX0tleWJvYXJkLlNwYWNlLFxyXG4gICAgICAgICAgICBmbjogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWNkdC5wb2ludGVyLnBvaW50ZXJfdHlwZV90ZW1wID0gVl9Qb2ludGVyVHlwZS5QT0lOVEVSO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9jaHV54buDbiB0cmFuZ1xyXG4gICAgICAgIHRoaXMub25jaGFuZ2UgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdrZXlkb3duJyxcclxuICAgICAgICAgICAga2V5OiBWX0tleWJvYXJkLkFycm93TGVmdCxcclxuICAgICAgICAgICAgZm46ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghaWNkdC5kYXRhU2VsZWN0Lmlkcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpY2R0LmRhdGEuYmFja1NsaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMub25jaGFuZ2UgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdrZXlkb3duJyxcclxuICAgICAgICAgICAga2V5OiBWX0tleWJvYXJkLkFycm93UmlnaHQsXHJcbiAgICAgICAgICAgIGZuOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWljZHQuZGF0YVNlbGVjdC5pZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdC5kYXRhLm5leHRTbGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9kaSBjaHV54buDbiBub2RlIMSRw6MgY2jhu41uXHJcbiAgICAgICAgdGhpcy5vbmNoYW5nZSA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ2tleWRvd24nLFxyXG4gICAgICAgICAgICBrZXk6IFZfS2V5Ym9hcmQuQXJyb3dMZWZ0LFxyXG4gICAgICAgICAgICBmbjogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGljZHQuZGF0YVNlbGVjdC5pZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdC5kYXRhU2VsZWN0Lm5vZGVzLmZvckVhY2gobm9kZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemVYKG5vZGUsIGljZHRfUm91bmROdW1iZXIobm9kZS5zaXplLnggLSBpY2R0X1NjYWxlTnVtYmVyKDEpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vduG6vSBs4bqhaSBraHVuZyBjaOG7jW5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaWNkdC5kYXRhU2VsZWN0Lmlkcy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY2R0X1Jlc2l6ZShpY2R0LmRhdGFTZWxlY3Qubm9kZXNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNkdF9TZWxlY3QoaWNkdC5kYXRhU2VsZWN0Lm5vZGVzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMub25jaGFuZ2UgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdrZXlkb3duJyxcclxuICAgICAgICAgICAga2V5OiBWX0tleWJvYXJkLkFycm93UmlnaHQsXHJcbiAgICAgICAgICAgIGZuOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaWNkdC5kYXRhU2VsZWN0Lmlkcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpY2R0LmRhdGFTZWxlY3Qubm9kZXMuZm9yRWFjaChub2RlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZVgobm9kZSwgaWNkdF9Sb3VuZE51bWJlcihub2RlLnNpemUueCArIGljZHRfU2NhbGVOdW1iZXIoMSkpKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy924bq9IGzhuqFpIGtodW5nIGNo4buNblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpY2R0LmRhdGFTZWxlY3QuaWRzLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljZHRfUmVzaXplKGljZHQuZGF0YVNlbGVjdC5ub2Rlc1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY2R0X1NlbGVjdChpY2R0LmRhdGFTZWxlY3Qubm9kZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5vbmNoYW5nZSA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ2tleWRvd24nLFxyXG4gICAgICAgICAgICBrZXk6IFZfS2V5Ym9hcmQuQXJyb3dVcCxcclxuICAgICAgICAgICAgZm46ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpY2R0LmRhdGFTZWxlY3QuaWRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGljZHQuZGF0YVNlbGVjdC5ub2Rlcy5mb3JFYWNoKG5vZGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplWShub2RlLCBpY2R0X1JvdW5kTnVtYmVyKG5vZGUuc2l6ZS55IC0gaWNkdF9TY2FsZU51bWJlcigxKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3bhur0gbOG6oWkga2h1bmcgY2jhu41uXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGljZHQuZGF0YVNlbGVjdC5pZHMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNkdF9SZXNpemUoaWNkdC5kYXRhU2VsZWN0Lm5vZGVzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljZHRfU2VsZWN0KGljZHQuZGF0YVNlbGVjdC5ub2Rlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLm9uY2hhbmdlID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAna2V5ZG93bicsXHJcbiAgICAgICAgICAgIGtleTogVl9LZXlib2FyZC5BcnJvd0Rvd24sXHJcbiAgICAgICAgICAgIGZuOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaWNkdC5kYXRhU2VsZWN0Lmlkcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpY2R0LmRhdGFTZWxlY3Qubm9kZXMuZm9yRWFjaChub2RlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZVkobm9kZSwgaWNkdF9Sb3VuZE51bWJlcihub2RlLnNpemUueSArIGljZHRfU2NhbGVOdW1iZXIoMSkpKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy924bq9IGzhuqFpIGtodW5nIGNo4buNblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpY2R0LmRhdGFTZWxlY3QuaWRzLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljZHRfUmVzaXplKGljZHQuZGF0YVNlbGVjdC5ub2Rlc1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY2R0X1NlbGVjdChpY2R0LmRhdGFTZWxlY3Qubm9kZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vY8SDbiBs4bqhaSBtw6BuIGjDrG5oIHbhu4EgdHJ1bmcgdMOibVxyXG4gICAgICAgIHRoaXMub25jaGFuZ2UgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdrZXlkb3duJyxcclxuICAgICAgICAgICAga2V5OiBWX0tleWJvYXJkLkRpZ2l0MSxcclxuICAgICAgICAgICAgZm46IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdC5yZWxvYWRWaWV3KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdC5zY3JlZW4uem9vbVRvID0gJ2ZpdCc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL2No4buNbiB04bqldCBj4bqjXHJcbiAgICAgICAgdGhpcy5vbmNoYW5nZSA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ2tleWRvd24nLFxyXG4gICAgICAgICAgICBrZXk6IFZfS2V5Ym9hcmQuS2V5QSxcclxuICAgICAgICAgICAgZm46IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmN0cmxLZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpY2R0LmRhdGFTZWxlY3QuaWRzID0gaWNkdC5kYXRhLmdldE5vZGVBbGwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5vZGVzID0gaWNkdC5kYXRhU2VsZWN0Lm5vZGVzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZXMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy904bqhbyBjw6FjIG7DunQgdGhheSDEkeG7lWkga8OtY2ggdGjGsOG7m2NcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNkdF9SZXNpemUobm9kZXNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChub2Rlcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vduG6vSBraHVuZyBjaOG7jW4gbmhp4buBdSDEkeG7kWkgdMaw4bujbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNkdF9TZWxlY3Qobm9kZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vc2FvIGNow6lwXHJcbiAgICAgICAgdGhpcy5vbmNoYW5nZSA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ2tleWRvd24nLFxyXG4gICAgICAgICAgICBrZXk6IFZfS2V5Ym9hcmQuS2V5QyxcclxuICAgICAgICAgICAgZm46IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmN0cmxLZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbm9kZXMgPSBpY2R0LmRhdGFTZWxlY3Qubm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvY2FsU3RvcmFnZV9TZXRDbGlwYm9hcmQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vZGVzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2Rlczogbm9kZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9kw6FuIGThu68gbGnhu4d1IMSRw6Mgc2FvIGNow6lwXHJcbiAgICAgICAgdGhpcy5vbmNoYW5nZSA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ2tleWRvd24nLFxyXG4gICAgICAgICAgICBrZXk6IFZfS2V5Ym9hcmQuS2V5VixcclxuICAgICAgICAgICAgZm46IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmN0cmxLZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2NhbFN0b3JhZ2VfR2V0Q2xpcGJvYXJkKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IChyZXM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcz8udHlwZSA9PSAnbm9kZXMnICYmIHJlcz8ubm9kZXM/Lmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXM/Lm5vZGVzPy5mb3JFYWNoKChub2RlOiBpY2R0X0lEYXRhTm9kZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAoaWNkdC5kYXRhLmZpbmROb2RlKG5vZGUuaWQpLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBub2RlLnNpemUueCArPSAxMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIG5vZGUuc2l6ZS55ICs9IDEwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmlkID0gTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYWRkIG5vZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNkdC5kYXRhLm5vZGUgPSBub2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljZHRfUmVuZGVyQ29tcG9uZW50KGljZHQuZGF0YS5zbGlkZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vdW5kbyAtIHJlZG9cclxuICAgICAgICB0aGlzLm9uY2hhbmdlID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAna2V5ZG93bicsXHJcbiAgICAgICAgICAgIGtleTogVl9LZXlib2FyZC5LZXlaLFxyXG4gICAgICAgICAgICBmbjogKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuY3RybEtleSAmJiBldmVudC5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGljZHQuaGlzdG9yeS5yZWRvKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChldmVudC5jdHJsS2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdC5oaXN0b3J5LnVuZG8oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vc2VuZFRvQmFja1xyXG4gICAgICAgIHRoaXMub25jaGFuZ2UgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdrZXlkb3duJyxcclxuICAgICAgICAgICAga2V5OiBWX0tleWJvYXJkLkJyYWNrZXRMZWZ0LFxyXG4gICAgICAgICAgICBmbjogKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuY3RybEtleSAmJiBldmVudC5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGljZHQuZGF0YS5zZW5kVG9CYWNrKGljZHQuZGF0YVNlbGVjdC5pZHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQuY3RybEtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGljZHQuZGF0YS5zZW5kVG9CYWNrU3RlcChpY2R0LmRhdGFTZWxlY3QuaWRzLCAtMik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpY2R0LmRhdGEuc2VuZFRvQmFja0FyZWEoaWNkdC5kYXRhU2VsZWN0Lmlkcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL2JyaW5nVG9Gcm9udFxyXG4gICAgICAgIHRoaXMub25jaGFuZ2UgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdrZXlkb3duJyxcclxuICAgICAgICAgICAga2V5OiBWX0tleWJvYXJkLkJyYWNrZXRSaWdodCxcclxuICAgICAgICAgICAgZm46IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmN0cmxLZXkgJiYgZXZlbnQuc2hpZnRLZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpY2R0LmRhdGEuYnJpbmdUb0Zyb250KGljZHQuZGF0YVNlbGVjdC5pZHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQuY3RybEtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGljZHQuZGF0YS5icmluZ1RvRnJvbnRTdGVwKGljZHQuZGF0YVNlbGVjdC5pZHMsIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdC5kYXRhLmJyaW5nVG9Gcm9udEFyZWEoaWNkdC5kYXRhU2VsZWN0Lmlkcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2ZuQ2hhbmdlczogQXJyYXk8eyBldmVudFR5cGU6ICdrZXlkb3duJyB8ICdrZXl1cCcsIGV2ZW50S2V5OiBudW1iZXIsIGZuczogQXJyYXk8RnVuY3Rpb24+IH0+ID0gW107XHJcbiAgICBzZXQgb25jaGFuZ2UoZGF0YTogeyB0eXBlOiAna2V5ZG93bicgfCAna2V5dXAnLCBrZXk6IG51bWJlciwgZm46IEZ1bmN0aW9uIH0pIHtcclxuICAgICAgICBsZXQga2V5Rm4gPSB0aGlzLl9mbkNoYW5nZXMuZmluZChmID0+IGYuZXZlbnRUeXBlID09IGRhdGEudHlwZSAmJiBmLmV2ZW50S2V5ID09IGRhdGEua2V5KTtcclxuICAgICAgICBpZiAoa2V5Rm4pIHtcclxuICAgICAgICAgICAga2V5Rm4uZm5zLnB1c2goZGF0YS5mbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9mbkNoYW5nZXMucHVzaCh7IGV2ZW50VHlwZTogZGF0YS50eXBlLCBldmVudEtleTogZGF0YS5rZXksIGZuczogW2RhdGEuZm5dIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNoYW5nZShldmVudFR5cGU6IHN0cmluZywgZXZlbnRLZXk6IG51bWJlciwga2JFdmVudDogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgICAgIHRoaXMuX2ZuQ2hhbmdlcy5maW5kKGYgPT4gZi5ldmVudFR5cGUgPT0gZXZlbnRUeXBlICYmIGYuZXZlbnRLZXkgPT0gZXZlbnRLZXkpPy5mbnMuZm9yRWFjaChmbiA9PiBmbihrYkV2ZW50KSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X0tleWJvYXJkID0gbmV3IGljZHRfS2V5Ym9hcmRfQ3VjdWMoKTtcclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X0tleWJvYXJkQ29tcG9uZW50ID0gKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcbiAgICBpY2R0X0tleWJvYXJkLmNoYW5nZShldmVudC50eXBlLCBldmVudC5rZXlDb2RlIHx8IGV2ZW50LndoaWNoIHx8IGV2ZW50LmNoYXJDb2RlIHx8IDAsIGV2ZW50KTtcclxufSIsImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcclxuaW1wb3J0IHsgaWNkdF9TdmdQYXRoIH0gZnJvbSBcIi4uLy4uL3NoYXBlL3N2Zy9wYXRoL3N2Zy1wYXRoXCI7XHJcbmltcG9ydCB7IFZfU2hhcGVUeXBlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2xvb2t1cC9WX1NoYXBlVHlwZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1N5bmNTdmdOb2RlQXR0cmlidXRlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3NjcmlwdC9zeW5jLWVsZW1lbnQvc3ZnLWVsZW1lbnRcIjtcclxuaW1wb3J0IHsgaWNkdCB9IGZyb20gXCIuLi8uLi8uLi8uLi9wcm90b3R5cGUvaWNkdFwiO1xyXG5pbXBvcnQgeyBpY2R0X0lEYXRhTm9kZUF0dHJpYnV0ZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuaW1wb3J0IHsgaWNkdF9BZGFwdGVyX1BhdGhEXzJfUG9pbnRNYXBzLCBpY2R0X0FkYXB0ZXJfUG9pbnRNYXBzXzJfUmF0aW9NYXBzLCBpY2R0X0FkYXB0ZXJfUG9pbnRNYXBzX0V4dHJhY3RfTWluTWF4WFkgfSBmcm9tIFwiLi4vLi4vLi4vLi4vZnVuYy9hZGFwdGVyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgaWNkdF9EcmF3IHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgbGV0IHRoaXNBdHRyaWJ1dGUgPSB7XHJcbiAgICAgICAgICAgIHN0cm9rZTogaWNkdC5hdHRyaWJ1dGUuc3Ryb2tlLFxyXG4gICAgICAgICAgICBzdHJva2VXaWR0aDogaWNkdC5hdHRyaWJ1dGUuc3Ryb2tlV2lkdGgsXHJcbiAgICAgICAgICAgIHN0cm9rZUxpbmVjYXA6ICdyb3VuZCcsXHJcbiAgICAgICAgICAgIHN0cm9rZUxpbmVqb2luOiAncm91bmQnLFxyXG4gICAgICAgIH0gYXMgaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGU7XHJcblxyXG4gICAgICAgIGxldCB7IG5vZGVJZCwgZWxlbWVudCwgYXR0cmlidXRlLCBzaXplIH0gPSBpY2R0X1N2Z1BhdGgoTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDAwKSwgeyBhdHRyaWJ1dGU6IHRoaXNBdHRyaWJ1dGUgfSk7XHJcblxyXG4gICAgICAgIC8vIHZhciBoYW5kbGVBdHRyaWJ1dGUgPSAob2Zmc2V0czogQXJyYXk8QXJyYXk8bnVtYmVyPj4pID0+IHtcclxuXHJcbiAgICAgICAgLy8gICAgIGxldCB4MTogbnVtYmVyID0gOTk5OSwgeTE6IG51bWJlciA9IDk5OTksIHgyOiBudW1iZXIgPSAtOTk5OSwgeTI6IG51bWJlciA9IC05OTk5O1xyXG5cclxuICAgICAgICAvLyAgICAgb2Zmc2V0cy5mb3JFYWNoKG9mZnNldCA9PiB7XHJcbiAgICAgICAgLy8gICAgICAgICB4MSA9IE1hdGgubWluKHgxLCBvZmZzZXRbMF0pO1xyXG4gICAgICAgIC8vICAgICAgICAgeTEgPSBNYXRoLm1pbih5MSwgb2Zmc2V0WzFdKTtcclxuICAgICAgICAvLyAgICAgICAgIHgyID0gTWF0aC5tYXgoeDIsIG9mZnNldFswXSk7XHJcbiAgICAgICAgLy8gICAgICAgICB5MiA9IE1hdGgubWF4KHkyLCBvZmZzZXRbMV0pO1xyXG4gICAgICAgIC8vICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gICAgIHNpemUgPSBpY2R0X09mZnNldDJTaXplKHgxLCB5MSwgeDIsIHkyLCB7IHBvaW50czogb2Zmc2V0cyB9KTtcclxuXHJcbiAgICAgICAgLy8gICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKFZfU2hhcGVUeXBlLlBBVEgsIHNpemUsIGF0dHJpYnV0ZSksIHRoaXNBdHRyaWJ1dGUpO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICBpY2R0X1N5bmNTdmdOb2RlQXR0cmlidXRlKGVsZW1lbnQsIGF0dHJpYnV0ZSk7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgbGV0IGQgPSAnJywgZDNfcGF0aCA9ICcnO1xyXG5cclxuICAgICAgICB2YXIgaGFuZGxlQXR0cmlidXRlID0gKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBkICs9IGAgJHt4fSAke3l9YDtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkJywgZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB2YXIgaGFuZGxlQXR0cmlidXRlMyA9IChvZmZzZXRzOiBhbnkpID0+IHtcclxuXHJcbiAgICAgICAgLy8gICAgIGlmIChvZmZzZXRzLmxlbmd0aCA+PSAzKSB7XHJcbiAgICAgICAgLy8gICAgICAgICBsZXQgZDNMaW5lQ3VydmUgPSBkMy5saW5lKCkueChkID0+IGRbMF0pLnkoZCA9PiBkWzFdKS5jdXJ2ZShkMy5jdXJ2ZUJhc2lzKTtcclxuXHJcbiAgICAgICAgLy8gICAgICAgICBkM19wYXRoID0gZDNMaW5lQ3VydmUob2Zmc2V0cykgPz8gJyc7XHJcblxyXG4gICAgICAgIC8vICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2QnLCBkM19wYXRoKTtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vICAgICBlbHNlIHtcclxuICAgICAgICAvLyAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkJywgZCk7XHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3RhcnQ6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0pID0+IHtcclxuICAgICAgICAgICAgICAgIGQgPSBgTSAke29mZnNldC54fSAke29mZnNldC55fSBMICR7b2Zmc2V0Lnh9ICR7b2Zmc2V0Lnl9YDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbW92ZTogKG9mZnNldDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSwgb2Zmc2V0czogQXJyYXk8QXJyYXk8bnVtYmVyPj4pID0+IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUF0dHJpYnV0ZShvZmZzZXQueCwgb2Zmc2V0LnkpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbmQ6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0sIG9mZnNldHM6IEFycmF5PEFycmF5PG51bWJlcj4+KSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9kMyBzbW9vdGggbGluZVxyXG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldHMubGVuZ3RoID49IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZDNMaW5lQ3VydmUgPSBkMy5saW5lKCkueChkID0+IGRbMF0pLnkoZCA9PiBkWzFdKS5jdXJ2ZShkMy5jdXJ2ZUJhc2lzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZDNfcGF0aCA9IGQzTGluZUN1cnZlKG9mZnNldHMgYXMgYW55KSA/PyAnJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2QnLCBkM19wYXRoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkJywgZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIGxldCBwb2ludE1hcHMgPSBpY2R0X0FkYXB0ZXJfUGF0aERfMl9Qb2ludE1hcHMoZDNfcGF0aCB8fCBkKTtcclxuICAgICAgICAgICAgICAgIGxldCB7IG1pblgsIG1pblksIG1heFgsIG1heFkgfSA9IGljZHRfQWRhcHRlcl9Qb2ludE1hcHNfRXh0cmFjdF9NaW5NYXhYWShwb2ludE1hcHMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHNpemUueCA9IG1pblg7XHJcbiAgICAgICAgICAgICAgICBzaXplLnkgPSBtaW5ZO1xyXG4gICAgICAgICAgICAgICAgc2l6ZS53aWR0aCA9IChtYXhYIC0gbWluWCkgfHwgMTtcclxuICAgICAgICAgICAgICAgIHNpemUuaGVpZ2h0ID0gKG1heFkgLSBtaW5ZKSB8fCAxO1xyXG4gICAgICAgICAgICAgICAgc2l6ZS5yYXRpb01hcHMgPSBpY2R0X0FkYXB0ZXJfUG9pbnRNYXBzXzJfUmF0aW9NYXBzKHNpemUsIHBvaW50TWFwcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zYXZlIGNyZWF0ZVxyXG4gICAgICAgICAgICAgICAgaWNkdC5kYXRhLm5vZGUgPSBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogbm9kZUlkLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFZfU2hhcGVUeXBlLlBBVEgsXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1BhdGgnXHJcbiAgICAgICAgICAgICAgICB9LCB7IHNpemU6IHNpemUsIGF0dHJpYnV0ZTogYXR0cmlidXRlIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCB7IGljZHRfU3ZnUGF0aCB9IGZyb20gXCIuLi8uLi9zaGFwZS9zdmcvcGF0aC9zdmctcGF0aFwiO1xyXG5pbXBvcnQgeyBWX1NoYXBlVHlwZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9sb29rdXAvVl9TaGFwZVR5cGVcIjtcclxuaW1wb3J0IHsgaWNkdF9TeW5jU3ZnTm9kZUF0dHJpYnV0ZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9zY3JpcHQvc3luYy1lbGVtZW50L3N2Zy1lbGVtZW50XCI7XHJcbmltcG9ydCB7IGljZHQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vcHJvdG90eXBlL2ljZHRcIjtcclxuaW1wb3J0IHsgaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vaW50ZXJmYWNlL0lEYXRhU291cmNlXCI7XHJcbmltcG9ydCB7IGljZHRfQWRhcHRlcl9QYXRoRF8yX1BvaW50TWFwcywgaWNkdF9BZGFwdGVyX1BvaW50TWFwc18yX1JhdGlvTWFwcywgaWNkdF9BZGFwdGVyX1BvaW50TWFwc19FeHRyYWN0X01pbk1heFhZIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2Z1bmMvYWRhcHRlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIGljZHRfSGlnaGxpZ2h0IHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgbGV0IHRoaXNBdHRyaWJ1dGUgPSB7XHJcbiAgICAgICAgICAgIHN0cm9rZTogaWNkdC5hdHRyaWJ1dGUuc3Ryb2tlLFxyXG4gICAgICAgICAgICBzdHJva2VPcGFjaXR5OiAwLjQsXHJcbiAgICAgICAgICAgIHN0cm9rZVdpZHRoOiBpY2R0LmF0dHJpYnV0ZS5zdHJva2VXaWR0aCxcclxuICAgICAgICAgICAgc3Ryb2tlTGluZWNhcDogJ3JvdW5kJyxcclxuICAgICAgICAgICAgc3Ryb2tlTGluZWpvaW46ICdyb3VuZCcsXHJcbiAgICAgICAgfSBhcyBpY2R0X0lEYXRhTm9kZUF0dHJpYnV0ZTtcclxuXHJcbiAgICAgICAgbGV0IHsgbm9kZUlkLCBlbGVtZW50LCBhdHRyaWJ1dGUsIHNpemUgfSA9IGljZHRfU3ZnUGF0aChNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMDApLCB7IGF0dHJpYnV0ZTogdGhpc0F0dHJpYnV0ZSB9KTtcclxuXHJcbiAgICAgICAgLy8gdmFyIGhhbmRsZUF0dHJpYnV0ZSA9IChvZmZzZXRzOiBBcnJheTxBcnJheTxudW1iZXI+PikgPT4ge1xyXG5cclxuICAgICAgICAvLyAgICAgbGV0IHgxOiBudW1iZXIgPSA5OTk5LCB5MTogbnVtYmVyID0gOTk5OSwgeDI6IG51bWJlciA9IC05OTk5LCB5MjogbnVtYmVyID0gLTk5OTk7XHJcblxyXG4gICAgICAgIC8vICAgICBvZmZzZXRzLmZvckVhY2gob2Zmc2V0ID0+IHtcclxuICAgICAgICAvLyAgICAgICAgIHgxID0gTWF0aC5taW4oeDEsIG9mZnNldFswXSk7XHJcbiAgICAgICAgLy8gICAgICAgICB5MSA9IE1hdGgubWluKHkxLCBvZmZzZXRbMV0pO1xyXG4gICAgICAgIC8vICAgICAgICAgeDIgPSBNYXRoLm1heCh4Miwgb2Zmc2V0WzBdKTtcclxuICAgICAgICAvLyAgICAgICAgIHkyID0gTWF0aC5tYXgoeTIsIG9mZnNldFsxXSk7XHJcbiAgICAgICAgLy8gICAgIH0pO1xyXG5cclxuICAgICAgICAvLyAgICAgc2l6ZSA9IGljZHRfT2Zmc2V0MlNpemUoeDEsIHkxLCB4MiwgeTIsIHsgcG9pbnRzOiBvZmZzZXRzIH0pO1xyXG5cclxuICAgICAgICAvLyAgICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUoVl9TaGFwZVR5cGUuUEFUSCwgc2l6ZSwgYXR0cmlidXRlKSwgdGhpc0F0dHJpYnV0ZSk7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUoZWxlbWVudCwgYXR0cmlidXRlKTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICBsZXQgZCA9ICcnLCBkM19wYXRoID0gJyc7XHJcblxyXG4gICAgICAgIHZhciBoYW5kbGVBdHRyaWJ1dGUyID0gKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBkICs9IGAgJHt4fSAke3l9YDtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkJywgZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN0YXJ0OiAob2Zmc2V0OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkID0gYE0gJHtvZmZzZXQueH0gJHtvZmZzZXQueX0gTCAke29mZnNldC54fSAke29mZnNldC55fWA7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1vdmU6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0sIG9mZnNldHM6IEFycmF5PEFycmF5PG51bWJlcj4+KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVBdHRyaWJ1dGUyKG9mZnNldC54LCBvZmZzZXQueSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVuZDogKG9mZnNldDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSwgb2Zmc2V0czogQXJyYXk8QXJyYXk8bnVtYmVyPj4pID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2QzIHNtb290aCBsaW5lXHJcbiAgICAgICAgICAgICAgICAvLyBpZiAob2Zmc2V0cy5sZW5ndGggPj0gMykge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIGxldCBkM0xpbmVDdXJ2ZSA9IGQzLmxpbmUoKS54KGQgPT4gZFswXSkueShkID0+IGRbMV0pLmN1cnZlKGQzLmN1cnZlQmFzaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vICAgICBkM19wYXRoID0gZDNMaW5lQ3VydmUob2Zmc2V0cyBhcyBhbnkpID8/ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZCcsIGQzX3BhdGgpO1xyXG4gICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgLy8gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2QnLCBkKTtcclxuICAgICAgICAgICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgbGV0IHBvaW50TWFwcyA9IGljZHRfQWRhcHRlcl9QYXRoRF8yX1BvaW50TWFwcyhkM19wYXRoIHx8IGQpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHsgbWluWCwgbWluWSwgbWF4WCwgbWF4WSB9ID0gaWNkdF9BZGFwdGVyX1BvaW50TWFwc19FeHRyYWN0X01pbk1heFhZKHBvaW50TWFwcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2l6ZS54ID0gbWluWDtcclxuICAgICAgICAgICAgICAgIHNpemUueSA9IG1pblk7XHJcbiAgICAgICAgICAgICAgICBzaXplLndpZHRoID0gKG1heFggLSBtaW5YKSB8fCAxO1xyXG4gICAgICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSAobWF4WSAtIG1pblkpIHx8IDE7XHJcbiAgICAgICAgICAgICAgICBzaXplLnJhdGlvTWFwcyA9IGljZHRfQWRhcHRlcl9Qb2ludE1hcHNfMl9SYXRpb01hcHMoc2l6ZSwgcG9pbnRNYXBzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3NhdmUgY3JlYXRlXHJcbiAgICAgICAgICAgICAgICBpY2R0LmRhdGEubm9kZSA9IE9iamVjdC5hc3NpZ24oe1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBub2RlSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogVl9TaGFwZVR5cGUuUEFUSCxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnUGF0aCdcclxuICAgICAgICAgICAgICAgIH0sIHsgc2l6ZTogc2l6ZSwgYXR0cmlidXRlOiBhdHRyaWJ1dGUgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IHsgaWNkdF9PZmZzZXQyU2l6ZSwgaWNkdF9TaXplMkF0dHJpYnV0ZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9zY3JpcHQvaGFuZGxlL29mZnNldFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z1BhdGggfSBmcm9tIFwiLi4vLi4vc2hhcGUvc3ZnL3BhdGgvc3ZnLXBhdGhcIjtcclxuaW1wb3J0IHsgVl9TaGFwZVR5cGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vbG9va3VwL1ZfU2hhcGVUeXBlXCI7XHJcbmltcG9ydCB7IGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vc2NyaXB0L3N5bmMtZWxlbWVudC9zdmctZWxlbWVudFwiO1xyXG5pbXBvcnQgeyBpY2R0X0lEYXRhTm9kZSwgaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGUsIGljZHRfSURhdGFOb2RlU2l6ZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xyXG5pbXBvcnQgeyBpY2R0X1NjYWxlTnVtYmVyIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3NjcmlwdC9oYW5kbGUvc2NhbGUtbnVtYmVyXCI7XHJcbmltcG9ydCB7IFZfSUQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vbG9va3VwL1ZfSURcIjtcclxuaW1wb3J0IHsgaWNkdCB9IGZyb20gXCIuLi8uLi8uLi8uLi9wcm90b3R5cGUvaWNkdFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z0NpcmNsZSB9IGZyb20gXCIuLi8uLi9zaGFwZS9zdmcvY2lyY2xlL3N2Zy1jaXJjbGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBpY2R0X0ludGVyYWN0aXZlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihub2RlPzogaWNkdF9JRGF0YU5vZGUsIF9zaXplPzogaWNkdF9JRGF0YU5vZGVTaXplKSB7XHJcblxyXG4gICAgICAgIGxldCB0aGlzQXR0cmlidXRlID0ge1xyXG4gICAgICAgICAgICBzdHJva2U6ICcjRkYwMDAwJyxcclxuICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IGljZHRfU2NhbGVOdW1iZXIoMiksXHJcbiAgICAgICAgICAgIHN0cm9rZUxpbmVjYXA6ICdyb3VuZCcsXHJcbiAgICAgICAgICAgIHN0cm9rZUxpbmVqb2luOiAncm91bmQnLFxyXG4gICAgICAgICAgICBzdHJva2VEYXNoYXJyYXk6IGljZHRfU2NhbGVOdW1iZXIoOClcclxuICAgICAgICB9IGFzIGljZHRfSURhdGFOb2RlQXR0cmlidXRlO1xyXG5cclxuICAgICAgICBsZXQgeyBlbGVtZW50LCBhdHRyaWJ1dGUsIHNpemUgfSA9IGljZHRfU3ZnUGF0aChNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMDApLCB7IHNpemU6IF9zaXplIH0pO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgICh3aW5kb3cgYXMgYW55KS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChWX0lELklOVEVSQUNUSVZFX0dST1VQKS5xdWVyeVNlbGVjdG9yQWxsKCdwYXRoJykuZm9yRWFjaCgoZTogRWxlbWVudCkgPT4gZT8ucmVtb3ZlKCkpO1xyXG4gICAgICAgICh3aW5kb3cgYXMgYW55KS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChWX0lELklOVEVSQUNUSVZFX0dST1VQKS5xdWVyeVNlbGVjdG9yQWxsKCdjaXJjbGUnKS5mb3JFYWNoKChlOiBFbGVtZW50KSA9PiBlPy5yZW1vdmUoKSk7XHJcbiAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFZfSUQuSU5URVJBQ1RJVkVfR1JPVVApPy5hcHBlbmRDaGlsZChlbGVtZW50KTtcclxuXHJcbiAgICAgICAgdmFyIGNyZWF0ZVNoYWRvd05vZGUgPSAob2Zmc2V0PzogQXJyYXk8bnVtYmVyPiwgdHlwZT86ICdzdGFydCcgfCAnZW5kJykgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIW9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL3BvaW50XHJcbiAgICAgICAgICAgICgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgeyBlbGVtZW50IH0gPSBpY2R0X1N2Z0NpcmNsZShNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMDApLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IHR5cGUgPT0gJ3N0YXJ0JyA/ICcjRkYwMDAwJyA6ICcjMDBCQTAwJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IGljZHRfU2NhbGVOdW1iZXIoMSlcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDogb2Zmc2V0WzBdIC0gNSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTogb2Zmc2V0WzFdIC0gNSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoVl9JRC5JTlRFUkFDVElWRV9HUk9VUCk/LnByZXBlbmQoZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0pKCk7XHJcblxyXG4gICAgICAgICAgICAvL3NoYWRvdyBib3hcclxuICAgICAgICAgICAgKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCB7IHNpemUgfSA9IG5vZGUgPz8gaWNkdC5kYXRhU2VsZWN0Lm5vZGVzWzBdID8/IHt9O1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCBwb2ludHMgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgW29mZnNldFswXSAtIHNpemUud2lkdGggLyAyLCBvZmZzZXRbMV0gLSBzaXplLmhlaWdodCAvIDJdLFxyXG4gICAgICAgICAgICAgICAgICAgIFtvZmZzZXRbMF0gKyBzaXplLndpZHRoIC8gMiwgb2Zmc2V0WzFdIC0gc2l6ZS5oZWlnaHQgLyAyXSxcclxuICAgICAgICAgICAgICAgICAgICBbb2Zmc2V0WzBdICsgc2l6ZS53aWR0aCAvIDIsIG9mZnNldFsxXSArIHNpemUuaGVpZ2h0IC8gMl0sXHJcbiAgICAgICAgICAgICAgICAgICAgW29mZnNldFswXSAtIHNpemUud2lkdGggLyAyLCBvZmZzZXRbMV0gKyBzaXplLmhlaWdodCAvIDJdLFxyXG4gICAgICAgICAgICAgICAgICAgIFtvZmZzZXRbMF0gLSBzaXplLndpZHRoIC8gMiwgb2Zmc2V0WzFdIC0gc2l6ZS5oZWlnaHQgLyAyXSxcclxuICAgICAgICAgICAgICAgIF07XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHsgZWxlbWVudCB9ID0gaWNkdF9TdmdQYXRoKE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwMCksIHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJyNGRkZGRkYnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6ICcjNWY2Y2UxJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IGljZHRfU2NhbGVOdW1iZXIoMSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZUxpbmVjYXA6ICdyb3VuZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZUxpbmVqb2luOiAncm91bmQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VEYXNoYXJyYXk6IGljZHRfU2NhbGVOdW1iZXIoOClcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHM6IHBvaW50c1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFZfSUQuSU5URVJBQ1RJVkVfR1JPVVApPy5wcmVwZW5kKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KSgpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaGFuZGxlQXR0cmlidXRlID0gKG9mZnNldHM6IEFycmF5PEFycmF5PG51bWJlcj4+KSA9PiB7XHJcblxyXG4gICAgICAgICAgICBsZXQgeDE6IG51bWJlciA9IDk5OTksIHkxOiBudW1iZXIgPSA5OTk5LCB4MjogbnVtYmVyID0gLTk5OTksIHkyOiBudW1iZXIgPSAtOTk5OTtcclxuXHJcbiAgICAgICAgICAgIG9mZnNldHMuZm9yRWFjaChvZmZzZXQgPT4ge1xyXG4gICAgICAgICAgICAgICAgeDEgPSBNYXRoLm1pbih4MSwgb2Zmc2V0WzBdKTtcclxuICAgICAgICAgICAgICAgIHkxID0gTWF0aC5taW4oeTEsIG9mZnNldFsxXSk7XHJcbiAgICAgICAgICAgICAgICB4MiA9IE1hdGgubWF4KHgyLCBvZmZzZXRbMF0pO1xyXG4gICAgICAgICAgICAgICAgeTIgPSBNYXRoLm1heCh5Miwgb2Zmc2V0WzFdKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBzaXplID0gaWNkdF9PZmZzZXQyU2l6ZSh4MSwgeTEsIHgyLCB5MiwgeyBwb2ludHM6IG9mZnNldHMgfSk7XHJcblxyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGF0dHJpYnV0ZSwgaWNkdF9TaXplMkF0dHJpYnV0ZShWX1NoYXBlVHlwZS5QQVRILCBzaXplLCBhdHRyaWJ1dGUpLCB0aGlzQXR0cmlidXRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vZHJhdyBsaW5lXHJcbiAgICAgICAgaWNkdF9TeW5jU3ZnTm9kZUF0dHJpYnV0ZShlbGVtZW50LCB0aGlzQXR0cmlidXRlKTtcclxuICAgICAgICAvL3NoYWRvdyBmcm9tXHJcbiAgICAgICAgY3JlYXRlU2hhZG93Tm9kZShfc2l6ZT8ucG9pbnRzPy5sZW5ndGggPyBfc2l6ZS5wb2ludHNbMF0gOiB1bmRlZmluZWQpO1xyXG4gICAgICAgIC8vc2hhZG93IHRvXHJcbiAgICAgICAgY3JlYXRlU2hhZG93Tm9kZShfc2l6ZT8ucG9pbnRzPy5sZW5ndGggJiYgX3NpemU/LnBvaW50cz8ubGVuZ3RoID49IDIgPyBfc2l6ZS5wb2ludHNbX3NpemUucG9pbnRzLmxlbmd0aCAtIDFdIDogdW5kZWZpbmVkKTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICBsZXQgZCA9ICcnO1xyXG5cclxuICAgICAgICB2YXIgaGFuZGxlQXR0cmlidXRlMiA9ICh4OiBudW1iZXIsIHk6IG51bWJlcikgPT4ge1xyXG5cclxuICAgICAgICAgICAgZCArPSBgICR7eH0gJHt5fWA7XHJcblxyXG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZCcsIGQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGhhbmRsZUF0dHJpYnV0ZTMgPSAob2Zmc2V0czogYW55KSA9PiB7XHJcblxyXG4gICAgICAgICAgICBsZXQgZDNMaW5lQ3VydmUgPSBkMy5saW5lKCkueChkID0+IGRbMF0pLnkoZCA9PiBkWzFdKS5jdXJ2ZShkMy5jdXJ2ZUJhc2lzKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBkX3BhdGggPSBkM0xpbmVDdXJ2ZShvZmZzZXRzKTtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkJywgZF9wYXRoKTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIGlmIChvZmZzZXRzLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAod2luZG93IGFzIGFueSkuaW50ZXJhY3RpdmVQb2ludHMgPSBvZmZzZXRzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN0YXJ0OiAob2Zmc2V0OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkID0gYE0gJHtvZmZzZXQueH0gJHtvZmZzZXQueX0gTCAke29mZnNldC54fSAke29mZnNldC55fWA7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1vdmU6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0sIG9mZnNldHM6IEFycmF5PEFycmF5PG51bWJlcj4+KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVBdHRyaWJ1dGUyKG9mZnNldC54LCBvZmZzZXQueSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVuZDogKG9mZnNldDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSwgb2Zmc2V0czogQXJyYXk8QXJyYXk8bnVtYmVyPj4pID0+IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUF0dHJpYnV0ZTMob2Zmc2V0cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9kcmF3IGxpbmVcclxuICAgICAgICAgICAgICAgIGhhbmRsZUF0dHJpYnV0ZShvZmZzZXRzKTtcclxuICAgICAgICAgICAgICAgIC8vc2hhZG93IGZyb21cclxuICAgICAgICAgICAgICAgIGNyZWF0ZVNoYWRvd05vZGUob2Zmc2V0cy5sZW5ndGggPyBvZmZzZXRzWzBdIDogdW5kZWZpbmVkLCAnc3RhcnQnKTtcclxuICAgICAgICAgICAgICAgIC8vc2hhZG93IHRvXHJcbiAgICAgICAgICAgICAgICBjcmVhdGVTaGFkb3dOb2RlKG9mZnNldHMubGVuZ3RoID49IDIgPyBvZmZzZXRzW29mZnNldHMubGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQsICdlbmQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgeyBWX0lEIH0gZnJvbSBcIi4uLy4uLy4uL2xvb2t1cC9WX0lEXCI7XHJcbmltcG9ydCB7IFZfUGVuVHlwZSB9IGZyb20gXCIuLi8uLi8uLi9sb29rdXAvVl9QZW5UeXBlXCI7XHJcbmltcG9ydCB7IGljZHQgfSBmcm9tIFwiLi4vLi4vLi4vcHJvdG90eXBlL2ljZHRcIjtcclxuaW1wb3J0IHsgaWNkdF9Qb2ludGVyRXZlbnRzIH0gZnJvbSBcIi4uLy4uL3BvaW50ZXIvcG9pbnRlci1ldmVudFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbiwgc3luY05vZGVJbnRlcmFjdGl2ZSB9IGZyb20gXCIuLi8uLi9zeW5jLWVsZW1lbnQvc3ZnLWVsZW1lbnRcIjtcclxuaW1wb3J0IHsgaWNkdF9EcmF3IH0gZnJvbSBcIi4vZHJhdy9kcmF3XCI7XHJcbmltcG9ydCB7IGljZHRfSGlnaGxpZ2h0IH0gZnJvbSBcIi4vaGlnaGxpZ2h0L2hpZ2hsaWdodFwiO1xyXG5pbXBvcnQgeyBpY2R0X0ludGVyYWN0aXZlIH0gZnJvbSBcIi4vaW50ZXJhY3RpdmUvaW50ZXJhY3RpdmVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X1BlbkNvbXBvbmVudCA9IChldmVudHM6IHsgbW91c2VFdmVudD86IE1vdXNlRXZlbnQsIHRvdWNoRXZlbnQ/OiBUb3VjaEV2ZW50IH0pID0+IHtcclxuICAgIHN3aXRjaCAoaWNkdC5wb2ludGVyLnBlbl90eXBlKSB7XHJcbiAgICAgICAgY2FzZSBWX1BlblR5cGUuRFJBVzoge1xyXG4gICAgICAgICAgICBpY2R0X1BvaW50ZXJFdmVudHMoZXZlbnRzLCBuZXcgaWNkdF9EcmF3KCkpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBWX1BlblR5cGUuSElHSFRMSUdIOiB7XHJcbiAgICAgICAgICAgIGljZHRfUG9pbnRlckV2ZW50cyhldmVudHMsIG5ldyBpY2R0X0hpZ2hsaWdodCgpKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgVl9QZW5UeXBlLklOVEVSQUNUSVZFOiB7XHJcbiAgICAgICAgICAgIGljZHRfSW50ZXJhY3RpdmVDb21wb25lbnQoZXZlbnRzKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9JbnRlcmFjdGl2ZUNvbXBvbmVudCA9IChldmVudHM/OiB7IG1vdXNlRXZlbnQ/OiBNb3VzZUV2ZW50LCB0b3VjaEV2ZW50PzogVG91Y2hFdmVudCB9KSA9PiB7XHJcblxyXG4gICAgbGV0IGVsZUdyb3VwID0gaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24oVl9JRC5JTlRFUkFDVElWRV9HUk9VUCwgJ2cnKTtcclxuXHJcbiAgICBsZXQgdmlld0JveCA9IGljZHQuZGF0YS5zbGlkZT8uc3ZnPy52aWV3Qm94ID8/ICgoKSA9PiB7IGxldCB7IHdpZHRoLCBoZWlnaHQgfSA9IGljZHQuc2NyZWVuLmdldDsgcmV0dXJuIHsgeDogMCwgeTogMCwgd2lkdGgsIGhlaWdodCB9IH0pKCk7XHJcblxyXG4gICAgc3luY05vZGVJbnRlcmFjdGl2ZShlbGVHcm91cCwgdmlld0JveCk7XHJcblxyXG4gICAgaWYgKGV2ZW50cykge1xyXG4gICAgICAgIGljZHRfUG9pbnRlckV2ZW50cyhldmVudHMsIG5ldyBpY2R0X0ludGVyYWN0aXZlKCkpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgVl9JRCB9IGZyb20gXCIuLi8uLi8uLi9sb29rdXAvVl9JRFwiO1xyXG5pbXBvcnQgeyBWX1NoYXBlVHlwZSB9IGZyb20gXCIuLi8uLi8uLi9sb29rdXAvVl9TaGFwZVR5cGVcIjtcclxuaW1wb3J0IHsgaWNkdCB9IGZyb20gXCIuLi8uLi8uLi9wcm90b3R5cGUvaWNkdFwiO1xyXG5pbXBvcnQgeyBpY2R0X1NjYW4gfSBmcm9tIFwiLi9zY2FuL3NjYW5cIjtcclxuaW1wb3J0IHsgaWNkdF9SZXNpemUgfSBmcm9tIFwiLi9yZXNpemUvcmVzaXplXCI7XHJcbmltcG9ydCB7IGljZHRfU2VsZWN0IH0gZnJvbSBcIi4vc2VsZWN0L3NlbGVjdFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfUG9pbnRlckNvbXBvbmVudCA9IChldmVudHM6IHsgbW91c2VFdmVudD86IE1vdXNlRXZlbnQsIHRvdWNoRXZlbnQ/OiBUb3VjaEV2ZW50IH0pID0+IHtcclxuXHJcbiAgICBsZXQgdGFyZ2V0ID0gKGV2ZW50cy5tb3VzZUV2ZW50Py50YXJnZXQgfHwgZXZlbnRzLnRvdWNoRXZlbnQ/LnRhcmdldCkgYXMgRWxlbWVudCxcclxuICAgICAgICB0YXJnZXRJZCA9IHRhcmdldD8uZ2V0QXR0cmlidXRlKCdpZCcpIHx8ICcnLFxyXG4gICAgICAgIHRhcmdldE5hbWUgPSB0YXJnZXQ/Lm5vZGVOYW1lO1xyXG5cclxuICAgIGxldCB0YXJnZXRQSWQgPSAodGFyZ2V0Py5wYXJlbnROb2RlIGFzIEVsZW1lbnQpPy5nZXRBdHRyaWJ1dGUoJ2lkJykgfHwgJyc7XHJcblxyXG4gICAgLy90aGFvIHTDoWMgdHLDqm4gY8OhYyBhbmggZW0gcmVzaXplXHJcbiAgICBpZiAoW1ZfSUQuUkVTSVpFX0dST1VQLCBWX0lELlNFTEVDVF9HUk9VUF0uaW5jbHVkZXModGFyZ2V0UElkKSkge1xyXG4gICAgICAgIGV2ZW50cy5tb3VzZUV2ZW50Py5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICBldmVudHMubW91c2VFdmVudD8ucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gLy9naeG7ryBDVFJMIC0+IHF1w6l0IGNo4buNblxyXG4gICAgLy8gaWYgKGV2ZW50cy5tb3VzZUV2ZW50Py5zaGlmdEtleSB8fCBldmVudHMudG91Y2hFdmVudD8uc2hpZnRLZXkpIHtcclxuICAgIC8vICAgICBpY2R0X1NjYW4oZXZlbnRzKTtcclxuICAgIC8vIH1cclxuICAgIC8vIC8vbeG6t2MgxJHhu4tuaCB0aMOsIGNo4buNbiB2w6BvIMSR4buRaSB0xrDhu6NuZyB0aMOsIHPhur0gY2jhu41uIMSR4buDIGVkaXRcclxuICAgIC8vIGVsc2UgaWYgKGljZHQuZGF0YVNlbGVjdC5ub2RlTmFtZS5pbmNsdWRlcyh0YXJnZXROYW1lKSkge1xyXG4gICAgLy8gICAgIGxldCBub2RlSWQgPSBwYXJzZUZsb2F0KHRhcmdldElkIHx8ICcwJyk7XHJcblxyXG4gICAgLy8gICAgIC8vxJHhu5FpIHTGsOG7o25nIMSRxrDhu6NjIGNo4buNblxyXG4gICAgLy8gICAgIGlmIChldmVudHMubW91c2VFdmVudD8uc2hpZnRLZXkgfHwgZXZlbnRzLnRvdWNoRXZlbnQ/LnNoaWZ0S2V5KSB7XHJcbiAgICAvLyAgICAgICAgIGljZHQuZGF0YVNlbGVjdC5pZHMgPSBbbm9kZUlkXS5jb25jYXQoaWNkdC5kYXRhU2VsZWN0LmlkcykuZmlsdGVyKCh2YWx1ZSwgaW5kZXgsIGFycmF5KSA9PiBhcnJheS5pbmRleE9mKHZhbHVlKSA9PSBpbmRleCk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIGVsc2Uge1xyXG4gICAgLy8gICAgICAgICBpY2R0LmRhdGFTZWxlY3QuaWRzID0gW25vZGVJZF07XHJcbiAgICAvLyAgICAgfVxyXG5cclxuICAgIC8vICAgICBsZXQgbm9kZXMgPSBpY2R0LmRhdGFTZWxlY3Qubm9kZXM7XHJcblxyXG4gICAgLy8gICAgIGlmIChub2Rlcy5sZW5ndGggPT0gMSkge1xyXG4gICAgLy8gICAgICAgICAvL3ThuqFvIGPDoWMgbsO6dCB0aGF5IMSR4buVaSBrw61jaCB0aMaw4bubY1xyXG4gICAgLy8gICAgICAgICBpY2R0X1Jlc2l6ZShub2Rlc1swXSk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIGVsc2UgaWYgKG5vZGVzLmxlbmd0aCA+IDEpIHtcclxuICAgIC8vICAgICAgICAgLy924bq9IGtodW5nIGNo4buNbiBuaGnhu4F1IMSR4buRaSB0xrDhu6NuZ1xyXG4gICAgLy8gICAgICAgICBpY2R0X1NlbGVjdChub2Rlcyk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG4gICAgLy8gZWxzZSB7XHJcbiAgICAvLyAgICAgaWNkdC5kYXRhU2VsZWN0LmlkcyA9IFtdO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vcXXDqXQgY2jhu41uXHJcbiAgICBpZiAoZXZlbnRzLm1vdXNlRXZlbnQ/LmFsdEtleSB8fCBldmVudHMudG91Y2hFdmVudD8uYWx0S2V5IHx8ICF0YXJnZXRJZCB8fCB0YXJnZXRJZC5tYXRjaCgvW14wLTldLykgfHwgIWljZHQuZGF0YVNlbGVjdC5ub2RlTmFtZS5pbmNsdWRlcyh0YXJnZXROYW1lKSkge1xyXG4gICAgICAgIC8vaWNkdC5kYXRhU2VsZWN0LmlkcyA9IFtdO1xyXG4gICAgICAgIGljZHQuZGF0YVNlbGVjdC5pZHMubGVuZ3RoID8gaWNkdC5kYXRhU2VsZWN0LmlkcyA9IFtdIDogbnVsbDtcclxuXHJcbiAgICAgICAgLy9xdcOpdCBjaOG7jW4sIGto4bqjIGThu6VuZyDEkeG7kWkgduG7m2kgY2h14buZdCB0csOhaSwgaG/hurdjIHRvdWNoXHJcbiAgICAgICAgaWYgKGV2ZW50cy5tb3VzZUV2ZW50Py5idXR0b24gPT0gMCB8fCBldmVudHMudG91Y2hFdmVudCkge1xyXG4gICAgICAgICAgICBpY2R0X1NjYW4oZXZlbnRzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvL23hurdjIMSR4buLbmggdGjDrCBjaOG7jW4gdsOgbyDEkeG7kWkgdMaw4bujbmcgdGjDrCBz4bq9IGNo4buNbiDEkeG7gyBlZGl0XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBsZXQgbm9kZUlkID0gcGFyc2VGbG9hdCh0YXJnZXRJZCB8fCAnMCcpO1xyXG5cclxuICAgICAgICAvL8SR4buRaSB0xrDhu6NuZyDEkcaw4bujYyBjaOG7jW5cclxuICAgICAgICBpZiAoZXZlbnRzLm1vdXNlRXZlbnQ/LnNoaWZ0S2V5IHx8IGV2ZW50cy50b3VjaEV2ZW50Py5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICBpY2R0LmRhdGFTZWxlY3QuaWRzID0gW25vZGVJZF0uY29uY2F0KGljZHQuZGF0YVNlbGVjdC5pZHMpLmZpbHRlcigodmFsdWUsIGluZGV4LCBhcnJheSkgPT4gYXJyYXkuaW5kZXhPZih2YWx1ZSkgPT0gaW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWNkdC5kYXRhU2VsZWN0LmlkcyA9IFtub2RlSWRdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG5vZGVzID0gaWNkdC5kYXRhU2VsZWN0Lm5vZGVzO1xyXG5cclxuICAgICAgICAvL2No4buNbiBuaGnhu4F1IMSR4buRaSB0xrDhu6NuZyBob+G6t2MgxJHhu5FpIHTGsOG7o25nIGNo4buNbiBsw6AgcGF0aFxyXG4gICAgICAgIGlmIChub2Rlcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIC8vduG6vSBraHVuZyBjaOG7jW4gbmhp4buBdSDEkeG7kWkgdMaw4bujbmdcclxuICAgICAgICAgICAgaWNkdF9TZWxlY3Qobm9kZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChub2Rlcy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAvL3ThuqFvIGPDoWMgbsO6dCB0aGF5IMSR4buVaSBrw61jaCB0aMaw4bubY1xyXG4gICAgICAgICAgICBpY2R0X1Jlc2l6ZShub2Rlc1swXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCB7IFZfSUQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vbG9va3VwL1ZfSURcIjtcclxuaW1wb3J0IHsgaWNkdCB9IGZyb20gXCIuLi8uLi8uLi8uLi9wcm90b3R5cGUvaWNkdFwiO1xyXG5pbXBvcnQgeyBpY2R0X0lEYXRhTm9kZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuaW1wb3J0IHsgaWNkdF9TaXplMkF0dHJpYnV0ZSB9IGZyb20gXCIuLi8uLi8uLi9oYW5kbGUvb2Zmc2V0XCI7XHJcbmltcG9ydCB7IGljZHRfUG9pbnRlckV2ZW50LCBpY2R0X1BvaW50ZXJFdmVudHMgfSBmcm9tIFwiLi4vLi4vLi4vcG9pbnRlci9wb2ludGVyLWV2ZW50XCI7XHJcbmltcG9ydCB7IGljZHRfU3luY1N2Z05vZGU0RGVzaWduLCBpY2R0X1N5bmNTdmdOb2RlQXR0cmlidXRlLCBzeW5jTm9kZVJlc2l6ZSB9IGZyb20gXCIuLi8uLi8uLi9zeW5jLWVsZW1lbnQvc3ZnLWVsZW1lbnRcIjtcclxuaW1wb3J0IHsgaWNkdF9TY2FsZU51bWJlciB9IGZyb20gXCIuLi8uLi8uLi9oYW5kbGUvc2NhbGUtbnVtYmVyXCI7XHJcbmltcG9ydCB7IGljZHRfUm91bmROdW1iZXIgfSBmcm9tIFwiLi4vLi4vLi4vLi4vc2NyaXB0L2hhbmRsZS9yb3VuZC1udW1iZXJcIjtcclxuXHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9SZXNpemUgPSAobm9kZTogaWNkdF9JRGF0YU5vZGUpID0+IHtcclxuXHJcbiAgICBsZXQgZWxlR3JvdXAgPSBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbihWX0lELlJFU0laRV9HUk9VUCwgJ2cnKTtcclxuXHJcbiAgICBzeW5jTm9kZVJlc2l6ZShlbGVHcm91cCwgbm9kZSlcclxuICAgICAgICAuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihpdGVtLmVsZW1lbnQsIGl0ZW0ucG9zVHlwZSwgbm9kZSwgZWxlR3JvdXApO1xyXG4gICAgICAgIH0pO1xyXG59XHJcblxyXG5jb25zdCBhZGRFdmVudExpc3RlbmVyID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBwb3NUeXBlOiBzdHJpbmcsIG5vZGU6IGljZHRfSURhdGFOb2RlLCBlbGVHcm91cDogSFRNTEVsZW1lbnQpID0+IHtcclxuXHJcbiAgICBsZXQgaXNUb3VjaCA9IGZhbHNlO1xyXG5cclxuICAgIGVsZW1lbnQ/LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCAoZXZlbnQ6IFRvdWNoRXZlbnQpID0+IHtcclxuXHJcbiAgICAgICAgLy9jaOG7iSBuaOG6rW4gdG91Y2hzdGFydCBob+G6t2MgbW91c2Vkb3duXHJcbiAgICAgICAgaXNUb3VjaCA9IHRydWU7XHJcblxyXG4gICAgICAgIG1vdmUoeyB0b3VjaEV2ZW50OiBldmVudCB9LCBwb3NUeXBlLCBub2RlLCBlbGVHcm91cCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBlbGVtZW50Py5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcclxuXHJcbiAgICAgICAgaWYgKGV2ZW50LmJ1dHRvbiAhPSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vY2jhu4kgbmjhuq1uIHRvdWNoc3RhcnQgaG/hurdjIG1vdXNlZG93blxyXG4gICAgICAgIGlmIChpc1RvdWNoKSB7XHJcbiAgICAgICAgICAgIGlzVG91Y2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbW92ZSh7IG1vdXNlRXZlbnQ6IGV2ZW50IH0sIHBvc1R5cGUsIG5vZGUsIGVsZUdyb3VwKTtcclxuICAgIH0pO1xyXG5cclxufVxyXG5cclxuY29uc3QgbW92ZSA9IChldmVudHM6IHsgbW91c2VFdmVudD86IE1vdXNlRXZlbnQsIHRvdWNoRXZlbnQ/OiBUb3VjaEV2ZW50IH0sIHBvc1R5cGU6IHN0cmluZywgbm9kZTogaWNkdF9JRGF0YU5vZGUsIGVsZUdyb3VwOiBIVE1MRWxlbWVudCkgPT4ge1xyXG5cclxuICAgIGxldCB7IGlkLCB0eXBlLCBzaXplLCBhdHRyaWJ1dGUgfSA9IG5vZGU7XHJcblxyXG4gICAgbGV0IHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9ID0gc2l6ZTtcclxuICAgIGxldCByYXRpbyA9ICh3aWR0aCB8fCAxKSAvIChoZWlnaHQgfHwgMSk7XHJcbiAgICBsZXQgbmV3U2l6ZTogeyB4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgfTtcclxuXHJcbiAgICBsZXQgaGFuZGxlQXR0cmlidXRlID0gKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpID0+IHtcclxuXHJcbiAgICAgICAgbGV0IHN1YlggPSB4MiAtIHgxLCBzdWJZID0geTIgLSB5MTtcclxuXHJcbiAgICAgICAgc3dpdGNoIChwb3NUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3JlY3QtY2VudGVyJzoge1xyXG4gICAgICAgICAgICAgICAgLy9naeG7ryBzaGlmdCDEkeG7gyBkaSBjaHV54buDbiBuZ2FuZy9k4buNY1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50cy5tb3VzZUV2ZW50Py5zaGlmdEtleSB8fCBldmVudHMudG91Y2hFdmVudD8uc2hpZnRLZXkpXHJcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5hYnMoeDIgLSB4MSkgPj0gTWF0aC5hYnMoeTIgLSB5MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBuZXdTaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogeCArIHgyIC0geDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiB5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG5ld1NpemUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiB4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogeSArIHkyIC0geTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3U2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDogeCArIHgyIC0geDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHkgKyB5MiAtIHkxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAncmVjdC10b3AtbGVmdCc6IHtcclxuICAgICAgICAgICAgICAgIC8vZ2nhu68gU0hJRlQgxJHhu4MgZ2nhu68gdOG7tyBs4buHLCBBTFQgZ2nhu68gdHLhu41uZyB0w6JtXHJcbiAgICAgICAgICAgICAgICBpZiAoKGV2ZW50cy5tb3VzZUV2ZW50Py5zaGlmdEtleSB8fCBldmVudHMudG91Y2hFdmVudD8uc2hpZnRLZXkpICYmIChldmVudHMubW91c2VFdmVudD8uYWx0S2V5IHx8IGV2ZW50cy50b3VjaEV2ZW50Py5hbHRLZXkpKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXRpbyA+PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogeCArICh4MiAtIHgxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHkgKyAoeDIgLSB4MSkgLyByYXRpbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCAtICh4MiAtIHgxKSAqIDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAtICh4MiAtIHgxKSAqIDIgLyByYXRpb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHggKyAoeTIgLSB5MSkgKiByYXRpbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHkgKyAoeTIgLSB5MSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGggLSAoeTIgLSB5MSkgKiAyICogcmF0aW8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAtICh5MiAtIHkxKSAqIDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vZ2nhu68gU0hJRlQgxJHhu4MgZ2nhu68gdOG7tyBs4buHXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChldmVudHMubW91c2VFdmVudD8uc2hpZnRLZXkgfHwgZXZlbnRzLnRvdWNoRXZlbnQ/LnNoaWZ0S2V5KVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXRpbyA+PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogeCArICh4MiAtIHgxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHkgKyAoeDIgLSB4MSkgLyByYXRpbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCAtICh4MiAtIHgxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0IC0gKHgyIC0geDEpIC8gcmF0aW9cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1NpemUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiB4ICsgKHkyIC0geTEpICogcmF0aW8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiB5ICsgKHkyIC0geTEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoIC0gKHkyIC0geTEpICogcmF0aW8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAtICh5MiAtIHkxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy9naeG7ryBBTFQgxJHhu4MgZ2nhu68gduG7r25nIHRy4buNbmcgdMOibVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnRzLm1vdXNlRXZlbnQ/LmFsdEtleSB8fCBldmVudHMudG91Y2hFdmVudD8uYWx0S2V5KVxyXG4gICAgICAgICAgICAgICAgICAgIG5ld1NpemUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHggKyAoeDIgLSB4MSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHkgKyAoeTIgLSB5MSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCAtICh4MiAtIHgxKSAqIDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0IC0gKHkyIC0geTEpICogMlxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3U2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDogeCArICh4MiAtIHgxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTogeSArICh5MiAtIHkxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoIC0gKHgyIC0geDEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAtICh5MiAtIHkxKVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdyZWN0LXRvcC1yaWdodCc6IHtcclxuICAgICAgICAgICAgICAgIC8vZ2nhu68gU0hJRlQgxJHhu4MgZ2nhu68gdOG7tyBs4buHLCBBTFQgZ2nhu68gdHLhu41uZyB0w6JtXHJcbiAgICAgICAgICAgICAgICBpZiAoKGV2ZW50cy5tb3VzZUV2ZW50Py5zaGlmdEtleSB8fCBldmVudHMudG91Y2hFdmVudD8uc2hpZnRLZXkpICYmIChldmVudHMubW91c2VFdmVudD8uYWx0S2V5IHx8IGV2ZW50cy50b3VjaEV2ZW50Py5hbHRLZXkpKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXRpbyA+PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogeCAtICh4MiAtIHgxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHkgLSAoeDIgLSB4MSkgLyByYXRpbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCArICh4MiAtIHgxKSAqIDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCArICh4MiAtIHgxKSAqIDIgLyByYXRpb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHggKyAoeTIgLSB5MSkgKiByYXRpbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHkgKyAoeTIgLSB5MSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGggLSAoeTIgLSB5MSkgKiAyICogcmF0aW8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAtICh5MiAtIHkxKSAqIDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vZ2nhu68gU0hJRlQgxJHhu4MgZ2nhu68gdOG7tyBs4buHXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChldmVudHMubW91c2VFdmVudD8uc2hpZnRLZXkgfHwgZXZlbnRzLnRvdWNoRXZlbnQ/LnNoaWZ0S2V5KVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXRpbyA+PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogeCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHkgLSAoeDIgLSB4MSkgLyByYXRpbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCArICh4MiAtIHgxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0ICsgKHgyIC0geDEpIC8gcmF0aW9cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1NpemUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiB4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogeSArICh5MiAtIHkxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCAtICh5MiAtIHkxKSAqIHJhdGlvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgLSAoeTIgLSB5MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vZ2nhu68gQUxUIMSR4buDIGdp4buvIHbhu69uZyB0cuG7jW5nIHTDom1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50cy5tb3VzZUV2ZW50Py5hbHRLZXkgfHwgZXZlbnRzLnRvdWNoRXZlbnQ/LmFsdEtleSlcclxuICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiB4IC0gKHgyIC0geDEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiB5ICsgKHkyIC0geTEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGggKyAoeDIgLSB4MSkgKiAyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAtICh5MiAtIHkxKSAqIDJcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIG5ld1NpemUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHkgKyAoeTIgLSB5MSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCArICh4MiAtIHgxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgLSAoeTIgLSB5MSlcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAncmVjdC1ib3R0b20tbGVmdCc6IHtcclxuICAgICAgICAgICAgICAgIC8vZ2nhu68gU0hJRlQgxJHhu4MgZ2nhu68gdOG7tyBs4buHLCBBTFQgZ2nhu68gdHLhu41uZyB0w6JtXHJcbiAgICAgICAgICAgICAgICBpZiAoKGV2ZW50cy5tb3VzZUV2ZW50Py5zaGlmdEtleSB8fCBldmVudHMudG91Y2hFdmVudD8uc2hpZnRLZXkpICYmIChldmVudHMubW91c2VFdmVudD8uYWx0S2V5IHx8IGV2ZW50cy50b3VjaEV2ZW50Py5hbHRLZXkpKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXRpbyA+PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogeCArICh4MiAtIHgxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHkgKyAoeDIgLSB4MSkgLyByYXRpbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCAtICh4MiAtIHgxKSAqIDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAtICh4MiAtIHgxKSAqIDIgLyByYXRpb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHggLSAoeTIgLSB5MSkgKiByYXRpbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHkgLSAoeTIgLSB5MSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGggKyAoeTIgLSB5MSkgKiAyICogcmF0aW8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCArICh5MiAtIHkxKSAqIDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vZ2nhu68gU0hJRlQgxJHhu4MgZ2nhu68gdOG7tyBs4buHXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChldmVudHMubW91c2VFdmVudD8uc2hpZnRLZXkgfHwgZXZlbnRzLnRvdWNoRXZlbnQ/LnNoaWZ0S2V5KVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXRpbyA+PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogeCArICh4MiAtIHgxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGggLSAoeDIgLSB4MSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAtICh4MiAtIHgxKSAvIHJhdGlvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogeCAtICh5MiAtIHkxKSAqIHJhdGlvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCArICh5MiAtIHkxKSAqIHJhdGlvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKyAoeTIgLSB5MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vZ2nhu68gQUxUIMSR4buDIGdp4buvIHbhu69uZyB0cuG7jW5nIHTDom1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50cy5tb3VzZUV2ZW50Py5hbHRLZXkgfHwgZXZlbnRzLnRvdWNoRXZlbnQ/LmFsdEtleSlcclxuICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiB4ICsgKHgyIC0geDEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiB5IC0gKHkyIC0geTEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGggLSAoeDIgLSB4MSkgKiAyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCArICh5MiAtIHkxKSAqIDJcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIG5ld1NpemUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHggKyAoeDIgLSB4MSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCAtICh4MiAtIHgxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKyAoeTIgLSB5MSlcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAncmVjdC1ib3R0b20tcmlnaHQnOiB7XHJcbiAgICAgICAgICAgICAgICAvL2dp4buvIFNISUZUIMSR4buDIGdp4buvIHThu7cgbOG7hywgQUxUIGdp4buvIHRy4buNbmcgdMOibVxyXG4gICAgICAgICAgICAgICAgaWYgKChldmVudHMubW91c2VFdmVudD8uc2hpZnRLZXkgfHwgZXZlbnRzLnRvdWNoRXZlbnQ/LnNoaWZ0S2V5KSAmJiAoZXZlbnRzLm1vdXNlRXZlbnQ/LmFsdEtleSB8fCBldmVudHMudG91Y2hFdmVudD8uYWx0S2V5KSlcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmF0aW8gPj0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHggLSAoeDIgLSB4MSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiB5IC0gKHgyIC0geDEpIC8gcmF0aW8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGggKyAoeDIgLSB4MSkgKiAyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKyAoeDIgLSB4MSkgKiAyIC8gcmF0aW9cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1NpemUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiB4IC0gKHkyIC0geTEpICogcmF0aW8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiB5IC0gKHkyIC0geTEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoICsgKHkyIC0geTEpICogMiAqIHJhdGlvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKyAoeTIgLSB5MSkgKiAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvL2dp4buvIFNISUZUIMSR4buDIGdp4buvIHThu7cgbOG7h1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnRzLm1vdXNlRXZlbnQ/LnNoaWZ0S2V5IHx8IGV2ZW50cy50b3VjaEV2ZW50Py5zaGlmdEtleSlcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmF0aW8gPj0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiB5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoICsgKHgyIC0geDEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKyAoeDIgLSB4MSkgLyByYXRpb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiB5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoICsgKHkyIC0geTEpICogcmF0aW8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCArICh5MiAtIHkxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy9naeG7ryBBTFQgxJHhu4MgZ2nhu68gduG7r25nIHRy4buNbmcgdMOibVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnRzLm1vdXNlRXZlbnQ/LmFsdEtleSB8fCBldmVudHMudG91Y2hFdmVudD8uYWx0S2V5KVxyXG4gICAgICAgICAgICAgICAgICAgIG5ld1NpemUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHggLSAoeDIgLSB4MSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHkgLSAoeTIgLSB5MSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCArICh4MiAtIHgxKSAqIDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0ICsgKHkyIC0geTEpICogMlxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3U2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDogeCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTogeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoICsgKHgyIC0geDEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCArICh5MiAtIHkxKVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdyZWN0LXRvcCc6IHtcclxuICAgICAgICAgICAgICAgIC8vZ2nhu68gU0hJRlQgxJHhu4MgZ2nhu68gdOG7tyBs4buHXHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRzLm1vdXNlRXZlbnQ/LnNoaWZ0S2V5IHx8IGV2ZW50cy50b3VjaEV2ZW50Py5zaGlmdEtleSlcclxuICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiB4ICsgc3ViWSAvIDIgKiByYXRpbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTogeSArIHN1YlksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCAtIHN1YlkgKiByYXRpbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgLSBzdWJZXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vZ2nhu68gQUxUIMSR4buDIGdp4buvIHbhu69uZyB0cuG7jW5nIHTDom1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50cy5tb3VzZUV2ZW50Py5hbHRLZXkgfHwgZXZlbnRzLnRvdWNoRXZlbnQ/LmFsdEtleSlcclxuICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiB4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiB5ICsgc3ViWSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAtIHN1YlkgKiAyXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiB4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiB5ICsgc3ViWSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAtIHN1YllcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAncmVjdC1ib3R0b20nOiB7XHJcbiAgICAgICAgICAgICAgICAvL2dp4buvIFNISUZUIMSR4buDIGdp4buvIHThu7cgbOG7h1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50cy5tb3VzZUV2ZW50Py5zaGlmdEtleSB8fCBldmVudHMudG91Y2hFdmVudD8uc2hpZnRLZXkpXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3U2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDogeCAtIHN1YlkgLyAyICogcmF0aW8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCArIHN1YlkgKiByYXRpbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKyBzdWJZXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vZ2nhu68gQUxUIMSR4buDIGdp4buvIHbhu69uZyB0cuG7jW5nIHTDom1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50cy5tb3VzZUV2ZW50Py5hbHRLZXkgfHwgZXZlbnRzLnRvdWNoRXZlbnQ/LmFsdEtleSlcclxuICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiB4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiB5IC0gc3ViWSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCArIHN1YlkgKiAyXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiB4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiB5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0ICsgc3ViWVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdyZWN0LWxlZnQnOiB7XHJcbiAgICAgICAgICAgICAgICAvL2dp4buvIFNISUZUIMSR4buDIGdp4buvIHThu7cgbOG7h1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50cy5tb3VzZUV2ZW50Py5zaGlmdEtleSB8fCBldmVudHMudG91Y2hFdmVudD8uc2hpZnRLZXkpXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3U2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDogeCArIHN1YlgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHkgKyBzdWJYIC8gMiAvIHJhdGlvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGggLSBzdWJYLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAtIHN1YlggLyByYXRpb1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvL2dp4buvIEFMVCDEkeG7gyBnaeG7ryB24buvbmcgdHLhu41uZyB0w6JtXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChldmVudHMubW91c2VFdmVudD8uYWx0S2V5IHx8IGV2ZW50cy50b3VjaEV2ZW50Py5hbHRLZXkpXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3U2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDogeCArIHN1YlgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCAtIHN1YlggKiAyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3U2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDogeCArIHN1YlgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCAtIHN1YlgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ3JlY3QtcmlnaHQnOiB7XHJcbiAgICAgICAgICAgICAgICAvL2dp4buvIFNISUZUIMSR4buDIGdp4buvIHThu7cgbOG7h1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50cy5tb3VzZUV2ZW50Py5zaGlmdEtleSB8fCBldmVudHMudG91Y2hFdmVudD8uc2hpZnRLZXkpXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3U2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDogeCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTogeSAtIHN1YlggLyAyIC8gcmF0aW8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCArIHN1YlgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0ICsgc3ViWCAvIHJhdGlvXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vZ2nhu68gQUxUIMSR4buDIGdp4buvIHbhu69uZyB0cuG7jW5nIHTDom1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50cy5tb3VzZUV2ZW50Py5hbHRLZXkgfHwgZXZlbnRzLnRvdWNoRXZlbnQ/LmFsdEtleSlcclxuICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiB4IC0gc3ViWCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTogeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoICsgc3ViWCAqIDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiB4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiB5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGggKyBzdWJYLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICBuZXdTaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IHggKyB4MiAtIHgxLFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IHkgKyB5MiAtIHkxLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL2fDoW4gZ2nDoSB0cuG7iyBt4bubaSBjaG8gc2l6ZVxyXG4gICAgICAgIC8vIG5ld1NpemUueCA8IDEgfHwgbmV3U2l6ZS55IDwgMSB8fCBuZXdTaXplLndpZHRoIDwgNCB8fCBuZXdTaXplLmhlaWdodCA8IDRcclxuICAgICAgICAvLyAgICAgPyBudWxsXHJcbiAgICAgICAgLy8gICAgIDogT2JqZWN0LmFzc2lnbihzaXplLCBuZXdTaXplKTtcclxuXHJcbiAgICAgICAgLy8gbGV0IHNjYWxlV2lkdGggPSBpY2R0X1NjYWxlTnVtYmVyKGljZHQuc2NyZWVuLndpZHRoKSxcclxuICAgICAgICAvLyAgICAgc2NhbGVIZWlnaHQgPSBpY2R0X1NjYWxlTnVtYmVyKGljZHQuc2NyZWVuLmhlaWdodCk7XHJcblxyXG4gICAgICAgIC8vbWluXHJcbiAgICAgICAgaWYgKG5ld1NpemUud2lkdGggPCAwKSBuZXdTaXplLndpZHRoID0gMDtcclxuICAgICAgICBpZiAobmV3U2l6ZS5oZWlnaHQgPCAwKSBuZXdTaXplLmhlaWdodCA9IDA7XHJcbiAgICAgICAgLy9pZiAobmV3U2l6ZS54IDwgMCkgbmV3U2l6ZS54ID0gMDtcclxuICAgICAgICAvL2lmIChuZXdTaXplLnkgPCAwKSBuZXdTaXplLnkgPSAwO1xyXG5cclxuICAgICAgICAvL21heFxyXG4gICAgICAgIC8vaWYgKG5ld1NpemUud2lkdGggPiBzY2FsZVdpZHRoKSBuZXdTaXplLndpZHRoID0gc2NhbGVXaWR0aDtcclxuICAgICAgICAvL2lmIChuZXdTaXplLmhlaWdodCA+IHNjYWxlSGVpZ2h0KSBuZXdTaXplLmhlaWdodCA9IHNjYWxlSGVpZ2h0O1xyXG4gICAgICAgIC8vaWYgKG5ld1NpemUueCA+IHNjYWxlV2lkdGggLSBuZXdTaXplLndpZHRoKSBuZXdTaXplLnggPSBzY2FsZVdpZHRoIC0gbmV3U2l6ZS53aWR0aDtcclxuICAgICAgICAvL2lmIChuZXdTaXplLnkgPiBzY2FsZUhlaWdodCAtIG5ld1NpemUuaGVpZ2h0KSBuZXdTaXplLnkgPSBzY2FsZUhlaWdodCAtIG5ld1NpemUuaGVpZ2h0O1xyXG5cclxuICAgICAgICAvL3JvdW5kIG51bWJlclxyXG4gICAgICAgIG5ld1NpemUueCA9IGljZHRfUm91bmROdW1iZXIobmV3U2l6ZS54KTtcclxuICAgICAgICBuZXdTaXplLnkgPSBpY2R0X1JvdW5kTnVtYmVyKG5ld1NpemUueSk7XHJcbiAgICAgICAgbmV3U2l6ZS53aWR0aCA9IGljZHRfUm91bmROdW1iZXIobmV3U2l6ZS53aWR0aCk7XHJcbiAgICAgICAgbmV3U2l6ZS5oZWlnaHQgPSBpY2R0X1JvdW5kTnVtYmVyKG5ld1NpemUuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihzaXplLCBuZXdTaXplKTtcclxuXHJcbiAgICAgICAgLy9nw6FuIGdpw6EgdHLhu4sgbeG7m2kgY2hvIGF0dHJpYnV0ZVxyXG4gICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKHR5cGUsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG5cclxuICAgICAgICAvL2Phuq1wIG5o4bqtdCBVSVxyXG4gICAgICAgIGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUoKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSwgYXR0cmlidXRlKTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICBzeW5jTm9kZVJlc2l6ZShlbGVHcm91cCwgbm9kZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9sxrB1IGtob+G6o25nIGto4bqvYyB0csaw4bubYyBraGkgdGhheSDEkeG7lWlcclxuICAgIGxldCBoaXhpa2VGcm9tID0gbnVsbCBhcyBhbnk7XHJcblxyXG4gICAgbGV0IGhhbmRsZVN0YXJ0ID0gKCkgPT4ge1xyXG4gICAgICAgIGhpeGlrZUZyb20gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHsgaWQsIHNpemUsIGF0dHJpYnV0ZSB9KSkgYXMgaWNkdF9JRGF0YU5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGhhbmRsZUZpbmlzaCA9ICgpID0+IHtcclxuICAgICAgICBpZiAoaGl4aWtlRnJvbSkge1xyXG4gICAgICAgICAgICAvL2doaSBuaOG6rW4gdGhhbyB0w6FjXHJcbiAgICAgICAgICAgIGljZHQuaGlzdG9yeS5wdXNoKFt7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnc2l6ZScsXHJcbiAgICAgICAgICAgICAgICBmcm9tOiBoaXhpa2VGcm9tLFxyXG4gICAgICAgICAgICAgICAgdG86IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoeyBpZCwgc2l6ZSwgYXR0cmlidXRlIH0pKSBhcyBpY2R0X0lEYXRhTm9kZSxcclxuICAgICAgICAgICAgfV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgaXNNb3ZlZCA9IGZhbHNlO1xyXG5cclxuICAgIGxldCBjb21wb25lbnQgPSB7XHJcbiAgICAgICAgc3RhcnQ6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0pID0+IHtcclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgaGFuZGxlU3RhcnQoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1vdmU6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0sIG9mZnNldHM6IEFycmF5PEFycmF5PG51bWJlcj4+KSA9PiB7XHJcbiAgICAgICAgICAgIGhhbmRsZUF0dHJpYnV0ZShvZmZzZXRzWzBdWzBdLCBvZmZzZXRzWzBdWzFdLCBvZmZzZXQueCwgb2Zmc2V0LnkpO1xyXG5cclxuICAgICAgICAgICAgaXNNb3ZlZCA9IHRydWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbmQ6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0sIG9mZnNldHM6IEFycmF5PEFycmF5PG51bWJlcj4+KSA9PiB7XHJcbiAgICAgICAgICAgIC8vaGFuZGxlQXR0cmlidXRlKG9mZnNldHNbMF1bMF0sIG9mZnNldHNbMF1bMV0sIG9mZnNldC54LCBvZmZzZXQueSk7XHJcblxyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICBpZiAoaXNNb3ZlZCkge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlRmluaXNoKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWNkdF9Qb2ludGVyRXZlbnRzKGV2ZW50cywgY29tcG9uZW50KTtcclxufSIsImltcG9ydCB7IFZfSUQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vbG9va3VwL1ZfSURcIjtcclxuaW1wb3J0IHsgaWNkdCB9IGZyb20gXCIuLi8uLi8uLi8uLi9wcm90b3R5cGUvaWNkdFwiO1xyXG5pbXBvcnQgeyBpY2R0X0lEYXRhTm9kZVNpemUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vaW50ZXJmYWNlL0lEYXRhU291cmNlXCI7XHJcbmltcG9ydCB7IGljZHRfT2Zmc2V0MlNpemUgfSBmcm9tIFwiLi4vLi4vLi4vaGFuZGxlL29mZnNldFwiO1xyXG5pbXBvcnQgeyBpY2R0X1BvaW50ZXJFdmVudCwgaWNkdF9Qb2ludGVyRXZlbnRzIH0gZnJvbSBcIi4uLy4uLy4uL3BvaW50ZXIvcG9pbnRlci1ldmVudFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbiwgc3luY05vZGVTY2FuIH0gZnJvbSBcIi4uLy4uLy4uL3N5bmMtZWxlbWVudC9zdmctZWxlbWVudFwiO1xyXG5pbXBvcnQgeyBpY2R0X1Jlc2l6ZSB9IGZyb20gXCIuLi9yZXNpemUvcmVzaXplXCI7XHJcbmltcG9ydCB7IGljZHRfU2VsZWN0IH0gZnJvbSBcIi4uL3NlbGVjdC9zZWxlY3RcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X1NjYW4gPSAoZXZlbnRzOiB7IG1vdXNlRXZlbnQ/OiBNb3VzZUV2ZW50LCB0b3VjaEV2ZW50PzogVG91Y2hFdmVudCB9KSA9PiB7XHJcblxyXG4gICAgbGV0IHgxOiBudW1iZXIgPSAwLFxyXG4gICAgICAgIHkxOiBudW1iZXIgPSAwLFxyXG4gICAgICAgIHgyOiBudW1iZXIgPSAxLFxyXG4gICAgICAgIHkyOiBudW1iZXIgPSAxO1xyXG5cclxuICAgIGxldCBlbGVHcm91cCA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKFZfSUQuU0NBTl9HUk9VUCwgJ2cnKTtcclxuXHJcbiAgICBsZXQgc2l6ZSA9IGljZHRfT2Zmc2V0MlNpemUoeDEsIHkxLCB4MiwgeTIpO1xyXG5cclxuICAgIHN5bmNOb2RlU2NhbihlbGVHcm91cCwgc2l6ZSk7XHJcblxyXG4gICAgbW92ZShldmVudHMsIHNpemUsIGVsZUdyb3VwKTtcclxufVxyXG5cclxuY29uc3QgbW92ZSA9IChldmVudHM6IHsgbW91c2VFdmVudD86IE1vdXNlRXZlbnQsIHRvdWNoRXZlbnQ/OiBUb3VjaEV2ZW50IH0sIHNpemU6IGljZHRfSURhdGFOb2RlU2l6ZSwgZWxlR3JvdXA6IEhUTUxFbGVtZW50KSA9PiB7XHJcblxyXG4gICAgbGV0IGhhbmRsZUF0dHJpYnV0ZSA9ICh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKSA9PiB7XHJcblxyXG4gICAgICAgIHNpemUgPSBpY2R0X09mZnNldDJTaXplKHgxLCB5MSwgeDIsIHkyKTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICBzeW5jTm9kZVNjYW4oZWxlR3JvdXAsIHNpemUpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBjb21wb25lbnQgPSB7XHJcbiAgICAgICAgc3RhcnQ6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0pID0+IHtcclxuICAgICAgICAgICAgLy9cclxuICAgICAgICB9LFxyXG4gICAgICAgIG1vdmU6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0sIG9mZnNldHM6IEFycmF5PEFycmF5PG51bWJlcj4+KSA9PiB7XHJcbiAgICAgICAgICAgIGhhbmRsZUF0dHJpYnV0ZShvZmZzZXRzWzBdWzBdLCBvZmZzZXRzWzBdWzFdLCBvZmZzZXQueCwgb2Zmc2V0LnkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW5kOiAob2Zmc2V0OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB9LCBvZmZzZXRzOiBBcnJheTxBcnJheTxudW1iZXI+PikgPT4ge1xyXG4gICAgICAgICAgICAvL2hhbmRsZUF0dHJpYnV0ZShvZmZzZXRzWzBdWzBdLCBvZmZzZXRzWzBdWzFdLCBvZmZzZXQueCwgb2Zmc2V0LnkpO1xyXG5cclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgZWxlR3JvdXA/LnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgaWNkdC5kYXRhU2VsZWN0LmlkcyA9IGljZHQuZGF0YS5nZXROb2RlSW5BcmVhKFxyXG4gICAgICAgICAgICAgICAgTWF0aC5taW4ob2Zmc2V0c1swXVswXSwgb2Zmc2V0LngpLFxyXG4gICAgICAgICAgICAgICAgTWF0aC5taW4ob2Zmc2V0c1swXVsxXSwgb2Zmc2V0LnkpLFxyXG4gICAgICAgICAgICAgICAgTWF0aC5tYXgob2Zmc2V0c1swXVswXSwgb2Zmc2V0LngpLFxyXG4gICAgICAgICAgICAgICAgTWF0aC5tYXgob2Zmc2V0c1swXVsxXSwgb2Zmc2V0LnkpXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBsZXQgbm9kZXMgPSBpY2R0LmRhdGFTZWxlY3Qubm9kZXM7XHJcblxyXG4gICAgICAgICAgICBpZiAobm9kZXMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgICAgIC8vdOG6oW8gY8OhYyBuw7p0IHRoYXkgxJHhu5VpIGvDrWNoIHRoxrDhu5tjXHJcbiAgICAgICAgICAgICAgICBpY2R0X1Jlc2l6ZShub2Rlc1swXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobm9kZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgLy924bq9IGtodW5nIGNo4buNbiBuaGnhu4F1IMSR4buRaSB0xrDhu6NuZ1xyXG4gICAgICAgICAgICAgICAgaWNkdF9TZWxlY3Qobm9kZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGljZHRfUG9pbnRlckV2ZW50cyhldmVudHMsIGNvbXBvbmVudCk7XHJcbn0iLCJpbXBvcnQgeyBWX0lEIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2xvb2t1cC9WX0lEXCI7XHJcbmltcG9ydCB7IGljZHQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vcHJvdG90eXBlL2ljZHRcIjtcclxuaW1wb3J0IHsgaWNkdF9JRGF0YU5vZGUsIGljZHRfSURhdGFOb2RlU2l6ZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuaW1wb3J0IHsgaWNkdF9PZmZzZXQyU2l6ZSwgaWNkdF9TaXplMkF0dHJpYnV0ZSB9IGZyb20gXCIuLi8uLi8uLi9oYW5kbGUvb2Zmc2V0XCI7XHJcbmltcG9ydCB7IGljZHRfUG9pbnRlckV2ZW50LCBpY2R0X1BvaW50ZXJFdmVudHMgfSBmcm9tIFwiLi4vLi4vLi4vcG9pbnRlci9wb2ludGVyLWV2ZW50XCI7XHJcbmltcG9ydCB7IGljZHRfU3luY1N2Z05vZGU0RGVzaWduLCBpY2R0X1N5bmNTdmdOb2RlQXR0cmlidXRlLCBpY2R0X1N5bmNTdmdOb2RlU3R5bGVBY3RpdmUsIHN5bmNOb2RlU2VsZWN0IH0gZnJvbSBcIi4uLy4uLy4uL3N5bmMtZWxlbWVudC9zdmctZWxlbWVudFwiO1xyXG5pbXBvcnQgeyBpY2R0X1NjYWxlTnVtYmVyIH0gZnJvbSBcIi4uLy4uLy4uL2hhbmRsZS9zY2FsZS1udW1iZXJcIjtcclxuaW1wb3J0IHsgaWNkdF9Sb3VuZE51bWJlciB9IGZyb20gXCIuLi8uLi8uLi8uLi9zY3JpcHQvaGFuZGxlL3JvdW5kLW51bWJlclwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfU2VsZWN0ID0gKG5vZGVzOiBBcnJheTxpY2R0X0lEYXRhTm9kZT4pID0+IHtcclxuXHJcbiAgICBsZXQgeDE6IG51bWJlciA9IDk5OTk5OSxcclxuICAgICAgICB5MTogbnVtYmVyID0gOTk5OTk5LFxyXG4gICAgICAgIHgyOiBudW1iZXIgPSAtOTk5OTk5LFxyXG4gICAgICAgIHkyOiBudW1iZXIgPSAtOTk5OTk5O1xyXG5cclxuICAgIG5vZGVzPy5mb3JFYWNoKG5vZGUgPT4ge1xyXG4gICAgICAgIHgxID0gTWF0aC5taW4oeDEsIG5vZGUuc2l6ZS54KTtcclxuICAgICAgICB5MSA9IE1hdGgubWluKHkxLCBub2RlLnNpemUueSk7XHJcbiAgICAgICAgeDIgPSBNYXRoLm1heCh4Miwgbm9kZS5zaXplLnggKyBub2RlLnNpemUud2lkdGgpO1xyXG4gICAgICAgIHkyID0gTWF0aC5tYXgoeTIsIG5vZGUuc2l6ZS55ICsgbm9kZS5zaXplLmhlaWdodCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgZWxlR3JvdXAgPSBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbihWX0lELlNFTEVDVF9HUk9VUCwgJ2cnKTtcclxuXHJcbiAgICBsZXQgc2l6ZSA9IGljZHRfT2Zmc2V0MlNpemUoeDEsIHkxLCB4MiwgeTIpO1xyXG5cclxuICAgIHN5bmNOb2RlU2VsZWN0KGVsZUdyb3VwLCBub2Rlcywgc2l6ZSlcclxuICAgICAgICAuZm9yRWFjaChpdGVtID0+IHtcclxuXHJcbiAgICAgICAgICAgIC8vIG5vZGVzPy5mb3JFYWNoKG5vZGUgPT4ge1xyXG4gICAgICAgICAgICAvLyAgICAgLy9j4bqtcCBuaOG6rXQgVUlcclxuICAgICAgICAgICAgLy8gICAgIGljZHRfU3luY1N2Z05vZGVTdHlsZUFjdGl2ZSgod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobm9kZS5pZCksIHRydWUpO1xyXG4gICAgICAgICAgICAvLyB9KVxyXG5cclxuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihpdGVtLmVsZW1lbnQsIGl0ZW0ucG9zVHlwZSwgc2l6ZSwgbm9kZXMsIGVsZUdyb3VwKTtcclxuICAgICAgICB9KTtcclxufVxyXG5cclxuXHJcbmNvbnN0IGFkZEV2ZW50TGlzdGVuZXIgPSAoZWxlbWVudDogSFRNTEVsZW1lbnQsIHBvc1R5cGU6IHN0cmluZywgc2l6ZTogaWNkdF9JRGF0YU5vZGVTaXplLCBub2RlczogQXJyYXk8aWNkdF9JRGF0YU5vZGU+LCBlbGVHcm91cDogSFRNTEVsZW1lbnQpID0+IHtcclxuXHJcbiAgICBsZXQgaXNUb3VjaCA9IGZhbHNlO1xyXG5cclxuICAgIGVsZW1lbnQ/LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCAoZXZlbnQ6IFRvdWNoRXZlbnQpID0+IHtcclxuXHJcbiAgICAgICAgLy9jaOG7iSBuaOG6rW4gdG91Y2hzdGFydCBob+G6t2MgbW91c2Vkb3duXHJcbiAgICAgICAgaXNUb3VjaCA9IHRydWU7XHJcblxyXG4gICAgICAgIG1vdmUoeyB0b3VjaEV2ZW50OiBldmVudCB9LCBwb3NUeXBlLCBzaXplLCBub2RlcywgZWxlR3JvdXApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZWxlbWVudD8uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XHJcblxyXG4gICAgICAgIGlmIChldmVudC5idXR0b24gIT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL2No4buJIG5o4bqtbiB0b3VjaHN0YXJ0IGhv4bq3YyBtb3VzZWRvd25cclxuICAgICAgICBpZiAoaXNUb3VjaCkge1xyXG4gICAgICAgICAgICBpc1RvdWNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG1vdmUoeyBtb3VzZUV2ZW50OiBldmVudCB9LCBwb3NUeXBlLCBzaXplLCBub2RlcywgZWxlR3JvdXApO1xyXG4gICAgfSk7XHJcblxyXG59XHJcblxyXG5cclxuY29uc3QgbW92ZSA9IChldmVudHM6IHsgbW91c2VFdmVudD86IE1vdXNlRXZlbnQsIHRvdWNoRXZlbnQ/OiBUb3VjaEV2ZW50IH0sIHBvc1R5cGU6IHN0cmluZywgc2l6ZTogaWNkdF9JRGF0YU5vZGVTaXplLCBub2RlczogQXJyYXk8aWNkdF9JRGF0YU5vZGU+LCBlbGVHcm91cDogSFRNTEVsZW1lbnQpID0+IHtcclxuXHJcbiAgICBsZXQgeyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0gPSBzaXplO1xyXG4gICAgbGV0IHNpemVzID0gbm9kZXMubWFwKG0gPT4ge1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBtLnNpemUpO1xyXG4gICAgfSlcclxuXHJcbiAgICBsZXQgaGFuZGxlQXR0cmlidXRlID0gKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpID0+IHtcclxuXHJcbiAgICAgICAgLy9z4butYSBraHVuZ1xyXG4gICAgICAgICgoKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBuZXdTaXplOiB7IHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciB9O1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoIChwb3NUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdyZWN0LWNlbnRlcic6IHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiB4ICsgeDIgLSB4MSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTogeSArIHkyIC0geTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3U2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDogeCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTogeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vZ8OhbiBnacOhIHRy4buLIG3hu5tpIGNobyBzaXplXHJcbiAgICAgICAgICAgIC8vIG5ld1NpemUueCA8IDEgfHwgbmV3U2l6ZS55IDwgMSB8fCBuZXdTaXplLndpZHRoIDwgNCB8fCBuZXdTaXplLmhlaWdodCA8IDRcclxuICAgICAgICAgICAgLy8gICAgID8gbnVsbFxyXG4gICAgICAgICAgICAvLyAgICAgOiBPYmplY3QuYXNzaWduKHNpemUsIG5ld1NpemUpO1xyXG5cclxuICAgICAgICAgICAgLy8gbGV0IHNjYWxlV2lkdGggPSBpY2R0X1NjYWxlTnVtYmVyKGljZHQuc2NyZWVuLndpZHRoKSxcclxuICAgICAgICAgICAgLy8gICAgIHNjYWxlSGVpZ2h0ID0gaWNkdF9TY2FsZU51bWJlcihpY2R0LnNjcmVlbi5oZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgLy9taW5cclxuICAgICAgICAgICAgaWYgKG5ld1NpemUud2lkdGggPCAwKSBuZXdTaXplLndpZHRoID0gMDtcclxuICAgICAgICAgICAgaWYgKG5ld1NpemUuaGVpZ2h0IDwgMCkgbmV3U2l6ZS5oZWlnaHQgPSAwO1xyXG4gICAgICAgICAgICAvL2lmIChuZXdTaXplLnggPCAwKSBuZXdTaXplLnggPSAwO1xyXG4gICAgICAgICAgICAvL2lmIChuZXdTaXplLnkgPCAwKSBuZXdTaXplLnkgPSAwO1xyXG5cclxuICAgICAgICAgICAgLy9tYXhcclxuICAgICAgICAgICAgLy9pZiAobmV3U2l6ZS53aWR0aCA+IHNjYWxlV2lkdGgpIG5ld1NpemUud2lkdGggPSBzY2FsZVdpZHRoO1xyXG4gICAgICAgICAgICAvL2lmIChuZXdTaXplLmhlaWdodCA+IHNjYWxlSGVpZ2h0KSBuZXdTaXplLmhlaWdodCA9IHNjYWxlSGVpZ2h0O1xyXG4gICAgICAgICAgICAvL2lmIChuZXdTaXplLnggPiBzY2FsZVdpZHRoIC0gbmV3U2l6ZS53aWR0aCkgbmV3U2l6ZS54ID0gc2NhbGVXaWR0aCAtIG5ld1NpemUud2lkdGg7XHJcbiAgICAgICAgICAgIC8vaWYgKG5ld1NpemUueSA+IHNjYWxlSGVpZ2h0IC0gbmV3U2l6ZS5oZWlnaHQpIG5ld1NpemUueSA9IHNjYWxlSGVpZ2h0IC0gbmV3U2l6ZS5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHNpemUsIG5ld1NpemUpO1xyXG5cclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgc3luY05vZGVTZWxlY3QoZWxlR3JvdXAsIG5vZGVzLCBzaXplKTtcclxuICAgICAgICB9KSgpO1xyXG5cclxuICAgICAgICAvL3Phu61hIG5vZGVcclxuICAgICAgICAoKCkgPT4ge1xyXG4gICAgICAgICAgICBub2Rlcy5mb3JFYWNoKChub2RlLCBpZHgpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgeyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0gPSBzaXplc1tpZHhdO1xyXG4gICAgICAgICAgICAgICAgbGV0IHsgaWQsIHR5cGUsIHNpemUsIGF0dHJpYnV0ZSB9ID0gbm9kZTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3U2l6ZTogeyB4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHBvc1R5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdyZWN0LWNlbnRlcic6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHggKyB4MiAtIHgxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogeSArIHkyIC0geTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1NpemUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiB4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL2fDoW4gZ2nDoSB0cuG7iyBt4bubaSBjaG8gc2l6ZVxyXG4gICAgICAgICAgICAgICAgLy8gbmV3U2l6ZS54IDwgMSB8fCBuZXdTaXplLnkgPCAxIHx8IG5ld1NpemUud2lkdGggPCA0IHx8IG5ld1NpemUuaGVpZ2h0IDwgNFxyXG4gICAgICAgICAgICAgICAgLy8gICAgID8gbnVsbFxyXG4gICAgICAgICAgICAgICAgLy8gICAgIDogT2JqZWN0LmFzc2lnbihzaXplLCBuZXdTaXplKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBsZXQgc2NhbGVXaWR0aCA9IGljZHRfU2NhbGVOdW1iZXIoaWNkdC5zY3JlZW4ud2lkdGgpLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgIHNjYWxlSGVpZ2h0ID0gaWNkdF9TY2FsZU51bWJlcihpY2R0LnNjcmVlbi5oZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vbWluXHJcbiAgICAgICAgICAgICAgICBpZiAobmV3U2l6ZS53aWR0aCA8IDApIG5ld1NpemUud2lkdGggPSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5ld1NpemUuaGVpZ2h0IDwgMCkgbmV3U2l6ZS5oZWlnaHQgPSAwO1xyXG4gICAgICAgICAgICAgICAgLy9pZiAobmV3U2l6ZS54IDwgMCkgbmV3U2l6ZS54ID0gMDtcclxuICAgICAgICAgICAgICAgIC8vaWYgKG5ld1NpemUueSA8IDApIG5ld1NpemUueSA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9tYXhcclxuICAgICAgICAgICAgICAgIC8vaWYgKG5ld1NpemUud2lkdGggPiBzY2FsZVdpZHRoKSBuZXdTaXplLndpZHRoID0gc2NhbGVXaWR0aDtcclxuICAgICAgICAgICAgICAgIC8vaWYgKG5ld1NpemUuaGVpZ2h0ID4gc2NhbGVIZWlnaHQpIG5ld1NpemUuaGVpZ2h0ID0gc2NhbGVIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAvL2lmIChuZXdTaXplLnggPiBzY2FsZVdpZHRoIC0gbmV3U2l6ZS53aWR0aCkgbmV3U2l6ZS54ID0gc2NhbGVXaWR0aCAtIG5ld1NpemUud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAvL2lmIChuZXdTaXplLnkgPiBzY2FsZUhlaWdodCAtIG5ld1NpemUuaGVpZ2h0KSBuZXdTaXplLnkgPSBzY2FsZUhlaWdodCAtIG5ld1NpemUuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vcm91bmQgbnVtYmVyXHJcbiAgICAgICAgICAgICAgICBuZXdTaXplLnggPSBpY2R0X1JvdW5kTnVtYmVyKG5ld1NpemUueCk7XHJcbiAgICAgICAgICAgICAgICBuZXdTaXplLnkgPSBpY2R0X1JvdW5kTnVtYmVyKG5ld1NpemUueSk7XHJcbiAgICAgICAgICAgICAgICBuZXdTaXplLndpZHRoID0gaWNkdF9Sb3VuZE51bWJlcihuZXdTaXplLndpZHRoKTtcclxuICAgICAgICAgICAgICAgIG5ld1NpemUuaGVpZ2h0ID0gaWNkdF9Sb3VuZE51bWJlcihuZXdTaXplLmhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzaXplLCBuZXdTaXplKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2fDoW4gZ2nDoSB0cuG7iyBt4bubaSBjaG8gYXR0cmlidXRlXHJcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGF0dHJpYnV0ZSwgaWNkdF9TaXplMkF0dHJpYnV0ZSh0eXBlLCBzaXplLCBhdHRyaWJ1dGUpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2Phuq1wIG5o4bqtdCBVSVxyXG4gICAgICAgICAgICAgICAgaWNkdF9TeW5jU3ZnTm9kZUF0dHJpYnV0ZSgod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLCBhdHRyaWJ1dGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vbMawdSBraG/huqNuZyBraOG6r2MgdHLGsOG7m2Mga2hpIHRoYXkgxJHhu5VpXHJcbiAgICBsZXQgaGl4aWtlRnJvbXMgPSBbXSBhcyBhbnk7XHJcblxyXG4gICAgbGV0IGhhbmRsZVN0YXJ0ID0gKCkgPT4ge1xyXG4gICAgICAgIG5vZGVzLmZvckVhY2goKG5vZGUsIGlkeCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgeyBpZCwgdHlwZSwgc2l6ZSwgYXR0cmlidXRlIH0gPSBub2RlO1xyXG5cclxuICAgICAgICAgICAgaGl4aWtlRnJvbXMucHVzaChKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHsgaWQsIHNpemUsIGF0dHJpYnV0ZSB9KSkgYXMgaWNkdF9JRGF0YU5vZGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBoYW5kbGVGaW5pc2ggPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKGhpeGlrZUZyb21zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAvL2doaSBuaOG6rW4gdGhhbyB0w6FjXHJcbiAgICAgICAgICAgIGljZHQuaGlzdG9yeS5wdXNoKFxyXG4gICAgICAgICAgICAgICAgbm9kZXMubWFwKChub2RlLCBpZHgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeyBpZCwgdHlwZSwgc2l6ZSwgYXR0cmlidXRlIH0gPSBub2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzaXplJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogaGl4aWtlRnJvbXNbaWR4XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoeyBpZCwgc2l6ZSwgYXR0cmlidXRlIH0pKSBhcyBpY2R0X0lEYXRhTm9kZSxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgY29tcG9uZW50ID0ge1xyXG4gICAgICAgIHN0YXJ0OiAob2Zmc2V0OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB9KSA9PiB7XHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIGhhbmRsZVN0YXJ0KCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtb3ZlOiAob2Zmc2V0OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB9LCBvZmZzZXRzOiBBcnJheTxBcnJheTxudW1iZXI+PikgPT4ge1xyXG4gICAgICAgICAgICBoYW5kbGVBdHRyaWJ1dGUob2Zmc2V0c1swXVswXSwgb2Zmc2V0c1swXVsxXSwgb2Zmc2V0LngsIG9mZnNldC55KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVuZDogKG9mZnNldDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSwgb2Zmc2V0czogQXJyYXk8QXJyYXk8bnVtYmVyPj4pID0+IHtcclxuICAgICAgICAgICAgLy9oYW5kbGVBdHRyaWJ1dGUob2Zmc2V0c1swXVswXSwgb2Zmc2V0c1swXVsxXSwgb2Zmc2V0LngsIG9mZnNldC55KTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIGhhbmRsZUZpbmlzaCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpY2R0X1BvaW50ZXJFdmVudHMoZXZlbnRzLCBjb21wb25lbnQpO1xyXG59IiwiaW1wb3J0IHsgVl9JRCB9IGZyb20gXCIuLi8uLi9sb29rdXAvVl9JRFwiO1xyXG5pbXBvcnQgeyBpY2R0X0lEYXRhTm9kZSwgaWNkdF9JRGF0YVNsaWRlIH0gZnJvbSBcIi4uLy4uL2ludGVyZmFjZS9JRGF0YVNvdXJjZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z0NpcmNsZSB9IGZyb20gXCIuL3NoYXBlL3N2Zy9jaXJjbGUvc3ZnLWNpcmNsZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z0VsbGlwc2UgfSBmcm9tIFwiLi9zaGFwZS9zdmcvZWxsaXBzZS9zdmctZWxsaXBzZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z1BvbHlnb24gfSBmcm9tIFwiLi9zaGFwZS9zdmcvcG9seWdvbi9zdmctcG9seWdvblwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z1JlY3QgfSBmcm9tIFwiLi9zaGFwZS9zdmcvcmVjdC9zdmctcmVjdFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z0xpbmUgfSBmcm9tIFwiLi9zaGFwZS9zdmcvbGluZS9zdmctbGluZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z0dyb3VwIH0gZnJvbSBcIi4vc2hhcGUvc3ZnL2dyb3VwL3N2Zy1ncm91cFwiO1xyXG5pbXBvcnQgeyBWX1NoYXBlVHlwZSB9IGZyb20gXCIuLi8uLi9sb29rdXAvVl9TaGFwZVR5cGVcIjtcclxuaW1wb3J0IHsgaWNkdF9TdmdQYXRoIH0gZnJvbSBcIi4vc2hhcGUvc3ZnL3BhdGgvc3ZnLXBhdGhcIjtcclxuaW1wb3J0IHsgaWNkdF9TdmdUZXh0IH0gZnJvbSBcIi4vc2hhcGUvc3ZnL3RleHQvc3ZnLXRleHRcIjtcclxuaW1wb3J0IHsgaWNkdF9TdmdGb3JlaWduT2JqZWN0IH0gZnJvbSBcIi4vc2hhcGUvc3ZnL2ZvcmVpZ25vYmplY3Qvc3ZnLWZvcmVpZ25vYmplY3RcIjtcclxuaW1wb3J0IHsgaWNkdF9TdmdJbWFnZSB9IGZyb20gXCIuL3NoYXBlL3N2Zy9pbWFnZS9zdmctaW1hZ2VcIjtcclxuaW1wb3J0IHsgaWNkdCB9IGZyb20gXCIuLi8uLi9wcm90b3R5cGUvaWNkdFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbiwgc3luY0JhY2tncm91bmQgfSBmcm9tIFwiLi4vc3luYy1lbGVtZW50L3N2Zy1lbGVtZW50XCI7XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9SZW5kZXJDb21wb25lbnQgPSAoc2xpZGU/OiBpY2R0X0lEYXRhU2xpZGUsIHN2Z0lkPzogbnVtYmVyLCB0aGlzV2luZG93PzogV2luZG93KSA9PiB7XHJcbiAgICAvL2lmICh3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgPT0gJ2xvY2FsaG9zdCcpIGNvbnNvbGUubG9nKGBpY2R0X1JlbmRlckNvbXBvbmVudChzbGlkZSwgJHtzdmdJZH0pYCwgc2xpZGUpXHJcblxyXG4gICAgaWYgKHN2Z0lkICYmICEodGhpc1dpbmRvdyA/PyB3aW5kb3cgYXMgYW55KS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChzdmdJZCkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGxvY2F0aW9uLmhvc3RuYW1lID09ICdsb2NhbGhvc3QnKSBjb25zb2xlLmxvZygnw6HDocOhw6HDocOhIHPhu6MgcXXDoSDEkWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaSEnLCBzdmdJZCk7XHJcblxyXG4gICAgLy9cclxuICAgIC8vICgoKSA9PiB7XHJcbiAgICAvLyAgICAgbGV0IHsgY29sb3IsIHBhdGgsIHVybCwgYmFzZTY0IH0gPSBzbGlkZT8uc3ZnPy5iYWNrZ3JvdW5kID8/IHt9O1xyXG5cclxuICAgIC8vICAgICBsZXQgc3ZnRWxlbWVudCA9IChzdmdJZCA/ICh0aGlzV2luZG93ID8/IHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHN2Z0lkKSA6IGljZHQudGFyZ2V0KSBhcyBIVE1MRWxlbWVudDtcclxuICAgIC8vICAgICBzdmdFbGVtZW50LnN0eWxlLmJhY2tncm91bmQgPSBgJHtjb2xvciA/PyBcIlwifSAkeygoKSA9PiB7XHJcbiAgICAvLyAgICAgICAgIGlmIChiYXNlNjQpIHtcclxuICAgIC8vICAgICAgICAgICAgIHJldHVybiBgdXJsKCR7YmFzZTY0fSkgNTAlIDUwJSAvIGNvdmVyIG5vLXJlcGVhdGA7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgZWxzZSBpZiAodXJsKSB7XHJcbiAgICAvLyAgICAgICAgICAgICByZXR1cm4gYHVybCgnJHt1cmx9JykgNTAlIDUwJSAvIGNvdmVyIG5vLXJlcGVhdGA7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgZWxzZSBpZiAocGF0aCkge1xyXG4gICAgLy8gICAgICAgICAgICAgcmV0dXJuIGB1cmwoJyR7aWNkdC5jb25maWc/LnJlYWRmaWxldXBsb2FkdXJsICsgcGF0aH0nKSBuby1yZXBlYXQgNTAlIDUwJSAvIGNvdmVyYDtcclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIC8vICAgICB9KSgpID8/IFwiXCJ9YC50cmltKCk7XHJcbiAgICAvLyB9KSgpO1xyXG5cclxuICAgIGlmIChzdmdJZCkge1xyXG4gICAgICAgIGxldCBwTm9kZSA9ICh0aGlzV2luZG93ID8/IHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHN2Z0lkKTtcclxuXHJcbiAgICAgICAgalF1ZXJ5KHBOb2RlKS5maW5kKCcjJyArIFZfSUQuQkFDS0dST1VORF9HUk9VUCkuZW1wdHkoKTtcclxuICAgICAgICBsZXQgZWxlR3JvdXAgPSBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbihWX0lELkJBQ0tHUk9VTkRfR1JPVVAsICdnJywgdW5kZWZpbmVkLCBwTm9kZSk7XHJcbiAgICAgICAgc3luY0JhY2tncm91bmQoZWxlR3JvdXAsIHNsaWRlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGpRdWVyeShpY2R0LnRhcmdldCkuZmluZCgnIycgKyBWX0lELkJBQ0tHUk9VTkRfR1JPVVApLmVtcHR5KCk7XHJcbiAgICAgICAgbGV0IGVsZUdyb3VwID0gaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24oVl9JRC5CQUNLR1JPVU5EX0dST1VQLCAnZycsIHVuZGVmaW5lZCwgaWNkdC50YXJnZXQpO1xyXG4gICAgICAgIHN5bmNCYWNrZ3JvdW5kKGVsZUdyb3VwLCBzbGlkZSk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHJlY3Vyc2l2ZU5vZGUgPSAobm9kZXM/OiBBcnJheTxpY2R0X0lEYXRhTm9kZT4sIHBJZD86IG51bWJlciB8IHN0cmluZykgPT4ge1xyXG5cclxuICAgICAgICBwSWQgPSBzdmdJZCAmJiBwSWQgPyBgJHtzdmdJZH0tJHtwSWR9YCA6IHN2Z0lkID8/IHBJZDtcclxuXHJcbiAgICAgICAgbm9kZXM/LmZvckVhY2goaXRlbSA9PiB7XHJcblxyXG4gICAgICAgICAgICBsZXQgaWQgPSAhc3ZnSWQgPyBpdGVtLmlkIDogYCR7c3ZnSWR9LSR7aXRlbS5pZH1gO1xyXG5cclxuICAgICAgICAgICAgLy94w7NhIHBo4bqnbiB04butIMSRxrDhu6NjIMSRw6FuaCBk4bqldVxyXG4gICAgICAgICAgICBpZiAoaXRlbS5pc2RlbGV0ZWQpIHtcclxuICAgICAgICAgICAgICAgICh0aGlzV2luZG93ID8/IHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKT8ucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAoaXRlbS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLkdST1VQOiB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGljZHRfU3ZnR3JvdXAoaWQsIHt9LCBwSWQgPyAodGhpc1dpbmRvdyA/PyB3aW5kb3cgYXMgYW55KS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChwSWQpIDogbnVsbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vxJHhu4cgcXV5LCB0w6xtIGtp4bq/bSBt4bqleSB0aOG6sW5nIMSR4buHXHJcbiAgICAgICAgICAgICAgICAgICAgcmVjdXJzaXZlTm9kZShpdGVtLm5vZGVzLCBpdGVtLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgVl9TaGFwZVR5cGUuQ0lSQ0xFOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdF9TdmdDaXJjbGUoaWQsIHsgc2l6ZTogaXRlbS5zaXplLCBhdHRyaWJ1dGU6IGl0ZW0uYXR0cmlidXRlIH0sIHBJZCA/ICh0aGlzV2luZG93ID8/IHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBJZCkgOiBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgVl9TaGFwZVR5cGUuRUxMSVBTRToge1xyXG4gICAgICAgICAgICAgICAgICAgIGljZHRfU3ZnRWxsaXBzZShpZCwgeyBzaXplOiBpdGVtLnNpemUsIGF0dHJpYnV0ZTogaXRlbS5hdHRyaWJ1dGUgfSwgcElkID8gKHRoaXNXaW5kb3cgPz8gd2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocElkKSA6IG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBWX1NoYXBlVHlwZS5MSU5FOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdF9TdmdMaW5lKGlkLCB7IHNpemU6IGl0ZW0uc2l6ZSwgYXR0cmlidXRlOiBpdGVtLmF0dHJpYnV0ZSB9LCBwSWQgPyAodGhpc1dpbmRvdyA/PyB3aW5kb3cgYXMgYW55KS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChwSWQpIDogbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLlJFQ1Q6IHtcclxuICAgICAgICAgICAgICAgICAgICBpY2R0X1N2Z1JlY3QoaWQsIHsgc2l6ZTogaXRlbS5zaXplLCBhdHRyaWJ1dGU6IGl0ZW0uYXR0cmlidXRlIH0sIHBJZCA/ICh0aGlzV2luZG93ID8/IHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBJZCkgOiBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgVl9TaGFwZVR5cGUuUE9MWUdPTjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGljZHRfU3ZnUG9seWdvbihpZCwgeyBzaXplOiBpdGVtLnNpemUsIGF0dHJpYnV0ZTogaXRlbS5hdHRyaWJ1dGUgfSwgcElkID8gKHRoaXNXaW5kb3cgPz8gd2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocElkKSA6IG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBWX1NoYXBlVHlwZS5GT1JFSUdOT0JKRUNUOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdF9TdmdGb3JlaWduT2JqZWN0KGlkLCB7IHNpemU6IGl0ZW0uc2l6ZSwgYXR0cmlidXRlOiBpdGVtLmF0dHJpYnV0ZSwgc3R5bGU6IGl0ZW0uc3R5bGUsIHNvdXJjZTogaXRlbS5zb3VyY2UgfSwgcElkID8gKHRoaXNXaW5kb3cgPz8gd2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocElkKSA6IG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBWX1NoYXBlVHlwZS5JTUFHRToge1xyXG4gICAgICAgICAgICAgICAgICAgIGljZHRfU3ZnSW1hZ2UoaWQsIHsgc2l6ZTogaXRlbS5zaXplLCBhdHRyaWJ1dGU6IGl0ZW0uYXR0cmlidXRlLCBzb3VyY2U6IGl0ZW0uc291cmNlIH0sIHBJZCA/ICh0aGlzV2luZG93ID8/IHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBJZCkgOiBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgVl9TaGFwZVR5cGUuVEVYVDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGljZHRfU3ZnVGV4dChpZCwgeyBzaXplOiBpdGVtLnNpemUsIGF0dHJpYnV0ZTogaXRlbS5hdHRyaWJ1dGUsIHNvdXJjZTogaXRlbS5zb3VyY2UgfSwgcElkID8gKHRoaXNXaW5kb3cgPz8gd2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocElkKSA6IG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBWX1NoYXBlVHlwZS5QQVRIOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdF9TdmdQYXRoKGlkLCB7IHNpemU6IGl0ZW0uc2l6ZSwgYXR0cmlidXRlOiBpdGVtLmF0dHJpYnV0ZSB9LCBwSWQgPyAodGhpc1dpbmRvdyA/PyB3aW5kb3cgYXMgYW55KS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChwSWQpIDogbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZWN1cnNpdmVOb2RlKHNsaWRlPy5zdmc/Lm5vZGVzKTtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X1NvcnRDb21wb25lbnQgPSAoc2xpZGU/OiBpY2R0X0lEYXRhU2xpZGUsIHN2Z0lkPzogbnVtYmVyKSA9PiB7XHJcblxyXG4gICAgaWYgKHN2Z0lkICYmICEod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc3ZnSWQpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCByZWN1cnNpdmVOb2RlID0gKG5vZGVzPzogQXJyYXk8aWNkdF9JRGF0YU5vZGU+LCBwSWQ/OiBudW1iZXIgfCBzdHJpbmcpID0+IHtcclxuXHJcbiAgICAgICAgcElkID0gIXBJZCA/IHN2Z0lkIDogYCR7c3ZnSWR9LSR7cElkfWA7XHJcblxyXG4gICAgICAgIG5vZGVzPy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG5cclxuICAgICAgICAgICAgbGV0IGlkID0gIXN2Z0lkID8gaXRlbS5pZCA6IGAke3N2Z0lkfS0ke2l0ZW0uaWR9YDtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIGpRdWVyeSgnIycgKyBpZCkuYXBwZW5kVG8ocElkID8gKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBJZCkgOiBpY2R0LnRhcmdldCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXRlbS50eXBlID09IFZfU2hhcGVUeXBlLkdST1VQKSB7XHJcbiAgICAgICAgICAgICAgICAvL8SR4buHIHF1eSwgdMOsbSBraeG6v20gbeG6pXkgdGjhurFuZyDEkeG7h1xyXG4gICAgICAgICAgICAgICAgcmVjdXJzaXZlTm9kZShpdGVtLm5vZGVzLCBpdGVtLmlkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlY3Vyc2l2ZU5vZGUoc2xpZGU/LnN2Zz8ubm9kZXMpO1xyXG5cclxufSIsImltcG9ydCB7IFZfU2hhcGVUeXBlIH0gZnJvbSBcIi4uLy4uLy4uL2xvb2t1cC9WX1NoYXBlVHlwZVwiO1xyXG5pbXBvcnQgeyBWX1BvbHlnb25SYXRpbyB9IGZyb20gXCIuLi8uLi8uLi9sb29rdXAvVl9Qb2x5Z29uUmF0aW9cIjtcclxuaW1wb3J0IHsgaWNkdCB9IGZyb20gXCIuLi8uLi8uLi9wcm90b3R5cGUvaWNkdFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z0NpcmNsZUNyZWF0ZSB9IGZyb20gXCIuL3N2Zy9jaXJjbGUvc3ZnLWNpcmNsZS1jcmVhdGVcIjtcclxuaW1wb3J0IHsgaWNkdF9TdmdFbGxpcHNlQ3JlYXRlIH0gZnJvbSBcIi4vc3ZnL2VsbGlwc2Uvc3ZnLWVsbGlwc2UtY3JlYXRlXCI7XHJcbmltcG9ydCB7IGljZHRfU3ZnUmVjdENyZWF0ZSB9IGZyb20gXCIuL3N2Zy9yZWN0L3N2Zy1yZWN0LWNyZWF0ZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z1BvbHlnb25DcmVhdGUgfSBmcm9tIFwiLi9zdmcvcG9seWdvbi9zdmctcG9seWdvbi1jcmVhdGVcIjtcclxuaW1wb3J0IHsgaWNkdF9TdmdMaW5lQ3JlYXRlIH0gZnJvbSBcIi4vc3ZnL2xpbmUvc3ZnLWxpbmUtY3JlYXRlXCI7XHJcbmltcG9ydCB7IGljZHRfUG9pbnRlckV2ZW50LCBpY2R0X1BvaW50ZXJFdmVudHMgfSBmcm9tIFwiLi4vLi4vcG9pbnRlci9wb2ludGVyLWV2ZW50XCI7XHJcbmltcG9ydCB7IGljZHRfU3ZnUGF0aENyZWF0ZSB9IGZyb20gXCIuL3N2Zy9wYXRoL3N2Zy1wYXRoLWNyZWF0ZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z0ZvcmVpZ25PYmplY3RDcmVhdGUgfSBmcm9tIFwiLi9zdmcvZm9yZWlnbm9iamVjdC9zdmctZm9yZWlnbm9iamVjdC1jcmVhdGVcIjtcclxuaW1wb3J0IHsgaWNkdF9TdmdJbWFnZUNyZWF0ZSB9IGZyb20gXCIuL3N2Zy9pbWFnZS9zdmctaW1hZ2UtY3JlYXRlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9TaGFwZUNvbXBvbmVudCA9IChldmVudHM6IHsgbW91c2VFdmVudD86IE1vdXNlRXZlbnQsIHRvdWNoRXZlbnQ/OiBUb3VjaEV2ZW50IH0pID0+IHtcclxuXHJcbiAgICB2YXIgY29tcG9uZW50ID0gbnVsbDtcclxuXHJcbiAgICBzd2l0Y2ggKGljZHQucG9pbnRlci5zaGFwZV90eXBlKSB7XHJcbiAgICAgICAgY2FzZSBWX1NoYXBlVHlwZS5DSVJDTEU6IHtcclxuICAgICAgICAgICAgY29tcG9uZW50ID0gbmV3IGljZHRfU3ZnQ2lyY2xlQ3JlYXRlKCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLkVMTElQU0U6IHtcclxuICAgICAgICAgICAgY29tcG9uZW50ID0gbmV3IGljZHRfU3ZnRWxsaXBzZUNyZWF0ZSgpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBWX1NoYXBlVHlwZS5MSU5FOiB7XHJcbiAgICAgICAgICAgIGNvbXBvbmVudCA9IG5ldyBpY2R0X1N2Z0xpbmVDcmVhdGUoKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgVl9TaGFwZVR5cGUuUkVDVDoge1xyXG4gICAgICAgICAgICBjb21wb25lbnQgPSBuZXcgaWNkdF9TdmdSZWN0Q3JlYXRlKCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLlBPTFlHT046IHtcclxuICAgICAgICAgICAgY29tcG9uZW50ID0gbmV3IGljZHRfU3ZnUG9seWdvbkNyZWF0ZShWX1BvbHlnb25SYXRpby5maW5kKGYgPT4gZi50eXBlID09IGljZHQucG9pbnRlci5wb2x5Z29uX3R5cGUpPy5yYXRpb3MpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBWX1NoYXBlVHlwZS5GT1JFSUdOT0JKRUNUOiB7XHJcbiAgICAgICAgICAgIGNvbXBvbmVudCA9IG5ldyBpY2R0X1N2Z0ZvcmVpZ25PYmplY3RDcmVhdGUoKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgVl9TaGFwZVR5cGUuSU1BR0U6IHtcclxuICAgICAgICAgICAgY29tcG9uZW50ID0gbmV3IGljZHRfU3ZnSW1hZ2VDcmVhdGUoKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgVl9TaGFwZVR5cGUuVEVYVDoge1xyXG4gICAgICAgICAgICBjb21wb25lbnQgPSBuZXcgaWNkdF9TdmdQYXRoQ3JlYXRlKCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLlBBVEg6IHtcclxuICAgICAgICAgICAgY29tcG9uZW50ID0gbmV3IGljZHRfU3ZnUGF0aENyZWF0ZSgpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbXBvbmVudCkge1xyXG4gICAgICAgIGljZHRfUG9pbnRlckV2ZW50cyhldmVudHMsIGNvbXBvbmVudCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBWX0lEIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2xvb2t1cC9WX0lEXCI7XHJcbmltcG9ydCB7IFZfU2hhcGVUeXBlIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2xvb2t1cC9WX1NoYXBlVHlwZVwiO1xyXG5pbXBvcnQgeyBpY2R0IH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3Byb3RvdHlwZS9pY2R0XCI7XHJcbmltcG9ydCB7IGljZHRfT2Zmc2V0MlNpemUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vaGFuZGxlL29mZnNldFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbiwgaWNkdF9TeW5jU3ZnTm9kZUF0dHJpYnV0ZSwgc3luY05vZGVDcmVhdGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vc3luYy1lbGVtZW50L3N2Zy1lbGVtZW50XCI7XHJcbmltcG9ydCB7IGljZHRfU3ZnQ2lyY2xlIH0gZnJvbSBcIi4vc3ZnLWNpcmNsZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1JvdW5kTnVtYmVyIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3NjcmlwdC9oYW5kbGUvcm91bmQtbnVtYmVyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgaWNkdF9TdmdDaXJjbGVDcmVhdGUge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBsZXQgZWxlR3JvdXAgPSBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbihWX0lELkNSRUFURV9HUk9VUCwgJ2cnKTtcclxuXHJcbiAgICAgICAgbGV0IHsgbm9kZUlkLCBlbGVtZW50LCBhdHRyaWJ1dGUsIHNpemUgfSA9IGljZHRfU3ZnQ2lyY2xlKE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwMCkpO1xyXG5cclxuICAgICAgICBsZXQgaGFuZGxlQXR0cmlidXRlID0gKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpID0+IHtcclxuXHJcbiAgICAgICAgICAgIHNpemUgPSBpY2R0X09mZnNldDJTaXplKHgxLCB5MSwgeDIsIHkyLCB7IHJhdGlvOiAxIH0pO1xyXG5cclxuICAgICAgICAgICAgLy9yb3VuZCBudW1iZXJcclxuICAgICAgICAgICAgc2l6ZS54ID0gaWNkdF9Sb3VuZE51bWJlcihzaXplLngpO1xyXG4gICAgICAgICAgICBzaXplLnkgPSBpY2R0X1JvdW5kTnVtYmVyKHNpemUueSk7XHJcbiAgICAgICAgICAgIHNpemUud2lkdGggPSBpY2R0X1JvdW5kTnVtYmVyKHNpemUud2lkdGgpO1xyXG4gICAgICAgICAgICBzaXplLmhlaWdodCA9IGljZHRfUm91bmROdW1iZXIoc2l6ZS5oZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUoVl9TaGFwZVR5cGUuQ0lSQ0xFLCBzaXplLCBhdHRyaWJ1dGUpKTtcclxuXHJcbiAgICAgICAgICAgIGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUoZWxlbWVudCwgYXR0cmlidXRlKTtcclxuXHJcbiAgICAgICAgICAgIC8vxJHhu5NuZyBi4buZIHbhu5tpIGtodW5nIHTDtCBtw6B1XHJcbiAgICAgICAgICAgIHN5bmNOb2RlQ3JlYXRlKGVsZUdyb3VwLCBzaXplKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3RhcnQ6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0pID0+IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUF0dHJpYnV0ZShvZmZzZXQueCwgb2Zmc2V0LnksIG9mZnNldC54ICsgc2l6ZS53aWR0aCwgb2Zmc2V0LnkgKyBzaXplLmhlaWdodCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1vdmU6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0sIG9mZnNldHM6IEFycmF5PEFycmF5PG51bWJlcj4+KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVBdHRyaWJ1dGUob2Zmc2V0c1swXVswXSwgb2Zmc2V0c1swXVsxXSwgb2Zmc2V0LngsIG9mZnNldC55KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW5kOiAob2Zmc2V0OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB9LCBvZmZzZXRzOiBBcnJheTxBcnJheTxudW1iZXI+PikgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vbmjhu48gcXXDoSDEkWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlcclxuICAgICAgICAgICAgICAgIGlmIChzaXplLndpZHRoIDw9IDE2IHx8IHNpemUuaGVpZ2h0IDw9IDE2KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNpemUud2lkdGggPSA4MDtcclxuICAgICAgICAgICAgICAgICAgICBzaXplLmhlaWdodCA9IDgwO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpemUueCA9IHNpemUueCAtIHNpemUud2lkdGggLyAyO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpemUueSA9IHNpemUueSAtIHNpemUuaGVpZ2h0IC8gMjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUoVl9TaGFwZVR5cGUuQ0lSQ0xFLCBzaXplLCBhdHRyaWJ1dGUpKTtcclxuICAgICAgICAgICAgICAgICAgICBpY2R0X1N5bmNTdmdOb2RlQXR0cmlidXRlKGVsZW1lbnQsIGF0dHJpYnV0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zYXZlIGNyZWF0ZVxyXG4gICAgICAgICAgICAgICAgaWNkdC5kYXRhLm5vZGUgPSBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogbm9kZUlkLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFZfU2hhcGVUeXBlLkNJUkNMRSxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnQ2lyY2xlJ1xyXG4gICAgICAgICAgICAgICAgfSwgeyBzaXplLCBhdHRyaWJ1dGUgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy94w7NhIGtodW5nIG3DoHUgduG6vSBt4bubaVxyXG4gICAgICAgICAgICAgICAgZWxlR3JvdXA/LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCB7IFZfU2hhcGVUeXBlIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2xvb2t1cC9WX1NoYXBlVHlwZVwiO1xyXG5pbXBvcnQgeyBpY2R0IH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3Byb3RvdHlwZS9pY2R0XCI7XHJcbmltcG9ydCB7IGljZHRfU2l6ZTJBdHRyaWJ1dGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vaGFuZGxlL29mZnNldFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N5bmNTdmdOb2RlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3N5bmMtZWxlbWVudC9zdmctZWxlbWVudFwiO1xyXG5pbXBvcnQgeyBpY2R0X0lEYXRhTm9kZUF0dHJpYnV0ZSwgaWNkdF9JRGF0YU5vZGVTaXplIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2ludGVyZmFjZS9JRGF0YVNvdXJjZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfU3ZnQ2lyY2xlID0gKGlkOiBudW1iZXIgfCBzdHJpbmcsIG9wdGlvbnM/OiB7IHNpemU/OiBpY2R0X0lEYXRhTm9kZVNpemUsIGF0dHJpYnV0ZT86IGljZHRfSURhdGFOb2RlQXR0cmlidXRlIH0sIHBOb2RlPzogSFRNTEVsZW1lbnQpID0+IHtcclxuXHJcbiAgICBsZXQgc2l6ZSA9IG9wdGlvbnM/LnNpemUgfHwge1xyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogMCxcclxuICAgICAgICB3aWR0aDogMTAsXHJcbiAgICAgICAgaGVpZ2h0OiAxMFxyXG4gICAgfSBhcyBpY2R0X0lEYXRhTm9kZVNpemU7XHJcblxyXG4gICAgbGV0IGF0dHJpYnV0ZSA9IG9wdGlvbnM/LmF0dHJpYnV0ZSB8fCB7XHJcbiAgICAgICAgZmlsbDogaWNkdC5hdHRyaWJ1dGUuZmlsbCxcclxuICAgICAgICBzdHJva2U6IGljZHQuYXR0cmlidXRlLnN0cm9rZSxcclxuICAgICAgICBzdHJva2VXaWR0aDogaWNkdC5hdHRyaWJ1dGUuc3Ryb2tlV2lkdGgsXHJcbiAgICB9IGFzIGljZHRfSURhdGFOb2RlQXR0cmlidXRlO1xyXG5cclxuICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKFZfU2hhcGVUeXBlLkNJUkNMRSwgc2l6ZSwgYXR0cmlidXRlKSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBub2RlSWQ6IGlkLFxyXG4gICAgICAgIGVsZW1lbnQ6IGljZHRfU3luY1N2Z05vZGUoaWQsIFZfU2hhcGVUeXBlLkNJUkNMRSwgJ2NpcmNsZScsIHsgc2l6ZTogc2l6ZSwgYXR0cmlidXRlOiBhdHRyaWJ1dGUgfSwgcE5vZGUpLFxyXG4gICAgICAgIHNpemU6IHNpemUsXHJcbiAgICAgICAgYXR0cmlidXRlOiBhdHRyaWJ1dGVcclxuICAgIH1cclxuXHJcbn1cclxuIiwiaW1wb3J0IHsgVl9JRCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9sb29rdXAvVl9JRFwiO1xyXG5pbXBvcnQgeyBWX1NoYXBlVHlwZSB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9sb29rdXAvVl9TaGFwZVR5cGVcIjtcclxuaW1wb3J0IHsgaWNkdCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9wcm90b3R5cGUvaWNkdFwiO1xyXG5pbXBvcnQgeyBpY2R0X09mZnNldDJTaXplLCBpY2R0X1NpemUyQXR0cmlidXRlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2hhbmRsZS9vZmZzZXRcIjtcclxuaW1wb3J0IHsgaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24sIGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUsIHN5bmNOb2RlQ3JlYXRlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3N5bmMtZWxlbWVudC9zdmctZWxlbWVudFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z0VsbGlwc2UgfSBmcm9tIFwiLi9zdmctZWxsaXBzZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1JvdW5kTnVtYmVyIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3NjcmlwdC9oYW5kbGUvcm91bmQtbnVtYmVyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgaWNkdF9TdmdFbGxpcHNlQ3JlYXRlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgbGV0IGVsZUdyb3VwID0gaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24oVl9JRC5DUkVBVEVfR1JPVVAsICdnJyk7XHJcblxyXG4gICAgICAgIGxldCB7IG5vZGVJZCwgZWxlbWVudCwgYXR0cmlidXRlLCBzaXplIH0gPSBpY2R0X1N2Z0VsbGlwc2UoTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDAwKSk7XHJcblxyXG4gICAgICAgIHZhciBoYW5kbGVBdHRyaWJ1dGUgPSAoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlcikgPT4ge1xyXG5cclxuICAgICAgICAgICAgc2l6ZSA9IGljZHRfT2Zmc2V0MlNpemUoeDEsIHkxLCB4MiwgeTIpO1xyXG5cclxuICAgICAgICAgICAgLy9yb3VuZCBudW1iZXJcclxuICAgICAgICAgICAgc2l6ZS54ID0gaWNkdF9Sb3VuZE51bWJlcihzaXplLngpO1xyXG4gICAgICAgICAgICBzaXplLnkgPSBpY2R0X1JvdW5kTnVtYmVyKHNpemUueSk7XHJcbiAgICAgICAgICAgIHNpemUud2lkdGggPSBpY2R0X1JvdW5kTnVtYmVyKHNpemUud2lkdGgpO1xyXG4gICAgICAgICAgICBzaXplLmhlaWdodCA9IGljZHRfUm91bmROdW1iZXIoc2l6ZS5oZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUoVl9TaGFwZVR5cGUuRUxMSVBTRSwgc2l6ZSwgYXR0cmlidXRlKSk7XHJcblxyXG4gICAgICAgICAgICBpY2R0X1N5bmNTdmdOb2RlQXR0cmlidXRlKGVsZW1lbnQsIGF0dHJpYnV0ZSk7XHJcblxyXG4gICAgICAgICAgICAvL8SR4buTbmcgYuG7mSB24bubaSBraHVuZyB0w7QgbcOgdVxyXG4gICAgICAgICAgICBzeW5jTm9kZUNyZWF0ZShlbGVHcm91cCwgc2l6ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN0YXJ0OiAob2Zmc2V0OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVBdHRyaWJ1dGUob2Zmc2V0LngsIG9mZnNldC55LCBvZmZzZXQueCArIHNpemUud2lkdGgsIG9mZnNldC55ICsgc2l6ZS5oZWlnaHQpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtb3ZlOiAob2Zmc2V0OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB9LCBvZmZzZXRzOiBBcnJheTxBcnJheTxudW1iZXI+PikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlQXR0cmlidXRlKG9mZnNldHNbMF1bMF0sIG9mZnNldHNbMF1bMV0sIG9mZnNldC54LCBvZmZzZXQueSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVuZDogKG9mZnNldDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSwgb2Zmc2V0czogQXJyYXk8QXJyYXk8bnVtYmVyPj4pID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICAvL25o4buPIHF1w6EgxJFpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpXHJcbiAgICAgICAgICAgICAgICBpZiAoc2l6ZS53aWR0aCA8PSAxNiB8fCBzaXplLmhlaWdodCA8PSAxNikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzaXplLndpZHRoID0gOTA7XHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSA2MDtcclxuICAgICAgICAgICAgICAgICAgICBzaXplLnggPSBzaXplLnggLSBzaXplLndpZHRoIC8gMjtcclxuICAgICAgICAgICAgICAgICAgICBzaXplLnkgPSBzaXplLnkgLSBzaXplLmhlaWdodCAvIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKFZfU2hhcGVUeXBlLkVMTElQU0UsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUoZWxlbWVudCwgYXR0cmlidXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL3NhdmUgY3JlYXRlXHJcbiAgICAgICAgICAgICAgICBpY2R0LmRhdGEubm9kZSA9IE9iamVjdC5hc3NpZ24oe1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBub2RlSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogVl9TaGFwZVR5cGUuRUxMSVBTRSxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnRWxsaXBzZSdcclxuICAgICAgICAgICAgICAgIH0sIHsgc2l6ZSwgYXR0cmlidXRlIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8veMOzYSBraHVuZyBtw6B1IHbhur0gbeG7m2lcclxuICAgICAgICAgICAgICAgIGVsZUdyb3VwPy5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgeyBWX1NoYXBlVHlwZSB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9sb29rdXAvVl9TaGFwZVR5cGVcIjtcclxuaW1wb3J0IHsgaWNkdCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9wcm90b3R5cGUvaWNkdFwiO1xyXG5pbXBvcnQgeyBpY2R0X1NpemUyQXR0cmlidXRlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2hhbmRsZS9vZmZzZXRcIjtcclxuaW1wb3J0IHsgaWNkdF9TeW5jU3ZnTm9kZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9zeW5jLWVsZW1lbnQvc3ZnLWVsZW1lbnRcIjtcclxuaW1wb3J0IHsgaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGUsIGljZHRfSURhdGFOb2RlU2l6ZSB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X1N2Z0VsbGlwc2UgPSAoaWQ6IG51bWJlciB8IHN0cmluZywgb3B0aW9ucz86IHsgc2l6ZT86IGljZHRfSURhdGFOb2RlU2l6ZSwgYXR0cmlidXRlPzogaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGUgfSwgcE5vZGU/OiBIVE1MRWxlbWVudCkgPT4ge1xyXG5cclxuICAgIGxldCBzaXplID0gb3B0aW9ucz8uc2l6ZSB8fCB7XHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiAwLFxyXG4gICAgICAgIHdpZHRoOiAxMCxcclxuICAgICAgICBoZWlnaHQ6IDEwXHJcbiAgICB9IGFzIGljZHRfSURhdGFOb2RlU2l6ZTtcclxuXHJcbiAgICBsZXQgYXR0cmlidXRlID0gb3B0aW9ucz8uYXR0cmlidXRlIHx8IHtcclxuICAgICAgICBmaWxsOiBpY2R0LmF0dHJpYnV0ZS5maWxsLFxyXG4gICAgICAgIHN0cm9rZTogaWNkdC5hdHRyaWJ1dGUuc3Ryb2tlLFxyXG4gICAgICAgIHN0cm9rZVdpZHRoOiBpY2R0LmF0dHJpYnV0ZS5zdHJva2VXaWR0aCxcclxuICAgIH0gYXMgaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGU7XHJcblxyXG4gICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUoVl9TaGFwZVR5cGUuRUxMSVBTRSwgc2l6ZSwgYXR0cmlidXRlKSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBub2RlSWQ6IGlkLFxyXG4gICAgICAgIGVsZW1lbnQ6IGljZHRfU3luY1N2Z05vZGUoaWQsIFZfU2hhcGVUeXBlLkVMTElQU0UsICdlbGxpcHNlJywgeyBzaXplOiBzaXplLCBhdHRyaWJ1dGU6IGF0dHJpYnV0ZSB9LCBwTm9kZSksXHJcbiAgICAgICAgc2l6ZTogc2l6ZSxcclxuICAgICAgICBhdHRyaWJ1dGU6IGF0dHJpYnV0ZVxyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCB7IFZfSUQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbG9va3VwL1ZfSURcIjtcclxuaW1wb3J0IHsgVl9TaGFwZVR5cGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbG9va3VwL1ZfU2hhcGVUeXBlXCI7XHJcbmltcG9ydCB7IGljZHQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vcHJvdG90eXBlL2ljZHRcIjtcclxuaW1wb3J0IHsgaWNkdF9PZmZzZXQyU2l6ZSwgaWNkdF9TaXplMkF0dHJpYnV0ZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9oYW5kbGUvb2Zmc2V0XCI7XHJcbmltcG9ydCB7IGljZHRfU3luY1N2Z05vZGU0RGVzaWduLCBpY2R0X1N5bmNTdmdOb2RlQXR0cmlidXRlLCBzeW5jTm9kZUNyZWF0ZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9zeW5jLWVsZW1lbnQvc3ZnLWVsZW1lbnRcIjtcclxuaW1wb3J0IHsgaWNkdF9TdmdGb3JlaWduT2JqZWN0IH0gZnJvbSBcIi4vc3ZnLWZvcmVpZ25vYmplY3RcIjtcclxuaW1wb3J0IHsgaWNkdF9Sb3VuZE51bWJlciB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9zY3JpcHQvaGFuZGxlL3JvdW5kLW51bWJlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIGljZHRfU3ZnRm9yZWlnbk9iamVjdENyZWF0ZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIGxldCBlbGVHcm91cCA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKFZfSUQuQ1JFQVRFX0dST1VQLCAnZycpO1xyXG5cclxuICAgICAgICBsZXQgeyBub2RlSWQsIGVsZW1lbnQsIHNpemUsIGF0dHJpYnV0ZSwgc3R5bGUsIHNvdXJjZSB9ID0gaWNkdF9TdmdGb3JlaWduT2JqZWN0KE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwMCkpO1xyXG5cclxuICAgICAgICB2YXIgaGFuZGxlQXR0cmlidXRlID0gKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpID0+IHtcclxuXHJcbiAgICAgICAgICAgIHNpemUgPSBpY2R0X09mZnNldDJTaXplKHgxLCB5MSwgeDIsIHkyKTtcclxuXHJcbiAgICAgICAgICAgIC8vcm91bmQgbnVtYmVyXHJcbiAgICAgICAgICAgIHNpemUueCA9IGljZHRfUm91bmROdW1iZXIoc2l6ZS54KTtcclxuICAgICAgICAgICAgc2l6ZS55ID0gaWNkdF9Sb3VuZE51bWJlcihzaXplLnkpO1xyXG4gICAgICAgICAgICBzaXplLndpZHRoID0gaWNkdF9Sb3VuZE51bWJlcihzaXplLndpZHRoKTtcclxuICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSBpY2R0X1JvdW5kTnVtYmVyKHNpemUuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKFZfU2hhcGVUeXBlLkZPUkVJR05PQkpFQ1QsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG5cclxuICAgICAgICAgICAgaWNkdF9TeW5jU3ZnTm9kZUF0dHJpYnV0ZShlbGVtZW50LCBhdHRyaWJ1dGUpO1xyXG5cclxuICAgICAgICAgICAgLy/EkeG7k25nIGLhu5kgduG7m2kga2h1bmcgdMO0IG3DoHVcclxuICAgICAgICAgICAgc3luY05vZGVDcmVhdGUoZWxlR3JvdXAsIHNpemUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdGFydDogKG9mZnNldDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlQXR0cmlidXRlKG9mZnNldC54LCBvZmZzZXQueSwgb2Zmc2V0LnggKyBzaXplLndpZHRoLCBvZmZzZXQueSArIHNpemUuaGVpZ2h0KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbW92ZTogKG9mZnNldDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSwgb2Zmc2V0czogQXJyYXk8QXJyYXk8bnVtYmVyPj4pID0+IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUF0dHJpYnV0ZShvZmZzZXRzWzBdWzBdLCBvZmZzZXRzWzBdWzFdLCBvZmZzZXQueCwgb2Zmc2V0LnkpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbmQ6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0sIG9mZnNldHM6IEFycmF5PEFycmF5PG51bWJlcj4+KSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9uaOG7jyBxdcOhIMSRaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaVxyXG4gICAgICAgICAgICAgICAgaWYgKHNpemUud2lkdGggPD0gMTYgfHwgc2l6ZS5oZWlnaHQgPD0gMTYpIHtcclxuICAgICAgICAgICAgICAgICAgICBzaXplLndpZHRoID0gOTA7XHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSA2MDtcclxuICAgICAgICAgICAgICAgICAgICBzaXplLnggPSBzaXplLnggLSBzaXplLndpZHRoIC8gMjtcclxuICAgICAgICAgICAgICAgICAgICBzaXplLnkgPSBzaXplLnkgLSBzaXplLmhlaWdodCAvIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKFZfU2hhcGVUeXBlLkZPUkVJR05PQkpFQ1QsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUoZWxlbWVudCwgYXR0cmlidXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL3NhdmUgY3JlYXRlXHJcbiAgICAgICAgICAgICAgICBpY2R0LmRhdGEubm9kZSA9IE9iamVjdC5hc3NpZ24oe1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBub2RlSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogVl9TaGFwZVR5cGUuRk9SRUlHTk9CSkVDVCxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnRm9yZWlnbk9iamVjdCdcclxuICAgICAgICAgICAgICAgIH0sIHsgc2l6ZSwgYXR0cmlidXRlLCBzdHlsZSwgc291cmNlIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8veMOzYSBraHVuZyBtw6B1IHbhur0gbeG7m2lcclxuICAgICAgICAgICAgICAgIGVsZUdyb3VwPy5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgeyBWX1NoYXBlVHlwZSB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9sb29rdXAvVl9TaGFwZVR5cGVcIjtcclxuaW1wb3J0IHsgaWNkdCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9wcm90b3R5cGUvaWNkdFwiO1xyXG5pbXBvcnQgeyBpY2R0X0lEYXRhTm9kZUF0dHJpYnV0ZSwgaWNkdF9JRGF0YU5vZGVTaXplLCBpY2R0X0lEYXRhTm9kZVNvdXJjZSwgaWNkdF9JRGF0YU5vZGVTdHlsZSB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuaW1wb3J0IHsgaWNkdF9TaXplMkF0dHJpYnV0ZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9oYW5kbGUvb2Zmc2V0XCI7XHJcbmltcG9ydCB7IGljZHRfU3luY1N2Z05vZGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vc3luYy1lbGVtZW50L3N2Zy1lbGVtZW50XCI7XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9TdmdGb3JlaWduT2JqZWN0ID0gKGlkOiBudW1iZXIgfCBzdHJpbmcsIG9wdGlvbnM/OiB7IHNpemU/OiBpY2R0X0lEYXRhTm9kZVNpemUsIGF0dHJpYnV0ZT86IGljZHRfSURhdGFOb2RlQXR0cmlidXRlLCBzdHlsZT86IGljZHRfSURhdGFOb2RlU3R5bGUsIHNvdXJjZT86IGljZHRfSURhdGFOb2RlU291cmNlIH0sIHBOb2RlPzogSFRNTEVsZW1lbnQpID0+IHtcclxuXHJcbiAgICBsZXQgc2l6ZSA9IG9wdGlvbnM/LnNpemUgfHwge1xyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogMCxcclxuICAgICAgICB3aWR0aDogMzIwLFxyXG4gICAgICAgIGhlaWdodDogODBcclxuICAgIH0gYXMgaWNkdF9JRGF0YU5vZGVTaXplO1xyXG5cclxuICAgIGxldCBhdHRyaWJ1dGUgPSBvcHRpb25zPy5hdHRyaWJ1dGUgfHwge1xyXG5cclxuICAgIH0gYXMgaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGU7XHJcblxyXG4gICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUoVl9TaGFwZVR5cGUuRk9SRUlHTk9CSkVDVCwgc2l6ZSwgYXR0cmlidXRlKSk7XHJcblxyXG4gICAgbGV0IHNvdXJjZSA9IG9wdGlvbnM/LnNvdXJjZSB8fCB7XHJcbiAgICAgICAgdHlwZTogJ2h0bWwnLFxyXG4gICAgICAgIGh0bWw6IHtcclxuICAgICAgICAgICAgaHRtbENvbnRlbnQ6ICc8c3BhbiBzdHlsZT1cImZvbnQtZmFtaWx5OiBSb2JvdG87IGZvbnQtc2l6ZTogMjRweDtcIj5Iw6N5IG5o4bqtcCBu4buZaSBkdW5nIGPhu6dhIGLhuqFuITwvc3Bhbj4nXHJcbiAgICAgICAgfVxyXG4gICAgfSBhcyBpY2R0X0lEYXRhTm9kZVNvdXJjZTtcclxuXHJcbiAgICBsZXQgc3R5bGUgPSBvcHRpb25zPy5zdHlsZSB8fCB7XHJcblxyXG4gICAgICAgIC8vcGFkZGluZzogMTUsXHJcblxyXG4gICAgICAgIC8vYm9yZGVyV2lkdGg6IGljZHQuYXR0cmlidXRlLnN0cm9rZVdpZHRoLFxyXG4gICAgICAgIC8vYm9yZGVyU3R5bGU6ICdzb2xpZCcsXHJcbiAgICAgICAgLy9ib3JkZXJDb2xvcjogaWNkdC5hdHRyaWJ1dGUuc3Ryb2tlLFxyXG5cclxuICAgICAgICAvL2JhY2tncm91bmRDb2xvcjogaWNkdC5hdHRyaWJ1dGUuZmlsbCxcclxuXHJcbiAgICB9IGFzIGljZHRfSURhdGFOb2RlU3R5bGU7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBub2RlSWQ6IGlkLFxyXG4gICAgICAgIGVsZW1lbnQ6IGljZHRfU3luY1N2Z05vZGUoaWQsIFZfU2hhcGVUeXBlLkZPUkVJR05PQkpFQ1QsICdmb3JlaWduT2JqZWN0JywgeyBzaXplLCBhdHRyaWJ1dGUsIHN0eWxlLCBzb3VyY2UgfSwgcE5vZGUpLFxyXG4gICAgICAgIHNpemU6IHNpemUsXHJcbiAgICAgICAgYXR0cmlidXRlOiBhdHRyaWJ1dGUsXHJcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxyXG4gICAgICAgIHNvdXJjZTogc291cmNlXHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IHsgVl9TaGFwZVR5cGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbG9va3VwL1ZfU2hhcGVUeXBlXCI7XHJcbmltcG9ydCB7IGljZHRfU2l6ZTJBdHRyaWJ1dGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vaGFuZGxlL29mZnNldFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N5bmNTdmdOb2RlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3N5bmMtZWxlbWVudC9zdmctZWxlbWVudFwiO1xyXG5pbXBvcnQgeyBpY2R0X0lEYXRhTm9kZUF0dHJpYnV0ZSwgaWNkdF9JRGF0YU5vZGVTaXplIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2ludGVyZmFjZS9JRGF0YVNvdXJjZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfU3ZnR3JvdXAgPSAoaWQ6IG51bWJlciB8IHN0cmluZywgb3B0aW9ucz86IHsgc2l6ZT86IGljZHRfSURhdGFOb2RlU2l6ZSwgYXR0cmlidXRlPzogaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGUgfSwgcE5vZGU/OiBIVE1MRWxlbWVudCkgPT4ge1xyXG5cclxuICAgIGxldCBzaXplID0gb3B0aW9ucz8uc2l6ZSB8fCB7XHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiAwLFxyXG4gICAgICAgIHdpZHRoOiAxMCxcclxuICAgICAgICBoZWlnaHQ6IDEwXHJcbiAgICB9O1xyXG5cclxuICAgIGxldCBhdHRyaWJ1dGUgPSBvcHRpb25zPy5hdHRyaWJ1dGUgfHwge1xyXG5cclxuICAgIH0gYXMgaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGU7XHJcblxyXG4gICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUoVl9TaGFwZVR5cGUuR1JPVVAsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbm9kZUlkOiBpZCxcclxuICAgICAgICBlbGVtZW50OiBpY2R0X1N5bmNTdmdOb2RlKGlkLCBWX1NoYXBlVHlwZS5HUk9VUCwgJ2cnLCB7IHNpemU6IHNpemUsIGF0dHJpYnV0ZTogYXR0cmlidXRlIH0sIHBOb2RlKSxcclxuICAgICAgICBzaXplOiBzaXplLFxyXG4gICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9TdmdHcm91cDIgPSAoaWQ6IHN0cmluZywgb3B0aW9ucz86IHsgc2l6ZT86IGljZHRfSURhdGFOb2RlU2l6ZSwgYXR0cmlidXRlPzogaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGUgfSwgcE5vZGU/OiBIVE1MRWxlbWVudCkgPT4ge1xyXG5cclxuICAgIGxldCBzaXplID0gb3B0aW9ucz8uc2l6ZSB8fCB7XHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiAwLFxyXG4gICAgICAgIHdpZHRoOiAxMCxcclxuICAgICAgICBoZWlnaHQ6IDEwXHJcbiAgICB9O1xyXG5cclxuICAgIGxldCBhdHRyaWJ1dGUgPSBvcHRpb25zPy5hdHRyaWJ1dGUgfHwge1xyXG5cclxuICAgIH0gYXMgaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGU7XHJcblxyXG4gICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUoVl9TaGFwZVR5cGUuR1JPVVAsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbm9kZUlkOiBpZCxcclxuICAgICAgICBlbGVtZW50OiBpY2R0X1N5bmNTdmdOb2RlKGlkLCBWX1NoYXBlVHlwZS5HUk9VUCwgJ2cnLCB7IHNpemU6IHNpemUsIGF0dHJpYnV0ZTogYXR0cmlidXRlIH0sIHBOb2RlKSxcclxuICAgICAgICBzaXplOiBzaXplLFxyXG4gICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4iLCJpbXBvcnQgeyBWX0lEIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2xvb2t1cC9WX0lEXCI7XHJcbmltcG9ydCB7IFZfU2hhcGVUeXBlIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2xvb2t1cC9WX1NoYXBlVHlwZVwiO1xyXG5pbXBvcnQgeyBpY2R0IH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3Byb3RvdHlwZS9pY2R0XCI7XHJcbmltcG9ydCB7IGljZHRfT2Zmc2V0MlNpemUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vaGFuZGxlL29mZnNldFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbiwgaWNkdF9TeW5jU3ZnTm9kZUF0dHJpYnV0ZSwgc3luY05vZGVDcmVhdGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vc3luYy1lbGVtZW50L3N2Zy1lbGVtZW50XCI7XHJcbmltcG9ydCB7IGljZHRfUm91bmROdW1iZXIgfSBmcm9tIFwiLi4vLi4vLi4vLi4vaGFuZGxlL3JvdW5kLW51bWJlclwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z0ltYWdlIH0gZnJvbSBcIi4vc3ZnLWltYWdlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgaWNkdF9TdmdJbWFnZUNyZWF0ZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIGxldCBlbGVHcm91cCA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKFZfSUQuQ1JFQVRFX0dST1VQLCAnZycpO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIGxldCB7IG5vZGVJZCwgZWxlbWVudCwgc2l6ZSwgYXR0cmlidXRlLCBzb3VyY2UgfSA9IGljZHRfU3ZnSW1hZ2UoTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDAwKSk7XHJcblxyXG4gICAgICAgIGxldCByYXRpbyA9IDE7XHJcblxyXG4gICAgICAgICgodXJsOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF1cmwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgICAgICBpbWcub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmF0aW8gPSBpY2R0X1JvdW5kTnVtYmVyKGltZy5uYXR1cmFsV2lkdGggLyBpbWcubmF0dXJhbEhlaWdodCwgMTAwKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaW1nLm9uZXJyb3IgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgSW1nU3JjIGxvYWQgZmFpbGVkIC0+ICR7dXJsfWAsIGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGltZy5zcmMgPSB1cmw7XHJcblxyXG4gICAgICAgIH0pKHNvdXJjZS5pbWFnZT8udXJsID8/ICcnKTtcclxuXHJcbiAgICAgICAgdmFyIGhhbmRsZUF0dHJpYnV0ZSA9ICh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBzaXplID0gaWNkdF9PZmZzZXQyU2l6ZSh4MSwgeTEsIHgyLCB5MiwgeyByYXRpbyB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vcm91bmQgbnVtYmVyXHJcbiAgICAgICAgICAgIHNpemUueCA9IGljZHRfUm91bmROdW1iZXIoc2l6ZS54KTtcclxuICAgICAgICAgICAgc2l6ZS55ID0gaWNkdF9Sb3VuZE51bWJlcihzaXplLnkpO1xyXG4gICAgICAgICAgICBzaXplLndpZHRoID0gaWNkdF9Sb3VuZE51bWJlcihzaXplLndpZHRoKTtcclxuICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSBpY2R0X1JvdW5kTnVtYmVyKHNpemUuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKFZfU2hhcGVUeXBlLklNQUdFLCBzaXplLCBhdHRyaWJ1dGUpKTtcclxuXHJcbiAgICAgICAgICAgIGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUoZWxlbWVudCwgYXR0cmlidXRlKTtcclxuXHJcbiAgICAgICAgICAgIC8vxJHhu5NuZyBi4buZIHbhu5tpIGtodW5nIHTDtCBtw6B1XHJcbiAgICAgICAgICAgIHN5bmNOb2RlQ3JlYXRlKGVsZUdyb3VwLCBzaXplKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3RhcnQ6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0pID0+IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUF0dHJpYnV0ZShvZmZzZXQueCwgb2Zmc2V0LnksIG9mZnNldC54ICsgc2l6ZS53aWR0aCwgb2Zmc2V0LnkgKyBzaXplLmhlaWdodCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1vdmU6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0sIG9mZnNldHM6IEFycmF5PEFycmF5PG51bWJlcj4+KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVBdHRyaWJ1dGUob2Zmc2V0c1swXVswXSwgb2Zmc2V0c1swXVsxXSwgb2Zmc2V0LngsIG9mZnNldC55KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW5kOiAob2Zmc2V0OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB9LCBvZmZzZXRzOiBBcnJheTxBcnJheTxudW1iZXI+PikgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vbmjhu48gcXXDoSDEkWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlcclxuICAgICAgICAgICAgICAgIGlmIChzaXplLndpZHRoIDw9IDE2IHx8IHNpemUuaGVpZ2h0IDw9IDE2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZS53aWR0aCA9IDgwO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpemUuaGVpZ2h0ID0gODA7XHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZS54ID0gc2l6ZS54IC0gc2l6ZS53aWR0aCAvIDI7XHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZS55ID0gc2l6ZS55IC0gc2l6ZS5oZWlnaHQgLyAyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGF0dHJpYnV0ZSwgaWNkdF9TaXplMkF0dHJpYnV0ZShWX1NoYXBlVHlwZS5JTUFHRSwgc2l6ZSwgYXR0cmlidXRlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdF9TeW5jU3ZnTm9kZUF0dHJpYnV0ZShlbGVtZW50LCBhdHRyaWJ1dGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vc2F2ZSBjcmVhdGVcclxuICAgICAgICAgICAgICAgIGljZHQuZGF0YS5ub2RlID0gT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IG5vZGVJZCxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBWX1NoYXBlVHlwZS5JTUFHRSxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnSW1hZ2UnXHJcbiAgICAgICAgICAgICAgICB9LCB7IHNpemUsIGF0dHJpYnV0ZSwgc291cmNlIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8veMOzYSBraHVuZyBtw6B1IHbhur0gbeG7m2lcclxuICAgICAgICAgICAgICAgIGVsZUdyb3VwPy5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgeyBWX1NoYXBlVHlwZSB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9sb29rdXAvVl9TaGFwZVR5cGVcIjtcclxuaW1wb3J0IHsgaWNkdF9TaXplMkF0dHJpYnV0ZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9oYW5kbGUvb2Zmc2V0XCI7XHJcbmltcG9ydCB7IGljZHRfU3luY1N2Z05vZGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vc3luYy1lbGVtZW50L3N2Zy1lbGVtZW50XCI7XHJcbmltcG9ydCB7IGljZHRfSURhdGFOb2RlQXR0cmlidXRlLCBpY2R0X0lEYXRhTm9kZUludGVyYWN0aXZlLCBpY2R0X0lEYXRhTm9kZVNpemUsIGljZHRfSURhdGFOb2RlU291cmNlLCBpY2R0X0lEYXRhTm9kZVN0eWxlIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2ludGVyZmFjZS9JRGF0YVNvdXJjZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfU3ZnSW1hZ2UgPSAoaWQ/OiBudW1iZXIgfCBzdHJpbmcsIG9wdGlvbnM/OiB7IHNpemU/OiBpY2R0X0lEYXRhTm9kZVNpemUsIGF0dHJpYnV0ZT86IGljZHRfSURhdGFOb2RlQXR0cmlidXRlLCBzdHlsZT86IGljZHRfSURhdGFOb2RlU3R5bGUsIHNvdXJjZT86IGljZHRfSURhdGFOb2RlU291cmNlLCBpbnRlcmFjdGl2ZT86IGljZHRfSURhdGFOb2RlSW50ZXJhY3RpdmUgfSwgcE5vZGU/OiBIVE1MRWxlbWVudCkgPT4ge1xyXG5cclxuICAgIGxldCBzaXplID0gb3B0aW9ucz8uc2l6ZSB8fCB7XHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiAwLFxyXG4gICAgICAgIHdpZHRoOiAxMCxcclxuICAgICAgICBoZWlnaHQ6IDEwXHJcbiAgICB9IGFzIGljZHRfSURhdGFOb2RlU2l6ZTtcclxuXHJcbiAgICBsZXQgYXR0cmlidXRlID0gb3B0aW9ucz8uYXR0cmlidXRlIHx8IHtcclxuICAgICAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiAnbm9uZSdcclxuICAgIH0gYXMgaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGU7XHJcblxyXG4gICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUoVl9TaGFwZVR5cGUuSU1BR0UsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG5cclxuICAgIGxldCBzb3VyY2UgPSBvcHRpb25zPy5zb3VyY2UgfHwge1xyXG4gICAgICAgIHR5cGU6ICdpbWFnZScsXHJcbiAgICAgICAgaW1hZ2U6IHtcclxuICAgICAgICAgICAgdXJsOiAnLi4vLi4vYXNzZXRzL2ltYWdlLXN2Zy9sb2dvLnN2ZycsXHJcbiAgICAgICAgICAgIHBhdGg6ICdhc3NldHMvaW1hZ2Utc3ZnL2xvZ28uc3ZnJyxcclxuICAgICAgICAgICAgbmFtZTogJ2xvZ28uc3ZnJ1xyXG4gICAgICAgIH1cclxuICAgIH0gYXMgaWNkdF9JRGF0YU5vZGVTb3VyY2U7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBub2RlSWQ6IGlkLFxyXG4gICAgICAgIGVsZW1lbnQ6IGljZHRfU3luY1N2Z05vZGUoaWQsIFZfU2hhcGVUeXBlLklNQUdFLCAnaW1hZ2UnLCB7IHNpemUsIGF0dHJpYnV0ZSwgc291cmNlIH0sIHBOb2RlKSxcclxuICAgICAgICBzaXplOiBzaXplLFxyXG4gICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlLFxyXG4gICAgICAgIHNvdXJjZTogc291cmNlXHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IHsgVl9JRCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9sb29rdXAvVl9JRFwiO1xyXG5pbXBvcnQgeyBWX1NoYXBlVHlwZSB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9sb29rdXAvVl9TaGFwZVR5cGVcIjtcclxuaW1wb3J0IHsgaWNkdCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9wcm90b3R5cGUvaWNkdFwiO1xyXG5pbXBvcnQgeyBpY2R0X09mZnNldDJTaXplLCBpY2R0X1NpemUyQXR0cmlidXRlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2hhbmRsZS9vZmZzZXRcIjtcclxuaW1wb3J0IHsgaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24sIGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUsIHN5bmNOb2RlQ3JlYXRlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3N5bmMtZWxlbWVudC9zdmctZWxlbWVudFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z0xpbmUgfSBmcm9tIFwiLi9zdmctbGluZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1JvdW5kTnVtYmVyIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3NjcmlwdC9oYW5kbGUvcm91bmQtbnVtYmVyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgaWNkdF9TdmdMaW5lQ3JlYXRlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgbGV0IGVsZUdyb3VwID0gaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24oVl9JRC5DUkVBVEVfR1JPVVAsICdnJyk7XHJcblxyXG4gICAgICAgIGxldCB7IG5vZGVJZCwgZWxlbWVudCwgYXR0cmlidXRlLCBzaXplIH0gPSBpY2R0X1N2Z0xpbmUoTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDAwKSk7XHJcblxyXG4gICAgICAgIHZhciBoYW5kbGVBdHRyaWJ1dGUgPSAoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlcikgPT4ge1xyXG5cclxuICAgICAgICAgICAgc2l6ZSA9IGljZHRfT2Zmc2V0MlNpemUoeDEsIHkxLCB4MiwgeTIpO1xyXG5cclxuICAgICAgICAgICAgLy9yb3VuZCBudW1iZXJcclxuICAgICAgICAgICAgc2l6ZS54ID0gaWNkdF9Sb3VuZE51bWJlcihzaXplLngpO1xyXG4gICAgICAgICAgICBzaXplLnkgPSBpY2R0X1JvdW5kTnVtYmVyKHNpemUueSk7XHJcbiAgICAgICAgICAgIHNpemUud2lkdGggPSBpY2R0X1JvdW5kTnVtYmVyKHNpemUud2lkdGgpO1xyXG4gICAgICAgICAgICBzaXplLmhlaWdodCA9IGljZHRfUm91bmROdW1iZXIoc2l6ZS5oZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUoVl9TaGFwZVR5cGUuTElORSwgc2l6ZSwgYXR0cmlidXRlKSk7XHJcblxyXG4gICAgICAgICAgICBpY2R0X1N5bmNTdmdOb2RlQXR0cmlidXRlKGVsZW1lbnQsIGF0dHJpYnV0ZSk7XHJcblxyXG4gICAgICAgICAgICAvL8SR4buTbmcgYuG7mSB24bubaSBraHVuZyB0w7QgbcOgdVxyXG4gICAgICAgICAgICBzeW5jTm9kZUNyZWF0ZShlbGVHcm91cCwgc2l6ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN0YXJ0OiAob2Zmc2V0OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB9KSA9PiB7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtb3ZlOiAob2Zmc2V0OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB9LCBvZmZzZXRzOiBBcnJheTxBcnJheTxudW1iZXI+PikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlQXR0cmlidXRlKG9mZnNldHNbMF1bMF0sIG9mZnNldHNbMF1bMV0sIG9mZnNldC54LCBvZmZzZXQueSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVuZDogKG9mZnNldDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSwgb2Zmc2V0czogQXJyYXk8QXJyYXk8bnVtYmVyPj4pID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0cy5sZW5ndGggPj0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbmjhu48gcXXDoSDEkWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2l6ZS53aWR0aCA8PSAxNiB8fCBzaXplLmhlaWdodCA8PSAxNikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplLndpZHRoID0gODA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemUuaGVpZ2h0ID0gODA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemUueCA9IHNpemUueCAtIHNpemUud2lkdGggLyAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplLnkgPSBzaXplLnkgLSBzaXplLmhlaWdodCAvIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGF0dHJpYnV0ZSwgaWNkdF9TaXplMkF0dHJpYnV0ZShWX1NoYXBlVHlwZS5MSU5FLCBzaXplLCBhdHRyaWJ1dGUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNkdF9TeW5jU3ZnTm9kZUF0dHJpYnV0ZShlbGVtZW50LCBhdHRyaWJ1dGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9zYXZlIGNyZWF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIGljZHQuZGF0YS5ub2RlID0gT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBub2RlSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFZfU2hhcGVUeXBlLkxJTkUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdMaW5lJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHsgc2l6ZSwgYXR0cmlidXRlIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudD8ucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy94w7NhIGtodW5nIG3DoHUgduG6vSBt4bubaVxyXG4gICAgICAgICAgICAgICAgZWxlR3JvdXA/LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCB7IFZfU2hhcGVUeXBlIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2xvb2t1cC9WX1NoYXBlVHlwZVwiO1xyXG5pbXBvcnQgeyBpY2R0IH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3Byb3RvdHlwZS9pY2R0XCI7XHJcbmltcG9ydCB7IGljZHRfU2l6ZTJBdHRyaWJ1dGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vaGFuZGxlL29mZnNldFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N5bmNTdmdOb2RlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3N5bmMtZWxlbWVudC9zdmctZWxlbWVudFwiO1xyXG5pbXBvcnQgeyBpY2R0X0lEYXRhTm9kZUF0dHJpYnV0ZSwgaWNkdF9JRGF0YU5vZGVTaXplIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2ludGVyZmFjZS9JRGF0YVNvdXJjZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfU3ZnTGluZSA9IChpZDogbnVtYmVyIHwgc3RyaW5nLCBvcHRpb25zPzogeyBzaXplPzogaWNkdF9JRGF0YU5vZGVTaXplLCBhdHRyaWJ1dGU/OiBpY2R0X0lEYXRhTm9kZUF0dHJpYnV0ZSB9LCBwTm9kZT86IEhUTUxFbGVtZW50KSA9PiB7XHJcblxyXG4gICAgbGV0IHNpemUgPSBvcHRpb25zPy5zaXplIHx8IHtcclxuICAgICAgICB4OiAwLFxyXG4gICAgICAgIHk6IDAsXHJcbiAgICAgICAgd2lkdGg6IDEwLFxyXG4gICAgICAgIGhlaWdodDogMTBcclxuICAgIH0gYXMgaWNkdF9JRGF0YU5vZGVTaXplO1xyXG5cclxuICAgIGxldCBhdHRyaWJ1dGUgPSBvcHRpb25zPy5hdHRyaWJ1dGUgfHwge1xyXG4gICAgICAgIHN0cm9rZTogaWNkdC5hdHRyaWJ1dGUuc3Ryb2tlLFxyXG4gICAgICAgIHN0cm9rZVdpZHRoOiBpY2R0LmF0dHJpYnV0ZS5zdHJva2VXaWR0aCxcclxuICAgICAgICBzdHJva2VMaW5lY2FwOiBpY2R0LmF0dHJpYnV0ZS5zdHJva2VMaW5lY2FwXHJcbiAgICB9IGFzIGljZHRfSURhdGFOb2RlQXR0cmlidXRlO1xyXG5cclxuICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKFZfU2hhcGVUeXBlLkxJTkUsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbm9kZUlkOiBpZCxcclxuICAgICAgICBlbGVtZW50OiBpY2R0X1N5bmNTdmdOb2RlKGlkLCBWX1NoYXBlVHlwZS5MSU5FLCAnbGluZScsIHsgc2l6ZTogc2l6ZSwgYXR0cmlidXRlOiBhdHRyaWJ1dGUgfSwgcE5vZGUpLFxyXG4gICAgICAgIHNpemU6IHNpemUsXHJcbiAgICAgICAgYXR0cmlidXRlOiBhdHRyaWJ1dGVcclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgeyBpY2R0X0FkYXB0ZXJfUGF0aERfMl9Qb2ludE1hcHMsIGljZHRfQWRhcHRlcl9Qb2ludE1hcHNfMl9SYXRpb01hcHMsIGljZHRfQWRhcHRlcl9Qb2ludE1hcHNfRXh0cmFjdF9NaW5NYXhYWSB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9mdW5jL2FkYXB0ZXJcIjtcclxuaW1wb3J0IHsgVl9TaGFwZVR5cGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbG9va3VwL1ZfU2hhcGVUeXBlXCI7XHJcbmltcG9ydCB7IGljZHQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vcHJvdG90eXBlL2ljZHRcIjtcclxuaW1wb3J0IHsgaWNkdF9PZmZzZXQyU2l6ZSwgaWNkdF9TaXplMkF0dHJpYnV0ZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9oYW5kbGUvb2Zmc2V0XCI7XHJcbmltcG9ydCB7IGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vc3luYy1lbGVtZW50L3N2Zy1lbGVtZW50XCI7XHJcbmltcG9ydCB7IGljZHRfU3ZnUGF0aCB9IGZyb20gXCIuL3N2Zy1wYXRoXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgaWNkdF9TdmdQYXRoQ3JlYXRlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgbGV0IHsgbm9kZUlkLCBlbGVtZW50LCBhdHRyaWJ1dGUsIHNpemUgfSA9IGljZHRfU3ZnUGF0aChNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMDApKTtcclxuXHJcbiAgICAgICAgdmFyIGhhbmRsZUF0dHJpYnV0ZSA9IChvZmZzZXRzOiBBcnJheTxBcnJheTxudW1iZXI+PikgPT4ge1xyXG5cclxuICAgICAgICAgICAgbGV0IHgxOiBudW1iZXIgPSA5OTk5LCB5MTogbnVtYmVyID0gOTk5OSwgeDI6IG51bWJlciA9IC05OTk5LCB5MjogbnVtYmVyID0gLTk5OTk7XHJcblxyXG4gICAgICAgICAgICBvZmZzZXRzLmZvckVhY2gob2Zmc2V0ID0+IHtcclxuICAgICAgICAgICAgICAgIHgxID0gTWF0aC5taW4oeDEsIG9mZnNldFswXSk7XHJcbiAgICAgICAgICAgICAgICB5MSA9IE1hdGgubWluKHkxLCBvZmZzZXRbMV0pO1xyXG4gICAgICAgICAgICAgICAgeDIgPSBNYXRoLm1heCh4Miwgb2Zmc2V0WzBdKTtcclxuICAgICAgICAgICAgICAgIHkyID0gTWF0aC5tYXgoeTIsIG9mZnNldFsxXSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgc2l6ZSA9IGljZHRfT2Zmc2V0MlNpemUoeDEsIHkxLCB4MiwgeTIsIHsgcG9pbnRzOiBvZmZzZXRzIH0pO1xyXG5cclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUoVl9TaGFwZVR5cGUuUEFUSCwgc2l6ZSwgYXR0cmlidXRlKSk7XHJcblxyXG4gICAgICAgICAgICBpY2R0X1N5bmNTdmdOb2RlQXR0cmlidXRlKGVsZW1lbnQsIGF0dHJpYnV0ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZCA9ICcnO1xyXG5cclxuICAgICAgICB2YXIgaGFuZGxlQXR0cmlidXRlMiA9ICh4OiBudW1iZXIsIHk6IG51bWJlcikgPT4ge1xyXG5cclxuICAgICAgICAgICAgZCArPSBgICR7eH0gJHt5fWA7XHJcblxyXG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZCcsIGQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdGFydDogKG9mZnNldDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZCA9IGBNICR7b2Zmc2V0Lnh9ICR7b2Zmc2V0Lnl9IEwgJHtvZmZzZXQueH0gJHtvZmZzZXQueX1gO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtb3ZlOiAob2Zmc2V0OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB9LCBvZmZzZXRzOiBBcnJheTxBcnJheTxudW1iZXI+PikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlQXR0cmlidXRlMihvZmZzZXQueCwgb2Zmc2V0LnkpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbmQ6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0sIG9mZnNldHM6IEFycmF5PEFycmF5PG51bWJlcj4+KSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHBvaW50TWFwcyA9IGljZHRfQWRhcHRlcl9QYXRoRF8yX1BvaW50TWFwcyhkKTtcclxuICAgICAgICAgICAgICAgIGxldCB7IG1pblgsIG1pblksIG1heFgsIG1heFkgfSA9IGljZHRfQWRhcHRlcl9Qb2ludE1hcHNfRXh0cmFjdF9NaW5NYXhYWShwb2ludE1hcHMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHNpemUueCA9IG1pblg7XHJcbiAgICAgICAgICAgICAgICBzaXplLnkgPSBtaW5ZO1xyXG4gICAgICAgICAgICAgICAgc2l6ZS53aWR0aCA9IChtYXhYIC0gbWluWCkgfHwgMTtcclxuICAgICAgICAgICAgICAgIHNpemUuaGVpZ2h0ID0gKG1heFkgLSBtaW5ZKSB8fCAxO1xyXG4gICAgICAgICAgICAgICAgc2l6ZS5yYXRpb01hcHMgPSBpY2R0X0FkYXB0ZXJfUG9pbnRNYXBzXzJfUmF0aW9NYXBzKHNpemUsIHBvaW50TWFwcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zYXZlIGNyZWF0ZVxyXG4gICAgICAgICAgICAgICAgaWNkdC5kYXRhLm5vZGUgPSBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogbm9kZUlkLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFZfU2hhcGVUeXBlLlBBVEgsXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1BhdGgnXHJcbiAgICAgICAgICAgICAgICB9LCB7IHNpemUsIGF0dHJpYnV0ZSB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgeyBWX1NoYXBlVHlwZSB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9sb29rdXAvVl9TaGFwZVR5cGVcIjtcclxuaW1wb3J0IHsgaWNkdCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9wcm90b3R5cGUvaWNkdFwiO1xyXG5pbXBvcnQgeyBpY2R0X1NpemUyQXR0cmlidXRlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2hhbmRsZS9vZmZzZXRcIjtcclxuaW1wb3J0IHsgaWNkdF9TeW5jU3ZnTm9kZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9zeW5jLWVsZW1lbnQvc3ZnLWVsZW1lbnRcIjtcclxuaW1wb3J0IHsgaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGUsIGljZHRfSURhdGFOb2RlU2l6ZSB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X1N2Z1BhdGggPSAoaWQ6IG51bWJlciB8IHN0cmluZywgb3B0aW9ucz86IHsgc2l6ZT86IGljZHRfSURhdGFOb2RlU2l6ZSwgYXR0cmlidXRlPzogaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGUgfSwgcE5vZGU/OiBIVE1MRWxlbWVudCkgPT4ge1xyXG5cclxuICAgIGxldCBzaXplID0gb3B0aW9ucz8uc2l6ZSB8fCB7XHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiAwLFxyXG4gICAgICAgIHdpZHRoOiAxMCxcclxuICAgICAgICBoZWlnaHQ6IDEwXHJcbiAgICB9IGFzIGljZHRfSURhdGFOb2RlU2l6ZTtcclxuXHJcbiAgICBsZXQgYXR0cmlidXRlID0gb3B0aW9ucz8uYXR0cmlidXRlIHx8IHtcclxuICAgICAgICBzdHJva2U6IGljZHQuYXR0cmlidXRlLnN0cm9rZSxcclxuICAgICAgICBzdHJva2VXaWR0aDogaWNkdC5hdHRyaWJ1dGUuc3Ryb2tlV2lkdGgsXHJcbiAgICB9IGFzIGljZHRfSURhdGFOb2RlQXR0cmlidXRlO1xyXG5cclxuICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKFZfU2hhcGVUeXBlLlBBVEgsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbm9kZUlkOiBpZCxcclxuICAgICAgICBlbGVtZW50OiBpY2R0X1N5bmNTdmdOb2RlKGlkLCBWX1NoYXBlVHlwZS5QQVRILCAncGF0aCcsIHsgc2l6ZTogc2l6ZSwgYXR0cmlidXRlOiBhdHRyaWJ1dGUgfSwgcE5vZGUpLFxyXG4gICAgICAgIHNpemU6IHNpemUsXHJcbiAgICAgICAgYXR0cmlidXRlOiBhdHRyaWJ1dGVcclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgeyBWX0lEIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2xvb2t1cC9WX0lEXCI7XHJcbmltcG9ydCB7IFZfU2hhcGVUeXBlIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2xvb2t1cC9WX1NoYXBlVHlwZVwiO1xyXG5pbXBvcnQgeyBpY2R0IH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3Byb3RvdHlwZS9pY2R0XCI7XHJcbmltcG9ydCB7IGljZHRfT2Zmc2V0MlNpemUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vaGFuZGxlL29mZnNldFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbiwgaWNkdF9TeW5jU3ZnTm9kZUF0dHJpYnV0ZSwgc3luY05vZGVDcmVhdGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vc3luYy1lbGVtZW50L3N2Zy1lbGVtZW50XCI7XHJcbmltcG9ydCB7IGljZHRfU3ZnUG9seWdvbiB9IGZyb20gXCIuL3N2Zy1wb2x5Z29uXCI7XHJcbmltcG9ydCB7IGljZHRfUm91bmROdW1iZXIgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vc2NyaXB0L2hhbmRsZS9yb3VuZC1udW1iZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBpY2R0X1N2Z1BvbHlnb25DcmVhdGUge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJhdGlvcz86IEFycmF5PEFycmF5PG51bWJlcj4+KSB7XHJcblxyXG4gICAgICAgIGxldCBlbGVHcm91cCA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKFZfSUQuQ1JFQVRFX0dST1VQLCAnZycpO1xyXG5cclxuICAgICAgICBsZXQgX3JhdGlvcyA9IHJhdGlvcyB8fCBbWzAsIDBdLCBbMSwgMV0sIFswLCAxXV07XHJcbiAgICAgICAgbGV0IHsgbm9kZUlkLCBlbGVtZW50LCBhdHRyaWJ1dGUsIHNpemUgfSA9IGljZHRfU3ZnUG9seWdvbihNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMDApKTtcclxuXHJcbiAgICAgICAgc2l6ZS5yYXRpb3MgPSBfcmF0aW9zO1xyXG5cclxuICAgICAgICB2YXIgaGFuZGxlQXR0cmlidXRlID0gKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpID0+IHtcclxuXHJcbiAgICAgICAgICAgIHNpemUgPSBpY2R0X09mZnNldDJTaXplKHgxLCB5MSwgeDIsIHkyLCB7IHJhdGlvczogX3JhdGlvcyB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vcm91bmQgbnVtYmVyXHJcbiAgICAgICAgICAgIHNpemUueCA9IGljZHRfUm91bmROdW1iZXIoc2l6ZS54KTtcclxuICAgICAgICAgICAgc2l6ZS55ID0gaWNkdF9Sb3VuZE51bWJlcihzaXplLnkpO1xyXG4gICAgICAgICAgICBzaXplLndpZHRoID0gaWNkdF9Sb3VuZE51bWJlcihzaXplLndpZHRoKTtcclxuICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSBpY2R0X1JvdW5kTnVtYmVyKHNpemUuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKFZfU2hhcGVUeXBlLlBPTFlHT04sIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG5cclxuICAgICAgICAgICAgaWNkdF9TeW5jU3ZnTm9kZUF0dHJpYnV0ZShlbGVtZW50LCBhdHRyaWJ1dGUpO1xyXG5cclxuICAgICAgICAgICAgLy/EkeG7k25nIGLhu5kgduG7m2kga2h1bmcgdMO0IG3DoHVcclxuICAgICAgICAgICAgc3luY05vZGVDcmVhdGUoZWxlR3JvdXAsIHNpemUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdGFydDogKG9mZnNldDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlQXR0cmlidXRlKG9mZnNldC54LCBvZmZzZXQueSwgb2Zmc2V0LnggKyBzaXplLndpZHRoLCBvZmZzZXQueSArIHNpemUuaGVpZ2h0KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbW92ZTogKG9mZnNldDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSwgb2Zmc2V0czogQXJyYXk8QXJyYXk8bnVtYmVyPj4pID0+IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUF0dHJpYnV0ZShvZmZzZXRzWzBdWzBdLCBvZmZzZXRzWzBdWzFdLCBvZmZzZXQueCwgb2Zmc2V0LnkpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbmQ6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0sIG9mZnNldHM6IEFycmF5PEFycmF5PG51bWJlcj4+KSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9uaOG7jyBxdcOhIMSRaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaVxyXG4gICAgICAgICAgICAgICAgaWYgKHNpemUud2lkdGggPD0gMTYgfHwgc2l6ZS5oZWlnaHQgPD0gMTYpIHtcclxuICAgICAgICAgICAgICAgICAgICBzaXplLndpZHRoID0gODA7XHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSA4MDtcclxuICAgICAgICAgICAgICAgICAgICBzaXplLnggPSBzaXplLnggLSBzaXplLndpZHRoIC8gMjtcclxuICAgICAgICAgICAgICAgICAgICBzaXplLnkgPSBzaXplLnkgLSBzaXplLmhlaWdodCAvIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKFZfU2hhcGVUeXBlLlBPTFlHT04sIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUoZWxlbWVudCwgYXR0cmlidXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL3NhdmUgY3JlYXRlXHJcbiAgICAgICAgICAgICAgICBpY2R0LmRhdGEubm9kZSA9IE9iamVjdC5hc3NpZ24oe1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBub2RlSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogVl9TaGFwZVR5cGUuUE9MWUdPTixcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnUG9seWdvbidcclxuICAgICAgICAgICAgICAgIH0sIHsgc2l6ZSwgYXR0cmlidXRlIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8veMOzYSBraHVuZyBtw6B1IHbhur0gbeG7m2lcclxuICAgICAgICAgICAgICAgIGVsZUdyb3VwPy5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgeyBWX1NoYXBlVHlwZSB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9sb29rdXAvVl9TaGFwZVR5cGVcIjtcclxuaW1wb3J0IHsgaWNkdCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9wcm90b3R5cGUvaWNkdFwiO1xyXG5pbXBvcnQgeyBpY2R0X1NpemUyQXR0cmlidXRlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2hhbmRsZS9vZmZzZXRcIjtcclxuaW1wb3J0IHsgaWNkdF9TeW5jU3ZnTm9kZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9zeW5jLWVsZW1lbnQvc3ZnLWVsZW1lbnRcIjtcclxuaW1wb3J0IHsgaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGUsIGljZHRfSURhdGFOb2RlU2l6ZSB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X1N2Z1BvbHlnb24gPSAoaWQ6IG51bWJlciB8IHN0cmluZywgb3B0aW9ucz86IHsgc2l6ZT86IGljZHRfSURhdGFOb2RlU2l6ZSwgYXR0cmlidXRlPzogaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGUgfSwgcE5vZGU/OiBIVE1MRWxlbWVudCkgPT4ge1xyXG5cclxuICAgIGxldCBzaXplID0gb3B0aW9ucz8uc2l6ZSB8fCB7XHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiAwLFxyXG4gICAgICAgIHdpZHRoOiAxMCxcclxuICAgICAgICBoZWlnaHQ6IDEwXHJcbiAgICB9IGFzIGljZHRfSURhdGFOb2RlU2l6ZTtcclxuXHJcbiAgICBsZXQgYXR0cmlidXRlID0gb3B0aW9ucz8uYXR0cmlidXRlIHx8IHtcclxuICAgICAgICBmaWxsOiBpY2R0LmF0dHJpYnV0ZS5maWxsLFxyXG4gICAgICAgIHN0cm9rZTogaWNkdC5hdHRyaWJ1dGUuc3Ryb2tlLFxyXG4gICAgICAgIHN0cm9rZVdpZHRoOiBpY2R0LmF0dHJpYnV0ZS5zdHJva2VXaWR0aCxcclxuICAgIH0gYXMgaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGU7XHJcblxyXG4gICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUoVl9TaGFwZVR5cGUuUE9MWUdPTiwgc2l6ZSwgYXR0cmlidXRlKSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBub2RlSWQ6IGlkLFxyXG4gICAgICAgIGVsZW1lbnQ6IGljZHRfU3luY1N2Z05vZGUoaWQsIFZfU2hhcGVUeXBlLlBPTFlHT04sICdwb2x5Z29uJywgeyBzaXplOiBzaXplLCBhdHRyaWJ1dGU6IGF0dHJpYnV0ZSB9LCBwTm9kZSksXHJcbiAgICAgICAgc2l6ZTogc2l6ZSxcclxuICAgICAgICBhdHRyaWJ1dGU6IGF0dHJpYnV0ZVxyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCB7IFZfSUQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbG9va3VwL1ZfSURcIjtcclxuaW1wb3J0IHsgVl9TaGFwZVR5cGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbG9va3VwL1ZfU2hhcGVUeXBlXCI7XHJcbmltcG9ydCB7IGljZHQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vcHJvdG90eXBlL2ljZHRcIjtcclxuaW1wb3J0IHsgaWNkdF9PZmZzZXQyU2l6ZSwgaWNkdF9TaXplMkF0dHJpYnV0ZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9oYW5kbGUvb2Zmc2V0XCI7XHJcbmltcG9ydCB7IGljZHRfU3luY1N2Z05vZGU0RGVzaWduLCBpY2R0X1N5bmNTdmdOb2RlQXR0cmlidXRlLCBzeW5jTm9kZUNyZWF0ZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9zeW5jLWVsZW1lbnQvc3ZnLWVsZW1lbnRcIjtcclxuaW1wb3J0IHsgaWNkdF9TdmdSZWN0IH0gZnJvbSBcIi4vc3ZnLXJlY3RcIjtcclxuaW1wb3J0IHsgaWNkdF9Sb3VuZE51bWJlciB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9zY3JpcHQvaGFuZGxlL3JvdW5kLW51bWJlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIGljZHRfU3ZnUmVjdENyZWF0ZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIGxldCBlbGVHcm91cCA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKFZfSUQuQ1JFQVRFX0dST1VQLCAnZycpO1xyXG5cclxuICAgICAgICBsZXQgeyBub2RlSWQsIGVsZW1lbnQsIGF0dHJpYnV0ZSwgc2l6ZSB9ID0gaWNkdF9TdmdSZWN0KE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwMCkpO1xyXG5cclxuICAgICAgICB2YXIgaGFuZGxlQXR0cmlidXRlID0gKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpID0+IHtcclxuXHJcbiAgICAgICAgICAgIHNpemUgPSBpY2R0X09mZnNldDJTaXplKHgxLCB5MSwgeDIsIHkyKTtcclxuXHJcbiAgICAgICAgICAgIC8vcm91bmQgbnVtYmVyXHJcbiAgICAgICAgICAgIHNpemUueCA9IGljZHRfUm91bmROdW1iZXIoc2l6ZS54KTtcclxuICAgICAgICAgICAgc2l6ZS55ID0gaWNkdF9Sb3VuZE51bWJlcihzaXplLnkpO1xyXG4gICAgICAgICAgICBzaXplLndpZHRoID0gaWNkdF9Sb3VuZE51bWJlcihzaXplLndpZHRoKTtcclxuICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSBpY2R0X1JvdW5kTnVtYmVyKHNpemUuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKFZfU2hhcGVUeXBlLlJFQ1QsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG5cclxuICAgICAgICAgICAgaWNkdF9TeW5jU3ZnTm9kZUF0dHJpYnV0ZShlbGVtZW50LCBhdHRyaWJ1dGUpO1xyXG5cclxuICAgICAgICAgICAgLy/EkeG7k25nIGLhu5kgduG7m2kga2h1bmcgdMO0IG3DoHVcclxuICAgICAgICAgICAgc3luY05vZGVDcmVhdGUoZWxlR3JvdXAsIHNpemUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdGFydDogKG9mZnNldDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlQXR0cmlidXRlKG9mZnNldC54LCBvZmZzZXQueSwgb2Zmc2V0LnggKyBzaXplLndpZHRoLCBvZmZzZXQueSArIHNpemUuaGVpZ2h0KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbW92ZTogKG9mZnNldDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSwgb2Zmc2V0czogQXJyYXk8QXJyYXk8bnVtYmVyPj4pID0+IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUF0dHJpYnV0ZShvZmZzZXRzWzBdWzBdLCBvZmZzZXRzWzBdWzFdLCBvZmZzZXQueCwgb2Zmc2V0LnkpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbmQ6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0sIG9mZnNldHM6IEFycmF5PEFycmF5PG51bWJlcj4+KSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9uaOG7jyBxdcOhIMSRaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaVxyXG4gICAgICAgICAgICAgICAgaWYgKHNpemUud2lkdGggPD0gMTYgfHwgc2l6ZS5oZWlnaHQgPD0gMTYpIHtcclxuICAgICAgICAgICAgICAgICAgICBzaXplLndpZHRoID0gODA7XHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSA4MDtcclxuICAgICAgICAgICAgICAgICAgICBzaXplLnggPSBzaXplLnggLSBzaXplLndpZHRoIC8gMjtcclxuICAgICAgICAgICAgICAgICAgICBzaXplLnkgPSBzaXplLnkgLSBzaXplLmhlaWdodCAvIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKFZfU2hhcGVUeXBlLlJFQ1QsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUoZWxlbWVudCwgYXR0cmlidXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL3NhdmUgY3JlYXRlXHJcbiAgICAgICAgICAgICAgICBpY2R0LmRhdGEubm9kZSA9IE9iamVjdC5hc3NpZ24oe1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBub2RlSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogVl9TaGFwZVR5cGUuUkVDVCxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnUmVjdCdcclxuICAgICAgICAgICAgICAgIH0sIHsgc2l6ZSwgYXR0cmlidXRlIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8veMOzYSBraHVuZyBtw6B1IHbhur0gbeG7m2lcclxuICAgICAgICAgICAgICAgIGVsZUdyb3VwPy5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgeyBWX1NoYXBlVHlwZSB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9sb29rdXAvVl9TaGFwZVR5cGVcIjtcclxuaW1wb3J0IHsgaWNkdCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9wcm90b3R5cGUvaWNkdFwiO1xyXG5pbXBvcnQgeyBpY2R0X1NpemUyQXR0cmlidXRlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2hhbmRsZS9vZmZzZXRcIjtcclxuaW1wb3J0IHsgaWNkdF9TeW5jU3ZnTm9kZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9zeW5jLWVsZW1lbnQvc3ZnLWVsZW1lbnRcIjtcclxuaW1wb3J0IHsgaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGUsIGljZHRfSURhdGFOb2RlU2l6ZSB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X1N2Z1JlY3QgPSAoaWQ/OiBudW1iZXIgfCBzdHJpbmcsIG9wdGlvbnM/OiB7IHNpemU/OiBpY2R0X0lEYXRhTm9kZVNpemUsIGF0dHJpYnV0ZT86IGljZHRfSURhdGFOb2RlQXR0cmlidXRlIH0sIHBOb2RlPzogSFRNTEVsZW1lbnQpID0+IHtcclxuXHJcbiAgICBsZXQgc2l6ZSA9IG9wdGlvbnM/LnNpemUgfHwge1xyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogMCxcclxuICAgICAgICB3aWR0aDogMTAsXHJcbiAgICAgICAgaGVpZ2h0OiAxMFxyXG4gICAgfSBhcyBpY2R0X0lEYXRhTm9kZVNpemU7XHJcblxyXG4gICAgbGV0IGF0dHJpYnV0ZSA9IG9wdGlvbnM/LmF0dHJpYnV0ZSB8fCB7XHJcbiAgICAgICAgZmlsbDogaWNkdC5hdHRyaWJ1dGUuZmlsbCxcclxuICAgICAgICBzdHJva2U6IGljZHQuYXR0cmlidXRlLnN0cm9rZSxcclxuICAgICAgICBzdHJva2VXaWR0aDogaWNkdC5hdHRyaWJ1dGUuc3Ryb2tlV2lkdGgsXHJcbiAgICB9IGFzIGljZHRfSURhdGFOb2RlQXR0cmlidXRlO1xyXG5cclxuICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKFZfU2hhcGVUeXBlLlJFQ1QsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbm9kZUlkOiBpZCxcclxuICAgICAgICBlbGVtZW50OiBpY2R0X1N5bmNTdmdOb2RlKGlkLCBWX1NoYXBlVHlwZS5SRUNULCAncmVjdCcsIHsgc2l6ZTogc2l6ZSwgYXR0cmlidXRlOiBhdHRyaWJ1dGUgfSwgcE5vZGUpLFxyXG4gICAgICAgIHNpemU6IHNpemUsXHJcbiAgICAgICAgYXR0cmlidXRlOiBhdHRyaWJ1dGVcclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgeyBWX0lEIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2xvb2t1cC9WX0lEXCI7XHJcbmltcG9ydCB7IFZfU2hhcGVUeXBlIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2xvb2t1cC9WX1NoYXBlVHlwZVwiO1xyXG5pbXBvcnQgeyBpY2R0IH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3Byb3RvdHlwZS9pY2R0XCI7XHJcbmltcG9ydCB7IGljZHRfT2Zmc2V0MlNpemUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vaGFuZGxlL29mZnNldFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbiwgaWNkdF9TeW5jU3ZnTm9kZUF0dHJpYnV0ZSwgc3luY05vZGVDcmVhdGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vc3luYy1lbGVtZW50L3N2Zy1lbGVtZW50XCI7XHJcbmltcG9ydCB7IGljZHRfU3ZnVGV4dCB9IGZyb20gXCIuL3N2Zy10ZXh0XCI7XHJcbmltcG9ydCB7IGljZHRfUm91bmROdW1iZXIgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vc2NyaXB0L2hhbmRsZS9yb3VuZC1udW1iZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBpY2R0X1N2Z1RleHRDcmVhdGUge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBsZXQgZWxlR3JvdXAgPSBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbihWX0lELkNSRUFURV9HUk9VUCwgJ2cnKTtcclxuXHJcbiAgICAgICAgbGV0IHsgbm9kZUlkLCBlbGVtZW50LCBhdHRyaWJ1dGUsIHNpemUsIHNvdXJjZSB9ID0gaWNkdF9TdmdUZXh0KE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwMCkpO1xyXG5cclxuICAgICAgICBsZXQgaGFuZGxlQXR0cmlidXRlID0gKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpID0+IHtcclxuXHJcbiAgICAgICAgICAgIHNpemUgPSBpY2R0X09mZnNldDJTaXplKHgxLCB5MSwgeDIsIHkyKTtcclxuXHJcbiAgICAgICAgICAgIC8vcm91bmQgbnVtYmVyXHJcbiAgICAgICAgICAgIHNpemUueCA9IGljZHRfUm91bmROdW1iZXIoc2l6ZS54KTtcclxuICAgICAgICAgICAgc2l6ZS55ID0gaWNkdF9Sb3VuZE51bWJlcihzaXplLnkpO1xyXG4gICAgICAgICAgICBzaXplLndpZHRoID0gaWNkdF9Sb3VuZE51bWJlcihzaXplLndpZHRoKTtcclxuICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSBpY2R0X1JvdW5kTnVtYmVyKHNpemUuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKFZfU2hhcGVUeXBlLlRFWFQsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG5cclxuICAgICAgICAgICAgaWNkdF9TeW5jU3ZnTm9kZUF0dHJpYnV0ZShlbGVtZW50LCBhdHRyaWJ1dGUpO1xyXG5cclxuICAgICAgICAgICAgLy/EkeG7k25nIGLhu5kgduG7m2kga2h1bmcgdMO0IG3DoHVcclxuICAgICAgICAgICAgc3luY05vZGVDcmVhdGUoZWxlR3JvdXAsIHNpemUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdGFydDogKG9mZnNldDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlQXR0cmlidXRlKG9mZnNldC54LCBvZmZzZXQueSwgb2Zmc2V0LnggKyBzaXplLndpZHRoLCBvZmZzZXQueSArIHNpemUuaGVpZ2h0KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbW92ZTogKG9mZnNldDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSwgb2Zmc2V0czogQXJyYXk8QXJyYXk8bnVtYmVyPj4pID0+IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUF0dHJpYnV0ZShvZmZzZXRzWzBdWzBdLCBvZmZzZXRzWzBdWzFdLCBvZmZzZXQueCwgb2Zmc2V0LnkpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbmQ6IChvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0sIG9mZnNldHM6IEFycmF5PEFycmF5PG51bWJlcj4+KSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9uaOG7jyBxdcOhIMSRaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaVxyXG4gICAgICAgICAgICAgICAgaWYgKHNpemUud2lkdGggPD0gMTYgfHwgc2l6ZS5oZWlnaHQgPD0gMTYpIHtcclxuICAgICAgICAgICAgICAgICAgICBzaXplLndpZHRoID0gODA7XHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSA4MDtcclxuICAgICAgICAgICAgICAgICAgICBzaXplLnggPSBzaXplLnggLSBzaXplLndpZHRoIC8gMjtcclxuICAgICAgICAgICAgICAgICAgICBzaXplLnkgPSBzaXplLnkgLSBzaXplLmhlaWdodCAvIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKFZfU2hhcGVUeXBlLlRFWFQsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUoZWxlbWVudCwgYXR0cmlidXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL3NhdmUgY3JlYXRlXHJcbiAgICAgICAgICAgICAgICBpY2R0LmRhdGEubm9kZSA9IE9iamVjdC5hc3NpZ24oe1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBub2RlSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogVl9TaGFwZVR5cGUuVEVYVCxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnVGV4dCdcclxuICAgICAgICAgICAgICAgIH0sIHsgc2l6ZSwgYXR0cmlidXRlLCBzb3VyY2UgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy94w7NhIGtodW5nIG3DoHUgduG6vSBt4bubaVxyXG4gICAgICAgICAgICAgICAgZWxlR3JvdXA/LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCB7IFZfU2hhcGVUeXBlIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2xvb2t1cC9WX1NoYXBlVHlwZVwiO1xyXG5pbXBvcnQgeyBpY2R0IH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3Byb3RvdHlwZS9pY2R0XCI7XHJcbmltcG9ydCB7IGljZHRfU2l6ZTJBdHRyaWJ1dGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vaGFuZGxlL29mZnNldFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N5bmNTdmdOb2RlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3N5bmMtZWxlbWVudC9zdmctZWxlbWVudFwiO1xyXG5pbXBvcnQgeyBpY2R0X0lEYXRhTm9kZUF0dHJpYnV0ZSwgaWNkdF9JRGF0YU5vZGVTaXplLCBpY2R0X0lEYXRhTm9kZVNvdXJjZSB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X1N2Z1RleHQgPSAoaWQ/OiBudW1iZXIgfCBzdHJpbmcsIG9wdGlvbnM/OiB7IHNpemU/OiBpY2R0X0lEYXRhTm9kZVNpemUsIGF0dHJpYnV0ZT86IGljZHRfSURhdGFOb2RlQXR0cmlidXRlLCBzb3VyY2U/OiBpY2R0X0lEYXRhTm9kZVNvdXJjZSB9LCBwTm9kZT86IEhUTUxFbGVtZW50KSA9PiB7XHJcblxyXG4gICAgbGV0IHNpemUgPSBvcHRpb25zPy5zaXplIHx8IHtcclxuICAgICAgICB4OiAwLFxyXG4gICAgICAgIHk6IDAsXHJcbiAgICAgICAgd2lkdGg6IDMyMCxcclxuICAgICAgICBoZWlnaHQ6IDgwXHJcbiAgICB9IGFzIGljZHRfSURhdGFOb2RlU2l6ZTtcclxuXHJcbiAgICBsZXQgYXR0cmlidXRlID0gb3B0aW9ucz8uYXR0cmlidXRlIHx8IHtcclxuICAgICAgICBmaWxsOiBpY2R0LmF0dHJpYnV0ZS5zdHJva2UsXHJcbiAgICAgICAgZm9udEZhbWlseTogaWNkdC5hdHRyaWJ1dGUuZm9udEZhbWlseSxcclxuICAgICAgICBmb250U2l6ZTogaWNkdC5hdHRyaWJ1dGUuZm9udFNpemUsXHJcbiAgICAgICAgdGV4dExlbmd0aDogaWNkdC5hdHRyaWJ1dGUudGV4dExlbmd0aCxcclxuICAgIH0gYXMgaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGU7XHJcblxyXG4gICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUoVl9TaGFwZVR5cGUuVEVYVCwgc2l6ZSwgYXR0cmlidXRlKSk7XHJcblxyXG4gICAgbGV0IHNvdXJjZSA9IG9wdGlvbnM/LnNvdXJjZSB8fCB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgdGV4dENvbnRlbnQ6ICdIw6N5IG5o4bqtcCBu4buZaSBkdW5nIGPhu6dhIGLhuqFuISdcclxuICAgICAgICB9XHJcbiAgICB9IGFzIGljZHRfSURhdGFOb2RlU291cmNlO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbm9kZUlkOiBpZCxcclxuICAgICAgICBlbGVtZW50OiBpY2R0X1N5bmNTdmdOb2RlKGlkLCBWX1NoYXBlVHlwZS5URVhULCAndGV4dCcsIHsgc2l6ZTogc2l6ZSwgYXR0cmlidXRlOiBhdHRyaWJ1dGUsIHNvdXJjZTogc291cmNlIH0sIHBOb2RlKSxcclxuICAgICAgICBzaXplOiBzaXplLFxyXG4gICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlLFxyXG4gICAgICAgIHNvdXJjZTogc291cmNlXHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IHsgaWNkdF9Qb2ludGVyRXZlbnQsIGljZHRfUG9pbnRlckV2ZW50cyB9IGZyb20gXCIuLi8uLi9wb2ludGVyL3BvaW50ZXItZXZlbnRcIjtcclxuaW1wb3J0IHsgaWNkdF9TdmdUZXh0Q3JlYXRlIH0gZnJvbSBcIi4uL3NoYXBlL3N2Zy90ZXh0L3N2Zy10ZXh0LWNyZWF0ZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfVGV4dENvbXBvbmVudCA9IChldmVudHM6IHsgbW91c2VFdmVudD86IE1vdXNlRXZlbnQsIHRvdWNoRXZlbnQ/OiBUb3VjaEV2ZW50IH0pID0+IHtcclxuICAgIGljZHRfUG9pbnRlckV2ZW50cyhldmVudHMsIG5ldyBpY2R0X1N2Z1RleHRDcmVhdGUoKSk7XHJcbn0iLCJpbXBvcnQgeyBWX1NoYXBlVHlwZSB9IGZyb20gXCIuLi8uLi9sb29rdXAvVl9TaGFwZVR5cGVcIjtcclxuaW1wb3J0IHsgaWNkdF9JRGF0YU5vZGVBdHRyaWJ1dGUsIGljZHRfSURhdGFOb2RlU2l6ZSB9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuaW1wb3J0IHsgaWNkdF9BZGFwdGVyX1JhdGlvTWFwc18yX1BhdGhELCBpY2R0X0FkYXB0ZXJfUmF0aW9zXzJfUG9seWdvblBvaW50cyB9IGZyb20gXCIuLi8uLi9mdW5jL2FkYXB0ZXJcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X09mZnNldDJTaXplID0gKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIsIG9wdGlvbnM/OiB7IHJhdGlvPzogbnVtYmVyLCByYXRpb3M/OiBBcnJheTxBcnJheTxudW1iZXI+PiwgcG9pbnRzPzogQXJyYXk8QXJyYXk8bnVtYmVyPj4gfSkgPT4ge1xyXG5cclxuICAgIGxldCBzaXplID0ge1xyXG4gICAgICAgIHg6IE1hdGgubWluKHgxLCB4MiksXHJcbiAgICAgICAgeTogTWF0aC5taW4oeTEsIHkyKSxcclxuICAgICAgICB3aWR0aDogTWF0aC5hYnMoeDIgLSB4MSkgfHwgMSxcclxuICAgICAgICBoZWlnaHQ6IE1hdGguYWJzKHkyIC0geTEpIHx8IDFcclxuICAgIH0gYXMgaWNkdF9JRGF0YU5vZGVTaXplO1xyXG5cclxuICAgIGlmIChvcHRpb25zPy5yYXRpbykge1xyXG4gICAgICAgIGlmIChzaXplLndpZHRoIDw9IHNpemUuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHNpemUuaGVpZ2h0ID0gc2l6ZS53aWR0aCAqIG9wdGlvbnM/LnJhdGlvO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2l6ZS53aWR0aCA9IHNpemUuaGVpZ2h0IC8gb3B0aW9ucz8ucmF0aW87XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIE9iamVjdC5hc3NpZ24oc2l6ZSwge1xyXG4gICAgICAgIHJhdGlvczogb3B0aW9ucz8ucmF0aW9zIHx8IFtcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgKHgxIC0gc2l6ZS54KSAvIChzaXplLndpZHRoIHx8IDEpLFxyXG4gICAgICAgICAgICAgICAgKHkxIC0gc2l6ZS55KSAvIChzaXplLmhlaWdodCB8fCAxKVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAoeDIgLSBzaXplLngpIC8gKHNpemUud2lkdGggfHwgMSksXHJcbiAgICAgICAgICAgICAgICAoeTIgLSBzaXplLnkpIC8gKHNpemUuaGVpZ2h0IHx8IDEpXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgXVxyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKG9wdGlvbnM/LnBvaW50cykge1xyXG4gICAgICAgIHNpemUucG9pbnRzID0gb3B0aW9ucz8ucG9pbnRzO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzaXplO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9TaXplMkF0dHJpYnV0ZSA9IChzaGFwZVR5cGU6IG51bWJlciwgc2l6ZTogaWNkdF9JRGF0YU5vZGVTaXplLCBhdHRyaWJ1dGU6IGljZHRfSURhdGFOb2RlQXR0cmlidXRlKSA9PiB7XHJcblxyXG4gICAgdmFyIHJlcyA9ICgoKSA9PiB7XHJcbiAgICAgICAgc3dpdGNoIChzaGFwZVR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBWX1NoYXBlVHlwZS5DSVJDTEU6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3g6IHNpemUueCArIHNpemUud2lkdGggLyAyLFxyXG4gICAgICAgICAgICAgICAgICAgIGN5OiBzaXplLnkgKyBzaXplLmhlaWdodCAvIDIsXHJcbiAgICAgICAgICAgICAgICAgICAgcjogTWF0aC5taW4oc2l6ZS53aWR0aCAvIDIsIHNpemUuaGVpZ2h0IC8gMilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLkVMTElQU0U6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3g6IHNpemUueCArIHNpemUud2lkdGggLyAyLFxyXG4gICAgICAgICAgICAgICAgICAgIGN5OiBzaXplLnkgKyBzaXplLmhlaWdodCAvIDIsXHJcbiAgICAgICAgICAgICAgICAgICAgcng6IHNpemUud2lkdGggLyAyLFxyXG4gICAgICAgICAgICAgICAgICAgIHJ5OiBzaXplLmhlaWdodCAvIDJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLkxJTkU6IHtcclxuICAgICAgICAgICAgICAgIGxldCByZXMgPSB7fSBhcyBhbnk7XHJcbiAgICAgICAgICAgICAgICBzaXplLnJhdGlvcz8uZm9yRWFjaCgocmF0aW8sIGlkeCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc1tgeCR7aWR4ICsgMX1gXSA9IHNpemUueCArIHNpemUud2lkdGggKiByYXRpb1swXTtcclxuICAgICAgICAgICAgICAgICAgICByZXNbYHkke2lkeCArIDF9YF0gPSBzaXplLnkgKyBzaXplLmhlaWdodCAqIHJhdGlvWzFdO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgVl9TaGFwZVR5cGUuUkVDVDoge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB4OiBzaXplLngsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogc2l6ZS55LFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBzaXplLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogc2l6ZS5oZWlnaHRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLkZPUkVJR05PQkpFQ1Q6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDogc2l6ZS54LFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IHNpemUueSxcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogc2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHNpemUuaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBWX1NoYXBlVHlwZS5JTUFHRToge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB4OiBzaXplLngsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogc2l6ZS55LFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBzaXplLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogc2l6ZS5oZWlnaHRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLlRFWFQ6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDogc2l6ZS54LFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IHNpemUueSArIChhdHRyaWJ1dGUuZm9udFNpemUgPz8gMTYpIC8vc2l6ZS55XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBWX1NoYXBlVHlwZS5QT0xZR09OOiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2l6ZS5yYXRpb3M/Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50czogaWNkdF9BZGFwdGVyX1JhdGlvc18yX1BvbHlnb25Qb2ludHMoc2l6ZSwgc2l6ZS5yYXRpb3MpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBWX1NoYXBlVHlwZS5QQVRIOiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2l6ZS5yYXRpb01hcHM/Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGQ6IGljZHRfQWRhcHRlcl9SYXRpb01hcHNfMl9QYXRoRChzaXplLCBzaXplLnJhdGlvTWFwcylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoc2l6ZS5wb2ludHM/Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKHBvaW50cykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZDogYE0gJHtwb2ludHNbMF1bMF19ICR7cG9pbnRzWzBdWzFdfSBMICR7KHBvaW50cy5tYXAobSA9PiBbbVswXSwgbVsxXV0pIHx8IFtdKS5tYXAobSA9PiBtLmpvaW4oJyAnKSkuam9pbignICcpfWBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pKHNpemUucG9pbnRzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfSkoKSBhcyBpY2R0X0lEYXRhTm9kZUF0dHJpYnV0ZTtcclxuXHJcbiAgICBpZiAoc2l6ZS5yb3RhdGUpIHtcclxuICAgICAgICByZXMudHJhbnNmb3JtID0gYHJvdGF0ZSgke3NpemUucm90YXRlfSlgO1xyXG4gICAgICAgIHJlcy50cmFuc2Zvcm1PcmlnaW4gPSBgJHtzaXplLnggKyBzaXplLndpZHRoIC8gMn0gJHtzaXplLnkgKyBzaXplLmhlaWdodCAvIDJ9YDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGF0dHJpYnV0ZS50cmFuc2Zvcm0/Lm1hdGNoKC9ecm90YXRlLykpIHtcclxuICAgICAgICBhdHRyaWJ1dGUudHJhbnNmb3JtID0gbnVsbDtcclxuICAgICAgICBhdHRyaWJ1dGUudHJhbnNmb3JtT3JpZ2luID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9PZmZzZXRTd2l0Y2ggPSAoc2hhcGVUeXBlOiBudW1iZXIsIHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIsIHJhdGlvcz86IEFycmF5PEFycmF5PG51bWJlcj4+KSA9PiB7XHJcblxyXG4gICAgc3dpdGNoIChzaGFwZVR5cGUpIHtcclxuICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLkNJUkNMRToge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgY3g6ICh4MSArIHgyKSAvIDIsXHJcbiAgICAgICAgICAgICAgICBjeTogKHkxICsgeTIpIC8gMixcclxuICAgICAgICAgICAgICAgIHI6IE1hdGgubWluKE1hdGguYWJzKHgxIC0geDIpIC8gMiwgTWF0aC5hYnMoeTEgLSB5MikgLyAyKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgVl9TaGFwZVR5cGUuRUxMSVBTRToge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgY3g6ICh4MSArIHgyKSAvIDIsXHJcbiAgICAgICAgICAgICAgICBjeTogKHkxICsgeTIpIC8gMixcclxuICAgICAgICAgICAgICAgIHJ4OiBNYXRoLmFicyh4MiAtIHgxKSB8fCAxLFxyXG4gICAgICAgICAgICAgICAgcnk6IE1hdGguYWJzKHkyIC0geTEpIHx8IDFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLlJFQ1Q6IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHg6IE1hdGgubWluKHgxLCB4MiksXHJcbiAgICAgICAgICAgICAgICB5OiBNYXRoLm1pbih5MSwgeTIpLFxyXG4gICAgICAgICAgICAgICAgdzogTWF0aC5hYnMoeDIgLSB4MSkgfHwgMSxcclxuICAgICAgICAgICAgICAgIGg6IE1hdGguYWJzKHkyIC0geTEpIHx8IDFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLlBPTFlHT046IHtcclxuICAgICAgICAgICAgdmFyIHNpemUgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBNYXRoLm1pbih4MSwgeDIpLFxyXG4gICAgICAgICAgICAgICAgeTogTWF0aC5taW4oeTEsIHkyKSxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBNYXRoLmFicyh4MiAtIHgxKSB8fCAxLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBNYXRoLmFicyh5MiAtIHkxKSB8fCAxXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBwb2ludHM6IChyYXRpb3M/Lm1hcChtID0+IFtzaXplLnggKyBzaXplLndpZHRoICogbVswXSwgc2l6ZS55ICsgc2l6ZS5oZWlnaHQgKiBtWzFdXSkgfHwgW10pLm1hcChtID0+IHsgcmV0dXJuIG0uam9pbignICcpOyB9KS5qb2luKCcsJylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLkZPUkVJR05PQkpFQ1Q6IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHg6IE1hdGgubWluKHgxLCB4MiksXHJcbiAgICAgICAgICAgICAgICB5OiBNYXRoLm1pbih5MSwgeTIpLFxyXG4gICAgICAgICAgICAgICAgdzogTWF0aC5hYnMoeDIgLSB4MSkgfHwgMSxcclxuICAgICAgICAgICAgICAgIGg6IE1hdGguYWJzKHkyIC0geTEpIHx8IDFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLklNQUdFOiB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB4OiBNYXRoLm1pbih4MSwgeDIpLFxyXG4gICAgICAgICAgICAgICAgeTogTWF0aC5taW4oeTEsIHkyKSxcclxuICAgICAgICAgICAgICAgIHc6IE1hdGguYWJzKHgyIC0geDEpIHx8IDEsXHJcbiAgICAgICAgICAgICAgICBoOiBNYXRoLmFicyh5MiAtIHkxKSB8fCAxXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBWX1NoYXBlVHlwZS5URVhUOiB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB4OiBNYXRoLm1pbih4MSwgeDIpLFxyXG4gICAgICAgICAgICAgICAgeTogTWF0aC5taW4oeTEsIHkyKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgVl9TaGFwZVR5cGUuUEFUSDoge1xyXG4gICAgICAgICAgICB2YXIgc2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgIHg6IE1hdGgubWluKHgxLCB4MiksXHJcbiAgICAgICAgICAgICAgICB5OiBNYXRoLm1pbih5MSwgeTIpLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IE1hdGguYWJzKHgyIC0geDEpIHx8IDEsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IE1hdGguYWJzKHkyIC0geTEpIHx8IDFcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGQ6IGBNICR7c2l6ZS54fSAke3NpemUueX0gTCAke3NpemUueCArIHNpemUud2lkdGh9ICR7c2l6ZS55ICsgc2l6ZS5oZWlnaHR9YFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7fTtcclxufSIsImV4cG9ydCBjb25zdCBpY2R0X1JvdW5kTnVtYmVyID0gKHZhbDogbnVtYmVyLCBudW0/OiBudW1iZXIpID0+IHtcclxuICAgIG51bSA9IG51bSA/PyAxMDA7XHJcbiAgICByZXR1cm4gTWF0aC5yb3VuZCgodmFsICsgTnVtYmVyLkVQU0lMT04pICogbnVtKSAvIG51bTtcclxufSIsImltcG9ydCB7IGljZHQgfSBmcm9tIFwiLi4vLi4vcHJvdG90eXBlL2ljZHRcIjtcclxuaW1wb3J0IHsgaWNkdF9Sb3VuZE51bWJlciB9IGZyb20gXCIuL3JvdW5kLW51bWJlclwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfU2NhbGVOdW1iZXIgPSAobnVtOiBudW1iZXIpID0+IHtcclxuICAgIHJldHVybiBpY2R0X1JvdW5kTnVtYmVyKG51bSAvIGljZHQuc2NyZWVuLnNjYWxlKTtcclxufSIsImltcG9ydCB7IGljZHQgfSBmcm9tIFwiLi4vLi4vcHJvdG90eXBlL2ljZHRcIjtcclxuaW1wb3J0IHsgaWNkdF9JRGF0YU5vZGUgfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlL0lEYXRhU291cmNlXCI7XHJcbmltcG9ydCB7IGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUgfSBmcm9tIFwiLi4vc3luYy1lbGVtZW50L3N2Zy1lbGVtZW50XCI7XHJcbmltcG9ydCB7IGljZHRfU2l6ZTJBdHRyaWJ1dGUgfSBmcm9tIFwiLi9vZmZzZXRcIjtcclxuaW1wb3J0IHsgaWNkdF9Sb3VuZE51bWJlciB9IGZyb20gXCIuL3JvdW5kLW51bWJlclwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNpemVYID0gKG5vZGU6IGljZHRfSURhdGFOb2RlLCB2YWx1ZTogbnVtYmVyKSA9PiB7XHJcbiAgICBsZXQgeyBpZCwgdHlwZSwgc2l6ZSwgYXR0cmlidXRlIH0gPSBub2RlO1xyXG5cclxuICAgIC8vbMawdSBraG/huqNuZyBraOG6r2MgdHLGsOG7m2Mga2hpIHRoYXkgxJHhu5VpXHJcbiAgICBsZXQgaGl4aWtlRnJvbSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoeyBpZDogaWQsIHNpemU6IHNpemUsIGF0dHJpYnV0ZTogYXR0cmlidXRlIH0pKSBhcyBpY2R0X0lEYXRhTm9kZTtcclxuXHJcbiAgICAvL3Ro4budaSB04bubaSBj4bqjbiBraMO0bmcga+G7i3BcclxuICAgIHNpemUueCA9IGljZHRfUm91bmROdW1iZXIodmFsdWUpO1xyXG5cclxuICAgIC8vZ8OhbiBnacOhIHRy4buLIG3hu5tpIGNobyBhdHRyaWJ1dGVcclxuICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKHR5cGUsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG5cclxuICAgIC8vY+G6rXAgbmjhuq10IFVJXHJcbiAgICBpY2R0X1N5bmNTdmdOb2RlQXR0cmlidXRlKCh3aW5kb3cgYXMgYW55KS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCksIGF0dHJpYnV0ZSk7XHJcblxyXG4gICAgLy9naGkgbmjhuq1uIHRoYW8gdMOhY1xyXG4gICAgaWNkdC5oaXN0b3J5LnB1c2goW3tcclxuICAgICAgICB0eXBlOiAnc2l6ZScsXHJcbiAgICAgICAgZnJvbTogaGl4aWtlRnJvbSxcclxuICAgICAgICB0bzogSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh7IGlkOiBpZCwgc2l6ZTogc2l6ZSwgYXR0cmlidXRlOiBhdHRyaWJ1dGUgfSkpIGFzIGljZHRfSURhdGFOb2RlLFxyXG4gICAgfV0pO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc2l6ZVkgPSAobm9kZTogaWNkdF9JRGF0YU5vZGUsIHZhbHVlOiBudW1iZXIpID0+IHtcclxuICAgIGxldCB7IGlkLCB0eXBlLCBzaXplLCBhdHRyaWJ1dGUgfSA9IG5vZGU7XHJcblxyXG4gICAgLy9sxrB1IGtob+G6o25nIGto4bqvYyB0csaw4bubYyBraGkgdGhheSDEkeG7lWlcclxuICAgIGxldCBoaXhpa2VGcm9tID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh7IGlkOiBpZCwgc2l6ZTogc2l6ZSwgYXR0cmlidXRlOiBhdHRyaWJ1dGUgfSkpIGFzIGljZHRfSURhdGFOb2RlO1xyXG5cclxuICAgIC8vdGjhu51pIHThu5tpIGPhuqNuIGtow7RuZyBr4buLcFxyXG4gICAgc2l6ZS55ID0gaWNkdF9Sb3VuZE51bWJlcih2YWx1ZSk7XHJcblxyXG4gICAgLy9nw6FuIGdpw6EgdHLhu4sgbeG7m2kgY2hvIGF0dHJpYnV0ZVxyXG4gICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUodHlwZSwgc2l6ZSwgYXR0cmlidXRlKSk7XHJcblxyXG4gICAgLy9j4bqtcCBuaOG6rXQgVUlcclxuICAgIGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUoKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSwgYXR0cmlidXRlKTtcclxuXHJcbiAgICAvL2doaSBuaOG6rW4gdGhhbyB0w6FjXHJcbiAgICBpY2R0Lmhpc3RvcnkucHVzaChbe1xyXG4gICAgICAgIHR5cGU6ICdzaXplJyxcclxuICAgICAgICBmcm9tOiBoaXhpa2VGcm9tLFxyXG4gICAgICAgIHRvOiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHsgaWQ6IGlkLCBzaXplOiBzaXplLCBhdHRyaWJ1dGU6IGF0dHJpYnV0ZSB9KSkgYXMgaWNkdF9JRGF0YU5vZGUsXHJcbiAgICB9XSk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBzaXplV2lkdGggPSAobm9kZTogaWNkdF9JRGF0YU5vZGUsIHZhbHVlOiBudW1iZXIsIGxvY2tSYXRpbzogYm9vbGVhbikgPT4ge1xyXG4gICAgbGV0IHsgaWQsIHR5cGUsIHNpemUsIGF0dHJpYnV0ZSB9ID0gbm9kZTtcclxuXHJcbiAgICAvL2zGsHUga2hv4bqjbmcga2jhuq9jIHRyxrDhu5tjIGtoaSB0aGF5IMSR4buVaVxyXG4gICAgbGV0IGhpeGlrZUZyb20gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHsgaWQ6IGlkLCBzaXplOiBzaXplLCBhdHRyaWJ1dGU6IGF0dHJpYnV0ZSB9KSkgYXMgaWNkdF9JRGF0YU5vZGU7XHJcblxyXG4gICAgLy90w61uaCBs4bqhaSBoZWlnaHQgdGhlbyB04bu3IGzhu4dcclxuICAgIGlmIChsb2NrUmF0aW8pIHtcclxuICAgICAgICBzaXplLmhlaWdodCA9IGljZHRfUm91bmROdW1iZXIodmFsdWUgKiBzaXplLmhlaWdodCAvIHNpemUud2lkdGgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vdGjhu51pIHThu5tpIGPhuqNuIGtow7RuZyBr4buLcFxyXG4gICAgc2l6ZS53aWR0aCA9IGljZHRfUm91bmROdW1iZXIodmFsdWUpO1xyXG5cclxuICAgIC8vZ8OhbiBnacOhIHRy4buLIG3hu5tpIGNobyBhdHRyaWJ1dGVcclxuICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKHR5cGUsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG5cclxuICAgIC8vY+G6rXAgbmjhuq10IFVJXHJcbiAgICBpY2R0X1N5bmNTdmdOb2RlQXR0cmlidXRlKCh3aW5kb3cgYXMgYW55KS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCksIGF0dHJpYnV0ZSk7XHJcblxyXG4gICAgLy9naGkgbmjhuq1uIHRoYW8gdMOhY1xyXG4gICAgaWNkdC5oaXN0b3J5LnB1c2goW3tcclxuICAgICAgICB0eXBlOiAnc2l6ZScsXHJcbiAgICAgICAgZnJvbTogaGl4aWtlRnJvbSxcclxuICAgICAgICB0bzogSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh7IGlkOiBpZCwgc2l6ZTogc2l6ZSwgYXR0cmlidXRlOiBhdHRyaWJ1dGUgfSkpIGFzIGljZHRfSURhdGFOb2RlLFxyXG4gICAgfV0pO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc2l6ZUhlaWdodCA9IChub2RlOiBpY2R0X0lEYXRhTm9kZSwgdmFsdWU6IG51bWJlciwgbG9ja1JhdGlvOiBib29sZWFuKSA9PiB7XHJcbiAgICBsZXQgeyBpZCwgdHlwZSwgc2l6ZSwgYXR0cmlidXRlIH0gPSBub2RlO1xyXG5cclxuICAgIC8vbMawdSBraG/huqNuZyBraOG6r2MgdHLGsOG7m2Mga2hpIHRoYXkgxJHhu5VpXHJcbiAgICBsZXQgaGl4aWtlRnJvbSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoeyBpZDogaWQsIHNpemU6IHNpemUsIGF0dHJpYnV0ZTogYXR0cmlidXRlIH0pKSBhcyBpY2R0X0lEYXRhTm9kZTtcclxuXHJcbiAgICAvL3TDrW5oIGzhuqFpIHdpZHRoIHRoZW8gdOG7tyBs4buHXHJcbiAgICBpZiAobG9ja1JhdGlvKSB7XHJcbiAgICAgICAgc2l6ZS53aWR0aCA9IGljZHRfUm91bmROdW1iZXIodmFsdWUgKiBzaXplLndpZHRoIC8gc2l6ZS5oZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vdGjhu51pIHThu5tpIGPhuqNuIGtow7RuZyBr4buLcFxyXG4gICAgc2l6ZS5oZWlnaHQgPSBpY2R0X1JvdW5kTnVtYmVyKHZhbHVlKTtcclxuXHJcbiAgICAvL2fDoW4gZ2nDoSB0cuG7iyBt4bubaSBjaG8gYXR0cmlidXRlXHJcbiAgICBPYmplY3QuYXNzaWduKGF0dHJpYnV0ZSwgaWNkdF9TaXplMkF0dHJpYnV0ZSh0eXBlLCBzaXplLCBhdHRyaWJ1dGUpKTtcclxuXHJcbiAgICAvL2Phuq1wIG5o4bqtdCBVSVxyXG4gICAgaWNkdF9TeW5jU3ZnTm9kZUF0dHJpYnV0ZSgod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLCBhdHRyaWJ1dGUpO1xyXG5cclxuICAgIC8vZ2hpIG5o4bqtbiB0aGFvIHTDoWNcclxuICAgIGljZHQuaGlzdG9yeS5wdXNoKFt7XHJcbiAgICAgICAgdHlwZTogJ3NpemUnLFxyXG4gICAgICAgIGZyb206IGhpeGlrZUZyb20sXHJcbiAgICAgICAgdG86IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoeyBpZDogaWQsIHNpemU6IHNpemUsIGF0dHJpYnV0ZTogYXR0cmlidXRlIH0pKSBhcyBpY2R0X0lEYXRhTm9kZSxcclxuICAgIH1dKTtcclxufVxyXG5cclxuLy8gZXhwb3J0IGNvbnN0IHNpemVSID0gKG5vZGU6IGljZHRfSURhdGFOb2RlLCB2YWx1ZTogbnVtYmVyKSA9PiB7XHJcbi8vICAgICBsZXQgeyBpZCwgdHlwZSwgc2l6ZSwgYXR0cmlidXRlIH0gPSBub2RlO1xyXG5cclxuLy8gICAgIC8vbMawdSBraG/huqNuZyBraOG6r2MgdHLGsOG7m2Mga2hpIHRoYXkgxJHhu5VpXHJcbi8vICAgICBsZXQgaGl4aWtlRnJvbSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoeyBpZDogaWQsIHNpemU6IHNpemUsIGF0dHJpYnV0ZTogYXR0cmlidXRlIH0pKSBhcyBpY2R0X0lEYXRhTm9kZTtcclxuXHJcbi8vICAgICAvL3Ro4budaSB04bubaSBj4bqjbiBraMO0bmcga+G7i3BcclxuLy8gICAgIHNpemUuciA9IGljZHRfUm91bmROdW1iZXIodmFsdWUpO1xyXG5cclxuLy8gICAgIC8vZ8OhbiBnacOhIHRy4buLIG3hu5tpIGNobyBhdHRyaWJ1dGVcclxuLy8gICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKHR5cGUsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG5cclxuLy8gICAgIC8vY+G6rXAgbmjhuq10IFVJXHJcbi8vICAgICBpY2R0X1N5bmNTdmdOb2RlQXR0cmlidXRlKCh3aW5kb3cgYXMgYW55KS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCksIGF0dHJpYnV0ZSk7XHJcblxyXG4vLyAgICAgLy9naGkgbmjhuq1uIHRoYW8gdMOhY1xyXG4vLyAgICAgaWNkdC5oaXN0b3J5LnB1c2goW3tcclxuLy8gICAgICAgICB0eXBlOiAnc2l6ZScsXHJcbi8vICAgICAgICAgZnJvbTogaGl4aWtlRnJvbSxcclxuLy8gICAgICAgICB0bzogSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh7IGlkOiBpZCwgc2l6ZTogc2l6ZSwgYXR0cmlidXRlOiBhdHRyaWJ1dGUgfSkpIGFzIGljZHRfSURhdGFOb2RlLFxyXG4vLyAgICAgfV0pO1xyXG4vLyB9XHJcblxyXG4vLyBleHBvcnQgY29uc3Qgc2l6ZVJ4ID0gKG5vZGU6IGljZHRfSURhdGFOb2RlLCB2YWx1ZTogbnVtYmVyKSA9PiB7XHJcbi8vICAgICBsZXQgeyBpZCwgdHlwZSwgc2l6ZSwgYXR0cmlidXRlIH0gPSBub2RlO1xyXG5cclxuLy8gICAgIC8vbMawdSBraG/huqNuZyBraOG6r2MgdHLGsOG7m2Mga2hpIHRoYXkgxJHhu5VpXHJcbi8vICAgICBsZXQgaGl4aWtlRnJvbSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoeyBpZDogaWQsIHNpemU6IHNpemUsIGF0dHJpYnV0ZTogYXR0cmlidXRlIH0pKSBhcyBpY2R0X0lEYXRhTm9kZTtcclxuXHJcbi8vICAgICAvL3Ro4budaSB04bubaSBj4bqjbiBraMO0bmcga+G7i3BcclxuLy8gICAgIHNpemUucnggPSBpY2R0X1JvdW5kTnVtYmVyKHZhbHVlKTtcclxuXHJcbi8vICAgICAvL2fDoW4gZ2nDoSB0cuG7iyBt4bubaSBjaG8gYXR0cmlidXRlXHJcbi8vICAgICBPYmplY3QuYXNzaWduKGF0dHJpYnV0ZSwgaWNkdF9TaXplMkF0dHJpYnV0ZSh0eXBlLCBzaXplLCBhdHRyaWJ1dGUpKTtcclxuXHJcbi8vICAgICAvL2Phuq1wIG5o4bqtdCBVSVxyXG4vLyAgICAgaWNkdF9TeW5jU3ZnTm9kZUF0dHJpYnV0ZSgod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLCBhdHRyaWJ1dGUpO1xyXG5cclxuLy8gICAgIC8vZ2hpIG5o4bqtbiB0aGFvIHTDoWNcclxuLy8gICAgIGljZHQuaGlzdG9yeS5wdXNoKFt7XHJcbi8vICAgICAgICAgdHlwZTogJ3NpemUnLFxyXG4vLyAgICAgICAgIGZyb206IGhpeGlrZUZyb20sXHJcbi8vICAgICAgICAgdG86IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoeyBpZDogaWQsIHNpemU6IHNpemUsIGF0dHJpYnV0ZTogYXR0cmlidXRlIH0pKSBhcyBpY2R0X0lEYXRhTm9kZSxcclxuLy8gICAgIH1dKTtcclxuLy8gfVxyXG5cclxuLy8gZXhwb3J0IGNvbnN0IHNpemVSeSA9IChub2RlOiBpY2R0X0lEYXRhTm9kZSwgdmFsdWU6IG51bWJlcikgPT4ge1xyXG4vLyAgICAgbGV0IHsgaWQsIHR5cGUsIHNpemUsIGF0dHJpYnV0ZSB9ID0gbm9kZTtcclxuXHJcbi8vICAgICAvL2zGsHUga2hv4bqjbmcga2jhuq9jIHRyxrDhu5tjIGtoaSB0aGF5IMSR4buVaVxyXG4vLyAgICAgbGV0IGhpeGlrZUZyb20gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHsgaWQ6IGlkLCBzaXplOiBzaXplLCBhdHRyaWJ1dGU6IGF0dHJpYnV0ZSB9KSkgYXMgaWNkdF9JRGF0YU5vZGU7XHJcblxyXG4vLyAgICAgLy90aOG7nWkgdOG7m2kgY+G6o24ga2jDtG5nIGvhu4twXHJcbi8vICAgICBzaXplLnJ5ID0gaWNkdF9Sb3VuZE51bWJlcih2YWx1ZSk7XHJcblxyXG4vLyAgICAgLy9nw6FuIGdpw6EgdHLhu4sgbeG7m2kgY2hvIGF0dHJpYnV0ZVxyXG4vLyAgICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUodHlwZSwgc2l6ZSwgYXR0cmlidXRlKSk7XHJcblxyXG4vLyAgICAgLy9j4bqtcCBuaOG6rXQgVUlcclxuLy8gICAgIGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUoKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSwgYXR0cmlidXRlKTtcclxuXHJcbi8vICAgICAvL2doaSBuaOG6rW4gdGhhbyB0w6FjXHJcbi8vICAgICBpY2R0Lmhpc3RvcnkucHVzaChbe1xyXG4vLyAgICAgICAgIHR5cGU6ICdzaXplJyxcclxuLy8gICAgICAgICBmcm9tOiBoaXhpa2VGcm9tLFxyXG4vLyAgICAgICAgIHRvOiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHsgaWQ6IGlkLCBzaXplOiBzaXplLCBhdHRyaWJ1dGU6IGF0dHJpYnV0ZSB9KSkgYXMgaWNkdF9JRGF0YU5vZGUsXHJcbi8vICAgICB9XSk7XHJcbi8vIH1cclxuXHJcbmV4cG9ydCBjb25zdCBzaXplUm90YXRlID0gKG5vZGU6IGljZHRfSURhdGFOb2RlLCB2YWx1ZT86IG51bWJlcikgPT4ge1xyXG4gICAgbGV0IHsgaWQsIHR5cGUsIHNpemUsIGF0dHJpYnV0ZSB9ID0gbm9kZTtcclxuXHJcbiAgICAvL2zGsHUga2hv4bqjbmcga2jhuq9jIHRyxrDhu5tjIGtoaSB0aGF5IMSR4buVaVxyXG4gICAgbGV0IGhpeGlrZUZyb20gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHsgaWQ6IGlkLCBzaXplOiBzaXplLCBhdHRyaWJ1dGU6IGF0dHJpYnV0ZSB9KSkgYXMgaWNkdF9JRGF0YU5vZGU7XHJcblxyXG4gICAgLy90aOG7nWkgdOG7m2kgY+G6o24ga2jDtG5nIGvhu4twXHJcbiAgICBzaXplLnJvdGF0ZSA9IHR5cGVvZiB2YWx1ZSA9PSBcIm51bWJlclwiID8gaWNkdF9Sb3VuZE51bWJlcih2YWx1ZSwgMTAwKSA6IHVuZGVmaW5lZDtcclxuXHJcbiAgICAvL2fDoW4gZ2nDoSB0cuG7iyBt4bubaSBjaG8gYXR0cmlidXRlXHJcbiAgICBPYmplY3QuYXNzaWduKGF0dHJpYnV0ZSwgaWNkdF9TaXplMkF0dHJpYnV0ZSh0eXBlLCBzaXplLCBhdHRyaWJ1dGUpKTtcclxuXHJcbiAgICAvL2Phuq1wIG5o4bqtdCBVSVxyXG4gICAgaWNkdF9TeW5jU3ZnTm9kZUF0dHJpYnV0ZSgod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLCBhdHRyaWJ1dGUpO1xyXG5cclxuICAgIC8vZ2hpIG5o4bqtbiB0aGFvIHTDoWNcclxuICAgIGljZHQuaGlzdG9yeS5wdXNoKFt7XHJcbiAgICAgICAgdHlwZTogJ3NpemUnLFxyXG4gICAgICAgIGZyb206IGhpeGlrZUZyb20sXHJcbiAgICAgICAgdG86IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoeyBpZDogaWQsIHNpemU6IHNpemUsIGF0dHJpYnV0ZTogYXR0cmlidXRlIH0pKSBhcyBpY2R0X0lEYXRhTm9kZSxcclxuICAgIH1dKTtcclxufSIsImltcG9ydCB7IFZfUG9pbnRlclR5cGUgfSBmcm9tICcuLi9sb29rdXAvVl9Qb2ludGVyVHlwZSc7XHJcbmltcG9ydCB7IGljZHQgfSBmcm9tICcuLi9wcm90b3R5cGUvaWNkdCc7XHJcbmltcG9ydCB7IGljZHRfU3ZnIH0gZnJvbSAnLi9zeW5jLWVsZW1lbnQvc3ZnLWVsZW1lbnQnO1xyXG5pbXBvcnQgeyBpY2R0X1BvaW50ZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudC9wb2ludGVyL3BvaW50ZXItY29tcG9uZW50JztcclxuaW1wb3J0IHsgaWNkdF9IYW5kQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQvaGFuZC9oYW5kLWNvbXBvbmVudCc7XHJcbmltcG9ydCB7IGljZHRfU2hhcGVDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudC9zaGFwZS9zaGFwZS1jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBpY2R0X1BvaW50ZXJFdmVudCwgaWNkdF9Qb2ludGVyRXZlbnRzIH0gZnJvbSAnLi9wb2ludGVyL3BvaW50ZXItZXZlbnQnO1xyXG5pbXBvcnQgeyBpY2R0X0tleWJvYXJkQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQva2V5Ym9hcmQva2V5Ym9hcmQtY29tcG9uZW50JztcclxuaW1wb3J0IHsgaWNkdF9QZW5Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudC9wZW4vcGVuLWNvbXBvbmVudCc7XHJcbmltcG9ydCB7IGljZHRfRXJhc2VyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQvZXJhc2VyL2VyYXNlci1jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBpY2R0X1RleHRDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudC90ZXh0L3RleHQtY29tcG9uZW50JztcclxuaW1wb3J0IHsgaWNkdF9Gb3JlaWduT2JqZWN0Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQvZm9yZWlnbm9iamVjdC9mb3JlaWdub2JqZWN0LWNvbXBvbmVudCc7XHJcbmltcG9ydCB7IGljZHRfSW1hZ2VDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudC9pbWFnZS9pbWFnZS1jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBpY2R0X0luZGV4Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQvaW5kZXgvaW5kZXgtY29tcG9uZW50JztcclxuaW1wb3J0IHsgVl9QZW5UeXBlIH0gZnJvbSAnLi4vbG9va3VwL1ZfUGVuVHlwZSc7XHJcbmltcG9ydCB7IGljZHRfUG9pbnRlclNjYWxlIH0gZnJvbSAnLi9wb2ludGVyL3BvaW50ZXItc2NhbGUnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfSW5pdCA9IChvcHRpb25zOiB7IGNvbnRhaW5lcjogc3RyaW5nLCB0YXJnZXQ6IHN0cmluZywgaXNrZXlib2FyZD86IGJvb2xlYW4gfSkgPT4ge1xyXG5cclxuICAgIG5ldyBpY2R0X1N2ZyhvcHRpb25zLmNvbnRhaW5lciwgb3B0aW9ucy50YXJnZXQpO1xyXG5cclxuICAgIC8vcG9pbnRlciBjaGFuZ2VcclxuICAgIGljZHQucG9pbnRlci5vbmNoYW5nZSA9IChwb2ludGVyX2x2MTogbnVtYmVyLCBwb2ludGVyX2x2Mj86IG51bWJlciwgcG9pbnRlcl9sdjM/OiBudW1iZXIpID0+IHtcclxuICAgICAgICBzd2l0Y2ggKHBvaW50ZXJfbHYxKSB7XHJcbiAgICAgICAgICAgIGNhc2UgVl9Qb2ludGVyVHlwZS5QT0lOVEVSOiB7XHJcbiAgICAgICAgICAgICAgICBqUXVlcnkob3B0aW9ucy50YXJnZXQpLmNzcyh7IGN1cnNvcjogJ2F1dG8nIH0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBWX1BvaW50ZXJUeXBlLkhBTkQ6IHtcclxuICAgICAgICAgICAgICAgIGpRdWVyeShvcHRpb25zLnRhcmdldCkuY3NzKHsgY3Vyc29yOiAnZ3JhYicgfSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFZfUG9pbnRlclR5cGUuUEVOOiB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHBvaW50ZXJfbHYyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBWX1BlblR5cGUuRFJBVzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkob3B0aW9ucy50YXJnZXQpLmNzcyh7IGN1cnNvcjogJ3VybChhc3NldHMvaW1hZ2VzL3N2Zy9pY29uL3ZpZXQucG5nKSAxMiAzMixkZWZhdWx0JyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVl9QZW5UeXBlLkhJR0hUTElHSDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkob3B0aW9ucy50YXJnZXQpLmNzcyh7IGN1cnNvcjogJ3VybChhc3NldHMvaW1hZ2VzL3N2Zy9pY29uL2hpZ2hsaWdodDEucG5nKSAxMiAzMixkZWZhdWx0JyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBWX1BvaW50ZXJUeXBlLkVSQVNFUjoge1xyXG4gICAgICAgICAgICAgICAgalF1ZXJ5KG9wdGlvbnMudGFyZ2V0KS5jc3MoeyBjdXJzb3I6ICd1cmwoYXNzZXRzL2ltYWdlcy9zdmcvaWNvbi9nb20ucG5nKSAyMiAyMixkZWZhdWx0JyB9KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgVl9Qb2ludGVyVHlwZS5TSEFQRToge1xyXG4gICAgICAgICAgICAgICAgalF1ZXJ5KG9wdGlvbnMudGFyZ2V0KS5jc3MoeyBjdXJzb3I6ICd1cmwoYXNzZXRzL2ltYWdlcy9zdmcvaWNvbi9wb2ludC5wbmcpIDIyIDIyLGRlZmF1bHQnIH0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBWX1BvaW50ZXJUeXBlLlRFWFQ6XHJcbiAgICAgICAgICAgIGNhc2UgVl9Qb2ludGVyVHlwZS5GT1JFSUdOT0JKRUNUOiB7XHJcbiAgICAgICAgICAgICAgICBqUXVlcnkob3B0aW9ucy50YXJnZXQpLmNzcyh7IGN1cnNvcjogJ3VybChhc3NldHMvaW1hZ2VzL3N2Zy9pY29uL3RleHRtb3VzZS5wbmcpIDIyIDIyLGRlZmF1bHQnIH0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy9cclxuICAgIGpRdWVyeShvcHRpb25zLmNvbnRhaW5lcilcclxuICAgICAgICAub2ZmKCdtb3VzZWRvd24uaWNkdC1pbml0LWljb24nKS5vbignbW91c2Vkb3duLmljZHQtaW5pdC1pY29uJywgKGV2ZW50OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhldmVudC50eXBlLCBldmVudC50YXJnZXQ/Lm5vZGVOYW1lLCBldmVudC50YXJnZXQ/LmlkKTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIGlmIChpY2R0LnBvaW50ZXIucG9pbnRlcl90eXBlID09IFZfUG9pbnRlclR5cGUuSEFORCkge1xyXG4gICAgICAgICAgICAgICAgalF1ZXJ5KG9wdGlvbnMudGFyZ2V0KS5jc3MoeyBjdXJzb3I6ICdncmFiYmluZycgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5vZmYoJ21vdXNldXAuaWNkdC1pbml0LWljb24nKS5vbignbW91c2V1cC5pY2R0LWluaXQtaWNvbicsIChldmVudDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coZXZlbnQudHlwZSwgZXZlbnQudGFyZ2V0Py5ub2RlTmFtZSwgZXZlbnQudGFyZ2V0Py5pZCk7XHJcblxyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICBpZiAoaWNkdC5wb2ludGVyLnBvaW50ZXJfdHlwZSA9PSBWX1BvaW50ZXJUeXBlLkhBTkQpIHtcclxuICAgICAgICAgICAgICAgIGpRdWVyeShvcHRpb25zLnRhcmdldCkuY3NzKHsgY3Vyc29yOiAnZ3JhYicgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAvL21vdXNld2hlZWwgc2NhbGVcclxuICAgIC8vZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvcHRpb25zLmNvbnRhaW5lcik/LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNld2hlZWwnLCAoZXZlbnQ6IGFueSkgPT4ge1xyXG4gICAgalF1ZXJ5KG9wdGlvbnMuY29udGFpbmVyKS5vZmYoJ21vdXNld2hlZWwuaWNkdC1pbml0Jykub24oJ21vdXNld2hlZWwuaWNkdC1pbml0JywgKGV2ZW50OiBhbnkpID0+IHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICB2YXIgc2NhbGUgPSBpY2R0LnNjcmVlbi5zY2FsZTtcclxuXHJcbiAgICAgICAgdmFyIGFscGhhID0gKGV2ZW50Lm9yaWdpbmFsRXZlbnQgPz8gZXZlbnQpLmRlbHRhWSA+IDAgPyAxIDogLTE7XHJcbiAgICAgICAgdmFyIGRlbHRhID0gc2NhbGUgKiAwLjA0ICogYWxwaGE7XHJcblxyXG4gICAgICAgIC8vaWNkdC5zY3JlZW4uc2NhbGVUbyhzY2FsZSAtIGRlbHRhLCB7IHg6IGV2ZW50LmNsaWVudFgsIHk6IGV2ZW50LmNsaWVudFkgfSk7XHJcbiAgICAgICAgaWNkdC5zY3JlZW4uc2NhbGVUbyhzY2FsZSAtIGRlbHRhLCBpY2R0X1BvaW50ZXJTY2FsZSh7IHg6IGV2ZW50LmNsaWVudFgsIHk6IGV2ZW50LmNsaWVudFkgfSwgMSwgeyB4OiAwLCB5OiAwIH0sIGljZHQuc2NyZWVuLm9mZnNldCkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy9tb3VzZSBhbmQgdG91Y2ggY29tcG9uZW50XHJcbiAgICBqUXVlcnkod2luZG93KS5vZmYoJ21vdXNlZG93bi5pY2R0LWluaXQnKS5vbignbW91c2Vkb3duLmljZHQtaW5pdCcsIChldmVudDogYW55KSA9PiB7XHJcbiAgICAgICAgaWNkdC5zY3JlZW4uYWN0aXZlZCA9IGpRdWVyeShldmVudC50YXJnZXQpLnBhcmVudHMoaWNkdC5jb250YWluZXIpLmxlbmd0aCA/IHRydWUgOiBmYWxzZTtcclxuICAgIH0pO1xyXG4gICAgalF1ZXJ5KG9wdGlvbnMuY29udGFpbmVyKS5vZmYoJ21vdXNlZW50ZXIuaWNkdC1pbml0Jykub24oJ21vdXNlZW50ZXIuaWNkdC1pbml0JywgKGV2ZW50OiBhbnkpID0+IHtcclxuICAgICAgICBpY2R0LnNjcmVlbi5hY3RpdmVkID0gdHJ1ZTtcclxuICAgIH0pO1xyXG4gICAgalF1ZXJ5KG9wdGlvbnMuY29udGFpbmVyKS5vZmYoJ21vdXNlbGVhdmUuaWNkdC1pbml0Jykub24oJ21vdXNlbGVhdmUuaWNkdC1pbml0JywgKGV2ZW50OiBhbnkpID0+IHtcclxuICAgICAgICBpY2R0LnNjcmVlbi5hY3RpdmVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vcmVzZXQgcG9pbnRlciB0ZW1wXHJcbiAgICAgICAgaWYgKGljZHQucG9pbnRlci5wb2ludGVyX3R5cGVfdGVtcCA9PSBWX1BvaW50ZXJUeXBlLkhBTkQpIHtcclxuICAgICAgICAgICAgaWNkdC5wb2ludGVyLnBvaW50ZXJfdHlwZV90ZW1wID0gVl9Qb2ludGVyVHlwZS5QT0lOVEVSO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGpRdWVyeShvcHRpb25zLmNvbnRhaW5lcikub2ZmKCdtb3VzZWRvd24uaWNkdC1pbml0Jykub24oJ21vdXNlZG93bi5pY2R0LWluaXQnLCAoZXZlbnQ6IGFueSkgPT4ge1xyXG5cclxuICAgICAgICBpZiAoZXZlbnQuYnV0dG9uICE9IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuY29udGFpbmVyLmluY2x1ZGVzKCcjJykgJiYgb3B0aW9ucy5jb250YWluZXIuaW5jbHVkZXMoZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnaWQnKSlcclxuICAgICAgICAgICAgfHwgb3B0aW9ucy5jb250YWluZXIuaW5jbHVkZXMoJy4nKSAmJiBvcHRpb25zLmNvbnRhaW5lci5pbmNsdWRlcyhldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdjbGFzcycpKVxyXG4gICAgICAgICAgICB8fCBvcHRpb25zLmNvbnRhaW5lci5pbmNsdWRlcyhldmVudC50YXJnZXQubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoaWNkdC5wb2ludGVyLnBvaW50ZXJfdHlwZV90ZW1wIHx8IGljZHQucG9pbnRlci5wb2ludGVyX3R5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgVl9Qb2ludGVyVHlwZS5QT0lOVEVSOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdC5kYXRhU2VsZWN0LmlkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgalF1ZXJ5KG9wdGlvbnMuY29udGFpbmVyKS5vZmYoJ3RvdWNobW92ZS5pY2R0LWluaXQnKS5vbigndG91Y2htb3ZlLmljZHQtaW5pdCcsIChldmVudDogYW55KSA9PiB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGljZHRJbml0ID0gKGV2ZW50czogeyBtb3VzZUV2ZW50PzogTW91c2VFdmVudCwgdG91Y2hFdmVudD86IFRvdWNoRXZlbnQgfSkgPT4ge1xyXG4gICAgICAgIHZhciBjb21wb25lbnQgPSBudWxsO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKGljZHQucG9pbnRlci5wb2ludGVyX3R5cGVfdGVtcCB8fCBpY2R0LnBvaW50ZXIucG9pbnRlcl90eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgVl9Qb2ludGVyVHlwZS5QT0lOVEVSOiB7XHJcbiAgICAgICAgICAgICAgICBpY2R0X1BvaW50ZXJDb21wb25lbnQoZXZlbnRzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgVl9Qb2ludGVyVHlwZS5IQU5EOiB7XHJcbiAgICAgICAgICAgICAgICBpY2R0X0hhbmRDb21wb25lbnQoZXZlbnRzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgVl9Qb2ludGVyVHlwZS5QRU46IHtcclxuICAgICAgICAgICAgICAgIGljZHRfUGVuQ29tcG9uZW50KGV2ZW50cyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFZfUG9pbnRlclR5cGUuU0hBUEU6IHtcclxuICAgICAgICAgICAgICAgIGljZHRfU2hhcGVDb21wb25lbnQoZXZlbnRzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgVl9Qb2ludGVyVHlwZS5GT1JFSUdOT0JKRUNUOiB7XHJcbiAgICAgICAgICAgICAgICBpY2R0X0ZvcmVpZ25PYmplY3RDb21wb25lbnQoZXZlbnRzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgVl9Qb2ludGVyVHlwZS5JTUFHRToge1xyXG4gICAgICAgICAgICAgICAgaWNkdF9JbWFnZUNvbXBvbmVudChldmVudHMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBWX1BvaW50ZXJUeXBlLlRFWFQ6IHtcclxuICAgICAgICAgICAgICAgIGljZHRfVGV4dENvbXBvbmVudChldmVudHMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBWX1BvaW50ZXJUeXBlLkVSQVNFUjoge1xyXG4gICAgICAgICAgICAgICAgaWNkdF9FcmFzZXJDb21wb25lbnQoZXZlbnRzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgVl9Qb2ludGVyVHlwZS5JTkRFWDoge1xyXG4gICAgICAgICAgICAgICAgaWNkdF9JbmRleENvbXBvbmVudChldmVudHMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb21wb25lbnQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpY2R0X1BvaW50ZXJFdmVudHMoZXZlbnRzLCBjb21wb25lbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgaXNUb3VjaCA9IGZhbHNlO1xyXG5cclxuICAgIGpRdWVyeShvcHRpb25zLnRhcmdldCkub2ZmKCd0b3VjaHN0YXJ0LmljZHQtaW5pdCcpLm9uKCd0b3VjaHN0YXJ0LmljZHQtaW5pdCcsIChldmVudDogYW55KSA9PiB7XHJcblxyXG4gICAgICAgIC8vY2jhu4kgbmjhuq1uIHRvdWNoc3RhcnQgaG/hurdjIG1vdXNlZG93blxyXG4gICAgICAgIGlzVG91Y2ggPSB0cnVlO1xyXG5cclxuICAgICAgICBpY2R0SW5pdCh7IHRvdWNoRXZlbnQ6IGV2ZW50IH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgalF1ZXJ5KG9wdGlvbnMudGFyZ2V0KS5vZmYoJ21vdXNlZG93bi5pY2R0LWluaXQnKS5vbignbW91c2Vkb3duLmljZHQtaW5pdCcsIChldmVudDogYW55KSA9PiB7XHJcblxyXG4gICAgICAgIGlmIChldmVudC5idXR0b24gPT0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL2No4buJIG5o4bqtbiB0b3VjaHN0YXJ0IGhv4bq3YyBtb3VzZWRvd25cclxuICAgICAgICBpZiAoaXNUb3VjaCkge1xyXG4gICAgICAgICAgICBpc1RvdWNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGljZHRJbml0KHsgbW91c2VFdmVudDogZXZlbnQgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvL2tleWJvYXJkIGNvbXBvbmVudFxyXG4gICAgaWYgKG9wdGlvbnMuaXNrZXlib2FyZCkge1xyXG4gICAgICAgIC8vd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcclxuICAgICAgICBqUXVlcnkod2luZG93KS5vZmYoJ2tleWRvd24uaWNkdC1pbml0Jykub24oJ2tleWRvd24uaWNkdC1pbml0JywgKGV2ZW50OiBhbnkpID0+IHtcclxuXHJcbiAgICAgICAgICAgIHZhciBrZXkgPSBldmVudC5rZXlDb2RlIHx8IGV2ZW50LndoaWNoIHx8IGV2ZW50LmNoYXJDb2RlIHx8IDA7XHJcbiAgICAgICAgICAgIC8vIGlmIChbVl9LZXlib2FyZC5GMSwgVl9LZXlib2FyZC5GMiwgVl9LZXlib2FyZC5GMywgVl9LZXlib2FyZC5GNCwgVl9LZXlib2FyZC5GNSwgVl9LZXlib2FyZC5GNiwgVl9LZXlib2FyZC5GNywgVl9LZXlib2FyZC5GOCwgVl9LZXlib2FyZC5GOSwgVl9LZXlib2FyZC5GMTAsIFZfS2V5Ym9hcmQuRjExXS5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgICAgICAgIC8vICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgLy8gICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgICAgIC8vbcOgbiBow6xuaCBrbyBrw61jaCBob+G6oXQgdGjDrCBrbyBj4bqnbiBt4bqnblxyXG4gICAgICAgICAgICBpZiAoIWljZHQuc2NyZWVuLmFjdGl2ZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuYWx0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGljZHRfS2V5Ym9hcmRDb21wb25lbnQoZXZlbnQpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvL3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xyXG4gICAgICAgIGpRdWVyeSh3aW5kb3cpLm9mZigna2V5dXAuaWNkdC1pbml0Jykub24oJ2tleXVwLmljZHQtaW5pdCcsIChldmVudDogYW55KSA9PiB7XHJcblxyXG4gICAgICAgICAgICB2YXIga2V5ID0gZXZlbnQua2V5Q29kZSB8fCBldmVudC53aGljaCB8fCBldmVudC5jaGFyQ29kZSB8fCAwO1xyXG4gICAgICAgICAgICAvLyBpZiAoW1ZfS2V5Ym9hcmQuRjEsIFZfS2V5Ym9hcmQuRjIsIFZfS2V5Ym9hcmQuRjMsIFZfS2V5Ym9hcmQuRjQsIFZfS2V5Ym9hcmQuRjUsIFZfS2V5Ym9hcmQuRjYsIFZfS2V5Ym9hcmQuRjcsIFZfS2V5Ym9hcmQuRjgsIFZfS2V5Ym9hcmQuRjksIFZfS2V5Ym9hcmQuRjEwLCBWX0tleWJvYXJkLkYxMV0uaW5jbHVkZXMoa2V5KSkge1xyXG4gICAgICAgICAgICAvLyAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIC8vICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgICAgICAvL23DoG4gaMOsbmgga28ga8OtY2ggaG/huqF0IHRow6wga28gY+G6p24gbeG6p25cclxuICAgICAgICAgICAgaWYgKCFpY2R0LnNjcmVlbi5hY3RpdmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50LmFsdEtleSkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpY2R0X0tleWJvYXJkQ29tcG9uZW50KGV2ZW50KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcbiAgICAgICAgLy9qUXVlcnkod2luZG93KS5vZmYoJ2tleXByZXNzLmljZHQtaW5pdCcpLm9uKCdrZXlwcmVzcy5pY2R0LWluaXQnLCAoZXZlbnQ6IGFueSkgPT4ge1xyXG5cclxuICAgICAgICAvLyAgICAgdmFyIGtleSA9IGV2ZW50LmtleUNvZGUgfHwgZXZlbnQud2hpY2ggfHwgZXZlbnQuY2hhckNvZGUgfHwgMDtcclxuICAgICAgICAvLyAgICAgaWYgKFtWX0tleWJvYXJkLkYxLCBWX0tleWJvYXJkLkYyLCBWX0tleWJvYXJkLkYzLCBWX0tleWJvYXJkLkY0LCBWX0tleWJvYXJkLkY1LCBWX0tleWJvYXJkLkY2LCBWX0tleWJvYXJkLkY3LCBWX0tleWJvYXJkLkY4LCBWX0tleWJvYXJkLkY5LCBWX0tleWJvYXJkLkYxMCwgVl9LZXlib2FyZC5GMTFdLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAvLyAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIC8vICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAvLyAgICAgfVxyXG5cclxuICAgICAgICAvLyAgICAgaWYgKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuYWx0S2V5KSB7XHJcbiAgICAgICAgLy8gICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAvLyAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgLy8gICAgIH1cclxuXHJcbiAgICAgICAgLy8gICAgIGljZHRfS2V5Ym9hcmRDb21wb25lbnQoZXZlbnQpO1xyXG4gICAgICAgIC8vIH0pO1xyXG4gICAgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQgeyBWX1NoYXBlVHlwZSB9IGZyb20gXCIuLi8uLi9sb29rdXAvVl9TaGFwZVR5cGVcIjtcclxuaW1wb3J0IHsgVl9JRCB9IGZyb20gXCIuLi8uLi9sb29rdXAvVl9JRFwiO1xyXG5pbXBvcnQgeyBpY2R0IH0gZnJvbSBcIi4uLy4uL3Byb3RvdHlwZS9pY2R0XCI7XHJcbmltcG9ydCB7IGljZHRfSURhdGFOb2RlIH0gZnJvbSBcIi4uLy4uL2ludGVyZmFjZS9JRGF0YVNvdXJjZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z0dyb3VwIH0gZnJvbSBcIi4uL2NvbXBvbmVudC9zaGFwZS9zdmcvZ3JvdXAvc3ZnLWdyb3VwXCI7XHJcbmltcG9ydCB7IGljZHRfUmVzaXplIH0gZnJvbSBcIi4uL2NvbXBvbmVudC9wb2ludGVyL3Jlc2l6ZS9yZXNpemVcIjtcclxuaW1wb3J0IHsgaWNkdF9TZWxlY3QgfSBmcm9tIFwiLi4vY29tcG9uZW50L3BvaW50ZXIvc2VsZWN0L3NlbGVjdFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIGljZHRfRGF0YVNlbGVjdCB7XHJcblxyXG4gICAgcHJpdmF0ZSBfbm9kZU5hbWU6IEFycmF5PHN0cmluZz4gPSBbJ2NpcmNsZScsICdlbGxpcHNlJywgJ2xpbmUnLCAncG9seWdvbicsICdyZWN0JywgJ3RleHQnLCAncGF0aCcsICdmb3JlaWduT2JqZWN0JywgJ2ltYWdlJ107XHJcbiAgICBwcml2YXRlIF9zZWxlY3RlZF9JZHM6IEFycmF5PG51bWJlcj4gPSBbXTtcclxuXHJcbiAgICBnZXQgbm9kZU5hbWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25vZGVOYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBpZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkX0lkcztcclxuICAgIH1cclxuXHJcbiAgICBzZXQgaWRzKGRhdGE6IEFycmF5PG51bWJlcj4pIHtcclxuICAgICAgICB0aGlzLl9zZWxlY3RlZF9JZHMgPSBkYXRhO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIHRoaXMuY2hhbmdlKHRoaXMuaWRzKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbm9kZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkX0lkcy5tYXAoaWQgPT4gaWNkdC5kYXRhLmdldE5vZGUoaWQpKS5maWx0ZXIoZiA9PiAhZi5pc2Zha2UpIGFzIEFycmF5PGljZHRfSURhdGFOb2RlPjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9mbkNoYW5nZXM6IEFycmF5PEZ1bmN0aW9uPiA9IFtdO1xyXG4gICAgc2V0IG9uY2hhbmdlKGZuOiBGdW5jdGlvbikge1xyXG4gICAgICAgIHRoaXMuX2ZuQ2hhbmdlcy5wdXNoKGZuKTtcclxuICAgIH1cclxuICAgIGNoYW5nZShkYXRhOiBBcnJheTxudW1iZXI+KSB7XHJcblxyXG4gICAgICAgIC8veMOzYSBjw6FjIGFuaCBlbSBu4bq/dSBjw7NcclxuICAgICAgICAod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoVl9JRC5SRVNJWkVfR1JPVVApPy5yZW1vdmUoKTtcclxuICAgICAgICAod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoVl9JRC5TRUxFQ1RfR1JPVVApPy5yZW1vdmUoKTtcclxuICAgICAgICAod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoVl9JRC5TQ0FOX0dST1VQKT8ucmVtb3ZlKCk7XHJcbiAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFZfSUQuQ1JFQVRFX0dST1VQKT8ucmVtb3ZlKCk7XHJcbiAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFZfSUQuSU5URVJBQ1RJVkVfR1JPVVApPy5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgLy94w7NhIGPDoWMgaXRlbSBwaOG7pSBu4bq/dSBjw7JuIHPDs3RcclxuICAgICAgICBqUXVlcnkoJ1tpZF49XCJpY2R0LXRlbXAtXCJdJykucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIC8veMOzYSBjw6FjIGhp4buHdSDhu6luZyBoaWdodGxpZ2ggY2jhu41uXHJcbiAgICAgICAgLy9pY2R0X1N5bmNTdmdOb2RlU3R5bGVBY3RpdmUobnVsbCwgZmFsc2UpO1xyXG5cclxuICAgICAgICAvL2NhbGxiYWNrXHJcbiAgICAgICAgdGhpcy5fZm5DaGFuZ2VzLmZvckVhY2goZiA9PiBmKGRhdGEpKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVOb2RlKCkge1xyXG4gICAgICAgIGZvciAobGV0IGlkIG9mIHRoaXMuX3NlbGVjdGVkX0lkcykge1xyXG4gICAgICAgICAgICAvL8SRw6FuaCBk4bqldSB4w7NhXHJcbiAgICAgICAgICAgIGxldCBkZWxldGVkSWQgPSBpY2R0LmRhdGEuZGVsZXRlTm9kZShpZCk7XHJcblxyXG4gICAgICAgICAgICAvL2doaSBuaOG6rW4gdGhhbyB0w6FjXHJcbiAgICAgICAgICAgIGljZHQuaGlzdG9yeS5wdXNoKFt7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnZGVsZXRlJyxcclxuICAgICAgICAgICAgICAgIGZyb206IHsgaWQ6IGRlbGV0ZWRJZCB9IGFzIGljZHRfSURhdGFOb2RlLFxyXG4gICAgICAgICAgICAgICAgdG86IHsgaWQ6IGRlbGV0ZWRJZCB9IGFzIGljZHRfSURhdGFOb2RlLFxyXG4gICAgICAgICAgICB9XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vY+G6rXAgbmjhuq10IGzhuqFpIHBo4bqnbiBjaOG7jW5cclxuICAgICAgICBpY2R0LmRhdGFTZWxlY3QuaWRzID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgZ3JvdXBOb2RlKCkge1xyXG4gICAgICAgIGxldCBuZXdJZHMgPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKGljZHQuZGF0YVNlbGVjdC5pZHMubGVuZ3RoID49IDIpIHtcclxuICAgICAgICAgICAgbGV0IG5vZGUgPSBpY2R0LmRhdGEuZ2V0Tm9kZShpY2R0LmRhdGFTZWxlY3QuaWRzWzBdKTtcclxuXHJcbiAgICAgICAgICAgIC8vdGFvIG5ob21cclxuICAgICAgICAgICAgbGV0IHsgbm9kZUlkLCBhdHRyaWJ1dGUsIHNpemUgfSA9IGljZHRfU3ZnR3JvdXAoTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDAwKSwgdW5kZWZpbmVkLCBub2RlLnBpZCA/ICh3aW5kb3cgYXMgYW55KS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChub2RlLnBpZCkgOiBudWxsKTtcclxuXHJcbiAgICAgICAgICAgIC8vc2F2ZSBjcmVhdGVcclxuICAgICAgICAgICAgaWNkdC5kYXRhLm5vZGUgPSBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgICAgIGlkOiBub2RlSWQsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBWX1NoYXBlVHlwZS5HUk9VUCxcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdHJ1xyXG4gICAgICAgICAgICB9LCB7IHNpemU6IHNpemUsIGF0dHJpYnV0ZTogYXR0cmlidXRlIH0pO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaWQgb2YgaWNkdC5kYXRhU2VsZWN0Lmlkcykge1xyXG4gICAgICAgICAgICAgICAgLy90aMOqbSB2w6BvIG5ow7NtXHJcbiAgICAgICAgICAgICAgICBuZXdJZHMucHVzaChcclxuICAgICAgICAgICAgICAgICAgICBpY2R0LmRhdGEuYWRkR3JvdXAoaWQsIG5vZGVJZClcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChuZXdJZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vY2jhu41uIGzhuqFpIGlkIG3hu5tpXHJcbiAgICAgICAgICAgIGljZHQuZGF0YVNlbGVjdC5pZHMgPSBuZXdJZHM7XHJcblxyXG4gICAgICAgICAgICBsZXQgbm9kZXMgPSBpY2R0LmRhdGFTZWxlY3Qubm9kZXM7XHJcblxyXG4gICAgICAgICAgICBpZiAobm9kZXMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgICAgIC8vdOG6oW8gY8OhYyBuw7p0IHRoYXkgxJHhu5VpIGvDrWNoIHRoxrDhu5tjXHJcbiAgICAgICAgICAgICAgICBpY2R0X1Jlc2l6ZShub2Rlc1swXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobm9kZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgLy924bq9IGtodW5nIGNo4buNbiBuaGnhu4F1IMSR4buRaSB0xrDhu6NuZ1xyXG4gICAgICAgICAgICAgICAgaWNkdF9TZWxlY3Qobm9kZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVuZ3JvdXBOb2RlKCkge1xyXG4gICAgICAgIGxldCBuZXdJZHMgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaWQgb2YgaWNkdC5kYXRhU2VsZWN0Lmlkcykge1xyXG4gICAgICAgICAgICAvL3Row6ptIHbDoG8gbmjDs21cclxuICAgICAgICAgICAgbmV3SWRzLnB1c2goXHJcbiAgICAgICAgICAgICAgICBpY2R0LmRhdGEudW5Hcm91cChpZClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChuZXdJZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vY2jhu41uIGzhuqFpIGlkIG3hu5tpXHJcbiAgICAgICAgICAgIGljZHQuZGF0YVNlbGVjdC5pZHMgPSBuZXdJZHM7XHJcblxyXG4gICAgICAgICAgICBsZXQgbm9kZXMgPSBpY2R0LmRhdGFTZWxlY3Qubm9kZXM7XHJcblxyXG4gICAgICAgICAgICBpZiAobm9kZXMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgICAgIC8vdOG6oW8gY8OhYyBuw7p0IHRoYXkgxJHhu5VpIGvDrWNoIHRoxrDhu5tjXHJcbiAgICAgICAgICAgICAgICBpY2R0X1Jlc2l6ZShub2Rlc1swXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobm9kZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgLy924bq9IGtodW5nIGNo4buNbiBuaGnhu4F1IMSR4buRaSB0xrDhu6NuZ1xyXG4gICAgICAgICAgICAgICAgaWNkdF9TZWxlY3Qobm9kZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgVl9TaGFwZVR5cGUgfSBmcm9tIFwiLi4vLi4vbG9va3VwL1ZfU2hhcGVUeXBlXCI7XHJcbmltcG9ydCB7IGljZHQgfSBmcm9tIFwiLi4vLi4vcHJvdG90eXBlL2ljZHRcIjtcclxuaW1wb3J0IHsgaWNkdF9TdmdJbWFnZSB9IGZyb20gXCIuLi9jb21wb25lbnQvc2hhcGUvc3ZnL2ltYWdlL3N2Zy1pbWFnZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1JvdW5kTnVtYmVyIH0gZnJvbSBcIi4uL2hhbmRsZS9yb3VuZC1udW1iZXJcIjtcclxuaW1wb3J0IHsgaWNkdF9TaXplMkF0dHJpYnV0ZSB9IGZyb20gXCIuLi9oYW5kbGUvb2Zmc2V0XCI7XHJcbmltcG9ydCB7IGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUgfSBmcm9tIFwiLi4vc3luYy1lbGVtZW50L3N2Zy1lbGVtZW50XCI7XHJcbmltcG9ydCB7IGljZHRfU3ZnRm9yZWlnbk9iamVjdCB9IGZyb20gXCIuLi9jb21wb25lbnQvc2hhcGUvc3ZnL2ZvcmVpZ25vYmplY3Qvc3ZnLWZvcmVpZ25vYmplY3RcIjtcclxuaW1wb3J0IHsgZXh0cmFjdFNvdXJjZVYxIH0gZnJvbSBcIi4uLy4uL2Z1bmMvZXh0cmFjdC1mcm9tLWRhdGEtdjFcIjtcclxuaW1wb3J0IHsgaWNkdF9TdmdSZWN0IH0gZnJvbSBcIi4uL2NvbXBvbmVudC9zaGFwZS9zdmcvcmVjdC9zdmctcmVjdFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIGljZHRfRGF0YVNsaWRlIHtcclxuXHJcbiAgICBjcmVhdGVOb2RlSW1hZ2Uob3B0aW9uczogeyBwYXRoPzogc3RyaW5nLCB1cmw/OiBzdHJpbmcgfSwgcG9zPzogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9KSB7XHJcblxyXG4gICAgICAgIGxldCBzaXplRGVmYXVsdCA9IHtcclxuICAgICAgICAgICAgeDogNTAsXHJcbiAgICAgICAgICAgIHk6IDUwLFxyXG4gICAgICAgICAgICB3aWR0aDogMTAwLCAvL3gyIHNvIHZvaSB4XHJcbiAgICAgICAgICAgIGhlaWdodDogMTAwIC8veDIgc28gdm9pIHlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB7IG5vZGVJZCwgZWxlbWVudCwgc2l6ZSwgYXR0cmlidXRlLCBzb3VyY2UgfSA9IGljZHRfU3ZnSW1hZ2UoTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDAwKSwge1xyXG4gICAgICAgICAgICBzaXplOiB7XHJcbiAgICAgICAgICAgICAgICB4OiAocG9zPy54ID8/IHNpemVEZWZhdWx0LngpIC0gc2l6ZURlZmF1bHQueCxcclxuICAgICAgICAgICAgICAgIHk6IChwb3M/LnkgPz8gc2l6ZURlZmF1bHQueSkgLSBzaXplRGVmYXVsdC55LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IHNpemVEZWZhdWx0LndpZHRoLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBzaXplRGVmYXVsdC5oZWlnaHRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc291cmNlOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnaW1hZ2UnLFxyXG4gICAgICAgICAgICAgICAgaW1hZ2U6IGV4dHJhY3RTb3VyY2VWMShvcHRpb25zKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICgodXJsOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF1cmwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgICAgICBpbWcub25sb2FkID0gKCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCByYXRpbyA9IGljZHRfUm91bmROdW1iZXIoaW1nLm5hdHVyYWxXaWR0aCAvIGltZy5uYXR1cmFsSGVpZ2h0LCAxMDApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChyYXRpbyA+PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZS53aWR0aCA9IE1hdGgubWluKGltZy5uYXR1cmFsV2lkdGgsIDUxMik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSBpY2R0X1JvdW5kTnVtYmVyKHNpemUud2lkdGggLyByYXRpbywgMTAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNpemUuaGVpZ2h0ID0gTWF0aC5taW4oaW1nLm5hdHVyYWxIZWlnaHQsIDUxMik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZS53aWR0aCA9IGljZHRfUm91bmROdW1iZXIoc2l6ZS5oZWlnaHQgKiByYXRpbywgMTAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzaXplLnggPSBpY2R0X1JvdW5kTnVtYmVyKHNpemUueCArIHNpemVEZWZhdWx0LnggLSBzaXplLndpZHRoIC8gMiwgMTAwKTtcclxuICAgICAgICAgICAgICAgIHNpemUueSA9IGljZHRfUm91bmROdW1iZXIoc2l6ZS55ICsgc2l6ZURlZmF1bHQueSAtIHNpemUuaGVpZ2h0IC8gMiwgMTAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUoVl9TaGFwZVR5cGUuSU1BR0UsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICBpY2R0X1N5bmNTdmdOb2RlQXR0cmlidXRlKGVsZW1lbnQsIGF0dHJpYnV0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIGljZHQuZGF0YS5ub2RlID0gT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IG5vZGVJZCxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBWX1NoYXBlVHlwZS5JTUFHRSxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnSW1hZ2UnXHJcbiAgICAgICAgICAgICAgICB9LCB7IHNpemUsIGF0dHJpYnV0ZSwgc291cmNlIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpbWcub25lcnJvciA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBJbWdTcmMgbG9hZCBmYWlsZWQgLT4gJHt1cmx9YCwgZSk7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50Py5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbWcuc3JjID0gdXJsO1xyXG5cclxuICAgICAgICB9KShzb3VyY2UuaW1hZ2U/LnVybCA/PyAnJyk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZU5vZGVJZnJhbWUob3B0aW9uczogeyBwYXRoPzogc3RyaW5nLCB1cmw/OiBzdHJpbmcgfSwgcG9zPzogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9KSB7XHJcblxyXG4gICAgICAgIGxldCBzaXplRGVmYXVsdCA9IHtcclxuICAgICAgICAgICAgeDogNTAsXHJcbiAgICAgICAgICAgIHk6IDUwLFxyXG4gICAgICAgICAgICB3aWR0aDogMTAwLCAvL3gyIHNvIHZvaSB4XHJcbiAgICAgICAgICAgIGhlaWdodDogMTAwIC8veDIgc28gdm9pIHlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB7IG5vZGVJZCwgZWxlbWVudCwgc2l6ZSwgYXR0cmlidXRlLCBzdHlsZSwgc291cmNlIH0gPSBpY2R0X1N2Z0ZvcmVpZ25PYmplY3QoTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDAwKSwge1xyXG4gICAgICAgICAgICBzaXplOiB7XHJcbiAgICAgICAgICAgICAgICB4OiAocG9zPy54ID8/IHNpemVEZWZhdWx0LngpIC0gc2l6ZURlZmF1bHQueCxcclxuICAgICAgICAgICAgICAgIHk6IChwb3M/LnkgPz8gc2l6ZURlZmF1bHQueSkgLSBzaXplRGVmYXVsdC55LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IHNpemVEZWZhdWx0LndpZHRoLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBzaXplRGVmYXVsdC5oZWlnaHRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3R5bGU6IHt9LFxyXG4gICAgICAgICAgICBzb3VyY2U6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdpZnJhbWUnLFxyXG4gICAgICAgICAgICAgICAgaWZyYW1lOiBleHRyYWN0U291cmNlVjEob3B0aW9ucylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAoKCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgbGV0IHZpZXdCb3ggPSBpY2R0LmRhdGEuc2xpZGU/LnN2Zz8udmlld0JveCB8fCB7IHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwIH07XHJcblxyXG4gICAgICAgICAgICBsZXQgcmF0aW8gPSBpY2R0X1JvdW5kTnVtYmVyKHZpZXdCb3gud2lkdGggLyB2aWV3Qm94LmhlaWdodCwgMTAwKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChyYXRpbyA+PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBzaXplLndpZHRoID0gTWF0aC5taW4odmlld0JveC53aWR0aCwgNTEyKTtcclxuICAgICAgICAgICAgICAgIHNpemUuaGVpZ2h0ID0gaWNkdF9Sb3VuZE51bWJlcihzaXplLndpZHRoIC8gcmF0aW8sIDEwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzaXplLmhlaWdodCA9IE1hdGgubWluKHZpZXdCb3guaGVpZ2h0LCA1MTIpO1xyXG4gICAgICAgICAgICAgICAgc2l6ZS53aWR0aCA9IGljZHRfUm91bmROdW1iZXIoc2l6ZS5oZWlnaHQgKiByYXRpbywgMTAwKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2l6ZS54ID0gaWNkdF9Sb3VuZE51bWJlcihzaXplLnggKyBzaXplRGVmYXVsdC54IC0gc2l6ZS53aWR0aCAvIDIsIDEwMCk7XHJcbiAgICAgICAgICAgIHNpemUueSA9IGljZHRfUm91bmROdW1iZXIoc2l6ZS55ICsgc2l6ZURlZmF1bHQueSAtIHNpemUuaGVpZ2h0IC8gMiwgMTAwKTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKFZfU2hhcGVUeXBlLklNQUdFLCBzaXplLCBhdHRyaWJ1dGUpKTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUoZWxlbWVudCwgYXR0cmlidXRlKTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIGljZHQuZGF0YS5ub2RlID0gT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgICAgICAgICBpZDogbm9kZUlkLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogVl9TaGFwZVR5cGUuRk9SRUlHTk9CSkVDVCxcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdGb3JlaWduT2JqZWN0J1xyXG4gICAgICAgICAgICB9LCB7IHNpemUsIGF0dHJpYnV0ZSwgc3R5bGUsIHNvdXJjZSB9KTtcclxuICAgICAgICB9KSgpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVOb2RlRW1iZWQob3B0aW9uczogeyBwYXRoPzogc3RyaW5nLCB1cmw/OiBzdHJpbmcsIHR5cGU/OiBudW1iZXIsIG9zcz86IG51bWJlciB9LCBwb3M/OiB7IHg6IG51bWJlciwgeTogbnVtYmVyIH0pIHtcclxuXHJcbiAgICAgICAgbGV0IHNpemVEZWZhdWx0ID0ge1xyXG4gICAgICAgICAgICB4OiA1MCxcclxuICAgICAgICAgICAgeTogNTAsXHJcbiAgICAgICAgICAgIHdpZHRoOiAxMDAsIC8veDIgc28gdm9pIHhcclxuICAgICAgICAgICAgaGVpZ2h0OiAxMDAgLy94MiBzbyB2b2kgeVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHsgbm9kZUlkLCBlbGVtZW50LCBzaXplLCBhdHRyaWJ1dGUsIHN0eWxlLCBzb3VyY2UgfSA9IGljZHRfU3ZnRm9yZWlnbk9iamVjdChNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMDApLCB7XHJcbiAgICAgICAgICAgIHNpemU6IHtcclxuICAgICAgICAgICAgICAgIHg6IChwb3M/LnggPz8gc2l6ZURlZmF1bHQueCkgLSBzaXplRGVmYXVsdC54LFxyXG4gICAgICAgICAgICAgICAgeTogKHBvcz8ueSA/PyBzaXplRGVmYXVsdC55KSAtIHNpemVEZWZhdWx0LnksXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogc2l6ZURlZmF1bHQud2lkdGgsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHNpemVEZWZhdWx0LmhlaWdodFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHlsZToge30sXHJcbiAgICAgICAgICAgIHNvdXJjZToge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2VtYmVkJyxcclxuICAgICAgICAgICAgICAgIGVtYmVkOiBPYmplY3QuYXNzaWduKG9wdGlvbnMsIGV4dHJhY3RTb3VyY2VWMShvcHRpb25zKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAoKCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgbGV0IHZpZXdCb3ggPSBpY2R0LmRhdGEuc2xpZGU/LnN2Zz8udmlld0JveCB8fCB7IHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwIH07XHJcblxyXG4gICAgICAgICAgICBsZXQgcmF0aW8gPSBpY2R0X1JvdW5kTnVtYmVyKHZpZXdCb3gud2lkdGggLyB2aWV3Qm94LmhlaWdodCwgMTAwKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChyYXRpbyA+PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBzaXplLndpZHRoID0gTWF0aC5taW4odmlld0JveC53aWR0aCwgNTEyKTtcclxuICAgICAgICAgICAgICAgIHNpemUuaGVpZ2h0ID0gaWNkdF9Sb3VuZE51bWJlcihzaXplLndpZHRoIC8gcmF0aW8sIDEwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzaXplLmhlaWdodCA9IE1hdGgubWluKHZpZXdCb3guaGVpZ2h0LCA1MTIpO1xyXG4gICAgICAgICAgICAgICAgc2l6ZS53aWR0aCA9IGljZHRfUm91bmROdW1iZXIoc2l6ZS5oZWlnaHQgKiByYXRpbywgMTAwKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2l6ZS54ID0gaWNkdF9Sb3VuZE51bWJlcihzaXplLnggKyBzaXplRGVmYXVsdC54IC0gc2l6ZS53aWR0aCAvIDIsIDEwMCk7XHJcbiAgICAgICAgICAgIHNpemUueSA9IGljZHRfUm91bmROdW1iZXIoc2l6ZS55ICsgc2l6ZURlZmF1bHQueSAtIHNpemUuaGVpZ2h0IC8gMiwgMTAwKTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKFZfU2hhcGVUeXBlLklNQUdFLCBzaXplLCBhdHRyaWJ1dGUpKTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUoZWxlbWVudCwgYXR0cmlidXRlKTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIGljZHQuZGF0YS5ub2RlID0gT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgICAgICAgICBpZDogbm9kZUlkLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogVl9TaGFwZVR5cGUuRk9SRUlHTk9CSkVDVCxcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdGb3JlaWduT2JqZWN0J1xyXG4gICAgICAgICAgICB9LCB7IHNpemUsIGF0dHJpYnV0ZSwgc3R5bGUsIHNvdXJjZSB9KTtcclxuICAgICAgICB9KSgpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVOb2RlTWVkaWEob3B0aW9uczogeyBjb3ZlcjogeyBwYXRoPzogc3RyaW5nLCB1cmw/OiBzdHJpbmcgfSwgbWVkaWE6IGFueSB9LCBwb3M/OiB7IHg6IG51bWJlciwgeTogbnVtYmVyIH0pIHtcclxuXHJcbiAgICAgICAgbGV0IHNpemVEZWZhdWx0ID0ge1xyXG4gICAgICAgICAgICB4OiA1MCxcclxuICAgICAgICAgICAgeTogNTAsXHJcbiAgICAgICAgICAgIHdpZHRoOiAxMDAsIC8veDIgc28gdm9pIHhcclxuICAgICAgICAgICAgaGVpZ2h0OiAxMDAgLy94MiBzbyB2b2kgeVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHsgbm9kZUlkLCBlbGVtZW50LCBzaXplLCBhdHRyaWJ1dGUsIHNvdXJjZSB9ID0gaWNkdF9TdmdJbWFnZShNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMDApLCB7XHJcbiAgICAgICAgICAgIHNpemU6IHtcclxuICAgICAgICAgICAgICAgIHg6IChwb3M/LnggPz8gc2l6ZURlZmF1bHQueCkgLSBzaXplRGVmYXVsdC54LFxyXG4gICAgICAgICAgICAgICAgeTogKHBvcz8ueSA/PyBzaXplRGVmYXVsdC55KSAtIHNpemVEZWZhdWx0LnksXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogc2l6ZURlZmF1bHQud2lkdGgsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHNpemVEZWZhdWx0LmhlaWdodFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzb3VyY2U6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdpbWFnZScsXHJcbiAgICAgICAgICAgICAgICBpbWFnZTogZXh0cmFjdFNvdXJjZVYxKG9wdGlvbnMuY292ZXIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbGV0IGludGVyYWN0aXZlID0ge1xyXG4gICAgICAgICAgICBjbGljazoge1xyXG4gICAgICAgICAgICAgICAgbWVkaWE6IG9wdGlvbnMubWVkaWFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICgodXJsOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF1cmwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgICAgICBpbWcub25sb2FkID0gKCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCByYXRpbyA9IGljZHRfUm91bmROdW1iZXIoaW1nLm5hdHVyYWxXaWR0aCAvIGltZy5uYXR1cmFsSGVpZ2h0LCAxMDApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChyYXRpbyA+PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZS53aWR0aCA9IE1hdGgubWluKGltZy5uYXR1cmFsV2lkdGgsIDUxMik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSBpY2R0X1JvdW5kTnVtYmVyKHNpemUud2lkdGggLyByYXRpbywgMTAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNpemUuaGVpZ2h0ID0gTWF0aC5taW4oaW1nLm5hdHVyYWxIZWlnaHQsIDUxMik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZS53aWR0aCA9IGljZHRfUm91bmROdW1iZXIoc2l6ZS5oZWlnaHQgKiByYXRpbywgMTAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzaXplLnggPSBpY2R0X1JvdW5kTnVtYmVyKHNpemUueCArIHNpemVEZWZhdWx0LnggLSBzaXplLndpZHRoIC8gMiwgMTAwKTtcclxuICAgICAgICAgICAgICAgIHNpemUueSA9IGljZHRfUm91bmROdW1iZXIoc2l6ZS55ICsgc2l6ZURlZmF1bHQueSAtIHNpemUuaGVpZ2h0IC8gMiwgMTAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIGljZHRfU2l6ZTJBdHRyaWJ1dGUoVl9TaGFwZVR5cGUuSU1BR0UsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICBpY2R0X1N5bmNTdmdOb2RlQXR0cmlidXRlKGVsZW1lbnQsIGF0dHJpYnV0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIGljZHQuZGF0YS5ub2RlID0gT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IG5vZGVJZCxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBWX1NoYXBlVHlwZS5JTUFHRSxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnSW1hZ2UnXHJcbiAgICAgICAgICAgICAgICB9LCB7IHNpemUsIGF0dHJpYnV0ZSwgc291cmNlLCBpbnRlcmFjdGl2ZSB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaW1nLm9uZXJyb3IgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgSW1nU3JjIGxvYWQgZmFpbGVkIC0+ICR7dXJsfWAsIGUpO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudD8ucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW1nLnNyYyA9IHVybDtcclxuXHJcbiAgICAgICAgfSkoc291cmNlLmltYWdlPy51cmwgPz8gJycpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBpbnNlcnQoZGF0YToge1xyXG4gICAgICAgIHRpdGxlPzogc3RyaW5nLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nLFxyXG4gICAgICAgIG1lZGlhPzoge1xyXG4gICAgICAgICAgICBwcm9tcHQ/OiBzdHJpbmdcclxuICAgICAgICB9XHJcbiAgICB9KSB7XHJcblxyXG4gICAgICAgIGljZHQuZGF0YS5pbnNlcnRTbGlkZShpY2R0LmRhdGEuc2xpZGVJZCwgMSk7XHJcblxyXG4gICAgICAgIGlmIChkYXRhLnRpdGxlKSB7XHJcbiAgICAgICAgICAgIGxldCB7IG5vZGVJZCwgc2l6ZSwgYXR0cmlidXRlLCBzdHlsZSwgc291cmNlIH0gPSBpY2R0X1N2Z0ZvcmVpZ25PYmplY3QoTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDAwKSwge1xyXG4gICAgICAgICAgICAgICAgc2l6ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IDEwMCxcclxuICAgICAgICAgICAgICAgICAgICB5OiAxMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDgwMCxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDE1MFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNvdXJjZToge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdodG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBodG1sOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxDb250ZW50OiBgPHNwYW4gc3R5bGU9XCJmb250LXNpemU6IDQwcHg7XCI+JHtkYXRhLnRpdGxlfTwvc3Bhbj5gXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vc2F2ZSBjcmVhdGVcclxuICAgICAgICAgICAgaWNkdC5kYXRhLm5vZGUgPSBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgICAgIGlkOiBub2RlSWQsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBWX1NoYXBlVHlwZS5GT1JFSUdOT0JKRUNULFxyXG4gICAgICAgICAgICAgICAgbmFtZTogJ0ZvcmVpZ25PYmplY3QnXHJcbiAgICAgICAgICAgIH0sIHsgc2l6ZSwgYXR0cmlidXRlLCBzdHlsZSwgc291cmNlIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGRhdGEuZGVzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgbGV0IHsgbm9kZUlkLCBzaXplLCBhdHRyaWJ1dGUsIHN0eWxlLCBzb3VyY2UgfSA9IGljZHRfU3ZnRm9yZWlnbk9iamVjdChNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMDApLCB7XHJcbiAgICAgICAgICAgICAgICBzaXplOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDogMTAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IDMwMCxcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogNjAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMzAwXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc291cmNlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2h0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGh0bWw6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbENvbnRlbnQ6IGA8c3BhbiBzdHlsZT1cImZvbnQtc2l6ZTogMjRweDtcIj4ke2RhdGEuZGVzY3JpcHRpb24ucmVwbGFjZSgvXFxuL2csICc8YnIvPicpfTwvc3Bhbj5gXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vc2F2ZSBjcmVhdGVcclxuICAgICAgICAgICAgaWNkdC5kYXRhLm5vZGUgPSBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgICAgIGlkOiBub2RlSWQsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBWX1NoYXBlVHlwZS5GT1JFSUdOT0JKRUNULFxyXG4gICAgICAgICAgICAgICAgbmFtZTogJ0ZvcmVpZ25PYmplY3QnXHJcbiAgICAgICAgICAgIH0sIHsgc2l6ZSwgYXR0cmlidXRlLCBzdHlsZSwgc291cmNlIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGRhdGEubWVkaWE/LnByb21wdCkge1xyXG4gICAgICAgICAgICAoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IHsgbm9kZUlkLCBzaXplLCBhdHRyaWJ1dGUgfSA9IGljZHRfU3ZnUmVjdChNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMDApLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiA4MDAgLSAyNSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTogMzAwIC0gMjUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAzMDAgKyA1MCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzMDAgKyA1MFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICcjRkZGRkZGJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiAnI0U2RTZFNicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VEYXNoYXJyYXk6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ4OiA0XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zYXZlIGNyZWF0ZVxyXG4gICAgICAgICAgICAgICAgaWNkdC5kYXRhLm5vZGUgPSBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogbm9kZUlkLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFZfU2hhcGVUeXBlLlJFQ1QsXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1JlY3QnXHJcbiAgICAgICAgICAgICAgICB9LCB7IHNpemUsIGF0dHJpYnV0ZSB9KTtcclxuICAgICAgICAgICAgfSkoKTtcclxuXHJcbiAgICAgICAgICAgICgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgeyBub2RlSWQsIHNpemUsIGF0dHJpYnV0ZSwgc3R5bGUsIHNvdXJjZSB9ID0gaWNkdF9TdmdGb3JlaWduT2JqZWN0KE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwMCksIHtcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IDgwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTogMzAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMzAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwMFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdodG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbENvbnRlbnQ6IGA8c3BhbiBzdHlsZT1cImZvbnQtc2l6ZTogMThweDsgY29sb3I6ICM2NjMzY2NcIj48aT4ke2RhdGEubWVkaWE/LnByb21wdH08L2k+PC9zcGFuPmBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vc2F2ZSBjcmVhdGVcclxuICAgICAgICAgICAgICAgIGljZHQuZGF0YS5ub2RlID0gT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IG5vZGVJZCxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBWX1NoYXBlVHlwZS5GT1JFSUdOT0JKRUNULFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdGb3JlaWduT2JqZWN0J1xyXG4gICAgICAgICAgICAgICAgfSwgeyBzaXplLCBhdHRyaWJ1dGUsIHN0eWxlLCBzb3VyY2UgfSk7XHJcbiAgICAgICAgICAgIH0pKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxufSIsImltcG9ydCB7IGljZHQgfSBmcm9tIFwiLi4vLi4vcHJvdG90eXBlL2ljZHRcIjtcclxuaW1wb3J0IHsgaWNkdF9JRGF0YU5vZGUsIGljZHRfSURhdGFTbGlkZSwgaWNkdF9JRGF0YVNvdXJjZSB9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuaW1wb3J0IHsgVl9TaGFwZVR5cGUgfSBmcm9tIFwiLi4vLi4vbG9va3VwL1ZfU2hhcGVUeXBlXCI7XHJcbmltcG9ydCB7IGljZHRfUmVuZGVyQ29tcG9uZW50LCBpY2R0X1NvcnRDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50L3JlbmRlci1jb21wb25lbnRcIjtcclxuaW1wb3J0IHsgaWNkdF9TdmdSZW5ldywgaWNkdF9TeW5jU3ZnU3R5bGUgfSBmcm9tIFwiLi4vc3luYy1lbGVtZW50L3N2Zy1lbGVtZW50XCI7XHJcbmltcG9ydCB7IGljZHRfU2VsZWN0IH0gZnJvbSBcIi4uL2NvbXBvbmVudC9wb2ludGVyL3NlbGVjdC9zZWxlY3RcIjtcclxuaW1wb3J0IHsgVl9JRCB9IGZyb20gXCIuLi8uLi9sb29rdXAvVl9JRFwiO1xyXG5pbXBvcnQgeyBpY2R0X1Jlc2l6ZSB9IGZyb20gXCIuLi9jb21wb25lbnQvcG9pbnRlci9yZXNpemUvcmVzaXplXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgaWNkdF9EYXRhU291cmNlIHtcclxuXHJcbiAgICBwcml2YXRlIF9kYXRhU291cmNlOiBpY2R0X0lEYXRhU291cmNlID0ge1xyXG4gICAgICAgIHNsaWRlczogW10sXHJcbiAgICAgICAgcmVzb3VyY2VzOiBbXVxyXG4gICAgfTtcclxuXHJcbiAgICBwcml2YXRlIF9zbGlkZUlkeDogbnVtYmVyID0gMDtcclxuXHJcbiAgICBnZXQgbmV3U2xpZGVJZCgpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDAwKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgX2RlZmF1bHRTbGlkZSgpIHtcclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgIGlkOiB0aGlzLm5ld1NsaWRlSWQsXHJcbiAgICAgICAgICAgIG5hbWU6IFwiVHJhbmcgbeG7m2lcIixcclxuICAgICAgICAgICAgc3ZnOiB7XHJcbiAgICAgICAgICAgICAgICB2aWV3Qm94OiBpY2R0LnNjcmVlbi5mcmFtZVNpemUsXHJcbiAgICAgICAgICAgICAgICBub2RlczogW11cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pKSBhcyBpY2R0X0lEYXRhU2xpZGVcclxuICAgIH07XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgICBnZXQgZ2V0KCkge1xyXG4gICAgICAgIGxldCByZWN1cnNpdmVOb2RlcyA9IChub2Rlcz86IEFycmF5PGljZHRfSURhdGFOb2RlPikgPT4ge1xyXG5cclxuICAgICAgICAgICAgLy/EkeG7hyBxdXkgeG9heSB2w7JuZ1xyXG4gICAgICAgICAgICBub2Rlcz8uZmlsdGVyKGYgPT4gZi50eXBlID09IFZfU2hhcGVUeXBlLkdST1VQKVxyXG4gICAgICAgICAgICAgICAgLmZvckVhY2gobm9kZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5ub2RlcyA9IHJlY3Vyc2l2ZU5vZGVzKG5vZGUubm9kZXM/LmZpbHRlcihmID0+ICFmLmlzZGVsZXRlZCkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvL2xv4bqhaSBuaMOzbSBy4buXbmdcclxuICAgICAgICAgICAgbm9kZXMgPSBub2Rlcz8uZmlsdGVyKGYgPT4gZi50eXBlICE9IFZfU2hhcGVUeXBlLkdST1VQIHx8IChmLm5vZGVzPy5sZW5ndGggPz8gMCkgPiAwKVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG5vZGVzIHx8IFtdO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8veOG7rSBsw70gZOG7ryBsaeG7h3UsIGxv4bqhaSBjw6FjIGl0ZW0gxJHDoyDEkcaw4bujYyDEkcOhbmggZOG6pXUgeMOzYVxyXG4gICAgICAgIHRoaXMuX2RhdGFTb3VyY2Uuc2xpZGVzPy5mb3JFYWNoKHNsaWRlID0+IHtcclxuICAgICAgICAgICAgaWYgKHNsaWRlLnN2Zykge1xyXG4gICAgICAgICAgICAgICAgc2xpZGUuc3ZnLm5vZGVzID0gcmVjdXJzaXZlTm9kZXMoc2xpZGUuc3ZnPy5ub2Rlcz8uZmlsdGVyKGYgPT4gIWYuaXNkZWxldGVkKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFTb3VyY2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGdldFJlc291cmNlKCkge1xyXG4gICAgICAgIGxldCByZXNvdXJjZXMgPSBbXSBhcyBBcnJheTxhbnk+O1xyXG5cclxuICAgICAgICB0aGlzLl9kYXRhU291cmNlLnNsaWRlcz8uZm9yRWFjaChzbGlkZSA9PiB7XHJcblxyXG4gICAgICAgICAgICAvL2JhY2tncm91bmRcclxuICAgICAgICAgICAgcmVzb3VyY2VzLnB1c2goc2xpZGUuc3ZnPy5iYWNrZ3JvdW5kPy5wYXRoKTtcclxuXHJcbiAgICAgICAgICAgIC8vbm9kZVxyXG4gICAgICAgICAgICBzbGlkZS5zdmc/Lm5vZGVzLmZvckVhY2gobm9kZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvL3NvdXJjZVxyXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VzLnB1c2gobm9kZS5zb3VyY2U/LmltYWdlPy5wYXRoKTtcclxuICAgICAgICAgICAgICAgIHJlc291cmNlcy5wdXNoKG5vZGUuc291cmNlPy5hdWRpbz8ucGF0aCk7XHJcbiAgICAgICAgICAgICAgICByZXNvdXJjZXMucHVzaChub2RlLnNvdXJjZT8udmlkZW8/LnBhdGgpO1xyXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VzLnB1c2gobm9kZS5zb3VyY2U/LmZpbGU/LnBhdGgpO1xyXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VzLnB1c2gobm9kZS5zb3VyY2U/LmlmcmFtZT8ucGF0aCk7XHJcbiAgICAgICAgICAgICAgICByZXNvdXJjZXMucHVzaChub2RlLnNvdXJjZT8udHJhY2s/LnBhdGgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vaW50ZXJhY3RpdmVcclxuICAgICAgICAgICAgICAgIHJlc291cmNlcy5wdXNoKG5vZGUuaW50ZXJhY3RpdmU/LnNob3c/LmF1ZGlvPy5zb3VyY2U/LnBhdGgpO1xyXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VzLnB1c2gobm9kZS5pbnRlcmFjdGl2ZT8uY2xpY2s/LmF1ZGlvPy5zb3VyY2U/LnBhdGgpO1xyXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VzLnB1c2gobm9kZS5pbnRlcmFjdGl2ZT8uY2xpY2s/LmltYWdlPy5zb3VyY2U/LnBhdGgpO1xyXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VzLnB1c2gobm9kZS5pbnRlcmFjdGl2ZT8uY2xpY2s/LnZpZGVvPy5zb3VyY2U/LnBhdGgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vdGVzdFxyXG4gICAgICAgICAgICByZXNvdXJjZXMucHVzaChzbGlkZS50ZXN0Py5hdWRpb3RydWU/LnBhdGgpO1xyXG4gICAgICAgICAgICByZXNvdXJjZXMucHVzaChzbGlkZS50ZXN0Py5hdWRpb2ZhbHNlPy5wYXRoKTtcclxuICAgICAgICAgICAgcmVzb3VyY2VzLnB1c2goc2xpZGUudGVzdD8uZWZmZWN0dHJ1ZT8ucGF0aCk7XHJcbiAgICAgICAgICAgIHJlc291cmNlcy5wdXNoKHNsaWRlLnRlc3Q/LmVmZmVjdGZhbHNlPy5wYXRoKTtcclxuICAgICAgICAgICAgcmVzb3VyY2VzLnB1c2goc2xpZGUudGVzdD8uaWNvbnRydWU/LnBhdGgpO1xyXG4gICAgICAgICAgICByZXNvdXJjZXMucHVzaChzbGlkZS50ZXN0Py5pY29uZmFsc2U/LnBhdGgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzb3VyY2VzXHJcbiAgICAgICAgICAgIC5maWx0ZXIoZiA9PiBmKSAvL2Lhu48gZOG7ryBsaeG7h3UgcuG7l25nXHJcbiAgICAgICAgICAgIC5tYXAobSA9PiBtLnJlcGxhY2UoLyhcXD98XFwjKVteXFw/XFwjXSsvZywgJycpLnRvTG93ZXJDYXNlKCkpIC8vYuG7jyB2ZXJzaW9uLCDEkeG7i25oIGThuqFuZyBsb3dlciBjYXNlXHJcbiAgICAgICAgICAgIC5maWx0ZXIoKHYsIGksIGEpID0+IGEuaW5kZXhPZih2KSA9PSBpKTsgICAgLy9i4buPIHRyw7luZ1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBzZXQoZGF0YTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5fZGF0YVNvdXJjZSA9IGRhdGE7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5fZGF0YVNvdXJjZS5zbGlkZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5fZGF0YVNvdXJjZS5zbGlkZXMgPSBbXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5fZGF0YVNvdXJjZS5zbGlkZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NsaWRlSWR4ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fZGF0YVNvdXJjZS5zbGlkZXMucHVzaChKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuX2RlZmF1bHRTbGlkZSkpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vY2xlYXIgVUlcclxuICAgICAgICBpY2R0X1N2Z1JlbmV3KCk7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdGhpcy5jaGFuZ2VTbGlkZSh0aGlzLnNsaWRlcywgdGhpcy5zbGlkZUlkeCwgdGhpcy5fZGF0YVNvdXJjZS5zbGlkZXMubGVuZ3RoLCB0aGlzLnNsaWRlKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGF0YVNvdXJjZSgpIHtcclxuXHJcbiAgICAgICAgbGV0IHJlY3Vyc2l2ZU5vZGVzID0gKG5vZGVzPzogQXJyYXk8aWNkdF9JRGF0YU5vZGU+KSA9PiB7XHJcblxyXG4gICAgICAgICAgICAvL8SR4buHIHF1eSB4b2F5IHbDsm5nXHJcbiAgICAgICAgICAgIG5vZGVzPy5maWx0ZXIoZiA9PiBmLnR5cGUgPT0gVl9TaGFwZVR5cGUuR1JPVVApXHJcbiAgICAgICAgICAgICAgICAuZm9yRWFjaChub2RlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBub2RlLm5vZGVzID0gcmVjdXJzaXZlTm9kZXMobm9kZS5ub2Rlcz8uZmlsdGVyKGYgPT4gIWYuaXNkZWxldGVkKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vbG/huqFpIG5ow7NtIHLhu5duZ1xyXG4gICAgICAgICAgICBub2RlcyA9IG5vZGVzPy5maWx0ZXIoZiA9PiBmLnR5cGUgIT0gVl9TaGFwZVR5cGUuR1JPVVAgfHwgKGYubm9kZXM/Lmxlbmd0aCA/PyAwKSA+IDApXHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbm9kZXMgfHwgW107XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy944butIGzDvSBk4buvIGxp4buHdSwgbG/huqFpIGPDoWMgaXRlbSDEkcOjIMSRxrDhu6NjIMSRw6FuaCBk4bqldSB4w7NhXHJcbiAgICAgICAgdGhpcy5fZGF0YVNvdXJjZS5zbGlkZXM/LmZvckVhY2goc2xpZGUgPT4ge1xyXG4gICAgICAgICAgICBpZiAoc2xpZGUuc3ZnKSB7XHJcbiAgICAgICAgICAgICAgICBzbGlkZS5zdmcubm9kZXMgPSByZWN1cnNpdmVOb2RlcyhzbGlkZS5zdmc/Lm5vZGVzPy5maWx0ZXIoZiA9PiAhZi5pc2RlbGV0ZWQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvL3JldXBkYXRlIHJlc291cmNlXHJcbiAgICAgICAgdGhpcy5fZGF0YVNvdXJjZS5yZXNvdXJjZXMgPSB0aGlzLmdldFJlc291cmNlO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVNvdXJjZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgZGF0YVNvdXJjZShkYXRhOiBhbnkpIHtcclxuICAgICAgICB0aGlzLl9kYXRhU291cmNlID0gZGF0YTtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhU291cmNlLnNsaWRlcykge1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRhU291cmNlLnNsaWRlcyA9IFtdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhU291cmNlLnNsaWRlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2xpZGVJZHggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRhU291cmNlLnNsaWRlcy5wdXNoKEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5fZGVmYXVsdFNsaWRlKSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9jbGVhciBVSVxyXG4gICAgICAgIGljZHRfU3ZnUmVuZXcoKTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLmNoYW5nZVNsaWRlKHRoaXMuc2xpZGVzLCB0aGlzLnNsaWRlSWR4LCB0aGlzLl9kYXRhU291cmNlLnNsaWRlcy5sZW5ndGgsIHRoaXMuc2xpZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1TTElERS0tLS0tLS0tLS1cclxuXHJcbiAgICBnZXQgc2xpZGVJZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zbGlkZT8uaWQgPz8gMDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc2xpZGVJZHgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NsaWRlSWR4O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBzbGlkZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVNvdXJjZS5zbGlkZXM/LmZpbmQoKGl0ZW06IGFueSwgaWR4OiBhbnkpID0+IHsgcmV0dXJuIGlkeCA9PSB0aGlzLl9zbGlkZUlkeCB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc2xpZGVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhU291cmNlLnNsaWRlcyB8fCBbXTtcclxuICAgIH1cclxuXHJcbiAgICBiYWNrU2xpZGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NsaWRlSWR4ID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zbGlkZUlkeCAtPSAxO1xyXG4gICAgICAgICAgICB0aGlzLm9wZW5TbGlkZSh1bmRlZmluZWQsIHRoaXMuX3NsaWRlSWR4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmV4dFNsaWRlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9zbGlkZUlkeCA8ICh0aGlzLl9kYXRhU291cmNlLnNsaWRlcz8ubGVuZ3RoID8/IDApIC0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zbGlkZUlkeCArPSAxO1xyXG4gICAgICAgICAgICB0aGlzLm9wZW5TbGlkZSh1bmRlZmluZWQsIHRoaXMuX3NsaWRlSWR4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVmcmVzaFNsaWRlKCkge1xyXG4gICAgICAgIC8vY2xlYXIgVUlcclxuICAgICAgICBpY2R0X1N2Z1JlbmV3KCk7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgaWNkdF9SZW5kZXJDb21wb25lbnQodGhpcy5zbGlkZSk7XHJcbiAgICB9XHJcblxyXG4gICAgb3BlblNsaWRlKGlkPzogbnVtYmVyLCBpZHg/OiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoaWQpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuX2RhdGFTb3VyY2Uuc2xpZGVzPy5sZW5ndGggPz8gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHRoaXMuX2RhdGFTb3VyY2Uuc2xpZGVzID8/IFtdKVtpXS5pZCA9PSBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NsaWRlSWR4ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpZHggJiYgaWR4ID49IDAgJiYgaWR4IDwgKHRoaXMuX2RhdGFTb3VyY2Uuc2xpZGVzPy5sZW5ndGggPz8gMCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2xpZGVJZHggPSBpZHggPz8gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NsaWRlSWR4ID0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fZGF0YVNvdXJjZS5zbGlkZXM/Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGF0YVNvdXJjZS5zbGlkZXMgPSBbSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLl9kZWZhdWx0U2xpZGUpKV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vY2xlYXIgVUlcclxuICAgICAgICBpY2R0X1N2Z1JlbmV3KCk7XHJcblxyXG4gICAgICAgIC8vc3luYyBzaXplXHJcbiAgICAgICAgaWYgKHRoaXMuc2xpZGU/LnN2Zz8udmlld0JveCkge1xyXG4gICAgICAgICAgICBpY2R0LnNjcmVlbi5mcmFtZVNpemUgPSB0aGlzLnNsaWRlLnN2Zy52aWV3Qm94O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICBpY2R0X1JlbmRlckNvbXBvbmVudCh0aGlzLnNsaWRlKTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLmNoYW5nZVNsaWRlKHRoaXMuc2xpZGVzLCB0aGlzLnNsaWRlSWR4LCB0aGlzLl9kYXRhU291cmNlLnNsaWRlcz8ubGVuZ3RoID8/IDAsIHRoaXMuc2xpZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFNsaWRlKCkge1xyXG4gICAgICAgIHRoaXMuX2RhdGFTb3VyY2Uuc2xpZGVzPy5wdXNoKHRoaXMuX2RlZmF1bHRTbGlkZSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3NsaWRlSWR4ID0gKHRoaXMuX2RhdGFTb3VyY2Uuc2xpZGVzPy5sZW5ndGggPz8gMCkgLSAxO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vdGhpcy5jaGFuZ2VTbGlkZSh0aGlzLnNsaWRlcywgdGhpcy5zbGlkZUlkeCwgdGhpcy5fZGF0YVNvdXJjZS5zbGlkZXMubGVuZ3RoLCB0aGlzLnNsaWRlKTtcclxuICAgICAgICB0aGlzLm9wZW5TbGlkZSh1bmRlZmluZWQsIHRoaXMuX3NsaWRlSWR4KTtcclxuICAgIH1cclxuXHJcbiAgICB0cnlSZXBsYWNlU2xpZGUoc2xpZGVJZDogbnVtYmVyLCBmbGFnOiAwIHwgMSwgZGF0YVNsaWRlPzogaWNkdF9JRGF0YVNsaWRlKSB7XHJcbiAgICAgICAgbGV0IHNsaWRlID0gdGhpcy5fZGF0YVNvdXJjZS5zbGlkZXM/LmZpbmQoZiA9PiBmLmlkID09IHNsaWRlSWQpO1xyXG4gICAgICAgIGlmICghZGF0YVNsaWRlIHx8ICFzbGlkZSB8fCBzbGlkZT8uc3ZnPy5ub2Rlcy5maWx0ZXIoZiA9PiAhZi5pc2RlbGV0ZWQpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbnNlcnRTbGlkZShzbGlkZUlkLCBmbGFnLCBkYXRhU2xpZGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGlkeCA9ICh0aGlzLl9kYXRhU291cmNlLnNsaWRlcz8uaW5kZXhPZihzbGlkZSkgPz8gMCk7XHJcbiAgICAgICAgdGhpcy5fZGF0YVNvdXJjZS5zbGlkZXM/LnNwbGljZShpZHgsIDEsIGRhdGFTbGlkZSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3NsaWRlSWR4ID0gaWR4O1xyXG4gICAgICAgIHRoaXMub3BlblNsaWRlKHVuZGVmaW5lZCwgdGhpcy5fc2xpZGVJZHgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGZsYWc9MDogY2hlbiB0cnVvYywgZmxhZz0xOiBjaGVuIHNhdVxyXG4gICAgaW5zZXJ0U2xpZGUoc2xpZGVJZDogbnVtYmVyLCBmbGFnOiAwIHwgMSwgZGF0YVNsaWRlPzogaWNkdF9JRGF0YVNsaWRlKSB7XHJcblxyXG4gICAgICAgIGxldCBzbGlkZSA9IHRoaXMuX2RhdGFTb3VyY2Uuc2xpZGVzPy5maW5kKGYgPT4gZi5pZCA9PSBzbGlkZUlkKSA/PyB0aGlzLl9kZWZhdWx0U2xpZGU7XHJcbiAgICAgICAgbGV0IGlkeCA9ICh0aGlzLl9kYXRhU291cmNlLnNsaWRlcz8uaW5kZXhPZihzbGlkZSkgPz8gMCkgKyBmbGFnO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIGlmICghZGF0YVNsaWRlKSB7XHJcbiAgICAgICAgICAgIGRhdGFTbGlkZSA9IHRoaXMuX2RlZmF1bHRTbGlkZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGRhdGFTbGlkZS5pZCA9IHRoaXMubmV3U2xpZGVJZDtcclxuICAgICAgICAgICAgZGF0YVNsaWRlLmNvZGUgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWRhdGFTbGlkZS5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhU2xpZGUubmFtZSA9IFwiVHJhbmcgbeG7m2lcIjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFkYXRhU2xpZGUuc3ZnPy52aWV3Qm94KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YVNsaWRlLnN2Zykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFTbGlkZS5zdmcudmlld0JveCA9IGljZHQuc2NyZWVuLmZyYW1lU2l6ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLl9kYXRhU291cmNlLnNsaWRlcz8uc3BsaWNlKGlkeCwgMCwgZGF0YVNsaWRlKTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLl9zbGlkZUlkeCA9IGlkeDtcclxuICAgICAgICB0aGlzLm9wZW5TbGlkZSh1bmRlZmluZWQsIHRoaXMuX3NsaWRlSWR4KTtcclxuICAgIH1cclxuXHJcbiAgICBjb3B5U2xpZGUoc2xpZGVJZDogbnVtYmVyKSB7XHJcblxyXG4gICAgICAgIGxldCBzbGlkZSA9IHRoaXMuX2RhdGFTb3VyY2Uuc2xpZGVzPy5maW5kKGYgPT4gZi5pZCA9PSBzbGlkZUlkKSA/PyB0aGlzLl9kZWZhdWx0U2xpZGU7XHJcbiAgICAgICAgbGV0IGlkeCA9ICh0aGlzLl9kYXRhU291cmNlLnNsaWRlcz8uaW5kZXhPZihzbGlkZSkgPz8gMCkgKyAxO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIGxldCBuZXdTbGlkZUNvcHkgPSBPYmplY3QuYXNzaWduKEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc2xpZGUpKSwgeyBpZDogdGhpcy5uZXdTbGlkZUlkLCBjb2RlOiB1bmRlZmluZWQsIG5hbWU6IGAke3NsaWRlLm5hbWV9ICsgKENvcHkpYCB9KTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLl9kYXRhU291cmNlLnNsaWRlcz8uc3BsaWNlKGlkeCwgMCwgbmV3U2xpZGVDb3B5KTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvL3RoaXMuX3NsaWRlSWR4ID0gaWR4O1xyXG4gICAgICAgIC8vdGhpcy5vcGVuU2xpZGUodW5kZWZpbmVkLCB0aGlzLl9zbGlkZUlkeCk7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VTbGlkZSh0aGlzLnNsaWRlcywgdGhpcy5zbGlkZUlkeCwgdGhpcy5fZGF0YVNvdXJjZS5zbGlkZXM/Lmxlbmd0aCA/PyAwLCB0aGlzLnNsaWRlKTtcclxuICAgIH1cclxuXHJcbiAgICBtb3ZlU2xpZGUoc2xpZGVJZDogbnVtYmVyLCBmbGFnOiAtMSB8IDEpIHtcclxuXHJcbiAgICAgICAgbGV0IHNsaWRlID0gdGhpcy5fZGF0YVNvdXJjZS5zbGlkZXM/LmZpbmQoZiA9PiBmLmlkID09IHNsaWRlSWQpID8/IHRoaXMuX2RlZmF1bHRTbGlkZTtcclxuICAgICAgICBsZXQgaWR4ID0gKHRoaXMuX2RhdGFTb3VyY2Uuc2xpZGVzPy5pbmRleE9mKHNsaWRlKSA/PyAwKTtcclxuXHJcbiAgICAgICAgdGhpcy5fZGF0YVNvdXJjZS5zbGlkZXM/LnNwbGljZShpZHggKyBmbGFnLCAwLCB0aGlzLl9kYXRhU291cmNlLnNsaWRlcz8uc3BsaWNlKGlkeCwgMSlbMF0pXHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlU2xpZGUoc2xpZGVJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IHNsaWRlID0gdGhpcy5fZGF0YVNvdXJjZS5zbGlkZXM/LmZpbmQoZiA9PiBmLmlkID09IHNsaWRlSWQpID8/IHRoaXMuX2RlZmF1bHRTbGlkZTtcclxuICAgICAgICBsZXQgaWR4ID0gKHRoaXMuX2RhdGFTb3VyY2Uuc2xpZGVzPy5pbmRleE9mKHNsaWRlKSA/PyAwKTtcclxuXHJcbiAgICAgICAgdGhpcy5fZGF0YVNvdXJjZS5zbGlkZXM/LnNwbGljZShpZHgsIDEpO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIGlmICh0aGlzLl9kYXRhU291cmNlLnNsaWRlcz8ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGlmIChpZHggPCB0aGlzLl9zbGlkZUlkeCkge1xyXG4gICAgICAgICAgICAgICAgLS10aGlzLl9zbGlkZUlkeDtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlU2xpZGUodGhpcy5zbGlkZXMsIHRoaXMuc2xpZGVJZHgsIHRoaXMuX2RhdGFTb3VyY2Uuc2xpZGVzPy5sZW5ndGggPz8gMCwgdGhpcy5zbGlkZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaWR4ID09IHRoaXMuX3NsaWRlSWR4KSB7XHJcbiAgICAgICAgICAgICAgICAtLXRoaXMuX3NsaWRlSWR4O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuU2xpZGUodW5kZWZpbmVkLCB0aGlzLl9zbGlkZUlkeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy94w7NhIGjhur90IGThu68gbGnhu4d1IHRow6wgxJHGsGEgduG7gSBnacOhIHRy4buLIGThu68gbGnhu4d1IG3huqt1XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkU2xpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlU2xpZGUxKHNsaWRlSWQ6IG51bWJlcikge1xyXG5cclxuICAgICAgICBsZXQgc2xpZGUgPSB0aGlzLl9kYXRhU291cmNlLnNsaWRlcz8uZmluZChmID0+IGYuaWQgPT0gc2xpZGVJZCkgPz8gdGhpcy5fZGVmYXVsdFNsaWRlO1xyXG4gICAgICAgIGxldCBpZHggPSAodGhpcy5fZGF0YVNvdXJjZS5zbGlkZXM/LmluZGV4T2Yoc2xpZGUpID8/IDApO1xyXG5cclxuICAgICAgICBzbGlkZS5pc2RlbGV0ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAvL2tvIGPDsm4gc2xpZGUgbsOgbyBjaMawYSB4w7NhIHRow6wgdOG7sSDEkeG7mW5nIHRow6ptIHNsaWRlIG3hu5tpXHJcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhU291cmNlLnNsaWRlcz8uZmlsdGVyKGYgPT4gIWYuaXNkZWxldGVkKT8ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkU2xpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBpc3RvZ2dsZSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICB3aGlsZSAoc2xpZGUuaXNkZWxldGVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXN0b2dnbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZHgrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkeC0tO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZGF0YVNvdXJjZS5zbGlkZXNbaWR4XSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzdG9nZ2xlID0gIWlzdG9nZ2xlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGUgPSB0aGlzLl9kYXRhU291cmNlLnNsaWRlc1tpZHhdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9wZW5TbGlkZShzbGlkZS5pZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2ZuQ2hhbmdlU2xpZGVzOiBBcnJheTxGdW5jdGlvbj4gPSBbXTtcclxuICAgIHNldCBvbkNoYW5nZVNsaWRlKGZuOiBGdW5jdGlvbikge1xyXG4gICAgICAgIHRoaXMuX2ZuQ2hhbmdlU2xpZGVzLnB1c2goZm4pO1xyXG4gICAgfVxyXG4gICAgY2hhbmdlU2xpZGUoc2xpZGVzOiBBcnJheTxpY2R0X0lEYXRhU2xpZGU+LCBpZHg6IG51bWJlciwgdG90YWw6IG51bWJlciwgc2xpZGU/OiBpY2R0X0lEYXRhU2xpZGUpIHtcclxuICAgICAgICAvL2NhbGxiYWNrXHJcbiAgICAgICAgdGhpcy5fZm5DaGFuZ2VTbGlkZXMuZm9yRWFjaChmID0+IGYoc2xpZGVzLCBpZHgsIHRvdGFsLCBzbGlkZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1OT0RFLS0tLS0tLS0tLVxyXG5cclxuICAgIHNldCBub2RlKGRhdGE6IGFueSkge1xyXG4gICAgICAgIGxldCBzbGlkZSA9IHRoaXMuX2RhdGFTb3VyY2Uuc2xpZGVzPy5maW5kKChpdGVtOiBhbnksIGlkeDogYW55KSA9PiB7IHJldHVybiBpZHggPT0gdGhpcy5fc2xpZGVJZHggfSk7XHJcblxyXG4gICAgICAgIGxldCBzdmcgPSBzbGlkZT8uc3ZnO1xyXG5cclxuICAgICAgICBpZiAoc3ZnPy5ub2Rlcykge1xyXG4gICAgICAgICAgICBzdmc/Lm5vZGVzLnB1c2goZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpY2R0Lmhpc3RvcnkucHVzaChbe1xyXG4gICAgICAgICAgICB0eXBlOiAnYWRkJyxcclxuICAgICAgICAgICAgZnJvbTogeyBpZDogZGF0YS5pZCB9IGFzIGljZHRfSURhdGFOb2RlLFxyXG4gICAgICAgICAgICB0bzogeyBpZDogZGF0YS5pZCB9IGFzIGljZHRfSURhdGFOb2RlLFxyXG4gICAgICAgIH1dKTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICBpY2R0X1JlbmRlckNvbXBvbmVudCh0aGlzLnNsaWRlLCB0aGlzLnNsaWRlPy5pZCk7XHJcbiAgICB9XHJcblxyXG4gICAgZmluZE5vZGUobm9kZUlkOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgc2xpZGUgPSB0aGlzLl9kYXRhU291cmNlLnNsaWRlcz8uZmluZCgoaXRlbTogaWNkdF9JRGF0YVNsaWRlLCBpZHg6IG51bWJlcikgPT4geyByZXR1cm4gaWR4ID09IHRoaXMuX3NsaWRlSWR4IH0pO1xyXG4gICAgICAgIGxldCBzdmcgPSBzbGlkZT8uc3ZnO1xyXG5cclxuICAgICAgICBsZXQgcmVjdXJzaXZlTm9kZXMgPSAobm9kZXM6IEFycmF5PGljZHRfSURhdGFOb2RlPiwgcGlkPzogbnVtYmVyKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBsZXQgbm9kZTogYW55ID0gbm9kZXM/LmZpbmQoZiA9PiBmLmlkID09IG5vZGVJZCk7XHJcbiAgICAgICAgICAgIGlmIChub2RlKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlLnBpZCA9IHBpZDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgaW5kZXggPSAwLCB0b3RhbCA9IG5vZGVzLmxlbmd0aCB8fCAwO1xyXG4gICAgICAgICAgICB3aGlsZSAoaW5kZXggPCB0b3RhbCAmJiAhbm9kZSkge1xyXG4gICAgICAgICAgICAgICAgbm9kZSA9IHJlY3Vyc2l2ZU5vZGVzKG5vZGVzW2luZGV4XS5ub2RlcyB8fCBbXSwgbm9kZXNbaW5kZXhdLmlkKTtcclxuICAgICAgICAgICAgICAgIGlmIChub2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBub2RlID0gcmVjdXJzaXZlTm9kZXMoc3ZnPy5ub2RlcyB8fCBbXSk7XHJcbiAgICAgICAgaWYgKG5vZGUpIHtcclxuICAgICAgICAgICAgbm9kZS5zdHlsZSA9IG5vZGUuc3R5bGUgPz8ge307XHJcbiAgICAgICAgICAgIG5vZGUuc291cmNlID0gbm9kZS5zb3VyY2UgPz8ge307XHJcbiAgICAgICAgICAgIG5vZGUuYW5pbWF0ZSA9IG5vZGUuYW5pbWF0ZSA/PyB7fTtcclxuICAgICAgICAgICAgbm9kZS5pbnRlcmFjdGl2ZSA9IG5vZGUuaW50ZXJhY3RpdmUgPz8ge307XHJcbiAgICAgICAgICAgIG5vZGUudmFyaWFibGUgPSBub2RlLnZhcmlhYmxlID8/IHt9O1xyXG5cclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnZmluZE5vZGUnLCBub2RlKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaWQ6IDAsXHJcbiAgICAgICAgICAgIHNpemU6IHsgeDogMCwgeTogMCwgd2lkdGg6IDAsIGhlaWdodDogMCB9LFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGU6IHt9LFxyXG4gICAgICAgICAgICBpc2Zha2U6IHRydWVcclxuICAgICAgICB9IGFzIGljZHRfSURhdGFOb2RlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE5vZGUobm9kZUlkOiBudW1iZXIgfCBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgc2xpZGUgPSB0aGlzLl9kYXRhU291cmNlLnNsaWRlcz8uZmluZCgoaXRlbTogaWNkdF9JRGF0YVNsaWRlLCBpZHg6IG51bWJlcikgPT4geyByZXR1cm4gaWR4ID09IHRoaXMuX3NsaWRlSWR4IH0pO1xyXG4gICAgICAgIGxldCBzdmcgPSBzbGlkZT8uc3ZnO1xyXG5cclxuICAgICAgICBsZXQgcmVjdXJzaXZlTm9kZXMgPSAobm9kZXM6IEFycmF5PGljZHRfSURhdGFOb2RlPikgPT4ge1xyXG4gICAgICAgICAgICBsZXQgbm9kZTogYW55ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGxldCBpbmRleCA9IDAsIHRvdGFsID0gbm9kZXMubGVuZ3RoIHx8IDA7XHJcbiAgICAgICAgICAgIHdoaWxlIChpbmRleCA8IHRvdGFsICYmICFub2RlKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlID0gcmVjdXJzaXZlTm9kZShub2Rlc1tpbmRleF0ubm9kZXMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBub2RlLnBpZCA9IG5vZGVzW2luZGV4XS5pZDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChub2RlKSB7XHJcbiAgICAgICAgICAgICAgICAobm9kZSBhcyBpY2R0X0lEYXRhTm9kZSkuc3R5bGUgPSAobm9kZSBhcyBpY2R0X0lEYXRhTm9kZSkuc3R5bGUgPz8ge307XHJcbiAgICAgICAgICAgICAgICAobm9kZSBhcyBpY2R0X0lEYXRhTm9kZSkuc291cmNlID0gKG5vZGUgYXMgaWNkdF9JRGF0YU5vZGUpLnNvdXJjZSA/PyB7fTtcclxuICAgICAgICAgICAgICAgIChub2RlIGFzIGljZHRfSURhdGFOb2RlKS5hbmltYXRlID0gKG5vZGUgYXMgaWNkdF9JRGF0YU5vZGUpLmFuaW1hdGUgPz8ge307XHJcbiAgICAgICAgICAgICAgICAobm9kZSBhcyBpY2R0X0lEYXRhTm9kZSkuaW50ZXJhY3RpdmUgPSAobm9kZSBhcyBpY2R0X0lEYXRhTm9kZSkuaW50ZXJhY3RpdmUgPz8ge307XHJcbiAgICAgICAgICAgICAgICAobm9kZSBhcyBpY2R0X0lEYXRhTm9kZSkudmFyaWFibGUgPSAobm9kZSBhcyBpY2R0X0lEYXRhTm9kZSkudmFyaWFibGUgPz8ge307XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2dldE5vZGUnLCBub2RlKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBub2RlIGFzIGljZHRfSURhdGFOb2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHJlY3Vyc2l2ZU5vZGUgPSAobm9kZXM/OiBBcnJheTxpY2R0X0lEYXRhTm9kZT4pID0+IHtcclxuICAgICAgICAgICAgbGV0IG5vZGUgPSBub2Rlcz8uZmluZChmID0+IGYuaWQgPT0gbm9kZUlkKSB8fCByZWN1cnNpdmVOb2Rlcyhub2Rlcz8uZmlsdGVyKGYgPT4gZi50eXBlID09IFZfU2hhcGVUeXBlLkdST1VQKSB8fCBbXSkgYXMgaWNkdF9JRGF0YU5vZGU7XHJcblxyXG4gICAgICAgICAgICBpZiAobm9kZSkge1xyXG4gICAgICAgICAgICAgICAgKG5vZGUgYXMgaWNkdF9JRGF0YU5vZGUpLnN0eWxlID0gKG5vZGUgYXMgaWNkdF9JRGF0YU5vZGUpLnN0eWxlID8/IHt9O1xyXG4gICAgICAgICAgICAgICAgKG5vZGUgYXMgaWNkdF9JRGF0YU5vZGUpLnNvdXJjZSA9IChub2RlIGFzIGljZHRfSURhdGFOb2RlKS5zb3VyY2UgPz8ge307XHJcbiAgICAgICAgICAgICAgICAobm9kZSBhcyBpY2R0X0lEYXRhTm9kZSkuYW5pbWF0ZSA9IChub2RlIGFzIGljZHRfSURhdGFOb2RlKS5hbmltYXRlID8/IHt9O1xyXG4gICAgICAgICAgICAgICAgKG5vZGUgYXMgaWNkdF9JRGF0YU5vZGUpLmludGVyYWN0aXZlID0gKG5vZGUgYXMgaWNkdF9JRGF0YU5vZGUpLmludGVyYWN0aXZlID8/IHt9O1xyXG4gICAgICAgICAgICAgICAgKG5vZGUgYXMgaWNkdF9JRGF0YU5vZGUpLnZhcmlhYmxlID0gKG5vZGUgYXMgaWNkdF9JRGF0YU5vZGUpLnZhcmlhYmxlID8/IHt9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdnZXROb2RlIHJlY3Vyc2l2ZU5vZGUnLCBub2RlKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlY3Vyc2l2ZU5vZGUoc3ZnPy5ub2RlcyB8fCBbXSkgfHwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgcGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiBudWxsLFxyXG4gICAgICAgICAgICBlbGVtZW50OiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcclxuICAgICAgICAgICAgc2l6ZTogeyB4OiAwLCB5OiAwLCB3aWR0aDogMCwgaGVpZ2h0OiAwLCBwb2ludHM6IFtdIH0sXHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZToge30sXHJcbiAgICAgICAgICAgIHN0eWxlOiB7fSxcclxuICAgICAgICAgICAgc291cmNlOiB7fSxcclxuICAgICAgICAgICAgYW5pbWF0ZToge30sXHJcbiAgICAgICAgICAgIGludGVyYWN0aXZlOiB7fSxcclxuICAgICAgICAgICAgdmFyaWFibGU6IHt9LFxyXG4gICAgICAgICAgICBpc2Zha2U6IHRydWUsXHJcbiAgICAgICAgICAgIGlzZGVsZXRlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIG5vZGVzOiBbXVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLy9s4bqleSBjw6FjIMSR4buRaSB0xrDhu6NuZyB0cm9uZyB2w7luZyBjaOG7jW5cclxuICAgIGdldE5vZGVJbkFyZWEoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlciwgdHlwZT86IG51bWJlcikge1xyXG5cclxuICAgICAgICBsZXQgc2xpZGUgPSB0aGlzLl9kYXRhU291cmNlLnNsaWRlcz8uZmluZCgoaXRlbTogaWNkdF9JRGF0YVNsaWRlLCBpZHg6IG51bWJlcikgPT4geyByZXR1cm4gaWR4ID09IHRoaXMuX3NsaWRlSWR4IH0pO1xyXG4gICAgICAgIGxldCBzdmcgPSBzbGlkZT8uc3ZnO1xyXG5cclxuICAgICAgICBsZXQgcmVjdXJzaXZlTm9kZXMgPSAobm9kZXM6IEFycmF5PGljZHRfSURhdGFOb2RlPikgPT4ge1xyXG4gICAgICAgICAgICBsZXQgaWRzID0gW10gYXMgQXJyYXk8bnVtYmVyPjtcclxuXHJcbiAgICAgICAgICAgIG5vZGVzXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGYgPT4gIWYuaXNkZWxldGVkKSAgLy9i4buPIHF1YSBub2RlIMSRw6MgeMOzYVxyXG4gICAgICAgICAgICAgICAgLmZvckVhY2gobm9kZSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLnR5cGUgPT0gVl9TaGFwZVR5cGUuR1JPVVApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWRzID0gaWRzLmNvbmNhdChyZWN1cnNpdmVOb2Rlcyhub2RlLm5vZGVzIHx8IFtdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeDEgPiBub2RlLnNpemUueCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTEgPiBub2RlLnNpemUueSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIgPCAobm9kZS5zaXplLnggKyBub2RlLnNpemUud2lkdGgpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MiA8IChub2RlLnNpemUueSArIG5vZGUuc2l6ZS5oZWlnaHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xvYWkgY8OhYyBub2RlIG7hurFtIG5nb8OgaSBraHUgduG7sWMgcXXDqXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS50eXBlID09IHR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHMucHVzaChub2RlLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkcy5wdXNoKG5vZGUuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGlkcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZWN1cnNpdmVOb2Rlcyhzdmc/Lm5vZGVzIHx8IFtdKTtcclxuICAgIH1cclxuXHJcbiAgICAvL2zhuqV5IGPDoWMgxJHhu5FpIHTGsOG7o25nIHRyw6puIHbDuW5nIGNo4buNblxyXG4gICAgZ2V0Tm9kZU9uQXJlYSh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyLCB0eXBlPzogbnVtYmVyKSB7XHJcblxyXG4gICAgICAgIGxldCBzbGlkZSA9IHRoaXMuX2RhdGFTb3VyY2Uuc2xpZGVzPy5maW5kKChpdGVtOiBpY2R0X0lEYXRhU2xpZGUsIGlkeDogbnVtYmVyKSA9PiB7IHJldHVybiBpZHggPT0gdGhpcy5fc2xpZGVJZHggfSk7XHJcbiAgICAgICAgbGV0IHN2ZyA9IHNsaWRlPy5zdmc7XHJcblxyXG4gICAgICAgIGxldCByZWN1cnNpdmVOb2RlcyA9IChub2RlczogQXJyYXk8aWNkdF9JRGF0YU5vZGU+KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBpZHMgPSBbXSBhcyBBcnJheTxudW1iZXI+O1xyXG5cclxuICAgICAgICAgICAgbm9kZXNcclxuICAgICAgICAgICAgICAgIC5maWx0ZXIoZiA9PiAhZi5pc2RlbGV0ZWQpICAvL2Lhu48gcXVhIG5vZGUgxJHDoyB4w7NhXHJcbiAgICAgICAgICAgICAgICAuZm9yRWFjaChub2RlID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PSBWX1NoYXBlVHlwZS5HUk9VUCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZHMgPSBpZHMuY29uY2F0KHJlY3Vyc2l2ZU5vZGVzKG5vZGUubm9kZXMgfHwgW10pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbm9kZSB4MiA8IHgxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLnNpemUueCArIG5vZGUuc2l6ZS53aWR0aCA8IHgxKSB7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ub2RlIHkyIDwgeTFcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobm9kZS5zaXplLnkgKyBub2RlLnNpemUuaGVpZ2h0IDwgeTEpIHsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25vZGUgeDEgPiB4MlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChub2RlLnNpemUueCA+IHgyKSB7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ub2RlIHgxID4geDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobm9kZS5zaXplLnkgPiB5MikgeyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vb2sgLT4gTmVzdHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PSB0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRzLnB1c2gobm9kZS5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHMucHVzaChub2RlLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBpZHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVjdXJzaXZlTm9kZXMoc3ZnPy5ub2RlcyB8fCBbXSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Tm9kZUFsbCA9ICgpID0+IHtcclxuICAgICAgICBsZXQgc2xpZGUgPSB0aGlzLl9kYXRhU291cmNlLnNsaWRlcz8uZmluZCgoaXRlbTogaWNkdF9JRGF0YVNsaWRlLCBpZHg6IG51bWJlcikgPT4geyByZXR1cm4gaWR4ID09IHRoaXMuX3NsaWRlSWR4IH0pO1xyXG4gICAgICAgIGxldCBzdmcgPSBzbGlkZT8uc3ZnO1xyXG5cclxuICAgICAgICBsZXQgcmVjdXJzaXZlTm9kZXMgPSAobm9kZXM6IEFycmF5PGljZHRfSURhdGFOb2RlPikgPT4ge1xyXG4gICAgICAgICAgICBsZXQgaWRzID0gW10gYXMgQXJyYXk8bnVtYmVyPjtcclxuXHJcbiAgICAgICAgICAgIG5vZGVzXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGYgPT4gIWYuaXNkZWxldGVkKSAgLy9i4buPIHF1YSBub2RlIMSRw6MgeMOzYVxyXG4gICAgICAgICAgICAgICAgLmZvckVhY2gobm9kZSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLnR5cGUgPT0gVl9TaGFwZVR5cGUuR1JPVVApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWRzID0gaWRzLmNvbmNhdChyZWN1cnNpdmVOb2Rlcyhub2RlLm5vZGVzIHx8IFtdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZHMucHVzaChub2RlLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gaWRzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlY3Vyc2l2ZU5vZGVzKHN2Zz8ubm9kZXMgfHwgW10pO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZU5vZGUoaWQ6IG51bWJlciwgaXNkZWxldGVkPzogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuZ2V0Tm9kZShpZCkuaXNkZWxldGVkID0gaXNkZWxldGVkID8/IHRydWU7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgaWNkdF9SZW5kZXJDb21wb25lbnQodGhpcy5zbGlkZSk7XHJcbiAgICAgICAgaWNkdF9SZW5kZXJDb21wb25lbnQodGhpcy5zbGlkZSwgdGhpcy5zbGlkZT8uaWQpO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIHJldHVybiBpZDtcclxuICAgIH1cclxuXHJcbiAgICB1bkdyb3VwKGlkOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgbm9kZSA9IHRoaXMuZ2V0Tm9kZShpZCk7XHJcblxyXG4gICAgICAgIGxldCBuZXdJZCA9IE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwMCk7XHJcblxyXG4gICAgICAgIC8vY2xvbmUgc2F1IGRvIHRoYXkgZG9pIGlkIHJvaSB0YW8gbW9pXHJcbiAgICAgICAgdGhpcy5zbGlkZT8uc3ZnPy5ub2Rlcy5wdXNoKE9iamVjdC5hc3NpZ24oSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShub2RlKSksIHsgaWQ6IG5ld0lkIH0pKVxyXG5cclxuICAgICAgICAvL2RhbmggZGF1IGRhIHhvYSBkb2kgdHVvbmcgY3VcclxuICAgICAgICBPYmplY3QuYXNzaWduKG5vZGUsIHsgaXNkZWxldGVkOiB0cnVlIH0pO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIGljZHRfUmVuZGVyQ29tcG9uZW50KHRoaXMuc2xpZGUpO1xyXG4gICAgICAgIGljZHRfUmVuZGVyQ29tcG9uZW50KHRoaXMuc2xpZGUsIHRoaXMuc2xpZGU/LmlkKTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICByZXR1cm4gbmV3SWQ7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkR3JvdXAoaWQ6IG51bWJlciB8IHN0cmluZywgcGlkOiBudW1iZXIgfCBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgbm9kZSA9IHRoaXMuZ2V0Tm9kZShpZCksXHJcbiAgICAgICAgICAgIG5vZGVQID0gdGhpcy5nZXROb2RlKHBpZCk7XHJcblxyXG4gICAgICAgIG5vZGVQLm5vZGVzID0gbm9kZVAubm9kZXMgfHwgW107XHJcblxyXG4gICAgICAgIGxldCBuZXdJZCA9IE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwMCk7XHJcblxyXG4gICAgICAgIC8vdGhlbSB2YW8gbmhvbVxyXG4gICAgICAgIC8vbm9kZVAubm9kZXMucHVzaChub2RlKTtcclxuXHJcbiAgICAgICAgLy9jbG9uZSBzYXUgZG8gdGhheSBkb2kgaWQgcm9pIHRoZW0gdmFvIG5ob21cclxuICAgICAgICBub2RlUC5ub2Rlcy5wdXNoKE9iamVjdC5hc3NpZ24oSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShub2RlKSksIHsgaWQ6IG5ld0lkIH0pKTtcclxuXHJcbiAgICAgICAgLy9kYW5oIGRhdSBkYSB4b2EgZG9pIHR1b25nIGN1XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihub2RlLCB7IGlzZGVsZXRlZDogdHJ1ZSB9KTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICBpY2R0X1JlbmRlckNvbXBvbmVudCh0aGlzLnNsaWRlKTtcclxuICAgICAgICBpY2R0X1JlbmRlckNvbXBvbmVudCh0aGlzLnNsaWRlLCB0aGlzLnNsaWRlPy5pZCk7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgcmV0dXJuIG5ld0lkO1xyXG4gICAgfVxyXG5cclxuICAgIHNldE5vZGVQKGlkOiBudW1iZXIsIHBpZDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IG5vZGUgPSB0aGlzLnNsaWRlPy5zdmc/Lm5vZGVzLmZpbmQoZiA9PiBmLmlkID09IGlkKTtcclxuICAgICAgICBpZiAobm9kZSkge1xyXG4gICAgICAgICAgICBub2RlLnBpZCA9IHBpZCB8fCBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBicmluZ1RvRnJvbnQoaWRzOiBBcnJheTxudW1iZXI+KSB7XHJcbiAgICAgICAgdGhpcy5icmluZ1RvRnJvbnRTdGVwKGlkcywgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VuZFRvQmFjayhpZHM6IEFycmF5PG51bWJlcj4pIHtcclxuICAgICAgICB0aGlzLnNlbmRUb0JhY2tTdGVwKGlkcywgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgYnJpbmdUb0Zyb250U3RlcChpZHM6IEFycmF5PG51bWJlcj4sIHN0ZXA6IG51bWJlcikge1xyXG4gICAgICAgIC8vZGFuaCBzbyB0aHUgdHVcclxuICAgICAgICB0aGlzLnNsaWRlPy5zdmc/Lm5vZGVzLmZvckVhY2goKG5vZGUsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIG5vZGUuaW5kZXggPSBpbmRleCArIDE7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vbGF5IHNvIHRodSB0dSBsb24gbmhhdFxyXG4gICAgICAgIGxldCBpbmRleE1heCA9ICh0aGlzLnNsaWRlPy5zdmc/Lm5vZGVzLmxlbmd0aCA/PyAwKSArIDE7XHJcblxyXG4gICAgICAgIC8vZGFuaCBsYWkgc28gdGh1IHR1IGNobyBjYWMgbm9kZSBkdW9jIGNob25cclxuICAgICAgICBpZHNcclxuICAgICAgICAgICAgLm1hcChpZCA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBpZCxcclxuICAgICAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5zbGlkZT8uc3ZnPy5ub2Rlcy5maW5kKGYgPT4gZi5pZCA9PSBpZCk/LmluZGV4ID8/IDBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLy9z4bqvcCB44bq/cCBpbmRleCB04burIGLDqSDEkeG6v24gYuG7sVxyXG4gICAgICAgICAgICAuc29ydCgoYSwgYikgPT4gYS5pbmRleCAtIGIuaW5kZXgpXHJcbiAgICAgICAgICAgIC5mb3JFYWNoKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzdGVwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zbGlkZT8uc3ZnPy5ub2Rlcy5maWx0ZXIoZiA9PiBmLmlkID09IGRhdGEuaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKG5vZGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5pbmRleCA9IGluZGV4TWF4ICsgZGF0YS5pbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNsaWRlPy5zdmc/Lm5vZGVzLmZpbHRlcigoZiwgaSkgPT4gZi5pZCA9PSBkYXRhLmlkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZm9yRWFjaChub2RlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuaW5kZXggPSBzdGVwICsgZGF0YS5pbmRleCArIGRhdGEuaW5kZXggLyAxMDAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhgJHtkYXRhLmluZGV4fS8ke25vZGUuaW5kZXh9ID0gJHtzdGVwfSArICR7ZGF0YS5pbmRleH0gKyAke2RhdGEuaW5kZXggLyAxMDAwfWApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy9z4bqvcCB44bq/cCBs4bqhaSBkYW5oIHPDoWNoIG5vZGVcclxuICAgICAgICB0aGlzLnNsaWRlPy5zdmc/Lm5vZGVzLnNvcnQoKGEsIGIpID0+IChhLmluZGV4ID8/IDApIC0gKGIuaW5kZXggPz8gMCkpO1xyXG5cclxuICAgICAgICAvL3Phuq9wIHjhur9wIGzhuqFpIFVJXHJcbiAgICAgICAgaWNkdF9Tb3J0Q29tcG9uZW50KHRoaXMuc2xpZGUpO1xyXG5cclxuICAgICAgICAvL8SRw6FuaCBs4bqhaSBzZWxlY3QsIHJlc2l6ZVxyXG4gICAgICAgIGlmIChpZHMubGVuZ3RoIDw9IDEpIHtcclxuICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFZfSUQuUkVTSVpFX0dST1VQKT8ucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIGljZHRfUmVzaXplKGljZHQuZGF0YVNlbGVjdC5ub2Rlc1swXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoVl9JRC5TRUxFQ1RfR1JPVVApPy5yZW1vdmUoKTtcclxuICAgICAgICAgICAgaWNkdF9TZWxlY3QoaWNkdC5kYXRhU2VsZWN0Lm5vZGVzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2VuZFRvQmFja1N0ZXAoaWRzOiBBcnJheTxudW1iZXI+LCBzdGVwOiBudW1iZXIpIHtcclxuICAgICAgICAvL2Rhbmggc28gdGh1IHR1XHJcbiAgICAgICAgdGhpcy5zbGlkZT8uc3ZnPy5ub2Rlcy5mb3JFYWNoKChub2RlLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBub2RlLmluZGV4ID0gaW5kZXggKyAxO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvL2RhbmggbGFpIHNvIHRodSB0dSBjaG8gY2FjIG5vZGUgZHVvYyBjaG9uXHJcbiAgICAgICAgaWRzXHJcbiAgICAgICAgICAgIC5tYXAoaWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuc2xpZGU/LnN2Zz8ubm9kZXMuZmluZChmID0+IGYuaWQgPT0gaWQpPy5pbmRleCA/PyAwXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC8vc+G6r3AgeOG6v3AgaW5kZXggdOG7qyBiw6kgxJHhur9uIGLhu7FcclxuICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IGEuaW5kZXggLSBiLmluZGV4KVxyXG4gICAgICAgICAgICAuZm9yRWFjaChkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghc3RlcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2xpZGU/LnN2Zz8ubm9kZXMuZmlsdGVyKGYgPT4gZi5pZCA9PSBkYXRhLmlkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZm9yRWFjaChub2RlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuaW5kZXggPSAtMSArIGRhdGEuaW5kZXggLyAxMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zbGlkZT8uc3ZnPy5ub2Rlcy5maWx0ZXIoZiA9PiBmLmlkID09IGRhdGEuaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKG5vZGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5pbmRleCA9IHN0ZXAgKyBkYXRhLmluZGV4ICsgZGF0YS5pbmRleCAvIDEwMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGAke2RhdGEuaW5kZXh9LyR7bm9kZS5pbmRleH0gPSAke3N0ZXB9ICsgJHtkYXRhLmluZGV4fSArICR7ZGF0YS5pbmRleCAvIDEwMDB9YClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvL3Phuq9wIHjhur9wIGzhuqFpIGRhbmggc8OhY2ggbm9kZVxyXG4gICAgICAgIHRoaXMuc2xpZGU/LnN2Zz8ubm9kZXMuc29ydCgoYSwgYikgPT4gKGEuaW5kZXggPz8gMCkgLSAoYi5pbmRleCA/PyAwKSk7XHJcblxyXG4gICAgICAgIC8vc+G6r3AgeOG6v3AgbOG6oWkgVUlcclxuICAgICAgICBpY2R0X1NvcnRDb21wb25lbnQodGhpcy5zbGlkZSk7XHJcblxyXG4gICAgICAgIC8vxJHDoW5oIGzhuqFpIHNlbGVjdCwgcmVzaXplXHJcbiAgICAgICAgaWYgKGlkcy5sZW5ndGggPD0gMSkge1xyXG4gICAgICAgICAgICAod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoVl9JRC5SRVNJWkVfR1JPVVApPy5yZW1vdmUoKTtcclxuICAgICAgICAgICAgaWNkdF9SZXNpemUoaWNkdC5kYXRhU2VsZWN0Lm5vZGVzWzBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICh3aW5kb3cgYXMgYW55KS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChWX0lELlNFTEVDVF9HUk9VUCk/LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICBpY2R0X1NlbGVjdChpY2R0LmRhdGFTZWxlY3Qubm9kZXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBicmluZ1RvRnJvbnRBcmVhKGlkczogQXJyYXk8bnVtYmVyPikge1xyXG4gICAgICAgIGxldCBub2RlcyA9IGlkcy5tYXAoaWQgPT4gaWNkdC5kYXRhLmdldE5vZGUoaWQpKS5maWx0ZXIoZiA9PiAhZi5pc2Zha2UpIGFzIEFycmF5PGljZHRfSURhdGFOb2RlPjtcclxuXHJcbiAgICAgICAgbGV0IHsgeDEsIHkxLCB4MiwgeTIgfSA9IGdldE1heFNpemVOb2Rlcyhub2Rlcyk7XHJcblxyXG4gICAgICAgIGxldCBub2RlT25BcmVhSWRzID0gdGhpcy5nZXROb2RlT25BcmVhKHgxLCB5MSwgeDIsIHkyKTtcclxuXHJcbiAgICAgICAgLy9kYW5oIHNvIHRodSB0dVxyXG4gICAgICAgIHRoaXMuc2xpZGU/LnN2Zz8ubm9kZXMuZm9yRWFjaCgobm9kZSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgbm9kZS5pbmRleCA9IGluZGV4ICsgMTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy9sYXkgZGFuaCBzYWNoIHNvIHRodSB0dVxyXG4gICAgICAgIGxldCBpZHhzID0gbm9kZU9uQXJlYUlkcy5tYXAobSA9PiB0aGlzLnNsaWRlPy5zdmc/Lm5vZGVzLmZpbmQoZiA9PiBmLmlkID09IG0pPy5pbmRleCA/PyAwKTtcclxuXHJcbiAgICAgICAgLy9sYXkgc28gdGh1IHR1IGxvbiBuaGF0XHJcbiAgICAgICAgbGV0IGlkeE1heCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIGlkeHMpO1xyXG5cclxuICAgICAgICAvL2RhbmggbGFpIHNvIHRodSB0dSBjaG8gY2FjIG5vZGUgZHVvYyBjaG9uXHJcbiAgICAgICAgaWRzLmZvckVhY2goKGlkLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2xpZGU/LnN2Zz8ubm9kZXMuZmlsdGVyKGYgPT4gZi5pZCA9PSBpZCkuZm9yRWFjaChub2RlID0+IHtcclxuICAgICAgICAgICAgICAgIG5vZGUuaW5kZXggPSBpZHhNYXggKyAoaSArIDEpIC8gMTAwO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy9z4bqvcCB44bq/cCBs4bqhaSBkYW5oIHPDoWNoIG5vZGVcclxuICAgICAgICB0aGlzLnNsaWRlPy5zdmc/Lm5vZGVzLnNvcnQoKGEsIGIpID0+IChhLmluZGV4ID8/IDApIC0gKGIuaW5kZXggPz8gMCkpO1xyXG5cclxuICAgICAgICAvL3Phuq9wIHjhur9wIGzhuqFpIFVJXHJcbiAgICAgICAgaWNkdF9Tb3J0Q29tcG9uZW50KHRoaXMuc2xpZGUpO1xyXG5cclxuICAgICAgICAvL8SRw6FuaCBs4bqhaSBzZWxlY3QsIHJlc2l6ZVxyXG4gICAgICAgIGlmIChpZHMubGVuZ3RoIDw9IDEpIHtcclxuICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFZfSUQuUkVTSVpFX0dST1VQKT8ucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIGljZHRfUmVzaXplKGljZHQuZGF0YVNlbGVjdC5ub2Rlc1swXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoVl9JRC5TRUxFQ1RfR1JPVVApPy5yZW1vdmUoKTtcclxuICAgICAgICAgICAgaWNkdF9TZWxlY3QoaWNkdC5kYXRhU2VsZWN0Lm5vZGVzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2VuZFRvQmFja0FyZWEoaWRzOiBBcnJheTxudW1iZXI+KSB7XHJcblxyXG4gICAgICAgIGxldCBub2RlcyA9IGlkcy5tYXAoaWQgPT4gaWNkdC5kYXRhLmdldE5vZGUoaWQpKS5maWx0ZXIoZiA9PiAhZi5pc2Zha2UpIGFzIEFycmF5PGljZHRfSURhdGFOb2RlPjtcclxuXHJcbiAgICAgICAgbGV0IHsgeDEsIHkxLCB4MiwgeTIgfSA9IGdldE1heFNpemVOb2Rlcyhub2Rlcyk7XHJcblxyXG4gICAgICAgIGxldCBub2RlT25BcmVhSWRzID0gdGhpcy5nZXROb2RlT25BcmVhKHgxLCB5MSwgeDIsIHkyKTtcclxuXHJcbiAgICAgICAgLy9kYW5oIHNvIHRodSB0dVxyXG4gICAgICAgIHRoaXMuc2xpZGU/LnN2Zz8ubm9kZXMuZm9yRWFjaCgobm9kZSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgbm9kZS5pbmRleCA9IGluZGV4ICsgMTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy9sYXkgZGFuaCBzYWNoIHNvIHRodSB0dVxyXG4gICAgICAgIGxldCBpZHhzID0gbm9kZU9uQXJlYUlkcy5tYXAobSA9PiB0aGlzLnNsaWRlPy5zdmc/Lm5vZGVzLmZpbmQoZiA9PiBmLmlkID09IG0pPy5pbmRleCA/PyAwKTtcclxuXHJcbiAgICAgICAgLy9sYXkgc28gdGh1IHR1IGxvbiBuaGF0XHJcbiAgICAgICAgbGV0IGlkeE1pbiA9IE1hdGgubWluLmFwcGx5KG51bGwsIGlkeHMpIC0gMTtcclxuXHJcbiAgICAgICAgLy9kYW5oIGxhaSBzbyB0aHUgdHUgY2hvIGNhYyBub2RlIGR1b2MgY2hvblxyXG4gICAgICAgIGlkcy5mb3JFYWNoKChpZCwgaSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNsaWRlPy5zdmc/Lm5vZGVzLmZpbHRlcihmID0+IGYuaWQgPT0gaWQpLmZvckVhY2gobm9kZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBub2RlLmluZGV4ID0gaWR4TWluICsgKGkgKyAxKSAvIDEwMDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vc+G6r3AgeOG6v3AgbOG6oWkgZGFuaCBzw6FjaCBub2RlXHJcbiAgICAgICAgdGhpcy5zbGlkZT8uc3ZnPy5ub2Rlcy5zb3J0KChhLCBiKSA9PiAoYS5pbmRleCA/PyAwKSAtIChiLmluZGV4ID8/IDApKTtcclxuXHJcbiAgICAgICAgLy9z4bqvcCB44bq/cCBs4bqhaSBVSVxyXG4gICAgICAgIGljZHRfU29ydENvbXBvbmVudCh0aGlzLnNsaWRlKTtcclxuXHJcbiAgICAgICAgLy/EkcOhbmggbOG6oWkgc2VsZWN0LCByZXNpemVcclxuICAgICAgICBpZiAoaWRzLmxlbmd0aCA8PSAxKSB7XHJcbiAgICAgICAgICAgICh3aW5kb3cgYXMgYW55KS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChWX0lELlJFU0laRV9HUk9VUCk/LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICBpY2R0X1Jlc2l6ZShpY2R0LmRhdGFTZWxlY3Qubm9kZXNbMF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFZfSUQuU0VMRUNUX0dST1VQKT8ucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIGljZHRfU2VsZWN0KGljZHQuZGF0YVNlbGVjdC5ub2Rlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBnZXRNYXhTaXplTm9kZXMgPSAobm9kZXM6IEFycmF5PGljZHRfSURhdGFOb2RlPikgPT4ge1xyXG4gICAgbGV0IHgxOiBudW1iZXIgPSA5OTk5OTksXHJcbiAgICAgICAgeTE6IG51bWJlciA9IDk5OTk5OSxcclxuICAgICAgICB4MjogbnVtYmVyID0gLTk5OTk5OSxcclxuICAgICAgICB5MjogbnVtYmVyID0gLTk5OTk5OTtcclxuXHJcbiAgICBub2Rlcy5mb3JFYWNoKG5vZGUgPT4ge1xyXG4gICAgICAgIHgxID0gTWF0aC5taW4oeDEsIG5vZGUuc2l6ZS54KTtcclxuICAgICAgICB5MSA9IE1hdGgubWluKHkxLCBub2RlLnNpemUueSk7XHJcbiAgICAgICAgeDIgPSBNYXRoLm1heCh4Miwgbm9kZS5zaXplLnggKyBub2RlLnNpemUud2lkdGgpO1xyXG4gICAgICAgIHkyID0gTWF0aC5tYXgoeTIsIG5vZGUuc2l6ZS55ICsgbm9kZS5zaXplLmhlaWdodCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4geyB4MSwgeTEsIHgyLCB5MiB9O1xyXG59IiwiaW1wb3J0IHsgSURhdGFIaXN0b3J5LCBJRGF0YUhpeGlrZSB9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2UvSURhdGFIaXN0b3J5XCI7XHJcbmltcG9ydCB7IGljZHQgfSBmcm9tIFwiLi4vLi4vcHJvdG90eXBlL2ljZHRcIjtcclxuaW1wb3J0IHsgaWNkdF9TaXplMkF0dHJpYnV0ZSB9IGZyb20gXCIuLi9oYW5kbGUvb2Zmc2V0XCI7XHJcbmltcG9ydCB7IGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUsIGljZHRfU3luY1N2Z05vZGVTb3VyY2UsIGljZHRfU3luY1N2Z05vZGVTdHlsZSB9IGZyb20gXCIuLi9zeW5jLWVsZW1lbnQvc3ZnLWVsZW1lbnRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBpY2R0X0hpc3Rvcnkge1xyXG5cclxuICAgIHByaXZhdGUgX2luZGV4ID0gLTE7XHJcbiAgICBwcml2YXRlIF9kYXRhU291cmNlID0gW10gYXMgQXJyYXk8SURhdGFIaXhpa2U+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuX2luZGV4ID0gLTE7XHJcbiAgICAgICAgdGhpcy5fZGF0YVNvdXJjZSA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBpbmRleCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRvdGFsKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhU291cmNlLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGF0YVNvdXJjZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVNvdXJjZTtcclxuICAgIH1cclxuXHJcbiAgICByZW5ldygpIHtcclxuICAgICAgICB0aGlzLl9pbmRleCA9IC0xO1xyXG4gICAgICAgIHRoaXMuX2RhdGFTb3VyY2UgPSBbXTtcclxuXHJcbiAgICAgICAgdGhpcy5jaGFuZ2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgcHVzaChkYXRhOiBBcnJheTxJRGF0YUhpc3Rvcnk+KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2luZGV4IDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9pbmRleCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2RhdGFTb3VyY2UubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fZGF0YVNvdXJjZVt0aGlzLl9pbmRleF0gPSB7IGRhdGE6IGRhdGEgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vaW5kZXgga28gcGjhuqNpIOG7nyDEkWnhu4NtIGN14buRaSB0aMOsIGPhuq90IMSRdcO0aSBy4buTaSDEkeG6qXlcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2luZGV4IDwgdGhpcy5fZGF0YVNvdXJjZS5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kYXRhU291cmNlLnNwbGljZSh0aGlzLl9pbmRleCArIDEsIHRoaXMuX2RhdGFTb3VyY2UubGVuZ3RoIC0gdGhpcy5faW5kZXggLSAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9pbmRleCsrO1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRhU291cmNlLnB1c2goeyBkYXRhOiBkYXRhIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLmNoYW5nZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB1bmRvKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9pbmRleCA8IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzLl9kYXRhU291cmNlW3RoaXMuX2luZGV4XTtcclxuXHJcbiAgICAgICAgLy9leGVjdXRlXHJcbiAgICAgICAgdGhpcy51bmRvRXhlY3V0ZShjdXJyZW50LmRhdGEpO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIHRoaXMuX2luZGV4LS07XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdGhpcy5jaGFuZ2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgcmVkbygpIHtcclxuICAgICAgICBpZiAodGhpcy5faW5kZXggPj0gdGhpcy5fZGF0YVNvdXJjZS5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdGhpcy5faW5kZXgrKztcclxuXHJcbiAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzLl9kYXRhU291cmNlW3RoaXMuX2luZGV4XTtcclxuXHJcbiAgICAgICAgLy9leGVjdXRlXHJcbiAgICAgICAgdGhpcy5yZWRvRXhlY3V0ZShjdXJyZW50LmRhdGEpO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIHRoaXMuY2hhbmdlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHVuZG9FeGVjdXRlID0gKGRhdGE6IEFycmF5PElEYXRhSGlzdG9yeT4pID0+IHtcclxuICAgICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGl0ZW06IElEYXRhSGlzdG9yeSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGl0ZW0udHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYWRkJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGljZHQuZGF0YS5kZWxldGVOb2RlKGl0ZW0uZnJvbS5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdlZGl0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGVsZXRlJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGljZHQuZGF0YS5kZWxldGVOb2RlKGl0ZW0uZnJvbS5pZCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnc2l6ZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeyBpZCwgdHlwZSwgc2l6ZSwgYXR0cmlidXRlIH0gPSBpY2R0LmRhdGEuZ2V0Tm9kZShpdGVtLmZyb20uaWQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2Phuq1wIG5o4bqtdCBnacOhIHRy4buLIHNpemVcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHNpemUsIGl0ZW0uZnJvbS5zaXplKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9nw6FuIGdpw6EgdHLhu4sgbeG7m2kgY2hvIGF0dHJpYnV0ZVxyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKHR5cGUsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2Phuq1wIG5o4bqtdCBVSVxyXG4gICAgICAgICAgICAgICAgICAgIGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUoKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSwgYXR0cmlidXRlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2F0dHJpYnV0ZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeyBpZCwgYXR0cmlidXRlIH0gPSBpY2R0LmRhdGEuZ2V0Tm9kZShpdGVtLmZyb20uaWQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2fDoW4gZ2nDoSB0cuG7iyBt4bubaSBjaG8gYXR0cmlidXRlXHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIGl0ZW0uZnJvbS5hdHRyaWJ1dGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2Phuq1wIG5o4bqtdCBVSVxyXG4gICAgICAgICAgICAgICAgICAgIGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUoKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSwgYXR0cmlidXRlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ3N0eWxlJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB7IGlkLCBzdHlsZSB9ID0gaWNkdC5kYXRhLmdldE5vZGUoaXRlbS5mcm9tLmlkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9nw6FuIGdpw6EgdHLhu4sgbeG7m2kgY2hvIHN0eWxlXHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzdHlsZSA/PyB7fSwgaXRlbS5mcm9tLnN0eWxlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9j4bqtcCBuaOG6rXQgVUlcclxuICAgICAgICAgICAgICAgICAgICBpY2R0X1N5bmNTdmdOb2RlU3R5bGUoKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSwgc3R5bGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnc291cmNlJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB7IGlkLCB0eXBlLCBzb3VyY2UgfSA9IGljZHQuZGF0YS5nZXROb2RlKGl0ZW0uZnJvbS5pZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vZ8OhbiBnacOhIHRy4buLIG3hu5tpIGNobyBzb3VyY2VcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHNvdXJjZSA/PyB7fSwgaXRlbS5mcm9tLnNvdXJjZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vY+G6rXAgbmjhuq10IFVJXHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdF9TeW5jU3ZnTm9kZVNvdXJjZSgod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLCB0eXBlLCBzb3VyY2UgPz8ge30pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnYW5pbWF0ZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeyBhbmltYXRlIH0gPSBpY2R0LmRhdGEuZ2V0Tm9kZShpdGVtLmZyb20uaWQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2fDoW4gZ2nDoSB0cuG7iyBt4bubaSBjaG8gYW5pbWF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYW5pbWF0ZSA/PyB7fSwgaXRlbS5mcm9tLmFuaW1hdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnaW50ZXJhY3RpdmUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHsgaW50ZXJhY3RpdmUgfSA9IGljZHQuZGF0YS5nZXROb2RlKGl0ZW0uZnJvbS5pZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vZ8OhbiBnacOhIHRy4buLIG3hu5tpIGNobyBpbnRlcmFjdGl2ZVxyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaW50ZXJhY3RpdmUgPz8ge30sIGl0ZW0uZnJvbS5pbnRlcmFjdGl2ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICd2YXJpYWJsZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeyB2YXJpYWJsZSB9ID0gaWNkdC5kYXRhLmdldE5vZGUoaXRlbS5mcm9tLmlkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9nw6FuIGdpw6EgdHLhu4sgbeG7m2kgY2hvIHZhcmlhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih2YXJpYWJsZSA/PyB7fSwgaXRlbS5mcm9tLnZhcmlhYmxlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIGljZHQuZGF0YVNlbGVjdC5pZHMgPSBbXTtcclxuICAgIH07XHJcblxyXG4gICAgcmVkb0V4ZWN1dGUgPSAoZGF0YTogQXJyYXk8SURhdGFIaXN0b3J5PikgPT4ge1xyXG4gICAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbiAoaXRlbTogSURhdGFIaXN0b3J5KSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoaXRlbS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhZGQnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdC5kYXRhLmRlbGV0ZU5vZGUoaXRlbS50by5pZCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnZWRpdCc6IHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICBpY2R0LmRhdGEuZGVsZXRlTm9kZShpdGVtLnRvLmlkLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ3NpemUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHsgaWQsIHR5cGUsIHNpemUsIGF0dHJpYnV0ZSB9ID0gaWNkdC5kYXRhLmdldE5vZGUoaXRlbS50by5pZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vY+G6rXAgbmjhuq10IGdpw6EgdHLhu4sgc2l6ZVxyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc2l6ZSwgaXRlbS50by5zaXplKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9nw6FuIGdpw6EgdHLhu4sgbeG7m2kgY2hvIGF0dHJpYnV0ZVxyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKHR5cGUsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2Phuq1wIG5o4bqtdCBVSVxyXG4gICAgICAgICAgICAgICAgICAgIGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUoKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSwgYXR0cmlidXRlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2F0dHJpYnV0ZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeyBpZCwgYXR0cmlidXRlIH0gPSBpY2R0LmRhdGEuZ2V0Tm9kZShpdGVtLnRvLmlkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9nw6FuIGdpw6EgdHLhu4sgbeG7m2kgY2hvIGF0dHJpYnV0ZVxyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpdGVtLnRvLmF0dHJpYnV0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vY+G6rXAgbmjhuq10IFVJXHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdF9TeW5jU3ZnTm9kZUF0dHJpYnV0ZSgod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLCBhdHRyaWJ1dGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnc3R5bGUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHsgaWQsIHN0eWxlIH0gPSBpY2R0LmRhdGEuZ2V0Tm9kZShpdGVtLnRvLmlkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9nw6FuIGdpw6EgdHLhu4sgbeG7m2kgY2hvIHN0eWxlXHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzdHlsZSA/PyB7fSwgaXRlbS50by5zdHlsZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vY+G6rXAgbmjhuq10IFVJXHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdF9TeW5jU3ZnTm9kZVN0eWxlKCh3aW5kb3cgYXMgYW55KS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCksIHN0eWxlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ3NvdXJjZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeyBpZCwgdHlwZSwgc291cmNlIH0gPSBpY2R0LmRhdGEuZ2V0Tm9kZShpdGVtLnRvLmlkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9nw6FuIGdpw6EgdHLhu4sgbeG7m2kgY2hvIHNvdXJjZVxyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc291cmNlID8/IHt9LCBpdGVtLnRvLnNvdXJjZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vY+G6rXAgbmjhuq10IFVJXHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdF9TeW5jU3ZnTm9kZVNvdXJjZSgod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLCB0eXBlLCBzb3VyY2UgPz8ge30pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnYW5pbWF0ZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeyBhbmltYXRlIH0gPSBpY2R0LmRhdGEuZ2V0Tm9kZShpdGVtLnRvLmlkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9nw6FuIGdpw6EgdHLhu4sgbeG7m2kgY2hvIGFuaW1hdGVcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGFuaW1hdGUgPz8ge30sIGl0ZW0udG8uYW5pbWF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdpbnRlcmFjdGl2ZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeyBpbnRlcmFjdGl2ZSB9ID0gaWNkdC5kYXRhLmdldE5vZGUoaXRlbS50by5pZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vZ8OhbiBnacOhIHRy4buLIG3hu5tpIGNobyBpbnRlcmFjdGl2ZVxyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaW50ZXJhY3RpdmUgPz8ge30sIGl0ZW0udG8uaW50ZXJhY3RpdmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAndmFyaWFibGUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHsgdmFyaWFibGUgfSA9IGljZHQuZGF0YS5nZXROb2RlKGl0ZW0udG8uaWQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2fDoW4gZ2nDoSB0cuG7iyBt4bubaSBjaG8gdmFyaWFibGVcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHZhcmlhYmxlID8/IHt9LCBpdGVtLnRvLnZhcmlhYmxlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIGljZHQuZGF0YVNlbGVjdC5pZHMgPSBbXTtcclxuICAgIH07XHJcblxyXG4gICAgcHJpdmF0ZSBfZm5DaGFuZ2VzOiBBcnJheTxGdW5jdGlvbj4gPSBbXTtcclxuICAgIHNldCBvbmNoYW5nZShmbjogRnVuY3Rpb24pIHtcclxuICAgICAgICB0aGlzLl9mbkNoYW5nZXMucHVzaChmbik7XHJcbiAgICB9XHJcbiAgICBjaGFuZ2UoKSB7XHJcbiAgICAgICAgLy9jYWxsYmFja1xyXG4gICAgICAgIHRoaXMuX2ZuQ2hhbmdlcy5mb3JFYWNoKGYgPT4gZih0aGlzLmluZGV4LCB0aGlzLnRvdGFsKSk7XHJcbiAgICB9O1xyXG59IiwiaW1wb3J0IHsgaWNkdF9Sb3VuZE51bWJlciB9IGZyb20gXCIuLi9oYW5kbGUvcm91bmQtbnVtYmVyXCI7XHJcbmltcG9ydCB7IGljZHRfU3luY1N2Z1N0eWxlIH0gZnJvbSBcIi4uL3N5bmMtZWxlbWVudC9zdmctZWxlbWVudFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIGljZHRfU2NyZWVuX01vS2FtIHtcclxuXHJcbiAgICBwcml2YXRlIF94OiBudW1iZXIgPSAwO1xyXG4gICAgcHJpdmF0ZSBfeTogbnVtYmVyID0gMDtcclxuICAgIHByaXZhdGUgX3dpZHRoOiBudW1iZXIgPSAwO1xyXG4gICAgcHJpdmF0ZSBfaGVpZ2h0OiBudW1iZXIgPSAwO1xyXG5cclxuICAgIHByaXZhdGUgX3NjYWxlOiBudW1iZXIgPSAxO1xyXG4gICAgcHJpdmF0ZSBfZGlzbG9jYXRpb246IHsgeDogbnVtYmVyLCB5OiBudW1iZXIgfSA9IHsgeDogMCwgeTogMCB9O1xyXG4gICAgcHJpdmF0ZSBfb2Zmc2V0OiB7IHg6IG51bWJlciwgeTogbnVtYmVyIH0gPSB7IHg6IDAsIHk6IDAgfTtcclxuXHJcbiAgICBwcml2YXRlIF9zdmdTaXplOiB7IHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciB9ID0geyB4OiAwLCB5OiAwLCB3aWR0aDogMCwgaGVpZ2h0OiAwIH07XHJcbiAgICBwcml2YXRlIF9zdmdWaWV3Qm94OiB7IHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciB9ID0geyB4OiAwLCB5OiAwLCB3aWR0aDogMCwgaGVpZ2h0OiAwIH07XHJcbiAgICBwcml2YXRlIF9mcmFtZVNpemU6IHsgeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyIH0gPSB7IHg6IDAsIHk6IDAsIHdpZHRoOiAxMjgwLCBoZWlnaHQ6IDcyMCB9O1xyXG5cclxuICAgIHByaXZhdGUgX2FjdGl2ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICAgIGdldCBhY3RpdmVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVkO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBhY3RpdmVkKGRhdGE6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9hY3RpdmVkID0gZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZ2V0KCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHg6IHRoaXMuX2ZyYW1lU2l6ZS54LFxyXG4gICAgICAgICAgICB5OiB0aGlzLl9mcmFtZVNpemUueSxcclxuICAgICAgICAgICAgdzogdGhpcy5fZnJhbWVTaXplLndpZHRoLFxyXG4gICAgICAgICAgICBoOiB0aGlzLl9mcmFtZVNpemUuaGVpZ2h0LFxyXG4gICAgICAgICAgICB3aWR0aDogdGhpcy5fZnJhbWVTaXplLndpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuX2ZyYW1lU2l6ZS5oZWlnaHRcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBzZXQoZDogeyB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciB9KSB7XHJcblxyXG4gICAgICAgIHRoaXMuX2ZyYW1lU2l6ZS53aWR0aCA9IGQ/LndpZHRoID8/IDEwODA7XHJcbiAgICAgICAgdGhpcy5fZnJhbWVTaXplLmhlaWdodCA9IGQ/LmhlaWdodCA/PyAxMDgwO1xyXG5cclxuICAgICAgICAvL2ZpeCByYXRpb1xyXG4gICAgICAgIHRoaXMuem9vbVRvID0gJ2ZpdCc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHdpZHRoKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl93aWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaGVpZ2h0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNjYWxlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zY2FsZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGlzbG9jYXRpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc2xvY2F0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBvZmZzZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29mZnNldDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc3ZnU2l6ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3ZnU2l6ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc3ZnVmlld0JveCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3ZnVmlld0JveDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgc3ZnVmlld0JveCh2aWV3Qm94OiB7IHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciB9KSB7XHJcbiAgICAgICAgdGhpcy5fc3ZnVmlld0JveCA9IHZpZXdCb3g7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGZyYW1lU2l6ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZnJhbWVTaXplO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBmcmFtZVNpemUoZDogeyB4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgfSkge1xyXG4gICAgICAgIHRoaXMuX2ZyYW1lU2l6ZS54ID0gZC54O1xyXG4gICAgICAgIHRoaXMuX2ZyYW1lU2l6ZS55ID0gZC55O1xyXG4gICAgICAgIHRoaXMuX2ZyYW1lU2l6ZS53aWR0aCA9IGQud2lkdGg7XHJcbiAgICAgICAgdGhpcy5fZnJhbWVTaXplLmhlaWdodCA9IGQuaGVpZ2h0O1xyXG5cclxuICAgICAgICB0aGlzLnJlc2V0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHNjcmVlbihvcHRpb246IHsgb2Zmc2V0OiB7IHg6IG51bWJlciwgeTogbnVtYmVyLCB9LCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciB9KSB7XHJcblxyXG4gICAgICAgIC8vduG7iyB0csOtIHZpZXcgc28gduG7m2kgZ8OzYyBtw6BuIGjDrG5oXHJcbiAgICAgICAgdGhpcy5fb2Zmc2V0ID0gb3B0aW9uLm9mZnNldDtcclxuXHJcbiAgICAgICAgLy9rw61jaCB0aMaw4bubYyB2aWV3XHJcbiAgICAgICAgdGhpcy5fd2lkdGggPSBvcHRpb24ud2lkdGg7XHJcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gb3B0aW9uLmhlaWdodDtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLnJlc2V0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzZXQoKSB7XHJcbiAgICAgICAgdGhpcy5zY2FsZVRvKHRoaXMuX3NjYWxlLCB1bmRlZmluZWQsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHNjYWxlVG8oc2NhbGU6IG51bWJlciwgcG9pbnRlclNjYWxlPzogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9LCByZXNldExvY2F0aW9uPzogYm9vbGVhbikge1xyXG5cclxuICAgICAgICBpZiAoc2NhbGUgPCAwLjAxIHx8IHNjYWxlID4gMTAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHBvaW50ZXJTY2FsZSA9IHBvaW50ZXJTY2FsZSA/PyB7IHg6IHRoaXMuX3dpZHRoIC8gMiwgeTogdGhpcy5faGVpZ2h0IC8gMiB9O1xyXG5cclxuICAgICAgICBpZiAocmVzZXRMb2NhdGlvbikge1xyXG4gICAgICAgICAgICAvL2RpcyBt4bq3YyDEkeG7i25oXHJcbiAgICAgICAgICAgIHRoaXMuX2Rpc2xvY2F0aW9uLnggPSB0aGlzLl93aWR0aCAvIHNjYWxlIC8gMiAtIHBvaW50ZXJTY2FsZS54O1xyXG4gICAgICAgICAgICB0aGlzLl9kaXNsb2NhdGlvbi55ID0gdGhpcy5faGVpZ2h0IC8gc2NhbGUgLyAyIC0gcG9pbnRlclNjYWxlLnk7XHJcblxyXG4gICAgICAgICAgICAvL2RpcyBjb250ZW50XHJcbiAgICAgICAgICAgIHRoaXMuX2Rpc2xvY2F0aW9uLnggKz0gKHRoaXMuX3dpZHRoIC0gdGhpcy5fZnJhbWVTaXplLndpZHRoKSAvIDI7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rpc2xvY2F0aW9uLnkgKz0gKHRoaXMuX2hlaWdodCAtIHRoaXMuX2ZyYW1lU2l6ZS5oZWlnaHQpIC8gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vdOG7iSBs4buHIHbhu4sgdHLDrSBjb24gdHLhu48gdHLDqm4gbcOgbiBow6xuaFxyXG4gICAgICAgICAgICB2YXIgcG9pbnRlclJhdGlvID0ge1xyXG4gICAgICAgICAgICAgICAgeDogTWF0aC5tYXgoMCwgTWF0aC5taW4oaWNkdF9Sb3VuZE51bWJlcihwb2ludGVyU2NhbGUueCAvIHRoaXMuX3dpZHRoLCAxMDAwKSwgMSkpLFxyXG4gICAgICAgICAgICAgICAgeTogTWF0aC5tYXgoMCwgTWF0aC5taW4oaWNkdF9Sb3VuZE51bWJlcihwb2ludGVyU2NhbGUueSAvIHRoaXMuX2hlaWdodCwgMTAwMCksIDEpKVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9rw61jaCB0aMaw4bubYyDEkcOjIGLhu4sgdGhheSDEkeG7lWlcclxuICAgICAgICAgICAgdmFyIHNpemVDaGFuZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiAodGhpcy5fd2lkdGggLyBzY2FsZSAtIHRoaXMuX3dpZHRoIC8gdGhpcy5fc2NhbGUpICogcG9pbnRlclJhdGlvLngsXHJcbiAgICAgICAgICAgICAgICB5OiAodGhpcy5faGVpZ2h0IC8gc2NhbGUgLSB0aGlzLl9oZWlnaHQgLyB0aGlzLl9zY2FsZSkgKiBwb2ludGVyUmF0aW8ueSxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vdXBkYXRlXHJcbiAgICAgICAgICAgIHRoaXMuX2Rpc2xvY2F0aW9uLnggKz0gc2l6ZUNoYW5nZS54O1xyXG4gICAgICAgICAgICB0aGlzLl9kaXNsb2NhdGlvbi55ICs9IHNpemVDaGFuZ2UueTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3NjYWxlID0gc2NhbGU7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdGhpcy5jaGFuZ2UoKTtcclxuICAgICAgICB0aGlzLnpvb21DaGFuZ2UodGhpcy5zY2FsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHpvb21Ubyh0eXBlOiBudW1iZXIgfCAnZml0Jykge1xyXG4gICAgICAgIGlmICh0eXBlID09ICdmaXQnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NhbGVUbyhNYXRoLm1pbigodGhpcy5fd2lkdGggLSA4MCkgLyB0aGlzLl9mcmFtZVNpemUud2lkdGgsICh0aGlzLl9oZWlnaHQgLSA4MCkgLyB0aGlzLl9mcmFtZVNpemUuaGVpZ2h0KSwgdW5kZWZpbmVkLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHR5cGUgPT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZVRvKHR5cGUgLyAxMDAsIHVuZGVmaW5lZCwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGluaXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3ZnVmlld0JveDogdGhpcy5zdmdWaWV3Qm94LFxyXG4gICAgICAgICAgICBzdmdTaXplOiB0aGlzLnN2Z1NpemVcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbW92ZShmcm9tOiB7IHg6IG51bWJlciwgeTogbnVtYmVyIH0sIHBvczogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9KSB7XHJcbiAgICAgICAgLy9kaXNcclxuICAgICAgICB0aGlzLl9kaXNsb2NhdGlvbi54ID0gZnJvbS54ICsgcG9zLnggLyB0aGlzLl9zY2FsZTtcclxuICAgICAgICB0aGlzLl9kaXNsb2NhdGlvbi55ID0gZnJvbS55ICsgcG9zLnkgLyB0aGlzLl9zY2FsZTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLl9zdmdWaWV3Qm94LnggPSAtdGhpcy5fZGlzbG9jYXRpb24ueDtcclxuICAgICAgICB0aGlzLl9zdmdWaWV3Qm94LnkgPSAtdGhpcy5fZGlzbG9jYXRpb24ueTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLnJlZlNjcmVlbigpO1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZSgpIHtcclxuXHJcbiAgICAgICAgLy9yZW5ldyBzdmdTaXplXHJcbiAgICAgICAgdGhpcy5fc3ZnU2l6ZS54ID0gdGhpcy5feDtcclxuICAgICAgICB0aGlzLl9zdmdTaXplLnkgPSB0aGlzLl95O1xyXG4gICAgICAgIHRoaXMuX3N2Z1NpemUud2lkdGggPSB0aGlzLl93aWR0aDtcclxuICAgICAgICB0aGlzLl9zdmdTaXplLmhlaWdodCA9IHRoaXMuX2hlaWdodDtcclxuXHJcbiAgICAgICAgLy9yZW5ldyBzdmdWaWV3Qm94XHJcbiAgICAgICAgdGhpcy5fc3ZnVmlld0JveC54ID0gLXRoaXMuX2Rpc2xvY2F0aW9uLng7XHJcbiAgICAgICAgdGhpcy5fc3ZnVmlld0JveC55ID0gLXRoaXMuX2Rpc2xvY2F0aW9uLnk7XHJcbiAgICAgICAgdGhpcy5fc3ZnVmlld0JveC53aWR0aCA9IHRoaXMuX3dpZHRoIC8gdGhpcy5fc2NhbGU7XHJcbiAgICAgICAgdGhpcy5fc3ZnVmlld0JveC5oZWlnaHQgPSB0aGlzLl9oZWlnaHQgLyB0aGlzLl9zY2FsZTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLnJlZlNjcmVlbigpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlZlNjcmVlbigpIHtcclxuXHJcbiAgICAgICAgaWNkdF9TeW5jU3ZnU3R5bGUoKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZm5ab29tQ2hhbmdlczogQXJyYXk8RnVuY3Rpb24+ID0gW107XHJcbiAgICBzZXQgb25ab29tQ2hhbmdlKGZuOiBGdW5jdGlvbikge1xyXG4gICAgICAgIHRoaXMuX2ZuWm9vbUNoYW5nZXMucHVzaChmbik7XHJcbiAgICB9XHJcbiAgICB6b29tQ2hhbmdlKHNjYWxlOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9mblpvb21DaGFuZ2VzLmZvckVhY2goZiA9PiBmKHNjYWxlKSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgdHlwZVN0cm9rZUxpbmVjYXAsIHR5cGVTdHJva2VMaW5lam9pbiB9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuaW1wb3J0IHsgTG9jYWxTdG9yYWdlX0dldENvbmZpZywgTG9jYWxTdG9yYWdlX1NldENvbmZpZyB9IGZyb20gXCIuLi8uLi9saWIvbG9jYWwtc3RvcmFnZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIGljZHRfU3ZnTm9kZUF0dHJpYnV0ZV9UcnVtQ3VvaVhhSG9pIHtcclxuXHJcbiAgICBwcml2YXRlIF9maWxsOiBzdHJpbmcgPSAnI0Q5RDlEOSc7XHJcbiAgICBwcml2YXRlIF9zdHJva2U6IHN0cmluZyA9IFwiI0FBQUFBQVwiO1xyXG4gICAgcHJpdmF0ZSBfc3Ryb2tlV2lkdGg6IG51bWJlciA9IDE7XHJcbiAgICBwcml2YXRlIF9zdHJva2VMaW5lY2FwOiB0eXBlU3Ryb2tlTGluZWNhcCA9ICdyb3VuZCc7XHJcbiAgICBwcml2YXRlIF9zdHJva2VMaW5lam9pbjogdHlwZVN0cm9rZUxpbmVqb2luID0gJ3JvdW5kJztcclxuXHJcbiAgICBwcml2YXRlIF9mb250RmFtaWx5Pzogc3RyaW5nID0gdW5kZWZpbmVkO1xyXG4gICAgcHJpdmF0ZSBfZm9udFNpemU/OiBudW1iZXIgPSAyMDtcclxuICAgIHByaXZhdGUgX3RleHRMZW5ndGg/OiBudW1iZXIgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5sb2FkQ29uZmlnKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBsb2FkQ29uZmlnKCkge1xyXG4gICAgICAgIExvY2FsU3RvcmFnZV9HZXRDb25maWcoe1xyXG4gICAgICAgICAgICBjYWxsYmFjazogKHJlczogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9maWxsID0gcmVzPy5maWxsIHx8IHRoaXMuX2ZpbGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdHJva2UgPSByZXM/LnN0cm9rZSB8fCB0aGlzLl9zdHJva2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdHJva2VXaWR0aCA9IHJlcz8uc3Ryb2tlV2lkdGggfHwgdGhpcy5fc3Ryb2tlV2lkdGg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdHJva2VMaW5lY2FwID0gcmVzPy5zdHJva2VMaW5lY2FwIHx8IHRoaXMuX3N0cm9rZUxpbmVjYXA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdHJva2VMaW5lam9pbiA9IHJlcz8uc3Ryb2tlTGluZWpvaW4gfHwgdGhpcy5fc3Ryb2tlTGluZWpvaW47XHJcblxyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlRmlsbCh0aGlzLmZpbGwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VTdHJva2UodGhpcy5zdHJva2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VTdHJva2VXaWR0aCh0aGlzLnN0cm9rZVdpZHRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2F2ZUNvbmZpZygpIHtcclxuICAgICAgICBMb2NhbFN0b3JhZ2VfU2V0Q29uZmlnKHtcclxuICAgICAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICBmaWxsOiB0aGlzLl9maWxsLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiB0aGlzLl9zdHJva2UsXHJcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogdGhpcy5fc3Ryb2tlV2lkdGgsXHJcbiAgICAgICAgICAgICAgICBzdHJva2VMaW5lY2FwOiB0aGlzLl9zdHJva2VMaW5lY2FwLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlTGluZWpvaW46IHRoaXMuX3N0cm9rZUxpbmVqb2luLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbGw7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGZpbGwoZGF0YTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fZmlsbCA9IGRhdGE7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdGhpcy5jaGFuZ2VGaWxsKHRoaXMuZmlsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHN0cm9rZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3Ryb2tlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBzdHJva2UoZGF0YTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fc3Ryb2tlID0gZGF0YTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLmNoYW5nZVN0cm9rZSh0aGlzLnN0cm9rZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHN0cm9rZVdpZHRoKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdHJva2VXaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgc3Ryb2tlV2lkdGgoZGF0YTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fc3Ryb2tlV2lkdGggPSBkYXRhO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIHRoaXMuY2hhbmdlU3Ryb2tlV2lkdGgodGhpcy5zdHJva2VXaWR0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHN0cm9rZUxpbmVjYXAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0cm9rZUxpbmVjYXA7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHN0cm9rZUxpbmVjYXAoZGF0YTogdHlwZVN0cm9rZUxpbmVjYXApIHtcclxuICAgICAgICB0aGlzLl9zdHJva2VMaW5lY2FwID0gZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc3Ryb2tlTGluZWpvaW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0cm9rZUxpbmVqb2luO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBzdHJva2VMaW5lam9pbihkYXRhOiB0eXBlU3Ryb2tlTGluZWpvaW4pIHtcclxuICAgICAgICB0aGlzLl9zdHJva2VMaW5lam9pbiA9IGRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGZvbnRGYW1pbHkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZvbnRGYW1pbHk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGZvbnRTaXplKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9mb250U2l6ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdGV4dExlbmd0aCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGV4dExlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9mbkNoYW5nZUZpbGxzOiBBcnJheTxGdW5jdGlvbj4gPSBbXTtcclxuICAgIHNldCBvbmNoYW5nZWZpbGwoZm46IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5fZm5DaGFuZ2VGaWxscy5wdXNoKGZuKTtcclxuICAgIH1cclxuICAgIGNoYW5nZUZpbGwoZGF0YTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fZm5DaGFuZ2VGaWxscy5mb3JFYWNoKGYgPT4gZihkYXRhKSk7XHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLnNhdmVDb25maWcoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9mbkNoYW5nZVN0cm9rZXM6IEFycmF5PEZ1bmN0aW9uPiA9IFtdO1xyXG4gICAgc2V0IG9uY2hhbmdlc3Ryb2tlKGZuOiBGdW5jdGlvbikge1xyXG4gICAgICAgIHRoaXMuX2ZuQ2hhbmdlU3Ryb2tlcy5wdXNoKGZuKTtcclxuICAgIH1cclxuICAgIGNoYW5nZVN0cm9rZShkYXRhOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9mbkNoYW5nZVN0cm9rZXMuZm9yRWFjaChmID0+IGYoZGF0YSkpO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdGhpcy5zYXZlQ29uZmlnKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZm5DaGFuZ2VTdHJva2VXaWR0aHM6IEFycmF5PEZ1bmN0aW9uPiA9IFtdO1xyXG4gICAgc2V0IG9uY2hhbmdlc3Ryb2tld2lkdGgoZm46IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5fZm5DaGFuZ2VTdHJva2VXaWR0aHMucHVzaChmbik7XHJcbiAgICB9XHJcbiAgICBjaGFuZ2VTdHJva2VXaWR0aChkYXRhOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9mbkNoYW5nZVN0cm9rZVdpZHRocy5mb3JFYWNoKGYgPT4gZihkYXRhKSk7XHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLnNhdmVDb25maWcoKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBpY2R0X0lWYXJpYWJsZSB9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2UvSURhdGFWYXJpYWJsZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1J1biB9IGZyb20gXCIuLi9ydW5cIjtcclxuaW1wb3J0IHsgaWNkdF9SdW5fSW50ZXJhY3RpdmVfTm9kZUNsaWNrIH0gZnJvbSBcIi4uL3J1bi9pbnRlcmFjdGl2ZS9ub2RlLWNsaWNrXCI7XHJcbmltcG9ydCB7IGljZHRfUnVuX0ludGVyYWN0aXZlX1RyaWdnZXJTaG93IH0gZnJvbSBcIi4uL3J1bi9pbnRlcmFjdGl2ZS90cmlnZ2VyXCI7XHJcblxyXG4vLy/EkW/huqFuIGNvZGUgeOG7i24geMOyLCBzb3J0IGThu68gbGnhu4d1IGPDtG5nIHRo4bupYyBiaeG6v24gdGhlbyBBQkNcclxuLypcclxuX3ZhcmlhYmxlLnNldENvbmRpdGlvbkFsbChcclxuICAgIF92YXJpYWJsZS5nZXRDb25kaXRpb25BbGwoKVxyXG4gICAgICAgIC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhLnZhcmlhYmxlc1swXS5sb2NhbGVDb21wYXJlKGIudmFyaWFibGVzWzBdKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGl0ZW0sIGlkeCkge1xyXG4gICAgICAgICAgICBpdGVtLmlkeCA9IGlkeDtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICAgICAgfSlcclxuKTtcclxuKi9cclxuXHJcbi8qXHJcbiogIE9iamVjdC5hc3NpZ24gaG/huqF0IMSR4buZbmcgdHLDqm4gcGhpw6puIGLhuqNuIEVTNiwga2jDtG5nIHRo4buDIGNsb25lIG9iamVjdCBpbiBvYmplY3RcclxuKiAgSlNPTi5wYXJzZSBKU09OLnN0cmluZ2lmeSBob+G6oXQgxJHhu5luZyB0csOqbiBjw6FjIHBoacOqbiBi4bqjbiwgY2xvbmUgxJFjIGPhuqMgbeG7myBk4buvIGxp4buHdSBuaMawbmcgaOG6oW4gY2jhur8gduG7gSBsb+G6oWkgZOG7ryBsaeG7h3UsIGtow7RuZyB0aOG7gyBjbG9uZSBkYXRhIHR5cGUgZnVuY3Rpb24sIHVuZGVmaW5lZCwgdsOgIDEgc+G7kSBk4buvIGxp4buHdSDEkeG6t2MgYmnhu4d0IG5oxrAgaHRtbCBub2RlXHJcbipcclxuKiAgLT4gbsOqbiBkw7luZyBKU09OIMSR4buDIGNsb25lIG9iamVjdCBjxqEgYuG6o25cclxuKiAqL1xyXG52YXIgY2xvbmVPYmplY3RfU2hhbGxvd0Nsb25lID0gZnVuY3Rpb24gKG9iajogb2JqZWN0KSB7XHJcbiAgICByZXR1cm4gIW9iaiA/IG9iaiA6IE9iamVjdC5hc3NpZ24oe30sIG9iaik7XHJcbn07XHJcblxyXG52YXIgY2xvbmVPYmplY3RfRGVlcENsb25lID0gZnVuY3Rpb24gKG9iajogb2JqZWN0KSB7XHJcbiAgICByZXR1cm4gIW9iaiA/IG9iaiA6IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSk7XHJcbn07XHJcblxyXG52YXIgZmlsdGVyQXJyYXlKc29uID0gZnVuY3Rpb24gKGFycmF5SnNvbjogQXJyYXk8YW55Piwgc29ydGZpZWxkOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiAoZnVuY3Rpb24gKGRhdGE6IEFycmF5PGFueT4pIHtcclxuICAgICAgICBmb3IgKHZhciBrZXkgb2YgYXJyYXlKc29uLm1hcChmdW5jdGlvbiAobSkgeyByZXR1cm4gbVtzb3J0ZmllbGRdOyB9KS5zb3J0KCkpIHtcclxuICAgICAgICAgICAgLy9s4buNYyBjw6FjIGThu68gbGnhu4d1IHbDoCDEkeG6qXkgbsOzIMSRaSB4YSBoxqFuXHJcbiAgICAgICAgICAgIGFycmF5SnNvblxyXG4gICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoZikgeyByZXR1cm4gZltzb3J0ZmllbGRdID09IGtleTsgfSlcclxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChqc29uT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wdXNoKGpzb25PYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvL2xv4bqhaSBjw6FjIGThu68gbGnhu4d1IMSRw6MgbOG6pXlcclxuICAgICAgICAgICAgYXJyYXlKc29uID0gYXJyYXlKc29uLmZpbHRlcihmdW5jdGlvbiAoZikgeyByZXR1cm4gZltzb3J0ZmllbGRdICE9IGtleTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfSkoW10pO1xyXG59O1xyXG5cclxudmFyIGRhdGFWYXJpYWJsZVN5c3RlbSA9IFtcclxuICAgIHtcclxuICAgICAgICBcImtleVwiOiBcIkZpbmlzaGVkVGVzdFwiLFxyXG4gICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcclxuICAgICAgICBcInZhbHVlXCI6IGZhbHNlLFxyXG4gICAgICAgIFwibm90ZVwiOiBcIkhvw6BuIHRow6BuaCBCS1RcIixcclxuICAgICAgICBcInN5c3RlbVwiOiB0cnVlLFxyXG4gICAgICAgIFwicmVhZG9ubHlcIjogZmFsc2VcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgXCJrZXlcIjogXCJUb3RhbFRlc3RcIixcclxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIixcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgXCJub3RlXCI6IFwiVOG7lW5nIHPhu5EgQktUXCIsXHJcbiAgICAgICAgXCJzeXN0ZW1cIjogdHJ1ZSxcclxuICAgICAgICBcInJlYWRvbmx5XCI6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIFwia2V5XCI6IFwiVG90YWxUZXN0RGlkTm90UGFzc1wiLFxyXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiLFxyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBcIm5vdGVcIjogXCJT4buRIEJLVCBraMO0bmcgdsaw4bujdCBxdWFcIixcclxuICAgICAgICBcInN5c3RlbVwiOiB0cnVlLFxyXG4gICAgICAgIFwicmVhZG9ubHlcIjogZmFsc2VcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgXCJrZXlcIjogXCJUb3RhbFRlc3RQYXNzZWRcIixcclxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIixcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgXCJub3RlXCI6IFwiU+G7kSBCS1QgxJHDoyB2xrDhu6N0IHF1YVwiLFxyXG4gICAgICAgIFwic3lzdGVtXCI6IHRydWUsXHJcbiAgICAgICAgXCJyZWFkb25seVwiOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIC8ve1xyXG4gICAgLy8gICAgXCJrZXlcIjogXCJSZWFkb25seSBOdW1iZXJcIixcclxuICAgIC8vICAgIFwidHlwZVwiOiBcIm51bWJlclwiLFxyXG4gICAgLy8gICAgXCJ2YWx1ZVwiOiBudWxsLFxyXG4gICAgLy8gICAgXCJub3RlXCI6IFwiQ2jhu4kgeGVtXCIsXHJcbiAgICAvLyAgICBcInN5c3RlbVwiOiB0cnVlLFxyXG4gICAgLy8gICAgXCJyZWFkb25seVwiOiB0cnVlXHJcbiAgICAvL30sXHJcbiAgICAvL3tcclxuICAgIC8vICAgIFwia2V5XCI6IFwiUmVhZG9ubHkgU3RyaW5nXCIsXHJcbiAgICAvLyAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcclxuICAgIC8vICAgIFwidmFsdWVcIjogbnVsbCxcclxuICAgIC8vICAgIFwibm90ZVwiOiBcIkNo4buJIHhlbVwiLFxyXG4gICAgLy8gICAgXCJzeXN0ZW1cIjogdHJ1ZSxcclxuICAgIC8vICAgIFwicmVhZG9ubHlcIjogdHJ1ZVxyXG4gICAgLy99LFxyXG4gICAgLy97XHJcbiAgICAvLyAgICBcImtleVwiOiBcIlJlYWRvbmx5IEJvb2xlYW5cIixcclxuICAgIC8vICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcclxuICAgIC8vICAgIFwidmFsdWVcIjogbnVsbCxcclxuICAgIC8vICAgIFwibm90ZVwiOiBcIkNo4buJIHhlbVwiLFxyXG4gICAgLy8gICAgXCJzeXN0ZW1cIjogdHJ1ZSxcclxuICAgIC8vICAgIFwicmVhZG9ubHlcIjogdHJ1ZVxyXG4gICAgLy99LFxyXG4gICAgLy97XHJcbiAgICAvLyAgICBcImtleVwiOiBcIlN5c3RlbSBOdW1iZXJcIixcclxuICAgIC8vICAgIFwidHlwZVwiOiBcIm51bWJlclwiLFxyXG4gICAgLy8gICAgXCJ2YWx1ZVwiOiBudWxsLFxyXG4gICAgLy8gICAgXCJub3RlXCI6IFwiSOG7hyB0aOG7kW5nXCIsXHJcbiAgICAvLyAgICBcInN5c3RlbVwiOiB0cnVlLFxyXG4gICAgLy8gICAgXCJyZWFkb25seVwiOiBmYWxzZVxyXG4gICAgLy99LFxyXG4gICAgLy97XHJcbiAgICAvLyAgICBcImtleVwiOiBcIlN5c3RlbSBTdHJpbmdcIixcclxuICAgIC8vICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxyXG4gICAgLy8gICAgXCJ2YWx1ZVwiOiBudWxsLFxyXG4gICAgLy8gICAgXCJub3RlXCI6IFwiSOG7hyB0aOG7kW5nXCIsXHJcbiAgICAvLyAgICBcInN5c3RlbVwiOiB0cnVlLFxyXG4gICAgLy8gICAgXCJyZWFkb25seVwiOiBmYWxzZVxyXG4gICAgLy99LFxyXG4gICAgLy97XHJcbiAgICAvLyAgICBcImtleVwiOiBcIlN5c3RlbSBCb29sZWFuXCIsXHJcbiAgICAvLyAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXHJcbiAgICAvLyAgICBcInZhbHVlXCI6IG51bGwsXHJcbiAgICAvLyAgICBcIm5vdGVcIjogXCJI4buHIHRo4buRbmdcIixcclxuICAgIC8vICAgIFwic3lzdGVtXCI6IHRydWUsXHJcbiAgICAvLyAgICBcInJlYWRvbmx5XCI6IGZhbHNlXHJcbiAgICAvL31cclxuXTtcclxuXHJcbnZhciBkYXRhVmFyaWFibGVUZW1wID0gW1xyXG5cclxuXSBhcyBBcnJheTxhbnk+O1xyXG5cclxudmFyIGRhdGFfdmFyaWFibGVfdGVtcCA9IHtcclxuICAgIFwia2V5XCI6IFwiQmllblNvXCIsXHJcbiAgICBcInZhbHVlXCI6IFwiMFwiLFxyXG4gICAgXCJ0eXBlXCI6IFwibnVtYmVyXCIsXHJcbiAgICBcIm5vdGVcIjogbnVsbCxcclxuICAgIFwicmVhZG9ubHlcIjogZmFsc2VcclxufTtcclxuXHJcbnZhciBkYXRhX2NvbmRpdGlvbl90ZW1wID0ge1xyXG4gICAgXCJpZlwiOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJ2YXJpYWJsZVwiLFxyXG4gICAgICAgICAgICBcInZhcmlhYmxlXCI6IFwiQmllblNvXCIsXHJcbiAgICAgICAgICAgIFwidmFyaWFibGVzXCI6IG51bGwsXHJcbiAgICAgICAgICAgIFwic2xpZGVcIjogbnVsbCxcclxuICAgICAgICAgICAgXCJub2RlXCI6IG51bGwsXHJcbiAgICAgICAgICAgIFwiY29uZGl0aW9uXCI6IFwiPlwiLFxyXG4gICAgICAgICAgICBcIm9wZXJhdG9yXCI6IG51bGwsXHJcbiAgICAgICAgICAgIFwidmFsdWV0eXBlXCI6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiA1XHJcbiAgICAgICAgfVxyXG4gICAgXSxcclxuICAgIFwidGhlblwiOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJ2YXJpYWJsZVwiLFxyXG4gICAgICAgICAgICBcInZhcmlhYmxlXCI6IFwiQmllbkNodVwiLFxyXG4gICAgICAgICAgICBcInZhcmlhYmxlc1wiOiBudWxsLFxyXG4gICAgICAgICAgICBcInNsaWRlXCI6IG51bGwsXHJcbiAgICAgICAgICAgIFwibm9kZVwiOiBudWxsLFxyXG4gICAgICAgICAgICBcImNvbmRpdGlvblwiOiBudWxsLFxyXG4gICAgICAgICAgICBcIm9wZXJhdG9yXCI6IFwiPVwiLFxyXG4gICAgICAgICAgICBcInZhbHVldHlwZVwiOiBcInZhbHVlXCIsXHJcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJCaWVuU28gPiA1XCJcclxuICAgICAgICB9XHJcbiAgICBdLFxyXG4gICAgXCJlbHNlXCI6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInZhcmlhYmxlXCIsXHJcbiAgICAgICAgICAgIFwidmFyaWFibGVcIjogXCJCaWVuQ2h1XCIsXHJcbiAgICAgICAgICAgIFwidmFyaWFibGVzXCI6IG51bGwsXHJcbiAgICAgICAgICAgIFwic2xpZGVcIjogbnVsbCxcclxuICAgICAgICAgICAgXCJub2RlXCI6IG51bGwsXHJcbiAgICAgICAgICAgIFwiY29uZGl0aW9uXCI6IG51bGwsXHJcbiAgICAgICAgICAgIFwib3BlcmF0b3JcIjogXCI9XCIsXHJcbiAgICAgICAgICAgIFwidmFsdWV0eXBlXCI6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIkJpZW5TbyA8PSA1XCJcclxuICAgICAgICB9XHJcbiAgICBdLFxyXG4gICAgXCJpZFwiOiBcIjU3NjIzMzAyXCIsXHJcbiAgICBcImlkeFwiOiAxLFxyXG4gICAgXCJ2YXJpYWJsZXNcIjogW1xyXG4gICAgICAgIFwiQmllblNvXCJcclxuICAgIF1cclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBpY2R0X1ZhcmlhYmxlX1RydW1DdW9pIHtcclxuXHJcbiAgICBwcml2YXRlIF9kYXRhX3ZhcmlhYmxlcyA9IGNsb25lT2JqZWN0X0RlZXBDbG9uZShkYXRhVmFyaWFibGVTeXN0ZW0pLmNvbmNhdChjbG9uZU9iamVjdF9EZWVwQ2xvbmUoZGF0YVZhcmlhYmxlVGVtcCkpO1xyXG4gICAgcHJpdmF0ZSBfZGF0YV9jb25kaXRpb25zID0gW1xyXG4gICAgICAgIC8vLi4uZGF0YV9jb25kaXRpb25fdGVtcFxyXG4gICAgXTtcclxuXHJcbiAgICByZW5ldygpIHtcclxuICAgICAgICB0aGlzLl9kYXRhX3ZhcmlhYmxlcyA9IGNsb25lT2JqZWN0X0RlZXBDbG9uZShkYXRhVmFyaWFibGVTeXN0ZW0pLmNvbmNhdChjbG9uZU9iamVjdF9EZWVwQ2xvbmUoZGF0YVZhcmlhYmxlVGVtcCkpO1xyXG4gICAgICAgIHRoaXMuX2RhdGFfY29uZGl0aW9ucyA9IFtdO1xyXG4gICAgfTtcclxuXHJcbiAgICBnZXQgdG90YWxWYXJpYWJsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YV92YXJpYWJsZXMubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB0b3RhbENvbmRpdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YV9jb25kaXRpb25zLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZ2V0KCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZhcmlhYmxlczogdGhpcy5fZGF0YV92YXJpYWJsZXMgfHwgW10sXHJcbiAgICAgICAgICAgIGNvbmRpdGlvbnM6IHRoaXMuX2RhdGFfY29uZGl0aW9ucyB8fCBbXVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIHNldCBzZXQoZGF0YTogYW55KSB7XHJcbiAgICAgICAgaWYgKCFkYXRhKSB7IHJldHVybjsgfVxyXG5cclxuICAgICAgICBsZXQganNvblBhcnNlID0ge30gYXMgYW55O1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBqc29uUGFyc2UgPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIGpzb25QYXJzZSA9IGRhdGE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9kYXRhX3ZhcmlhYmxlcyA9IGpzb25QYXJzZS52YXJpYWJsZXMgfHwgW107XHJcbiAgICAgICAgdGhpcy5fZGF0YV9jb25kaXRpb25zID0ganNvblBhcnNlLmNvbmRpdGlvbnMgfHwgKChjb25kaXRpb25zOiBBcnJheTxhbnk+KSA9PiB7IHRoaXMuX2RhdGFfdmFyaWFibGVzLm1hcCgobTogYW55KSA9PiB7IHJldHVybiBtLmNoYW5nZSB8fCBbXTsgfSkuZm9yRWFjaCgoaXRlbTogYW55KSA9PiB7IGNvbmRpdGlvbnMgPSBjb25kaXRpb25zLmNvbmNhdChpdGVtKTsgfSk7IHJldHVybiBjb25kaXRpb25zOyB9KShbXSk7O1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIGRhdGFWYXJpYWJsZVN5c3RlbS5mb3JFYWNoKCh2YXJpYWJsZVN5c3RlbSkgPT4ge1xyXG4gICAgICAgICAgICB2YXIgdGhpc1ZhcmlhYmxlcyA9IHRoaXMuX2RhdGFfdmFyaWFibGVzLmZpbHRlcigoZjogYW55KSA9PiB7IHJldHVybiBmLmtleSA9PSB2YXJpYWJsZVN5c3RlbS5rZXkgfSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzVmFyaWFibGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpc1ZhcmlhYmxlcy5mb3JFYWNoKGZ1bmN0aW9uICh0aGlzVmFyaWFibGU6IGFueSwgaW5kZXg6IGFueSwgYXJyOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzVmFyaWFibGUudHlwZSA9IHZhcmlhYmxlU3lzdGVtLnR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy90aGlzVmFyaWFibGUudmFsdWUgPSB2YXJpYWJsZVN5c3RlbS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAvL3RoaXNWYXJpYWJsZS5ub3RlID0gdmFyaWFibGVTeXN0ZW0ubm90ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzVmFyaWFibGUucmVhZG9ubHkgPSB2YXJpYWJsZVN5c3RlbS5yZWFkb25seTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzVmFyaWFibGUuc3lzdGVtID0gdmFyaWFibGVTeXN0ZW0uc3lzdGVtO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kYXRhX3ZhcmlhYmxlcy5wdXNoKHZhcmlhYmxlU3lzdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBnZXRWYXJpYWJsZVRlbXAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGNsb25lT2JqZWN0X0RlZXBDbG9uZShkYXRhX3ZhcmlhYmxlX3RlbXApO1xyXG4gICAgfTtcclxuXHJcbiAgICBnZXRDb25kaXRpb25UZW1wKCkge1xyXG4gICAgICAgIHJldHVybiBjbG9uZU9iamVjdF9EZWVwQ2xvbmUoZGF0YV9jb25kaXRpb25fdGVtcCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGdldEtleXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFfdmFyaWFibGVzXHJcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKG06IGFueSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG0ua2V5O1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc29ydChmdW5jdGlvbiAoYTogYW55LCBiOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIC8vcmV0dXJuIGIgLSBhO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGEubG9jYWxlQ29tcGFyZShiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGdldFZhcmlhYmxlQWxsKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9kYXRhX3ZhcmlhYmxlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNsb25lT2JqZWN0X0RlZXBDbG9uZShmaWx0ZXJBcnJheUpzb24odGhpcy5fZGF0YV92YXJpYWJsZXMsICdrZXknKSkgYXMgQXJyYXk8aWNkdF9JVmFyaWFibGU+O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2xvbmVPYmplY3RfRGVlcENsb25lKGRhdGFWYXJpYWJsZVN5c3RlbSkuY29uY2F0KGNsb25lT2JqZWN0X0RlZXBDbG9uZShkYXRhVmFyaWFibGVUZW1wKSkgYXMgQXJyYXk8aWNkdF9JVmFyaWFibGU+O1xyXG4gICAgfTtcclxuXHJcbiAgICBzZXRWYXJpYWJsZUFsbChkYXRhOiBhbnkpIHtcclxuICAgICAgICBpZiAoIWRhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRhX3ZhcmlhYmxlcyA9IGRhdGE7Ly8uZmlsdGVyKGZ1bmN0aW9uIChmKSB7IHJldHVybiAhZi5zeXN0ZW07IH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICBkYXRhVmFyaWFibGVTeXN0ZW0uZm9yRWFjaCgodmFyaWFibGVTeXN0ZW0pID0+IHtcclxuICAgICAgICAgICAgdmFyIHRoaXNWYXJpYWJsZXMgPSB0aGlzLl9kYXRhX3ZhcmlhYmxlcy5maWx0ZXIoKGY6IGFueSkgPT4geyByZXR1cm4gZi5rZXkgPT0gdmFyaWFibGVTeXN0ZW0ua2V5IH0pO1xyXG4gICAgICAgICAgICBpZiAodGhpc1ZhcmlhYmxlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXNWYXJpYWJsZXMuZm9yRWFjaCgodGhpc1ZhcmlhYmxlOiBhbnksIGluZGV4OiBhbnksIGFycjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc1ZhcmlhYmxlLnR5cGUgPSB2YXJpYWJsZVN5c3RlbS50eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdGhpc1ZhcmlhYmxlLnZhbHVlID0gdmFyaWFibGVTeXN0ZW0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy90aGlzVmFyaWFibGUubm90ZSA9IHZhcmlhYmxlU3lzdGVtLm5vdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc1ZhcmlhYmxlLnJlYWRvbmx5ID0gdmFyaWFibGVTeXN0ZW0ucmVhZG9ubHk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc1ZhcmlhYmxlLnN5c3RlbSA9IHZhcmlhYmxlU3lzdGVtLnN5c3RlbTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGF0YV92YXJpYWJsZXMucHVzaCh2YXJpYWJsZVN5c3RlbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgZ2V0VmFyaWFibGUoa2V5OiBhbnkpIHtcclxuICAgICAgICBpZiAoIWtleSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY2xvbmVPYmplY3RfRGVlcENsb25lKHRoaXMuX2RhdGFfdmFyaWFibGVzLmZpbHRlcigoZjogYW55KSA9PiB7IHJldHVybiBmLmtleSA9PSBrZXkgfSlbMF0gfHwge30pO1xyXG4gICAgfTtcclxuXHJcbiAgICBzZXRWYXJpYWJsZShrZXk6IGFueSwgdmFsdWU6IGFueSwgdHlwZTogYW55KSB7XHJcbiAgICAgICAgaWYgKCFrZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKFtudWxsLCB1bmRlZmluZWQsIE5hTiwgSW5maW5pdHldLmluZGV4T2YodmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgdmFsdWUgPSAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdHlwZSkge1xyXG4gICAgICAgICAgICB0eXBlID0gKHRoaXMuX2RhdGFfdmFyaWFibGVzLmZpbHRlcigoZjogYW55KSA9PiB7IHJldHVybiBmLmtleSA9PSBrZXk7IH0pWzBdIHx8IHt9KS50eXBlIHx8IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzoge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ251bWJlcic6IHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ2Jvb2xlYW4nOiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAodmFsdWUgPT0gXCIxXCIgfHwgdmFsdWUgPT0gXCJ0cnVlXCIgfHwgdmFsdWUgPT0gXCJ5ZXNcIiB8fCB2YWx1ZSA9PSBcImR1bmdcIiA/IHRydWUgOiBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHRoaXNWYXJpYWJsZXMgPSB0aGlzLl9kYXRhX3ZhcmlhYmxlcy5maWx0ZXIoKGY6IGFueSkgPT4geyByZXR1cm4gZi5rZXkgPT0ga2V5IH0pO1xyXG4gICAgICAgIGlmICh0aGlzVmFyaWFibGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzVmFyaWFibGVzLmZvckVhY2goZnVuY3Rpb24gKHRoaXNWYXJpYWJsZTogYW55LCBpbmRleDogYW55LCBhcnI6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgdGhpc1ZhcmlhYmxlLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzVmFyaWFibGUudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fZGF0YV92YXJpYWJsZXMucHVzaCh7IGtleToga2V5LCB2YWx1ZTogdmFsdWUsIHR5cGU6IHR5cGUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBnZXRWYWx1ZShrZXk6IHN0cmluZywgdHlwZT86IHN0cmluZykge1xyXG4gICAgICAgIGlmICgha2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB0aGlzVmFyaWFibGVzID0gdGhpcy5fZGF0YV92YXJpYWJsZXMuZmlsdGVyKGZ1bmN0aW9uIChmOiBhbnkpIHsgcmV0dXJuIGYua2V5ID09IGtleSB9KTtcclxuICAgICAgICBpZiAodGhpc1ZhcmlhYmxlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdmFyIHRoaXNWYXJpYWJsZSA9IHRoaXNWYXJpYWJsZXNbMF0gfHwge307XHJcbiAgICAgICAgICAgIHZhciB0aGlzVmFsdWU7XHJcblxyXG4gICAgICAgICAgICAvL2V4Y3V0ZVxyXG4gICAgICAgICAgICB0aGlzLk9uR2V0QWN0aW9uRXhlY3V0aW5nKHRoaXNWYXJpYWJsZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHR5cGUgPSB0aGlzVmFyaWFibGUudHlwZSB8fCBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoW251bGwsIHVuZGVmaW5lZCwgTmFOLCBJbmZpbml0eV0uaW5kZXhPZih0aGlzVmFyaWFibGUudmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1ZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB0aGlzVmFyaWFibGUudmFsdWUgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzVmFsdWUgPSB0aGlzVmFyaWFibGUudmFsdWUgfHwgJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzVmFsdWUgPSB0aGlzVmFyaWFibGUudmFsdWUudG9TdHJpbmcoKS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChbbnVsbCwgdW5kZWZpbmVkLCBOYU4sIEluZmluaXR5XS5pbmRleE9mKHRoaXNWYXJpYWJsZS52YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzVmFsdWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdGhpc1ZhcmlhYmxlLnZhbHVlID09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1ZhbHVlID0gdGhpc1ZhcmlhYmxlLnZhbHVlIHx8IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzVmFsdWUgPSBwYXJzZUZsb2F0KHRoaXNWYXJpYWJsZS52YWx1ZSkgfHwgMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdib29sZWFuJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChbbnVsbCwgdW5kZWZpbmVkLCBOYU4sIEluZmluaXR5XS5pbmRleE9mKHRoaXNWYXJpYWJsZS52YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzVmFsdWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHRoaXNWYXJpYWJsZS52YWx1ZSA9PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzVmFsdWUgPSB0aGlzVmFyaWFibGUudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzVmFsdWUgPSAodGhpc1ZhcmlhYmxlLnZhbHVlICsgXCJcIikudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1ZhbHVlID0gKHRoaXNWYXJpYWJsZS52YWx1ZSA9PSBcIjFcIiB8fCB0aGlzVmFyaWFibGUudmFsdWUgPT0gXCJ0cnVlXCIgfHwgdGhpc1ZhcmlhYmxlLnZhbHVlID09IFwieWVzXCIgfHwgdGhpc1ZhcmlhYmxlLnZhbHVlID09IFwiZHVuZ1wiID8gdHJ1ZSA6IGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhdWRpby1zcmMnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFtudWxsLCB1bmRlZmluZWQsIE5hTiwgSW5maW5pdHldLmluZGV4T2YodGhpc1ZhcmlhYmxlLnZhbHVlKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNWYWx1ZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzVmFyaWFibGUudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1ZhbHVlID0gYDxhdWRpbyBjb250cm9scyBzdHlsZT1cIndpZHRoOjI4MHB4O3ZlcnRpY2FsLWFsaWduOm1pZGRsZTtcIj48c291cmNlIHNyYz1cIiR7dGhpc1ZhcmlhYmxlLnZhbHVlfVwiPjwvc291cmNlPjwvYXVkaW8+YDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNWYWx1ZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ3ZpZGVvLXNyYyc6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoW251bGwsIHVuZGVmaW5lZCwgTmFOLCBJbmZpbml0eV0uaW5kZXhPZih0aGlzVmFyaWFibGUudmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1ZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXNWYXJpYWJsZS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzVmFsdWUgPSBgPHZpZGVvIGNvbnRyb2xzIHN0eWxlPVwid2lkdGg6MjgwcHg7dmVydGljYWwtYWxpZ246bWlkZGxlO1wiPjxzb3VyY2Ugc3JjPVwiJHt0aGlzVmFyaWFibGUudmFsdWV9XCI+PC9zb3VyY2U+PC92aWRlbz5gO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1ZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnaW1nLXNyYyc6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoW251bGwsIHVuZGVmaW5lZCwgTmFOLCBJbmZpbml0eV0uaW5kZXhPZih0aGlzVmFyaWFibGUudmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1ZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXNWYXJpYWJsZS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzVmFsdWUgPSBgPGltZyBzdHlsZT1cIndpZHRoOjEwMCU7dmVydGljYWwtYWxpZ246bWlkZGxlO1wiIHNyYz1cIiR7dGhpc1ZhcmlhYmxlLnZhbHVlfVwiLz5gO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1ZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChbbnVsbCwgdW5kZWZpbmVkLCBOYU4sIEluZmluaXR5XS5pbmRleE9mKHRoaXNWYXJpYWJsZS52YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzVmFsdWUgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNWYWx1ZSA9IHRoaXNWYXJpYWJsZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vZXhjdXRlXHJcbiAgICAgICAgICAgIHRoaXMuT25HZXRBY3Rpb25FeGVjdXRlZCh0aGlzVmFyaWFibGUpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG5cclxuICAgIHNldFZhbHVlKGtleTogc3RyaW5nLCB2YWx1ZTogYW55LCB0eXBlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKCFrZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKFtudWxsLCB1bmRlZmluZWQsIE5hTiwgSW5maW5pdHldLmluZGV4T2YodmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgdmFsdWUgPSAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdHlwZSkge1xyXG4gICAgICAgICAgICB0eXBlID0gKHRoaXMuX2RhdGFfdmFyaWFibGVzLmZpbHRlcihmdW5jdGlvbiAoZjogYW55KSB7IHJldHVybiBmLmtleSA9PSBrZXk7IH0pWzBdIHx8IHt9KS50eXBlIHx8IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzoge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ251bWJlcic6IHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ2Jvb2xlYW4nOiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAodmFsdWUgPT0gXCIxXCIgfHwgdmFsdWUgPT0gXCJ0cnVlXCIgfHwgdmFsdWUgPT0gXCJ5ZXNcIiB8fCB2YWx1ZSA9PSBcImR1bmdcIiA/IHRydWUgOiBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHRoaXNWYXJpYWJsZXMgPSB0aGlzLl9kYXRhX3ZhcmlhYmxlcy5maWx0ZXIoZnVuY3Rpb24gKGY6IGFueSkgeyByZXR1cm4gZi5rZXkgPT0ga2V5IH0pO1xyXG4gICAgICAgIGlmICh0aGlzVmFyaWFibGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB2YXIgdGhpc1ZhcmlhYmxlID0gdGhpc1ZhcmlhYmxlc1swXTtcclxuXHJcbiAgICAgICAgICAgIC8vZXhjdXRlXHJcbiAgICAgICAgICAgIHRoaXMuT25TZXRBY3Rpb25FeGVjdXRpbmcodGhpc1ZhcmlhYmxlKTtcclxuXHJcbiAgICAgICAgICAgIC8vaWYgKHRoaXNWYXJpYWJsZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vICAgIHRoaXNWYXJpYWJsZXMuZm9yRWFjaChmdW5jdGlvbiAodGhpc1ZhcmlhYmxlLCBpbmRleCwgYXJyKSB7XHJcbiAgICAgICAgICAgIC8vICAgICAgICB0aGlzVmFyaWFibGUudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgLy8gICAgICAgIHRoaXNWYXJpYWJsZS50eXBlID0gdHlwZTtcclxuICAgICAgICAgICAgLy8gICAgfSk7XHJcbiAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICBpZiAodGhpc1ZhcmlhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzVmFyaWFibGUudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL2Vsc2Uge1xyXG4gICAgICAgICAgICAvLyAgICB0aGlzVmFyaWFibGUgPSB7IGtleToga2V5LCB2YWx1ZTogdmFsdWUsIHR5cGU6IHR5cGUgfTtcclxuICAgICAgICAgICAgLy8gICAgZGF0YV92YXJpYWJsZXMucHVzaCh0aGlzVmFyaWFibGUpO1xyXG4gICAgICAgICAgICAvL31cclxuXHJcbiAgICAgICAgICAgIC8vZXhjdXRlXHJcbiAgICAgICAgICAgIHRoaXMuT25TZXRBY3Rpb25FeGVjdXRlZCh0aGlzVmFyaWFibGUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZ2V0Q29uZGl0aW9uQWxsKCkge1xyXG4gICAgICAgIHJldHVybiBjbG9uZU9iamVjdF9EZWVwQ2xvbmUoXHJcbiAgICAgICAgICAgIHRoaXMuX2RhdGFfY29uZGl0aW9uc1xyXG4gICAgICAgICAgICAgICAgLnNvcnQoZnVuY3Rpb24gKGE6IGFueSwgYjogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEuaWR4IC0gYi5pZHg7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICB9O1xyXG5cclxuICAgIHNldENvbmRpdGlvbkFsbChkYXRhOiBhbnkpIHtcclxuICAgICAgICBpZiAoIWRhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRhX2NvbmRpdGlvbnMgPSBkYXRhO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZ2V0Q29uZGl0aW9uKGtleTogYW55KSB7XHJcbiAgICAgICAgaWYgKCFrZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNsb25lT2JqZWN0X0RlZXBDbG9uZShcclxuICAgICAgICAgICAgdGhpcy5fZGF0YV9jb25kaXRpb25zXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChmOiBhbnkpID0+IHsgcmV0dXJuIGYudmFyaWFibGUgPT0ga2V5IHx8IChmLnZhcmlhYmxlcyB8fCBbXSkuaW5kZXhPZihrZXkpID49IDA7IH0pXHJcbiAgICAgICAgICAgICAgICAuc29ydChmdW5jdGlvbiAoYTogYW55LCBiOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5pZHggLSBiLmlkeDtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgIH07XHJcblxyXG4gICAgc3dpdGNoQ29uZGl0aW9uKGNvbmRpdGlvbjogYW55LCB2YWx1ZUE6IGFueSwgdmFsdWVCOiBhbnkpIHtcclxuICAgICAgICAvL3Bow6JuIGxv4bqhaSDEkWnhu4F1IGtp4buHblxyXG4gICAgICAgIHN3aXRjaCAoY29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIC8vYuG6sW5nXHJcbiAgICAgICAgICAgIGNhc2UgXCI9PVwiOiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlQiA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVCID0gdmFsdWVCLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlQSA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlQSA9IHZhbHVlQS50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZUIuc3BsaXQoJzsnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChtOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZUEgPT0gbS50cmltKCkgPyAxIDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoYTogYW55LCBiOiBhbnkpIHsgcmV0dXJuIGEgKyBiOyB9KSA+IDAgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVBID09IHZhbHVlQjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL2tow7RuZyBi4bqxbmdcclxuICAgICAgICAgICAgY2FzZSBcIiE9XCI6IHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWVCID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZUIgPSB2YWx1ZUIudG9Mb3dlckNhc2UoKS50cmltKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWVBID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVBID0gdmFsdWVBLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlQi5zcGxpdCgnOycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKG06IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlQSA9PSBtLnRyaW0oKSA/IDEgOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGE6IGFueSwgYjogYW55KSB7IHJldHVybiBhICsgYjsgfSkgPT0gMCA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZUEgIT0gdmFsdWVCO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vbOG7m24gaMahbiBob+G6t2MgYuG6sW5nXHJcbiAgICAgICAgICAgIGNhc2UgXCI+PVwiOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVBID49IHZhbHVlQjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL25o4buPIGjGoW4gaG/hurdjIGLhurFuZ1xyXG4gICAgICAgICAgICBjYXNlIFwiPD1cIjoge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlQSA8PSB2YWx1ZUI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9s4bubbiBoxqFuXHJcbiAgICAgICAgICAgIGNhc2UgXCI+XCI6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZUEgPiB2YWx1ZUI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9uaOG7jyBoxqFuXHJcbiAgICAgICAgICAgIGNhc2UgXCI8XCI6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZUEgPCB2YWx1ZUI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9jw7MgY2jhu6lhIG7hu5lpIGR1bmdcclxuICAgICAgICAgICAgY2FzZSBcIuKIiFwiOiB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFsdWVCID0gKHZhbHVlQiArICcnKS50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgIHZhbHVlQSA9ICh2YWx1ZUEgKyAnJykudG9Mb3dlckNhc2UoKS50cmltKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlQi5zcGxpdCgnOycpXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAobTogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZUEuaW5kZXhPZihtLnRyaW0oKSkgPj0gMCA/IDEgOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoYTogYW55LCBiOiBhbnkpIHsgcmV0dXJuIGEgKyBiOyB9KSA+IDAgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9raMO0bmcgY2jhu6lhIG7hu5lpIGR1bmdcclxuICAgICAgICAgICAgY2FzZSBcIuKIiVwiOiB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFsdWVCID0gKHZhbHVlQiArICcnKS50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgIHZhbHVlQSA9ICh2YWx1ZUEgKyAnJykudG9Mb3dlckNhc2UoKS50cmltKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlQi5zcGxpdCgnOycpXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAobTogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZUEuaW5kZXhPZihtLnRyaW0oKSkgPj0gMCA/IDEgOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoYTogYW55LCBiOiBhbnkpIHsgcmV0dXJuIGEgKyBiOyB9KSA9PSAwID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgc3dpdGNoT3BlcmF0b3Iob3BlcmF0b3I6IGFueSwgdmFsdWVBOiBhbnksIHZhbHVlQjogYW55KSB7XHJcbiAgICAgICAgLy9waMOibiBsb+G6oWkgcGjDqXAgdMOtbmhcclxuICAgICAgICBzd2l0Y2ggKG9wZXJhdG9yKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCIrXCI6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZUEgKyB2YWx1ZUI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcIi1cIjoge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlQSAtIHZhbHVlQjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiKlwiOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVBICogdmFsdWVCO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCIvXCI6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZUEgLyB2YWx1ZUI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcIj1cIjoge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlQSA9IHZhbHVlQjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiPSFcIjoge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlQSA9ICF2YWx1ZUI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcIj09XCI6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZUEgPT0gdmFsdWVCO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCIhPVwiOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVBICE9IHZhbHVlQjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgc3dpdGNoRm9ybXVsYShmb3JtdWxhOiBhbnksIHZhbHVlQXJyOiBhbnkpIHtcclxuICAgICAgICAvL3Bow6JuIGxv4bqhaSBjw7RuZyB0aOG7qWNcclxuICAgICAgICBzd2l0Y2ggKGZvcm11bGEpIHtcclxuICAgICAgICAgICAgY2FzZSBcInN1bVwiOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVBcnIucmVkdWNlKGZ1bmN0aW9uIChhOiBhbnksIGI6IGFueSkgeyByZXR1cm4gYSArIGIgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcInN1YlwiOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVBcnIucmVkdWNlKGZ1bmN0aW9uIChhOiBhbnksIGI6IGFueSkgeyByZXR1cm4gYSAtIGIgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcInByb1wiOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVBcnIucmVkdWNlKGZ1bmN0aW9uIChhOiBhbnksIGI6IGFueSkgeyByZXR1cm4gYSAqIGIgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcImRpdlwiOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVBcnIucmVkdWNlKGZ1bmN0aW9uIChhOiBhbnksIGI6IGFueSkgeyByZXR1cm4gYSAvIGIgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcImF2Z1wiOiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVBVkcgPSB2YWx1ZUFyci5yZWR1Y2UoZnVuY3Rpb24gKGE6IGFueSwgYjogYW55KSB7IHJldHVybiBhICsgYiB9KSAvICh2YWx1ZUFyci5sZW5ndGggfHwgMSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgodmFsdWVBVkcgKyBOdW1iZXIuRVBTSUxPTikgKiAxMDAwMCkgLyAxMDAwMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwibWluXCI6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbi5hcHBseShudWxsLCB2YWx1ZUFycik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcIm1heFwiOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgdmFsdWVBcnIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCJhbmRcIjoge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlQXJyLnJlZHVjZShmdW5jdGlvbiAoYTogYW55LCBiOiBhbnkpIHsgcmV0dXJuIGEgJiYgYiB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwib3JcIjoge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlQXJyLnJlZHVjZShmdW5jdGlvbiAoYTogYW55LCBiOiBhbnkpIHsgcmV0dXJuIGEgfHwgYiB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgc3dpdGNoVmFsdWVUeXBlX0NvbmRpdGlvbihpdGVtVmFyaWFibGU6IGFueSkge1xyXG4gICAgICAgIC8vcGjDom4gbG/huqFpIGdpw6EgdHLhu4tcclxuICAgICAgICBzd2l0Y2ggKGl0ZW1WYXJpYWJsZS52YWx1ZXR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6IHtcclxuICAgICAgICAgICAgICAgIC8vcGjDom4gbG/huqFpIMSRaeG7gXUga2nhu4duXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zd2l0Y2hDb25kaXRpb24oaXRlbVZhcmlhYmxlLmNvbmRpdGlvbiwgdGhpcy5nZXRWYWx1ZShpdGVtVmFyaWFibGUudmFyaWFibGUpLCBpdGVtVmFyaWFibGUudmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCJ2YXJpYWJsZVwiOiB7XHJcbiAgICAgICAgICAgICAgICAvL3Bow6JuIGxv4bqhaSDEkWnhu4F1IGtp4buHblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3dpdGNoQ29uZGl0aW9uKGl0ZW1WYXJpYWJsZS5jb25kaXRpb24sIHRoaXMuZ2V0VmFsdWUoaXRlbVZhcmlhYmxlLnZhcmlhYmxlKSwgdGhpcy5nZXRWYWx1ZShpdGVtVmFyaWFibGUudmFsdWUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgc3dpdGNoVmFsdWVUeXBlX09wZXJhdG9yKGl0ZW1WYXJpYWJsZTogYW55KSB7XHJcbiAgICAgICAgLy9waMOibiBsb+G6oWkgZ2nDoSB0cuG7i1xyXG4gICAgICAgIHN3aXRjaCAoaXRlbVZhcmlhYmxlLnZhbHVldHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwidmFsdWVcIjoge1xyXG4gICAgICAgICAgICAgICAgLy9waMOibiBsb+G6oWkgY8O0bmcgdGjhu6ljXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zd2l0Y2hPcGVyYXRvcihpdGVtVmFyaWFibGUub3BlcmF0b3IsIHRoaXMuZ2V0VmFsdWUoaXRlbVZhcmlhYmxlLnZhcmlhYmxlKSwgaXRlbVZhcmlhYmxlLnZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwidmFyaWFibGVcIjoge1xyXG4gICAgICAgICAgICAgICAgLy9waMOibiBsb+G6oWkgY8O0bmcgdGjhu6ljXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zd2l0Y2hPcGVyYXRvcihpdGVtVmFyaWFibGUub3BlcmF0b3IsIHRoaXMuZ2V0VmFsdWUoaXRlbVZhcmlhYmxlLnZhcmlhYmxlKSwgdGhpcy5nZXRWYWx1ZShpdGVtVmFyaWFibGUudmFsdWUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwidmFyaWFibGVzXCI6IHtcclxuICAgICAgICAgICAgICAgIC8vZOG7sWEgdsOgbyBjw7RuZyB0aOG7qWMgdMOtbmggZ2nDoSB0cuG7iyBt4bulYyB0acOqdVxyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlVmFyaWFibGVGb3JtdWxhID0gdGhpcy5zd2l0Y2hGb3JtdWxhKGl0ZW1WYXJpYWJsZS52YWx1ZWZvcm11bGEsIGl0ZW1WYXJpYWJsZS52YWx1ZS5tYXAoKG06IGFueSkgPT4geyByZXR1cm4gdGhpcy5nZXRWYWx1ZShtKSB9KSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9waMOibiBsb+G6oWkgY8O0bmcgdGjhu6ljXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zd2l0Y2hPcGVyYXRvcihpdGVtVmFyaWFibGUub3BlcmF0b3IsIHRoaXMuZ2V0VmFsdWUoaXRlbVZhcmlhYmxlLnZhcmlhYmxlKSwgdmFsdWVWYXJpYWJsZUZvcm11bGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBjaGVja1ZhbHVlQ29uZGl0aW9uKGl0ZW1WYXJpYWJsZTogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3dpdGNoVmFsdWVUeXBlX0NvbmRpdGlvbihpdGVtVmFyaWFibGUpO1xyXG4gICAgfTtcclxuXHJcbiAgICBnZXRWYWx1ZU9wZXJhdG9yKGl0ZW1WYXJpYWJsZTogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3dpdGNoVmFsdWVUeXBlX09wZXJhdG9yKGl0ZW1WYXJpYWJsZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHNldFZhbHVlT3BlcmF0b3IoaXRlbVZhcmlhYmxlOiBhbnkpIHtcclxuICAgICAgICBpZiAoIWl0ZW1WYXJpYWJsZT8udmFyaWFibGUpIHsgcmV0dXJuOyB9XHJcblxyXG4gICAgICAgIHRoaXMuc2V0VmFsdWUoaXRlbVZhcmlhYmxlLnZhcmlhYmxlLCB0aGlzLmdldFZhbHVlT3BlcmF0b3IoaXRlbVZhcmlhYmxlKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNoZWNrVmFsdWVDb25kaXRpb25zKGl0ZW1WYXJpYWJsZXM6IEFycmF5PGFueT4pIHtcclxuICAgICAgICByZXR1cm4gaXRlbVZhcmlhYmxlc1xyXG4gICAgICAgICAgICAubWFwKChpdGVtVmFyaWFibGUpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vcmV0dXJuIGZuLnN3aXRjaFZhbHVlVHlwZV9Db25kaXRpb24oaXRlbVZhcmlhYmxlKSA/IDAgOiAxO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChpdGVtVmFyaWFibGUudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZhcmlhYmxlJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuc3dpdGNoVmFsdWVUeXBlX0NvbmRpdGlvbihpdGVtVmFyaWFibGUpID8gMCA6IDEpIGFzIG51bWJlcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndmFyaWFibGVzJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGl0ZW1WYXJpYWJsZS52YXJpYWJsZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKHZhcmlhYmxlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zd2l0Y2hWYWx1ZVR5cGVfQ29uZGl0aW9uKE9iamVjdC5hc3NpZ24oY2xvbmVPYmplY3RfRGVlcENsb25lKGl0ZW1WYXJpYWJsZSksIHsgdmFyaWFibGU6IHZhcmlhYmxlIH0pKSA/IDAgOiAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGE6IGFueSwgYjogYW55KSB7IHJldHVybiBhICsgYjsgfSkgPT0gMCA/IDAgOiAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkgYXMgbnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwIGFzIG51bWJlcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5yZWR1Y2UoKGFjY3VtdWxhdG9yLCBjdXJyZW50VmFsdWUpID0+IChhY2N1bXVsYXRvciA/PyAwKSArIChjdXJyZW50VmFsdWUgPz8gMCkpID09IDAgPyB0cnVlIDogZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIHNldFZhbHVlT3BlcmF0b3JzKGl0ZW1WYXJpYWJsZXM6IGFueSkge1xyXG4gICAgICAgIGZvciAodmFyIGl0ZW1WYXJpYWJsZSBvZiBpdGVtVmFyaWFibGVzKSB7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKGl0ZW1WYXJpYWJsZS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd2YXJpYWJsZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlKGl0ZW1WYXJpYWJsZS52YXJpYWJsZSwgdGhpcy5nZXRWYWx1ZU9wZXJhdG9yKGl0ZW1WYXJpYWJsZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAndmFyaWFibGVzJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHZhcmlhYmxlIG9mIGl0ZW1WYXJpYWJsZS52YXJpYWJsZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh2YXJpYWJsZSwgdGhpcy5nZXRWYWx1ZU9wZXJhdG9yKE9iamVjdC5hc3NpZ24oY2xvbmVPYmplY3RfRGVlcENsb25lKGl0ZW1WYXJpYWJsZSksIHsgdmFyaWFibGU6IHZhcmlhYmxlIH0pKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnc2xpZGUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb250ZW50RGF0YUhpZGUub3BlblNsaWRlKGl0ZW1WYXJpYWJsZS5zbGlkZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdF9SdW4ucnVuU2xpZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIGl0ZW1WYXJpYWJsZS5zbGlkZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdub2RlJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vYWN0aW9uQ2xpY2soZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaXRlbVZhcmlhYmxlLm5vZGUpLCBbJ3J1biddKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9zaG93IGlmIGhpZGVcclxuICAgICAgICAgICAgICAgICAgICBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9UcmlnZ2VyU2hvdyh7IGlkOiBpdGVtVmFyaWFibGUubm9kZSwgbm9kZVN0YXR1czogaWNkdF9SdW4ubm9kZVN0YXR1cywgc2xpZGVTdGF0dXM6IGljZHRfUnVuLnNsaWRlU3RhdHVzIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3J1blxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBub2RlID0gaWNkdF9SdW4uZmluZE5vZGUoaXRlbVZhcmlhYmxlLm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlPy5pbnRlcmFjdGl2ZT8uY2xpY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNkdF9SdW5fSW50ZXJhY3RpdmVfTm9kZUNsaWNrKG5vZGUsIGljZHRfUnVuLm5vZGVTdGF0dXMsIGljZHRfUnVuLnNsaWRlU3RhdHVzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvL0dFVCAxXHJcbiAgICBHZXRBY3Rpb25FeGVjdXRpbmdzOiBBcnJheTxGdW5jdGlvbj4gPSBbXTtcclxuICAgIEZ1bmNHZXRFeGVjdXRpbmdzKGY6IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBmID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhpcy5HZXRBY3Rpb25FeGVjdXRpbmdzLnB1c2goZik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE9uR2V0QWN0aW9uRXhlY3V0aW5nKGN1cnJlbnREYXRhOiBhbnkpIHtcclxuICAgICAgICAvL2RvIG15IGNvZGVcclxuICAgICAgICAvLy4uXHJcblxyXG4gICAgICAgIC8vZXhjdXRlXHJcbiAgICAgICAgdGhpcy5HZXRBY3Rpb25FeGVjdXRpbmdzLmZvckVhY2goKGYpID0+IHtcclxuICAgICAgICAgICAgZihjdXJyZW50RGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vR0VUIDJcclxuICAgIEdldEFjdGlvbkV4ZWN1dGVkczogQXJyYXk8RnVuY3Rpb24+ID0gW107XHJcbiAgICBGdW5jR2V0RXhlY3V0ZWRzID0gKGY6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZiA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuR2V0QWN0aW9uRXhlY3V0ZWRzLnB1c2goZik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE9uR2V0QWN0aW9uRXhlY3V0ZWQgPSAoY3VycmVudERhdGE6IGFueSkgPT4ge1xyXG4gICAgICAgIC8vZXhjdXRlXHJcbiAgICAgICAgdGhpcy5HZXRBY3Rpb25FeGVjdXRlZHMuZm9yRWFjaCgoZikgPT4ge1xyXG4gICAgICAgICAgICBmKGN1cnJlbnREYXRhKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy9kbyBteSBjb2RlXHJcbiAgICAgICAgLy8uLlxyXG4gICAgfTtcclxuXHJcbiAgICAvL1NFVCAxXHJcbiAgICBTZXRBY3Rpb25FeGVjdXRpbmdzOiBBcnJheTxGdW5jdGlvbj4gPSBbXTtcclxuICAgIEZ1bmNTZXRFeGVjdXRpbmdzID0gKGY6IEZ1bmN0aW9uKSA9PiB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBmID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhpcy5TZXRBY3Rpb25FeGVjdXRpbmdzLnB1c2goZik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE9uU2V0QWN0aW9uRXhlY3V0aW5nID0gKGN1cnJlbnREYXRhOiBhbnkpID0+IHtcclxuICAgICAgICAvL2RvIG15IGNvZGVcclxuICAgICAgICAvLy4uXHJcblxyXG4gICAgICAgIC8vZXhjdXRlXHJcbiAgICAgICAgdGhpcy5TZXRBY3Rpb25FeGVjdXRpbmdzLmZvckVhY2goKGYpID0+IHtcclxuICAgICAgICAgICAgZihjdXJyZW50RGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vU0VUIDJcclxuICAgIFNldEFjdGlvbkV4ZWN1dGVkczogQXJyYXk8RnVuY3Rpb24+ID0gW107XHJcbiAgICBGdW5jU2V0RXhlY3V0ZWRzID0gKGY6IEZ1bmN0aW9uKSA9PiB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBmID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhpcy5TZXRBY3Rpb25FeGVjdXRlZHMucHVzaChmKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT25TZXRBY3Rpb25FeGVjdXRlZCA9IChjdXJyZW50RGF0YTogYW55KSA9PiB7XHJcbiAgICAgICAgLy9leGN1dGVcclxuICAgICAgICB0aGlzLlNldEFjdGlvbkV4ZWN1dGVkcy5mb3JFYWNoKChmKSA9PiB7XHJcbiAgICAgICAgICAgIGYoY3VycmVudERhdGEpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvL2RvIG15IGNvZGVcclxuICAgICAgICAvLy4uXHJcbiAgICAgICAgLy9mb3IgKHZhciBjb25kIG9mIGN1cnJlbnREYXRhLmNoYW5nZSB8fCBbXSkge1xyXG4gICAgICAgIC8vICAgIGlmIChjb25kLmlmICYmIGNvbmQuaWYubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIC8vICAgICAgICBpZiAodGhpcy5jaGVja1ZhbHVlQ29uZGl0aW9ucyhjb25kLmlmKSkge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZU9wZXJhdG9ycyhjb25kLnRoZW4gfHwgW10pO1xyXG4gICAgICAgIC8vICAgICAgICB9XHJcbiAgICAgICAgLy8gICAgICAgIGVsc2Uge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZU9wZXJhdG9ycyhjb25kLmVsc2UgfHwgW10pO1xyXG4gICAgICAgIC8vICAgICAgICB9XHJcbiAgICAgICAgLy8gICAgfVxyXG4gICAgICAgIC8vfVxyXG5cclxuICAgICAgICBmb3IgKHZhciBjb25kIG9mIHRoaXMuZ2V0Q29uZGl0aW9uKGN1cnJlbnREYXRhLmtleSkgfHwgW10pIHtcclxuICAgICAgICAgICAgaWYgKGNvbmQuaWYgJiYgY29uZC5pZi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja1ZhbHVlQ29uZGl0aW9ucyhjb25kLmlmKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVPcGVyYXRvcnMoY29uZC50aGVuIHx8IFtdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVPcGVyYXRvcnMoY29uZC5lbHNlIHx8IFtdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuIiwiLyoqXHJcbiAqIE1vdXNlRXZlbnRcclxuICogICAgICBvZmZzZXQgLT4gZOG7sWEgdHLDqm4gduG7iyB0csOtIGNsaWNrIHRyw6puIHBo4bqnbiB04butXHJcbiAqICAgICAgY2xpZW50IC0+IGThu7FhIHRyw6puIHbhu4sgdHLDrSBjbGljayBj4bunYSBtw6BuIGjDrG5oXHJcbiAqXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgVl9Qb2ludGVyVHlwZSB9IGZyb20gXCIuLi8uLi9sb29rdXAvVl9Qb2ludGVyVHlwZVwiO1xyXG5pbXBvcnQgeyBpY2R0IH0gZnJvbSBcIi4uLy4uL3Byb3RvdHlwZS9pY2R0XCI7XHJcbmltcG9ydCB7IGljZHRfUG9pbnRlckhhbmRsZSB9IGZyb20gXCIuL3BvaW50ZXItaGFuZGxlXCI7XHJcbmltcG9ydCB7IGljZHRfUG9pbnRlclNjYWxlIH0gZnJvbSBcIi4vcG9pbnRlci1zY2FsZVwiO1xyXG5cclxuXHJcbi8qKiBFWEFNUExFXHJcblxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3RTdmcnKT8uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKGUpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICBuZXcgaWNkdF9Qb2ludGVyRXZlbnQoZSwge30pO1xyXG4gICAgfSk7XHJcblxyXG4gKi9cclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X1BvaW50ZXJFdmVudCA9IChldmVudDogTW91c2VFdmVudCwgb3B0aW9uczogeyBzdGFydD86IEZ1bmN0aW9uLCBtb3ZlPzogRnVuY3Rpb24sIGVuZD86IEZ1bmN0aW9uIH0sIHNjYWxlPzogbnVtYmVyLCBwb3NpdGlvbj86IHsgeDogbnVtYmVyLCB5OiBudW1iZXIgfSwgb2Zmc2V0PzogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9KSA9PiB7XHJcbiAgICAvKlxyXG4gICAgICAgIGxldCBfc2NhbGUgPSBzY2FsZSA/PyBpY2R0LnNjcmVlbi5zY2FsZSxcclxuICAgICAgICAgICAgX3Bvc2l0aW9uID0gcG9zaXRpb24gPz8gaWNkdC5zY3JlZW4ucG9zaXRpb24sXHJcbiAgICAgICAgICAgIF9vZmZzZXQgPSBvZmZzZXQgPz8gaWNkdC5zY3JlZW4ub2Zmc2V0LFxyXG4gICAgICAgICAgICBfZm4gPSAoKSA9PiB7IH07XHJcblxyXG4gICAgICAgIHZhciBwb2ludGVySGFuZGxlID0gbmV3IGljZHRfUG9pbnRlckhhbmRsZSh7IHN0YXJ0OiBvcHRpb25zPy5zdGFydCA/PyBfZm4sIG1vdmU6IG9wdGlvbnM/Lm1vdmUgPz8gX2ZuLCBlbmQ6IG9wdGlvbnM/LmVuZCA/PyBfZm4gfSk7XHJcblxyXG4gICAgICAgIHBvaW50ZXJIYW5kbGUuc3RhcnQoXHJcbiAgICAgICAgICAgIGljZHRfUG9pbnRlclNjYWxlKHsgeDogZXZlbnQub2Zmc2V0WCwgeTogZXZlbnQub2Zmc2V0WSB9LCBfc2NhbGUsIHsgeDogMCwgeTogMCB9LCB7IHg6IDAsIHk6IDAgfSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBsZXQgbW92ZSA9IChlOiB7IGNsaWVudFg6IG51bWJlciwgY2xpZW50WTogbnVtYmVyIH0pID0+IHtcclxuICAgICAgICAgICAgcG9pbnRlckhhbmRsZS5tb3ZlKFxyXG4gICAgICAgICAgICAgICAgaWNkdF9Qb2ludGVyU2NhbGUoeyB4OiBlLmNsaWVudFgsIHk6IGUuY2xpZW50WSB9LCBfc2NhbGUsIF9wb3NpdGlvbiwgX29mZnNldClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBsZXQgZW5kID0gKGU6IHsgc2hpZnRLZXk/OiBib29sZWFuLCBjdHJsS2V5PzogYm9vbGVhbiwgYWx0S2V5PzogYm9vbGVhbiB9KSA9PiB7XHJcblxyXG4gICAgICAgICAgICBwb2ludGVySGFuZGxlLmVuZCgpO1xyXG5cclxuICAgICAgICAgICAgLy9u4bq/dSB24bq9IHhvbmcgMSDEkeG7kWkgdMaw4bujbmcgbcOgIGtvIGdp4buvIFNoaWZ0IHRow6wgc+G6vSBjaOG7iSB24bq9IDEgbOG6p24gcuG7k2kgdHLhu58gduG7gSBwb2ludGVyXHJcbiAgICAgICAgICAgIGlmICghZS5zaGlmdEtleSAmJlxyXG4gICAgICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgICAgIGljZHQucG9pbnRlci5wb2ludGVyX3R5cGUgPT0gVl9Qb2ludGVyVHlwZS5TSEFQRSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIGljZHQucG9pbnRlci5wb2ludGVyX3R5cGUgPT0gVl9Qb2ludGVyVHlwZS5GT1JFSUdOT0JKRUNUIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdC5wb2ludGVyLnBvaW50ZXJfdHlwZSA9PSBWX1BvaW50ZXJUeXBlLklNQUdFIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdC5wb2ludGVyLnBvaW50ZXJfdHlwZSA9PSBWX1BvaW50ZXJUeXBlLlRFWFRcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBpY2R0LnBvaW50ZXIucG9pbnRlcl90eXBlID0gVl9Qb2ludGVyVHlwZS5QT0lOVEVSO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgbGV0IGhhbmRsZU1vdXNlTW92ZSA9IChlOiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coZS50eXBlLCBlLnRhcmdldCk7XHJcbiAgICAgICAgICAgIGlmIChlLmJ1dHRvbiAhPSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG1vdmUoeyBjbGllbnRYOiBlLmNsaWVudFgsIGNsaWVudFk6IGUuY2xpZW50WSB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBoYW5kbGVNb3VzZVVwID0gKGU6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhlLnR5cGUsIGUudGFyZ2V0KTtcclxuICAgICAgICAgICAgaWYgKGUuYnV0dG9uICE9IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZW5kKHsgc2hpZnRLZXk6IGUuc2hpZnRLZXksIGN0cmxLZXk6IGUuY3RybEtleSwgYWx0S2V5OiBlLmFsdEtleSB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBoYW5kbGVNb3VzZU1vdmUsIGZhbHNlKTtcclxuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBoYW5kbGVNb3VzZVVwLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaGFuZGxlVG91Y2hNb3ZlID0gKGU6IFRvdWNoRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhlLnR5cGUsIGUudGFyZ2V0KTtcclxuICAgICAgICAgICAgaWYgKGUudG91Y2hlcy5sZW5ndGgpIG1vdmUoeyBjbGllbnRYOiBlLnRvdWNoZXNbMF0uY2xpZW50WCwgY2xpZW50WTogZS50b3VjaGVzWzBdLmNsaWVudFkgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaGFuZGxlVG91Y2hFbmQgPSAoZTogVG91Y2hFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKGUudHlwZSwgZS50YXJnZXQpO1xyXG4gICAgICAgICAgICBlbmQoeyBzaGlmdEtleTogZS5zaGlmdEtleSwgY3RybEtleTogZS5jdHJsS2V5LCBhbHRLZXk6IGUuYWx0S2V5IH0pO1xyXG5cclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGhhbmRsZVRvdWNoTW92ZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBoYW5kbGVUb3VjaEVuZCwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9rw61jaCBob+G6oXQgbMawdSBnaeG7ryB24buLIHRyw60gY2jhuqFtIGtoaSBkw7luZyBjaHXhu5l0XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGhhbmRsZU1vdXNlTW92ZSwgZmFsc2UpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgaGFuZGxlTW91c2VVcCwgZmFsc2UpO1xyXG5cclxuICAgICAgICAvL2vDrWNoIGhv4bqhdCBsxrB1IGdp4buvIHbhu4sgdHLDrSBjaOG6oW0gbuG6v3UgdG91Y2ggxJHGsOG7o2Mga8OtY2ggaG/huqF0XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGhhbmRsZVRvdWNoTW92ZSwgZmFsc2UpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGhhbmRsZVRvdWNoRW5kLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgZXZlbnQudGFyZ2V0Py5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBmdW5jdGlvbiAoZSkgeyBlLnByZXZlbnREZWZhdWx0KCk7IH0pO1xyXG4gICAgKi9cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfUG9pbnRlckV2ZW50cyA9IChldmVudHM6IHsgbW91c2VFdmVudD86IE1vdXNlRXZlbnQsIHRvdWNoRXZlbnQ/OiBUb3VjaEV2ZW50IH0sIG9wdGlvbnM6IHsgc3RhcnQ/OiBGdW5jdGlvbiwgbW92ZT86IEZ1bmN0aW9uLCBlbmQ/OiBGdW5jdGlvbiB9LCBzY2FsZT86IG51bWJlciwgZGlzbG9jYXRpb24/OiB7IHg6IG51bWJlciwgeTogbnVtYmVyIH0sIG9mZnNldD86IHsgeDogbnVtYmVyLCB5OiBudW1iZXIgfSkgPT4ge1xyXG5cclxuICAgIGxldCB0YXJnZXQ6IEV2ZW50VGFyZ2V0IHwgbnVsbCA9IG51bGw7XHJcbiAgICBsZXQgb2Zmc2V0WCA9IDAsIG9mZnNldFkgPSAwO1xyXG5cclxuICAgIGlmIChldmVudHMubW91c2VFdmVudCkge1xyXG4gICAgICAgIHRhcmdldCA9IGV2ZW50cy5tb3VzZUV2ZW50LnRhcmdldDtcclxuXHJcbiAgICAgICAgb2Zmc2V0WCA9IGV2ZW50cy5tb3VzZUV2ZW50Lm9mZnNldFg7XHJcbiAgICAgICAgb2Zmc2V0WSA9IGV2ZW50cy5tb3VzZUV2ZW50Lm9mZnNldFlcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGV2ZW50cy50b3VjaEV2ZW50KSB7XHJcbiAgICAgICAgdGFyZ2V0ID0gZXZlbnRzLnRvdWNoRXZlbnQudGFyZ2V0O1xyXG5cclxuICAgICAgICBpZiAoZXZlbnRzLnRvdWNoRXZlbnQudG91Y2hlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgb2Zmc2V0WCA9IGV2ZW50cy50b3VjaEV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WDtcclxuICAgICAgICAgICAgb2Zmc2V0WSA9IGV2ZW50cy50b3VjaEV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IF9zY2FsZSA9IHNjYWxlID8/IGljZHQuc2NyZWVuLnNjYWxlLFxyXG4gICAgICAgIF9kaXNsb2NhdGlvbiA9IGRpc2xvY2F0aW9uID8/IGljZHQuc2NyZWVuLmRpc2xvY2F0aW9uLFxyXG4gICAgICAgIF9vZmZzZXQgPSBvZmZzZXQgPz8gaWNkdC5zY3JlZW4ub2Zmc2V0LFxyXG4gICAgICAgIF9mbiA9ICgpID0+IHsgfTtcclxuXHJcbiAgICB2YXIgcG9pbnRlckhhbmRsZSA9IG5ldyBpY2R0X1BvaW50ZXJIYW5kbGUoeyBzdGFydDogb3B0aW9ucz8uc3RhcnQgPz8gX2ZuLCBtb3ZlOiBvcHRpb25zPy5tb3ZlID8/IF9mbiwgZW5kOiBvcHRpb25zPy5lbmQgPz8gX2ZuIH0pO1xyXG5cclxuICAgIGlmIChldmVudHMubW91c2VFdmVudCkge1xyXG4gICAgICAgIHBvaW50ZXJIYW5kbGUuc3RhcnQoXHJcbiAgICAgICAgICAgIGljZHRfUG9pbnRlclNjYWxlKHsgeDogb2Zmc2V0WCwgeTogb2Zmc2V0WSB9LCBfc2NhbGUsIF9kaXNsb2NhdGlvbiwgeyB4OiAwLCB5OiAwIH0pXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGV2ZW50cy50b3VjaEV2ZW50KSB7XHJcbiAgICAgICAgcG9pbnRlckhhbmRsZS5zdGFydChcclxuICAgICAgICAgICAgaWNkdF9Qb2ludGVyU2NhbGUoeyB4OiBvZmZzZXRYLCB5OiBvZmZzZXRZIH0sIF9zY2FsZSwgX2Rpc2xvY2F0aW9uLCBfb2Zmc2V0KVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG1vdmUgPSAoZTogeyBjbGllbnRYOiBudW1iZXIsIGNsaWVudFk6IG51bWJlciB9KSA9PiB7XHJcbiAgICAgICAgcG9pbnRlckhhbmRsZS5tb3ZlKFxyXG4gICAgICAgICAgICBpY2R0X1BvaW50ZXJTY2FsZSh7IHg6IGUuY2xpZW50WCwgeTogZS5jbGllbnRZIH0sIF9zY2FsZSwgX2Rpc2xvY2F0aW9uLCBfb2Zmc2V0KVxyXG4gICAgICAgICk7XHJcbiAgICB9O1xyXG5cclxuICAgIGxldCBlbmQgPSAoZTogeyBzaGlmdEtleT86IGJvb2xlYW4sIGN0cmxLZXk/OiBib29sZWFuLCBhbHRLZXk/OiBib29sZWFuIH0pID0+IHtcclxuICAgICAgICBwb2ludGVySGFuZGxlLmVuZCgpO1xyXG5cclxuICAgICAgICAvL27hur91IHbhur0geG9uZyAxIMSR4buRaSB0xrDhu6NuZyBtw6Aga28gZ2nhu68gU2hpZnQgdGjDrCBz4bq9IGNo4buJIHbhur0gMSBs4bqnbiBy4buTaSB0cuG7nyB24buBIHBvaW50ZXJcclxuICAgICAgICBpZiAoW1ZfUG9pbnRlclR5cGUuU0hBUEUsIFZfUG9pbnRlclR5cGUuRk9SRUlHTk9CSkVDVCwgVl9Qb2ludGVyVHlwZS5JTUFHRSwgVl9Qb2ludGVyVHlwZS5URVhUXS5pbmNsdWRlcyhpY2R0LnBvaW50ZXIucG9pbnRlcl90eXBlKSkge1xyXG4gICAgICAgICAgICBpZiAoZS5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGljZHQucG9pbnRlci5wb2ludGVyX3R5cGUgPSBWX1BvaW50ZXJUeXBlLlBPSU5URVI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGxldCBoYW5kbGVUb3VjaE1vdmUgPSAoZTogVG91Y2hFdmVudCkgPT4ge1xyXG4gICAgICAgIGlmIChlLnRvdWNoZXMubGVuZ3RoKSBtb3ZlKHsgY2xpZW50WDogZS50b3VjaGVzWzBdLmNsaWVudFgsIGNsaWVudFk6IGUudG91Y2hlc1swXS5jbGllbnRZIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBoYW5kbGVUb3VjaEVuZCA9IChlOiBUb3VjaEV2ZW50KSA9PiB7XHJcbiAgICAgICAgZW5kKHsgc2hpZnRLZXk6IGUuc2hpZnRLZXksIGN0cmxLZXk6IGUuY3RybEtleSwgYWx0S2V5OiBlLmFsdEtleSB9KTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgaGFuZGxlVG91Y2hNb3ZlLCBmYWxzZSk7XHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgaGFuZGxlVG91Y2hFbmQsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaGFuZGxlTW91c2VNb3ZlID0gKGU6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgICBpZiAoZS5idXR0b24gIT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1vdmUoeyBjbGllbnRYOiBlLmNsaWVudFgsIGNsaWVudFk6IGUuY2xpZW50WSB9KTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaGFuZGxlTW91c2VVcCA9IChlOiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKGUuYnV0dG9uICE9IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZW5kKHsgc2hpZnRLZXk6IGUuc2hpZnRLZXksIGN0cmxLZXk6IGUuY3RybEtleSwgYWx0S2V5OiBlLmFsdEtleSB9KTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgaGFuZGxlTW91c2VNb3ZlLCBmYWxzZSk7XHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBoYW5kbGVNb3VzZVVwLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGV2ZW50cy5tb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgLy9rw61jaCBob+G6oXQgbMawdSBnaeG7ryB24buLIHRyw60gY2jhuqFtIGtoaSBkw7luZyBjaHXhu5l0XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGhhbmRsZU1vdXNlTW92ZSwgZmFsc2UpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgaGFuZGxlTW91c2VVcCwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZXZlbnRzLnRvdWNoRXZlbnQpIHtcclxuICAgICAgICAvL2vDrWNoIGhv4bqhdCBsxrB1IGdp4buvIHbhu4sgdHLDrSBjaOG6oW0gbuG6v3UgdG91Y2ggxJHGsOG7o2Mga8OtY2ggaG/huqF0XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGhhbmRsZVRvdWNoTW92ZSwgZmFsc2UpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGhhbmRsZVRvdWNoRW5kLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdGFyZ2V0Py5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBmdW5jdGlvbiAoZSkgeyBlLnByZXZlbnREZWZhdWx0KCk7IH0pO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgaWNkdF9JUG9pbnRlckV2ZW50IH0gZnJvbSBcIi4uLy4uL2ludGVyZmFjZS9JUG9pbnRlckV2ZW50XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgaWNkdF9Qb2ludGVySGFuZGxlIGltcGxlbWVudHMgaWNkdF9JUG9pbnRlckV2ZW50IHtcclxuXHJcbiAgICBwcml2YXRlIF9wb2ludHM6IEFycmF5PFtudW1iZXIsIG51bWJlcl0+O1xyXG5cclxuICAgIHByaXZhdGUgX29wdGlvbnM7XHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogeyBzdGFydDogRnVuY3Rpb24sIG1vdmU6IEZ1bmN0aW9uLCBlbmQ6IEZ1bmN0aW9uIH0pIHtcclxuICAgICAgICB0aGlzLl9wb2ludHMgPSBbXTtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnQob2Zmc2V0OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB9KSB7XHJcblxyXG4gICAgICAgIHRoaXMuX3BvaW50cy5sZW5ndGggPSAwO1xyXG4gICAgICAgIHRoaXMuX3BvaW50cy5wdXNoKFtvZmZzZXQueCwgb2Zmc2V0LnldKTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLl9vcHRpb25zLnN0YXJ0KG9mZnNldCk7XHJcbiAgICB9XHJcblxyXG4gICAgbW92ZShvZmZzZXQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH0pIHtcclxuICAgICAgICB0aGlzLl9wb2ludHMucHVzaChbb2Zmc2V0LngsIG9mZnNldC55XSk7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5tb3ZlKG9mZnNldCwgdGhpcy5fcG9pbnRzKTtcclxuICAgIH1cclxuXHJcbiAgICBlbmQoKSB7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5lbmQodGhpcy5vZmZzZXRMYXN0LCB0aGlzLl9wb2ludHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBvZmZzZXRGaXJzdCgpIHtcclxuICAgICAgICBpZiAodGhpcy5fcG9pbnRzLmxlbmd0aCA+PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKHBvaW50cykgPT4geyByZXR1cm4geyB4OiBwb2ludHNbMF0sIHk6IHBvaW50c1sxXSB9IH0pKHRoaXMuX3BvaW50c1swXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IHg6IDAsIHk6IDAgfTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgb2Zmc2V0TGFzdCgpIHtcclxuICAgICAgICBpZiAodGhpcy5fcG9pbnRzLmxlbmd0aCA+PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKHBvaW50cykgPT4geyByZXR1cm4geyB4OiBwb2ludHNbMF0sIHk6IHBvaW50c1sxXSB9IH0pKHRoaXMuX3BvaW50c1t0aGlzLl9wb2ludHMubGVuZ3RoIC0gMV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyB4OiAwLCB5OiAwIH07XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBpY2R0X1JvdW5kTnVtYmVyIH0gZnJvbSBcIi4uL2hhbmRsZS9yb3VuZC1udW1iZXJcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X1BvaW50ZXJTY2FsZSA9IChwb2ludDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSwgc2NhbGU6IG51bWJlciwgZGlzbG9jYXRpb246IHsgeDogbnVtYmVyLCB5OiBudW1iZXIgfSwgb2Zmc2V0OiB7IHg6IG51bWJlciwgeTogbnVtYmVyIH0pID0+IHtcclxuICAgIC8vdHLhu6sgxJFpIGtob+G6o25nIGPDoWNoIHThu6sga2h1bmcgdOG7m2kgZ8OzYyBtw6BuIGjDrG5oXHJcbiAgICBwb2ludC54IC09IG9mZnNldC54O1xyXG4gICAgcG9pbnQueSAtPSBvZmZzZXQueTtcclxuXHJcbiAgICBwb2ludC54IC89IHNjYWxlO1xyXG4gICAgcG9pbnQueSAvPSBzY2FsZTtcclxuXHJcbiAgICBwb2ludC54IC09IGRpc2xvY2F0aW9uLng7XHJcbiAgICBwb2ludC55IC09IGRpc2xvY2F0aW9uLnk7XHJcblxyXG4gICAgLy9sYW0gdHJvbiBzb1xyXG4gICAgcG9pbnQueCA9IGljZHRfUm91bmROdW1iZXIocG9pbnQueCk7XHJcbiAgICBwb2ludC55ID0gaWNkdF9Sb3VuZE51bWJlcihwb2ludC55KTtcclxuXHJcbiAgICByZXR1cm4gcG9pbnQ7XHJcbn0iLCJpbXBvcnQgeyBWX1BvaW50ZXJUeXBlIH0gZnJvbSBcIi4uLy4uL2xvb2t1cC9WX1BvaW50ZXJUeXBlXCI7XHJcbmltcG9ydCB7IFZfU2hhcGVUeXBlIH0gZnJvbSBcIi4uLy4uL2xvb2t1cC9WX1NoYXBlVHlwZVwiO1xyXG5pbXBvcnQgeyBWX1BlblR5cGUgfSBmcm9tIFwiLi4vLi4vbG9va3VwL1ZfUGVuVHlwZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIGljZHRfUG9pbnRlclR5cGVfQ2hpQ2hpQ2hvQ2hvIHtcclxuICAgIC8vbHYxXHJcbiAgICBwcml2YXRlIF9wb2ludGVyX3R5cGU6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX3BvaW50ZXJfdHlwZV90ZW1wOiBudW1iZXI7XHJcblxyXG4gICAgLy9sdjJcclxuICAgIHByaXZhdGUgX3Blbl90eXBlOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9zaGFwZV90eXBlOiBudW1iZXI7XHJcblxyXG4gICAgLy9sdjNcclxuICAgIHByaXZhdGUgX3BvbHlnb25fdHlwZTogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuX3BvaW50ZXJfdHlwZSA9IDA7XHJcbiAgICAgICAgdGhpcy5fcG9pbnRlcl90eXBlX3RlbXAgPSAwO1xyXG4gICAgICAgIHRoaXMuX3Blbl90eXBlID0gMDtcclxuICAgICAgICB0aGlzLl9zaGFwZV90eXBlID0gMDtcclxuICAgICAgICB0aGlzLl9wb2x5Z29uX3R5cGUgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFBvaW50ZXJfbm9jaGFuZ2UocG9pbnRlcl90eXBlOiBudW1iZXIsIHBvaW50ZXJfbHYyPzogbnVtYmVyLCBwb2ludGVyX2x2Mz86IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3BvaW50ZXJfdHlwZSA9IHBvaW50ZXJfdHlwZTtcclxuXHJcbiAgICAgICAgaWYgKHBvaW50ZXJfbHYyKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAocG9pbnRlcl90eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFZfUG9pbnRlclR5cGUuUEVOOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGVuX3R5cGUgPSBwb2ludGVyX2x2MjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgVl9Qb2ludGVyVHlwZS5TSEFQRToge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NoYXBlX3R5cGUgPSBwb2ludGVyX2x2MjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvaW50ZXJfbHYzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocG9pbnRlcl9sdjIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgVl9TaGFwZVR5cGUuUE9MWUdPTjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BvbHlnb25fdHlwZSA9IHBvaW50ZXJfbHYzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBwb2ludGVyX3R5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvaW50ZXJfdHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgcG9pbnRlcl90eXBlKHR5cGU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3BvaW50ZXJfdHlwZSA9IHR5cGU7XHJcblxyXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFZfUG9pbnRlclR5cGUuUEVOOiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3Blbl90eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGVuX3R5cGUgPSBWX1BlblR5cGUuRFJBVztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgVl9Qb2ludGVyVHlwZS5TSEFQRToge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9zaGFwZV90eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2hhcGVfdHlwZSA9IFZfU2hhcGVUeXBlLlJFQ1Q7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jaGFuZ2VQb2ludGVyVHlwZSh0aGlzLnBvaW50ZXJfdHlwZSk7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2UodGhpcy5wb2ludGVyX3R5cGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwb2ludGVyX3R5cGVfdGVtcCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcG9pbnRlcl90eXBlX3RlbXA7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHBvaW50ZXJfdHlwZV90ZW1wKHR5cGU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3BvaW50ZXJfdHlwZV90ZW1wID0gdHlwZTtcclxuXHJcbiAgICAgICAgdGhpcy5jaGFuZ2VQb2ludGVyVHlwZVRlbXAodGhpcy5wb2ludGVyX3R5cGUpO1xyXG4gICAgICAgIHRoaXMuY2hhbmdlKHRoaXMucG9pbnRlcl90eXBlX3RlbXApO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwZW5fdHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcGVuX3R5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHBlbl90eXBlKHR5cGU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3Blbl90eXBlID0gdHlwZTtcclxuXHJcbiAgICAgICAgdGhpcy5jaGFuZ2VQZW5UeXBlKHRoaXMucG9pbnRlcl90eXBlLCB0aGlzLnBlbl90eXBlKTtcclxuICAgICAgICB0aGlzLmNoYW5nZSh0aGlzLnBvaW50ZXJfdHlwZSwgdGhpcy5wZW5fdHlwZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNoYXBlX3R5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NoYXBlX3R5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHNoYXBlX3R5cGUodHlwZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fc2hhcGVfdHlwZSA9IHR5cGU7XHJcblxyXG4gICAgICAgIHRoaXMuY2hhbmdlU2hhcGVUeXBlKHRoaXMucG9pbnRlcl90eXBlLCB0aGlzLnNoYXBlX3R5cGUpO1xyXG4gICAgICAgIHRoaXMuY2hhbmdlKHRoaXMucG9pbnRlcl90eXBlLCB0aGlzLnNoYXBlX3R5cGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwb2x5Z29uX3R5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvbHlnb25fdHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgcG9seWdvbl90eXBlKHR5cGU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3BvbHlnb25fdHlwZSA9IHR5cGU7XHJcblxyXG4gICAgICAgIHRoaXMuY2hhbmdlUG9seWdvblR5cGUodGhpcy5wb2ludGVyX3R5cGUsIHRoaXMuc2hhcGVfdHlwZSwgdGhpcy5wb2x5Z29uX3R5cGUpO1xyXG4gICAgICAgIHRoaXMuY2hhbmdlKHRoaXMucG9pbnRlcl90eXBlLCB0aGlzLnNoYXBlX3R5cGUsIHRoaXMucG9seWdvbl90eXBlKTtcclxuICAgIH1cclxuXHJcbiAgICBfZm5DaGFuZ2VQb2ludGVyVHlwZXM6IEFycmF5PEZ1bmN0aW9uPiA9IFtdO1xyXG4gICAgc2V0IG9uY2hhbmdlUG9pbnRlclR5cGUoZm46IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5fZm5DaGFuZ2VQb2ludGVyVHlwZXMucHVzaChmbik7XHJcbiAgICB9XHJcbiAgICBjaGFuZ2VQb2ludGVyVHlwZShwb2ludGVyX3R5cGU6IG51bWJlciwgcG9pbnRlcl9sdjI/OiBudW1iZXIsIHBvaW50ZXJfbHYzPzogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fZm5DaGFuZ2VQb2ludGVyVHlwZXMuZm9yRWFjaChmID0+IGYocG9pbnRlcl90eXBlLCBwb2ludGVyX2x2MiwgcG9pbnRlcl9sdjMpKTtcclxuICAgIH1cclxuXHJcbiAgICBfZm5DaGFuZ2VQb2ludGVyVHlwZVRlbXBzOiBBcnJheTxGdW5jdGlvbj4gPSBbXTtcclxuICAgIHNldCBvbmNoYW5nZVBvaW50ZXJUeXBlVGVtcChmbjogRnVuY3Rpb24pIHtcclxuICAgICAgICB0aGlzLl9mbkNoYW5nZVBvaW50ZXJUeXBlVGVtcHMucHVzaChmbik7XHJcbiAgICB9XHJcbiAgICBjaGFuZ2VQb2ludGVyVHlwZVRlbXAocG9pbnRlcl90eXBlOiBudW1iZXIsIHBvaW50ZXJfbHYyPzogbnVtYmVyLCBwb2ludGVyX2x2Mz86IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX2ZuQ2hhbmdlUG9pbnRlclR5cGVUZW1wcy5mb3JFYWNoKGYgPT4gZihwb2ludGVyX3R5cGUsIHBvaW50ZXJfbHYyLCBwb2ludGVyX2x2MykpO1xyXG4gICAgfVxyXG5cclxuICAgIF9mbkNoYW5nZVBlblR5cGVzOiBBcnJheTxGdW5jdGlvbj4gPSBbXTtcclxuICAgIHNldCBvbmNoYW5nZVBlblR5cGUoZm46IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5fZm5DaGFuZ2VQZW5UeXBlcy5wdXNoKGZuKTtcclxuICAgIH1cclxuICAgIGNoYW5nZVBlblR5cGUocG9pbnRlcl90eXBlOiBudW1iZXIsIHBvaW50ZXJfbHYyPzogbnVtYmVyLCBwb2ludGVyX2x2Mz86IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX2ZuQ2hhbmdlUGVuVHlwZXMuZm9yRWFjaChmID0+IGYocG9pbnRlcl90eXBlLCBwb2ludGVyX2x2MiwgcG9pbnRlcl9sdjMpKTtcclxuICAgIH1cclxuXHJcbiAgICBfZm5DaGFuZ2VTaGFwZVR5cGVzOiBBcnJheTxGdW5jdGlvbj4gPSBbXTtcclxuICAgIHNldCBvbmNoYW5nZVNoYXBlVHlwZShmbjogRnVuY3Rpb24pIHtcclxuICAgICAgICB0aGlzLl9mbkNoYW5nZVNoYXBlVHlwZXMucHVzaChmbik7XHJcbiAgICB9XHJcbiAgICBjaGFuZ2VTaGFwZVR5cGUocG9pbnRlcl90eXBlOiBudW1iZXIsIHBvaW50ZXJfbHYyPzogbnVtYmVyLCBwb2ludGVyX2x2Mz86IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX2ZuQ2hhbmdlU2hhcGVUeXBlcy5mb3JFYWNoKGYgPT4gZihwb2ludGVyX3R5cGUsIHBvaW50ZXJfbHYyLCBwb2ludGVyX2x2MykpO1xyXG4gICAgfVxyXG5cclxuICAgIF9mbkNoYW5nZVBvbHlnb25UeXBlczogQXJyYXk8RnVuY3Rpb24+ID0gW107XHJcbiAgICBzZXQgb25jaGFuZ2VQb2x5Z29uVHlwZShmbjogRnVuY3Rpb24pIHtcclxuICAgICAgICB0aGlzLl9mbkNoYW5nZVBvbHlnb25UeXBlcy5wdXNoKGZuKTtcclxuICAgIH1cclxuICAgIGNoYW5nZVBvbHlnb25UeXBlKHBvaW50ZXJfdHlwZTogbnVtYmVyLCBwb2ludGVyX2x2Mj86IG51bWJlciwgcG9pbnRlcl9sdjM/OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9mbkNoYW5nZVBvbHlnb25UeXBlcy5mb3JFYWNoKGYgPT4gZihwb2ludGVyX3R5cGUsIHBvaW50ZXJfbHYyLCBwb2ludGVyX2x2MykpO1xyXG4gICAgfVxyXG5cclxuICAgIF9mbkNoYW5nZXM6IEFycmF5PEZ1bmN0aW9uPiA9IFtdO1xyXG4gICAgc2V0IG9uY2hhbmdlKGZuOiBGdW5jdGlvbikge1xyXG4gICAgICAgIHRoaXMuX2ZuQ2hhbmdlcy5wdXNoKGZuKTtcclxuICAgIH1cclxuICAgIGNoYW5nZShwb2ludGVyX2x2MTogbnVtYmVyLCBwb2ludGVyX2x2Mj86IG51bWJlciwgcG9pbnRlcl9sdjM/OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9mbkNoYW5nZXMuZm9yRWFjaChmID0+IGYocG9pbnRlcl9sdjEsIHBvaW50ZXJfbHYyLCBwb2ludGVyX2x2MykpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFZfSUQgfSBmcm9tIFwiLi4vbG9va3VwL1ZfSURcIjtcclxuaW1wb3J0IHsgaWNkdCB9IGZyb20gJy4uL3Byb3RvdHlwZS9pY2R0JztcclxuaW1wb3J0IHsgaWNkdF9SdW5fU2xpZGUgfSBmcm9tICcuL3J1bi9zbGlkZSc7XHJcbmltcG9ydCB7IGljZHRfSURhdGFWYXJpYWJsZSB9IGZyb20gXCIuLi9pbnRlcmZhY2UvSURhdGFWYXJpYWJsZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbiwgc3luY0JhY2tncm91bmQgfSBmcm9tIFwiLi9zeW5jLWVsZW1lbnQvc3ZnLWVsZW1lbnRcIjtcclxuaW1wb3J0IHsgaWNkdF9JRGF0YU5vZGUsIGljZHRfSURhdGFTbGlkZSwgaWNkdF9JRGF0YVNvdXJjZSB9IGZyb20gXCIuLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuXHJcbmNsYXNzIGljZHRfUnVuX0NoYXlOZ2F5RGkge1xyXG5cclxuICAgIHByaXZhdGUgX25vZGVTdGF0dXM6IG51bWJlciA9IDA7XHJcbiAgICBwcml2YXRlIF9zbGlkZVN0YXR1czogbnVtYmVyID0gMDtcclxuXHJcbiAgICBwcml2YXRlIF9kYXRhU291cmNlPzogaWNkdF9JRGF0YVNvdXJjZTtcclxuXHJcbiAgICBwcml2YXRlIF9zbGlkZUlkeDogbnVtYmVyID0gMDtcclxuXHJcbiAgICBzZXQgZGF0YShkOiB7IGRhdGE6IGljZHRfSURhdGFTb3VyY2UsIHZhcmlhYmxlOiBpY2R0X0lEYXRhVmFyaWFibGUgfSkge1xyXG4gICAgICAgIHRoaXMuX2RhdGFTb3VyY2UgPSBkLmRhdGEgfHwge307XHJcbiAgICAgICAgLy90aGlzLl9kYXRhVmFyaWFibGUgPSBkLnZhcmlhYmxlIHx8IHt9O1xyXG4gICAgICAgIGljZHQudmFyaWFibGUuc2V0ID0gZC52YXJpYWJsZSB8fCB7fTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbm9kZVN0YXR1cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbm9kZVN0YXR1cztcclxuICAgIH1cclxuXHJcbiAgICByZWZyZXNoTm9kZVN0YXR1cygpIHtcclxuICAgICAgICB0aGlzLl9ub2RlU3RhdHVzID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogOTk5OTk5OTk5KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25vZGVTdGF0dXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNsaWRlU3RhdHVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zbGlkZVN0YXR1cztcclxuICAgIH1cclxuXHJcbiAgICByZWZyZXNoU2xpZGVTdGF0dXMoKSB7XHJcbiAgICAgICAgdGhpcy5fc2xpZGVTdGF0dXMgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA5OTk5OTk5OTkpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fc2xpZGVTdGF0dXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNsaWRlSWR4KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zbGlkZUlkeDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc2xpZGVUb3RhbCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVNvdXJjZT8uc2xpZGVzPy5sZW5ndGggPz8gMDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc2xpZGVzKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5fZGF0YVNvdXJjZT8uc2xpZGVzIHx8IFtdKSBhcyBBcnJheTxpY2R0X0lEYXRhU2xpZGU+O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBzbGlkZSgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuX2RhdGFTb3VyY2U/LnNsaWRlcyB8fCBbXSlbdGhpcy5fc2xpZGVJZHhdIHx8IHt9IGFzIGljZHRfSURhdGFTbGlkZTtcclxuICAgIH1cclxuXHJcbiAgICBmaW5kTm9kZShub2RlSWQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBzbGlkZSA9IHRoaXMuX2RhdGFTb3VyY2U/LnNsaWRlcz8uZmluZCgoaXRlbTogaWNkdF9JRGF0YVNsaWRlLCBpZHg6IG51bWJlcikgPT4geyByZXR1cm4gaWR4ID09IHRoaXMuX3NsaWRlSWR4IH0pO1xyXG4gICAgICAgIGxldCBzdmcgPSBzbGlkZT8uc3ZnO1xyXG5cclxuICAgICAgICBsZXQgcmVjdXJzaXZlTm9kZXMgPSAobm9kZXM6IEFycmF5PGljZHRfSURhdGFOb2RlPiwgcGlkPzogbnVtYmVyKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBsZXQgbm9kZTogYW55ID0gbm9kZXM/LmZpbmQoZiA9PiBmLmlkID09IG5vZGVJZCk7XHJcbiAgICAgICAgICAgIGlmIChub2RlKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlLnBpZCA9IHBpZDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgaW5kZXggPSAwLCB0b3RhbCA9IG5vZGVzLmxlbmd0aCB8fCAwO1xyXG4gICAgICAgICAgICB3aGlsZSAoaW5kZXggPCB0b3RhbCAmJiAhbm9kZSkge1xyXG4gICAgICAgICAgICAgICAgbm9kZSA9IHJlY3Vyc2l2ZU5vZGVzKG5vZGVzW2luZGV4XS5ub2RlcyB8fCBbXSwgbm9kZXNbaW5kZXhdLmlkKTtcclxuICAgICAgICAgICAgICAgIGlmIChub2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBub2RlID0gcmVjdXJzaXZlTm9kZXMoc3ZnPy5ub2RlcyB8fCBbXSk7XHJcbiAgICAgICAgaWYgKG5vZGUpIHtcclxuICAgICAgICAgICAgbm9kZS5zdHlsZSA9IG5vZGUuc3R5bGUgPz8ge307XHJcbiAgICAgICAgICAgIG5vZGUuc291cmNlID0gbm9kZS5zb3VyY2UgPz8ge307XHJcbiAgICAgICAgICAgIG5vZGUuYW5pbWF0ZSA9IG5vZGUuYW5pbWF0ZSA/PyB7fTtcclxuICAgICAgICAgICAgbm9kZS5pbnRlcmFjdGl2ZSA9IG5vZGUuaW50ZXJhY3RpdmUgPz8ge307XHJcbiAgICAgICAgICAgIG5vZGUudmFyaWFibGUgPSBub2RlLnZhcmlhYmxlID8/IHt9O1xyXG5cclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnZmluZE5vZGUnLCBub2RlKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaWQ6IDAsXHJcbiAgICAgICAgICAgIHNpemU6IHsgeDogMCwgeTogMCwgd2lkdGg6IDAsIGhlaWdodDogMCB9LFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGU6IHt9LFxyXG4gICAgICAgICAgICBpc2Zha2U6IHRydWVcclxuICAgICAgICB9IGFzIGljZHRfSURhdGFOb2RlO1xyXG4gICAgfVxyXG5cclxuICAgIHJ1blNsaWRlKGlkeD86IG51bWJlciwgaWQ/OiBudW1iZXIsIGNvZGU/OiBzdHJpbmcgfCBudW1iZXIpIHtcclxuXHJcbiAgICAgICAgdGhpcy5yZWZyZXNoTm9kZVN0YXR1cygpO1xyXG4gICAgICAgIHRoaXMucmVmcmVzaFNsaWRlU3RhdHVzKCk7XHJcblxyXG4gICAgICAgIGxldCBzbGlkZTtcclxuXHJcbiAgICAgICAgaWYgKGNvZGUpIHtcclxuICAgICAgICAgICAgc2xpZGUgPSB0aGlzLl9kYXRhU291cmNlPy5zbGlkZXM/LmZpbmQoZiA9PiBmLmNvZGUgPT0gY29kZSB8fCBmLmlkID09IGNvZGUpO1xyXG4gICAgICAgICAgICBpZiAoc2xpZGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NsaWRlSWR4ID0gdGhpcy5fZGF0YVNvdXJjZT8uc2xpZGVzPy5pbmRleE9mKHNsaWRlKSB8fCAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlkKSB7XHJcbiAgICAgICAgICAgIHNsaWRlID0gdGhpcy5fZGF0YVNvdXJjZT8uc2xpZGVzPy5maW5kKGYgPT4gZi5pZCA9PSBpZCk7XHJcbiAgICAgICAgICAgIGlmIChzbGlkZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2xpZGVJZHggPSB0aGlzLl9kYXRhU291cmNlPy5zbGlkZXM/LmluZGV4T2Yoc2xpZGUpIHx8IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NsaWRlSWR4ID0gTWF0aC5taW4oTWF0aC5tYXgoaWR4IHx8IDAsIDApLCB0aGlzLnNsaWRlVG90YWwgLSAxKTtcclxuICAgICAgICAgICAgc2xpZGUgPSB0aGlzLnNsaWRlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNsaWRlKSB7XHJcbiAgICAgICAgICAgIC8vdGFvIGtodW5nIHN2Z1xyXG4gICAgICAgICAgICBzeW5jU3ZnKGljZHQuY29udGFpbmVyLCBpY2R0LnN2Zywgc2xpZGUsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgLy9u4buBblxyXG4gICAgICAgICAgICAvL3NldEJhY2tncm91bmQoc2xpZGUpO1xyXG4gICAgICAgICAgICBqUXVlcnkoaWNkdC5zdmcpLmZpbmQoJyMnICsgVl9JRC5CQUNLR1JPVU5EX0dST1VQKT8uZW1wdHkoKTtcclxuICAgICAgICAgICAgbGV0IGVsZUdyb3VwID0gaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24oVl9JRC5CQUNLR1JPVU5EX0dST1VQLCAnZycsIHVuZGVmaW5lZCwgaWNkdC5zdmcpO1xyXG4gICAgICAgICAgICBzeW5jQmFja2dyb3VuZChlbGVHcm91cCwgc2xpZGUpO1xyXG5cclxuICAgICAgICAgICAgLy9jaGF5IHRoaWV0IGxhcCBjdWEgc2xpZGVcclxuICAgICAgICAgICAgaWNkdF9SdW5fU2xpZGUoc2xpZGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLmNoYW5nZVNsaWRlKHRoaXMuc2xpZGVzLCB0aGlzLnNsaWRlPy5pZCwgdGhpcy5zbGlkZUlkeCwgdGhpcy5zbGlkZXMubGVuZ3RoLCBzbGlkZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZm5DaGFuZ2VTbGlkZXM6IEFycmF5PEZ1bmN0aW9uPiA9IFtdO1xyXG4gICAgc2V0IG9uQ2hhbmdlU2xpZGUoZm46IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5fZm5DaGFuZ2VTbGlkZXMucHVzaChmbik7XHJcbiAgICB9XHJcbiAgICBjaGFuZ2VTbGlkZShzbGlkZXM6IEFycmF5PGljZHRfSURhdGFTbGlkZT4sIGlkOiBudW1iZXIsIGlkeDogbnVtYmVyLCB0b3RhbDogbnVtYmVyLCBzbGlkZT86IGljZHRfSURhdGFTbGlkZSkge1xyXG4gICAgICAgIC8vY2FsbGJhY2tcclxuICAgICAgICB0aGlzLl9mbkNoYW5nZVNsaWRlcy5mb3JFYWNoKGYgPT4gZihzbGlkZXMsIGlkLCBpZHgsIHRvdGFsLCBzbGlkZSkpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfUnVuID0gbmV3IGljZHRfUnVuX0NoYXlOZ2F5RGkoKTtcclxuXHJcbmV4cG9ydCBjb25zdCBzeW5jU3ZnID0gKGNvbnRhaW5lcklkOiBzdHJpbmcsIHN2Z0lkOiBzdHJpbmcsIHNsaWRlPzogaWNkdF9JRGF0YVNsaWRlLCByZU5ldz86IGJvb2xlYW4pID0+IHtcclxuXHJcbiAgICBsZXQgc3ZnRWxlbWVudCA9IHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKHN2Z0lkKSBhcyBTVkdFbGVtZW50O1xyXG5cclxuICAgIGlmICghc3ZnRWxlbWVudCkge1xyXG4gICAgICAgIHN2Z0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3N2ZycpXHJcbiAgICAgICAgd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVySWQpPy5hcHBlbmRDaGlsZChzdmdFbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocmVOZXcpIHtcclxuICAgICAgICBzdmdFbGVtZW50LnRleHRDb250ZW50ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgeyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0gPSBzbGlkZT8uc3ZnPy52aWV3Qm94ID8/IGljZHQuc2NyZWVuLmZyYW1lU2l6ZTtcclxuXHJcbiAgICBzdmdFbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwidmlld0JveFwiLCB4ICsgXCIgXCIgKyB5ICsgXCIgXCIgKyB3aWR0aCArIFwiIFwiICsgaGVpZ2h0KTtcclxuICAgIC8vc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcIndpZHRoXCIsIHNsaWRlLnN2Zy52aWV3Qm94LndpZHRoLnRvU3RyaW5nKCkpO1xyXG4gICAgLy9zdmdFbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiaGVpZ2h0XCIsIHNsaWRlLnN2Zy52aWV3Qm94LmhlaWdodC50b1N0cmluZygpKTtcclxuICAgIHN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgc3ZnSWQucmVwbGFjZSgnIycsICcnKSk7XHJcblxyXG4gICAgLy9cclxuICAgIHZhciB3aWR0aFZpZXcgPSBqUXVlcnkoY29udGFpbmVySWQpLndpZHRoKCkgPz8gMTA4MCxcclxuICAgICAgICBoZWlnaHRWaWV3ID0galF1ZXJ5KGNvbnRhaW5lcklkKS5oZWlnaHQoKSA/PyAxMDgwLFxyXG4gICAgICAgIHJhdGlvVmlldyA9IHdpZHRoVmlldyAvIGhlaWdodFZpZXcsXHJcbiAgICAgICAgcmF0aW9TbGlkZSA9IHdpZHRoIC8gaGVpZ2h0O1xyXG5cclxuICAgIHZhciBuZXdXaWR0aCwgbmV3SGVpZ2h0O1xyXG5cclxuICAgIGlmIChyYXRpb1NsaWRlID49IHJhdGlvVmlldykge1xyXG4gICAgICAgIG5ld1dpZHRoID0gd2lkdGhWaWV3O1xyXG4gICAgICAgIG5ld0hlaWdodCA9IG5ld1dpZHRoIC8gcmF0aW9TbGlkZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIG5ld0hlaWdodCA9IGhlaWdodFZpZXc7XHJcbiAgICAgICAgbmV3V2lkdGggPSBuZXdIZWlnaHQgKiByYXRpb1NsaWRlO1xyXG4gICAgfVxyXG5cclxuICAgIHN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ3aWR0aFwiLCBuZXdXaWR0aC50b1N0cmluZygpKTtcclxuICAgIHN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJoZWlnaHRcIiwgbmV3SGVpZ2h0LnRvU3RyaW5nKCkpO1xyXG59XHJcblxyXG4vLyBjb25zdCBzZXRCYWNrZ3JvdW5kID0gKHNsaWRlPzogaWNkdF9JRGF0YVNsaWRlKSA9PiB7XHJcbi8vICAgICBsZXQgeyBjb2xvciwgcGF0aCwgdXJsLCBiYXNlNjQgfSA9IHNsaWRlPy5zdmc/LmJhY2tncm91bmQgPz8ge307XHJcblxyXG4vLyAgICAgbGV0IHN2Z0VsZW1lbnQgPSBpY2R0LnRhcmdldCBhcyBIVE1MRWxlbWVudDtcclxuLy8gICAgIHN2Z0VsZW1lbnQuc3R5bGUuYmFja2dyb3VuZCA9IGAke2NvbG9yID8/IFwiXCJ9ICR7KCgpID0+IHtcclxuLy8gICAgICAgICBpZiAoYmFzZTY0KSB7XHJcbi8vICAgICAgICAgICAgIHJldHVybiBgdXJsKCR7YmFzZTY0fSkgNTAlIDUwJSAvIGNvdmVyIG5vLXJlcGVhdGA7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2UgaWYgKHVybCkge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gYHVybCgnJHt1cmx9JykgNTAlIDUwJSAvIGNvdmVyIG5vLXJlcGVhdGA7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2UgaWYgKHBhdGgpIHtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIGB1cmwoJyR7aWNkdC5jb25maWc/LnJlYWRmaWxldXBsb2FkdXJsICsgcGF0aH0nKSBuby1yZXBlYXQgNTAlIDUwJSAvIGNvdmVyYDtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgcmV0dXJuIG51bGw7XHJcbi8vICAgICB9KSgpID8/IFwiXCJ9YC50cmltKCk7XHJcbi8vIH0iLCJpbXBvcnQgeyBpY2R0X0lEYXRhTm9kZSB9IGZyb20gXCIuLi8uLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuaW1wb3J0IHsgaWNkdF9SdW4gfSBmcm9tIFwiLi4vLi4vcnVuXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9SdW5fQW5pbWF0ZV9BbmltYXRpb24gPSAobm9kZTogaWNkdF9JRGF0YU5vZGUsIG5vZGVTdGF0dXM6IG51bWJlciwgc2xpZGVTdGF0dXM6IG51bWJlcikgPT4ge1xyXG5cclxuICAgIGxldCBzdWNjZXNzID0gKCkgPT4ge1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coYEFuaW1hdGVOb2RlICMke25vZGUuaWR9IHN1Y2Nlc3MhYCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGxldCB7IHZhbHVlIH0gPSBub2RlLmFuaW1hdGUgPz8ge307XHJcblxyXG4gICAgcnVuQW5pbWF0aW9uKG5vZGUuaWQsIHsgbm9kZSwgdmFsdWUsIG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzIH0sIHN1Y2Nlc3MpO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcnVuQW5pbWF0aW9uID0gKG5vZGVJZDogbnVtYmVyIHwgc3RyaW5nLCBvcHRpb25zOiB7IG5vZGU6IGljZHRfSURhdGFOb2RlLCB2YWx1ZT86IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQsIHRpbWU/OiBudW1iZXIsIGl0ZXJhdGlvbj86IG51bWJlciwgZmluaXNoPzogbnVtYmVyLCBub2RlU3RhdHVzOiBudW1iZXIsIHNsaWRlU3RhdHVzOiBudW1iZXIgfSwgc3VjY2VzczogRnVuY3Rpb24pID0+IHtcclxuXHJcbiAgICBpZiAoIW9wdGlvbnMudmFsdWUpIHtcclxuICAgICAgICBzdWNjZXNzKCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBub2RlID0galF1ZXJ5KCcjJyArIG5vZGVJZCkucGFyZW50cygnZycpO1xyXG4gICAgaWYgKCFub2RlLmxlbmd0aCkge1xyXG4gICAgICAgIHN1Y2Nlc3MoKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHsgc2l6ZSB9ID0gb3B0aW9ucy5ub2RlO1xyXG4gICAgbm9kZS5jc3MoJ3RyYW5zZm9ybS1vcmlnaW4nLCBgJHtzaXplLnggKyBzaXplLndpZHRoIC8gMn1weCAke3NpemUueSArIHNpemUuaGVpZ2h0IC8gMn1weGApO1xyXG5cclxuICAgIGxldCBhbmltYXRpb25DbGFzcyA9ICcnLFxyXG4gICAgICAgIGxvb3BOdW0gPSBvcHRpb25zLml0ZXJhdGlvbiA/PyAwO1xyXG5cclxuICAgIGxldCBhbmltYXRlZENsYXNzID0gW107XHJcblxyXG4gICAgaWYgKChvcHRpb25zLnZhbHVlIHx8ICcnKS5tYXRjaCgvYW5pbWF0aW9uKCgtW2EtekEtWjAtOV0rKSspPyhcXHMrfHxcXFwiKS9nbSkpIHtcclxuICAgICAgICBhbmltYXRlZENsYXNzLnB1c2gob3B0aW9ucy52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChvcHRpb25zLnZhbHVlKSB7XHJcbiAgICAgICAgaWYgKFsndG9wLWxlZnQnLCAndG9wJywgJ3RvcC1yaWdodCcsICdsZWZ0JywgJ3JpZ2h0JywgJ2JvdHRvbS1sZWZ0JywgJ2JvdHRvbScsICdib3R0b20tcmlnaHQnXS5pbmNsdWRlcyhvcHRpb25zLnZhbHVlKSkge1xyXG4gICAgICAgICAgICBhbmltYXRlZENsYXNzLnB1c2goJ2FuaW1hdGlvbicpO1xyXG4gICAgICAgICAgICBhbmltYXRlZENsYXNzLnB1c2goYGFuaW1hdGlvbi0ke29wdGlvbnMudmFsdWV9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBhbmltYXRlZENsYXNzLnB1c2goJ2FuaW1hdGVfX2FuaW1hdGVkJyk7XHJcbiAgICAgICAgICAgIGFuaW1hdGVkQ2xhc3MucHVzaChgYW5pbWF0ZV9fJHtvcHRpb25zLnZhbHVlfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGFuaW1hdGVkQ2xhc3MucHVzaCgnYW5pbWF0aW9uJyk7XHJcbiAgICAgICAgYW5pbWF0ZWRDbGFzcy5wdXNoKCdhbmltYXRpb24tZmFkZWluJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy92byBoYW5cclxuICAgIGlmIChsb29wTnVtIDwgMCkge1xyXG4gICAgICAgIC8vYW5pbWF0ZWRDbGFzcy5wdXNoKCdpbmZpbml0ZScpO1xyXG4gICAgICAgIGFuaW1hdGVkQ2xhc3MucHVzaCgnYW5pbWF0aW9uLWl0ZXJhdGlvbi1pbmZpbml0ZScpO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIHN1Y2Nlc3MoKTsgIC8vbOG6t3AgdsO0IGjhuqFuIHRow6wgZ+G7jWkgbHXDtG5cclxuICAgICAgICBzdWNjZXNzID0gZnVuY3Rpb24gKCkgeyB9OyAgLy9o4buneSBmdW5jdGlvbiBjYWxsYmFja1xyXG4gICAgfVxyXG4gICAgLy9saW1pdFxyXG4gICAgZWxzZSBpZiAobG9vcE51bSA+IDApIHtcclxuICAgICAgICAvL2FuaW1hdGVkQ2xhc3MucHVzaCgnZGVsYXktJyArIChsb29wTnVtICsgMSkgKyAncycpOyAgICAvL2RlbGF5LTFzLCAuLi4sIGRlbGF5LTVzXHJcbiAgICAgICAgYW5pbWF0ZWRDbGFzcy5wdXNoKCdhbmltYXRpb24taXRlcmF0aW9uLScgKyAobG9vcE51bSArIDEpKTtcclxuICAgIH1cclxuXHJcbiAgICBhbmltYXRpb25DbGFzcyA9IGFuaW1hdGVkQ2xhc3Muam9pbignICcpO1xyXG5cclxuICAgIGxldCBleGVjdXRlID0gZnVuY3Rpb24gKGNhbGxiYWNrOiBGdW5jdGlvbikge1xyXG4gICAgICAgIGxldCBydW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChub2RlLmRhdGEoJ2FuaW1hdGUtcnVubmluZycpKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlLm9uZSgnd2Via2l0QW5pbWF0aW9uRW5kIG1vekFuaW1hdGlvbkVuZCBNU0FuaW1hdGlvbkVuZCBvYW5pbWF0aW9uZW5kIGFuaW1hdGlvbmVuZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBub2RlLmRhdGEoJ2FuaW1hdGUtcnVubmluZycsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmIChub2RlLmhhc0NsYXNzKCdhbmltYXRpb24nKSkge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJ1bigpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJ1bigpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZXhlY3V0ZShmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIC8vcmVtb3ZlIGFuaW1hdGlvblxyXG4gICAgICAgIHJlbW92ZUFuaW1hdGlvbihub2RlSWQpO1xyXG5cclxuICAgICAgICAvL2zhurdwIHPhu5EgbOG6p25cclxuICAgICAgICBpZiAobG9vcE51bSA+IDApIHtcclxuICAgICAgICAgICAgLy/EkWFuZyBjaOG6oXlcclxuICAgICAgICAgICAgbm9kZVxyXG4gICAgICAgICAgICAgICAgLy8ub25lKCd3ZWJraXRBbmltYXRpb25JdGVyYXRpb24gbW96QW5pbWF0aW9uSXRlcmF0aW9uIE1TQW5pbWF0aW9uSXRlcmF0aW9uIG9hbmltYXRpb25pdGVyYXRpb24gYW5pbWF0aW9uaXRlcmF0aW9uJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLm9uZSgnYW5pbWF0aW9uaXRlcmF0aW9uJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgKG9wdGlvbnMubm9kZVN0YXR1cyA9PT0gaWNkdF9SdW4ubm9kZVN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNsaWRlU3RhdHVzID09PSBpY2R0X1J1bi5zbGlkZVN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25leHRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9zdG9wIHdpdGggY2hhbmdlIHN0YXR1cyBvciBzbGlkZVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmRhdGEoJ2FuaW1hdGUtcnVubmluZycsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQW5pbWF0aW9uKG5vZGVJZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zbGlkZVN0YXR1cyA9PT0gaWNkdF9SdW4uc2xpZGVTdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL2No4bqheSB2w7QgaOG6oW5cclxuICAgICAgICBlbHNlIGlmIChsb29wTnVtIDwgMCkge1xyXG4gICAgICAgICAgICAvL8SRYW5nIGNo4bqheVxyXG4gICAgICAgICAgICBub2RlXHJcbiAgICAgICAgICAgICAgICAvLy5vbmUoJ3dlYmtpdEFuaW1hdGlvbkl0ZXJhdGlvbiBtb3pBbmltYXRpb25JdGVyYXRpb24gTVNBbmltYXRpb25JdGVyYXRpb24gb2FuaW1hdGlvbml0ZXJhdGlvbiBhbmltYXRpb25pdGVyYXRpb24nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAub25lKCdhbmltYXRpb25pdGVyYXRpb24nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2xpZGVTdGF0dXMgPT09IGljZHRfUnVuLnNsaWRlU3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbmV4dFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvL3N0b3Agd2l0aCBjaGFuZ2Ugc2xpZGVcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5kYXRhKCdhbmltYXRlLXJ1bm5pbmcnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUFuaW1hdGlvbihub2RlSWQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2xpZGVTdGF0dXMgPT09IGljZHRfUnVuLnNsaWRlU3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vaG/DoG4gdOG6pXRcclxuICAgICAgICBub2RlLm9uZSgnd2Via2l0QW5pbWF0aW9uRW5kIG1vekFuaW1hdGlvbkVuZCBNU0FuaW1hdGlvbkVuZCBvYW5pbWF0aW9uZW5kIGFuaW1hdGlvbmVuZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbm9kZS5kYXRhKCdhbmltYXRlLXJ1bm5pbmcnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHJlbW92ZUFuaW1hdGlvbihub2RlSWQpO1xyXG5cclxuICAgICAgICAgICAgLy94ZSB24buBIGLhur9uXHJcbiAgICAgICAgICAgIHN3aXRjaCAob3B0aW9ucy5maW5pc2gpIHtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAvL2dp4buvIG5ndXnDqm4gduG7iyB0csOtXHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vdHLhu58gduG7gSB0cuG6oW5nIHRow6FpIGPFqVxyXG4gICAgICAgICAgICAgICAgY2FzZSAxOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL+G6qW4gxJHhu5FpIHTGsOG7o25nXHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6IHtcclxuICAgICAgICAgICAgICAgICAgICAvL25vZGUuYWRkQ2xhc3MoJ2hpZGUnKTtcclxuICAgICAgICAgICAgICAgICAgICBydW5BbmltYXRpb24obm9kZUlkLCB7IG5vZGU6IG9wdGlvbnMubm9kZSwgdmFsdWU6IG9wdGlvbnMubm9kZS5hbmltYXRlPy5vdXQsIG5vZGVTdGF0dXM6IG9wdGlvbnMubm9kZVN0YXR1cywgc2xpZGVTdGF0dXM6IG9wdGlvbnMuc2xpZGVTdGF0dXMgfSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmFkZENsYXNzKCdoaWRlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vdHLhuqFuZyB0aMOhaSBzbGlkZSBraMO0bmcgxJHhu5VpXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNsaWRlU3RhdHVzID09PSBpY2R0X1J1bi5zbGlkZVN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgc3VjY2VzcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vYWRkIGFuaW1hdGlvblxyXG4gICAgICAgIG5vZGUuYXR0cignZGF0YS1jbGFzcycsIG5vZGUuYXR0cignY2xhc3MnKSA/PyAnJyk7XHJcbiAgICAgICAgbm9kZS5hZGRDbGFzcyhhbmltYXRpb25DbGFzcyk7XHJcbiAgICAgICAgbm9kZS5kYXRhKCdhbmltYXRlLXJ1bm5pbmcnLCB0cnVlKTtcclxuICAgIH0pO1xyXG5cclxufVxyXG5cclxuY29uc3QgcmVtb3ZlQW5pbWF0aW9uID0gZnVuY3Rpb24gKG5vZGVJZDogbnVtYmVyIHwgc3RyaW5nKSB7XHJcblxyXG4gICAgdmFyIG5vZGUgPSBqUXVlcnkoJyMnICsgbm9kZUlkKS5wYXJlbnRzKCdnJyksXHJcbiAgICAgICAgYW5pbWF0ZWQxID0gbm9kZS5hdHRyKCdjbGFzcycpPy5tYXRjaCgvYW5pbWF0aW9uKCgtW2EtekEtWjAtOV0rKSspPyhcXHMrfHxcXFwiKS9nbSksXHJcbiAgICAgICAgYW5pbWF0ZWQyID0gbm9kZS5hdHRyKCdjbGFzcycpPy5tYXRjaCgvYW5pbWF0ZSgoX19bYS16QS1aMC05XSspKyk/KFxccyt8fFxcXCIpL2dtKTtcclxuXHJcbiAgICBpZiAoYW5pbWF0ZWQxKSB7XHJcbiAgICAgICAgYW5pbWF0ZWQxLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgalF1ZXJ5KG5vZGUpLnJlbW92ZUNsYXNzKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChhbmltYXRlZDIpIHtcclxuICAgICAgICBhbmltYXRlZDIuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBqUXVlcnkobm9kZSkucmVtb3ZlQ2xhc3MoZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9cclxuICAgIGxldCBjbGFzc0JrID0gbm9kZS5hdHRyKCdkYXRhLWNsYXNzJyk7XHJcbiAgICBpZiAoY2xhc3NCaykge1xyXG4gICAgICAgIG5vZGUuYXR0cignY2xhc3MnLCBjbGFzc0JrKTtcclxuICAgICAgICBub2RlLnJlbW92ZUF0dHIoJ2RhdGEtY2xhc3MnKTtcclxuICAgIH1cclxuXHJcbiAgICAvL1xyXG4gICAgalF1ZXJ5KG5vZGUpLmRhdGEoJ2FuaW1hdGlvbi1ydW5uaW5nJywgZmFsc2UpO1xyXG59OyIsImltcG9ydCB7IGljZHRfSURhdGFOb2RlIH0gZnJvbSBcIi4uLy4uLy4uL2ludGVyZmFjZS9JRGF0YVNvdXJjZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1J1biB9IGZyb20gXCIuLi8uLi9ydW5cIjtcclxuaW1wb3J0IHsgcnVuQW5pbWF0aW9uIH0gZnJvbSBcIi4uL2FuaW1hdGUvYW5pbWF0aW9uXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9SdW5fSW50ZXJhY3RpdmVfQWN0aW9uQW5pbWF0aW9uID0gKG5vZGVJZDogbnVtYmVyIHwgc3RyaW5nLCBvcHRpb25zOiB7IG5vZGU6IGljZHRfSURhdGFOb2RlLCB2YWx1ZT86IHN0cmluZywgdGltZT86IG51bWJlciwgaXRlcmF0aW9uPzogbnVtYmVyLCBmaW5pc2g/OiBudW1iZXIsIG5vZGVTdGF0dXM6IG51bWJlciwgc2xpZGVTdGF0dXM6IG51bWJlciB9LCBzdWNjZXNzOiBGdW5jdGlvbikgPT4ge1xyXG5cclxuICAgIGlmICghb3B0aW9ucy52YWx1ZSkge1xyXG4gICAgICAgIHN1Y2Nlc3MoKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG5vZGUgPSBqUXVlcnkoJyMnICsgbm9kZUlkKS5wYXJlbnRzKCdnJyk7XHJcbiAgICBpZiAoIW5vZGUubGVuZ3RoKSB7XHJcbiAgICAgICAgc3VjY2VzcygpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgeyBzaXplIH0gPSBvcHRpb25zLm5vZGU7XHJcbiAgICBub2RlLmNzcygndHJhbnNmb3JtLW9yaWdpbicsIGAke3NpemUueCArIHNpemUud2lkdGggLyAyfXB4ICR7c2l6ZS55ICsgc2l6ZS5oZWlnaHQgLyAyfXB4YCk7XHJcblxyXG4gICAgbGV0IGFuaW1hdGlvbkNsYXNzID0gJycsXHJcbiAgICAgICAgbG9vcE51bSA9IG9wdGlvbnMuaXRlcmF0aW9uID8/IDA7XHJcblxyXG4gICAgbGV0IGFuaW1hdGVkQ2xhc3MgPSBbXTtcclxuXHJcbiAgICBpZiAoKG9wdGlvbnMudmFsdWUgfHwgJycpLm1hdGNoKC9hbmltYXRpb24oKC1bYS16QS1aMC05XSspKyk/KFxccyt8fFxcXCIpL2dtKSkge1xyXG4gICAgICAgIGFuaW1hdGVkQ2xhc3MucHVzaChvcHRpb25zLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGFuaW1hdGVkQ2xhc3MucHVzaCgnYW5pbWF0aW9uJyk7XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLnZhbHVlKSB7XHJcbiAgICAgICAgICAgIGFuaW1hdGVkQ2xhc3MucHVzaCgnYW5pbWF0aW9uLScgKyBvcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFuaW1hdGVkQ2xhc3MucHVzaCgnYW5pbWF0aW9uLWZhZGVpbicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL3ZvIGhhblxyXG4gICAgaWYgKGxvb3BOdW0gPCAwKSB7XHJcbiAgICAgICAgLy9hbmltYXRlZENsYXNzLnB1c2goJ2luZmluaXRlJyk7XHJcbiAgICAgICAgYW5pbWF0ZWRDbGFzcy5wdXNoKCdhbmltYXRpb24taXRlcmF0aW9uLWluZmluaXRlJyk7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgc3VjY2VzcygpOyAgLy9s4bq3cCB2w7QgaOG6oW4gdGjDrCBn4buNaSBsdcO0blxyXG4gICAgICAgIHN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7IH07ICAvL2jhu6d5IGZ1bmN0aW9uIGNhbGxiYWNrXHJcbiAgICB9XHJcbiAgICAvL2xpbWl0XHJcbiAgICBlbHNlIGlmIChsb29wTnVtID4gMCkge1xyXG4gICAgICAgIC8vYW5pbWF0ZWRDbGFzcy5wdXNoKCdkZWxheS0nICsgKGxvb3BOdW0gKyAxKSArICdzJyk7ICAgIC8vZGVsYXktMXMsIC4uLiwgZGVsYXktNXNcclxuICAgICAgICBhbmltYXRlZENsYXNzLnB1c2goJ2FuaW1hdGlvbi1pdGVyYXRpb24tJyArIChsb29wTnVtICsgMSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGFuaW1hdGlvbkNsYXNzID0gYW5pbWF0ZWRDbGFzcy5qb2luKCcgJyk7XHJcblxyXG4gICAgbGV0IGV4ZWN1dGUgPSBmdW5jdGlvbiAoY2FsbGJhY2s6IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgbGV0IHJ1biA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG5vZGUuZGF0YSgnYW5pbWF0ZS1ydW5uaW5nJykpIHtcclxuICAgICAgICAgICAgICAgIG5vZGUub25lKCd3ZWJraXRBbmltYXRpb25FbmQgbW96QW5pbWF0aW9uRW5kIE1TQW5pbWF0aW9uRW5kIG9hbmltYXRpb25lbmQgYW5pbWF0aW9uZW5kJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuZGF0YSgnYW5pbWF0ZS1ydW5uaW5nJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKG5vZGUuaGFzQ2xhc3MoJ2FuaW1hdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcnVuKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcnVuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBleGVjdXRlKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgLy9yZW1vdmUgYW5pbWF0aW9uXHJcbiAgICAgICAgcmVtb3ZlQW5pbWF0aW9uKG5vZGVJZCk7XHJcblxyXG4gICAgICAgIC8vbOG6t3Agc+G7kSBs4bqnblxyXG4gICAgICAgIGlmIChsb29wTnVtID4gMCkge1xyXG4gICAgICAgICAgICAvL8SRYW5nIGNo4bqheVxyXG4gICAgICAgICAgICBub2RlXHJcbiAgICAgICAgICAgICAgICAvLy5vbmUoJ3dlYmtpdEFuaW1hdGlvbkl0ZXJhdGlvbiBtb3pBbmltYXRpb25JdGVyYXRpb24gTVNBbmltYXRpb25JdGVyYXRpb24gb2FuaW1hdGlvbml0ZXJhdGlvbiBhbmltYXRpb25pdGVyYXRpb24nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAub25lKCdhbmltYXRpb25pdGVyYXRpb24nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiAob3B0aW9ucy5ub2RlU3RhdHVzID09PSBpY2R0X1J1bi5ub2RlU3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2xpZGVTdGF0dXMgPT09IGljZHRfUnVuLnNsaWRlU3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbmV4dFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvL3N0b3Agd2l0aCBjaGFuZ2Ugc3RhdHVzIG9yIHNsaWRlXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZGF0YSgnYW5pbWF0ZS1ydW5uaW5nJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVBbmltYXRpb24obm9kZUlkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNsaWRlU3RhdHVzID09PSBpY2R0X1J1bi5zbGlkZVN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vY2jhuqF5IHbDtCBo4bqhblxyXG4gICAgICAgIGVsc2UgaWYgKGxvb3BOdW0gPCAwKSB7XHJcbiAgICAgICAgICAgIC8vxJFhbmcgY2jhuqF5XHJcbiAgICAgICAgICAgIG5vZGVcclxuICAgICAgICAgICAgICAgIC8vLm9uZSgnd2Via2l0QW5pbWF0aW9uSXRlcmF0aW9uIG1vekFuaW1hdGlvbkl0ZXJhdGlvbiBNU0FuaW1hdGlvbkl0ZXJhdGlvbiBvYW5pbWF0aW9uaXRlcmF0aW9uIGFuaW1hdGlvbml0ZXJhdGlvbicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC5vbmUoJ2FuaW1hdGlvbml0ZXJhdGlvbicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zbGlkZVN0YXR1cyA9PT0gaWNkdF9SdW4uc2xpZGVTdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9uZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vc3RvcCB3aXRoIGNoYW5nZSBzbGlkZVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmRhdGEoJ2FuaW1hdGUtcnVubmluZycsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQW5pbWF0aW9uKG5vZGVJZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zbGlkZVN0YXR1cyA9PT0gaWNkdF9SdW4uc2xpZGVTdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9ob8OgbiB04bqldFxyXG4gICAgICAgIG5vZGUub25lKCd3ZWJraXRBbmltYXRpb25FbmQgbW96QW5pbWF0aW9uRW5kIE1TQW5pbWF0aW9uRW5kIG9hbmltYXRpb25lbmQgYW5pbWF0aW9uZW5kJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBub2RlLmRhdGEoJ2FuaW1hdGUtcnVubmluZycsIGZhbHNlKTtcclxuICAgICAgICAgICAgcmVtb3ZlQW5pbWF0aW9uKG5vZGVJZCk7XHJcblxyXG4gICAgICAgICAgICAvL3hlIHbhu4EgYuG6v25cclxuICAgICAgICAgICAgc3dpdGNoIChvcHRpb25zLmZpbmlzaCkge1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIC8vZ2nhu68gbmd1ecOqbiB24buLIHRyw61cclxuICAgICAgICAgICAgICAgIGNhc2UgMDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy90cuG7nyB24buBIHRy4bqhbmcgdGjDoWkgY8WpXHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8v4bqpbiDEkeG7kWkgdMaw4bujbmdcclxuICAgICAgICAgICAgICAgIGNhc2UgMjoge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbm9kZS5hZGRDbGFzcygnaGlkZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJ1bkFuaW1hdGlvbihub2RlSWQsIHsgbm9kZTogb3B0aW9ucy5ub2RlLCB2YWx1ZTogb3B0aW9ucy5ub2RlLmFuaW1hdGU/Lm91dCwgbm9kZVN0YXR1czogb3B0aW9ucy5ub2RlU3RhdHVzLCBzbGlkZVN0YXR1czogb3B0aW9ucy5zbGlkZVN0YXR1cyB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuYWRkQ2xhc3MoJ2hpZGUnKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy90cuG6oW5nIHRow6FpIHNsaWRlIGtow7RuZyDEkeG7lWlcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2xpZGVTdGF0dXMgPT09IGljZHRfUnVuLnNsaWRlU3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy9hZGQgYW5pbWF0aW9uXHJcbiAgICAgICAgbm9kZS5hdHRyKCdkYXRhLWNsYXNzJywgbm9kZS5hdHRyKCdjbGFzcycpID8/ICcnKTtcclxuICAgICAgICBub2RlLmFkZENsYXNzKGFuaW1hdGlvbkNsYXNzKTtcclxuICAgICAgICBub2RlLmRhdGEoJ2FuaW1hdGUtcnVubmluZycsIHRydWUpO1xyXG4gICAgfSk7XHJcblxyXG59XHJcblxyXG5jb25zdCByZW1vdmVBbmltYXRpb24gPSBmdW5jdGlvbiAobm9kZUlkOiBudW1iZXIgfCBzdHJpbmcpIHtcclxuXHJcbiAgICB2YXIgbm9kZSA9IGpRdWVyeSgnIycgKyBub2RlSWQpLnBhcmVudHMoJ2cnKSxcclxuICAgICAgICBhbmltYXRlZCA9IG5vZGUuYXR0cignY2xhc3MnKT8ubWF0Y2goL2FuaW1hdGlvbigoLVthLXpBLVowLTldKykrKT8oXFxzK3x8XFxcIikvZ20pO1xyXG5cclxuICAgIGlmIChhbmltYXRlZCkge1xyXG4gICAgICAgIGFuaW1hdGVkLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgalF1ZXJ5KG5vZGUpLnJlbW92ZUNsYXNzKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vXHJcbiAgICBsZXQgY2xhc3NCayA9IG5vZGUuYXR0cignZGF0YS1jbGFzcycpO1xyXG4gICAgaWYgKGNsYXNzQmspIHtcclxuICAgICAgICBub2RlLmF0dHIoJ2NsYXNzJywgY2xhc3NCayk7XHJcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyKCdkYXRhLWNsYXNzJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9cclxuICAgIGpRdWVyeShub2RlKS5kYXRhKCdhbmltYXRpb24tcnVubmluZycsIGZhbHNlKTtcclxufTsiLCJpbXBvcnQgeyBpY2R0X0lEYXRhTm9kZSB9IGZyb20gXCIuLi8uLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuaW1wb3J0IHsgaWNkdF9TaXplMkF0dHJpYnV0ZSB9IGZyb20gXCIuLi8uLi9oYW5kbGUvb2Zmc2V0XCI7XHJcbmltcG9ydCB7IGljZHRfUnVuIH0gZnJvbSBcIi4uLy4uL3J1blwiO1xyXG5pbXBvcnQgeyBpY2R0X1N5bmNTdmdOb2RlQXR0cmlidXRlIH0gZnJvbSBcIi4uLy4uL3N5bmMtZWxlbWVudC9zdmctZWxlbWVudFwiO1xyXG5pbXBvcnQgeyBydW5BbmltYXRpb24gfSBmcm9tIFwiLi4vYW5pbWF0ZS9hbmltYXRpb25cIjtcclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9BY3Rpb25Qb2ludHMgPSAobm9kZUlkOiBudW1iZXIsIG9wdGlvbnM6IHsgbm9kZTogaWNkdF9JRGF0YU5vZGUsIHBvaW50cz86IEFycmF5PEFycmF5PG51bWJlcj4+LCB0aW1lPzogbnVtYmVyLCBpdGVyYXRpb24/OiBudW1iZXIsIGZpbmlzaD86IG51bWJlciwgbm9kZVN0YXR1czogbnVtYmVyLCBzbGlkZVN0YXR1czogbnVtYmVyIH0sIHN1Y2Nlc3M6IEZ1bmN0aW9uKSA9PiB7XHJcblxyXG4gICAgLy9vcHRpb25zLnBvaW50cyA9IFtbMTIxMS4yMSwgODQuNzVdLCBbMTIxMi40NSwgODUuOTNdLCBbMTIxMy43NiwgODguNTRdLCBbMTIxNS4wNiwgOTEuMTVdLCBbMTIxNS4wNiwgOTIuNDVdLCBbMTIxNi4zNiwgOTUuMDZdLCBbMTIxNy42NywgOTcuNjddLCBbMTIxNy42NywgOTguOTddLCBbMTIyMC4yNywgMTAyLjg4XSwgWzEyMjAuMjcsIDEwNS40OV0sIFsxMjIwLjI3LCAxMDYuNzldLCBbMTIyMC4yNywgMTA5LjRdLCBbMTIyMC4yNywgMTEwLjddLCBbMTIyMC4yNywgMTEyLjAxXSwgWzEyMjAuMjcsIDExNC42MV0sIFsxMjIwLjI3LCAxMTcuMjJdLCBbMTIyMC4yNywgMTIyLjQ0XSwgWzEyMTcuNjcsIDEyNS4wNV0sIFsxMjE2LjM2LCAxMjcuNjVdLCBbMTIxMy43NiwgMTI4Ljk2XSwgWzEyMTIuNDUsIDEzMC4yNl0sIFsxMjExLjE1LCAxMzEuNTZdLCBbMTIwOC41NCwgMTMxLjU2XSwgWzEyMDcuMjQsIDEzMi44N10sIFsxMjAzLjMzLCAxMzIuODddLCBbMTIwMC43MiwgMTMyLjg3XSwgWzExOTYuODEsIDEzNC4xN10sIFsxMTkxLjU5LCAxMzQuMTddLCBbMTE4Mi40NiwgMTM0LjE3XSwgWzExNzUuOTUsIDEzNC4xN10sIFsxMTY4LjEyLCAxMzQuMTddLCBbMTE2MC4zLCAxMzQuMTddLCBbMTE1MS4xNywgMTM0LjE3XSwgWzExNDIuMDUsIDEzNC4xN10sIFsxMTMyLjkyLCAxMzQuMTddLCBbMTEyNi40LCAxMzQuMTddLCBbMTExNy4yOCwgMTM0LjE3XSwgWzExMTAuNzYsIDEzMi44N10sIFsxMTAxLjYzLCAxMjguOTZdLCBbMTA5Ny43MiwgMTI3LjY1XSwgWzEwOTUuMTEsIDEyNS4wNV0sIFsxMDkxLjIsIDEyMS4xM10sIFsxMDg4LjU5LCAxMTcuMjJdLCBbMTA4NS45OCwgMTE0LjYxXSwgWzEwODQuNjgsIDExMC43XSwgWzEwODMuMzgsIDEwNi43OV0sIFsxMDgwLjc3LCAxMDQuMThdLCBbMTA3OS40NywgMTAwLjI3XSwgWzEwNzguMTYsIDkzLjc1XSwgWzEwNzYuODYsIDg5Ljg0XSwgWzEwNzUuNTUsIDg1LjkzXSwgWzEwNzUuNTUsIDgwLjcyXSwgWzEwNzUuNTUsIDc4LjExXSwgWzEwNzUuNTUsIDc0LjJdLCBbMTA3NS41NSwgNzEuNTldLCBbMTA3NS41NSwgNjguOThdLCBbMTA3NS41NSwgNjYuMzddLCBbMTA3NS41NSwgNjUuMDddLCBbMTA3OS40NywgNjMuNzddLCBbMTA4NS45OCwgNjEuMTZdLCBbMTA5Ni40MiwgNTkuODZdLCBbMTEwMi45MywgNTkuODZdLCBbMTEwNi44NSwgNTkuODZdLCBbMTExMi4wNiwgNTcuMjVdLCBbMTExNC42NywgNTcuMjVdLCBbMTExNS45NywgNTcuMjVdLCBbMTExNy4yOCwgNTcuMjVdLCBbMTExOS44OCwgNTcuMjVdLCBbMTEyMS4xOSwgNTguNTVdLCBbMTEyMi40OSwgNTkuODZdLCBbMTEyNS4xLCA2NS4wN10sIFsxMTI1LjEsIDY2LjM3XSwgWzExMjYuNCwgNzIuODldLCBbMTEyNi40LCA3Ni44MV0sIFsxMTI2LjQsIDg1LjkzXSwgWzExMjYuNCwgOTEuMTVdLCBbMTEyNi40LCA5Ni4zNl0sIFsxMTI1LjEsIDEwMS41OF0sIFsxMTIyLjQ5LCAxMDYuNzldLCBbMTExOC41OCwgMTEyLjAxXSwgWzExMTguNTgsIDExNC42MV0sIFsxMTE3LjI4LCAxMTguNTNdLCBbMTExNS45NywgMTIxLjEzXSwgWzExMTIuMDYsIDEyNi4zNV0sIFsxMTA5LjQ1LCAxMzAuMjZdLCBbMTEwNi44NSwgMTMyLjg3XSwgWzExMDQuMjQsIDEzNi43OF0sIFsxMTAwLjMzLCAxNDAuNjldLCBbMTA5Ny43MiwgMTQzLjNdLCBbMTA5Ni40MiwgMTQ0LjZdLCBbMTA5My44MSwgMTQ3LjIxXSwgWzEwOTIuNSwgMTQ5LjgyXSwgWzEwODkuOSwgMTUxLjEyXSwgWzEwODcuMjksIDE1My43M10sIFsxMDg0LjY4LCAxNTUuMDNdLCBbMTA4MC43NywgMTU2LjM0XSwgWzEwNzYuODYsIDE1Ny42NF0sIFsxMDcyLjk1LCAxNTcuNjRdLCBbMTA2Ni40MywgMTU3LjY0XSwgWzEwNjEuMjEsIDE1Ny42NF0sIFsxMDUzLjM5LCAxNTcuNjRdLCBbMTAzOS4wNSwgMTU3LjY0XSwgWzEwMjQuNzEsIDE1My43M10sIFsxMDA2LjQ1LCAxNDcuMjFdLCBbOTkwLjgxLCAxNDEuOTldLCBbOTc3Ljc3LCAxMzkuMzldLCBbOTY2LjA0LCAxMzIuODddLCBbOTU1LjYxLCAxMjguOTZdLCBbOTQ3Ljc4LCAxMjIuNDRdLCBbOTQ1LjE4LCAxMTguNTNdLCBbOTQxLjI3LCAxMTMuMzFdLCBbOTM2LjA1LCAxMDYuNzldLCBbOTM0Ljc1LCAxMDEuNThdLCBbOTMwLjgzLCA5Mi40NV0sIFs5MjkuNTMsIDg4LjU0XSwgWzkyOS41MywgODMuMzJdLCBbOTI5LjUzLCA3OC4xMV0sIFs5MjkuNTMsIDc0LjJdLCBbOTI5LjUzLCA2Ny42OF0sIFs5MjkuNTMsIDYzLjc3XSwgWzkyOS41MywgNTkuODZdLCBbOTI5LjUzLCA1Ny4yNV0sIFs5MzMuNDQsIDU0LjY0XSwgWzkzOS45NiwgNTAuNzNdLCBbOTQ1LjE4LCA1MC43M10sIFs5NTMsIDQ5LjQzXSwgWzk1OS41MiwgNDkuNDNdLCBbOTY2LjA0LCA0OS40M10sIFs5NjguNjQsIDQ5LjQzXSwgWzk3MS4yNSwgNDkuNDNdLCBbOTcyLjU2LCA0OS40M10sIFs5NzUuMTYsIDUwLjczXSwgWzk3Ni40NywgNTMuMzRdLCBbOTc5LjA3LCA1NS45NF0sIFs5ODAuMzgsIDU4LjU1XSwgWzk4MS42OCwgNjMuNzddLCBbOTgxLjY4LCA3Mi44OV0sIFs5ODEuNjgsIDc2LjgxXSwgWzk4MS42OCwgODQuNjNdLCBbOTgxLjY4LCA5Mi40NV0sIFs5ODAuMzgsIDk4Ljk3XSwgWzk3Ny43NywgMTAyLjg4XSwgWzk3NS4xNiwgMTA4LjFdLCBbOTcyLjU2LCAxMTIuMDFdLCBbOTY4LjY0LCAxMTcuMjJdLCBbOTY0LjczLCAxMjIuNDRdLCBbOTU4LjIxLCAxMjYuMzVdLCBbOTU0LjMsIDEzMC4yNl0sIFs5NTEuNywgMTMxLjU2XSwgWzk0Ny43OCwgMTM0LjE3XSwgWzk0NS4xOCwgMTM1LjQ4XSwgWzkzOS45NiwgMTM1LjQ4XSwgWzkzNi4wNSwgMTM1LjQ4XSwgWzkzMC44MywgMTM1LjQ4XSwgWzkyMy4wMSwgMTM1LjQ4XSwgWzkxNS4xOSwgMTM1LjQ4XSwgWzkwNC43NiwgMTM1LjQ4XSwgWzg5MS43MiwgMTM1LjQ4XSwgWzg3Mi4xNiwgMTM0LjE3XSwgWzg1MS4zLCAxMjguOTZdLCBbODI3Ljg0LCAxMTkuODNdLCBbODE0LjgsIDExMy4zMV0sIFs4MDYuOTgsIDEwOS40XSwgWzgwMy4wNiwgMTA2Ljc5XSwgWzc5Ni41NSwgOTguOTddLCBbNzkyLjYzLCA5My43NV0sIFs3ODcuNDIsIDg3LjI0XSwgWzc4My41MSwgODIuMDJdLCBbNzgyLjIsIDc2LjgxXSwgWzc4Mi4yLCA3MC4yOV0sIFs3ODIuMiwgNjYuMzddLCBbNzgyLjIsIDU3LjI1XSwgWzc4Mi4yLCA1NC42NF0sIFs3ODYuMTIsIDUyLjAzXSwgWzc5MS4zMywgNDguMTJdLCBbNzk1LjI0LCA0NS41MV0sIFs4MDQuMzcsIDQyLjkxXSwgWzgxNi4xLCA0MS42XSwgWzgyNS4yMywgNDAuM10sIFs4MzEuNzUsIDQwLjNdLCBbODM0LjM2LCA0MC4zXSwgWzgzNi45NiwgNDEuNl0sIFs4MzkuNTcsIDQ2LjgyXSwgWzgzOS41NywgNDguMTJdLCBbODQzLjQ4LCA1OS44Nl0sIFs4NDQuNzksIDY4Ljk4XSwgWzg0NC43OSwgODAuNzJdLCBbODQ2LjA5LCA5MS4xNV0sIFs4NDYuMDksIDk4Ljk3XSwgWzg0NC43OSwgMTA4LjFdLCBbODQyLjE4LCAxMTQuNjFdLCBbODM2Ljk2LCAxMjMuNzRdLCBbODMwLjQ0LCAxMzEuNTZdLCBbODI2LjUzLCAxMzUuNDhdLCBbODIyLjYyLCAxNDEuOTldLCBbODEzLjQ5LCAxNDguNTFdLCBbODA4LjI4LCAxNTEuMTJdLCBbODA0LjM3LCAxNTIuNDJdLCBbODAxLjc2LCAxNTIuNDJdLCBbNzk1LjI0LCAxNTMuNzNdLCBbNzg2LjEyLCAxNTMuNzNdLCBbNzc4LjI5LCAxNTMuNzNdLCBbNzcwLjQ3LCAxNTMuNzNdLCBbNzYxLjM0LCAxNTEuMTJdLCBbNzUyLjIyLCAxNDUuOTFdLCBbNzQwLjQ4LCAxMzkuMzldLCBbNzMxLjM2LCAxMzUuNDhdLCBbNzIyLjIzLCAxMjguOTZdLCBbNzE3LjAxLCAxMjMuNzRdLCBbNzE0LjQxLCAxMjEuMTNdLCBbNzA5LjE5LCAxMTcuMjJdLCBbNzAwLjA3LCAxMDYuNzldLCBbNjk2LjE1LCAxMDIuODhdLCBbNjkwLjk0LCA5Mi40NV0sIFs2ODguMzMsIDg1LjkzXSwgWzY4NS43MiwgNzkuNDFdLCBbNjg0LjQyLCA3MC4yOV0sIFs2ODMuMTIsIDY2LjM3XSwgWzY4MC41MSwgNTkuODZdLCBbNjgwLjUxLCA1NS45NF0sIFs2ODAuNTEsIDUwLjczXSwgWzY4MC41MSwgNDguMTJdLCBbNjgxLjgxLCA0NS41MV0sIFs2ODEuODEsIDQ0LjIxXSwgWzY4NC40MiwgNDEuNl0sIFs2ODkuNjQsIDQwLjNdLCBbNjk2LjE1LCA0MC4zXSwgWzcwMy45OCwgNDAuM10sIFs3MTMuMSwgNDAuM10sIFs3MTguMzIsIDQwLjNdLCBbNzIyLjIzLCA0MC4zXSwgWzcyNC44NCwgNDEuNl0sIFs3MjguNzUsIDQ1LjUxXSwgWzczMC4wNSwgNDYuODJdLCBbNzMxLjM2LCA1My4zNF0sIFs3MzEuMzYsIDYxLjE2XSwgWzczMS4zNiwgNjcuNjhdLCBbNzMxLjM2LCA3Ni44MV0sIFs3MzAuMDUsIDg0LjYzXSwgWzcyMy41MywgOTUuMDZdLCBbNzE0LjQxLCAxMDQuMThdLCBbNzA5LjE5LCAxMDkuNF0sIFs3MDUuMjgsIDExNC42MV0sIFs3MDAuMDcsIDExOS44M10sIFs2OTQuODUsIDEyMy43NF0sIFs2OTMuNTUsIDEyNi4zNV0sIFs2ODcuMDMsIDEyNy42NV0sIFs2ODMuMTIsIDEyOC45Nl0sIFs2NzkuMjEsIDEyOC45Nl0sIFs2NzcuOSwgMTI4Ljk2XSwgWzY3MS4zOCwgMTI4Ljk2XSwgWzY2OC43NywgMTI4Ljk2XSwgWzY1OS42NSwgMTI4Ljk2XSwgWzY0Ni42MSwgMTIyLjQ0XSwgWzYzOC43OSwgMTE3LjIyXSwgWzYyOS42NiwgMTEyLjAxXSwgWzYxOS4yMywgMTA0LjE4XSwgWzYxNC4wMiwgMTAwLjI3XSwgWzYxMS40MSwgOTcuNjddLCBbNjA3LjUsIDkzLjc1XSwgWzYwNC44OSwgODkuODRdLCBbNjAyLjI4LCA4NS45M10sIFs2MDIuMjgsIDgzLjMyXSwgWzYwMC45OCwgODAuNzJdLCBbNjAwLjk4LCA3OS40MV0sIFs2MDAuOTgsIDc4LjExXSwgWzYwMC45OCwgNzUuNV0sIFs2MDAuOTgsIDcyLjg5XSwgWzYwMC45OCwgNzEuNTldLCBbNjAwLjk4LCA3MC4yOV0sIFs2MDAuOTgsIDY4Ljk4XSwgWzYwMC45OCwgNjcuNjhdLCBbNjAwLjk4LCA2Ni4zN10sIFs2MDAuOTgsIDY1LjA3XV07XHJcblxyXG4gICAgaWYgKCFvcHRpb25zLnBvaW50cyB8fCAhb3B0aW9ucy5wb2ludHMubGVuZ3RoKSB7XHJcbiAgICAgICAgc3VjY2VzcygpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbm9kZSA9IGpRdWVyeSgnIycgKyBub2RlSWQpO1xyXG5cclxuICAgIGxldCBhbmltYXRpb25Qb2ludHMgPSBzbW9vdGhQb2ludHMob3B0aW9ucy5wb2ludHMgfHwgW10pO1xyXG5cclxuICAgIGxldCBsb29wTnVtID0gb3B0aW9ucy5pdGVyYXRpb24gPz8gMDtcclxuICAgIGlmIChsb29wTnVtIDwgMCkge1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgc3VjY2VzcygpOyAgLy9s4bq3cCB2w7QgaOG6oW4gdGjDrCBn4buNaSBsdcO0blxyXG4gICAgICAgIHN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7IH07ICAvL2jhu6d5IGZ1bmN0aW9uIGNhbGxiYWNrXHJcbiAgICB9XHJcblxyXG4gICAgLy9u4bq/dSBpdGVtIGPDsyBob+G6oXQgxJHhu5luZyBsw6AgdsO0IGjhuqFuIHbDoCDEkWFuZyBjaOG6oXkgdGjDrCBrbyBj4bqnbiBn4buNaSBs4bqhaSBu4buvYVxyXG4gICAgaWYgKG5vZGUuZGF0YSgnd29yay1ydW5uaW5nJykgJiYgbG9vcE51bSA8IDApIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbm9kZS5kYXRhKCd3b3JrLXJ1bm5pbmcnLCB0cnVlKTtcclxuXHJcbiAgICBsZXQgbGVuID0gYW5pbWF0aW9uUG9pbnRzLmxlbmd0aCxcclxuICAgICAgICBzcGVlZCA9IE1hdGgubWF4KDIwLCAob3B0aW9ucy50aW1lIHx8IDMpICogMTAwMCAvIGxlbik7XHJcblxyXG4gICAgbGV0IHsgaWQsIHR5cGUsIHNpemUsIGF0dHJpYnV0ZSB9ID0gaWNkdF9SdW4uZmluZE5vZGUobm9kZUlkKTtcclxuXHJcbiAgICBsZXQgbmV3U2l6ZTogeyB4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgfTtcclxuXHJcbiAgICBsZXQgcmVjdXNpdmUgPSBmdW5jdGlvbiAoaTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuc2xpZGVTdGF0dXMgPT09IGljZHRfUnVuLnNsaWRlU3RhdHVzKSB7XHJcbiAgICAgICAgICAgIGlmIChpIDwgbGVuKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcG9pbnQgPSBhbmltYXRpb25Qb2ludHNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3U2l6ZSA9IE9iamVjdC5hc3NpZ24oe30sIHNpemUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDogcG9pbnRbMF0gLSBzaXplLndpZHRoIC8gMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTogcG9pbnRbMV0gLSBzaXplLmhlaWdodCAvIDJcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9nw6FuIGdpw6EgdHLhu4sgbeG7m2kgY2hvIGF0dHJpYnV0ZVxyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKHR5cGUsIG5ld1NpemUsIGF0dHJpYnV0ZSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2Phuq1wIG5o4bqtdCBVSVxyXG4gICAgICAgICAgICAgICAgICAgIGljZHRfU3luY1N2Z05vZGVBdHRyaWJ1dGUoKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSwgYXR0cmlidXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3VzaXZlKCsraSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgc3BlZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy9s4bq3cCBnaeG7m2kgaOG6oW5cclxuICAgICAgICAgICAgICAgIGlmIChsb29wTnVtID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvb3BOdW0tLTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy90cuG7nyB24buBIGNo4buXIGPFqVxyXG4gICAgICAgICAgICAgICAgICAgIC8vbm9kZS5hdHRyKGRyYXcobm9kZVswXSwgcG9zLngsIHBvcy55LCBwb3MudywgcG9zLmgpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9s4bq3cCBs4bqhaSBob+G6oXQgxJHhu5luZ1xyXG4gICAgICAgICAgICAgICAgICAgIHJlY3VzaXZlKDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy9s4bq3cCB2w7QgaOG6oW5cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxvb3BOdW0gPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9M4bq3cCB2w7QgaOG6oW4gbmjDqSwgY2jhuqF5IHThu5tpIFwiQ2jDom4gdHLhu51pXCIgbHXDtG4gPDMsIG5o4bqvYyBs4bqhaSBuaOG7myBjw6J1IGNodXnhu4duIFwiVHLhu51pIGPDsyBjaMOibiBraMO0bmc/XCIgPSkpXHJcbiAgICAgICAgICAgICAgICAgICAgLy9Dw7MgbmjDqSwgXCJUcuG7nWkgxqFpaWlpaWlpaWlpaWlpaWlpLCBk4bqhbmcgY2jDom4gcmFhYWFhYWFhYWFhYWFhYWFhYWFhYSAtXy1cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3Ry4bufIHbhu4EgY2jhu5cgY8WpXHJcbiAgICAgICAgICAgICAgICAgICAgLy9ub2RlLmF0dHIoZHJhdyhub2RlWzBdLCBwb3MueCwgcG9zLnksIHBvcy53LCBwb3MuaCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2zhurdwIGzhuqFpIGhv4bqhdCDEkeG7mW5nXHJcbiAgICAgICAgICAgICAgICAgICAgcmVjdXNpdmUoMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL2No4bqheSBob8OgbiB04bqldFxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9lbmQgdGFza1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuZGF0YSgnd29yay1ydW5uaW5nJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3bhuqtuIOG7nyBzbGlkZSBoaeG7h24gdOG6oWkuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2xpZGVTdGF0dXMgPT09IGljZHRfUnVuLnNsaWRlU3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAob3B0aW9ucy5maW5pc2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9naeG7ryBuZ3V5w6puIHbhu4sgdHLDrVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdHLhu58gduG7gSB0cuG6oW5nIHRow6FpIGPFqVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZ8OhbiBnacOhIHRy4buLIG3hu5tpIGNobyBhdHRyaWJ1dGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCBpY2R0X1NpemUyQXR0cmlidXRlKHR5cGUsIHNpemUsIGF0dHJpYnV0ZSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY+G6rXAgbmjhuq10IFVJXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY2R0X1N5bmNTdmdOb2RlQXR0cmlidXRlKCh3aW5kb3cgYXMgYW55KS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCksIGF0dHJpYnV0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL+G6qW4gxJHhu5FpIHTGsOG7o25nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub2RlLmFkZENsYXNzKCdoaWRlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW5BbmltYXRpb24ob3B0aW9ucy5ub2RlLmlkLCB7IG5vZGU6IG9wdGlvbnMubm9kZSwgdmFsdWU6IG9wdGlvbnMubm9kZS5hbmltYXRlPy5vdXQsIG5vZGVTdGF0dXM6IG9wdGlvbnMubm9kZVN0YXR1cywgc2xpZGVTdGF0dXM6IG9wdGlvbnMuc2xpZGVTdGF0dXMgfSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuYWRkQ2xhc3MoJ2hpZGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5vZGUuZGF0YSgnd29yay1ydW5uaW5nJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAvL25vZGUuYXR0cihkcmF3KG5vZGVbMF0sIHBvcy54LCBwb3MueSwgcG9zLncsIHBvcy5oKSk7XHJcblxyXG4gICAgICAgICAgICAvL3Ry4bqhbmcgdGjDoWkgc2xpZGUga2jDtG5nIHRoYXkgxJHhu5VpXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNsaWRlU3RhdHVzID09PSBpY2R0X1J1bi5zbGlkZVN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgc3VjY2VzcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vY2jhuqF5IHThu6sgaSA9IDEsIHbDrCBpID0gMCBjaMOtbmggbMOgIHThu41hIMSR4buZIGhp4buHbiB04bqhaSBj4bunYSDEkeG7kWkgdMaw4bujbmdcclxuICAgIHJlY3VzaXZlKDEpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzbW9vdGhQb2ludHMocG9pbnRzOiBBcnJheTxBcnJheTxudW1iZXI+Pikge1xyXG4gICAgbGV0IHJlcyA9IFtdO1xyXG5cclxuICAgIGlmIChwb2ludHMubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgLy9u4bq/dSBz4buRIGzGsOG7o25nIMSRaeG7g20gw610LCB0aMOsIHRow6ptIDEgxJFp4buDbSDhu58gdHJ1bmcgdMOibSBjaG8gZOG7hSDEkeG7kWkgcGjDs1xyXG4gICAgICAgIHBvaW50cy5zcGxpY2UoMSwgMCwgWyhwb2ludHNbMF1bMF0gKyBwb2ludHNbMV1bMF0pIC8gMiwgKHBvaW50c1swXVsxXSArIHBvaW50c1sxXVsxXSkgLyAyXSk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGkgPSAxLFxyXG4gICAgICAgIGxlbiA9IHBvaW50cy5sZW5ndGgsXHJcbiAgICAgICAgZmxhZ01pbiA9IDE1LFxyXG4gICAgICAgIGZsYWdNYXggPSAyMCxcclxuICAgICAgICBiZWZvcmUsIGN1cnJlbnQsIGFmdGVyO1xyXG5cclxuICAgIHdoaWxlIChpIDwgbGVuKSB7XHJcbiAgICAgICAgYmVmb3JlID0gcG9pbnRzW2kgLSAxXTtcclxuICAgICAgICBjdXJyZW50ID0gcG9pbnRzW2ldO1xyXG4gICAgICAgIGFmdGVyID0gcG9pbnRzW2kgKyAxXTtcclxuXHJcbiAgICAgICAgaWYgKChNYXRoLmFicyhiZWZvcmVbMF0gLSBjdXJyZW50WzBdKSA+PSBmbGFnTWluIHx8IE1hdGguYWJzKGJlZm9yZVsxXSAtIGN1cnJlbnRbMV0pID49IGZsYWdNaW4pICYmXHJcbiAgICAgICAgICAgIE1hdGgucG93KGJlZm9yZVswXSAtIGN1cnJlbnRbMF0sIDIpICsgTWF0aC5wb3coYmVmb3JlWzFdIC0gY3VycmVudFsxXSwgMikgPj0gTWF0aC5wb3coZmxhZ01pbiwgMikgJiZcclxuXHJcbiAgICAgICAgICAgIChhZnRlciAmJlxyXG4gICAgICAgICAgICAgICAgKE1hdGguYWJzKGJlZm9yZVswXSAtIGFmdGVyWzBdKSA8PSBmbGFnTWF4IHx8IE1hdGguYWJzKGJlZm9yZVsxXSAtIGFmdGVyWzFdKSA8PSBmbGFnTWF4KSAmJlxyXG4gICAgICAgICAgICAgICAgTWF0aC5wb3coYmVmb3JlWzBdIC0gYWZ0ZXJbMF0sIDIpICsgTWF0aC5wb3coYmVmb3JlWzFdIC0gYWZ0ZXJbMV0sIDIpIDw9IE1hdGgucG93KGZsYWdNYXgsIDIpKSkge1xyXG4gICAgICAgICAgICByZXMucHVzaChjdXJyZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBzdWJ4ID0gY3VycmVudFswXSAtIGJlZm9yZVswXSxcclxuICAgICAgICAgICAgICAgIHN1YnkgPSBjdXJyZW50WzFdIC0gYmVmb3JlWzFdLFxyXG4gICAgICAgICAgICAgICAgZmFjdG9yID0gTWF0aC5tYXgoTWF0aC5hYnMoc3VieCksIE1hdGguYWJzKHN1YnkpKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZmFjdG9yOyBqICs9IGZsYWdNaW4pIHtcclxuICAgICAgICAgICAgICAgIHJlcy5wdXNoKFtiZWZvcmVbMF0gKyBzdWJ4ICogaiAvIGZhY3RvciwgYmVmb3JlWzFdICsgc3VieSAqIGogLyBmYWN0b3JdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaSsrO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChsZW4gPiAwKSB7XHJcbiAgICAgICAgLy90aMOqbSDEkeG6p3VcclxuICAgICAgICByZXMuc3BsaWNlKDAsIDAsIHBvaW50c1swXSk7XHJcblxyXG4gICAgICAgIC8vdGjDqm0gxJHDvXRcclxuICAgICAgICByZXMucHVzaChwb2ludHNbbGVuIC0gMV0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXM7XHJcbn0iLCJpbXBvcnQgeyBpY2R0IH0gZnJvbSBcIi4uLy4uLy4uL3Byb3RvdHlwZS9pY2R0XCI7XHJcbmltcG9ydCB7IGljZHRfSURhdGFOb2RlSW50ZXJhY3RpdmVfQXVkaW8gfSBmcm9tIFwiLi4vLi4vLi4vaW50ZXJmYWNlL0lEYXRhU291cmNlXCI7XHJcbmltcG9ydCB7IGljZHRfUnVuIH0gZnJvbSBcIi4uLy4uL3J1blwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfUnVuX0ludGVyYWN0aXZlX0F1ZGlvID0gKG5vZGVJZDogbnVtYmVyLCBkYXRhQXVkaW86IGljZHRfSURhdGFOb2RlSW50ZXJhY3RpdmVfQXVkaW8sIHdhaXRTdGF0dXM6IHsgdG90YWw6IG51bWJlciwgY291bnRlcjogbnVtYmVyIH0sIG9wdGlvbnM6IHsgbm9kZVN0YXR1czogbnVtYmVyLCBzbGlkZVN0YXR1czogbnVtYmVyIH0sIHN1Y2Nlc3M6IEZ1bmN0aW9uKSA9PiB7XHJcblxyXG4gICAgLy90cuG6oW5nIHRow6FpIHNsaWRlIHRoYXkgxJHhu5VpXHJcbiAgICBpZiAob3B0aW9ucy5zbGlkZVN0YXR1cyAhPSBpY2R0X1J1bi5zbGlkZVN0YXR1cykge1xyXG4gICAgICAgIC8vYXVkaW8gxJHGsOG7o2MgdGhp4bq/dCBs4bqtcCBu4bq/dSB0aGF5IMSR4buVaSB0cuG6oW5nIHRow6FpIHPhur0gZOG7q25nICht4bq3YyDEkeG7i25oKVxyXG4gICAgICAgIGlmICghZGF0YUF1ZGlvLmFzeW5jIHx8IGRhdGFBdWRpby5hc3luYyA9PSAnY2hhbmdlLXNsaWRlJykge1xyXG4gICAgICAgICAgICBzdWNjZXNzKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vdHLhuqFuZyB0aMOhaSBub2RlIHRoYXkgxJHhu5VpXHJcbiAgICBlbHNlIGlmIChvcHRpb25zLm5vZGVTdGF0dXMgIT0gaWNkdF9SdW4ubm9kZVN0YXR1cykge1xyXG4gICAgICAgIC8vYXVkaW8gxJHGsOG7o2MgdGhp4bq/dCBs4bqtcCBu4bq/dSB0aGF5IMSR4buVaSB0cuG6oW5nIHRow6FpIHPhur0gZOG7q25nICht4bq3YyDEkeG7i25oKVxyXG4gICAgICAgIGlmICghZGF0YUF1ZGlvLmFzeW5jIHx8IGRhdGFBdWRpby5hc3luYyA9PSAnY2hhbmdlLW5vZGUnKSB7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3MoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWRhdGFBdWRpby5zb3VyY2U/LnBhdGggJiYgIWRhdGFBdWRpby5zb3VyY2U/LnVybCkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihgJHtub2RlSWR9IC0+IGF1ZGlvIG5vIHNvdXJjZSFgKTtcclxuICAgICAgICBzdWNjZXNzKCk7XHJcbiAgICAgICAgc3VjY2VzcyA9ICgpID0+IHsgfTsvL2h1eSBmdW5jdGlvblxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbm9kZSA9IGpRdWVyeSgnIycgKyBub2RlSWQpO1xyXG5cclxuICAgIGxldCBsb29wTnVtID0gZGF0YUF1ZGlvLml0ZXJhdGlvbiA/PyAwO1xyXG4gICAgaWYgKGxvb3BOdW0gPCAwKSB7XHJcbiAgICAgICAgLy9cclxuICAgICAgICBzdWNjZXNzKCk7ICAvL2zhurdwIHbDtCBo4bqhbiB0aMOsIGfhu41pIGx1w7RuXHJcbiAgICAgICAgc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHsgfTsgIC8vaOG7p3kgZnVuY3Rpb24gY2FsbGJhY2tcclxuICAgIH1cclxuXHJcbiAgICAvL27hur91IGl0ZW0gY8OzIGhv4bqhdCDEkeG7mW5nIGzDoCB2w7QgaOG6oW4gdsOgIMSRYW5nIGNo4bqheSB0aMOsIGtvIGPhuqduIGfhu41pIGzhuqFpIG7hu69hXHJcbiAgICBpZiAobm9kZS5kYXRhKCdhdWRpby1ydW5uaW5nJykgJiYgbG9vcE51bSA8IDApIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbm9kZS5kYXRhKCdhdWRpby1ydW5uaW5nJywgdHJ1ZSk7XHJcblxyXG4gICAgLy9cclxuICAgIHZhciBzdG9wQXVkaW8gPSBmdW5jdGlvbiAodGhpc0F1ZGlvOiBhbnkpIHtcclxuICAgICAgICB0aGlzQXVkaW8ucGF1c2UoKTtcclxuICAgICAgICB0aGlzQXVkaW8ucmVtb3ZlKCk7XHJcbiAgICAgICAgbm9kZS5kYXRhKCdhdWRpby1ydW5uaW5nJywgZmFsc2UpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvL1xyXG4gICAgdmFyIGF1ZGlvID0gbmV3IEF1ZGlvKCk7XHJcbiAgICBhdWRpby5hdXRvcGxheSA9IHRydWU7XHJcbiAgICBhdWRpby5sb29wID0gbG9vcE51bSAhPSAwID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgYXVkaW8ucHJlbG9hZCA9ICdhdXRvJzsgLy904bqjaSBk4buvIGxp4buHdSBhdWRpbyBraGkga2jhu59pIHThuqFvXHJcbiAgICBhdWRpby5jb250cm9scyA9IHRydWU7XHJcbiAgICBhdWRpby5zZXRBdHRyaWJ1dGVOb2RlKGRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZSgncGxheXNpbmxpbmUnKSk7XHJcblxyXG4gICAgYXVkaW8uYWRkRXZlbnRMaXN0ZW5lcignY2FucGxheScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvL2FsZXJ0KCdhdWRpbyBjYW5wbGF5Jyk7XHJcbiAgICAgICAgdmFyIHByb21pc2UgPSBhdWRpby5wbGF5KCk7XHJcbiAgICAgICAgaWYgKHByb21pc2UpIHtcclxuICAgICAgICAgICAgcHJvbWlzZVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuZGF0YSgnYXVkaW8tcnVubmluZycsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL8OibSB0aGFuaCBz4bq9IGThu6tuZyBzYXUgMSBraG/huqNuZyB0aOG7nWkgZ2lhblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhQXVkaW8uYXN5bmMgPT0gJ3RpbWUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcEF1ZGlvKGF1ZGlvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSAoKSA9PiB7IH07Ly9odXkgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgKGRhdGFBdWRpby50aW1lID8/IDEpICogMTAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8va2jDtG5nIHRo4buDIGThu6tuZyB0aMOsIGfhu41pIGx1w7RuXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZGF0YUF1ZGlvLmFzeW5jID09ICdub24tc3RvcCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzID0gKCkgPT4geyB9Oy8vaHV5IGZ1bmN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vZXJyb3IgcGxheVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5kYXRhKCdhdWRpby1ydW5uaW5nJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3Ry4bqhbmcgdGjDoWkgc2xpZGUga2jDtG5nIMSR4buVaVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNsaWRlU3RhdHVzID09PSBpY2R0X1J1bi5zbGlkZVN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSAoKSA9PiB7IH07Ly9odXkgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGF1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy9hbGVydCgnYXVkaW8gdGltZXVwZGF0ZScpO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKGRhdGFBdWRpby5hc3luYykge1xyXG4gICAgICAgICAgICBjYXNlIFwidGltZVwiOiB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiZmluaXNoLWFjdGlvblwiOiB7XHJcbiAgICAgICAgICAgICAgICAvL3RoYXkgxJHhu5VpIHRy4bqhbmcgdGjDoWkgaG/DoG4gdGjDoG5oIGhv4bqhdCDEkeG7mW5nLCBjaOG7iSBjw7JuIDEgYsaw4bubYyBhdWRpbyBsw6AgeG9uZ1xyXG4gICAgICAgICAgICAgICAgaWYgKHdhaXRTdGF0dXMudG90YWwgPj0gMiAmJiB3YWl0U3RhdHVzLnRvdGFsIC0gd2FpdFN0YXR1cy5jb3VudGVyID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdG9wQXVkaW8odGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSAoKSA9PiB7IH07Ly9odXkgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGNhc2UgXCJjaGFuZ2Utbm9kZVwiOiB7XHJcbiAgICAgICAgICAgICAgICAvL3RoYXkgxJHhu5VpIHRy4bqhbmcgdGjDoWkgbm9kZVxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMubm9kZVN0YXR1cyAhPT0gaWNkdF9SdW4ubm9kZVN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0b3BBdWRpbyh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA9ICgpID0+IHsgfTsvL2h1eSBmdW5jdGlvblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcImNoYW5nZS1zbGlkZVwiOiB7XHJcbiAgICAgICAgICAgICAgICAvL3RoYXkgxJHhu5VpIHRy4bqhbmcgdGjDoWkgc2xpZGVcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNsaWRlU3RhdHVzICE9PSBpY2R0X1J1bi5zbGlkZVN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0b3BBdWRpbyh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA9ICgpID0+IHsgfTsvL2h1eSBmdW5jdGlvblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcIm5vbi1zdG9wXCI6IHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBhdWRpby5hZGRFdmVudExpc3RlbmVyKCdjYW5wbGF5dGhyb3VnaCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvL2FsZXJ0KCdhdWRpbyBjYW5wbGF5dGhyb3VnaCcpO1xyXG4gICAgICAgIGlmICh0aGlzLmxvb3ApIHtcclxuICAgICAgICAgICAgaWYgKGxvb3BOdW0gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBsb29wTnVtLS07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobG9vcE51bSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvb3AgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgYXVkaW8uYWRkRXZlbnRMaXN0ZW5lcigncGxheScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvL2FsZXJ0KCdhdWRpbyBwbGF5Jyk7XHJcbiAgICB9KTtcclxuICAgIGF1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoJ3BhdXNlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vYWxlcnQoJ2F1ZGlvIHBhdXNlJyk7XHJcbiAgICB9KTtcclxuICAgIGF1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vYWxlcnQoJ2F1ZGlvIGVuZGVkJyk7XHJcbiAgICAgICAgdGhpcy5yZW1vdmUoKTtcclxuICAgICAgICBub2RlLmRhdGEoJ2F1ZGlvLXJ1bm5pbmcnLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8va+G6v3QgdGjDumMgc+G7m20gdsOgIHRy4bqhbmcgdGjDoWkgc2xpZGUga2jDtG5nIHRoYXkgxJHhu5VpXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuc2xpZGVTdGF0dXMgPT09IGljZHRfUnVuLnNsaWRlU3RhdHVzKSB7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3MoKTtcclxuICAgICAgICAgICAgc3VjY2VzcyA9ICgpID0+IHsgfTsvL2h1eSBmdW5jdGlvblxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgYXVkaW8ub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgdGhpcy5yZW1vdmUoKTtcclxuICAgICAgICBub2RlLmRhdGEoJ2F1ZGlvLXJ1bm5pbmcnLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vdHLhuqFuZyB0aMOhaSBzbGlkZSBraMO0bmcgxJHhu5VpXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuc2xpZGVTdGF0dXMgPT09IGljZHRfUnVuLnNsaWRlU3RhdHVzKSB7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3MoKTtcclxuICAgICAgICAgICAgc3VjY2VzcyA9ICgpID0+IHsgfTsvL2h1eSBmdW5jdGlvblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGF1ZGlvLnNyYyA9IChkYXRhQXVkaW8uc291cmNlPy5wYXRoID8gaWNkdC5jb25maWc/LnJlYWRmaWxldXBsb2FkdXJsICsgZGF0YUF1ZGlvLnNvdXJjZT8ucGF0aCA6IGRhdGFBdWRpby5zb3VyY2U/LnVybCkgfHwgJyc7XHJcblxyXG4gICAgcmV0dXJuIGF1ZGlvO1xyXG59XHJcblxyXG5jb25zdCBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9BdWRpb19iayA9IChub2RlSWQ6IG51bWJlciwgb3B0aW9uczogeyBzb3VyY2U/OiB7IHVybD86IHN0cmluZywgcGF0aD86IHN0cmluZywgbmFtZT86IHN0cmluZyB9LCBpdGVyYXRpb24/OiBudW1iZXIsIG5vZGVTdGF0dXM6IG51bWJlciwgc2xpZGVTdGF0dXM6IG51bWJlciB9LCBzdWNjZXNzOiBGdW5jdGlvbikgPT4ge1xyXG5cclxuICAgIC8vdHLhuqFuZyB0aMOhaSBzbGlkZSBraMO0bmcgxJHhu5VpLCBuaMawbmcgbm9kZSDEkcOjIHRoYXkgxJHhu5VpIHRow6wgY2FsbGJhY2sgdsOgIGTDs25nIHPhu7Ega2nhu4duXHJcbiAgICBpZiAob3B0aW9ucy5zbGlkZVN0YXR1cyA9PT0gaWNkdF9SdW4uc2xpZGVTdGF0dXMgJiYgb3B0aW9ucy5ub2RlU3RhdHVzICE9PSBpY2R0X1J1bi5ub2RlU3RhdHVzKSB7XHJcbiAgICAgICAgc3VjY2VzcygpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIW9wdGlvbnMuc291cmNlPy5wYXRoICYmICFvcHRpb25zLnNvdXJjZT8udXJsKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGAke25vZGVJZH0gLT4gYXVkaW8gbm8gc291cmNlIWApO1xyXG4gICAgICAgIHN1Y2Nlc3MoKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG5vZGUgPSBqUXVlcnkoJyMnICsgbm9kZUlkKTtcclxuXHJcbiAgICBsZXQgbG9vcE51bSA9IG9wdGlvbnMuaXRlcmF0aW9uID8/IDA7XHJcbiAgICBpZiAobG9vcE51bSA8IDApIHtcclxuICAgICAgICAvL1xyXG4gICAgICAgIHN1Y2Nlc3MoKTsgIC8vbOG6t3AgdsO0IGjhuqFuIHRow6wgZ+G7jWkgbHXDtG5cclxuICAgICAgICBzdWNjZXNzID0gZnVuY3Rpb24gKCkgeyB9OyAgLy9o4buneSBmdW5jdGlvbiBjYWxsYmFja1xyXG4gICAgfVxyXG5cclxuICAgIC8vbuG6v3UgaXRlbSBjw7MgaG/huqF0IMSR4buZbmcgbMOgIHbDtCBo4bqhbiB2w6AgxJFhbmcgY2jhuqF5IHRow6wga28gY+G6p24gZ+G7jWkgbOG6oWkgbuG7r2FcclxuICAgIGlmIChub2RlLmRhdGEoJ2F1ZGlvLXJ1bm5pbmcnKSAmJiBsb29wTnVtIDwgMCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBub2RlLmRhdGEoJ2F1ZGlvLXJ1bm5pbmcnLCB0cnVlKTtcclxuXHJcbiAgICAvL1xyXG4gICAgdmFyIGF1ZGlvID0gbmV3IEF1ZGlvKCk7XHJcbiAgICBhdWRpby5hdXRvcGxheSA9IHRydWU7XHJcbiAgICBhdWRpby5sb29wID0gbG9vcE51bSAhPSAwID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgYXVkaW8ucHJlbG9hZCA9ICdhdXRvJzsgLy904bqjaSBk4buvIGxp4buHdSBhdWRpbyBraGkga2jhu59pIHThuqFvXHJcbiAgICBhdWRpby5jb250cm9scyA9IHRydWU7XHJcbiAgICBhdWRpby5zZXRBdHRyaWJ1dGVOb2RlKGRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZSgncGxheXNpbmxpbmUnKSk7XHJcblxyXG4gICAgYXVkaW8uYWRkRXZlbnRMaXN0ZW5lcignY2FucGxheScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvL2FsZXJ0KCdhdWRpbyBjYW5wbGF5Jyk7XHJcbiAgICAgICAgdmFyIHByb21pc2UgPSBhdWRpby5wbGF5KCk7XHJcbiAgICAgICAgaWYgKHByb21pc2UpIHtcclxuICAgICAgICAgICAgcHJvbWlzZVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuZGF0YSgnYXVkaW8tcnVubmluZycsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vZXJyb3IgcGxheVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5kYXRhKCdhdWRpby1ydW5uaW5nJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3Ry4bqhbmcgdGjDoWkgc2xpZGUga2jDtG5nIMSR4buVaVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNsaWRlU3RhdHVzID09PSBpY2R0X1J1bi5zbGlkZVN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBhdWRpby5hZGRFdmVudExpc3RlbmVyKCd0aW1ldXBkYXRlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vYWxlcnQoJ2F1ZGlvIHRpbWV1cGRhdGUnKTtcclxuICAgICAgICB2YXIgc3RvcEF1ZGlvID0gZnVuY3Rpb24gKGF1ZGlvOiBhbnkpIHtcclxuICAgICAgICAgICAgYXVkaW8ucGF1c2UoKTtcclxuICAgICAgICAgICAgYXVkaW8ucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIG5vZGUuZGF0YSgnYXVkaW8tcnVubmluZycsIGZhbHNlKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3RoYXkgxJHhu5VpIHRy4bqhbmcgdGjDoWkgc2xpZGVcclxuICAgICAgICBpZiAob3B0aW9ucy5zbGlkZVN0YXR1cyAhPT0gaWNkdF9SdW4uc2xpZGVTdGF0dXMpIHtcclxuICAgICAgICAgICAgc3RvcEF1ZGlvKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL3RoYXkgxJHhu5VpIHRy4bqhbmcgdGjDoWkgbm9kZVxyXG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMubm9kZVN0YXR1cyAhPT0gaWNkdF9SdW4ubm9kZVN0YXR1cykge1xyXG4gICAgICAgICAgICBzdG9wQXVkaW8odGhpcyk7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3MoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGF1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoJ2NhbnBsYXl0aHJvdWdoJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vYWxlcnQoJ2F1ZGlvIGNhbnBsYXl0aHJvdWdoJyk7XHJcbiAgICAgICAgaWYgKHRoaXMubG9vcCkge1xyXG4gICAgICAgICAgICBpZiAobG9vcE51bSA+IDApIHtcclxuICAgICAgICAgICAgICAgIGxvb3BOdW0tLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChsb29wTnVtID09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9vcCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBhdWRpby5hZGRFdmVudExpc3RlbmVyKCdwbGF5JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vYWxlcnQoJ2F1ZGlvIHBsYXknKTtcclxuICAgIH0pO1xyXG4gICAgYXVkaW8uYWRkRXZlbnRMaXN0ZW5lcigncGF1c2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy9hbGVydCgnYXVkaW8gcGF1c2UnKTtcclxuICAgIH0pO1xyXG4gICAgYXVkaW8uYWRkRXZlbnRMaXN0ZW5lcignZW5kZWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy9hbGVydCgnYXVkaW8gZW5kZWQnKTtcclxuICAgICAgICB0aGlzLnJlbW92ZSgpO1xyXG4gICAgICAgIG5vZGUuZGF0YSgnYXVkaW8tcnVubmluZycsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgLy90cuG6oW5nIHRow6FpIHNsaWRlIGtow7RuZyB0aGF5IMSR4buVaVxyXG4gICAgICAgIGlmIChvcHRpb25zLnNsaWRlU3RhdHVzID09PSBpY2R0X1J1bi5zbGlkZVN0YXR1cykge1xyXG4gICAgICAgICAgICBzdWNjZXNzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBhdWRpby5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICB0aGlzLnJlbW92ZSgpO1xyXG4gICAgICAgIG5vZGUuZGF0YSgnYXVkaW8tcnVubmluZycsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgLy90cuG6oW5nIHRow6FpIHNsaWRlIGtow7RuZyDEkeG7lWlcclxuICAgICAgICBpZiAob3B0aW9ucy5zbGlkZVN0YXR1cyA9PT0gaWNkdF9SdW4uc2xpZGVTdGF0dXMpIHtcclxuICAgICAgICAgICAgc3VjY2VzcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGF1ZGlvLnNyYyA9IChvcHRpb25zLnNvdXJjZT8ucGF0aCA/IGljZHQuY29uZmlnPy5yZWFkZmlsZXVwbG9hZHVybCArIG9wdGlvbnMuc291cmNlPy5wYXRoIDogb3B0aW9ucy5zb3VyY2U/LnVybCkgfHwgJyc7XHJcblxyXG4gICAgcmV0dXJuIGF1ZGlvO1xyXG59IiwiaW1wb3J0IHsgaWNkdF9JRGF0YU5vZGUgfSBmcm9tIFwiLi4vLi4vLi4vaW50ZXJmYWNlL0lEYXRhU291cmNlXCI7XHJcbmltcG9ydCB7IGljZHQgfSBmcm9tIFwiLi4vLi4vLi4vcHJvdG90eXBlL2ljZHRcIjtcclxuaW1wb3J0IHsgaWNkdF9SdW4gfSBmcm9tIFwiLi4vLi4vcnVuXCI7XHJcbmltcG9ydCB7IGljZHRfUnVuX0ludGVyYWN0aXZlX0FjdGlvbkFuaW1hdGlvbiB9IGZyb20gXCIuL2FjdGlvbi1hbmltYXRpb25cIjtcclxuaW1wb3J0IHsgaWNkdF9SdW5fSW50ZXJhY3RpdmVfQWN0aW9uUG9pbnRzIH0gZnJvbSBcIi4vYWN0aW9uLXBvaW50c1wiO1xyXG5pbXBvcnQgeyBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9BdWRpbyB9IGZyb20gXCIuL2F1ZGlvXCI7XHJcbmltcG9ydCB7IGljZHRfUnVuX0ludGVyYWN0aXZlX1RyaWdnZXJIaWRlLCBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9UcmlnZ2VyUnVuLCBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9UcmlnZ2VyU2hvdyB9IGZyb20gXCIuL3RyaWdnZXJcIjtcclxuaW1wb3J0IHsgZ2V0TWVkaWFWaWV3ZXJVcmwgfSBmcm9tIFwiLi4vLi4vc3luYy1lbGVtZW50L3VpXCI7XHJcbmltcG9ydCB7IHJ1bkFuaW1hdGlvbiB9IGZyb20gXCIuLi9hbmltYXRlL2FuaW1hdGlvblwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfUnVuX0ludGVyYWN0aXZlX05vZGVDbGljayA9IChub2RlOiBpY2R0X0lEYXRhTm9kZSwgbm9kZVN0YXR1czogbnVtYmVyLCBzbGlkZVN0YXR1czogbnVtYmVyLCBjbGlja1N1Y2Nlc3M/OiBGdW5jdGlvbikgPT4ge1xyXG5cclxuICAgIGxldCB3YWl0U3RhdHVzID0geyB0b3RhbDogMCwgY291bnRlcjogMCB9O1xyXG5cclxuICAgIGxldCB7IHRyaWdnZXJzaG93LCB0cmlnZ2VycnVuLCB0cmlnZ2VyaGlkZSwgYWN0aW9uLCBhdWRpbywgc2xpZGUsIG1lZGlhIH0gPSBub2RlLmludGVyYWN0aXZlPy5jbGljayA/PyB7fTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhgbm9kZSgke25vZGUuaWR9KSB8IG5vZGVTdGF0dXMoJHtub2RlU3RhdHVzfSkgfCBzbGlkZVN0YXR1cygke3NsaWRlU3RhdHVzfSkgfCBjbGlja2ApO1xyXG5cclxuICAgIC8vdHJpZ2dlclxyXG4gICAgaWYgKHRyaWdnZXJzaG93KSB7XHJcbiAgICAgICAgbGV0IHsgaWQsIGlkcywgdGltZSwgYXN5bmMgfSA9IHRyaWdnZXJzaG93O1xyXG4gICAgICAgIC8vY2jhuqF5IGx1w7RuXHJcbiAgICAgICAgaWYgKGFzeW5jID09ICdhc3luY3RydWUnKSB7XHJcbiAgICAgICAgICAgIGljZHRfUnVuX0ludGVyYWN0aXZlX1RyaWdnZXJTaG93KHsgaWQsIGlkcywgbm9kZVN0YXR1cywgc2xpZGVTdGF0dXMgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vY2jhuqF5IHNhdSB0aW1lIChtcylcclxuICAgICAgICBlbHNlIGlmIChhc3luYyA9PSAndGltZScpIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9UcmlnZ2VyU2hvdyh7IGlkLCBpZHMsIG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzIH0pO1xyXG4gICAgICAgICAgICB9LCAodGltZSA/PyAwKSAqIDEwMDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL23hurdjIMSR4buLbmggbMOgIGNo4bqheSBsdcO0blxyXG4gICAgICAgIC8vIGVsc2Uge1xyXG4gICAgICAgIC8vICAgICBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9UcmlnZ2VyU2hvdyh7IGlkLCBpZHMsIG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzIH0pO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuICAgIGlmICh0cmlnZ2VycnVuKSB7XHJcbiAgICAgICAgbGV0IHsgaWQsIGlkcywgdGltZSwgYXN5bmMgfSA9IHRyaWdnZXJydW47XHJcbiAgICAgICAgLy9jaOG6oXkgbHXDtG5cclxuICAgICAgICBpZiAoYXN5bmMgPT0gJ2FzeW5jdHJ1ZScpIHtcclxuICAgICAgICAgICAgaWNkdF9SdW5fSW50ZXJhY3RpdmVfVHJpZ2dlclJ1bih7IGlkLCBpZHMsIG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL2No4bqheSBzYXUgdGltZSAobXMpXHJcbiAgICAgICAgZWxzZSBpZiAoYXN5bmMgPT0gJ3RpbWUnKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWNkdF9SdW5fSW50ZXJhY3RpdmVfVHJpZ2dlclJ1bih7IGlkLCBpZHMsIG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzIH0pO1xyXG4gICAgICAgICAgICB9LCAodGltZSA/PyAwKSAqIDEwMDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL23hurdjIMSR4buLbmggbMOgIGNo4bqheSBsdcO0blxyXG4gICAgICAgIC8vIGVsc2Uge1xyXG4gICAgICAgIC8vICAgICBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9UcmlnZ2VyUnVuKHsgaWQsIGlkcywgbm9kZVN0YXR1cywgc2xpZGVTdGF0dXMgfSk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG4gICAgaWYgKHRyaWdnZXJoaWRlKSB7XHJcbiAgICAgICAgbGV0IHsgaWQsIGlkcywgdGltZSwgYXN5bmMgfSA9IHRyaWdnZXJoaWRlO1xyXG5cclxuICAgICAgICAvL2No4bqheSBsdcO0blxyXG4gICAgICAgIGlmIChhc3luYyA9PSAnYXN5bmN0cnVlJykge1xyXG4gICAgICAgICAgICBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9UcmlnZ2VySGlkZSh7IGlkLCBpZHMsIG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL2No4bqheSBzYXUgdGltZSAobXMpXHJcbiAgICAgICAgZWxzZSBpZiAoYXN5bmMgPT0gJ3RpbWUnKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWNkdF9SdW5fSW50ZXJhY3RpdmVfVHJpZ2dlckhpZGUoeyBpZCwgaWRzLCBub2RlU3RhdHVzLCBzbGlkZVN0YXR1cyB9KTtcclxuICAgICAgICAgICAgfSwgKHRpbWUgPz8gMCkgKiAxMDAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9t4bq3YyDEkeG7i25oIGzDoCBjaOG6oXkgbHXDtG5cclxuICAgICAgICAvLyBlbHNlIHtcclxuICAgICAgICAvLyAgICAgaWNkdF9SdW5fSW50ZXJhY3RpdmVfVHJpZ2dlckhpZGUoeyBpZCwgaWRzLCBub2RlU3RhdHVzLCBzbGlkZVN0YXR1cyB9KTtcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG5vZGVTdWNjZXNzID0gKCkgPT4ge1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAod2FpdFN0YXR1cy5jb3VudGVyID49IHdhaXRTdGF0dXMudG90YWwpIHtcclxuICAgICAgICAgICAgICAgIGNsaWNrU3VjY2VzcyA/IGNsaWNrU3VjY2VzcygpIDogbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3RyaWdnZXJcclxuICAgICAgICAgICAgICAgIGlmICh0cmlnZ2Vyc2hvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB7IGlkLCBpZHMsIGFzeW5jIH0gPSB0cmlnZ2Vyc2hvdztcclxuICAgICAgICAgICAgICAgICAgICAvL2No4bqheSBzYXUga2hpIMSR4buRaSB0xrDhu6NuZyBob8OgbiB04bqldCBob+G6oXQgxJHhu5luZ1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYXN5bmMgfHwgYXN5bmMgPT0gJ2FzeW5jZmFsc2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljZHRfUnVuX0ludGVyYWN0aXZlX1RyaWdnZXJTaG93KHsgaWQsIGlkcywgbm9kZVN0YXR1cywgc2xpZGVTdGF0dXMgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRyaWdnZXJydW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeyBpZCwgaWRzLCBhc3luYyB9ID0gdHJpZ2dlcnJ1bjtcclxuICAgICAgICAgICAgICAgICAgICAvL2No4bqheSBzYXUga2hpIMSR4buRaSB0xrDhu6NuZyBob8OgbiB04bqldCBob+G6oXQgxJHhu5luZ1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYXN5bmMgfHwgYXN5bmMgPT0gJ2FzeW5jZmFsc2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljZHRfUnVuX0ludGVyYWN0aXZlX1RyaWdnZXJSdW4oeyBpZCwgaWRzLCBub2RlU3RhdHVzLCBzbGlkZVN0YXR1cyB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHJpZ2dlcmhpZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeyBpZCwgaWRzLCBhc3luYyB9ID0gdHJpZ2dlcmhpZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jaOG6oXkgc2F1IGtoaSDEkeG7kWkgdMaw4bujbmcgaG/DoG4gdOG6pXQgaG/huqF0IMSR4buZbmdcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWFzeW5jIHx8IGFzeW5jID09ICdhc3luY2ZhbHNlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9UcmlnZ2VySGlkZSh7IGlkLCBpZHMsIG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vYWN0aW9uXHJcbiAgICBpZiAoYWN0aW9uPy52YWx1ZSkge1xyXG5cclxuICAgICAgICB3YWl0U3RhdHVzLnRvdGFsICs9IDE7XHJcblxyXG4gICAgICAgIGxldCBzdWNjZXNzQWN0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKGBJbnRlcmFjdGl2ZU5vZGUgIyR7bm9kZS5pZH0gYWN0aW9uIHN1Y2Nlc3MhYCk7XHJcblxyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICB3YWl0U3RhdHVzLmNvdW50ZXIgKz0gMTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIG5vZGVTdWNjZXNzKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc3dpdGNoIChhY3Rpb24/LnZhbHVlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2hpZGUnOiB7XHJcbiAgICAgICAgICAgICAgICAvL2pRdWVyeSgnIycgKyBub2RlLmlkKS5hZGRDbGFzcygnaGlkZScpO1xyXG4gICAgICAgICAgICAgICAgLy9zdWNjZXNzQWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBydW5BbmltYXRpb24obm9kZS5pZCwgeyBub2RlOiBub2RlLCB2YWx1ZTogbm9kZS5hbmltYXRlPy5vdXQsIG5vZGVTdGF0dXM6IG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzOiBzbGlkZVN0YXR1cyB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KCcjJyArIG5vZGUuaWQpLmFkZENsYXNzKCdoaWRlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0FjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdwb2ludHMnOiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgeyBwb2ludHMsIHRpbWUsIGl0ZXJhdGlvbiwgZmluaXNoIH0gPSBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBpZiAocG9pbnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdF9SdW5fSW50ZXJhY3RpdmVfQWN0aW9uUG9pbnRzKG5vZGUuaWQsIHsgbm9kZSwgcG9pbnRzLCB0aW1lLCBpdGVyYXRpb24sIGZpbmlzaCwgbm9kZVN0YXR1cywgc2xpZGVTdGF0dXMgfSwgc3VjY2Vzc0FjdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgeyB2YWx1ZSwgdGltZSwgaXRlcmF0aW9uLCBmaW5pc2ggfSA9IGFjdGlvbjtcclxuICAgICAgICAgICAgICAgIGljZHRfUnVuX0ludGVyYWN0aXZlX0FjdGlvbkFuaW1hdGlvbihub2RlLmlkLCB7IG5vZGUsIHZhbHVlLCB0aW1lLCBpdGVyYXRpb24sIGZpbmlzaCwgbm9kZVN0YXR1cywgc2xpZGVTdGF0dXMgfSwgc3VjY2Vzc0FjdGlvbik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL2F1ZGlvXHJcbiAgICBpZiAoYXVkaW8/LnNvdXJjZT8ucGF0aCkge1xyXG5cclxuICAgICAgICB3YWl0U3RhdHVzLnRvdGFsICs9IDE7XHJcblxyXG4gICAgICAgIGxldCBzdWNjZXNzQXVkaW8gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIHdhaXRTdGF0dXMuY291bnRlciArPSAxO1xyXG5cclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgbm9kZVN1Y2Nlc3MoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL2xldCB7IHNvdXJjZSwgaXRlcmF0aW9uIH0gPSBhdWRpbztcclxuICAgICAgICBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9BdWRpbyhub2RlLmlkLCBhdWRpbywgd2FpdFN0YXR1cywgeyBub2RlU3RhdHVzLCBzbGlkZVN0YXR1cyB9LCBzdWNjZXNzQXVkaW8pO1xyXG4gICAgfVxyXG5cclxuICAgIC8va2jDtG5nIGPDsyBow6BuaCDEkeG7mW5nIMSRxrDhu6NjIGfhuq9uIGNobyDEkeG7kWkgdMaw4bujbmdcclxuICAgIGlmICghd2FpdFN0YXR1cy50b3RhbCkge1xyXG4gICAgICAgIG5vZGVTdWNjZXNzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9zbGlkZVxyXG4gICAgaWYgKHNsaWRlPy5pZCkge1xyXG4gICAgICAgIHN3aXRjaCAoc2xpZGUuaWQpIHtcclxuICAgICAgICAgICAgLy9iYWNrXHJcbiAgICAgICAgICAgIGNhc2UgLTE6IHtcclxuICAgICAgICAgICAgICAgIGljZHRfUnVuLnJ1blNsaWRlKGljZHRfUnVuLnNsaWRlSWR4IC0gMSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL25leHRcclxuICAgICAgICAgICAgY2FzZSAtMjoge1xyXG4gICAgICAgICAgICAgICAgaWNkdF9SdW4ucnVuU2xpZGUoaWNkdF9SdW4uc2xpZGVJZHggKyAxKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vZ290byBpZFxyXG4gICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICBpY2R0X1J1bi5ydW5TbGlkZSh1bmRlZmluZWQsIHNsaWRlLmlkLCBzbGlkZS5jb2RlPy50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vbWVkaWFcclxuICAgIGlmIChtZWRpYT8udHlwZSkge1xyXG5cclxuICAgICAgICBsZXQgaWZyYW1lU3JjID0gZ2V0TWVkaWFWaWV3ZXJVcmwoe1xyXG4gICAgICAgICAgICByZWFkZmlsZXVwbG9hZHVybDogaWNkdC5jb25maWc/LnJlYWRmaWxldXBsb2FkdXJsLFxyXG4gICAgICAgICAgICB0eXBlOiBtZWRpYT8udHlwZSxcclxuICAgICAgICAgICAgb3NzOiBtZWRpYT8ub3NzLFxyXG4gICAgICAgICAgICBwYXRoOiBtZWRpYT8ucGF0aCxcclxuICAgICAgICAgICAgdXJsOiBtZWRpYT8udXJsLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZXQgaHRtbENvbnRlbnQgPSBgPGRpdiBjbGFzcz1cInBvcHVwLW1lZGlhLXZpZXdlclwiPjxpZnJhbWUgc3JjPVwiJHtpZnJhbWVTcmN9XCIgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3dmdWxsc2NyZWVuXHJcbiAgICAgICAgd2Via2l0YWxsb3dmdWxsc2NyZWVuIGFsbG93dHJhbnNwYXJlbmN5PVwidHJ1ZVwiIGFsbG93PVwiYXV0b3BsYXk7IGZ1bGxzY3JlZW5cIj48L2lmcmFtZT48ZGl2IGNsYXNzPVwiYnRuLWNsb3NlXCI+PGltZyBzcmM9XCJhc3NldHMvaWNvbi1zdmcvY2xvc2Utb3V0bGluZS5zdmdcIi8+PC9kaXY+PC9kaXY+YFxyXG4gICAgICAgIGxldCBuZXdJdGVtID0galF1ZXJ5KGh0bWxDb250ZW50KS5hcHBlbmRUbyh3aW5kb3cuZG9jdW1lbnQuYm9keSk7XHJcbiAgICAgICAgbmV3SXRlbS5maW5kKCcuYnRuLWNsb3NlJykuY2xpY2soZnVuY3Rpb24gKGUpIHsgZS5wcmV2ZW50RGVmYXVsdCgpOyBuZXdJdGVtLnJlbW92ZSgpOyB9KVxyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCB7IGljZHRfSURhdGFOb2RlIH0gZnJvbSBcIi4uLy4uLy4uL2ludGVyZmFjZS9JRGF0YVNvdXJjZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9BY3Rpb25BbmltYXRpb24gfSBmcm9tIFwiLi9hY3Rpb24tYW5pbWF0aW9uXCI7XHJcbmltcG9ydCB7IGljZHRfUnVuX0ludGVyYWN0aXZlX0FjdGlvblBvaW50cyB9IGZyb20gXCIuL2FjdGlvbi1wb2ludHNcIjtcclxuaW1wb3J0IHsgaWNkdF9SdW5fSW50ZXJhY3RpdmVfQXVkaW8gfSBmcm9tIFwiLi9hdWRpb1wiO1xyXG5pbXBvcnQgeyBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9UcmlnZ2VySGlkZSwgaWNkdF9SdW5fSW50ZXJhY3RpdmVfVHJpZ2dlclJ1biwgaWNkdF9SdW5fSW50ZXJhY3RpdmVfVHJpZ2dlclNob3cgfSBmcm9tIFwiLi90cmlnZ2VyXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9SdW5fSW50ZXJhY3RpdmVfTm9kZVNob3cgPSAobm9kZTogaWNkdF9JRGF0YU5vZGUsIG5vZGVTdGF0dXM6IG51bWJlciwgc2xpZGVTdGF0dXM6IG51bWJlciwgc2hvd1N1Y2Nlc3M/OiBGdW5jdGlvbikgPT4ge1xyXG5cclxuICAgIGxldCB3YWl0U3RhdHVzID0geyB0b3RhbDogMCwgY291bnRlcjogMCB9O1xyXG5cclxuICAgIGxldCB7IHRyaWdnZXJzaG93LCB0cmlnZ2VycnVuLCB0cmlnZ2VyaGlkZSwgYWN0aW9uLCBhdWRpbyB9ID0gbm9kZS5pbnRlcmFjdGl2ZT8uc2hvdyA/PyB7fTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhgbm9kZSgke25vZGUuaWR9KSB8IG5vZGVTdGF0dXMoJHtub2RlU3RhdHVzfSkgfCBzbGlkZVN0YXR1cygke3NsaWRlU3RhdHVzfSkgfCBzaG93YCk7XHJcblxyXG4gICAgLy90cmlnZ2VyXHJcbiAgICBpZiAodHJpZ2dlcnNob3cpIHtcclxuICAgICAgICBsZXQgeyBpZCwgaWRzLCB0aW1lLCBhc3luYyB9ID0gdHJpZ2dlcnNob3c7XHJcbiAgICAgICAgLy9jaOG6oXkgbHXDtG5cclxuICAgICAgICBpZiAoYXN5bmMgPT0gJ2FzeW5jdHJ1ZScpIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9UcmlnZ2VyU2hvdyh7IGlkLCBpZHMsIG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9jaOG6oXkgc2F1IHRpbWUgKG1zKVxyXG4gICAgICAgIGVsc2UgaWYgKGFzeW5jID09ICd0aW1lJykge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGljZHRfUnVuX0ludGVyYWN0aXZlX1RyaWdnZXJTaG93KHsgaWQsIGlkcywgbm9kZVN0YXR1cywgc2xpZGVTdGF0dXMgfSk7XHJcbiAgICAgICAgICAgIH0sICh0aW1lID8/IDApICogMTAwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vbeG6t2MgxJHhu4tuaCBsw6AgY2jhuqF5IGx1w7RuXHJcbiAgICAgICAgLy8gZWxzZSB7XHJcbiAgICAgICAgLy8gICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAgICAgaWNkdF9SdW5fSW50ZXJhY3RpdmVfVHJpZ2dlclNob3coeyBpZCwgaWRzLCBub2RlU3RhdHVzLCBzbGlkZVN0YXR1cyB9KTtcclxuICAgICAgICAvLyAgICAgfSk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG4gICAgaWYgKHRyaWdnZXJydW4pIHtcclxuICAgICAgICBsZXQgeyBpZCwgaWRzLCB0aW1lLCBhc3luYyB9ID0gdHJpZ2dlcnJ1bjtcclxuICAgICAgICAvL2No4bqheSBsdcO0blxyXG4gICAgICAgIGlmIChhc3luYyA9PSAnYXN5bmN0cnVlJykge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGljZHRfUnVuX0ludGVyYWN0aXZlX1RyaWdnZXJSdW4oeyBpZCwgaWRzLCBub2RlU3RhdHVzLCBzbGlkZVN0YXR1cyB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vY2jhuqF5IHNhdSB0aW1lIChtcylcclxuICAgICAgICBlbHNlIGlmIChhc3luYyA9PSAndGltZScpIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9UcmlnZ2VyUnVuKHsgaWQsIGlkcywgbm9kZVN0YXR1cywgc2xpZGVTdGF0dXMgfSk7XHJcbiAgICAgICAgICAgIH0sICh0aW1lID8/IDApICogMTAwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vbeG6t2MgxJHhu4tuaCBsw6AgY2jhuqF5IGx1w7RuXHJcbiAgICAgICAgLy8gZWxzZSB7XHJcbiAgICAgICAgLy8gICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAgICAgaWNkdF9SdW5fSW50ZXJhY3RpdmVfVHJpZ2dlclJ1bih7IGlkLCBpZHMsIG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzIH0pO1xyXG4gICAgICAgIC8vICAgICB9KTtcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcbiAgICBpZiAodHJpZ2dlcmhpZGUpIHtcclxuICAgICAgICBsZXQgeyBpZCwgaWRzLCB0aW1lLCBhc3luYyB9ID0gdHJpZ2dlcmhpZGU7XHJcblxyXG4gICAgICAgIC8vY2jhuqF5IGx1w7RuXHJcbiAgICAgICAgaWYgKGFzeW5jID09ICdhc3luY3RydWUnKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWNkdF9SdW5fSW50ZXJhY3RpdmVfVHJpZ2dlckhpZGUoeyBpZCwgaWRzLCBub2RlU3RhdHVzLCBzbGlkZVN0YXR1cyB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vY2jhuqF5IHNhdSB0aW1lIChtcylcclxuICAgICAgICBlbHNlIGlmIChhc3luYyA9PSAndGltZScpIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9UcmlnZ2VySGlkZSh7IGlkLCBpZHMsIG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzIH0pO1xyXG4gICAgICAgICAgICB9LCAodGltZSA/PyAwKSAqIDEwMDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL23hurdjIMSR4buLbmggbMOgIGNo4bqheSBsdcO0blxyXG4gICAgICAgIC8vIGVsc2Uge1xyXG4gICAgICAgIC8vICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAvLyAgICAgICAgIGljZHRfUnVuX0ludGVyYWN0aXZlX1RyaWdnZXJIaWRlKHsgaWQsIGlkcywgbm9kZVN0YXR1cywgc2xpZGVTdGF0dXMgfSk7XHJcbiAgICAgICAgLy8gICAgIH0pO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgbm9kZVN1Y2Nlc3MgPSAoKSA9PiB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh3YWl0U3RhdHVzLmNvdW50ZXIgPj0gd2FpdFN0YXR1cy50b3RhbCkge1xyXG4gICAgICAgICAgICAgICAgc2hvd1N1Y2Nlc3MgPyBzaG93U3VjY2VzcygpIDogbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3RyaWdnZXJcclxuICAgICAgICAgICAgICAgIGlmICh0cmlnZ2Vyc2hvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB7IGlkLCBpZHMsIGFzeW5jIH0gPSB0cmlnZ2Vyc2hvdztcclxuICAgICAgICAgICAgICAgICAgICAvL2No4bqheSBzYXUga2hpIMSR4buRaSB0xrDhu6NuZyBob8OgbiB04bqldCBob+G6oXQgxJHhu5luZ1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYXN5bmMgfHwgYXN5bmMgPT0gJ2FzeW5jZmFsc2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljZHRfUnVuX0ludGVyYWN0aXZlX1RyaWdnZXJTaG93KHsgaWQsIGlkcywgbm9kZVN0YXR1cywgc2xpZGVTdGF0dXMgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRyaWdnZXJydW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeyBpZCwgaWRzLCBhc3luYyB9ID0gdHJpZ2dlcnJ1bjtcclxuICAgICAgICAgICAgICAgICAgICAvL2No4bqheSBzYXUga2hpIMSR4buRaSB0xrDhu6NuZyBob8OgbiB04bqldCBob+G6oXQgxJHhu5luZ1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYXN5bmMgfHwgYXN5bmMgPT0gJ2FzeW5jZmFsc2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljZHRfUnVuX0ludGVyYWN0aXZlX1RyaWdnZXJSdW4oeyBpZCwgaWRzLCBub2RlU3RhdHVzLCBzbGlkZVN0YXR1cyB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHJpZ2dlcmhpZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeyBpZCwgaWRzLCBhc3luYyB9ID0gdHJpZ2dlcmhpZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jaOG6oXkgc2F1IGtoaSDEkeG7kWkgdMaw4bujbmcgaG/DoG4gdOG6pXQgaG/huqF0IMSR4buZbmdcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWFzeW5jIHx8IGFzeW5jID09ICdhc3luY2ZhbHNlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9UcmlnZ2VySGlkZSh7IGlkLCBpZHMsIG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vYWN0aW9uXHJcbiAgICBpZiAoYWN0aW9uPy52YWx1ZSkge1xyXG5cclxuICAgICAgICB3YWl0U3RhdHVzLnRvdGFsICs9IDE7XHJcblxyXG4gICAgICAgIGxldCBzdWNjZXNzQWN0aW9uID0gKCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgd2FpdFN0YXR1cy5jb3VudGVyICs9IDE7XHJcblxyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICBub2RlU3VjY2VzcygpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHN3aXRjaCAoYWN0aW9uPy52YWx1ZSkge1xyXG4gICAgICAgICAgICBjYXNlICdoaWRlJzoge1xyXG4gICAgICAgICAgICAgICAgLy9zaG93IHRoaeG6v3QgbOG6rXAg4bqpbiBrbyBkw7luZyBydW5BbmltYXRpb24sIG3DoCDhuqluIGx1w7RuIGNobyBuw7MgdnXDtG5nXHJcbiAgICAgICAgICAgICAgICBqUXVlcnkoJyMnICsgbm9kZS5pZCkuYWRkQ2xhc3MoJ2hpZGUnKTtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3NBY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ3BvaW50cyc6IHtcclxuICAgICAgICAgICAgICAgIGxldCB7IHBvaW50cywgdGltZSwgaXRlcmF0aW9uLCBmaW5pc2ggfSA9IGFjdGlvbjtcclxuICAgICAgICAgICAgICAgIGljZHRfUnVuX0ludGVyYWN0aXZlX0FjdGlvblBvaW50cyhub2RlLmlkLCB7IG5vZGUsIHBvaW50cywgdGltZSwgaXRlcmF0aW9uLCBmaW5pc2gsIG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzIH0sIHN1Y2Nlc3NBY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgICAgICAgbGV0IHsgdmFsdWUsIHRpbWUsIGl0ZXJhdGlvbiwgZmluaXNoIH0gPSBhY3Rpb247XHJcbiAgICAgICAgICAgICAgICBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9BY3Rpb25BbmltYXRpb24obm9kZS5pZCwgeyBub2RlLCB2YWx1ZSwgdGltZSwgaXRlcmF0aW9uLCBmaW5pc2gsIG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzIH0sIHN1Y2Nlc3NBY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy9hdWRpb1xyXG4gICAgaWYgKGF1ZGlvPy5zb3VyY2U/LnBhdGgpIHtcclxuXHJcbiAgICAgICAgd2FpdFN0YXR1cy50b3RhbCArPSAxO1xyXG5cclxuICAgICAgICBsZXQgc3VjY2Vzc0F1ZGlvID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKGBJbnRlcmFjdGl2ZU5vZGUgIyR7bm9kZS5pZH0gYXVkaW8gc3VjY2VzcyFgKTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIHdhaXRTdGF0dXMuY291bnRlciArPSAxO1xyXG5cclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgbm9kZVN1Y2Nlc3MoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL2xldCB7IHNvdXJjZSwgaXRlcmF0aW9uLCBhc3luYyB9ID0gYXVkaW87XHJcbiAgICAgICAgbGV0IGF1ZGlvRWwgPSBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9BdWRpbyhub2RlLmlkLCBhdWRpbywgd2FpdFN0YXR1cywgeyBub2RlU3RhdHVzLCBzbGlkZVN0YXR1cyB9LCBzdWNjZXNzQXVkaW8pO1xyXG4gICAgICAgIGlmIChhdWRpbz8uaXRlcmF0aW9uID09IC0xKSB7XHJcbiAgICAgICAgICAgIGpRdWVyeSgnIycgKyBub2RlLmlkKS5jbGljaygoZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGF1ZGlvRWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXVkaW9FbC52b2x1bWUgPj0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdWRpb0VsLnZvbHVtZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdWRpb0VsLnZvbHVtZSA9IGF1ZGlvRWwudm9sdW1lICsgMC4yNVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhhdWRpb0VsPy52b2x1bWUpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL2tow7RuZyBjw7MgaMOgbmggxJHhu5luZyDEkcaw4bujYyBn4bqvbiBjaG8gxJHhu5FpIHTGsOG7o25nXHJcbiAgICBpZiAoIXdhaXRTdGF0dXMudG90YWwpIHtcclxuICAgICAgICBub2RlU3VjY2VzcygpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgaWNkdF9SdW4gfSBmcm9tIFwiLi4vLi4vcnVuXCI7XHJcbmltcG9ydCB7IGljZHRfUnVuX0ludGVyYWN0aXZlX05vZGVDbGljayB9IGZyb20gXCIuL25vZGUtY2xpY2tcIjtcclxuaW1wb3J0IHsgcnVuQW5pbWF0aW9uIH0gZnJvbSBcIi4uL2FuaW1hdGUvYW5pbWF0aW9uXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9SdW5fSW50ZXJhY3RpdmVfVHJpZ2dlclNob3cgPSAob3B0aW9uczogeyBpZD86IG51bWJlciwgaWRzPzogQXJyYXk8bnVtYmVyPiwgbm9kZVN0YXR1czogbnVtYmVyLCBzbGlkZVN0YXR1czogbnVtYmVyIH0pID0+IHtcclxuICAgIGlmIChvcHRpb25zLmlkKSB7XHJcbiAgICAgICAgalF1ZXJ5KCcjJyArIG9wdGlvbnMuaWQpLnJlbW92ZUNsYXNzKCdoaWRlJyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChvcHRpb25zLmlkcykge1xyXG4gICAgICAgIG9wdGlvbnMuaWRzLmZvckVhY2goaWQgPT4ge1xyXG4gICAgICAgICAgICBqUXVlcnkoJyMnICsgaWQpLnJlbW92ZUNsYXNzKCdoaWRlJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X1J1bl9JbnRlcmFjdGl2ZV9UcmlnZ2VyUnVuID0gKG9wdGlvbnM6IHsgaWQ/OiBudW1iZXIsIGlkcz86IEFycmF5PG51bWJlcj4sIG5vZGVTdGF0dXM6IG51bWJlciwgc2xpZGVTdGF0dXM6IG51bWJlciB9KSA9PiB7XHJcbiAgICBpZiAob3B0aW9ucy5pZCkge1xyXG4gICAgICAgIGpRdWVyeSgnIycgKyBvcHRpb25zLmlkKS5yZW1vdmVDbGFzcygnaGlkZScpO1xyXG4gICAgICAgIGljZHRfUnVuX0ludGVyYWN0aXZlX05vZGVDbGljayhpY2R0X1J1bi5maW5kTm9kZShvcHRpb25zLmlkKSwgb3B0aW9ucy5ub2RlU3RhdHVzLCBvcHRpb25zLnNsaWRlU3RhdHVzKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKG9wdGlvbnMuaWRzKSB7XHJcbiAgICAgICAgb3B0aW9ucy5pZHMuZm9yRWFjaChpZCA9PiB7XHJcbiAgICAgICAgICAgIGpRdWVyeSgnIycgKyBpZCkucmVtb3ZlQ2xhc3MoJ2hpZGUnKTtcclxuICAgICAgICAgICAgaWNkdF9SdW5fSW50ZXJhY3RpdmVfTm9kZUNsaWNrKGljZHRfUnVuLmZpbmROb2RlKGlkKSwgb3B0aW9ucy5ub2RlU3RhdHVzLCBvcHRpb25zLnNsaWRlU3RhdHVzKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfUnVuX0ludGVyYWN0aXZlX1RyaWdnZXJIaWRlID0gKG9wdGlvbnM6IHsgaWQ/OiBudW1iZXIsIGlkcz86IEFycmF5PG51bWJlcj4sIG5vZGVTdGF0dXM6IG51bWJlciwgc2xpZGVTdGF0dXM6IG51bWJlciB9KSA9PiB7XHJcbiAgICBpZiAob3B0aW9ucy5pZCkge1xyXG4gICAgICAgIC8valF1ZXJ5KCcjJyArIG9wdGlvbnMuaWQpLmFkZENsYXNzKCdoaWRlJyk7XHJcbiAgICAgICAgbGV0IG5vZGUgPSBpY2R0X1J1bi5maW5kTm9kZShvcHRpb25zLmlkKTtcclxuICAgICAgICBydW5BbmltYXRpb24ob3B0aW9ucy5pZCwgeyBub2RlOiBub2RlLCB2YWx1ZTogbm9kZS5hbmltYXRlPy5vdXQsIG5vZGVTdGF0dXM6IG9wdGlvbnMubm9kZVN0YXR1cywgc2xpZGVTdGF0dXM6IG9wdGlvbnMuc2xpZGVTdGF0dXMgfSwgKCkgPT4ge1xyXG4gICAgICAgICAgICBqUXVlcnkoJyMnICsgb3B0aW9ucy5pZCkuYWRkQ2xhc3MoJ2hpZGUnKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKG9wdGlvbnMuaWRzKSB7XHJcbiAgICAgICAgb3B0aW9ucy5pZHMuZm9yRWFjaChpZCA9PiB7XHJcbiAgICAgICAgICAgIC8valF1ZXJ5KCcjJyArIGlkKS5hZGRDbGFzcygnaGlkZScpO1xyXG4gICAgICAgICAgICBsZXQgbm9kZSA9IGljZHRfUnVuLmZpbmROb2RlKGlkKTtcclxuICAgICAgICAgICAgcnVuQW5pbWF0aW9uKGlkLCB7IG5vZGU6IG5vZGUsIHZhbHVlOiBub2RlLmFuaW1hdGU/Lm91dCwgbm9kZVN0YXR1czogb3B0aW9ucy5ub2RlU3RhdHVzLCBzbGlkZVN0YXR1czogb3B0aW9ucy5zbGlkZVN0YXR1cyB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBqUXVlcnkoJyMnICsgaWQpLmFkZENsYXNzKCdoaWRlJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgaWNkdF9JRGF0YU5vZGUsIGljZHRfSURhdGFTbGlkZSB9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuaW1wb3J0IHsgaWNkdF9SdW4gfSBmcm9tIFwiLi4vcnVuXCI7XHJcbmltcG9ydCB7IGljZHRfUnVuX0ludGVyYWN0aXZlX05vZGVDbGljayB9IGZyb20gJy4vaW50ZXJhY3RpdmUvbm9kZS1jbGljayc7XHJcbmltcG9ydCB7IGljZHRfUnVuX0ludGVyYWN0aXZlX05vZGVTaG93IH0gZnJvbSAnLi9pbnRlcmFjdGl2ZS9ub2RlLXNob3cnO1xyXG5pbXBvcnQgeyBpY2R0X1J1bl9WYXJpYWJsZV9Ob2RlQ2xpY2sgfSBmcm9tICcuL3ZhcmlhYmxlL25vZGUtY2xpY2snO1xyXG5pbXBvcnQgeyBpY2R0X1J1bl9WYXJpYWJsZV9Ob2RlSW5wdXQgfSBmcm9tICcuL3ZhcmlhYmxlL25vZGUtaW5wdXQnO1xyXG5pbXBvcnQgeyBpY2R0X1J1bl9BbmltYXRlX0FuaW1hdGlvbiB9IGZyb20gJy4vYW5pbWF0ZS9hbmltYXRpb24nO1xyXG5pbXBvcnQgeyBpY2R0X1J1bl9UZXN0IH0gZnJvbSAnLi90ZXN0L3Rlc3QnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfUnVuX05vZGUgPSAoc2xpZGU6IGljZHRfSURhdGFTbGlkZSwgbm9kZTogaWNkdF9JRGF0YU5vZGUsIG9wdGlvbnM6IHsgbm9kZVN0YXR1czogbnVtYmVyLCBzbGlkZVN0YXR1czogbnVtYmVyLCBwSWQ/OiBudW1iZXIgfSwgc2hvd1N1Y2Nlc3M/OiBGdW5jdGlvbikgPT4ge1xyXG5cclxuICAgIGlmIChub2RlLmFuaW1hdGU/LnZhbHVlKSB7XHJcbiAgICAgICAgaWNkdF9SdW5fQW5pbWF0ZV9BbmltYXRpb24obm9kZSwgb3B0aW9ucy5ub2RlU3RhdHVzLCBvcHRpb25zLnNsaWRlU3RhdHVzKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobm9kZS5pbnRlcmFjdGl2ZT8uc2hvdykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBub2RlKCR7bm9kZS5pZH0pIHwgbm9kZVN0YXR1cygke29wdGlvbnMubm9kZVN0YXR1c30pIHwgc2xpZGVTdGF0dXMoJHtvcHRpb25zLnNsaWRlU3RhdHVzfSkgfCBzaG93YCk7XHJcbiAgICAgICAgaWNkdF9SdW5fSW50ZXJhY3RpdmVfTm9kZVNob3cobm9kZSwgb3B0aW9ucy5ub2RlU3RhdHVzLCBvcHRpb25zLnNsaWRlU3RhdHVzLCBzaG93U3VjY2Vzcyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBzaG93U3VjY2VzcyA/IHNob3dTdWNjZXNzKCkgOiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBjaGVja0V4aXN0S2V5ID0gKG9iakpzb24/OiBhbnkpID0+IHtcclxuICAgICAgICBsZXQga2V5czogQXJyYXk8c3RyaW5nPiA9IE9iamVjdC5rZXlzKG9iakpzb24gPz8ge30pO1xyXG4gICAgICAgIHJldHVybiBrZXlzLm1hcChtID0+IG9iakpzb25bbV0gPyAxIDogMCkuaW5jbHVkZXMoMSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG5vZGUuaW50ZXJhY3RpdmU/LmNsaWNrKSB7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgaWYgKGNoZWNrRXhpc3RLZXkobm9kZS5pbnRlcmFjdGl2ZT8uY2xpY2spKSB7XHJcbiAgICAgICAgICAgIGpRdWVyeSgnIycgKyBub2RlLmlkKS5hZGRDbGFzcygnaW50ZXJhY3RpdmUtY2xpY2snKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGpRdWVyeSgnIycgKyBub2RlLmlkKS5jbGljaygoZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIC8vcmVmcmVzaFxyXG4gICAgICAgICAgICBvcHRpb25zLm5vZGVTdGF0dXMgPSBpY2R0X1J1bi5yZWZyZXNoTm9kZVN0YXR1cygpO1xyXG5cclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgY29uc29sZS5sb2coYG5vZGUoJHtub2RlLmlkfSkgfCBub2RlU3RhdHVzKCR7b3B0aW9ucy5ub2RlU3RhdHVzfSkgfCBzbGlkZVN0YXR1cygke29wdGlvbnMuc2xpZGVTdGF0dXN9KSB8IGNsaWNrYCk7XHJcbiAgICAgICAgICAgIGljZHRfUnVuX0ludGVyYWN0aXZlX05vZGVDbGljayhub2RlLCBvcHRpb25zLm5vZGVTdGF0dXMsIG9wdGlvbnMuc2xpZGVTdGF0dXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChub2RlLnZhcmlhYmxlPy5pbnB1dCkge1xyXG4gICAgICAgIGpRdWVyeSgnIycgKyBub2RlLmlkKS5vbignY2hhbmdlJywgJ2lucHV0LHRleHRhcmVhJywgKGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICBpY2R0X1J1bl9WYXJpYWJsZV9Ob2RlSW5wdXQoZS50YXJnZXQudmFsdWUsIG5vZGUsIHNsaWRlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobm9kZS52YXJpYWJsZT8uY2xpY2spIHtcclxuICAgICAgICAvL1xyXG4gICAgICAgIGlmIChub2RlLnZhcmlhYmxlPy5jbGljaz8udmFyaWFibGUpIHtcclxuICAgICAgICAgICAgalF1ZXJ5KCcjJyArIG5vZGUuaWQpLmFkZENsYXNzKCd2YXJpYWJsZS1jbGljaycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgalF1ZXJ5KCcjJyArIG5vZGUuaWQpLmNsaWNrKChlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgaWNkdF9SdW5fVmFyaWFibGVfTm9kZUNsaWNrKG5vZGUsIHNsaWRlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobm9kZS5zb3VyY2U/LnR5cGUgPT0gJ3Rlc3QnKSB7XHJcbiAgICAgICAgaWNkdF9SdW5fVGVzdChub2RlLCBzbGlkZSk7XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IHsgVl9TaGFwZVR5cGUgfSBmcm9tIFwiLi4vLi4vbG9va3VwL1ZfU2hhcGVUeXBlXCI7XHJcbmltcG9ydCB7IGljZHRfSURhdGFOb2RlLCBpY2R0X0lEYXRhU2xpZGUgfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlL0lEYXRhU291cmNlXCI7XHJcbmltcG9ydCB7IGljZHRfUnVuIH0gZnJvbSBcIi4uL3J1blwiO1xyXG5pbXBvcnQgeyBpY2R0X1J1bl9Ob2RlIH0gZnJvbSBcIi4vbm9kZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z0dyb3VwIH0gZnJvbSBcIi4uL2NvbXBvbmVudC9zaGFwZS9zdmcvZ3JvdXAvc3ZnLWdyb3VwXCI7XHJcbmltcG9ydCB7IGljZHRfU3ZnQ2lyY2xlIH0gZnJvbSBcIi4uL2NvbXBvbmVudC9zaGFwZS9zdmcvY2lyY2xlL3N2Zy1jaXJjbGVcIjtcclxuaW1wb3J0IHsgaWNkdF9TdmdFbGxpcHNlIH0gZnJvbSBcIi4uL2NvbXBvbmVudC9zaGFwZS9zdmcvZWxsaXBzZS9zdmctZWxsaXBzZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z0xpbmUgfSBmcm9tIFwiLi4vY29tcG9uZW50L3NoYXBlL3N2Zy9saW5lL3N2Zy1saW5lXCI7XHJcbmltcG9ydCB7IGljZHRfU3ZnUmVjdCB9IGZyb20gXCIuLi9jb21wb25lbnQvc2hhcGUvc3ZnL3JlY3Qvc3ZnLXJlY3RcIjtcclxuaW1wb3J0IHsgaWNkdF9TdmdQb2x5Z29uIH0gZnJvbSBcIi4uL2NvbXBvbmVudC9zaGFwZS9zdmcvcG9seWdvbi9zdmctcG9seWdvblwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z0ZvcmVpZ25PYmplY3QgfSBmcm9tIFwiLi4vY29tcG9uZW50L3NoYXBlL3N2Zy9mb3JlaWdub2JqZWN0L3N2Zy1mb3JlaWdub2JqZWN0XCI7XHJcbmltcG9ydCB7IGljZHRfU3ZnSW1hZ2UgfSBmcm9tIFwiLi4vY29tcG9uZW50L3NoYXBlL3N2Zy9pbWFnZS9zdmctaW1hZ2VcIjtcclxuaW1wb3J0IHsgaWNkdF9TdmdUZXh0IH0gZnJvbSBcIi4uL2NvbXBvbmVudC9zaGFwZS9zdmcvdGV4dC9zdmctdGV4dFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z1BhdGggfSBmcm9tIFwiLi4vY29tcG9uZW50L3NoYXBlL3N2Zy9wYXRoL3N2Zy1wYXRoXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9SdW5fU2xpZGUgPSAoc2xpZGU6IGljZHRfSURhdGFTbGlkZSkgPT4ge1xyXG5cclxuICAgIGxldCBub2RlU3RhdHVzID0gaWNkdF9SdW4ubm9kZVN0YXR1cyxcclxuICAgICAgICBzbGlkZVN0YXR1cyA9IGljZHRfUnVuLnNsaWRlU3RhdHVzO1xyXG5cclxuICAgIC8va2jhu59pIHThuqFvIGPDoWMgZ3JvdXAsIHBpZCBjaG8gZGFuaCBzw6FjaCDEkeG7kWkgdMaw4bujbmcgc+G6r3AgcmVuZGVyXHJcbiAgICBzbGlkZS5zdmc/Lm5vZGVzLmZvckVhY2gobm9kZSA9PiB7XHJcbiAgICAgICAgbm9kZS5waWQgPSBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMDApO1xyXG5cclxuICAgICAgICAvL3ThuqFvIEcgdGhlbyBwaWQgY2hvIMSR4bq5cCBkYVxyXG4gICAgICAgIGljZHRfU3ZnR3JvdXAobm9kZS5waWQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy9cclxuICAgIGxldCBpZHhzID1cclxuICAgICAgICBzbGlkZS5zdmc/Lm5vZGVzXHJcbiAgICAgICAgICAgID8ubWFwKG0gPT4gbS5pZHggPz8gMClcclxuICAgICAgICAgICAgLmZpbHRlcigodiwgaSwgYSkgPT4gYS5pbmRleE9mKHYpID09IGkpXHJcbiAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiAoYSA/PyAwKSAtIChiID8/IDApKSBhcyBBcnJheTxudW1iZXI+O1xyXG5cclxuICAgIC8vXHJcbiAgICByZWN1cnNpdmVOb2RlSWR4KHNsaWRlLnN2Zz8ubm9kZXMgPz8gW10sIGlkeHMgPz8gW10sIHsgc2xpZGUsIG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzIH0pO1xyXG59XHJcblxyXG5jb25zdCByZWN1cnNpdmVOb2RlSWR4ID0gKG5vZGVzOiBBcnJheTxpY2R0X0lEYXRhTm9kZT4sIGlkeHM6IEFycmF5PG51bWJlcj4sIG9wdGlvbnM6IHsgc2xpZGU6IGljZHRfSURhdGFTbGlkZSwgbm9kZVN0YXR1czogbnVtYmVyLCBzbGlkZVN0YXR1czogbnVtYmVyIH0pID0+IHtcclxuICAgIGlmIChvcHRpb25zLnNsaWRlU3RhdHVzICE9IGljZHRfUnVuLnNsaWRlU3RhdHVzKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghaWR4cy5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGlkeCA9IGlkeHMuc2hpZnQoKTtcclxuXHJcbiAgICBsZXQgbm9kZUlkeHMgPSBub2Rlcy5maWx0ZXIoZiA9PiAoZi5pZHggPz8gMCkgPT0gaWR4KTtcclxuICAgIGlmICghbm9kZUlkeHMubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBtYXhUaW1lQ291bmRvd24gPSBNYXRoLm1heC5hcHBseShudWxsLCBub2RlSWR4cy5tYXAobSA9PiBtLnRpbWUgPz8gMCkpLFxyXG4gICAgICAgIGlzUmVjdXJzaXZlID0gZmFsc2U7XHJcblxyXG4gICAgLy9tYXhUaW1lQ291bmRvd24gfiAwIHRow6wga28gdGhp4bq/dCBs4bqtcCBjb3VuZG93biBtw6AgxJHhu6NpIHhvbmcgaG/huqF0IMSR4buZbmcgbeG7m2kgZ+G7jWkgbmV4dCBpZHhcclxuICAgIGxldCB0aW1lb3V0UmVjdXJzaXZlID0gbWF4VGltZUNvdW5kb3duIDwgMC41ID8gMCA6IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGlmICghaXNSZWN1cnNpdmUpIHtcclxuICAgICAgICAgICAgaXNSZWN1cnNpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICByZWN1cnNpdmVOb2RlSWR4KG5vZGVzLCBpZHhzLCBvcHRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICB9LCBtYXhUaW1lQ291bmRvd24gKiAxMDAwKTtcclxuXHJcbiAgICByZWN1cnNpdmVOb2Rlcyhub2RlcywgaWR4cywgbm9kZUlkeHMsIDAsIG9wdGlvbnMsIHtcclxuICAgICAgICBpZHg6IGlkeCxcclxuICAgICAgICB0b3RhbDogbm9kZUlkeHMubGVuZ3RoLFxyXG4gICAgICAgIGNvdW50ZXI6IDAsXHJcbiAgICAgICAgaXNSZWN1cnNpdmUsXHJcbiAgICAgICAgdGltZW91dFJlY3Vyc2l2ZSxcclxuICAgICAgICBtYXhUaW1lQ291bmRvd24sXHJcbiAgICAgICAgdWlkOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDAwKVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmNvbnN0IHJlY3Vyc2l2ZU5vZGVzID0gKG5vZGVzOiBBcnJheTxpY2R0X0lEYXRhTm9kZT4sIGlkeHM6IEFycmF5PG51bWJlcj4sIG5vZGVJZHhzOiBBcnJheTxpY2R0X0lEYXRhTm9kZT4sIGk6IG51bWJlciwgb3B0aW9uczogeyBzbGlkZTogaWNkdF9JRGF0YVNsaWRlLCBub2RlU3RhdHVzOiBudW1iZXIsIHNsaWRlU3RhdHVzOiBudW1iZXIgfSwgbm9kZVN0YXRpYzogeyBpZHg/OiBudW1iZXIsIHRvdGFsOiBudW1iZXIsIGNvdW50ZXI6IG51bWJlciwgaXNSZWN1cnNpdmU6IGJvb2xlYW4sIG1heFRpbWVDb3VuZG93bjogbnVtYmVyLCB0aW1lb3V0UmVjdXJzaXZlOiBhbnksIHVpZDogbnVtYmVyIH0pID0+IHtcclxuICAgIGlmIChvcHRpb25zLnNsaWRlU3RhdHVzICE9IGljZHRfUnVuLnNsaWRlU3RhdHVzKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vXHJcbiAgICBsZXQgbm9kZSA9IG5vZGVJZHhzW2ldO1xyXG4gICAgaWYgKG5vZGUpIHtcclxuICAgICAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLkdST1VQOiB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLkNJUkNMRToge1xyXG4gICAgICAgICAgICAgICAgaWNkdF9TdmdDaXJjbGUobm9kZS5pZCwgeyBzaXplOiBub2RlLnNpemUsIGF0dHJpYnV0ZTogbm9kZS5hdHRyaWJ1dGUgfSwgbm9kZS5waWQgPyAod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobm9kZS5waWQpIDogbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLkVMTElQU0U6IHtcclxuICAgICAgICAgICAgICAgIGljZHRfU3ZnRWxsaXBzZShub2RlLmlkLCB7IHNpemU6IG5vZGUuc2l6ZSwgYXR0cmlidXRlOiBub2RlLmF0dHJpYnV0ZSB9LCBub2RlLnBpZCA/ICh3aW5kb3cgYXMgYW55KS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChub2RlLnBpZCkgOiBudWxsKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgVl9TaGFwZVR5cGUuTElORToge1xyXG4gICAgICAgICAgICAgICAgaWNkdF9TdmdMaW5lKG5vZGUuaWQsIHsgc2l6ZTogbm9kZS5zaXplLCBhdHRyaWJ1dGU6IG5vZGUuYXR0cmlidXRlIH0sIG5vZGUucGlkID8gKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG5vZGUucGlkKSA6IG51bGwpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBWX1NoYXBlVHlwZS5SRUNUOiB7XHJcbiAgICAgICAgICAgICAgICBpY2R0X1N2Z1JlY3Qobm9kZS5pZCwgeyBzaXplOiBub2RlLnNpemUsIGF0dHJpYnV0ZTogbm9kZS5hdHRyaWJ1dGUgfSwgbm9kZS5waWQgPyAod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobm9kZS5waWQpIDogbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLlBPTFlHT046IHtcclxuICAgICAgICAgICAgICAgIGljZHRfU3ZnUG9seWdvbihub2RlLmlkLCB7IHNpemU6IG5vZGUuc2l6ZSwgYXR0cmlidXRlOiBub2RlLmF0dHJpYnV0ZSB9LCBub2RlLnBpZCA/ICh3aW5kb3cgYXMgYW55KS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChub2RlLnBpZCkgOiBudWxsKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgVl9TaGFwZVR5cGUuRk9SRUlHTk9CSkVDVDoge1xyXG4gICAgICAgICAgICAgICAgaWNkdF9TdmdGb3JlaWduT2JqZWN0KG5vZGUuaWQsIHsgc2l6ZTogbm9kZS5zaXplLCBhdHRyaWJ1dGU6IG5vZGUuYXR0cmlidXRlLCBzdHlsZTogbm9kZS5zdHlsZSwgc291cmNlOiBub2RlLnNvdXJjZSB9LCBub2RlLnBpZCA/ICh3aW5kb3cgYXMgYW55KS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChub2RlLnBpZCkgOiBudWxsKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgVl9TaGFwZVR5cGUuSU1BR0U6IHtcclxuICAgICAgICAgICAgICAgIGljZHRfU3ZnSW1hZ2Uobm9kZS5pZCwgeyBzaXplOiBub2RlLnNpemUsIGF0dHJpYnV0ZTogbm9kZS5hdHRyaWJ1dGUsIHNvdXJjZTogbm9kZS5zb3VyY2UgfSwgbm9kZS5waWQgPyAod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobm9kZS5waWQpIDogbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLlRFWFQ6IHtcclxuICAgICAgICAgICAgICAgIGljZHRfU3ZnVGV4dChub2RlLmlkLCB7IHNpemU6IG5vZGUuc2l6ZSwgYXR0cmlidXRlOiBub2RlLmF0dHJpYnV0ZSwgc291cmNlOiBub2RlLnNvdXJjZSB9LCBub2RlLnBpZCA/ICh3aW5kb3cgYXMgYW55KS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChub2RlLnBpZCkgOiBudWxsKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgVl9TaGFwZVR5cGUuUEFUSDoge1xyXG4gICAgICAgICAgICAgICAgaWNkdF9TdmdQYXRoKG5vZGUuaWQsIHsgc2l6ZTogbm9kZS5zaXplLCBhdHRyaWJ1dGU6IG5vZGUuYXR0cmlidXRlIH0sIG5vZGUucGlkID8gKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG5vZGUucGlkKSA6IG51bGwpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGljZHRfUnVuX05vZGUob3B0aW9ucy5zbGlkZSwgbm9kZSwgb3B0aW9ucywgKCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgbm9kZVN0YXRpYy5jb3VudGVyICs9IDE7XHJcblxyXG4gICAgICAgICAgICAvL21heFRpbWVDb3VuZG93biB+IDAgdGjDrCB4ZW0gbmjGsCBrbyB0aGnhur90IGzhuq1wIGNvdW5kb3duIG3DoCDEkeG7o2kgeG9uZyBob+G6oXQgxJHhu5luZyBt4bubaSBn4buNaSBuZXh0IGlkeFxyXG4gICAgICAgICAgICBpZiAobm9kZVN0YXRpYy5tYXhUaW1lQ291bmRvd24gPCAwLjUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChub2RlU3RhdGljLmNvdW50ZXIgPj0gbm9kZVN0YXRpYy50b3RhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGVTdGF0aWMudG90YWwgPSBub2RlU3RhdGljLmNvdW50ZXIgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW5vZGVTdGF0aWMuaXNSZWN1cnNpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KG5vZGVTdGF0aWMudGltZW91dFJlY3Vyc2l2ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVTdGF0aWMuaXNSZWN1cnNpdmUgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWN1cnNpdmVOb2RlSWR4KG5vZGVzLCBpZHhzLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjUwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy9sb29wXHJcbiAgICAgICAgcmVjdXJzaXZlTm9kZXMobm9kZXMsIGlkeHMsIG5vZGVJZHhzLCArK2ksIG9wdGlvbnMsIG5vZGVTdGF0aWMpO1xyXG4gICAgfVxyXG5cclxuXHJcbn0iLCJpbXBvcnQgeyBpY2R0IH0gZnJvbSBcIi4uLy4uLy4uL3Byb3RvdHlwZS9pY2R0XCI7XHJcbmltcG9ydCB7IGljZHRfSURhdGFOb2RlIH0gZnJvbSBcIi4uLy4uLy4uL2ludGVyZmFjZS9JRGF0YVNvdXJjZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z0ltYWdlIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudC9zaGFwZS9zdmcvaW1hZ2Uvc3ZnLWltYWdlXCI7XHJcbmltcG9ydCB7IGljZHRfUm91bmROdW1iZXIgfSBmcm9tIFwiLi4vLi4vaGFuZGxlL3JvdW5kLW51bWJlclwiO1xyXG5pbXBvcnQgeyBpY2R0X1J1biB9IGZyb20gXCIuLi8uLi9ydW5cIjtcclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X1J1bl9UZXN0X05vdGlmeV9FZmZlY3QgPSAobm9kZTogaWNkdF9JRGF0YU5vZGUsIG9wdGlvbnM6IHsgc2l6ZT86IHsgeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyIH0sIHNvdXJjZT86IHsgdXJsPzogc3RyaW5nLCBwYXRoPzogc3RyaW5nLCBuYW1lPzogc3RyaW5nIH0sIGl0ZXJhdGlvbj86IG51bWJlciwgbm9kZVN0YXR1czogbnVtYmVyLCBzbGlkZVN0YXR1czogbnVtYmVyIH0sIHN1Y2Nlc3M6IEZ1bmN0aW9uKSA9PiB7XHJcblxyXG4gICAgbGV0IHJhdGlvID0gMTtcclxuXHJcbiAgICBsZXQgaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICBpbWcub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgIHJhdGlvID0gaWNkdF9Sb3VuZE51bWJlcihpbWcubmF0dXJhbFdpZHRoIC8gaW1nLm5hdHVyYWxIZWlnaHQsIDEwMCk7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgbGV0IHggPSAwLCB5ID0gMCwgd2lkdGggPSAwLCBoZWlnaHQgPSAwO1xyXG5cclxuICAgICAgICBpZiAocmF0aW8gPj0gMSkge1xyXG4gICAgICAgICAgICB3aWR0aCA9IE1hdGgubWluKGltZy5uYXR1cmFsV2lkdGgsIGljZHRfUnVuLnNsaWRlLnN2Zz8udmlld0JveD8ud2lkdGggPz8gMCk7XHJcbiAgICAgICAgICAgIGhlaWdodCA9IHdpZHRoIC8gcmF0aW87XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBoZWlnaHQgPSBNYXRoLm1pbihpbWcubmF0dXJhbEhlaWdodCwgaWNkdF9SdW4uc2xpZGUuc3ZnPy52aWV3Qm94Py5oZWlnaHQgPz8gMCk7XHJcbiAgICAgICAgICAgIHdpZHRoID0gaGVpZ2h0IC8gcmF0aW87XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB4ID0gKChpY2R0X1J1bi5zbGlkZS5zdmc/LnZpZXdCb3g/LndpZHRoID8/IDApIC0gd2lkdGgpIC8gMjtcclxuICAgICAgICB5ID0gKChpY2R0X1J1bi5zbGlkZS5zdmc/LnZpZXdCb3g/LmhlaWdodCA/PyAwKSAtIGhlaWdodCkgLyAyO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIG9wdGlvbnMuc2l6ZSA9IHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9O1xyXG4gICAgICAgIHJlbmRlckVmZmVjdChvcHRpb25zLCBzdWNjZXNzKTtcclxuICAgIH07XHJcbiAgICBpbWcub25lcnJvciA9IChlKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgSW1nU3JjIGxvYWQgZmFpbGVkIC0+ICR7SlNPTi5zdHJpbmdpZnkob3B0aW9ucy5zb3VyY2UpfWAsIGUpO1xyXG4gICAgfVxyXG4gICAgaW1nLnNyYyA9IChvcHRpb25zLnNvdXJjZT8ucGF0aCA/IGljZHQuY29uZmlnPy5yZWFkZmlsZXVwbG9hZHVybCArIG9wdGlvbnMuc291cmNlPy5wYXRoIDogb3B0aW9ucy5zb3VyY2U/LnVybCkgfHwgJyc7XHJcblxyXG59XHJcblxyXG5jb25zdCByZW5kZXJFZmZlY3QgPSAob3B0aW9uczogeyBzaXplPzogeyB4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgfSwgc291cmNlPzogeyB1cmw/OiBzdHJpbmcsIHBhdGg/OiBzdHJpbmcsIG5hbWU/OiBzdHJpbmcgfSwgaXRlcmF0aW9uPzogbnVtYmVyLCBub2RlU3RhdHVzOiBudW1iZXIsIHNsaWRlU3RhdHVzOiBudW1iZXIgfSwgc3VjY2VzczogRnVuY3Rpb24pID0+IHtcclxuXHJcbiAgICBpZiAob3B0aW9ucy5zbGlkZVN0YXR1cyAhPSBpY2R0X1J1bi5zbGlkZVN0YXR1cykge1xyXG4gICAgICAgIHN1Y2Nlc3MoKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHsgZWxlbWVudCB9ID0gaWNkdF9TdmdJbWFnZShNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMDApLCB7XHJcbiAgICAgICAgc2l6ZTogb3B0aW9ucy5zaXplLFxyXG4gICAgICAgIHNvdXJjZToge1xyXG4gICAgICAgICAgICB0eXBlOiAnaW1hZ2UnLFxyXG4gICAgICAgICAgICBpbWFnZTogb3B0aW9ucz8uc291cmNlXHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cclxuICAgICAgICBlbGVtZW50Py5yZW1vdmUoKTtcclxuICAgICAgICBzdWNjZXNzKCk7XHJcblxyXG4gICAgfSwgMzAwMCk7XHJcblxyXG59IiwiaW1wb3J0IHsgaWNkdCB9IGZyb20gXCIuLi8uLi8uLi9wcm90b3R5cGUvaWNkdFwiO1xyXG5pbXBvcnQgeyBpY2R0X0lEYXRhTm9kZSB9IGZyb20gXCIuLi8uLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuaW1wb3J0IHsgaWNkdF9TdmdJbWFnZSB9IGZyb20gXCIuLi8uLi9jb21wb25lbnQvc2hhcGUvc3ZnL2ltYWdlL3N2Zy1pbWFnZVwiO1xyXG5pbXBvcnQgeyBpY2R0X1JvdW5kTnVtYmVyIH0gZnJvbSBcIi4uLy4uL2hhbmRsZS9yb3VuZC1udW1iZXJcIjtcclxuaW1wb3J0IHsgaWNkdF9SdW4gfSBmcm9tIFwiLi4vLi4vcnVuXCI7XHJcbmltcG9ydCB7IGljZHRfU3luY1N2Z05vZGU0RGVzaWduIH0gZnJvbSBcIi4uLy4uL3N5bmMtZWxlbWVudC9zdmctZWxlbWVudFwiO1xyXG5pbXBvcnQgeyBWX0lEIH0gZnJvbSBcIi4uLy4uLy4uL2xvb2t1cC9WX0lEXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9SdW5fVGVzdF9Ob3RpZnlfSWNvbiA9IChub2RlOiBpY2R0X0lEYXRhTm9kZSwgb3B0aW9uczogeyBzb3VyY2U/OiB7IHVybD86IHN0cmluZywgcGF0aD86IHN0cmluZywgbmFtZT86IHN0cmluZyB9LCBpdGVyYXRpb24/OiBudW1iZXIsIG5vZGVTdGF0dXM6IG51bWJlciwgc2xpZGVTdGF0dXM6IG51bWJlciB9LCBzdWNjZXNzOiBGdW5jdGlvbikgPT4ge1xyXG4gICAgbGV0IGltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgaW1nLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICByZW5kZXJJY29uKG5vZGUsIHsgd2lkdGg6IGltZy5uYXR1cmFsV2lkdGgsIGhlaWdodDogaW1nLm5hdHVyYWxIZWlnaHQgfSwgb3B0aW9ucywgc3VjY2Vzcyk7XHJcbiAgICB9O1xyXG4gICAgaW1nLm9uZXJyb3IgPSAoZSkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEltZ1NyYyBsb2FkIGZhaWxlZCAtPiAke0pTT04uc3RyaW5naWZ5KG9wdGlvbnMuc291cmNlKX1gLCBlKTtcclxuICAgICAgICBzdWNjZXNzKCk7XHJcbiAgICB9XHJcbiAgICBpbWcuc3JjID0gKG9wdGlvbnMuc291cmNlPy5wYXRoID8gaWNkdC5jb25maWc/LnJlYWRmaWxldXBsb2FkdXJsICsgb3B0aW9ucy5zb3VyY2U/LnBhdGggOiBvcHRpb25zLnNvdXJjZT8udXJsKSB8fCAnJztcclxufVxyXG5cclxuY29uc3QgcmVuZGVySWNvbiA9IChub2RlOiBpY2R0X0lEYXRhTm9kZSwgaW1nU2l6ZTogeyB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciB9LCBvcHRpb25zOiB7IHNvdXJjZT86IHsgdXJsPzogc3RyaW5nLCBwYXRoPzogc3RyaW5nLCBuYW1lPzogc3RyaW5nIH0sIGl0ZXJhdGlvbj86IG51bWJlciwgbm9kZVN0YXR1czogbnVtYmVyLCBzbGlkZVN0YXR1czogbnVtYmVyIH0sIHN1Y2Nlc3M6IEZ1bmN0aW9uKSA9PiB7XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuc2xpZGVTdGF0dXMgIT0gaWNkdF9SdW4uc2xpZGVTdGF0dXMpIHtcclxuICAgICAgICBzdWNjZXNzKCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCByYXRpbyA9IGljZHRfUm91bmROdW1iZXIoaW1nU2l6ZS53aWR0aCAvIGltZ1NpemUuaGVpZ2h0LCAxMDApO1xyXG4gICAgbGV0IHggPSAwLCB5ID0gMCwgd2lkdGggPSAwLCBoZWlnaHQgPSAwO1xyXG4gICAgbGV0IHNpemVNaW4gPSA0MCwgc2l6ZU1heCA9IDQwO1xyXG5cclxuICAgIGlmIChyYXRpbyA+PSAxKSB7XHJcbiAgICAgICAgd2lkdGggPSBpbWdTaXplLndpZHRoO1xyXG4gICAgICAgIHdpZHRoID0gTWF0aC5tYXgod2lkdGgsIHNpemVNaW4pO1xyXG4gICAgICAgIHdpZHRoID0gTWF0aC5taW4od2lkdGgsIHNpemVNYXgpO1xyXG4gICAgICAgIGhlaWdodCA9IHdpZHRoIC8gcmF0aW87XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBoZWlnaHQgPSBpbWdTaXplLmhlaWdodDtcclxuICAgICAgICBoZWlnaHQgPSBNYXRoLm1heChoZWlnaHQsIHNpemVNaW4pO1xyXG4gICAgICAgIGhlaWdodCA9IE1hdGgubWluKGhlaWdodCwgc2l6ZU1heCk7XHJcbiAgICAgICAgd2lkdGggPSBoZWlnaHQgLyByYXRpbztcclxuICAgIH1cclxuXHJcbiAgICBsZXQgeyBzaXplIH0gPSBub2RlO1xyXG5cclxuICAgIC8vZ8OzYyB0b3AtcmlnaHRcclxuICAgIHggPSBzaXplLnggKyBzaXplLndpZHRoIC0gd2lkdGggLyAyO1xyXG4gICAgeSA9IHNpemUueSAtIGhlaWdodCAvIDI7XHJcblxyXG4gICAgLy9jZW50ZXJcclxuICAgIC8veCA9IHNpemUueCArIHNpemUud2lkdGggLyAyIC0gd2lkdGggLyAyO1xyXG4gICAgLy95ID0gc2l6ZS55ICsgc2l6ZS5oZWlnaHQgLyAyIC0gaGVpZ2h0IC8gMjtcclxuXHJcbiAgICAvL1xyXG4gICAgbGV0IGVsZUdyb3VwID0gaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24oVl9JRC5URVNUX0dST1VQLCAnZycsIHVuZGVmaW5lZCwgaWNkdC50YXJnZXQpO1xyXG4gICAgbGV0IHsgZWxlbWVudCB9ID0gaWNkdF9TdmdJbWFnZShgaWNvbi0ke25vZGUuaWR9YCwge1xyXG4gICAgICAgIHNpemU6IHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9LFxyXG4gICAgICAgIHNvdXJjZToge1xyXG4gICAgICAgICAgICB0eXBlOiAnaW1hZ2UnLFxyXG4gICAgICAgICAgICBpbWFnZTogb3B0aW9ucz8uc291cmNlXHJcbiAgICAgICAgfSxcclxuICAgIH0sIGVsZUdyb3VwKTtcclxuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuXHJcbiAgICAgICAgLy9lbGVtZW50Py5yZW1vdmUoKTtcclxuICAgICAgICBzdWNjZXNzKCk7XHJcblxyXG4gICAgfSwgMzAwMCk7XHJcblxyXG59IiwiaW1wb3J0IHsgaWNkdCB9IGZyb20gXCIuLi8uLi8uLi9wcm90b3R5cGUvaWNkdFwiO1xyXG5pbXBvcnQgeyBpY2R0X0lEYXRhTm9kZSB9IGZyb20gXCIuLi8uLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuaW1wb3J0IHsgaWNkdF9SdW4gfSBmcm9tIFwiLi4vLi4vcnVuXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9SdW5fVGVzdF9Ob3RpZnlfU291bmQgPSAobm9kZTogaWNkdF9JRGF0YU5vZGUsIG9wdGlvbnM6IHsgc291cmNlPzogeyB1cmw/OiBzdHJpbmcsIHBhdGg/OiBzdHJpbmcsIG5hbWU/OiBzdHJpbmcgfSwgaXRlcmF0aW9uPzogbnVtYmVyLCBub2RlU3RhdHVzOiBudW1iZXIsIHNsaWRlU3RhdHVzOiBudW1iZXIgfSwgc3VjY2VzczogRnVuY3Rpb24pID0+IHtcclxuXHJcbiAgICBpZiAob3B0aW9ucy5zbGlkZVN0YXR1cyAhPSBpY2R0X1J1bi5zbGlkZVN0YXR1cykge1xyXG4gICAgICAgIHN1Y2Nlc3MoKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFvcHRpb25zLnNvdXJjZT8ucGF0aCAmJiAhb3B0aW9ucy5zb3VyY2U/LnVybCkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihgJHtub2RlLmlkfSAtPiBhdWRpbyBubyBzb3VyY2UhYCk7XHJcbiAgICAgICAgc3VjY2VzcygpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgdGhpc05vZGUgPSBqUXVlcnkoJyMnICsgbm9kZS5pZCk7XHJcblxyXG4gICAgbGV0IGxvb3BOdW0gPSBvcHRpb25zLml0ZXJhdGlvbiA/PyAwO1xyXG4gICAgaWYgKGxvb3BOdW0gPCAwKSB7XHJcbiAgICAgICAgLy9cclxuICAgICAgICBzdWNjZXNzKCk7ICAvL2zhurdwIHbDtCBo4bqhbiB0aMOsIGfhu41pIGx1w7RuXHJcbiAgICAgICAgc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHsgfTsgIC8vaOG7p3kgZnVuY3Rpb24gY2FsbGJhY2tcclxuICAgIH1cclxuXHJcbiAgICAvL27hur91IGl0ZW0gY8OzIGhv4bqhdCDEkeG7mW5nIGzDoCB2w7QgaOG6oW4gdsOgIMSRYW5nIGNo4bqheSB0aMOsIGtvIGPhuqduIGfhu41pIGzhuqFpIG7hu69hXHJcbiAgICBpZiAodGhpc05vZGUuZGF0YSgnYXVkaW8tcnVubmluZycpICYmIGxvb3BOdW0gPCAwKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXNOb2RlLmRhdGEoJ2F1ZGlvLXJ1bm5pbmcnLCB0cnVlKTtcclxuXHJcbiAgICAvL1xyXG4gICAgdmFyIGF1ZGlvID0gbmV3IEF1ZGlvKCk7XHJcbiAgICBhdWRpby5hdXRvcGxheSA9IHRydWU7XHJcbiAgICBhdWRpby5sb29wID0gbG9vcE51bSAhPSAwID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgYXVkaW8ucHJlbG9hZCA9ICdhdXRvJzsgLy904bqjaSBk4buvIGxp4buHdSBhdWRpbyBraGkga2jhu59pIHThuqFvXHJcbiAgICBhdWRpby5jb250cm9scyA9IHRydWU7XHJcbiAgICBhdWRpby5zZXRBdHRyaWJ1dGVOb2RlKGRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZSgncGxheXNpbmxpbmUnKSk7XHJcblxyXG4gICAgYXVkaW8uYWRkRXZlbnRMaXN0ZW5lcignY2FucGxheScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvL2FsZXJ0KCdhdWRpbyBjYW5wbGF5Jyk7XHJcbiAgICAgICAgdmFyIHByb21pc2UgPSBhdWRpby5wbGF5KCk7XHJcbiAgICAgICAgaWYgKHByb21pc2UpIHtcclxuICAgICAgICAgICAgcHJvbWlzZVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXNOb2RlLmRhdGEoJ2F1ZGlvLXJ1bm5pbmcnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAvL2Vycm9yIHBsYXlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXNOb2RlLmRhdGEoJ2F1ZGlvLXJ1bm5pbmcnLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vdHLhuqFuZyB0aMOhaSBzbGlkZSBraMO0bmcgxJHhu5VpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2xpZGVTdGF0dXMgPT09IGljZHRfUnVuLnNsaWRlU3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGF1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy9hbGVydCgnYXVkaW8gdGltZXVwZGF0ZScpO1xyXG4gICAgICAgIHZhciBzdG9wQXVkaW8gPSBmdW5jdGlvbiAoYXVkaW86IGFueSkge1xyXG4gICAgICAgICAgICBhdWRpby5wYXVzZSgpO1xyXG4gICAgICAgICAgICBhdWRpby5yZW1vdmUoKTtcclxuICAgICAgICAgICAgdGhpc05vZGUuZGF0YSgnYXVkaW8tcnVubmluZycsIGZhbHNlKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3RoYXkgxJHhu5VpIHRy4bqhbmcgdGjDoWkgc2xpZGVcclxuICAgICAgICBpZiAob3B0aW9ucy5zbGlkZVN0YXR1cyAhPT0gaWNkdF9SdW4uc2xpZGVTdGF0dXMpIHtcclxuICAgICAgICAgICAgc3RvcEF1ZGlvKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgYXVkaW8uYWRkRXZlbnRMaXN0ZW5lcignY2FucGxheXRocm91Z2gnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy9hbGVydCgnYXVkaW8gY2FucGxheXRocm91Z2gnKTtcclxuICAgICAgICBpZiAodGhpcy5sb29wKSB7XHJcbiAgICAgICAgICAgIGlmIChsb29wTnVtID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbG9vcE51bS0tO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGxvb3BOdW0gPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb29wID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGF1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXknLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy9hbGVydCgnYXVkaW8gcGxheScpO1xyXG4gICAgfSk7XHJcbiAgICBhdWRpby5hZGRFdmVudExpc3RlbmVyKCdwYXVzZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvL2FsZXJ0KCdhdWRpbyBwYXVzZScpO1xyXG4gICAgfSk7XHJcbiAgICBhdWRpby5hZGRFdmVudExpc3RlbmVyKCdlbmRlZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvL2FsZXJ0KCdhdWRpbyBlbmRlZCcpO1xyXG4gICAgICAgIHRoaXMucmVtb3ZlKCk7XHJcbiAgICAgICAgdGhpc05vZGUuZGF0YSgnYXVkaW8tcnVubmluZycsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgLy90cuG6oW5nIHRow6FpIHNsaWRlIGtow7RuZyB0aGF5IMSR4buVaVxyXG4gICAgICAgIGlmIChvcHRpb25zLnNsaWRlU3RhdHVzID09PSBpY2R0X1J1bi5zbGlkZVN0YXR1cykge1xyXG4gICAgICAgICAgICBzdWNjZXNzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBhdWRpby5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICB0aGlzLnJlbW92ZSgpO1xyXG4gICAgICAgIHRoaXNOb2RlLmRhdGEoJ2F1ZGlvLXJ1bm5pbmcnLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vdHLhuqFuZyB0aMOhaSBzbGlkZSBraMO0bmcgxJHhu5VpXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuc2xpZGVTdGF0dXMgPT09IGljZHRfUnVuLnNsaWRlU3RhdHVzKSB7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3MoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhdWRpby5zcmMgPSAob3B0aW9ucy5zb3VyY2U/LnBhdGggPyBpY2R0LmNvbmZpZz8ucmVhZGZpbGV1cGxvYWR1cmwgKyBvcHRpb25zLnNvdXJjZT8ucGF0aCA6IG9wdGlvbnMuc291cmNlPy51cmwpIHx8ICcnO1xyXG5cclxuICAgIHJldHVybiBhdWRpbztcclxufSIsImltcG9ydCB7IGljZHQgfSBmcm9tIFwiLi4vLi4vLi4vcHJvdG90eXBlL2ljZHRcIjtcclxuaW1wb3J0IHsgaWNkdF9SdW4gfSBmcm9tIFwiLi4vLi4vcnVuXCI7XHJcbmltcG9ydCB7IGljZHRfUnVuX1Rlc3RfTm90aWZ5X0VmZmVjdCB9IGZyb20gXCIuL25vdGlmeS1lZmZlY3RcIjtcclxuaW1wb3J0IHsgaWNkdF9SdW5fVGVzdF9Ob3RpZnlfSWNvbiB9IGZyb20gXCIuL25vdGlmeS1pY29uXCI7XHJcbmltcG9ydCB7IGljZHRfU3luY1N2Z05vZGU0RGVzaWduLCBzeW5jVGVzdCB9IGZyb20gXCIuLi8uLi9zeW5jLWVsZW1lbnQvc3ZnLWVsZW1lbnRcIjtcclxuaW1wb3J0IHsgaWNkdF9SdW5fVGVzdF9Ob3RpZnlfU291bmQgfSBmcm9tIFwiLi9ub3RpZnktc291bmRcIjtcclxuaW1wb3J0IHsgaWNkdF9JRGF0YU5vZGUsIGljZHRfSURhdGFTbGlkZSB9IGZyb20gXCIuLi8uLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuaW1wb3J0IHsgVl9JRCB9IGZyb20gXCIuLi8uLi8uLi9sb29rdXAvVl9JRFwiO1xyXG5pbXBvcnQgeyBleHRyYWN0U291cmNlVjEgfSBmcm9tIFwiLi4vLi4vLi4vZnVuYy9leHRyYWN0LWZyb20tZGF0YS12MVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfUnVuX1Rlc3QgPSAobm9kZTogaWNkdF9JRGF0YU5vZGUsIHNsaWRlOiBpY2R0X0lEYXRhU2xpZGUpID0+IHtcclxuXHJcbiAgICBsZXQgc3VjY2VzcyA9ICgpID0+IHtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKGBUZXN0Tm9kZSAjJHtub2RlLmlkfSBzdWNjZXNzIWApO1xyXG4gICAgfTtcclxuXHJcbiAgICBzd2l0Y2ggKG5vZGUuc291cmNlPy50ZXN0Py50eXBlKSB7XHJcbiAgICAgICAgY2FzZSAndHJ1ZWZhbHNlJzoge1xyXG4gICAgICAgICAgICBqUXVlcnkoJyMnICsgbm9kZS5pZCkuY2xpY2soKGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBub2RlU3RhdHVzID0gaWNkdF9SdW4ubm9kZVN0YXR1cyxcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZVN0YXR1cyA9IGljZHRfUnVuLnNsaWRlU3RhdHVzO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICBpY2R0X1J1bl9UZXN0X1RydWVGYWxzZShub2RlLCBzbGlkZSwgbm9kZVN0YXR1cywgc2xpZGVTdGF0dXMsIHN1Y2Nlc3MpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vxJHDoW5oIGThuqV1XHJcbiAgICAgICAgICAgIGlmIChzbGlkZS50ZXN0Py5zaG93c2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZWxlR3JvdXAgPSBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbihWX0lELlRFU1RfR1JPVVAsICdnJywgdW5kZWZpbmVkLCBpY2R0LnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICBzeW5jVGVzdChlbGVHcm91cCwgc2xpZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlICdzaW5nbGVjaG9pY2UnOiB7XHJcbiAgICAgICAgICAgIGpRdWVyeSgnIycgKyBub2RlLmlkKS5jbGljaygoZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IG5vZGVTdGF0dXMgPSBpY2R0X1J1bi5ub2RlU3RhdHVzLFxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlU3RhdHVzID0gaWNkdF9SdW4uc2xpZGVTdGF0dXM7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIGljZHRfUnVuX1Rlc3RfU2luZ2xlQ2hvaWNlKG5vZGUsIHNsaWRlLCBub2RlU3RhdHVzLCBzbGlkZVN0YXR1cywgc3VjY2Vzcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy/EkcOhbmggZOG6pXVcclxuICAgICAgICAgICAgaWYgKHNsaWRlLnRlc3Q/LnNob3dzZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIGxldCBlbGVHcm91cCA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKFZfSUQuVEVTVF9HUk9VUCwgJ2cnLCB1bmRlZmluZWQsIGljZHQudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIHN5bmNUZXN0KGVsZUdyb3VwLCBzbGlkZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgJ211bHRpY2hvaWNlJzoge1xyXG4gICAgICAgICAgICBqUXVlcnkoJyMnICsgbm9kZS5pZCkuY2xpY2soKGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBub2RlU3RhdHVzID0gaWNkdF9SdW4ubm9kZVN0YXR1cyxcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZVN0YXR1cyA9IGljZHRfUnVuLnNsaWRlU3RhdHVzO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICBpY2R0X1J1bl9UZXN0X011bHRpQ2hvaWNlKG5vZGUsIHNsaWRlLCBub2RlU3RhdHVzLCBzbGlkZVN0YXR1cywgc3VjY2Vzcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy/EkcOhbmggZOG6pXVcclxuICAgICAgICAgICAgaWYgKHNsaWRlLnRlc3Q/LnNob3dzZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIGxldCBlbGVHcm91cCA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKFZfSUQuVEVTVF9HUk9VUCwgJ2cnLCB1bmRlZmluZWQsIGljZHQudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIHN5bmNUZXN0KGVsZUdyb3VwLCBzbGlkZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgJ2ZpbGwnOiB7XHJcbiAgICAgICAgICAgIGpRdWVyeSgnIycgKyBub2RlLmlkKVxyXG4gICAgICAgICAgICAgICAgLm9uKCdrZXl1cCcsICdpbnB1dFt0eXBlPVwidGV4dFwiXScsIChlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvL2ZpeCB3aWR0aCBpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkaXZXID0galF1ZXJ5KCc8ZGl2Lz4nKS5jc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZm9udC1zaXplJzogalF1ZXJ5KGUudGFyZ2V0KS5jc3MoJ2ZvbnQtc2l6ZScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQ6ICdsZWZ0J1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLnRleHQoZS50YXJnZXQudmFsdWUpLmFwcGVuZFRvKHdpbmRvdy5kb2N1bWVudC5ib2R5KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KGUudGFyZ2V0KS5jc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogKGRpdlcud2lkdGgoKSA/PyAwKSArIDMwXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vZGl2Vy5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAub24oJ2tleXByZXNzJywgJ2lucHV0W3R5cGU9XCJ0ZXh0XCJdJywgKGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBlLmtleUNvZGUgfHwgZS5jaGFyQ29kZSB8fCBlLndoaWNoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL0VOVEVSXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gMTMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy91bmZvY3VzIGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeShlLnRhcmdldCkuYmx1cigpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAub24oJ2NoYW5nZScsICdpbnB1dFt0eXBlPVwidGV4dFwiXScsIChlOiBhbnkpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5vZGVTdGF0dXMgPSBpY2R0X1J1bi5ub2RlU3RhdHVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZVN0YXR1cyA9IGljZHRfUnVuLnNsaWRlU3RhdHVzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQga2V5ID0gZS50YXJnZXQ/LmdldEF0dHJpYnV0ZSgnZGF0YS1rZXknKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBlLnRhcmdldD8udmFsdWU/LnRyaW0oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICBpY2R0X1J1bl9UZXN0X0ZpbGwobm9kZSwgc2xpZGUsIG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICB9LCBzdWNjZXNzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICBqUXVlcnkoJyMnICsgbm9kZS5pZCkuZmluZChgaW5wdXRbdHlwZT1cInRleHRcIl1bZGF0YS1rZXk9XCIke2tleX1cIl1gKS52YWwodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXNsaWRlLnRlc3Q/LnNob3dzZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIGpRdWVyeSgnIycgKyBub2RlLmlkKS5hZGRDbGFzcygnaGlkZS1zZWxlY3Rpb24nKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL2zhu5cgdHLhu5FuZ1xyXG4gICAgICAgIGNhc2UgJ21hdGNoaW5nLWVtcHR5Jzoge1xyXG4gICAgICAgICAgICAoalF1ZXJ5KCcjJyArIG5vZGUuaWQpXHJcbiAgICAgICAgICAgICAgICAub24oJ3RvdWNobW92ZScsIFwiLm9uZHJhZy1pdGVtXCIsIGZ1bmN0aW9uIChlKSB7IGUucHJldmVudERlZmF1bHQoKTsgfSkgYXMgYW55KVxyXG4gICAgICAgICAgICAgICAgLmtlbmRvRHJhZ2dhYmxlKHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IFwiLm9uZHJhZy1pdGVtXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaGludDogZnVuY3Rpb24gKGU6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2l6ZSA9IDY0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF0aW8gPSBub2RlLnNpemUuaGVpZ2h0IC8gbm9kZS5zaXplLndpZHRoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGA8ZGl2IGNsYXNzPVwib25kcmFnLWhpbnRcIiBzdHlsZT1cInRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDAlKSB0cmFuc2xhdGVZKDEwMCUpO3dpZHRoOiR7c2l6ZX1weDtoZWlnaHQ6JHtzaXplICogcmF0aW99cHg7Ym9yZGVyLXJhZGl1czo4cHg7Ym9yZGVyOjFweCBkYXNoZWQgI0RBREFEQTtwYWRkaW5nOjhweDtib3gtc2l6aW5nOmNvbnRlbnQtYm94O2JhY2tncm91bmQtY29sb3I6cmdiYSgyNTUsMjU1LDI1NSwwLjgpO1wiPiR7ZS5wcm9wKCdvdXRlckhUTUwnKX08L2Rpdj5gLnJlcGxhY2UoL1xccysvZywgJyAnKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRyYWdzdGFydDogZnVuY3Rpb24gKGU6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkoYHN2ZyBmb3JlaWduT2JqZWN0IC5vbmRyb3AtaGVyZVtkYXRhLXR5cGUyPVwibWF0Y2hpbmctY29udGVudFwiXTplbXB0eWApLmFkZENsYXNzKCdhY3RpdmVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeShgc3ZnIGZvcmVpZ25PYmplY3QgLm9uZHJvcC1oZXJlW2RhdGEtdHlwZTI9XCJtYXRjaGluZy1lbXB0eVwiXWApLmFkZENsYXNzKCdhY3RpdmVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2xpZGUudGVzdD8uc2hvd3NlbGVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KGBzdmcgZm9yZWlnbk9iamVjdCAub25kcm9wLWhlcmVbZGF0YS10eXBlPVwibWF0Y2hpbmdcIl1gKS5hZGRDbGFzcygnaGlkZS1zZWxlY3Rpb24nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNkdF9SdW5fVGVzdF9NYXRjaGluZ19DbGVhcihub2RlLCBzbGlkZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBkcmFnOiBmdW5jdGlvbiAoZTogYW55KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZHJhZ2VuZDogZnVuY3Rpb24gKGU6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkoYHN2ZyBmb3JlaWduT2JqZWN0IC5vbmRyb3AtaGVyZWApLnJlbW92ZUNsYXNzKCdhY3RpdmVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeShgc3ZnIGZvcmVpZ25PYmplY3QgLm9uZHJvcC1oZXJlYCkucmVtb3ZlQ2xhc3MoJ2ZvY3VzZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRyYWdjYW5jZWw6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KGBzdmcgZm9yZWlnbk9iamVjdCAub25kcm9wLWhlcmVgKS5yZW1vdmVDbGFzcygnYWN0aXZlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkoYHN2ZyBmb3JlaWduT2JqZWN0IC5vbmRyb3AtaGVyZWApLnJlbW92ZUNsYXNzKCdmb2N1c2VkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAoalF1ZXJ5KGAjJHtub2RlLmlkfSAub25kcm9wLWhlcmVgKSBhcyBhbnkpXHJcbiAgICAgICAgICAgICAgICAua2VuZG9Ecm9wVGFyZ2V0KHtcclxuICAgICAgICAgICAgICAgICAgICBkcmFnZW50ZXI6IGZ1bmN0aW9uIChlOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlLmRyb3BUYXJnZXQuaGFzQ2xhc3MoJ2FjdGl2ZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuZHJvcFRhcmdldC5hZGRDbGFzcyhcImZvY3VzZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBkcmFnbGVhdmU6IGZ1bmN0aW9uIChlOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlLmRyb3BUYXJnZXQuaGFzQ2xhc3MoJ2FjdGl2ZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuZHJvcFRhcmdldC5yZW1vdmVDbGFzcyhcImZvY3VzZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBkcm9wOiBmdW5jdGlvbiAoZTogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZS5kcm9wVGFyZ2V0Lmhhc0NsYXNzKCdhY3RpdmVkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmRyb3BUYXJnZXQucmVtb3ZlQ2xhc3MoXCJmb2N1c2VkXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRyb3BUYXJnZXQgPSBlLmRyb3BUYXJnZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnVGFyZ2V0ID0gZS5kcmFnZ2FibGUuY3VycmVudFRhcmdldDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZOG7jW4gY2jhu5cgbuG6v3UgdsO5bmcgbsOgeSDEkcOjIGPDsyBk4buvIGxp4buHdSwgdGjDrCBtb3ZlIGThu68gbGnhu4d1IMSRw7MgduG7gSBraHUgduG7sWMgbWF0Y2hpbmctY29udGVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRyb3BUYXJnZXQuaXMoJzplbXB0eScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wVGFyZ2V0LmZpbmQoJy5vbmRyYWctaXRlbScpLmFwcGVuZFRvKCQoJ3N2ZyBmb3JlaWduT2JqZWN0IC5vbmRyb3AtaGVyZVtkYXRhLXR5cGUyPVwibWF0Y2hpbmctY29udGVudFwiXTplbXB0eScpLmZpcnN0KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21vdmV0b1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkcmFnVGFyZ2V0LmFwcGVuZFRvKGRyb3BUYXJnZXQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5vZGVTdGF0dXMgPSBpY2R0X1J1bi5ub2RlU3RhdHVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVTdGF0dXMgPSBpY2R0X1J1bi5zbGlkZVN0YXR1cztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljZHRfUnVuX1Rlc3RfTWF0Y2hpbmcobm9kZSwgc2xpZGUsIG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGRyYWdUYXJnZXQuZGF0YSgna2V5JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgc3VjY2Vzcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL2zhu5cgY8OzIGThu68gbGnhu4d1LCBraMO0bmcgdHLhu5FuZ1xyXG4gICAgICAgIGNhc2UgJ21hdGNoaW5nLWNvbnRlbnQnOiB7XHJcbiAgICAgICAgICAgIChqUXVlcnkoJyMnICsgbm9kZS5pZClcclxuICAgICAgICAgICAgICAgIC5vbigndG91Y2htb3ZlJywgXCIub25kcmFnLWl0ZW1cIiwgZnVuY3Rpb24gKGUpIHsgZS5wcmV2ZW50RGVmYXVsdCgpOyB9KSBhcyBhbnkpXHJcbiAgICAgICAgICAgICAgICAua2VuZG9EcmFnZ2FibGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjogXCIub25kcmFnLWl0ZW1cIixcclxuICAgICAgICAgICAgICAgICAgICBoaW50OiBmdW5jdGlvbiAoZTogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzaXplID0gNjQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXRpbyA9IG5vZGUuc2l6ZS5oZWlnaHQgLyBub2RlLnNpemUud2lkdGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJvbmRyYWctaGludFwiIHN0eWxlPVwidHJhbnNmb3JtOiB0cmFuc2xhdGVYKDEwMCUpIHRyYW5zbGF0ZVkoMTAwJSk7d2lkdGg6JHtzaXplfXB4O2hlaWdodDoke3NpemUgKiByYXRpb31weDtib3JkZXItcmFkaXVzOjhweDtib3JkZXI6MXB4IGRhc2hlZCAjREFEQURBO3BhZGRpbmc6OHB4O2JveC1zaXppbmc6Y29udGVudC1ib3g7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDI1NSwyNTUsMjU1LDAuOCk7XCI+JHtlLnByb3AoJ291dGVySFRNTCcpfTwvZGl2PmAucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZHJhZ3N0YXJ0OiBmdW5jdGlvbiAoZTogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeShgc3ZnIGZvcmVpZ25PYmplY3QgLm9uZHJvcC1oZXJlW2RhdGEtdHlwZTI9XCJtYXRjaGluZy1jb250ZW50XCJdOmVtcHR5YCkuYWRkQ2xhc3MoJ2FjdGl2ZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KGBzdmcgZm9yZWlnbk9iamVjdCAub25kcm9wLWhlcmVbZGF0YS10eXBlMj1cIm1hdGNoaW5nLWVtcHR5XCJdYCkuYWRkQ2xhc3MoJ2FjdGl2ZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzbGlkZS50ZXN0Py5zaG93c2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkoYHN2ZyBmb3JlaWduT2JqZWN0IC5vbmRyb3AtaGVyZVtkYXRhLXR5cGU9XCJtYXRjaGluZ1wiXWApLmFkZENsYXNzKCdoaWRlLXNlbGVjdGlvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBkcmFnOiBmdW5jdGlvbiAoZTogYW55KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZHJhZ2VuZDogZnVuY3Rpb24gKGU6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkoYHN2ZyBmb3JlaWduT2JqZWN0IC5vbmRyb3AtaGVyZWApLnJlbW92ZUNsYXNzKCdhY3RpdmVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeShgc3ZnIGZvcmVpZ25PYmplY3QgLm9uZHJvcC1oZXJlYCkucmVtb3ZlQ2xhc3MoJ2ZvY3VzZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRyYWdjYW5jZWw6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KGBzdmcgZm9yZWlnbk9iamVjdCAub25kcm9wLWhlcmVgKS5yZW1vdmVDbGFzcygnYWN0aXZlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkoYHN2ZyBmb3JlaWduT2JqZWN0IC5vbmRyb3AtaGVyZWApLnJlbW92ZUNsYXNzKCdmb2N1c2VkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAoalF1ZXJ5KGAjJHtub2RlLmlkfSAub25kcm9wLWhlcmVgKSBhcyBhbnkpXHJcbiAgICAgICAgICAgICAgICAua2VuZG9Ecm9wVGFyZ2V0KHtcclxuICAgICAgICAgICAgICAgICAgICBkcmFnZW50ZXI6IGZ1bmN0aW9uIChlOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlLmRyb3BUYXJnZXQuaGFzQ2xhc3MoJ2FjdGl2ZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuZHJvcFRhcmdldC5hZGRDbGFzcyhcImZvY3VzZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBkcmFnbGVhdmU6IGZ1bmN0aW9uIChlOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlLmRyb3BUYXJnZXQuaGFzQ2xhc3MoJ2FjdGl2ZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuZHJvcFRhcmdldC5yZW1vdmVDbGFzcyhcImZvY3VzZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBkcm9wOiBmdW5jdGlvbiAoZTogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZS5kcm9wVGFyZ2V0Lmhhc0NsYXNzKCdhY3RpdmVkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmRyb3BUYXJnZXQucmVtb3ZlQ2xhc3MoXCJmb2N1c2VkXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRyb3BUYXJnZXQgPSBlLmRyb3BUYXJnZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnVGFyZ2V0ID0gZS5kcmFnZ2FibGUuY3VycmVudFRhcmdldDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbW92ZXRvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdUYXJnZXQuYXBwZW5kVG8oZHJvcFRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlICdzcGVlY2gnOiB7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlICdzdWJtaXQnOiB7XHJcbiAgICAgICAgICAgIGpRdWVyeSgnIycgKyBub2RlLmlkKS5jbGljaygoZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IG5vZGVTdGF0dXMgPSBpY2R0X1J1bi5ub2RlU3RhdHVzLFxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlU3RhdHVzID0gaWNkdF9SdW4uc2xpZGVTdGF0dXM7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIGljZHRfUnVuX1Rlc3RfU3VibWl0KG5vZGUsIHNsaWRlLCBub2RlU3RhdHVzLCBzbGlkZVN0YXR1cywgc3VjY2Vzcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnc2xpZGUudGVzdD8uYW5zd2VyPy5tYXRjaGluZycsIEpTT04uc3RyaW5naWZ5KHNsaWRlLnRlc3Q/LmFuc3dlcj8ubWF0Y2hpbmcgPz8ge30sIG51bGwsIDIpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgaWNkdF9SdW5fVGVzdF9UcnVlRmFsc2UgPSAobm9kZTogaWNkdF9JRGF0YU5vZGUsIHNsaWRlOiBpY2R0X0lEYXRhU2xpZGUsIG5vZGVTdGF0dXM6IG51bWJlciwgc2xpZGVTdGF0dXM6IG51bWJlciwgc3VjY2VzczogRnVuY3Rpb24pID0+IHtcclxuXHJcbiAgICBsZXQgaXNjb3JyZWN0ID0gbm9kZS5zb3VyY2U/LnRlc3Q/LnRydWVmYWxzZT8uaXNjb3JyZWN0O1xyXG5cclxuICAgIGlmICghc2xpZGUudGVzdCkge1xyXG4gICAgICAgIHNsaWRlLnRlc3QgPSB7IGFuc3dlcjogeyB0cnVlZmFsc2U6IHsgdmFsdWU6IG5vZGUuaWQsIGlzY29ycmVjdCB9IH0gfTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCFzbGlkZS50ZXN0LmFuc3dlcikge1xyXG4gICAgICAgIHNsaWRlLnRlc3QuYW5zd2VyID0geyB0cnVlZmFsc2U6IHsgdmFsdWU6IG5vZGUuaWQsIGlzY29ycmVjdCB9IH07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBzbGlkZS50ZXN0LmFuc3dlci50cnVlZmFsc2UgPSB7IHZhbHVlOiBub2RlLmlkLCBpc2NvcnJlY3QgfTtcclxuICAgIH1cclxuXHJcbiAgICAvL2tow7RuZyBjw7MgbnV0IHN1Ym1pdCB0aMOsIGtp4buDbSB0cmEga+G6v3QgcXXhuqMgxJHDum5nIHNhaSBsdcO0blxyXG4gICAgaWYgKCFzbGlkZS5zdmc/Lm5vZGVzLmZpbmQoZiA9PiBmLnNvdXJjZT8udGVzdD8udHlwZSA9PSAnc3VibWl0JykpIHtcclxuICAgICAgICBpY2R0X1J1bl9UZXN0X05vdGlmeUFuc3dlclJlc3VsdChub2RlLCBzbGlkZSwgbm9kZVN0YXR1cywgc2xpZGVTdGF0dXMsIHsgaXNjb3JyZWN0IH0sIHN1Y2Nlc3MpO1xyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAgICAgIC8vxJHDoW5oIGThuqV1XHJcbiAgICAgICAgaWYgKHNsaWRlLnRlc3Quc2hvd3NlbGVjdGlvbikge1xyXG4gICAgICAgICAgICBsZXQgZWxlR3JvdXAgPSBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbihWX0lELlRFU1RfR1JPVVAsICdnJywgdW5kZWZpbmVkLCBpY2R0LnRhcmdldCk7XHJcbiAgICAgICAgICAgIHN5bmNUZXN0KGVsZUdyb3VwLCBzbGlkZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIC8vXHJcbiAgICBjb25zb2xlLmxvZygnbm9kZSBzb3VyY2UgLT4nLCBub2RlLnNvdXJjZSk7XHJcbiAgICBjb25zb2xlLmxvZygnc2xpZGUgdGVzdCAtPicsIHNsaWRlLnRlc3QpO1xyXG59XHJcblxyXG5jb25zdCBpY2R0X1J1bl9UZXN0X1NpbmdsZUNob2ljZSA9IChub2RlOiBpY2R0X0lEYXRhTm9kZSwgc2xpZGU6IGljZHRfSURhdGFTbGlkZSwgbm9kZVN0YXR1czogbnVtYmVyLCBzbGlkZVN0YXR1czogbnVtYmVyLCBzdWNjZXNzOiBGdW5jdGlvbikgPT4ge1xyXG5cclxuICAgIGxldCBpc2NvcnJlY3QgPSBub2RlLnNvdXJjZT8udGVzdD8uc2luZ2xlY2hvaWNlPy5pc2NvcnJlY3Q7XHJcblxyXG4gICAgaWYgKCFzbGlkZS50ZXN0KSB7XHJcbiAgICAgICAgc2xpZGUudGVzdCA9IHsgYW5zd2VyOiB7IHNpbmdsZWNob2ljZTogeyB2YWx1ZTogbm9kZS5pZCwgaXNjb3JyZWN0IH0gfSB9O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIXNsaWRlLnRlc3QuYW5zd2VyKSB7XHJcbiAgICAgICAgc2xpZGUudGVzdC5hbnN3ZXIgPSB7IHNpbmdsZWNob2ljZTogeyB2YWx1ZTogbm9kZS5pZCwgaXNjb3JyZWN0IH0gfTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHNsaWRlLnRlc3QuYW5zd2VyLnNpbmdsZWNob2ljZSA9IHsgdmFsdWU6IG5vZGUuaWQsIGlzY29ycmVjdCB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8va2jDtG5nIGPDsyBudXQgc3VibWl0IHRow6wga2nhu4NtIHRyYSBr4bq/dCBxdeG6oyDEkcO6bmcgc2FpIGx1w7RuXHJcbiAgICBpZiAoIXNsaWRlLnN2Zz8ubm9kZXMuZmluZChmID0+IGYuc291cmNlPy50ZXN0Py50eXBlID09ICdzdWJtaXQnKSkge1xyXG4gICAgICAgIGljZHRfUnVuX1Rlc3RfTm90aWZ5QW5zd2VyUmVzdWx0KG5vZGUsIHNsaWRlLCBub2RlU3RhdHVzLCBzbGlkZVN0YXR1cywgeyBpc2NvcnJlY3QgfSwgc3VjY2Vzcyk7XHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICAgICAgLy/EkcOhbmggZOG6pXVcclxuICAgICAgICBpZiAoc2xpZGUudGVzdC5zaG93c2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGxldCBlbGVHcm91cCA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKFZfSUQuVEVTVF9HUk9VUCwgJ2cnLCB1bmRlZmluZWQsIGljZHQudGFyZ2V0KTtcclxuICAgICAgICAgICAgc3luY1Rlc3QoZWxlR3JvdXAsIHNsaWRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgLy9cclxuICAgIGNvbnNvbGUubG9nKCdub2RlIHNvdXJjZSAtPicsIG5vZGUuc291cmNlKTtcclxuICAgIGNvbnNvbGUubG9nKCdzbGlkZSB0ZXN0IC0+Jywgc2xpZGUudGVzdCk7XHJcbn1cclxuXHJcbmNvbnN0IGljZHRfUnVuX1Rlc3RfTXVsdGlDaG9pY2UgPSAobm9kZTogaWNkdF9JRGF0YU5vZGUsIHNsaWRlOiBpY2R0X0lEYXRhU2xpZGUsIG5vZGVTdGF0dXM6IG51bWJlciwgc2xpZGVTdGF0dXM6IG51bWJlciwgc3VjY2VzczogRnVuY3Rpb24pID0+IHtcclxuXHJcbiAgICBsZXQgaXNjb3JyZWN0ID0gbm9kZS5zb3VyY2U/LnRlc3Q/Lm11bHRpY2hvaWNlPy5pc2NvcnJlY3QsXHJcbiAgICAgICAgaXN1bmNob2ljZWQ7XHJcblxyXG4gICAgaWYgKCFzbGlkZS50ZXN0KSB7XHJcbiAgICAgICAgc2xpZGUudGVzdCA9IHsgYW5zd2VyOiB7IG11bHRpY2hvaWNlOiBbeyB2YWx1ZTogbm9kZS5pZCwgaXNjb3JyZWN0IH1dIH0gfTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCFzbGlkZS50ZXN0LmFuc3dlcikge1xyXG4gICAgICAgIHNsaWRlLnRlc3QuYW5zd2VyID0geyBtdWx0aWNob2ljZTogW3sgdmFsdWU6IG5vZGUuaWQsIGlzY29ycmVjdCB9XSB9O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIXNsaWRlLnRlc3QuYW5zd2VyLm11bHRpY2hvaWNlKSB7XHJcbiAgICAgICAgc2xpZGUudGVzdC5hbnN3ZXIubXVsdGljaG9pY2UgPSBbeyB2YWx1ZTogbm9kZS5pZCwgaXNjb3JyZWN0IH1dO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy91bmNob2ljZWRcclxuICAgICAgICBpZiAoc2xpZGUudGVzdC5hbnN3ZXIubXVsdGljaG9pY2UuZmluZChmID0+IGYudmFsdWUgPT0gbm9kZS5pZCkpIHtcclxuICAgICAgICAgICAgc2xpZGUudGVzdC5hbnN3ZXIubXVsdGljaG9pY2UgPSBzbGlkZS50ZXN0LmFuc3dlci5tdWx0aWNob2ljZS5maWx0ZXIoZiA9PiBmLnZhbHVlICE9IG5vZGUuaWQpO1xyXG4gICAgICAgICAgICBpc3VuY2hvaWNlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzbGlkZS50ZXN0LmFuc3dlci5tdWx0aWNob2ljZS5wdXNoKHsgdmFsdWU6IG5vZGUuaWQsIGlzY29ycmVjdCB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy9raMO0bmcgY8OzIG51dCBzdWJtaXQgdGjDrCBraeG7g20gdHJhIGvhur90IHF14bqjIMSRw7puZyBzYWkgbHXDtG5cclxuICAgIGlmICghc2xpZGUuc3ZnPy5ub2Rlcy5maW5kKGYgPT4gZi5zb3VyY2U/LnRlc3Q/LnR5cGUgPT0gJ3N1Ym1pdCcpKSB7XHJcbiAgICAgICAgaWNkdF9SdW5fVGVzdF9Ob3RpZnlBbnN3ZXJSZXN1bHQobm9kZSwgc2xpZGUsIG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzLCB7IGlzY29ycmVjdCB9LCBzdWNjZXNzKTtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgICAgICAvL8SRw6FuaCBk4bqldVxyXG4gICAgICAgIGlmIChzbGlkZS50ZXN0LnNob3dzZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgbGV0IGVsZUdyb3VwID0gaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24oVl9JRC5URVNUX0dST1VQLCAnZycsIHVuZGVmaW5lZCwgaWNkdC50YXJnZXQpO1xyXG4gICAgICAgICAgICBzeW5jVGVzdChlbGVHcm91cCwgc2xpZGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAvL1xyXG4gICAgY29uc29sZS5sb2coJ25vZGUgc291cmNlIC0+Jywgbm9kZS5zb3VyY2UpO1xyXG4gICAgY29uc29sZS5sb2coJ3NsaWRlIHRlc3QgLT4nLCBzbGlkZS50ZXN0KTtcclxufVxyXG5cclxuY29uc3QgaWNkdF9SdW5fVGVzdF9GaWxsID0gKG5vZGU6IGljZHRfSURhdGFOb2RlLCBzbGlkZTogaWNkdF9JRGF0YVNsaWRlLCBub2RlU3RhdHVzOiBudW1iZXIsIHNsaWRlU3RhdHVzOiBudW1iZXIsIG9wdGlvbnM6IHsga2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGlzY29ycmVjdD86IGJvb2xlYW4gfSwgc3VjY2VzczogRnVuY3Rpb24pID0+IHtcclxuXHJcbiAgICBsZXQgeyB2YWx1ZSB9ID0gbm9kZS5zb3VyY2U/LnRlc3Q/LmZpbGw/LmZpbmQoZiA9PiBmLmtleSA9PSBgW1ske29wdGlvbnMua2V5fV1dYCkgPz8ge307XHJcbiAgICBsZXQgaXNjb3JyZWN0ID0gdmFsdWUgJiYgdmFsdWUubWFwKG0gPT4gbT8udG9Mb2NhbGVMb3dlckNhc2UoKSkuaW5jbHVkZXMob3B0aW9ucy52YWx1ZT8udG9Mb2NhbGVMb3dlckNhc2UoKSk7XHJcblxyXG4gICAgLy9raMO0bmcgY8OzIG51dCBzdWJtaXQgdGjDrCBraeG7g20gdHJhIGvhur90IHF14bqjIMSRw7puZyBzYWkgbHXDtG5cclxuICAgIGlmICghc2xpZGUuc3ZnPy5ub2Rlcy5maW5kKGYgPT4gZi5zb3VyY2U/LnRlc3Q/LnR5cGUgPT0gJ3N1Ym1pdCcpKSB7XHJcbiAgICAgICAgaWNkdF9SdW5fVGVzdF9Ob3RpZnlBbnN3ZXJSZXN1bHQobm9kZSwgc2xpZGUsIG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzLCB7IGlzY29ycmVjdCB9LCBzdWNjZXNzKTtcclxuICAgIH1cclxuXHJcbiAgICAvL2doaSBuaOG6rW4ga+G6v3QgcXXhuqMgxJHDum5nIHNhaVxyXG4gICAgb3B0aW9ucy5pc2NvcnJlY3QgPSBpc2NvcnJlY3Q7XHJcblxyXG4gICAgaWYgKCFzbGlkZS50ZXN0KSB7XHJcbiAgICAgICAgc2xpZGUudGVzdCA9IHsgYW5zd2VyOiB7IGZpbGw6IFtvcHRpb25zXSB9IH07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICghc2xpZGUudGVzdC5hbnN3ZXIpIHtcclxuICAgICAgICBzbGlkZS50ZXN0LmFuc3dlciA9IHsgZmlsbDogW29wdGlvbnNdIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICghc2xpZGUudGVzdC5hbnN3ZXIuZmlsbCkge1xyXG4gICAgICAgIHNsaWRlLnRlc3QuYW5zd2VyLmZpbGwgPSBbb3B0aW9uc107XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoc2xpZGUudGVzdC5hbnN3ZXIuZmlsbC5maW5kKGYgPT4gZi5rZXkgPT0gb3B0aW9ucy5rZXkpKSB7XHJcbiAgICAgICAgICAgIHNsaWRlLnRlc3QuYW5zd2VyLmZpbGwuZmlsdGVyKGYgPT4gZi5rZXkgPT0gb3B0aW9ucy5rZXkpLmZvckVhY2goZiA9PiB7XHJcbiAgICAgICAgICAgICAgICBmLnZhbHVlID0gb3B0aW9ucy52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGYuaXNjb3JyZWN0ID0gb3B0aW9ucy5pc2NvcnJlY3Q7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2xpZGUudGVzdC5hbnN3ZXIuZmlsbC5wdXNoKG9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL1xyXG4gICAgY29uc29sZS5sb2coJ25vZGUgc291cmNlIC0+Jywgbm9kZS5zb3VyY2UpO1xyXG4gICAgY29uc29sZS5sb2coJ3NsaWRlIHRlc3QgLT4nLCBzbGlkZS50ZXN0KTtcclxufVxyXG5cclxuY29uc3QgaWNkdF9SdW5fVGVzdF9NYXRjaGluZyA9IChub2RlOiBpY2R0X0lEYXRhTm9kZSwgc2xpZGU6IGljZHRfSURhdGFTbGlkZSwgbm9kZVN0YXR1czogbnVtYmVyLCBzbGlkZVN0YXR1czogbnVtYmVyLCBvcHRpb25zOiB7IGtleTogc3RyaW5nIH0sIHN1Y2Nlc3M6IEZ1bmN0aW9uKSA9PiB7XHJcblxyXG4gICAgbGV0IHsga2V5IH0gPSBub2RlLnNvdXJjZT8udGVzdD8ubWF0Y2hpbmcgPz8geyBrZXk6IFwiS0lFTlwiIH07XHJcbiAgICBsZXQgaXNjb3JyZWN0ID0gb3B0aW9ucy5rZXkgPT0ga2V5O1xyXG5cclxuICAgIC8va2jDtG5nIGPDsyBudXQgc3VibWl0IHRow6wga2nhu4NtIHRyYSBr4bq/dCBxdeG6oyDEkcO6bmcgc2FpIGx1w7RuXHJcbiAgICBpZiAoIXNsaWRlLnN2Zz8ubm9kZXMuZmluZChmID0+IGYuc291cmNlPy50ZXN0Py50eXBlID09ICdzdWJtaXQnKSkge1xyXG4gICAgICAgIGljZHRfUnVuX1Rlc3RfTm90aWZ5QW5zd2VyUmVzdWx0KG5vZGUsIHNsaWRlLCBub2RlU3RhdHVzLCBzbGlkZVN0YXR1cywgeyBpc2NvcnJlY3QgfSwgc3VjY2Vzcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9jbGVhclxyXG4gICAgaWNkdF9SdW5fVGVzdF9NYXRjaGluZ19DbGVhcihub2RlLCBzbGlkZSk7XHJcblxyXG4gICAgLy9hZGRcclxuICAgIGxldCBhbnN3ZXIgPSB7XHJcbiAgICAgICAgaWQ6IG5vZGUuaWQsXHJcbiAgICAgICAga2V5OiBrZXkgPz8gXCJcIixcclxuICAgICAgICB2YWx1ZTogb3B0aW9ucy5rZXlcclxuICAgIH07XHJcblxyXG4gICAgaWYgKCFzbGlkZS50ZXN0KSB7XHJcbiAgICAgICAgc2xpZGUudGVzdCA9IHsgYW5zd2VyOiB7IG1hdGNoaW5nOiBbYW5zd2VyXSB9IH07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICghc2xpZGUudGVzdC5hbnN3ZXIpIHtcclxuICAgICAgICBzbGlkZS50ZXN0LmFuc3dlciA9IHsgbWF0Y2hpbmc6IFthbnN3ZXJdIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICghc2xpZGUudGVzdC5hbnN3ZXIubWF0Y2hpbmcpIHtcclxuICAgICAgICBzbGlkZS50ZXN0LmFuc3dlci5tYXRjaGluZyA9IFthbnN3ZXJdO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKHNsaWRlLnRlc3QuYW5zd2VyLm1hdGNoaW5nLmZpbmQoZiA9PiBmLmlkID09IGFuc3dlci5pZCkpIHtcclxuICAgICAgICAgICAgc2xpZGUudGVzdC5hbnN3ZXIubWF0Y2hpbmdcclxuICAgICAgICAgICAgICAgIC5maWx0ZXIoZiA9PiBmLmlkID09IGFuc3dlci5pZClcclxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKGYgPT4geyBmLmtleSA9IGFuc3dlci5rZXk7IGYudmFsdWUgPSBhbnN3ZXIudmFsdWU7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2xpZGUudGVzdC5hbnN3ZXIubWF0Y2hpbmcucHVzaChhbnN3ZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL1xyXG4gICAgY29uc29sZS5sb2coJ25vZGUgc291cmNlIC0+Jywgbm9kZS5zb3VyY2UpO1xyXG4gICAgY29uc29sZS5sb2coJ3NsaWRlIHRlc3QgLT4nLCBzbGlkZS50ZXN0KTtcclxuICAgIC8vY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoc2xpZGUudGVzdC5hbnN3ZXI/Lm1hdGNoaW5nLCBudWxsLCAyKSlcclxufVxyXG5cclxuY29uc3QgaWNkdF9SdW5fVGVzdF9NYXRjaGluZ19DbGVhciA9IChub2RlOiBpY2R0X0lEYXRhTm9kZSwgc2xpZGU6IGljZHRfSURhdGFTbGlkZSkgPT4ge1xyXG5cclxuICAgIHNsaWRlLnRlc3Q/LmFuc3dlcj8ubWF0Y2hpbmc/LmZpbHRlcihmID0+IGYuaWQgPT0gbm9kZS5pZCkuZm9yRWFjaChmID0+IGYudmFsdWUgPSBcIlwiKTtcclxuXHJcbiAgICAvL1xyXG4gICAgalF1ZXJ5KGAjbm9kZS0ke25vZGUuaWR9YCkucmVtb3ZlKCk7XHJcbn1cclxuXHJcbmNvbnN0IGljZHRfUnVuX1Rlc3RfU3VibWl0ID0gKG5vZGU6IGljZHRfSURhdGFOb2RlLCBzbGlkZTogaWNkdF9JRGF0YVNsaWRlLCBub2RlU3RhdHVzOiBudW1iZXIsIHNsaWRlU3RhdHVzOiBudW1iZXIsIHN1Y2Nlc3M6IEZ1bmN0aW9uKSA9PiB7XHJcblxyXG4gICAgbGV0IGlzY29ycmVjdDtcclxuICAgIC8vdHJ1ZWZhbHNlXHJcbiAgICBpZiAoc2xpZGU/LnRlc3Q/LmFuc3dlcj8udHJ1ZWZhbHNlKSB7XHJcbiAgICAgICAgLy9jw6J1IHRy4bqjIGzhu51pIHRyw7luZyDEkcOhcCDDoW4gxJHDum5nIHNhaVxyXG4gICAgICAgIGlzY29ycmVjdCA9IHNsaWRlPy50ZXN0Py5hbnN3ZXI/LnRydWVmYWxzZT8uaXNjb3JyZWN0O1xyXG4gICAgfVxyXG4gICAgLy9zaW5nbGVjaG9pY2VcclxuICAgIGVsc2UgaWYgKHNsaWRlPy50ZXN0Py5hbnN3ZXI/LnNpbmdsZWNob2ljZSkge1xyXG4gICAgICAgIC8vY8OidSB0cuG6oyBs4budaSB0csO5bmcgxJHDoXAgw6FuIGzhu7FhIGNo4buNbiDEkcahblxyXG4gICAgICAgIGlzY29ycmVjdCA9IHNsaWRlPy50ZXN0Py5hbnN3ZXI/LnNpbmdsZWNob2ljZT8uaXNjb3JyZWN0O1xyXG4gICAgfVxyXG4gICAgLy9tdWx0aWNob2ljZVxyXG4gICAgZWxzZSBpZiAoc2xpZGU/LnRlc3Q/LmFuc3dlcj8ubXVsdGljaG9pY2UpIHtcclxuICAgICAgICAvL2PDonUgdHLhuqMgbOG7nWkgPT0gY8OidSB0cuG6oyBs4budaSDEkcO6bmcgPT0gc+G7kSBsxrDhu6NuZyDEkcOhcCDDoW4gxJHDum5nIMSRYSBs4buxYSBjaOG7jW5cclxuICAgICAgICBpc2NvcnJlY3QgPSBbXHJcbiAgICAgICAgICAgIHNsaWRlPy50ZXN0Py5hbnN3ZXI/Lm11bHRpY2hvaWNlPy5sZW5ndGgsXHJcbiAgICAgICAgICAgIHNsaWRlPy50ZXN0Py5hbnN3ZXI/Lm11bHRpY2hvaWNlPy5tYXAobSA9PiAobS5pc2NvcnJlY3QgPyAxIDogMCkgYXMgbnVtYmVyKT8ucmVkdWNlKChhLCBiKSA9PiBhICsgYiksXHJcbiAgICAgICAgICAgIHNsaWRlPy5zdmc/Lm5vZGVzPy5maWx0ZXIobm9kZSA9PiBub2RlLnNvdXJjZT8udGVzdD8udHlwZSA9PSAnbXVsdGljaG9pY2UnICYmIG5vZGUuc291cmNlPy50ZXN0Py5tdWx0aWNob2ljZT8uaXNjb3JyZWN0KT8ubGVuZ3RoXHJcbiAgICAgICAgXS5maWx0ZXIoKHYsIGksIGEpID0+IGEuaW5kZXhPZih2KSA9PSBpKS5sZW5ndGggPT0gMTtcclxuICAgIH1cclxuICAgIC8vZmlsbFxyXG4gICAgZWxzZSBpZiAoc2xpZGU/LnRlc3Q/LmFuc3dlcj8uZmlsbCkge1xyXG4gICAgICAgIC8vY8OidSB0cuG6oyBs4budaSDEkcO6bmcgdHLDuW5nIHPhu5EgbMaw4bujbmcgxJHDoXAgw6FuIMSRaeG7gW4ga2h1eeG6v3RcclxuICAgICAgICBpc2NvcnJlY3QgPSBzbGlkZT8udGVzdD8uYW5zd2VyPy5maWxsPy5tYXAobSA9PiAobS5pc2NvcnJlY3QgPyAxIDogMCkgYXMgbnVtYmVyKT8ucmVkdWNlKChhLCBiKSA9PiBhICsgYikgPT0gc2xpZGUuc3ZnPy5ub2Rlcz8uZmlsdGVyKG5vZGUgPT4gbm9kZS5zb3VyY2U/LnRlc3Q/LnR5cGUgPT0gJ2ZpbGwnKT8ubGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgLy9tYXRjaGluZ1xyXG4gICAgZWxzZSBpZiAoc2xpZGU/LnRlc3Q/LmFuc3dlcj8ubWF0Y2hpbmcpIHtcclxuICAgICAgICAvL3Phu5EgY8OidSB0cuG6oyBs4budaSDEkcO6bmcgYuG6sW5nIHPhu5EgbMaw4bujbmcgY8OidSBnaMOpcCDEkcO0aVxyXG4gICAgICAgIGlzY29ycmVjdCA9IHNsaWRlLnN2Zz8ubm9kZXM/LmZpbHRlcihub2RlID0+IG5vZGUuc291cmNlPy50ZXN0Py50eXBlID09ICdtYXRjaGluZy1lbXB0eScpPy5sZW5ndGggPT0gKHNsaWRlPy50ZXN0Py5hbnN3ZXI/Lm1hdGNoaW5nIHx8IFtdKS5tYXAobSA9PiAobS5rZXkgPT0gbS52YWx1ZSA/IDEgOiAwKSBhcyBudW1iZXIpLnJlZHVjZSgoYSwgYikgPT4gYSArIGIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vXHJcbiAgICBpY2R0X1J1bl9UZXN0X05vdGlmeUFuc3dlclJlc3VsdChub2RlLCBzbGlkZSwgbm9kZVN0YXR1cywgc2xpZGVTdGF0dXMsIHsgaXNjb3JyZWN0IH0sIHN1Y2Nlc3MpO1xyXG5cclxuICAgIC8vXHJcbiAgICBjb25zb2xlLmxvZygnbm9kZSBzb3VyY2UgLT4nLCBub2RlLnNvdXJjZSk7XHJcbiAgICBjb25zb2xlLmxvZygnc2xpZGUgdGVzdCAtPicsIHNsaWRlLnRlc3QpO1xyXG59XHJcblxyXG5jb25zdCBpY2R0X1J1bl9UZXN0X05vdGlmeUFuc3dlclJlc3VsdCA9IChub2RlOiBpY2R0X0lEYXRhTm9kZSwgc2xpZGU6IGljZHRfSURhdGFTbGlkZSwgbm9kZVN0YXR1czogbnVtYmVyLCBzbGlkZVN0YXR1czogbnVtYmVyLCBvcHRpb25zOiB7IGlzY29ycmVjdD86IGJvb2xlYW4gfSwgc3VjY2VzczogRnVuY3Rpb24pID0+IHtcclxuICAgIGlmIChvcHRpb25zLmlzY29ycmVjdCkge1xyXG4gICAgICAgIGlmIChzbGlkZS50ZXN0Py5hdWRpb3RydWU/LnBhdGgpIHtcclxuICAgICAgICAgICAgaWNkdF9SdW5fVGVzdF9Ob3RpZnlfU291bmQobm9kZSwgeyBzb3VyY2U6IGV4dHJhY3RTb3VyY2VWMShzbGlkZS50ZXN0Py5hdWRpb3RydWUpLCBpdGVyYXRpb246IDAsIG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzIH0sIHN1Y2Nlc3MpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNsaWRlLnRlc3Q/Lmljb250cnVlPy5wYXRoKSB7XHJcbiAgICAgICAgICAgIGljZHRfUnVuX1Rlc3RfTm90aWZ5X0ljb24obm9kZSwgeyBzb3VyY2U6IGV4dHJhY3RTb3VyY2VWMShzbGlkZS50ZXN0Py5pY29udHJ1ZSksIGl0ZXJhdGlvbjogMCwgbm9kZVN0YXR1cywgc2xpZGVTdGF0dXMgfSwgc3VjY2Vzcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2xpZGUudGVzdD8uZWZmZWN0dHJ1ZT8ucGF0aCkge1xyXG4gICAgICAgICAgICBpY2R0X1J1bl9UZXN0X05vdGlmeV9FZmZlY3Qobm9kZSwgeyBzb3VyY2U6IGV4dHJhY3RTb3VyY2VWMShzbGlkZS50ZXN0Py5lZmZlY3R0cnVlKSwgaXRlcmF0aW9uOiAwLCBub2RlU3RhdHVzLCBzbGlkZVN0YXR1cyB9LCBzdWNjZXNzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoc2xpZGUudGVzdD8uYXVkaW9mYWxzZT8ucGF0aCkge1xyXG4gICAgICAgICAgICBpY2R0X1J1bl9UZXN0X05vdGlmeV9Tb3VuZChub2RlLCB7IHNvdXJjZTogZXh0cmFjdFNvdXJjZVYxKHNsaWRlLnRlc3Q/LmF1ZGlvZmFsc2UpLCBpdGVyYXRpb246IDAsIG5vZGVTdGF0dXMsIHNsaWRlU3RhdHVzIH0sIHN1Y2Nlc3MpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNsaWRlLnRlc3Q/Lmljb25mYWxzZT8ucGF0aCkge1xyXG4gICAgICAgICAgICBpY2R0X1J1bl9UZXN0X05vdGlmeV9JY29uKG5vZGUsIHsgc291cmNlOiBleHRyYWN0U291cmNlVjEoc2xpZGUudGVzdD8uaWNvbmZhbHNlKSwgaXRlcmF0aW9uOiAwLCBub2RlU3RhdHVzLCBzbGlkZVN0YXR1cyB9LCBzdWNjZXNzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzbGlkZS50ZXN0Py5lZmZlY3RmYWxzZT8ucGF0aCkge1xyXG4gICAgICAgICAgICBpY2R0X1J1bl9UZXN0X05vdGlmeV9FZmZlY3Qobm9kZSwgeyBzb3VyY2U6IGV4dHJhY3RTb3VyY2VWMShzbGlkZS50ZXN0Py5lZmZlY3RmYWxzZSksIGl0ZXJhdGlvbjogMCwgbm9kZVN0YXR1cywgc2xpZGVTdGF0dXMgfSwgc3VjY2Vzcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgVl9TaGFwZVR5cGUgfSBmcm9tIFwiLi4vLi4vLi4vbG9va3VwL1ZfU2hhcGVUeXBlXCI7XHJcbmltcG9ydCB7IGljZHQgfSBmcm9tIFwiLi4vLi4vLi4vcHJvdG90eXBlL2ljZHRcIjtcclxuaW1wb3J0IHsgaWNkdF9TdmdUZXh0IH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudC9zaGFwZS9zdmcvdGV4dC9zdmctdGV4dFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z0dyb3VwIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudC9zaGFwZS9zdmcvZ3JvdXAvc3ZnLWdyb3VwXCI7XHJcbmltcG9ydCB7IGljZHRfSURhdGFOb2RlLCBpY2R0X0lEYXRhU2xpZGUgfSBmcm9tIFwiLi4vLi4vLi4vaW50ZXJmYWNlL0lEYXRhU291cmNlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9SdW5fVmFyaWFibGVfTm9kZUNsaWNrID0gKG5vZGU6IGljZHRfSURhdGFOb2RlLCBzbGlkZTogaWNkdF9JRGF0YVNsaWRlKSA9PiB7XHJcblxyXG4gICAgbGV0IHN1Y2Nlc3MgPSAoKSA9PiB7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhgSW50ZXJhY3RpdmVOb2RlICMke25vZGUuaWR9IHN1Y2Nlc3MhYCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qXHJcbiAgICAgICAgdmFyaWFibGU/OiBzdHJpbmc7XHJcbiAgICAgICAgb3BlcmF0b3I/OiBzdHJpbmc7ICAgICAvLysgLSAqIC8gPVxyXG4gICAgICAgIHZhbHVldHlwZT86IHN0cmluZzsgICAgLy92YXJpYWJsZSwgdmFsdWVcclxuICAgICAgICB2YWx1ZT86IHN0cmluZzsgICAgICAgIC8vbnVtYmVyLCBzdHJpbmcsIHZhcmlhYmxlXHJcbiAgICovXHJcblxyXG4gICAgLy9cclxuICAgIGljZHQudmFyaWFibGUuc2V0VmFsdWVPcGVyYXRvcihub2RlLnZhcmlhYmxlPy5jbGljayk7XHJcblxyXG4gICAgLy9yZW5kZXIgbm9kZSB0ZXh0IGFuZCBodG1sXHJcbiAgICBSZW5kZXJTbGlkZShzbGlkZSk7XHJcblxyXG59XHJcblxyXG5jb25zdCBSZW5kZXJTbGlkZSA9IChzbGlkZTogaWNkdF9JRGF0YVNsaWRlKSA9PiB7XHJcbiAgICBsZXQgcmVjdXJzaXZlTm9kZSA9IChub2Rlcz86IEFycmF5PGljZHRfSURhdGFOb2RlPiwgcElkPzogbnVtYmVyKSA9PiB7XHJcblxyXG4gICAgICAgIG5vZGVzPy5mb3JFYWNoKG5vZGUgPT4ge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBWX1NoYXBlVHlwZS5HUk9VUDoge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpY2R0X1N2Z0dyb3VwKG5vZGUuaWQsIHt9LCBwSWQgPyAod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocElkKSA6IG51bGwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL8SR4buHIHF1eSwgdMOsbSBraeG6v20gbeG6pXkgdGjhurFuZyDEkeG7h1xyXG4gICAgICAgICAgICAgICAgICAgIHJlY3Vyc2l2ZU5vZGUobm9kZS5ub2Rlcywgbm9kZS5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLlBPTFlHT046IHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgVl9TaGFwZVR5cGUuVEVYVDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGljZHRfU3ZnVGV4dChub2RlLmlkLCB7IHNpemU6IG5vZGUuc2l6ZSwgYXR0cmlidXRlOiBub2RlLmF0dHJpYnV0ZSwgc291cmNlOiBub2RlLnNvdXJjZSB9LCBwSWQgPyAod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocElkKSA6IG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVjdXJzaXZlTm9kZShzbGlkZS5zdmc/Lm5vZGVzKTtcclxufVxyXG4iLCJpbXBvcnQgeyBWX1NoYXBlVHlwZSB9IGZyb20gXCIuLi8uLi8uLi9sb29rdXAvVl9TaGFwZVR5cGVcIjtcclxuaW1wb3J0IHsgaWNkdCB9IGZyb20gXCIuLi8uLi8uLi9wcm90b3R5cGUvaWNkdFwiO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z1RleHQgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50L3NoYXBlL3N2Zy90ZXh0L3N2Zy10ZXh0XCI7XHJcbmltcG9ydCB7IGljZHRfU3ZnR3JvdXAgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50L3NoYXBlL3N2Zy9ncm91cC9zdmctZ3JvdXBcIjtcclxuaW1wb3J0IHsgaWNkdF9JRGF0YU5vZGUsIGljZHRfSURhdGFTbGlkZSB9IGZyb20gXCIuLi8uLi8uLi9pbnRlcmZhY2UvSURhdGFTb3VyY2VcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X1J1bl9WYXJpYWJsZV9Ob2RlSW5wdXQgPSAodmFsdWU6IHN0cmluZywgbm9kZTogaWNkdF9JRGF0YU5vZGUsIHNsaWRlOiBpY2R0X0lEYXRhU2xpZGUpID0+IHtcclxuXHJcbiAgICBsZXQgc3VjY2VzcyA9ICgpID0+IHtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKGBJbnRlcmFjdGl2ZU5vZGUgIyR7bm9kZS5pZH0gc3VjY2VzcyFgKTtcclxuICAgIH07XHJcblxyXG4gICAgLypcclxuICAgICAgICB2YXJpYWJsZT86IHN0cmluZztcclxuICAgKi9cclxuXHJcbiAgICAvL1xyXG4gICAgaWNkdC52YXJpYWJsZS5zZXRWYWx1ZShub2RlLnZhcmlhYmxlPy5pbnB1dD8udmFyaWFibGUgPz8gXCJcIiwgdmFsdWUpO1xyXG5cclxuICAgIC8vcmVuZGVyIG5vZGUgdGV4dCBhbmQgaHRtbFxyXG4gICAgUmVuZGVyU2xpZGUoc2xpZGUpO1xyXG5cclxufVxyXG5cclxuY29uc3QgUmVuZGVyU2xpZGUgPSAoc2xpZGU6IGljZHRfSURhdGFTbGlkZSkgPT4ge1xyXG4gICAgbGV0IHJlY3Vyc2l2ZU5vZGUgPSAobm9kZXM/OiBBcnJheTxpY2R0X0lEYXRhTm9kZT4sIHBJZD86IG51bWJlcikgPT4ge1xyXG5cclxuICAgICAgICBub2Rlcz8uZm9yRWFjaChub2RlID0+IHtcclxuICAgICAgICAgICAgc3dpdGNoIChub2RlLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgVl9TaGFwZVR5cGUuR1JPVVA6IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdF9TdmdHcm91cChub2RlLmlkLCB7fSwgcElkID8gKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBJZCkgOiBudWxsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy/EkeG7hyBxdXksIHTDrG0ga2nhur9tIG3huqV5IHRo4bqxbmcgxJHhu4dcclxuICAgICAgICAgICAgICAgICAgICByZWN1cnNpdmVOb2RlKG5vZGUubm9kZXMsIG5vZGUuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBWX1NoYXBlVHlwZS5QT0xZR09OOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIFZfU2hhcGVUeXBlLlRFWFQ6IHtcclxuICAgICAgICAgICAgICAgICAgICBpY2R0X1N2Z1RleHQobm9kZS5pZCwgeyBzaXplOiBub2RlLnNpemUsIGF0dHJpYnV0ZTogbm9kZS5hdHRyaWJ1dGUsIHNvdXJjZTogbm9kZS5zb3VyY2UgfSwgcElkID8gKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBJZCkgOiBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlY3Vyc2l2ZU5vZGUoc2xpZGUuc3ZnPy5ub2Rlcyk7XHJcbn1cclxuIiwiaW1wb3J0IHsgVl9TaGFwZVR5cGUgfSBmcm9tICcuLi8uLi9sb29rdXAvVl9TaGFwZVR5cGUnO1xyXG5pbXBvcnQgeyBWX0lEIH0gZnJvbSAnLi4vLi4vbG9va3VwL1ZfSUQnO1xyXG5pbXBvcnQgeyBsaWJfaGV4MnJnYmEgfSBmcm9tICcuLi8uLi9saWIvaGV4MnJiZ2EnO1xyXG5pbXBvcnQgeyBnZXRNZWRpYVZpZXdlclVybCB9IGZyb20gJy4vdWknO1xyXG5pbXBvcnQgeyBzdmdDcmVhdGVfUmVjdENlbnRlckF0dHJpYnV0ZSwgc3ZnRGVzaWduX0xpbmVBdHRyaWJ1dGUsIHN2Z0Rlc2lnbl9SZWN0QXR0cmlidXRlLCBzdmdEZXNpZ25fUmVjdENlbnRlckF0dHJpYnV0ZSwgc3ZnSW50ZXJhY3RpdmVfTGluZUF0dHJpYnV0ZSwgc3ZnSW50ZXJhY3RpdmVfUmVjdENlbnRlckF0dHJpYnV0ZSwgc3ZnU2VsZWN0X1JlY3ROb2RlQXR0cmlidXRlLCBzdmdTZXRJZHhfUmVjdE5vZGVBdHRyaWJ1dGUgfSBmcm9tICcuLi8uLi9kZWZpbmUvc3ZnLWRlc2lnbic7XHJcbmltcG9ydCB7IGljZHQgfSBmcm9tICcuLi8uLi9wcm90b3R5cGUvaWNkdCc7XHJcbmltcG9ydCB7IGljZHRfSURhdGFOb2RlLCBpY2R0X0lEYXRhTm9kZUF0dHJpYnV0ZSwgaWNkdF9JRGF0YU5vZGVTaXplLCBpY2R0X0lEYXRhTm9kZVNvdXJjZSwgaWNkdF9JRGF0YU5vZGVTdHlsZSwgaWNkdF9JRGF0YVNsaWRlLCBpY2R0X0lEYXRhU3ZnIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlL0lEYXRhU291cmNlJztcclxuaW1wb3J0IHsgaWNkdF9TY2FsZU51bWJlciB9IGZyb20gJy4uL2hhbmRsZS9zY2FsZS1udW1iZXInO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z1JlY3QgfSBmcm9tICcuLi9jb21wb25lbnQvc2hhcGUvc3ZnL3JlY3Qvc3ZnLXJlY3QnO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z0ltYWdlIH0gZnJvbSAnLi4vY29tcG9uZW50L3NoYXBlL3N2Zy9pbWFnZS9zdmctaW1hZ2UnO1xyXG5pbXBvcnQgeyBpY2R0X1N2Z0NpcmNsZSB9IGZyb20gJy4uL2NvbXBvbmVudC9zaGFwZS9zdmcvY2lyY2xlL3N2Zy1jaXJjbGUnO1xyXG5pbXBvcnQgeyBpY2R0X1J1biB9IGZyb20gJy4uL3J1bic7XHJcbmltcG9ydCB7IGljZHRfU3ZnRm9yZWlnbk9iamVjdCB9IGZyb20gJy4uL2NvbXBvbmVudC9zaGFwZS9zdmcvZm9yZWlnbm9iamVjdC9zdmctZm9yZWlnbm9iamVjdCc7XHJcbmltcG9ydCB7IGljZHRfU3ZnVGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudC9zaGFwZS9zdmcvdGV4dC9zdmctdGV4dCc7XHJcblxyXG5leHBvcnQgY2xhc3MgaWNkdF9Tdmcge1xyXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVySWQ6IHN0cmluZywgc3ZnSWQ6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBzdmdFbGVtZW50ID0gd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc3ZnSWQpIGFzIFNWR0VsZW1lbnQ7XHJcblxyXG4gICAgICAgIGlmICghc3ZnRWxlbWVudCkge1xyXG4gICAgICAgICAgICBzdmdFbGVtZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJyk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcklkKT8uYXBwZW5kQ2hpbGQoc3ZnRWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgeyBzdmdWaWV3Qm94LCBzdmdTaXplIH0gPSBpY2R0LnNjcmVlbi5pbml0KCk7XHJcblxyXG4gICAgICAgIHN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ2aWV3Qm94XCIsIGAke3N2Z1ZpZXdCb3gueH0gJHtzdmdWaWV3Qm94Lnl9ICR7c3ZnVmlld0JveC53aWR0aH0gJHtzdmdWaWV3Qm94LmhlaWdodH1gKTtcclxuICAgICAgICBzdmdFbGVtZW50LnNldEF0dHJpYnV0ZShcImlkXCIsIHN2Z0lkLnJlcGxhY2UoJyMnLCAnJykpO1xyXG4gICAgICAgIHN2Z0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgLy9zdmdFbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgICAgICAvL3N2Z0VsZW1lbnQuc3R5bGUubGVmdCA9IGAke3N2Z1NpemUueH1weGA7XHJcbiAgICAgICAgLy9zdmdFbGVtZW50LnN0eWxlLnRvcCA9IGAke3N2Z1NpemUueX1weGA7XHJcbiAgICAgICAgc3ZnRWxlbWVudC5zdHlsZS53aWR0aCA9IGAke3N2Z1NpemUud2lkdGh9cHhgO1xyXG4gICAgICAgIHN2Z0VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gYCR7c3ZnU2l6ZS5oZWlnaHR9cHhgO1xyXG4gICAgICAgIHN2Z0VsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyNmYWZhZmEnO1xyXG4gICAgICAgIHN2Z0VsZW1lbnQuc3R5bGUuY3Vyc29yID0gJ2RlZmF1bHQnO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9TeW5jU3ZnQmFja2dyb3VuZCA9IChzbGlkZT86IGljZHRfSURhdGFTbGlkZSkgPT4ge1xyXG4gICAgalF1ZXJ5KGljZHQudGFyZ2V0KS5maW5kKCcjJyArIFZfSUQuQkFDS0dST1VORF9HUk9VUCkuZW1wdHkoKTtcclxuICAgIGxldCBlbGVHcm91cCA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKFZfSUQuQkFDS0dST1VORF9HUk9VUCwgJ2cnLCB1bmRlZmluZWQsIGljZHQudGFyZ2V0KTtcclxuICAgIHN5bmNCYWNrZ3JvdW5kKGVsZUdyb3VwLCBzbGlkZSk7XHJcblxyXG4gICAgKCgpID0+IHtcclxuICAgICAgICBsZXQgcE5vZGUgPSAod2luZG93IGFzIGFueSkuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2xpZGU/LmlkKTtcclxuICAgICAgICBqUXVlcnkocE5vZGUpLmZpbmQoJyMnICsgVl9JRC5CQUNLR1JPVU5EX0dST1VQKS5lbXB0eSgpO1xyXG4gICAgICAgIGxldCBlbGVHcm91cCA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKFZfSUQuQkFDS0dST1VORF9HUk9VUCwgJ2cnLCB1bmRlZmluZWQsIHBOb2RlKTtcclxuICAgICAgICBzeW5jQmFja2dyb3VuZChlbGVHcm91cCwgc2xpZGUpO1xyXG4gICAgfSkoKVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9TeW5jU3ZnU3R5bGUgPSAoKSA9PiB7XHJcblxyXG4gICAgbGV0IHN2Z1ZpZXdCb3ggPSBpY2R0LnNjcmVlbi5zdmdWaWV3Qm94O1xyXG4gICAgbGV0IHN2Z1NpemUgPSBpY2R0LnNjcmVlbi5zdmdTaXplO1xyXG5cclxuICAgIGlmIChpY2R0LnRhcmdldCkge1xyXG4gICAgICAgIGljZHQudGFyZ2V0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwidmlld0JveFwiLCBgJHtzdmdWaWV3Qm94Lnh9ICR7c3ZnVmlld0JveC55fSAke3N2Z1ZpZXdCb3gud2lkdGh9ICR7c3ZnVmlld0JveC5oZWlnaHR9YCk7XHJcbiAgICAgICAgaWNkdC50YXJnZXQuc3R5bGUubGVmdCA9IGAke3N2Z1NpemUueH1weGA7XHJcbiAgICAgICAgaWNkdC50YXJnZXQuc3R5bGUudG9wID0gYCR7c3ZnU2l6ZS55fXB4YDtcclxuICAgICAgICBpY2R0LnRhcmdldC5zdHlsZS53aWR0aCA9IGAke3N2Z1NpemUud2lkdGh9cHhgO1xyXG4gICAgICAgIGljZHQudGFyZ2V0LnN0eWxlLmhlaWdodCA9IGAke3N2Z1NpemUuaGVpZ2h0fXB4YDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfU3ZnUmVuZXcgPSAoKSA9PiB7XHJcbiAgICAvL2pRdWVyeShpY2R0LnRhcmdldCkuZW1wdHkoKTtcclxuICAgIGpRdWVyeShpY2R0LnRhcmdldCkuZmluZCgnPio6bm90KGRlZnMpJykucmVtb3ZlKCk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X1N5bmNTdmdOb2RlID0gKG5vZGVJZD86IG51bWJlciB8IHN0cmluZywgbm9kZVR5cGU/OiBudW1iZXIsIG5vZGVOYW1lPzogc3RyaW5nLCBvcHRpb25zPzogeyBzaXplPzogaWNkdF9JRGF0YU5vZGVTaXplLCBhdHRyaWJ1dGU/OiBpY2R0X0lEYXRhTm9kZUF0dHJpYnV0ZSwgc3R5bGU/OiBpY2R0X0lEYXRhTm9kZVN0eWxlLCBzb3VyY2U/OiBpY2R0X0lEYXRhTm9kZVNvdXJjZSB9LCBub2RlUD86IGFueSkgPT4ge1xyXG4gICAgbGV0IGVsZW1lbnQ7XHJcblxyXG4gICAgaWYgKG5vZGVJZCkge1xyXG4gICAgICAgIGVsZW1lbnQgPSBqUXVlcnkobm9kZVAgfHwgaWNkdC50YXJnZXQpLmZpbmQoJyMnICsgbm9kZUlkKS5nZXQoMCkgYXMgYW55O1xyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICBlbGVtZW50ID0gKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIG5vZGVOYW1lKTtcclxuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgbm9kZUlkKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChub2RlVHlwZSA9PSBWX1NoYXBlVHlwZS5GT1JFSUdOT0JKRUNUKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgneG1sbnM6aHRtbCcsICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGpRdWVyeShlbGVtZW50KS5hcHBlbmRUbyhub2RlUCB8fCBpY2R0LnRhcmdldCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZWxlbWVudCA9ICh3aW5kb3cgYXMgYW55KS5kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBub2RlTmFtZSk7XHJcbiAgICAgICAgalF1ZXJ5KGVsZW1lbnQpLmFwcGVuZFRvKG5vZGVQIHx8IGljZHQudGFyZ2V0KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAob3B0aW9ucz8uYXR0cmlidXRlKSB7XHJcbiAgICAgICAgaWNkdF9TeW5jU3ZnTm9kZUF0dHJpYnV0ZShlbGVtZW50LCBvcHRpb25zPy5hdHRyaWJ1dGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRpb25zPy5zdHlsZSkge1xyXG4gICAgICAgIGljZHRfU3luY1N2Z05vZGVTdHlsZShlbGVtZW50LCBvcHRpb25zPy5zdHlsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdGlvbnM/LnNvdXJjZSkge1xyXG4gICAgICAgIGljZHRfU3luY1N2Z05vZGVTb3VyY2UoZWxlbWVudCwgbm9kZVR5cGUsIG9wdGlvbnM/LnNvdXJjZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGVsZW1lbnQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpY2R0X1N5bmNTdmdOb2RlQXR0cmlidXRlID0gKGVsZW1lbnQ6IGFueSwgb3B0aW9ucz86IGljZHRfSURhdGFOb2RlQXR0cmlidXRlKSA9PiB7XHJcblxyXG4gICAgalF1ZXJ5KGVsZW1lbnQpLmF0dHIoKChhdHRyaWJ1dGU6IGFueSkgPT4ge1xyXG5cclxuICAgICAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGUpPy5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiZmlsbFwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiZmlsbFJ1bGVcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCB7IFwiZmlsbC1ydWxlXCI6IGF0dHJpYnV0ZS5maWxsUnVsZSA/PyBudWxsLCBmaWxsUnVsZTogbnVsbCB9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgXCJzdHJva2VcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCB7IFwic3Ryb2tlLXdpZHRoXCI6IGF0dHJpYnV0ZS5zdHJva2VXaWR0aCA/PyBudWxsLCBzdHJva2VXaWR0aDogbnVsbCB9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgXCJzdHJva2VMaW5lY2FwXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGF0dHJpYnV0ZSwgeyBcInN0cm9rZS1saW5lY2FwXCI6IGF0dHJpYnV0ZS5zdHJva2VMaW5lY2FwID8/IG51bGwsIHN0cm9rZUxpbmVjYXA6IG51bGwgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwic3Ryb2tlTGluZWpvaW5cIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCB7IFwic3Ryb2tlLWxpbmVqb2luXCI6IGF0dHJpYnV0ZS5zdHJva2VMaW5lam9pbiA/PyBudWxsLCBzdHJva2VMaW5lam9pbjogbnVsbCB9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgXCJzdHJva2VNaXRlcmxpbWl0XCI6IHtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGF0dHJpYnV0ZSwgeyBcInN0cm9rZS1taXRlcmxpbWl0XCI6IGF0dHJpYnV0ZS5zdHJva2VNaXRlcmxpbWl0ID8/IG51bGwsIHN0cm9rZU1pdGVybGltaXQ6IG51bGwgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwic3Ryb2tlRGFzaGFycmF5XCI6IHtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGF0dHJpYnV0ZSwgeyBcInN0cm9rZS1kYXNoYXJyYXlcIjogYXR0cmlidXRlLnN0cm9rZURhc2hhcnJheSA/PyBudWxsLCBzdHJva2VEYXNoYXJyYXk6IG51bGwgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwic3Ryb2tlRGFzaGFycmF5c1wiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIHsgXCJzdHJva2UtZGFzaGFycmF5XCI6IGF0dHJpYnV0ZS5zdHJva2VEYXNoYXJyYXlzPy5qb2luKCcgJykgPz8gbnVsbCwgc3Ryb2tlRGFzaGFycmF5czogbnVsbCB9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgXCJmb250RmFtaWx5XCI6IHtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGF0dHJpYnV0ZSwgeyBcImZvbnQtZmFtaWx5XCI6IGF0dHJpYnV0ZS5mb250RmFtaWx5ID8/IG51bGwsIGZvbnRGYW1pbHk6IG51bGwgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiZm9udFdlaWdodFwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIHsgXCJmb250LXdlaWdodFwiOiBhdHRyaWJ1dGUuZm9udFdlaWdodCA/PyBudWxsLCBmb250V2VpZ2h0OiBudWxsIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBcImZvbnRTaXplXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGF0dHJpYnV0ZSwgeyBcImZvbnQtc2l6ZVwiOiBhdHRyaWJ1dGUuZm9udFNpemUgPz8gbnVsbCwgZm9udFNpemU6IG51bGwgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwidGV4dExlbmd0aFwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGUsIHsgXCJ0ZXh0TGVuZ3RoXCI6IGF0dHJpYnV0ZS50ZXh0TGVuZ3RoID8gYCR7YXR0cmlidXRlLnRleHRMZW5ndGh9cHhgIDogbnVsbCB9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgXCJ0cmFuc2Zvcm1PcmlnaW5cIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlLCB7IFwidHJhbnNmb3JtLW9yaWdpblwiOiBhdHRyaWJ1dGUudHJhbnNmb3JtT3JpZ2luID8/IG51bGwsIHRyYW5zZm9ybU9yaWdpbjogbnVsbCB9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgYXR0cmlidXRlID8/IHt9LCB7XHJcbiAgICAgICAgICAgIGZpbGw6IGF0dHJpYnV0ZT8uZmlsbCA/IGxpYl9oZXgycmdiYShhdHRyaWJ1dGUuZmlsbCwgYXR0cmlidXRlPy5maWxsT3BhY2l0eSA/PyAxKSA6ICdyZ2JhKDAsMCwwLDApJyxcclxuICAgICAgICAgICAgZmlsbE9wYWNpdHk6IG51bGwsXHJcbiAgICAgICAgICAgIHN0cm9rZTogYXR0cmlidXRlPy5zdHJva2UgPyBsaWJfaGV4MnJnYmEoYXR0cmlidXRlLnN0cm9rZSwgYXR0cmlidXRlPy5zdHJva2VPcGFjaXR5ID8/IDEpIDogJ3JnYmEoMCwwLDAsMCknLFxyXG4gICAgICAgICAgICBzdHJva2VPcGFjaXR5OiBudWxsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfSkoT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyB8fCB7fSkpKTtcclxuXHJcbiAgICByZXR1cm4gZWxlbWVudDtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfU3luY1N2Z05vZGVTdHlsZSA9IChlbGVtZW50OiBhbnksIG9wdGlvbnM/OiBpY2R0X0lEYXRhTm9kZVN0eWxlKSA9PiB7XHJcblxyXG4gICAgalF1ZXJ5KGVsZW1lbnQpLmNzcygoKHN0eWxlOiBhbnkpID0+IHtcclxuXHJcbiAgICAgICAgT2JqZWN0LmtleXMoc3R5bGUpPy5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwicGFkZGluZ1wiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzdHlsZSwgeyBcInBhZGRpbmdcIjogc3R5bGUucGFkZGluZyA/IGAke3N0eWxlLnBhZGRpbmd9cHhgIDogbnVsbCB9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgXCJib3JkZXJXaWR0aFwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlLmJvcmRlcldpZHRoICYmIHN0eWxlLmJvcmRlckNvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3R5bGUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYm9yZGVyLXdpZHRoXCI6IGAke3N0eWxlLmJvcmRlcldpZHRofXB4YCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYm9yZGVyLXN0eWxlXCI6IHN0eWxlLmJvcmRlclN0eWxlIHx8ICdzb2xpZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJvcmRlci1jb2xvclwiOiBsaWJfaGV4MnJnYmEoc3R5bGUuYm9yZGVyQ29sb3IsIHN0eWxlLmJvcmRlck9wYWNpdHkgPz8gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHN0eWxlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJvcmRlci13aWR0aFwiOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYm9yZGVyLXN0eWxlXCI6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJib3JkZXItY29sb3JcIjogJydcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3R5bGUsIHsgYm9yZGVyV2lkdGg6IG51bGwsIGJvcmRlclN0eWxlOiBudWxsLCBib3JkZXJDb2xvcjogbnVsbCwgYm9yZGVyT3BhY2l0eTogbnVsbCB9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgXCJib3JkZXJSYWRpdXNcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3R5bGUsIHsgXCJib3JkZXItcmFkaXVzXCI6IHN0eWxlLmJvcmRlclJhZGl1cyA/IGAke3N0eWxlLmJvcmRlclJhZGl1c31weGAgOiBudWxsLCBib3JkZXJSYWRpdXM6IG51bGwgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiYmFja2dyb3VuZENvbG9yXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGUuYmFja2dyb3VuZENvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3R5bGUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBsaWJfaGV4MnJnYmEoc3R5bGUuYmFja2dyb3VuZENvbG9yLCBzdHlsZS5iYWNrZ3JvdW5kT3BhY2l0eSA/PyAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3R5bGUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiAnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzdHlsZSwgeyBiYWNrZ3JvdW5kQ29sb3I6IG51bGwsIGJhY2tncm91bmRPcGFjaXR5OiBudWxsIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBzdHlsZTtcclxuXHJcbiAgICB9KShPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zIHx8IHt9KSkpO1xyXG5cclxuICAgIHJldHVybiBlbGVtZW50O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9TeW5jU3ZnTm9kZVNvdXJjZSA9IChlbGVtZW50OiBhbnksIHR5cGU/OiBudW1iZXIsIHNvdXJjZT86IGljZHRfSURhdGFOb2RlU291cmNlKSA9PiB7XHJcbiAgICAvL2NvbnNvbGUubG9nKGVsZW1lbnQsIHR5cGUsIHNvdXJjZSk7XHJcblxyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgY2FzZSBWX1NoYXBlVHlwZS5URVhUOiB7XHJcbiAgICAgICAgICAgIGpRdWVyeShlbGVtZW50KS50ZXh0KHNvdXJjZT8udGV4dD8udGV4dENvbnRlbnQgPz8gJycpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBWX1NoYXBlVHlwZS5JTUFHRToge1xyXG4gICAgICAgICAgICBqUXVlcnkoZWxlbWVudCkuYXR0cignaHJlZicsIHNvdXJjZT8uaW1hZ2U/LmJhc2U2NCB8fCAoc291cmNlPy5pbWFnZT8ucGF0aCA/IGljZHQuY29uZmlnPy5yZWFkZmlsZXVwbG9hZHVybCArIHNvdXJjZT8uaW1hZ2U/LnBhdGggOiBzb3VyY2U/LmltYWdlPy51cmwpIHx8ICcnKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgVl9TaGFwZVR5cGUuRk9SRUlHTk9CSkVDVDoge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHNvdXJjZT8udHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAndGV4dCc6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlLnRleHQ/LnZhcmlhYmxlS2V5d29yZHMgJiYgc291cmNlLnRleHQ/LnZhcmlhYmxlS2V5d29yZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBrZXlzID0gaWNkdC52YXJpYWJsZS5nZXRLZXlzKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gc291cmNlLnRleHQ/LnRleHRDb250ZW50IHx8ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLnRleHQudmFyaWFibGVLZXl3b3Jkcy5mb3JFYWNoKGtleXdvcmQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXdvcmQucmVwbGFjZSgvW15hLXpBLVowLTlfXS9nbSwgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleXMuaW5kZXhPZihrZXkpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudFZhcmlhYmxlID0gaWNkdC52YXJpYWJsZS5nZXRWYWx1ZShrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2Uoa2V5d29yZCwgY29udGVudFZhcmlhYmxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkoZWxlbWVudCkudGV4dChjb250ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeShlbGVtZW50KS50ZXh0KHNvdXJjZS50ZXh0Py50ZXh0Q29udGVudCB8fCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnaHRtbCc6IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaHRtbENvbnRlbnQgPSBzb3VyY2U/Lmh0bWw/Lmh0bWxDb250ZW50IHx8ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlLmh0bWw/LnZhcmlhYmxlS2V5d29yZHMgJiYgc291cmNlLmh0bWw/LnZhcmlhYmxlS2V5d29yZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBrZXlzID0gaWNkdC52YXJpYWJsZS5nZXRLZXlzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UuaHRtbC52YXJpYWJsZUtleXdvcmRzLmZvckVhY2goa2V5d29yZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5d29yZC5yZXBsYWNlKC9bXmEtekEtWjAtOV9dL2dtLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5cy5pbmRleE9mKGtleSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50VmFyaWFibGUgPSBpY2R0LnZhcmlhYmxlLmdldFZhbHVlKGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbENvbnRlbnQgPSBodG1sQ29udGVudC5yZXBsYWNlKGtleXdvcmQsIGNvbnRlbnRWYXJpYWJsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KGVsZW1lbnQpLmh0bWwoYDxkaXYgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIgc3R5bGU9XCJ3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2Rpc3BsYXk6YmxvY2s7XCI+JHtodG1sQ29udGVudH08L2Rpdj5gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnaW1nW3BhdGhdLHZpZGVvW3BhdGhdLGlmcmFtZVtwYXRoXScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lYWNoKChpLCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnNldEF0dHJpYnV0ZSgnc3JjJywgKGljZHQuY29uZmlnPy5yZWFkZmlsZXVwbG9hZHVybCA/PyAnJykgKyBlLmdldEF0dHJpYnV0ZSgncGF0aCcpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucmVtb3ZlQXR0cmlidXRlKCdwYXRoJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnaW5wdXQnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZS5pbnB1dD8uaW5wdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KGVsZW1lbnQpLmh0bWwoYDxkaXYgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIgc3R5bGU9XCJ3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2Rpc3BsYXk6YmxvY2s7XCI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCIke3NvdXJjZS5pbnB1dD8ucGxhY2Vob2xkZXIgPz8gJyd9XCIgbWF4bGVuZ3RoPVwiMTAwXCIgLz48L2Rpdj5gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc291cmNlLmlucHV0Py50ZXh0YXJlYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkoZWxlbWVudCkuaHRtbChgPGRpdiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIiBzdHlsZT1cIndpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ZGlzcGxheTpibG9jaztcIj48dGV4dGFyZWEgcGxhY2Vob2xkZXI9XCIke3NvdXJjZS5pbnB1dD8ucGxhY2Vob2xkZXIgPz8gJyd9XCIgbWF4bGVuZ3RoPVwiMTAwMFwiPjwvdGV4dGFyZWE+PC9kaXY+YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnaW1hZ2UnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KGVsZW1lbnQpLmh0bWwoYDxkaXYgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIgc3R5bGU9XCJ3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2Rpc3BsYXk6YmxvY2s7XCI+PGltZyBzcmM9XCIke3NvdXJjZS5pbWFnZT8uYmFzZTY0IHx8IChzb3VyY2UuaW1hZ2U/LnBhdGggPyBpY2R0LmNvbmZpZz8ucmVhZGZpbGV1cGxvYWR1cmwgKyBzb3VyY2UuaW1hZ2U/LnBhdGggOiBzb3VyY2UuaW1hZ2U/LnVybCkgfHwgJyd9XCIgc3R5bGU9XCJ3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2Rpc3BsYXk6YmxvY2s7XCIvPjwvZGl2PmApO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnaWZyYW1lJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGpRdWVyeShlbGVtZW50KS5odG1sKGA8ZGl2IHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiIHN0eWxlPVwid2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtkaXNwbGF5OmJsb2NrO1wiPjxpZnJhbWUgc3JjPVwiJHsoc291cmNlLmlmcmFtZT8ucGF0aCA/IGljZHQuY29uZmlnPy5yZWFkZmlsZXVwbG9hZHVybCArIHNvdXJjZS5pZnJhbWU/LnBhdGggOiBzb3VyY2UuaWZyYW1lPy51cmwpIHx8ICcnfVwiIGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93ZnVsbHNjcmVlblxyXG4gICAgICAgICAgICAgICAgICAgIHdlYmtpdGFsbG93ZnVsbHNjcmVlbiBhbGxvd3RyYW5zcGFyZW5jeT1cInRydWVcIiBhbGxvdz1cImF1dG9wbGF5OyBmdWxsc2NyZWVuXCIgc3R5bGU9XCJ3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2Rpc3BsYXk6YmxvY2s7XCI+PC9pZnJhbWU+PC9kaXY+YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdlbWJlZCc6IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaWZyYW1lU3JjID0gZ2V0TWVkaWFWaWV3ZXJVcmwoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkZmlsZXVwbG9hZHVybDogaWNkdC5jb25maWc/LnJlYWRmaWxldXBsb2FkdXJsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzb3VyY2UuZW1iZWQ/LnR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9zczogc291cmNlLmVtYmVkPy5vc3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IHNvdXJjZS5lbWJlZD8ucGF0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBzb3VyY2UuZW1iZWQ/LnVybCxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KGVsZW1lbnQpLmh0bWwoYDxkaXYgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIgc3R5bGU9XCJ3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2Rpc3BsYXk6YmxvY2s7XCI+PGlmcmFtZSBzcmM9XCIke2lmcmFtZVNyY31cIiBmcmFtZWJvcmRlcj1cIjBcIiBhbGxvd2Z1bGxzY3JlZW5cclxuICAgICAgICAgICAgICAgICAgICB3ZWJraXRhbGxvd2Z1bGxzY3JlZW4gYWxsb3d0cmFuc3BhcmVuY3k9XCJ0cnVlXCIgYWxsb3c9XCJhdXRvcGxheTsgZnVsbHNjcmVlblwiIHN0eWxlPVwid2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtkaXNwbGF5OmJsb2NrO1wiPjwvaWZyYW1lPjwvZGl2PmApO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnc3ZnJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGpRdWVyeShlbGVtZW50KS5odG1sKGA8ZGl2IHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiIHN0eWxlPVwid2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtkaXNwbGF5OmJsb2NrO1wiPiR7c291cmNlLnN2Zz8uc3ZnQ29udGVudCA/PyAnJ308L2Rpdj5gKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ3Rlc3QnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGh0bWxDb250ZW50ID0gc291cmNlPy5odG1sPy5odG1sQ29udGVudCB8fCAnJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZS5odG1sPy52YXJpYWJsZUtleXdvcmRzICYmIHNvdXJjZS5odG1sPy52YXJpYWJsZUtleXdvcmRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQga2V5cyA9IGljZHQudmFyaWFibGUuZ2V0S2V5cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UuaHRtbC52YXJpYWJsZUtleXdvcmRzLmZvckVhY2goa2V5d29yZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5d29yZC5yZXBsYWNlKC9bXmEtekEtWjAtOV9dL2dtLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5cy5pbmRleE9mKGtleSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50VmFyaWFibGUgPSBpY2R0LnZhcmlhYmxlLmdldFZhbHVlKGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbENvbnRlbnQgPSBodG1sQ29udGVudC5yZXBsYWNlKGtleXdvcmQsIGNvbnRlbnRWYXJpYWJsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChzb3VyY2U/LnRlc3Q/LnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndHJ1ZWZhbHNlJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9qUXVlcnkoZWxlbWVudCkuaHRtbChgPGRpdiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIiBzdHlsZT1cIndpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ZGlzcGxheTpibG9jaztcIiBkYXRhLW5vZGU9XCJ0ZXN0XCI+PGRpdiBzdHlsZT1cImRpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtcIj48ZGl2IHN0eWxlPVwid2lkdGg6MTAwJVwiPiR7aHRtbENvbnRlbnR9PC9kaXY+PC9kaXY+PC9kaXY+YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkoZWxlbWVudCkuaHRtbChgPGRpdiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIiBzdHlsZT1cIndpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ZGlzcGxheTpibG9jaztcIiBkYXRhLW5vZGU9XCJ0ZXN0XCIgZGF0YS10eXBlPVwiJHtzb3VyY2U/LnRlc3QudHlwZX1cIiBkYXRhLWNvcnJlY3Q9XCIke3NvdXJjZT8udGVzdC50cnVlZmFsc2U/LmlzY29ycmVjdCA/IDEgOiAwfVwiPjxkaXYgc3R5bGU9XCJkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7XCI+PGRpdiBzdHlsZT1cIndpZHRoOjEwMCVcIj4ke2h0bWxDb250ZW50fTwvZGl2PjwvZGl2PjwvZGl2PmApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2luZ2xlY2hvaWNlJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9qUXVlcnkoZWxlbWVudCkuaHRtbChgPGRpdiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIiBzdHlsZT1cIndpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ZGlzcGxheTpibG9jaztcIiBkYXRhLW5vZGU9XCJ0ZXN0XCI+PGRpdiBzdHlsZT1cImRpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtcIj48ZGl2IHN0eWxlPVwid2lkdGg6MTAwJVwiPiR7aHRtbENvbnRlbnR9PC9kaXY+PC9kaXY+PC9kaXY+YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkoZWxlbWVudCkuaHRtbChgPGRpdiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIiBzdHlsZT1cIndpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ZGlzcGxheTpibG9jaztcIiBkYXRhLW5vZGU9XCJ0ZXN0XCIgZGF0YS10eXBlPVwiJHtzb3VyY2U/LnRlc3QudHlwZX1cIiBkYXRhLWNvcnJlY3Q9XCIke3NvdXJjZT8udGVzdC5zaW5nbGVjaG9pY2U/LmlzY29ycmVjdCA/IDEgOiAwfVwiPjxkaXYgc3R5bGU9XCJkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7XCI+PGRpdiBzdHlsZT1cIndpZHRoOjEwMCVcIj4ke2h0bWxDb250ZW50fTwvZGl2PjwvZGl2PjwvZGl2PmApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbXVsdGljaG9pY2UnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2pRdWVyeShlbGVtZW50KS5odG1sKGA8ZGl2IHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiIHN0eWxlPVwid2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtkaXNwbGF5OmJsb2NrO1wiIGRhdGEtbm9kZT1cInRlc3RcIj48ZGl2IHN0eWxlPVwiZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO1wiPjxkaXYgc3R5bGU9XCJ3aWR0aDoxMDAlXCI+JHtodG1sQ29udGVudH08L2Rpdj48L2Rpdj48L2Rpdj5gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeShlbGVtZW50KS5odG1sKGA8ZGl2IHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiIHN0eWxlPVwid2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtkaXNwbGF5OmJsb2NrO1wiIGRhdGEtbm9kZT1cInRlc3RcIiBkYXRhLXR5cGU9XCIke3NvdXJjZT8udGVzdC50eXBlfVwiIGRhdGEtY29ycmVjdD1cIiR7c291cmNlPy50ZXN0Lm11bHRpY2hvaWNlPy5pc2NvcnJlY3QgPyAxIDogMH1cIj48ZGl2IHN0eWxlPVwiZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO1wiPjxkaXYgc3R5bGU9XCJ3aWR0aDoxMDAlXCI+JHtodG1sQ29udGVudH08L2Rpdj48L2Rpdj48L2Rpdj5gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21hdGNoaW5nLWVtcHR5Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9qUXVlcnkoZWxlbWVudCkuaHRtbChgPGRpdiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIiBzdHlsZT1cIndpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ZGlzcGxheTpibG9jaztcIiBjbGFzcz1cIm9uZHJvcC1oZXJlXCIgZGF0YS1ub2RlPVwidGVzdFwiIGRhdGEtdHlwZT1cIm1hdGNoaW5nXCIgZGF0YS10eXBlMj1cIm1hdGNoaW5nLWVtcHR5XCI+PC9kaXY+YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkoZWxlbWVudCkuaHRtbChgPGRpdiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIiBzdHlsZT1cIndpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ZGlzcGxheTpibG9jaztcIiBjbGFzcz1cIm9uZHJvcC1oZXJlXCIgZGF0YS1ub2RlPVwidGVzdFwiIGRhdGEtdHlwZT1cIm1hdGNoaW5nXCIgZGF0YS10eXBlMj1cIm1hdGNoaW5nLWVtcHR5XCIgZGF0YS1rZXk9XCIke3NvdXJjZT8udGVzdC5tYXRjaGluZz8ua2V5fVwiPjwvZGl2PmApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWF0Y2hpbmctY29udGVudCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeShlbGVtZW50KS5odG1sKGA8ZGl2IHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiIHN0eWxlPVwid2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtkaXNwbGF5OmJsb2NrO1wiIGNsYXNzPVwib25kcm9wLWhlcmVcIiBkYXRhLW5vZGU9XCJ0ZXN0XCIgZGF0YS10eXBlPVwibWF0Y2hpbmdcIiBkYXRhLXR5cGUyPVwibWF0Y2hpbmctY29udGVudFwiIGRhdGEta2V5PVwiJHtzb3VyY2U/LnRlc3QubWF0Y2hpbmc/LmtleX1cIj48ZGl2IGNsYXNzPVwib25kcmFnLWl0ZW1cIiBkYXRhLWtleT1cIiR7c291cmNlPy50ZXN0Py5tYXRjaGluZz8ua2V5ID8/IFwiS0lFTlwifVwiPjxkaXYgc3R5bGU9XCJkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7XCI+PGRpdiBzdHlsZT1cIndpZHRoOjEwMCVcIj4ke2h0bWxDb250ZW50fTwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PmApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZmlsbCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzb3VyY2UuaHRtbD8uZmlsbEtleXdvcmRzIHx8IFtdKS5mb3JFYWNoKGtleXdvcmQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dEZpbGwgPSBgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbWF4bGVuZ3RoPVwiMTI4XCIgc3R5bGU9XCJkaXNwbGF5OmlubGluZS1ibG9jazt3aWR0aDoxMDBweDttaW4td2lkdGg6MTAwcHg7bWF4LXdpZHRoOjEwMCU7cGFkZGluZzowcHggMTBweDttYXJnaW46MHB4O2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdXRsaW5lOm5vbmU7Ym94LXNoYWRvdzpub25lO2JvcmRlci13aWR0aDowcHggMHB4IDFweDtib3JkZXItdG9wLXN0eWxlOmluaXRpYWw7Ym9yZGVyLXJpZ2h0LXN0eWxlOmluaXRpYWw7Ym9yZGVyLWxlZnQtc3R5bGU6aW5pdGlhbDtib3JkZXItdG9wLWNvbG9yOmluaXRpYWw7Ym9yZGVyLXJpZ2h0LWNvbG9yOmluaXRpYWw7Ym9yZGVyLWxlZnQtY29sb3I6aW5pdGlhbDtib3JkZXItaW1hZ2U6aW5pdGlhbDtib3JkZXItYm90dG9tLXN0eWxlOmRhc2hlZDtib3JkZXItYm90dG9tLWNvbG9yOnJnYigxMjMsMTQ2LDI1NCk7YmFja2dyb3VuZDp0cmFuc3BhcmVudDthbmltYXRpb246MC4zcyBlYXNlLWluLW91dCAwcyAxIG5vcm1hbCBub25lIHJ1bm5pbmcgd2lkdGg7dGV4dC1hbGlnbjppbmhlcml0O1wiIGRhdGEta2V5PVwiJHtrZXl3b3JkLnJlcGxhY2UoL1teYS16QS1aMC05XSsvZ20sICcnKX1cIi8+YDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbENvbnRlbnQgPSBodG1sQ29udGVudC5yZXBsYWNlKG5ldyBSZWdFeHAoa2V5d29yZC5yZXBsYWNlKC9cXFsvZywgJ1xcXFxcXFsnKS5yZXBsYWNlKC9cXF0vZywgJ1xcXFxcXF0nKSwgJ2cnKSwgaW5wdXRGaWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeShlbGVtZW50KS5odG1sKGA8ZGl2IHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiIHN0eWxlPVwid2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtkaXNwbGF5OmJsb2NrO1wiIGRhdGEtbm9kZT1cInRlc3RcIj48ZGl2IHN0eWxlPVwiZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO1wiPjxkaXYgc3R5bGU9XCJ3aWR0aDoxMDAlXCI+JHtodG1sQ29udGVudH08L2Rpdj48L2Rpdj48L2Rpdj5gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NwZWVjaCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeShlbGVtZW50KS5odG1sKGA8ZGl2IHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiIHN0eWxlPVwid2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtkaXNwbGF5OmJsb2NrO1wiIGRhdGEtbm9kZT1cInRlc3RcIj48ZGl2IHN0eWxlPVwiZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO1wiPjxpbWcgc3JjPVwiaW1hZ2VzL3N2Zy9jb21wb25lbnQvbWljcm9waG9uZTQuc3ZnXCIgd2lkdGg9XCI2MFwiIGhlaWdodD1cIjYwXCIvPjwvZGl2PjwvZGl2PmApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3VibWl0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KGVsZW1lbnQpLmh0bWwoYDxkaXYgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIgc3R5bGU9XCJ3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2Rpc3BsYXk6YmxvY2s7XCIgZGF0YS1ub2RlPVwidGVzdFwiPjxpbWcgc3JjPVwiJHsoc291cmNlLmltYWdlPy5wYXRoID8gaWNkdC5jb25maWc/LnJlYWRmaWxldXBsb2FkdXJsICsgc291cmNlLmltYWdlPy5wYXRoIDogc291cmNlLmltYWdlPy51cmwpID8/ICcnfVwiIHN0eWxlPVwid2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtkaXNwbGF5OmJsb2NrO1wiLz48L2Rpdj5gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgIGpRdWVyeShlbGVtZW50KS5maW5kKCdpbWdbcGF0aF0sdmlkZW9bcGF0aF0saWZyYW1lW3BhdGhdJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmVhY2goKGksIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc2V0QXR0cmlidXRlKCdzcmMnLCAoaWNkdC5jb25maWc/LnJlYWRmaWxldXBsb2FkdXJsID8/ICcnKSArIGUuZ2V0QXR0cmlidXRlKCdwYXRoJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5yZW1vdmVBdHRyaWJ1dGUoJ3BhdGgnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaWNkdF9TeW5jU3ZnTm9kZVN0eWxlQWN0aXZlID0gKGVsZW1lbnQ/OiBhbnksIGlzYWN0aXZlPzogYm9vbGVhbikgPT4ge1xyXG4gICAgaWYgKGlzYWN0aXZlKSB7XHJcbiAgICAgICAgalF1ZXJ5KGVsZW1lbnQpLmNzcyh7IGZpbHRlcjogJ3VybCgjbm9kZVNlbGVjdGVkKScgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBqUXVlcnkoaWNkdC50YXJnZXQpLmZpbmQoJ1tzdHlsZV0nKS5jc3MoJ2ZpbHRlcicsICcnKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZWxlbWVudDtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGljZHRfU3luY1N2Z05vZGU0RGVzaWduID0gKG5vZGVJZDogc3RyaW5nLCBub2RlTmFtZTogc3RyaW5nLCBvcHRpb25zPzogeyBhdHRyaWJ1dGU/OiBhbnksIHN0eWxlPzogYW55IH0sIG5vZGVQPzogYW55KSA9PiB7XHJcbiAgICBsZXQgZWxlbWVudCA9IGpRdWVyeShub2RlUCB8fCBpY2R0LnRhcmdldCkuZmluZCgnIycgKyBub2RlSWQpLmdldCgwKSBhcyBhbnk7XHJcbiAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICBlbGVtZW50ID0gKHdpbmRvdyBhcyBhbnkpLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIG5vZGVOYW1lKTtcclxuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCBub2RlSWQpO1xyXG4gICAgICAgIGpRdWVyeShlbGVtZW50KS5hcHBlbmRUbyhub2RlUCB8fCBpY2R0LnRhcmdldCk7XHJcbiAgICB9XHJcblxyXG4gICAgalF1ZXJ5KGVsZW1lbnQpLmF0dHIob3B0aW9ucz8uYXR0cmlidXRlIHx8IHt9KTtcclxuICAgIGpRdWVyeShlbGVtZW50KS5jc3Mob3B0aW9ucz8uc3R5bGUgfHwge30pO1xyXG5cclxuICAgIHJldHVybiBlbGVtZW50O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc3luY05vZGVDcmVhdGUgPSAoZWxlR3JvdXA6IEhUTUxFbGVtZW50LCBzaXplOiBpY2R0X0lEYXRhTm9kZVNpemUpID0+IHtcclxuXHJcbiAgICBsZXQgc3ViID0gaWNkdF9TY2FsZU51bWJlcigyKTtcclxuXHJcbiAgICBsZXQgcmVjdENlbnRlckF0dHJpYnV0ZSA9IHtcclxuICAgICAgICBcImZpbGxcIjogc3ZnQ3JlYXRlX1JlY3RDZW50ZXJBdHRyaWJ1dGUuZmlsbCxcclxuICAgICAgICBcInN0cm9rZVwiOiBzdmdDcmVhdGVfUmVjdENlbnRlckF0dHJpYnV0ZS5zdHJva2UsXHJcbiAgICAgICAgXCJzdHJva2Utd2lkdGhcIjogaWNkdF9TY2FsZU51bWJlcihzdmdDcmVhdGVfUmVjdENlbnRlckF0dHJpYnV0ZS5zdHJva2VXaWR0aClcclxuICAgIH07XHJcblxyXG4gICAgbGV0IGVsZVJlY3RDZW50ZXIgPSBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbignaWNkdC10ZW1wLWNyZWF0ZS1yZWN0LWNlbnRlcicsICdyZWN0Jywge1xyXG4gICAgICAgIGF0dHJpYnV0ZTogT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgICAgIHg6IHNpemUueCAtIHN1YixcclxuICAgICAgICAgICAgeTogc2l6ZS55IC0gc3ViLFxyXG4gICAgICAgICAgICB3aWR0aDogc2l6ZS53aWR0aCArIHN1YiAqIDIsXHJcbiAgICAgICAgICAgIGhlaWdodDogc2l6ZS5oZWlnaHQgKyBzdWIgKiAyXHJcbiAgICAgICAgfSwgcmVjdENlbnRlckF0dHJpYnV0ZSlcclxuICAgIH0sIGVsZUdyb3VwKTtcclxuXHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIHsgZWxlbWVudDogZWxlUmVjdENlbnRlciwgcG9zVHlwZTogJ3JlY3QtY2VudGVyJyB9LFxyXG4gICAgXSBhcyBBcnJheTx7IGVsZW1lbnQ6IGFueSwgcG9zVHlwZTogc3RyaW5nIH0+O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc3luY05vZGVSZXNpemUgPSAoZWxlR3JvdXA6IEhUTUxFbGVtZW50LCBub2RlOiBpY2R0X0lEYXRhTm9kZSkgPT4ge1xyXG5cclxuICAgIGxldCB7IHNpemUgfSA9IG5vZGU7XHJcblxyXG4gICAgbGV0IHN1YiA9IGljZHRfU2NhbGVOdW1iZXIoMSk7XHJcbiAgICBsZXQgc3ViMiA9IGljZHRfU2NhbGVOdW1iZXIoMik7XHJcbiAgICBsZXQgc3ViNSA9IGljZHRfU2NhbGVOdW1iZXIoNSk7XHJcblxyXG4gICAgbGV0IGxpbmVBdHRyaWJ1dGUgPSB7XHJcbiAgICAgICAgXCJzdHJva2VcIjogc3ZnRGVzaWduX0xpbmVBdHRyaWJ1dGUuc3Ryb2tlLFxyXG4gICAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IGljZHRfU2NhbGVOdW1iZXIoc3ZnRGVzaWduX0xpbmVBdHRyaWJ1dGUuc3Ryb2tlV2lkdGgpLFxyXG4gICAgICAgIFwic3Ryb2tlLWxpbmVjYXBcIjogc3ZnRGVzaWduX0xpbmVBdHRyaWJ1dGUuc3Ryb2tlTGluZWNhcCxcclxuICAgICAgICAvL1wic3Ryb2tlLWRhc2hhcnJheVwiOiBzdmdEZXNpZ25fTGluZUF0dHJpYnV0ZS5zdHJva2VEYXNoYXJyYXlzLm1hcChtID0+IGljZHRfU2NhbGVOdW1iZXIobSkpLmpvaW4oJyAnKVxyXG4gICAgfTtcclxuXHJcbiAgICBsZXQgcmVjdENlbnRlckF0dHJpYnV0ZSA9IHtcclxuICAgICAgICBcImZpbGxcIjogc3ZnRGVzaWduX1JlY3RDZW50ZXJBdHRyaWJ1dGUuZmlsbCxcclxuICAgICAgICBcInN0cm9rZVwiOiBzdmdEZXNpZ25fUmVjdENlbnRlckF0dHJpYnV0ZS5zdHJva2UsXHJcbiAgICAgICAgXCJzdHJva2Utd2lkdGhcIjogaWNkdF9TY2FsZU51bWJlcihzdmdEZXNpZ25fUmVjdENlbnRlckF0dHJpYnV0ZS5zdHJva2VXaWR0aClcclxuICAgIH07XHJcblxyXG4gICAgbGV0IHJlY3RBdHRyaWJ1dGUgPSB7XHJcbiAgICAgICAgXCJmaWxsXCI6IHN2Z0Rlc2lnbl9SZWN0QXR0cmlidXRlLmZpbGwsXHJcbiAgICAgICAgXCJzdHJva2VcIjogc3ZnRGVzaWduX1JlY3RBdHRyaWJ1dGUuc3Ryb2tlLFxyXG4gICAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IGljZHRfU2NhbGVOdW1iZXIoc3ZnRGVzaWduX1JlY3RBdHRyaWJ1dGUuc3Ryb2tlV2lkdGgpLFxyXG4gICAgICAgIFwid2lkdGhcIjogaWNkdF9TY2FsZU51bWJlcihzdmdEZXNpZ25fUmVjdEF0dHJpYnV0ZS53aWR0aCksXHJcbiAgICAgICAgXCJoZWlnaHRcIjogaWNkdF9TY2FsZU51bWJlcihzdmdEZXNpZ25fUmVjdEF0dHJpYnV0ZS5oZWlnaHQpXHJcbiAgICB9O1xyXG5cclxuICAgIGxldCBlbGVMaW5lTGVmdCA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKCdpY2R0LXRlbXAtcmVzaXplLWxpbmUtbGVmdCcsICdsaW5lJywge1xyXG4gICAgICAgIGF0dHJpYnV0ZTogT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgICAgIHgxOiBzaXplLnggLSBzdWIsXHJcbiAgICAgICAgICAgIHkxOiBzaXplLnksXHJcbiAgICAgICAgICAgIHgyOiBzaXplLnggLSBzdWIsXHJcbiAgICAgICAgICAgIHkyOiBzaXplLnkgKyBzaXplLmhlaWdodFxyXG4gICAgICAgIH0sIGxpbmVBdHRyaWJ1dGUpXHJcbiAgICB9LCBlbGVHcm91cCk7XHJcblxyXG4gICAgbGV0IGVsZUxpbmVUb3AgPSBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbignaWNkdC10ZW1wLXJlc2l6ZS1saW5lLXRvcCcsICdsaW5lJywge1xyXG4gICAgICAgIGF0dHJpYnV0ZTogT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgICAgIHgxOiBzaXplLngsXHJcbiAgICAgICAgICAgIHkxOiBzaXplLnkgLSBzdWIsXHJcbiAgICAgICAgICAgIHgyOiBzaXplLnggKyBzaXplLndpZHRoLFxyXG4gICAgICAgICAgICB5Mjogc2l6ZS55IC0gc3ViXHJcbiAgICAgICAgfSwgbGluZUF0dHJpYnV0ZSlcclxuICAgIH0sIGVsZUdyb3VwKTtcclxuXHJcbiAgICBsZXQgZWxlTGluZVJpZ2h0ID0gaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24oJ2ljZHQtdGVtcC1yZXNpemUtbGluZS1yaWdodCcsICdsaW5lJywge1xyXG4gICAgICAgIGF0dHJpYnV0ZTogT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgICAgIHgxOiBzaXplLnggKyBzaXplLndpZHRoICsgc3ViLFxyXG4gICAgICAgICAgICB5MTogc2l6ZS55LFxyXG4gICAgICAgICAgICB4Mjogc2l6ZS54ICsgc2l6ZS53aWR0aCArIHN1YixcclxuICAgICAgICAgICAgeTI6IHNpemUueSArIHNpemUuaGVpZ2h0XHJcbiAgICAgICAgfSwgbGluZUF0dHJpYnV0ZSlcclxuICAgIH0sIGVsZUdyb3VwKTtcclxuXHJcbiAgICBsZXQgZWxlTGluZUJvdHRvbSA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKCdpY2R0LXRlbXAtcmVzaXplLWxpbmUtYm90dG9tJywgJ2xpbmUnLCB7XHJcbiAgICAgICAgYXR0cmlidXRlOiBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgeDE6IHNpemUueCxcclxuICAgICAgICAgICAgeTE6IHNpemUueSArIHNpemUuaGVpZ2h0ICsgc3ViLFxyXG4gICAgICAgICAgICB4Mjogc2l6ZS54ICsgc2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgeTI6IHNpemUueSArIHNpemUuaGVpZ2h0ICsgc3ViXHJcbiAgICAgICAgfSwgbGluZUF0dHJpYnV0ZSlcclxuICAgIH0sIGVsZUdyb3VwKTtcclxuXHJcbiAgICBsZXQgZWxlUmVjdENlbnRlciA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKCdpY2R0LXRlbXAtcmVzaXplLXJlY3QtY2VudGVyJywgJ3JlY3QnLCB7XHJcbiAgICAgICAgYXR0cmlidXRlOiBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgeDogc2l6ZS54LFxyXG4gICAgICAgICAgICB5OiBzaXplLnksXHJcbiAgICAgICAgICAgIHdpZHRoOiBzaXplLndpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IHNpemUuaGVpZ2h0XHJcbiAgICAgICAgfSwgcmVjdENlbnRlckF0dHJpYnV0ZSksXHJcbiAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgY3Vyc29yOiAnbW92ZSdcclxuICAgICAgICB9XHJcbiAgICB9LCBlbGVHcm91cCk7XHJcblxyXG4gICAgLy80IGdvY1xyXG4gICAgbGV0IGVsZVJlY3RUb3BMZWZ0ID0gaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24oJ2ljZHQtdGVtcC1yZXNpemUtcmVjdC10b3AtbGVmdCcsICdyZWN0Jywge1xyXG4gICAgICAgIGF0dHJpYnV0ZTogT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgICAgIHg6IHNpemUueCAtIHN1YjUsXHJcbiAgICAgICAgICAgIHk6IHNpemUueSAtIHN1YjVcclxuICAgICAgICB9LCByZWN0QXR0cmlidXRlKSxcclxuICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICBjdXJzb3I6ICdudy1yZXNpemUnXHJcbiAgICAgICAgfVxyXG4gICAgfSwgZWxlR3JvdXApO1xyXG5cclxuICAgIGxldCBlbGVSZWN0VG9wUmlnaHQgPSBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbignaWNkdC10ZW1wLXJlc2l6ZS1yZWN0LXRvcC1yaWdodCcsICdyZWN0Jywge1xyXG4gICAgICAgIGF0dHJpYnV0ZTogT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgICAgIHg6IHNpemUueCArIHNpemUud2lkdGggLSBzdWIyLFxyXG4gICAgICAgICAgICB5OiBzaXplLnkgLSBzdWI1XHJcbiAgICAgICAgfSwgcmVjdEF0dHJpYnV0ZSksXHJcbiAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgY3Vyc29yOiAnbmUtcmVzaXplJ1xyXG4gICAgICAgIH1cclxuICAgIH0sIGVsZUdyb3VwKTtcclxuXHJcbiAgICBsZXQgZWxlUmVjdEJvdHRvbUxlZnQgPSBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbignaWNkdC10ZW1wLXJlc2l6ZS1yZWN0LWJvdHRvbS1sZWZ0JywgJ3JlY3QnLCB7XHJcbiAgICAgICAgYXR0cmlidXRlOiBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgeDogc2l6ZS54IC0gc3ViNSxcclxuICAgICAgICAgICAgeTogc2l6ZS55ICsgc2l6ZS5oZWlnaHQgLSBzdWIyXHJcbiAgICAgICAgfSwgcmVjdEF0dHJpYnV0ZSksXHJcbiAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgY3Vyc29yOiAnc3ctcmVzaXplJ1xyXG4gICAgICAgIH1cclxuICAgIH0sIGVsZUdyb3VwKTtcclxuXHJcbiAgICBsZXQgZWxlUmVjdEJvdHRvbVJpZ2h0ID0gaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24oJ2ljZHQtdGVtcC1yZXNpemUtcmVjdC1ib3R0b20tcmlnaHQnLCAncmVjdCcsIHtcclxuICAgICAgICBhdHRyaWJ1dGU6IE9iamVjdC5hc3NpZ24oe1xyXG4gICAgICAgICAgICB4OiBzaXplLnggKyBzaXplLndpZHRoIC0gc3ViMixcclxuICAgICAgICAgICAgeTogc2l6ZS55ICsgc2l6ZS5oZWlnaHQgLSBzdWIyXHJcbiAgICAgICAgfSwgcmVjdEF0dHJpYnV0ZSksXHJcbiAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgY3Vyc29yOiAnc2UtcmVzaXplJ1xyXG4gICAgICAgIH1cclxuICAgIH0sIGVsZUdyb3VwKTtcclxuXHJcbiAgICAvLzQgaHVvbmdcclxuICAgIGxldCBlbGVSZWN0VG9wID0gaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24oJ2ljZHQtdGVtcC1yZXNpemUtcmVjdC10b3AnLCAncmVjdCcsIHtcclxuICAgICAgICBhdHRyaWJ1dGU6IE9iamVjdC5hc3NpZ24oe1xyXG4gICAgICAgICAgICB4OiBzaXplLnggKyBzaXplLndpZHRoIC8gMiAtIHN1YjIgLSBzdWIsXHJcbiAgICAgICAgICAgIHk6IHNpemUueSAtIHN1YjVcclxuICAgICAgICB9LCByZWN0QXR0cmlidXRlKSxcclxuICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICBjdXJzb3I6ICduLXJlc2l6ZSdcclxuICAgICAgICB9XHJcbiAgICB9LCBlbGVHcm91cCk7XHJcblxyXG4gICAgbGV0IGVsZVJlY3RSaWdodCA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKCdpY2R0LXRlbXAtcmVzaXplLXJlY3QtcmlnaHQnLCAncmVjdCcsIHtcclxuICAgICAgICBhdHRyaWJ1dGU6IE9iamVjdC5hc3NpZ24oe1xyXG4gICAgICAgICAgICB4OiBzaXplLnggKyBzaXplLndpZHRoIC0gc3ViMixcclxuICAgICAgICAgICAgeTogc2l6ZS55ICsgc2l6ZS5oZWlnaHQgLyAyIC0gc3ViMiAtIHN1YlxyXG4gICAgICAgIH0sIHJlY3RBdHRyaWJ1dGUpLFxyXG4gICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgIGN1cnNvcjogJ2UtcmVzaXplJ1xyXG4gICAgICAgIH1cclxuICAgIH0sIGVsZUdyb3VwKTtcclxuXHJcbiAgICBsZXQgZWxlUmVjdEJvdHRvbSA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKCdpY2R0LXRlbXAtcmVzaXplLXJlY3QtYm90dG9tJywgJ3JlY3QnLCB7XHJcbiAgICAgICAgYXR0cmlidXRlOiBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgeDogc2l6ZS54ICsgc2l6ZS53aWR0aCAvIDIgLSBzdWIyIC0gc3ViLFxyXG4gICAgICAgICAgICB5OiBzaXplLnkgKyBzaXplLmhlaWdodCAtIHN1YjJcclxuICAgICAgICB9LCByZWN0QXR0cmlidXRlKSxcclxuICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICBjdXJzb3I6ICdzLXJlc2l6ZSdcclxuICAgICAgICB9XHJcbiAgICB9LCBlbGVHcm91cCk7XHJcblxyXG4gICAgbGV0IGVsZVJlY3RMZWZ0ID0gaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24oJ2ljZHQtdGVtcC1yZXNpemUtcmVjdC1sZWZ0JywgJ3JlY3QnLCB7XHJcbiAgICAgICAgYXR0cmlidXRlOiBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgeDogc2l6ZS54IC0gc3ViNSxcclxuICAgICAgICAgICAgeTogc2l6ZS55ICsgc2l6ZS5oZWlnaHQgLyAyIC0gc3ViMiAtIHN1YlxyXG4gICAgICAgIH0sIHJlY3RBdHRyaWJ1dGUpLFxyXG4gICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgIGN1cnNvcjogJ3ctcmVzaXplJ1xyXG4gICAgICAgIH1cclxuICAgIH0sIGVsZUdyb3VwKTtcclxuXHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIHsgZWxlbWVudDogZWxlUmVjdENlbnRlciwgcG9zVHlwZTogJ3JlY3QtY2VudGVyJyB9LFxyXG5cclxuICAgICAgICB7IGVsZW1lbnQ6IGVsZVJlY3RUb3BMZWZ0LCBwb3NUeXBlOiAncmVjdC10b3AtbGVmdCcgfSxcclxuICAgICAgICB7IGVsZW1lbnQ6IGVsZVJlY3RUb3BSaWdodCwgcG9zVHlwZTogJ3JlY3QtdG9wLXJpZ2h0JyB9LFxyXG4gICAgICAgIHsgZWxlbWVudDogZWxlUmVjdEJvdHRvbUxlZnQsIHBvc1R5cGU6ICdyZWN0LWJvdHRvbS1sZWZ0JyB9LFxyXG4gICAgICAgIHsgZWxlbWVudDogZWxlUmVjdEJvdHRvbVJpZ2h0LCBwb3NUeXBlOiAncmVjdC1ib3R0b20tcmlnaHQnIH0sXHJcblxyXG4gICAgICAgIHsgZWxlbWVudDogZWxlUmVjdFRvcCwgcG9zVHlwZTogJ3JlY3QtdG9wJyB9LFxyXG4gICAgICAgIHsgZWxlbWVudDogZWxlUmVjdFJpZ2h0LCBwb3NUeXBlOiAncmVjdC1yaWdodCcgfSxcclxuICAgICAgICB7IGVsZW1lbnQ6IGVsZVJlY3RCb3R0b20sIHBvc1R5cGU6ICdyZWN0LWJvdHRvbScgfSxcclxuICAgICAgICB7IGVsZW1lbnQ6IGVsZVJlY3RMZWZ0LCBwb3NUeXBlOiAncmVjdC1sZWZ0JyB9XHJcbiAgICBdIGFzIEFycmF5PHsgZWxlbWVudDogYW55LCBwb3NUeXBlOiBzdHJpbmcgfT47XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBzeW5jTm9kZVNlbGVjdCA9IChlbGVHcm91cDogSFRNTEVsZW1lbnQsIG5vZGVzOiBBcnJheTxpY2R0X0lEYXRhTm9kZT4sIHNpemU6IGljZHRfSURhdGFOb2RlU2l6ZSkgPT4ge1xyXG5cclxuICAgIGxldCBzdWIgPSBpY2R0X1NjYWxlTnVtYmVyKDEpO1xyXG5cclxuICAgIGxldCBsaW5lQXR0cmlidXRlID0ge1xyXG4gICAgICAgIFwic3Ryb2tlXCI6IHN2Z0Rlc2lnbl9MaW5lQXR0cmlidXRlLnN0cm9rZSxcclxuICAgICAgICBcInN0cm9rZS13aWR0aFwiOiBpY2R0X1NjYWxlTnVtYmVyKHN2Z0Rlc2lnbl9MaW5lQXR0cmlidXRlLnN0cm9rZVdpZHRoKSxcclxuICAgICAgICBcInN0cm9rZS1saW5lY2FwXCI6IHN2Z0Rlc2lnbl9MaW5lQXR0cmlidXRlLnN0cm9rZUxpbmVjYXAsXHJcbiAgICAgICAgLy9cInN0cm9rZS1kYXNoYXJyYXlcIjogc3ZnRGVzaWduX0xpbmVBdHRyaWJ1dGUuc3Ryb2tlRGFzaGFycmF5cy5tYXAobSA9PiBpY2R0X1NjYWxlTnVtYmVyKG0pKS5qb2luKCcgJylcclxuICAgIH07XHJcblxyXG4gICAgbGV0IHJlY3RDZW50ZXJBdHRyaWJ1dGUgPSB7XHJcbiAgICAgICAgXCJmaWxsXCI6IHN2Z0Rlc2lnbl9SZWN0Q2VudGVyQXR0cmlidXRlLmZpbGwsXHJcbiAgICAgICAgXCJzdHJva2VcIjogc3ZnRGVzaWduX1JlY3RDZW50ZXJBdHRyaWJ1dGUuc3Ryb2tlLFxyXG4gICAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IGljZHRfU2NhbGVOdW1iZXIoc3ZnRGVzaWduX1JlY3RDZW50ZXJBdHRyaWJ1dGUuc3Ryb2tlV2lkdGgpXHJcbiAgICB9O1xyXG5cclxuICAgIGxldCByZWN0Tm9kZUF0dHJpYnV0ZSA9IHtcclxuICAgICAgICBcImZpbGxcIjogc3ZnU2VsZWN0X1JlY3ROb2RlQXR0cmlidXRlLmZpbGwsXHJcbiAgICAgICAgXCJzdHJva2VcIjogc3ZnU2VsZWN0X1JlY3ROb2RlQXR0cmlidXRlLnN0cm9rZSxcclxuICAgICAgICBcInN0cm9rZS13aWR0aFwiOiBpY2R0X1NjYWxlTnVtYmVyKHN2Z1NlbGVjdF9SZWN0Tm9kZUF0dHJpYnV0ZS5zdHJva2VXaWR0aClcclxuICAgIH07XHJcblxyXG4gICAgbGV0IGVsZUxpbmVMZWZ0ID0gaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24oJ2ljZHQtdGVtcC1zZWxlY3QtbGluZS1sZWZ0JywgJ2xpbmUnLCB7XHJcbiAgICAgICAgYXR0cmlidXRlOiBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgeDE6IHNpemUueCAtIHN1YixcclxuICAgICAgICAgICAgeTE6IHNpemUueSxcclxuICAgICAgICAgICAgeDI6IHNpemUueCAtIHN1YixcclxuICAgICAgICAgICAgeTI6IHNpemUueSArIHNpemUuaGVpZ2h0XHJcbiAgICAgICAgfSwgbGluZUF0dHJpYnV0ZSlcclxuICAgIH0sIGVsZUdyb3VwKTtcclxuXHJcbiAgICBsZXQgZWxlTGluZVRvcCA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKCdpY2R0LXRlbXAtc2VsZWN0LWxpbmUtdG9wJywgJ2xpbmUnLCB7XHJcbiAgICAgICAgYXR0cmlidXRlOiBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgeDE6IHNpemUueCxcclxuICAgICAgICAgICAgeTE6IHNpemUueSAtIHN1YixcclxuICAgICAgICAgICAgeDI6IHNpemUueCArIHNpemUud2lkdGgsXHJcbiAgICAgICAgICAgIHkyOiBzaXplLnkgLSBzdWJcclxuICAgICAgICB9LCBsaW5lQXR0cmlidXRlKVxyXG4gICAgfSwgZWxlR3JvdXApO1xyXG5cclxuICAgIGxldCBlbGVMaW5lUmlnaHQgPSBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbignaWNkdC10ZW1wLXNlbGVjdC1saW5lLXJpZ2h0JywgJ2xpbmUnLCB7XHJcbiAgICAgICAgYXR0cmlidXRlOiBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgeDE6IHNpemUueCArIHNpemUud2lkdGggKyBzdWIsXHJcbiAgICAgICAgICAgIHkxOiBzaXplLnksXHJcbiAgICAgICAgICAgIHgyOiBzaXplLnggKyBzaXplLndpZHRoICsgc3ViLFxyXG4gICAgICAgICAgICB5Mjogc2l6ZS55ICsgc2l6ZS5oZWlnaHRcclxuICAgICAgICB9LCBsaW5lQXR0cmlidXRlKVxyXG4gICAgfSwgZWxlR3JvdXApO1xyXG5cclxuICAgIGxldCBlbGVMaW5lQm90dG9tID0gaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24oJ2ljZHQtdGVtcC1zZWxlY3QtbGluZS1ib3R0b20nLCAnbGluZScsIHtcclxuICAgICAgICBhdHRyaWJ1dGU6IE9iamVjdC5hc3NpZ24oe1xyXG4gICAgICAgICAgICB4MTogc2l6ZS54LFxyXG4gICAgICAgICAgICB5MTogc2l6ZS55ICsgc2l6ZS5oZWlnaHQgKyBzdWIsXHJcbiAgICAgICAgICAgIHgyOiBzaXplLnggKyBzaXplLndpZHRoLFxyXG4gICAgICAgICAgICB5Mjogc2l6ZS55ICsgc2l6ZS5oZWlnaHQgKyBzdWJcclxuICAgICAgICB9LCBsaW5lQXR0cmlidXRlKVxyXG4gICAgfSwgZWxlR3JvdXApO1xyXG5cclxuICAgIGxldCBlbGVSZWN0Q2VudGVyID0gaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24oJ2ljZHQtdGVtcC1zZWxlY3QtcmVjdC1jZW50ZXInLCAncmVjdCcsIHtcclxuICAgICAgICBhdHRyaWJ1dGU6IE9iamVjdC5hc3NpZ24oe1xyXG4gICAgICAgICAgICB4OiBzaXplLngsXHJcbiAgICAgICAgICAgIHk6IHNpemUueSxcclxuICAgICAgICAgICAgd2lkdGg6IHNpemUud2lkdGgsXHJcbiAgICAgICAgICAgIGhlaWdodDogc2l6ZS5oZWlnaHRcclxuICAgICAgICB9LCByZWN0Q2VudGVyQXR0cmlidXRlKVxyXG4gICAgfSwgZWxlR3JvdXApO1xyXG5cclxuICAgIG5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcclxuICAgICAgICBsZXQgeyBzaXplIH0gPSBub2RlO1xyXG5cclxuICAgICAgICBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbignaWNkdC10ZW1wLXNlbGVjdC1yZWN0LW5vZGUtJyArIG5vZGUuaWQsICdyZWN0Jywge1xyXG4gICAgICAgICAgICBhdHRyaWJ1dGU6IE9iamVjdC5hc3NpZ24oe1xyXG4gICAgICAgICAgICAgICAgeDogc2l6ZS54LFxyXG4gICAgICAgICAgICAgICAgeTogc2l6ZS55LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IHNpemUud2lkdGgsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHNpemUuaGVpZ2h0XHJcbiAgICAgICAgICAgIH0sIHJlY3ROb2RlQXR0cmlidXRlKVxyXG4gICAgICAgIH0sIGVsZUdyb3VwKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBbXHJcbiAgICAgICAgeyBlbGVtZW50OiBlbGVSZWN0Q2VudGVyLCBwb3NUeXBlOiAncmVjdC1jZW50ZXInIH0sXHJcbiAgICBdIGFzIEFycmF5PHsgZWxlbWVudDogYW55LCBwb3NUeXBlOiBzdHJpbmcgfT47XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBzeW5jTm9kZVNjYW4gPSAoZWxlR3JvdXA6IEhUTUxFbGVtZW50LCBzaXplOiBpY2R0X0lEYXRhTm9kZVNpemUpID0+IHtcclxuXHJcbiAgICBsZXQgc3ViID0gaWNkdF9TY2FsZU51bWJlcigxKTtcclxuXHJcbiAgICBsZXQgbGluZUF0dHJpYnV0ZSA9IHtcclxuICAgICAgICBcInN0cm9rZVwiOiBzdmdEZXNpZ25fTGluZUF0dHJpYnV0ZS5zdHJva2UsXHJcbiAgICAgICAgXCJzdHJva2Utd2lkdGhcIjogaWNkdF9TY2FsZU51bWJlcihzdmdEZXNpZ25fTGluZUF0dHJpYnV0ZS5zdHJva2VXaWR0aCksXHJcbiAgICAgICAgXCJzdHJva2UtbGluZWNhcFwiOiBzdmdEZXNpZ25fTGluZUF0dHJpYnV0ZS5zdHJva2VMaW5lY2FwLFxyXG4gICAgICAgIC8vXCJzdHJva2UtZGFzaGFycmF5XCI6IHN2Z0Rlc2lnbl9MaW5lQXR0cmlidXRlLnN0cm9rZURhc2hhcnJheXMubWFwKG0gPT4gaWNkdF9TY2FsZU51bWJlcihtKSkuam9pbignICcpXHJcbiAgICB9O1xyXG5cclxuICAgIGxldCByZWN0Q2VudGVyQXR0cmlidXRlID0ge1xyXG4gICAgICAgIFwiZmlsbFwiOiBzdmdEZXNpZ25fUmVjdENlbnRlckF0dHJpYnV0ZS5maWxsLFxyXG4gICAgICAgIFwic3Ryb2tlXCI6IHN2Z0Rlc2lnbl9SZWN0Q2VudGVyQXR0cmlidXRlLnN0cm9rZSxcclxuICAgICAgICBcInN0cm9rZS13aWR0aFwiOiBpY2R0X1NjYWxlTnVtYmVyKHN2Z0Rlc2lnbl9SZWN0Q2VudGVyQXR0cmlidXRlLnN0cm9rZVdpZHRoKVxyXG4gICAgfTtcclxuXHJcbiAgICBsZXQgZWxlTGluZUxlZnQgPSBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbignaWNkdC10ZW1wLXNjYW4tbGluZS1sZWZ0JywgJ2xpbmUnLCB7XHJcbiAgICAgICAgYXR0cmlidXRlOiBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgeDE6IHNpemUueCAtIHN1YixcclxuICAgICAgICAgICAgeTE6IHNpemUueSxcclxuICAgICAgICAgICAgeDI6IHNpemUueCAtIHN1YixcclxuICAgICAgICAgICAgeTI6IHNpemUueSArIHNpemUuaGVpZ2h0XHJcbiAgICAgICAgfSwgbGluZUF0dHJpYnV0ZSlcclxuICAgIH0sIGVsZUdyb3VwKTtcclxuXHJcbiAgICBsZXQgZWxlTGluZVRvcCA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKCdpY2R0LXRlbXAtc2Nhbi1saW5lLXRvcCcsICdsaW5lJywge1xyXG4gICAgICAgIGF0dHJpYnV0ZTogT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgICAgIHgxOiBzaXplLngsXHJcbiAgICAgICAgICAgIHkxOiBzaXplLnkgLSBzdWIsXHJcbiAgICAgICAgICAgIHgyOiBzaXplLnggKyBzaXplLndpZHRoLFxyXG4gICAgICAgICAgICB5Mjogc2l6ZS55IC0gc3ViXHJcbiAgICAgICAgfSwgbGluZUF0dHJpYnV0ZSlcclxuICAgIH0sIGVsZUdyb3VwKTtcclxuXHJcbiAgICBsZXQgZWxlTGluZVJpZ2h0ID0gaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24oJ2ljZHQtdGVtcC1zY2FuLWxpbmUtcmlnaHQnLCAnbGluZScsIHtcclxuICAgICAgICBhdHRyaWJ1dGU6IE9iamVjdC5hc3NpZ24oe1xyXG4gICAgICAgICAgICB4MTogc2l6ZS54ICsgc2l6ZS53aWR0aCArIHN1YixcclxuICAgICAgICAgICAgeTE6IHNpemUueSxcclxuICAgICAgICAgICAgeDI6IHNpemUueCArIHNpemUud2lkdGggKyBzdWIsXHJcbiAgICAgICAgICAgIHkyOiBzaXplLnkgKyBzaXplLmhlaWdodFxyXG4gICAgICAgIH0sIGxpbmVBdHRyaWJ1dGUpXHJcbiAgICB9LCBlbGVHcm91cCk7XHJcblxyXG4gICAgbGV0IGVsZUxpbmVCb3R0b20gPSBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbignaWNkdC10ZW1wLXNjYW4tbGluZS1ib3R0b20nLCAnbGluZScsIHtcclxuICAgICAgICBhdHRyaWJ1dGU6IE9iamVjdC5hc3NpZ24oe1xyXG4gICAgICAgICAgICB4MTogc2l6ZS54LFxyXG4gICAgICAgICAgICB5MTogc2l6ZS55ICsgc2l6ZS5oZWlnaHQgKyBzdWIsXHJcbiAgICAgICAgICAgIHgyOiBzaXplLnggKyBzaXplLndpZHRoLFxyXG4gICAgICAgICAgICB5Mjogc2l6ZS55ICsgc2l6ZS5oZWlnaHQgKyBzdWJcclxuICAgICAgICB9LCBsaW5lQXR0cmlidXRlKVxyXG4gICAgfSwgZWxlR3JvdXApO1xyXG5cclxuICAgIGxldCBlbGVSZWN0Q2VudGVyID0gaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24oJ2ljZHQtdGVtcC1zY2FuLXJlY3QtY2VudGVyJywgJ3JlY3QnLCB7XHJcbiAgICAgICAgYXR0cmlidXRlOiBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgeDogc2l6ZS54LFxyXG4gICAgICAgICAgICB5OiBzaXplLnksXHJcbiAgICAgICAgICAgIHdpZHRoOiBzaXplLndpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IHNpemUuaGVpZ2h0XHJcbiAgICAgICAgfSwgcmVjdENlbnRlckF0dHJpYnV0ZSlcclxuICAgIH0sIGVsZUdyb3VwKTtcclxuXHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIHsgZWxlbWVudDogZWxlUmVjdENlbnRlciwgcG9zVHlwZTogJ3JlY3QtY2VudGVyJyB9LFxyXG4gICAgXSBhcyBBcnJheTx7IGVsZW1lbnQ6IGFueSwgcG9zVHlwZTogc3RyaW5nIH0+O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc3luY05vZGVJbnRlcmFjdGl2ZSA9IChlbGVHcm91cDogSFRNTEVsZW1lbnQsIHNpemU6IGljZHRfSURhdGFOb2RlU2l6ZSkgPT4ge1xyXG5cclxuICAgIGxldCBzdWIgPSBpY2R0X1NjYWxlTnVtYmVyKC0xKTtcclxuXHJcbiAgICBsZXQgbGluZUF0dHJpYnV0ZSA9IHtcclxuICAgICAgICBcInN0cm9rZVwiOiBzdmdJbnRlcmFjdGl2ZV9MaW5lQXR0cmlidXRlLnN0cm9rZSxcclxuICAgICAgICBcInN0cm9rZS13aWR0aFwiOiBpY2R0X1NjYWxlTnVtYmVyKHN2Z0ludGVyYWN0aXZlX0xpbmVBdHRyaWJ1dGUuc3Ryb2tlV2lkdGgpLFxyXG4gICAgICAgIFwic3Ryb2tlLWxpbmVjYXBcIjogc3ZnSW50ZXJhY3RpdmVfTGluZUF0dHJpYnV0ZS5zdHJva2VMaW5lY2FwLFxyXG4gICAgICAgIFwic3Ryb2tlLWRhc2hhcnJheVwiOiBpY2R0X1NjYWxlTnVtYmVyKHN2Z0ludGVyYWN0aXZlX0xpbmVBdHRyaWJ1dGUuc3Ryb2tlRGFzaGFycmF5KVxyXG4gICAgfTtcclxuXHJcbiAgICBsZXQgcmVjdENlbnRlckF0dHJpYnV0ZSA9IHtcclxuICAgICAgICBcImZpbGxcIjogc3ZnSW50ZXJhY3RpdmVfUmVjdENlbnRlckF0dHJpYnV0ZS5maWxsXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGxldCBlbGVMaW5lTGVmdCA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKCdpY2R0LXRlbXAtaW50ZXJhY3RpdmUtbGluZS1sZWZ0JywgJ2xpbmUnLCB7XHJcbiAgICAvLyAgICAgYXR0cmlidXRlOiBPYmplY3QuYXNzaWduKHtcclxuICAgIC8vICAgICAgICAgeDE6IHNpemUueCAtIHN1YixcclxuICAgIC8vICAgICAgICAgeTE6IHNpemUueSxcclxuICAgIC8vICAgICAgICAgeDI6IHNpemUueCAtIHN1YixcclxuICAgIC8vICAgICAgICAgeTI6IHNpemUueSArIHNpemUuaGVpZ2h0XHJcbiAgICAvLyAgICAgfSwgbGluZUF0dHJpYnV0ZSlcclxuICAgIC8vIH0sIGVsZUdyb3VwKTtcclxuXHJcbiAgICAvLyBsZXQgZWxlTGluZVRvcCA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKCdpY2R0LXRlbXAtaW50ZXJhY3RpdmUtbGluZS10b3AnLCAnbGluZScsIHtcclxuICAgIC8vICAgICBhdHRyaWJ1dGU6IE9iamVjdC5hc3NpZ24oe1xyXG4gICAgLy8gICAgICAgICB4MTogc2l6ZS54LFxyXG4gICAgLy8gICAgICAgICB5MTogc2l6ZS55IC0gc3ViLFxyXG4gICAgLy8gICAgICAgICB4Mjogc2l6ZS54ICsgc2l6ZS53aWR0aCxcclxuICAgIC8vICAgICAgICAgeTI6IHNpemUueSAtIHN1YlxyXG4gICAgLy8gICAgIH0sIGxpbmVBdHRyaWJ1dGUpXHJcbiAgICAvLyB9LCBlbGVHcm91cCk7XHJcblxyXG4gICAgLy8gbGV0IGVsZUxpbmVSaWdodCA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKCdpY2R0LXRlbXAtaW50ZXJhY3RpdmUtbGluZS1yaWdodCcsICdsaW5lJywge1xyXG4gICAgLy8gICAgIGF0dHJpYnV0ZTogT2JqZWN0LmFzc2lnbih7XHJcbiAgICAvLyAgICAgICAgIHgxOiBzaXplLnggKyBzaXplLndpZHRoICsgc3ViLFxyXG4gICAgLy8gICAgICAgICB5MTogc2l6ZS55LFxyXG4gICAgLy8gICAgICAgICB4Mjogc2l6ZS54ICsgc2l6ZS53aWR0aCArIHN1YixcclxuICAgIC8vICAgICAgICAgeTI6IHNpemUueSArIHNpemUuaGVpZ2h0XHJcbiAgICAvLyAgICAgfSwgbGluZUF0dHJpYnV0ZSlcclxuICAgIC8vIH0sIGVsZUdyb3VwKTtcclxuXHJcbiAgICAvLyBsZXQgZWxlTGluZUJvdHRvbSA9IGljZHRfU3luY1N2Z05vZGU0RGVzaWduKCdpY2R0LXRlbXAtaW50ZXJhY3RpdmUtbGluZS1ib3R0b20nLCAnbGluZScsIHtcclxuICAgIC8vICAgICBhdHRyaWJ1dGU6IE9iamVjdC5hc3NpZ24oe1xyXG4gICAgLy8gICAgICAgICB4MTogc2l6ZS54LFxyXG4gICAgLy8gICAgICAgICB5MTogc2l6ZS55ICsgc2l6ZS5oZWlnaHQgKyBzdWIsXHJcbiAgICAvLyAgICAgICAgIHgyOiBzaXplLnggKyBzaXplLndpZHRoLFxyXG4gICAgLy8gICAgICAgICB5Mjogc2l6ZS55ICsgc2l6ZS5oZWlnaHQgKyBzdWJcclxuICAgIC8vICAgICB9LCBsaW5lQXR0cmlidXRlKVxyXG4gICAgLy8gfSwgZWxlR3JvdXApO1xyXG5cclxuICAgIGxldCBlbGVSZWN0Q2VudGVyID0gaWNkdF9TeW5jU3ZnTm9kZTREZXNpZ24oJ2ljZHQtdGVtcC1pbnRlcmFjdGl2ZS1yZWN0LWNlbnRlcicsICdyZWN0Jywge1xyXG4gICAgICAgIGF0dHJpYnV0ZTogT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgICAgIHg6IHNpemUueCxcclxuICAgICAgICAgICAgeTogc2l6ZS55LFxyXG4gICAgICAgICAgICB3aWR0aDogc2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiBzaXplLmhlaWdodCxcclxuICAgICAgICAgICAgY2xhc3M6ICdjdXJzb3ItZHJhdydcclxuICAgICAgICB9LCByZWN0Q2VudGVyQXR0cmlidXRlKVxyXG4gICAgfSwgZWxlR3JvdXApO1xyXG5cclxuICAgIHJldHVybiBbXHJcblxyXG4gICAgXSBhcyBBcnJheTx7IGVsZW1lbnQ6IGFueSwgcG9zVHlwZTogc3RyaW5nIH0+O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc3luY05vZGVJbmRleCA9IChlbGVHcm91cDogSFRNTEVsZW1lbnQsIG5vZGVzOiBBcnJheTxpY2R0X0lEYXRhTm9kZT4pID0+IHtcclxuICAgIGxldCByZWN0Tm9kZUF0dHJpYnV0ZSA9IHtcclxuICAgICAgICBcImZpbGxcIjogc3ZnU2V0SWR4X1JlY3ROb2RlQXR0cmlidXRlLmZpbGwsXHJcbiAgICAgICAgXCJzdHJva2VcIjogc3ZnU2V0SWR4X1JlY3ROb2RlQXR0cmlidXRlLnN0cm9rZSxcclxuICAgICAgICBcInN0cm9rZS13aWR0aFwiOiBpY2R0X1NjYWxlTnVtYmVyKHN2Z1NldElkeF9SZWN0Tm9kZUF0dHJpYnV0ZS5zdHJva2VXaWR0aCksXHJcbiAgICAgICAgXCJzdHJva2UtZGFzaGFycmF5XCI6IGljZHRfU2NhbGVOdW1iZXIoc3ZnU2V0SWR4X1JlY3ROb2RlQXR0cmlidXRlLnN0cm9rZURhc2hhcnJheSlcclxuICAgIH07XHJcblxyXG4gICAgLy9jbGVhclxyXG4gICAgalF1ZXJ5KGVsZUdyb3VwKS5lbXB0eSgpO1xyXG5cclxuICAgIG5vZGVzLmZvckVhY2gobm9kZSA9PiB7XHJcbiAgICAgICAgbGV0IHsgc2l6ZSB9ID0gbm9kZTtcclxuXHJcbiAgICAgICAgaWYgKCFub2RlLmlkeCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpY2R0X1N5bmNTdmdOb2RlNERlc2lnbignaWNkdC10ZW1wLWluZGV4LXJlY3Qtbm9kZS0nICsgbm9kZS5pZCwgJ3JlY3QnLCB7XHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZTogT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgICAgICAgICB4OiBzaXplLnggLSA1LFxyXG4gICAgICAgICAgICAgICAgeTogc2l6ZS55IC0gNSxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBzaXplLndpZHRoICsgMTAsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHNpemUuaGVpZ2h0ICsgMTBcclxuICAgICAgICAgICAgfSwgcmVjdE5vZGVBdHRyaWJ1dGUpXHJcbiAgICAgICAgfSwgZWxlR3JvdXApO1xyXG5cclxuICAgICAgICBsZXQgeyBlbGVtZW50IH0gPSBpY2R0X1N2Z0ZvcmVpZ25PYmplY3QoTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDAwKSwge1xyXG4gICAgICAgICAgICBzaXplOiB7IHg6IHNpemUueCAtIDc2LCB5OiBzaXplLnkgLSA2LCB3aWR0aDogNzAsIGhlaWdodDogODAgfSxcclxuICAgICAgICAgICAgYXR0cmlidXRlOiB7fSxcclxuICAgICAgICAgICAgc3R5bGU6IHt9LFxyXG4gICAgICAgICAgICBzb3VyY2U6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdodG1sJyxcclxuICAgICAgICAgICAgICAgIGh0bWw6IHtcclxuICAgICAgICAgICAgICAgICAgICBodG1sQ29udGVudDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYDxkaXYgY2xhc3M9XCJwb3NpdGlvbi1zbGlkZVwiIHN0eWxlPVwicG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlO3RvcDowO3JpZ2h0OjA7bGluZS1oZWlnaHQ6MjJweDtcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHRpdGxlPVwiVGjhu6kgdOG7sSB4deG6pXQgaGnhu4duXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJmbG9hdDpyaWdodDtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT1cImRpc3BsYXk6YmxvY2s7d2lkdGg6MThweDtmbG9hdDpsZWZ0O3RleHQtYWxpZ246Y2VudGVyO1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1wbGF5XCIgc3R5bGU9XCJtYXJnaW46NnB4IDA7Y29sb3I6IzdkYTdkOTtmb250LXNpemU6MTJweDtcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPVwiZGlzcGxheTpibG9jazt3aWR0aDo1MHB4O2Zsb2F0OmxlZnQ7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJpZHhcIiB2YWx1ZT1cIiR7bm9kZS5pZHggPz8gMH1cIiBtaW49XCIwXCIgbWF4PVwiOTk5XCIgc3RlcD1cIjFcIiBzdHlsZT1cImJveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDoxMDAlO3BhZGRpbmc6MDtib3JkZXI6MXB4IHNvbGlkICNkZGQ7b3V0bGluZTowO3RleHQtYWxpZ246Y2VudGVyO2JhY2tncm91bmQ6I2VlZTtiYWNrZ3JvdW5kOiByYWRpYWwtZ3JhZGllbnQoI2ZmZiwgI2VlZSk7Zm9udC1zaXplOjEycHg7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cImNsZWFyOmJvdGg7XCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiB0aXRsZT1cIlRo4budaSBnaWFuIMSR4bujaShzKSwgbuG6v3UgZ2nDoSB0cuG7iyA9IDAgc+G6vSBjaHV54buDbiBzYW5nIMSR4bujaSBob8OgbiB04bqldCBob+G6oXQgxJHhu5luZyB2w6Agw6JtIHRoYW5oXCIgc3R5bGU9XCJtYXJnaW4tdG9wOjJweDtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cImZsb2F0OnJpZ2h0O1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPVwiZGlzcGxheTpibG9jazt3aWR0aDoxOHB4O2Zsb2F0OmxlZnQ7dGV4dC1hbGlnbjpjZW50ZXI7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWNsb2NrLW9cIiBzdHlsZT1cIm1hcmdpbjo1cHggMDtjb2xvcjojN2RhN2Q5O2ZvbnQtc2l6ZToxNHB4O1wiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9XCJkaXNwbGF5OmJsb2NrO3dpZHRoOjUwcHg7ZmxvYXQ6bGVmdDtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmFtZT1cInRpbWVcIiB2YWx1ZT1cIiR7bm9kZS50aW1lID8/IDB9XCIgbWluPVwiMFwiIG1heD1cIjk5OVwiIHN0ZXA9XCIwLjVcIiBzdHlsZT1cImJveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDoxMDAlO3BhZGRpbmc6MDtib3JkZXI6MXB4IHNvbGlkICNkZGQ7b3V0bGluZTowO3RleHQtYWxpZ246Y2VudGVyO2JhY2tncm91bmQ6I2VlZTtiYWNrZ3JvdW5kOiByYWRpYWwtZ3JhZGllbnQoI2ZmZiwgI2VlZSk7Zm9udC1zaXplOjEycHg7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cImNsZWFyOmJvdGg7XCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiB0aXRsZT1cIkjhu6d5IHRoaeG6v3QgbOG6rXBcIiBzdHlsZT1cIm1hcmdpbi10b3A6MnB4O1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwiZmxvYXQ6cmlnaHQ7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBuYW1lPVwicmVtb3ZlXCIgc3R5bGU9XCJib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lkdGg6MjRweDtoZWlnaHQ6MjRweDtwYWRkaW5nOjA7Ym9yZGVyOjFweCBzb2xpZCAjZGRkO2xpbmUtaGVpZ2h0OiAwO291dGxpbmU6bm9uZTtiYWNrZ3JvdW5kOiNlZWU7YmFja2dyb3VuZDogcmFkaWFsLWdyYWRpZW50KCNmZmYsICNlZWUpO1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvaWNvbi1wbmcveG9hMi5wbmdcIiBoZWlnaHQ9XCIxOFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cImNsZWFyOmJvdGg7XCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvZGl2PmBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGVsZUdyb3VwKTtcclxuXHJcbiAgICAgICAgKGVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpLmNsYXNzTGlzdC5hZGQoJ25vZGUtaW5wdXQnKTtcclxuXHJcbiAgICAgICAgalF1ZXJ5KGVsZW1lbnQpXHJcbiAgICAgICAgICAgIC5vbignY2hhbmdlJywgJ2lucHV0W25hbWU9XCJpZHhcIl0nLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbm9kZS5pZHggPSBwYXJzZUludChlLnRhcmdldC52YWx1ZSA/PyAnMCcpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAub24oJ2NoYW5nZScsICdpbnB1dFtuYW1lPVwidGltZVwiXScsIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBub2RlLnRpbWUgPSBwYXJzZUZsb2F0KGUudGFyZ2V0LnZhbHVlID8/ICcwJyk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5vbignY2xpY2snLCAnYnV0dG9uW25hbWU9XCJyZW1vdmVcIl0nLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbm9kZS5pZHggPSAwO1xyXG4gICAgICAgICAgICAgICAgbm9kZS50aW1lID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgc3luY05vZGVJbmRleChlbGVHcm91cCwgbm9kZXMpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBzeW5jQmFja2dyb3VuZCA9IChlbGVHcm91cDogSFRNTEVsZW1lbnQsIHNsaWRlPzogaWNkdF9JRGF0YVNsaWRlKSA9PiB7XHJcblxyXG4gICAgbGV0IHsgY29sb3IsIG9wYWNpdHksIHBhdGgsIHVybCwgYmFzZTY0IH0gPSBzbGlkZT8uc3ZnPy5iYWNrZ3JvdW5kID8/IHt9O1xyXG4gICAgbGV0IHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9ID0gc2xpZGU/LnN2Zz8udmlld0JveCA/PyB7IHg6IDAsIHk6IDAsIHdpZHRoOiAwLCBoZWlnaHQ6IDAgfTtcclxuXHJcbiAgICBpY2R0X1N2Z1RleHQodW5kZWZpbmVkLCB7XHJcbiAgICAgICAgc2l6ZTogeyB4OiAwLCB5OiBpY2R0X1NjYWxlTnVtYmVyKC0yMSksIHdpZHRoLCBoZWlnaHQgfSxcclxuICAgICAgICBhdHRyaWJ1dGU6IHtcclxuICAgICAgICAgICAgZmlsbDogJyM5OTknLFxyXG4gICAgICAgICAgICBmb250U2l6ZTogaWNkdF9TY2FsZU51bWJlcigxNCksXHJcbiAgICAgICAgICAgIGNsYXNzOiAnaGlkZS1vbi12aWV3ZXInXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzb3VyY2U6IHtcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0Q29udGVudDogc2xpZGU/Lm5hbWUgPz8gc2xpZGU/LmNvZGUgPz8gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LCBlbGVHcm91cCk7XHJcblxyXG4gICAgaWNkdF9TdmdSZWN0KHVuZGVmaW5lZCwge1xyXG4gICAgICAgIHNpemU6IHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9LFxyXG4gICAgICAgIGF0dHJpYnV0ZToge1xyXG4gICAgICAgICAgICBmaWxsOiAnI2ZmZicsXHJcbiAgICAgICAgICAgIHN0cm9rZTogJyM5OTknLFxyXG4gICAgICAgICAgICBzdHJva2VXaWR0aDogaWNkdF9TY2FsZU51bWJlcigxKSxcclxuICAgICAgICAgICAgc3Ryb2tlRGFzaGFycmF5OiBpY2R0X1NjYWxlTnVtYmVyKDEwKSxcclxuICAgICAgICAgICAgY2xhc3M6ICdoaWRlLW9uLXZpZXdlcidcclxuICAgICAgICB9XHJcbiAgICB9LCBlbGVHcm91cCk7XHJcblxyXG4gICAgaWYgKGNvbG9yKSB7XHJcbiAgICAgICAgaWNkdF9TdmdSZWN0KHVuZGVmaW5lZCwge1xyXG4gICAgICAgICAgICBzaXplOiB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfSxcclxuICAgICAgICAgICAgYXR0cmlidXRlOiB7IGZpbGw6IGNvbG9yLCBmaWxsT3BhY2l0eTogb3BhY2l0eSB9XHJcbiAgICAgICAgfSwgZWxlR3JvdXApO1xyXG4gICAgfVxyXG4gICAgaWYgKHBhdGgpIHtcclxuICAgICAgICBpY2R0X1N2Z0ltYWdlKHVuZGVmaW5lZCwge1xyXG4gICAgICAgICAgICBzaXplOiB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfSxcclxuICAgICAgICAgICAgc291cmNlOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnaW1hZ2UnLFxyXG4gICAgICAgICAgICAgICAgaW1hZ2U6IHsgcGF0aCwgdXJsLCBiYXNlNjQgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZWxlR3JvdXApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc3luY1Rlc3QgPSAoZWxlR3JvdXA6IEhUTUxFbGVtZW50LCBzbGlkZTogaWNkdF9JRGF0YVNsaWRlKSA9PiB7XHJcblxyXG4gICAgalF1ZXJ5KGVsZUdyb3VwKS5lbXB0eSgpO1xyXG5cclxuICAgIHN3aXRjaCAoc2xpZGUudGVzdD8udHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ3RydWVmYWxzZSc6IHtcclxuICAgICAgICAgICAgbGV0IGFuc3dlcklkID0gc2xpZGU/LnRlc3Q/LmFuc3dlcj8udHJ1ZWZhbHNlPy52YWx1ZSxcclxuICAgICAgICAgICAgICAgIGlzU3VibWl0ID0gc2xpZGUuc3ZnPy5ub2Rlcy5maW5kKGYgPT4gZi5zb3VyY2U/LnRlc3Q/LnR5cGUgPT0gJ3N1Ym1pdCcpO1xyXG5cclxuICAgICAgICAgICAgLy924bq9IGtodW5nIGPDoWMgxJHDoXAgw6FuXHJcbiAgICAgICAgICAgIHNsaWRlLnN2Zz8ubm9kZXMuZmlsdGVyKGYgPT4gZi5zb3VyY2U/LnRlc3Q/LnR5cGUgPT0gJ3RydWVmYWxzZScgJiYgKGYuaWQgIT0gYW5zd2VySWQgfHwgIWlzU3VibWl0KSkuZm9yRWFjaChub2RlID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBzdWIgPSAwLjU7XHJcbiAgICAgICAgICAgICAgICBsZXQgeyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0gPSBub2RlPy5zaXplID8/IHsgeDogMCwgeTogMCwgd2lkdGg6IDAsIGhlaWdodDogMCB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGljZHRfU3ZnQ2lyY2xlKE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwMCksIHtcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiB7IHg6IHggLSBzdWIsIHk6IHkgLSBzdWIsIHdpZHRoOiB3aWR0aCArIHN1YiAqIDIsIGhlaWdodDogaGVpZ2h0ICsgc3ViICogMiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogeyBmaWxsOiAnbm9uZScsIHN0cm9rZTogJyM1RjZDRTEnLCBzdHJva2VXaWR0aDogc3ViICogMiwgc3Ryb2tlRGFzaGFycmF5OiA0IH1cclxuICAgICAgICAgICAgICAgIH0sIGVsZUdyb3VwKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2xpZGU/LnRlc3Q/LmFuc3dlcj8udHJ1ZWZhbHNlICYmIGFuc3dlcklkICYmIGlzU3VibWl0KSB7XHJcbiAgICAgICAgICAgICAgICAvL3bDuW5nIMSRw6FuaCBk4bqldSDEkcOhcCDDoW5cclxuICAgICAgICAgICAgICAgICgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5vZGUgPSBpY2R0X1J1bi5maW5kTm9kZShhbnN3ZXJJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1YiA9IDI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfSA9IG5vZGU/LnNpemUgPz8geyB4OiAwLCB5OiAwLCB3aWR0aDogMCwgaGVpZ2h0OiAwIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGljZHRfU3ZnQ2lyY2xlKE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwMCksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogeyB4OiB4IC0gc3ViLCB5OiB5IC0gc3ViLCB3aWR0aDogd2lkdGggKyBzdWIgKiAyLCBoZWlnaHQ6IGhlaWdodCArIHN1YiAqIDIgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiB7IGZpbGw6ICdub25lJywgc3Ryb2tlOiAnIzVGNkNFMScsIHN0cm9rZVdpZHRoOiBzdWIgKiAyIH1cclxuICAgICAgICAgICAgICAgICAgICB9LCBlbGVHcm91cCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGljZHRfU3ZnQ2lyY2xlKE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwMCksIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgc2l6ZTogeyB4OiB4ICsgc3ViICogMywgeTogeSArIHN1YiAqIDMsIHdpZHRoOiB3aWR0aCAtIHN1YiAqIDYsIGhlaWdodDogaGVpZ2h0IC0gc3ViICogNiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBhdHRyaWJ1dGU6IHsgZmlsbDogJyM1RjZDRTEnIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyB9LCBlbGVHcm91cCk7XHJcbiAgICAgICAgICAgICAgICB9KSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlICdzaW5nbGVjaG9pY2UnOiB7XHJcbiAgICAgICAgICAgIGxldCBhbnN3ZXJJZCA9IHNsaWRlPy50ZXN0Py5hbnN3ZXI/LnNpbmdsZWNob2ljZT8udmFsdWUsXHJcbiAgICAgICAgICAgICAgICBpc1N1Ym1pdCA9IHNsaWRlLnN2Zz8ubm9kZXMuZmluZChmID0+IGYuc291cmNlPy50ZXN0Py50eXBlID09ICdzdWJtaXQnKTtcclxuXHJcbiAgICAgICAgICAgIC8vduG6vSBraHVuZyBjw6FjIMSRw6FwIMOhblxyXG4gICAgICAgICAgICBzbGlkZS5zdmc/Lm5vZGVzLmZpbHRlcihmID0+IGYuc291cmNlPy50ZXN0Py50eXBlID09ICdzaW5nbGVjaG9pY2UnICYmIChmLmlkICE9IGFuc3dlcklkIHx8ICFpc1N1Ym1pdCkpLmZvckVhY2gobm9kZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3ViID0gMC41O1xyXG4gICAgICAgICAgICAgICAgbGV0IHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9ID0gbm9kZT8uc2l6ZSA/PyB7IHg6IDAsIHk6IDAsIHdpZHRoOiAwLCBoZWlnaHQ6IDAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBpY2R0X1N2Z0NpcmNsZShNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMDApLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogeyB4OiB4IC0gc3ViLCB5OiB5IC0gc3ViLCB3aWR0aDogd2lkdGggKyBzdWIgKiAyLCBoZWlnaHQ6IGhlaWdodCArIHN1YiAqIDIgfSxcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6IHsgZmlsbDogJ25vbmUnLCBzdHJva2U6ICcjNUY2Q0UxJywgc3Ryb2tlV2lkdGg6IHN1YiAqIDIsIHN0cm9rZURhc2hhcnJheTogNCB9XHJcbiAgICAgICAgICAgICAgICB9LCBlbGVHcm91cCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNsaWRlPy50ZXN0Py5hbnN3ZXI/LnNpbmdsZWNob2ljZSAmJiBhbnN3ZXJJZCAmJiBpc1N1Ym1pdCkge1xyXG4gICAgICAgICAgICAgICAgKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbm9kZSA9IGljZHRfUnVuLmZpbmROb2RlKGFuc3dlcklkKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3ViID0gMjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9ID0gbm9kZT8uc2l6ZSA/PyB7IHg6IDAsIHk6IDAsIHdpZHRoOiAwLCBoZWlnaHQ6IDAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdF9TdmdDaXJjbGUoTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDAwKSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiB7IHg6IHggLSBzdWIsIHk6IHkgLSBzdWIsIHdpZHRoOiB3aWR0aCArIHN1YiAqIDIsIGhlaWdodDogaGVpZ2h0ICsgc3ViICogMiB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6IHsgZmlsbDogJ25vbmUnLCBzdHJva2U6ICcjNUY2Q0UxJywgc3Ryb2tlV2lkdGg6IHN1YiAqIDIgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIGVsZUdyb3VwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWNkdF9TdmdDaXJjbGUoTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDAwKSwge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBzaXplOiB7IHg6IHggKyBzdWIgKiAzLCB5OiB5ICsgc3ViICogMywgd2lkdGg6IHdpZHRoIC0gc3ViICogNiwgaGVpZ2h0OiBoZWlnaHQgLSBzdWIgKiA2IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGF0dHJpYnV0ZTogeyBmaWxsOiAnIzVGNkNFMScgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sIGVsZUdyb3VwKTtcclxuICAgICAgICAgICAgICAgIH0pKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgJ211bHRpY2hvaWNlJzoge1xyXG4gICAgICAgICAgICBsZXQgYW5zd2VySWRzID0gc2xpZGU/LnRlc3Q/LmFuc3dlcj8ubXVsdGljaG9pY2U/Lm1hcChtID0+IG0udmFsdWUpID8/IFtdLFxyXG4gICAgICAgICAgICAgICAgaXNTdWJtaXQgPSBzbGlkZS5zdmc/Lm5vZGVzLmZpbmQoZiA9PiBmLnNvdXJjZT8udGVzdD8udHlwZSA9PSAnc3VibWl0Jyk7XHJcblxyXG4gICAgICAgICAgICAvL3bhur0ga2h1bmcgY8OhYyDEkcOhcCDDoW5cclxuICAgICAgICAgICAgc2xpZGUuc3ZnPy5ub2Rlcy5maWx0ZXIoZiA9PiBmLnNvdXJjZT8udGVzdD8udHlwZSA9PSAnbXVsdGljaG9pY2UnICYmICghYW5zd2VySWRzLmluY2x1ZGVzKGYuaWQpIHx8ICFpc1N1Ym1pdCkpLmZvckVhY2gobm9kZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3ViID0gMC41O1xyXG4gICAgICAgICAgICAgICAgbGV0IHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9ID0gbm9kZT8uc2l6ZSA/PyB7IHg6IDAsIHk6IDAsIHdpZHRoOiAwLCBoZWlnaHQ6IDAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBpY2R0X1N2Z1JlY3QoTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDAwKSwge1xyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6IHsgeDogeCAtIHN1YiwgeTogeSAtIHN1Yiwgd2lkdGg6IHdpZHRoICsgc3ViICogMiwgaGVpZ2h0OiBoZWlnaHQgKyBzdWIgKiAyIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiB7IGZpbGw6ICdub25lJywgc3Ryb2tlOiAnIzVGNkNFMScsIHN0cm9rZVdpZHRoOiBzdWIgKiAyLCBzdHJva2VEYXNoYXJyYXk6IDQgfVxyXG4gICAgICAgICAgICAgICAgfSwgZWxlR3JvdXApO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzbGlkZT8udGVzdD8uYW5zd2VyPy5tdWx0aWNob2ljZSAmJiBhbnN3ZXJJZHMubGVuZ3RoICYmIGlzU3VibWl0KSB7XHJcbiAgICAgICAgICAgICAgICBzbGlkZT8udGVzdD8uYW5zd2VyPy5tdWx0aWNob2ljZS5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBub2RlID0gaWNkdF9SdW4uZmluZE5vZGUoaXRlbS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1YiA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9ID0gbm9kZT8uc2l6ZSA/PyB7IHg6IDAsIHk6IDAsIHdpZHRoOiAwLCBoZWlnaHQ6IDAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWNkdF9TdmdSZWN0KE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwMCksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogeyB4OiB4IC0gc3ViLCB5OiB5IC0gc3ViLCB3aWR0aDogd2lkdGggKyBzdWIgKiAyLCBoZWlnaHQ6IGhlaWdodCArIHN1YiAqIDIgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiB7IGZpbGw6ICdub25lJywgc3Ryb2tlOiAnIzVGNkNFMScsIHN0cm9rZVdpZHRoOiBzdWIgKiAyIH1cclxuICAgICAgICAgICAgICAgICAgICB9LCBlbGVHcm91cCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGljZHRfU3ZnUmVjdChNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMDApLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHNpemU6IHsgeDogeCArIHN1YiAqIDMsIHk6IHkgKyBzdWIgKiAzLCB3aWR0aDogd2lkdGggLSBzdWIgKiA2LCBoZWlnaHQ6IGhlaWdodCAtIHN1YiAqIDYgfSxcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgYXR0cmlidXRlOiB7IGZpbGw6ICcjNUY2Q0UxJyB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gfSwgZWxlR3JvdXApO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCB7IHZfbWVkaWF0eXBlIH0gZnJvbSBcIi4uLy4uL2xvb2t1cC92X21lZGlhdHlwZVwiO1xyXG5pbXBvcnQgeyB2X29zc3R5cGUgfSBmcm9tIFwiLi4vLi4vbG9va3VwL3Zfb3NzdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldE1lZGlhVmlld2VyVXJsID0gKG1lZGlhOiB7IHR5cGU/OiBudW1iZXIsIG9zcz86IG51bWJlciwgcmVhZGZpbGV1cGxvYWR1cmw/OiBzdHJpbmcsIHBhdGg/OiBzdHJpbmcsIHVybD86IHN0cmluZyB9KSA9PiB7XHJcbiAgICBzd2l0Y2ggKG1lZGlhPy50eXBlKSB7XHJcbiAgICAgICAgY2FzZSB2X21lZGlhdHlwZS5JTUFHRToge1xyXG4gICAgICAgICAgICByZXR1cm4gJ2Fzc2V0cy9pZnJhbWUvbGliL21rLWltYWdlLXZpZXdlci92aWV3ZXIuaHRtbD91cmw9JyArIG1lZGlhLnJlYWRmaWxldXBsb2FkdXJsICsgbWVkaWEucGF0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSB2X21lZGlhdHlwZS5BVURJTzoge1xyXG4gICAgICAgICAgICByZXR1cm4gJ2Fzc2V0cy9pZnJhbWUvbGliL21rLWF1ZGlvLXBsYXllci9wbGF5ZXIuaHRtbD91cmw9JyArIG1lZGlhLnJlYWRmaWxldXBsb2FkdXJsICsgbWVkaWEucGF0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSB2X21lZGlhdHlwZS5WSURFTzoge1xyXG4gICAgICAgICAgICByZXR1cm4gJ2Fzc2V0cy9pZnJhbWUvbGliL21rLXZpZGVvLXBsYXllci9wbGF5ZXIuaHRtbD91cmw9JyArIG1lZGlhLnJlYWRmaWxldXBsb2FkdXJsICsgbWVkaWEucGF0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSB2X21lZGlhdHlwZS5PRkZJQ0U6IHtcclxuICAgICAgICAgICAgcmV0dXJuICdodHRwczovL3ZpZXcub2ZmaWNlYXBwcy5saXZlLmNvbS9vcC92aWV3LmFzcHg/c3JjPScgKyBtZWRpYS5yZWFkZmlsZXVwbG9hZHVybCArIG1lZGlhLnBhdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2Ugdl9tZWRpYXR5cGUuUERGOiB7XHJcbiAgICAgICAgICAgIHJldHVybiAnYXNzZXRzL2lmcmFtZS9saWIvUERGUmVhZGVyL3dlYi92aWV3ZXIuaHRtbD9maWxlPScgKyBtZWRpYS5yZWFkZmlsZXVwbG9hZHVybCArIG1lZGlhLnBhdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2Ugdl9tZWRpYXR5cGUuSFRNTDoge1xyXG4gICAgICAgICAgICByZXR1cm4gJycgKyBtZWRpYS5yZWFkZmlsZXVwbG9hZHVybCArIG1lZGlhLnBhdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2Ugdl9tZWRpYXR5cGUuSU1BR0VfQU5JTUFUSU9OOiB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJyArIG1lZGlhLnJlYWRmaWxldXBsb2FkdXJsICsgbWVkaWEucGF0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSB2X21lZGlhdHlwZS5QSEVUOiB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJyArIG1lZGlhLnJlYWRmaWxldXBsb2FkdXJsICsgbWVkaWEucGF0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSB2X21lZGlhdHlwZS5aSVA6XHJcbiAgICAgICAgY2FzZSB2X21lZGlhdHlwZS5TQ09STToge1xyXG4gICAgICAgICAgICBpZiAobWVkaWEucGF0aD8uc3BsaXQoJy8nKT8ucG9wKCkgPT0gJ2ltc21hbmlmZXN0LnhtbCcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnYXNzZXRzL2lmcmFtZS9saWIvU2Nvcm1Qb29sX1BsYXllci9wbGF5ZXIuaHRtbD91cmw9JyArIG1lZGlhLnJlYWRmaWxldXBsb2FkdXJsICsgbWVkaWEucGF0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gJycgKyBtZWRpYS5yZWFkZmlsZXVwbG9hZHVybCArIG1lZGlhLnBhdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2Ugdl9tZWRpYXR5cGUuVFJBQ0s6IHtcclxuICAgICAgICAgICAgcmV0dXJuICcnICsgbWVkaWEucmVhZGZpbGV1cGxvYWR1cmwgKyBtZWRpYS5wYXRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIHZfbWVkaWF0eXBlLlRFWFQ6IHtcclxuICAgICAgICAgICAgcmV0dXJuICcnICsgbWVkaWEucmVhZGZpbGV1cGxvYWR1cmwgKyBtZWRpYS5wYXRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIHZfbWVkaWF0eXBlLkxJTks6IHtcclxuICAgICAgICAgICAgc3dpdGNoIChtZWRpYS5vc3MpIHtcclxuICAgICAgICAgICAgICAgIGNhc2Ugdl9vc3N0eXBlLlNDT1JNOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdhc3NldHMvaWZyYW1lL2xpYi9TY29ybVBvb2xfUGxheWVyL3BsYXllci5odG1sP3VybD0nICsgbWVkaWEudXJsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSB2X29zc3R5cGUuWU9VVFVCRToge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRZb3V0dWJlRW1iZWRVcmwobWVkaWEudXJsKSA/PyAnJztcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIHZfb3NzdHlwZS5QSEVUOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lZGlhLnVybCA/PyAnJztcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lZGlhLnVybCA/PyAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJyArIG1lZGlhLnJlYWRmaWxldXBsb2FkdXJsICsgbWVkaWEucGF0aDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IGdldFlvdXR1YmVFbWJlZFVybCA9ICh1cmw/OiBzdHJpbmcpID0+IHtcclxuICAgIGxldCB5b3V0dWJlSWQgPSBnZXRZb3V0dWJlSWQodXJsKTtcclxuICAgIGlmICh5b3V0dWJlSWQpIHtcclxuICAgICAgICByZXR1cm4gJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLycgKyB5b3V0dWJlSWQgKyAnPydcclxuICAgICAgICAgICAgKyBqUXVlcnkucGFyYW0oe1xyXG4gICAgICAgICAgICAgICAgd21vZGU6ICdvcGFxdWUnLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAwLFxyXG4gICAgICAgICAgICAgICAgaGQ6IDEsXHJcbiAgICAgICAgICAgICAgICBhdXRvcGxheTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhdXRvaGlkZTogMSxcclxuICAgICAgICAgICAgICAgIGVuYWJsZWpzYXBpOiAxLFxyXG4gICAgICAgICAgICAgICAgbW9kZXN0YnJhbmRpbmc6IDEsXHJcbiAgICAgICAgICAgICAgICB2ZXJzaW9uOiAzLFxyXG4gICAgICAgICAgICAgICAgaGw6ICd2aV9WTicsXHJcbiAgICAgICAgICAgICAgICByZWw6IDAsXHJcbiAgICAgICAgICAgICAgICBzaG93aW5mbzogMCxcclxuICAgICAgICAgICAgICAgIGl2X2xvYWRfcG9saWN5OiAzXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbmNvbnN0IGdldFlvdXR1YmVJZCA9ICh1cmw/OiBzdHJpbmcpID0+IHtcclxuICAgIGxldCByZXMgPSB1cmw/Lm1hdGNoKC8oPzouKz8pPyg/OlxcL3ZcXC98d2F0Y2hcXC98XFw/dlxcPXxcXCZ2XFw9fHlvdXR1XFwuYmVcXC98XFwvdlxcPXxeeW91dHVcXC5iZVxcL3xlbWJlZFxcLykoW2EtekEtWjAtOV8tXXsxMX0pKy8pO1xyXG4gICAgcmV0dXJuIHJlcyAmJiByZXMubGVuZ3RoID49IDIgPyByZXNbMV0gOiBudWxsO1xyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFzY2VuZGluZyhhLCBiKSB7XG4gIHJldHVybiBhID09IG51bGwgfHwgYiA9PSBudWxsID8gTmFOIDogYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT0gbnVsbCB8fCBiID09IG51bGwgPyBOYU5cbiAgICA6IGIgPCBhID8gLTFcbiAgICA6IGIgPiBhID8gMVxuICAgIDogYiA+PSBhID8gMFxuICAgIDogTmFOO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmcuanNcIjtcbmltcG9ydCBkZXNjZW5kaW5nIGZyb20gXCIuL2Rlc2NlbmRpbmcuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmlzZWN0b3IoZikge1xuICBsZXQgY29tcGFyZTEsIGNvbXBhcmUyLCBkZWx0YTtcblxuICAvLyBJZiBhbiBhY2Nlc3NvciBpcyBzcGVjaWZpZWQsIHByb21vdGUgaXQgdG8gYSBjb21wYXJhdG9yLiBJbiB0aGlzIGNhc2Ugd2VcbiAgLy8gY2FuIHRlc3Qgd2hldGhlciB0aGUgc2VhcmNoIHZhbHVlIGlzIChzZWxmLSkgY29tcGFyYWJsZS4gV2UgY2Fu4oCZdCBkbyB0aGlzXG4gIC8vIGZvciBhIGNvbXBhcmF0b3IgKGV4Y2VwdCBmb3Igc3BlY2lmaWMsIGtub3duIGNvbXBhcmF0b3JzKSBiZWNhdXNlIHdlIGNhbuKAmXRcbiAgLy8gdGVsbCBpZiB0aGUgY29tcGFyYXRvciBpcyBzeW1tZXRyaWMsIGFuZCBhbiBhc3ltbWV0cmljIGNvbXBhcmF0b3IgY2Fu4oCZdCBiZVxuICAvLyB1c2VkIHRvIHRlc3Qgd2hldGhlciBhIHNpbmdsZSB2YWx1ZSBpcyBjb21wYXJhYmxlLlxuICBpZiAoZi5sZW5ndGggIT09IDIpIHtcbiAgICBjb21wYXJlMSA9IGFzY2VuZGluZztcbiAgICBjb21wYXJlMiA9IChkLCB4KSA9PiBhc2NlbmRpbmcoZihkKSwgeCk7XG4gICAgZGVsdGEgPSAoZCwgeCkgPT4gZihkKSAtIHg7XG4gIH0gZWxzZSB7XG4gICAgY29tcGFyZTEgPSBmID09PSBhc2NlbmRpbmcgfHwgZiA9PT0gZGVzY2VuZGluZyA/IGYgOiB6ZXJvO1xuICAgIGNvbXBhcmUyID0gZjtcbiAgICBkZWx0YSA9IGY7XG4gIH1cblxuICBmdW5jdGlvbiBsZWZ0KGEsIHgsIGxvID0gMCwgaGkgPSBhLmxlbmd0aCkge1xuICAgIGlmIChsbyA8IGhpKSB7XG4gICAgICBpZiAoY29tcGFyZTEoeCwgeCkgIT09IDApIHJldHVybiBoaTtcbiAgICAgIGRvIHtcbiAgICAgICAgY29uc3QgbWlkID0gKGxvICsgaGkpID4+PiAxO1xuICAgICAgICBpZiAoY29tcGFyZTIoYVttaWRdLCB4KSA8IDApIGxvID0gbWlkICsgMTtcbiAgICAgICAgZWxzZSBoaSA9IG1pZDtcbiAgICAgIH0gd2hpbGUgKGxvIDwgaGkpO1xuICAgIH1cbiAgICByZXR1cm4gbG87XG4gIH1cblxuICBmdW5jdGlvbiByaWdodChhLCB4LCBsbyA9IDAsIGhpID0gYS5sZW5ndGgpIHtcbiAgICBpZiAobG8gPCBoaSkge1xuICAgICAgaWYgKGNvbXBhcmUxKHgsIHgpICE9PSAwKSByZXR1cm4gaGk7XG4gICAgICBkbyB7XG4gICAgICAgIGNvbnN0IG1pZCA9IChsbyArIGhpKSA+Pj4gMTtcbiAgICAgICAgaWYgKGNvbXBhcmUyKGFbbWlkXSwgeCkgPD0gMCkgbG8gPSBtaWQgKyAxO1xuICAgICAgICBlbHNlIGhpID0gbWlkO1xuICAgICAgfSB3aGlsZSAobG8gPCBoaSk7XG4gICAgfVxuICAgIHJldHVybiBsbztcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRlcihhLCB4LCBsbyA9IDAsIGhpID0gYS5sZW5ndGgpIHtcbiAgICBjb25zdCBpID0gbGVmdChhLCB4LCBsbywgaGkgLSAxKTtcbiAgICByZXR1cm4gaSA+IGxvICYmIGRlbHRhKGFbaSAtIDFdLCB4KSA+IC1kZWx0YShhW2ldLCB4KSA/IGkgLSAxIDogaTtcbiAgfVxuXG4gIHJldHVybiB7bGVmdCwgY2VudGVyLCByaWdodH07XG59XG5cbmZ1bmN0aW9uIHplcm8oKSB7XG4gIHJldHVybiAwO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbnVtYmVyKHgpIHtcbiAgcmV0dXJuIHggPT09IG51bGwgPyBOYU4gOiAreDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uKiBudW1iZXJzKHZhbHVlcywgdmFsdWVvZikge1xuICBpZiAodmFsdWVvZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiAodmFsdWUgPSArdmFsdWUpID49IHZhbHVlKSB7XG4gICAgICAgIHlpZWxkIHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgaW5kZXggPSAtMTtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlLCArK2luZGV4LCB2YWx1ZXMpKSAhPSBudWxsICYmICh2YWx1ZSA9ICt2YWx1ZSkgPj0gdmFsdWUpIHtcbiAgICAgICAgeWllbGQgdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZy5qc1wiO1xuaW1wb3J0IGJpc2VjdG9yIGZyb20gXCIuL2Jpc2VjdG9yLmpzXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuXG5jb25zdCBhc2NlbmRpbmdCaXNlY3QgPSBiaXNlY3Rvcihhc2NlbmRpbmcpO1xuZXhwb3J0IGNvbnN0IGJpc2VjdFJpZ2h0ID0gYXNjZW5kaW5nQmlzZWN0LnJpZ2h0O1xuZXhwb3J0IGNvbnN0IGJpc2VjdExlZnQgPSBhc2NlbmRpbmdCaXNlY3QubGVmdDtcbmV4cG9ydCBjb25zdCBiaXNlY3RDZW50ZXIgPSBiaXNlY3RvcihudW1iZXIpLmNlbnRlcjtcbmV4cG9ydCBkZWZhdWx0IGJpc2VjdFJpZ2h0O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGJsdXIodmFsdWVzLCByKSB7XG4gIGlmICghKChyID0gK3IpID49IDApKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcImludmFsaWQgclwiKTtcbiAgbGV0IGxlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG4gIGlmICghKChsZW5ndGggPSBNYXRoLmZsb29yKGxlbmd0aCkpID49IDApKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcImludmFsaWQgbGVuZ3RoXCIpO1xuICBpZiAoIWxlbmd0aCB8fCAhcikgcmV0dXJuIHZhbHVlcztcbiAgY29uc3QgYmx1ciA9IGJsdXJmKHIpO1xuICBjb25zdCB0ZW1wID0gdmFsdWVzLnNsaWNlKCk7XG4gIGJsdXIodmFsdWVzLCB0ZW1wLCAwLCBsZW5ndGgsIDEpO1xuICBibHVyKHRlbXAsIHZhbHVlcywgMCwgbGVuZ3RoLCAxKTtcbiAgYmx1cih2YWx1ZXMsIHRlbXAsIDAsIGxlbmd0aCwgMSk7XG4gIHJldHVybiB2YWx1ZXM7XG59XG5cbmV4cG9ydCBjb25zdCBibHVyMiA9IEJsdXIyKGJsdXJmKTtcblxuZXhwb3J0IGNvbnN0IGJsdXJJbWFnZSA9IEJsdXIyKGJsdXJmSW1hZ2UpO1xuXG5mdW5jdGlvbiBCbHVyMihibHVyKSB7XG4gIHJldHVybiBmdW5jdGlvbihkYXRhLCByeCwgcnkgPSByeCkge1xuICAgIGlmICghKChyeCA9ICtyeCkgPj0gMCkpIHRocm93IG5ldyBSYW5nZUVycm9yKFwiaW52YWxpZCByeFwiKTtcbiAgICBpZiAoISgocnkgPSArcnkpID49IDApKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcImludmFsaWQgcnlcIik7XG4gICAgbGV0IHtkYXRhOiB2YWx1ZXMsIHdpZHRoLCBoZWlnaHR9ID0gZGF0YTtcbiAgICBpZiAoISgod2lkdGggPSBNYXRoLmZsb29yKHdpZHRoKSkgPj0gMCkpIHRocm93IG5ldyBSYW5nZUVycm9yKFwiaW52YWxpZCB3aWR0aFwiKTtcbiAgICBpZiAoISgoaGVpZ2h0ID0gTWF0aC5mbG9vcihoZWlnaHQgIT09IHVuZGVmaW5lZCA/IGhlaWdodCA6IHZhbHVlcy5sZW5ndGggLyB3aWR0aCkpID49IDApKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcImludmFsaWQgaGVpZ2h0XCIpO1xuICAgIGlmICghd2lkdGggfHwgIWhlaWdodCB8fCAoIXJ4ICYmICFyeSkpIHJldHVybiBkYXRhO1xuICAgIGNvbnN0IGJsdXJ4ID0gcnggJiYgYmx1cihyeCk7XG4gICAgY29uc3QgYmx1cnkgPSByeSAmJiBibHVyKHJ5KTtcbiAgICBjb25zdCB0ZW1wID0gdmFsdWVzLnNsaWNlKCk7XG4gICAgaWYgKGJsdXJ4ICYmIGJsdXJ5KSB7XG4gICAgICBibHVyaChibHVyeCwgdGVtcCwgdmFsdWVzLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIGJsdXJoKGJsdXJ4LCB2YWx1ZXMsIHRlbXAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgYmx1cmgoYmx1cngsIHRlbXAsIHZhbHVlcywgd2lkdGgsIGhlaWdodCk7XG4gICAgICBibHVydihibHVyeSwgdmFsdWVzLCB0ZW1wLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIGJsdXJ2KGJsdXJ5LCB0ZW1wLCB2YWx1ZXMsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgYmx1cnYoYmx1cnksIHZhbHVlcywgdGVtcCwgd2lkdGgsIGhlaWdodCk7XG4gICAgfSBlbHNlIGlmIChibHVyeCkge1xuICAgICAgYmx1cmgoYmx1cngsIHZhbHVlcywgdGVtcCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICBibHVyaChibHVyeCwgdGVtcCwgdmFsdWVzLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIGJsdXJoKGJsdXJ4LCB2YWx1ZXMsIHRlbXAsIHdpZHRoLCBoZWlnaHQpO1xuICAgIH0gZWxzZSBpZiAoYmx1cnkpIHtcbiAgICAgIGJsdXJ2KGJsdXJ5LCB2YWx1ZXMsIHRlbXAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgYmx1cnYoYmx1cnksIHRlbXAsIHZhbHVlcywgd2lkdGgsIGhlaWdodCk7XG4gICAgICBibHVydihibHVyeSwgdmFsdWVzLCB0ZW1wLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJsdXJoKGJsdXIsIFQsIFMsIHcsIGgpIHtcbiAgZm9yIChsZXQgeSA9IDAsIG4gPSB3ICogaDsgeSA8IG47KSB7XG4gICAgYmx1cihULCBTLCB5LCB5ICs9IHcsIDEpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJsdXJ2KGJsdXIsIFQsIFMsIHcsIGgpIHtcbiAgZm9yIChsZXQgeCA9IDAsIG4gPSB3ICogaDsgeCA8IHc7ICsreCkge1xuICAgIGJsdXIoVCwgUywgeCwgeCArIG4sIHcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJsdXJmSW1hZ2UocmFkaXVzKSB7XG4gIGNvbnN0IGJsdXIgPSBibHVyZihyYWRpdXMpO1xuICByZXR1cm4gKFQsIFMsIHN0YXJ0LCBzdG9wLCBzdGVwKSA9PiB7XG4gICAgc3RhcnQgPDw9IDIsIHN0b3AgPDw9IDIsIHN0ZXAgPDw9IDI7XG4gICAgYmx1cihULCBTLCBzdGFydCArIDAsIHN0b3AgKyAwLCBzdGVwKTtcbiAgICBibHVyKFQsIFMsIHN0YXJ0ICsgMSwgc3RvcCArIDEsIHN0ZXApO1xuICAgIGJsdXIoVCwgUywgc3RhcnQgKyAyLCBzdG9wICsgMiwgc3RlcCk7XG4gICAgYmx1cihULCBTLCBzdGFydCArIDMsIHN0b3AgKyAzLCBzdGVwKTtcbiAgfTtcbn1cblxuLy8gR2l2ZW4gYSB0YXJnZXQgYXJyYXkgVCwgYSBzb3VyY2UgYXJyYXkgUywgc2V0cyBlYWNoIHZhbHVlIFRbaV0gdG8gdGhlIGF2ZXJhZ2Vcbi8vIG9mIHtTW2kgLSByXSwg4oCmLCBTW2ldLCDigKYsIFNbaSArIHJdfSwgd2hlcmUgciA9IOKMinJhZGl1c+KMiywgc3RhcnQgPD0gaSA8IHN0b3AsXG4vLyBmb3IgZWFjaCBpLCBpICsgc3RlcCwgaSArIDIgKiBzdGVwLCBldGMuLCBhbmQgd2hlcmUgU1tqXSBpcyBjbGFtcGVkIGJldHdlZW5cbi8vIFNbc3RhcnRdIChpbmNsdXNpdmUpIGFuZCBTW3N0b3BdIChleGNsdXNpdmUpLiBJZiB0aGUgZ2l2ZW4gcmFkaXVzIGlzIG5vdCBhblxuLy8gaW50ZWdlciwgU1tpIC0gciAtIDFdIGFuZCBTW2kgKyByICsgMV0gYXJlIGFkZGVkIHRvIHRoZSBzdW0sIGVhY2ggd2VpZ2h0ZWRcbi8vIGFjY29yZGluZyB0byByIC0g4oyKcmFkaXVz4oyLLlxuZnVuY3Rpb24gYmx1cmYocmFkaXVzKSB7XG4gIGNvbnN0IHJhZGl1czAgPSBNYXRoLmZsb29yKHJhZGl1cyk7XG4gIGlmIChyYWRpdXMwID09PSByYWRpdXMpIHJldHVybiBibHVyaShyYWRpdXMpO1xuICBjb25zdCB0ID0gcmFkaXVzIC0gcmFkaXVzMDtcbiAgY29uc3QgdyA9IDIgKiByYWRpdXMgKyAxO1xuICByZXR1cm4gKFQsIFMsIHN0YXJ0LCBzdG9wLCBzdGVwKSA9PiB7IC8vIHN0b3AgbXVzdCBiZSBhbGlnbmVkIVxuICAgIGlmICghKChzdG9wIC09IHN0ZXApID49IHN0YXJ0KSkgcmV0dXJuOyAvLyBpbmNsdXNpdmUgc3RvcFxuICAgIGxldCBzdW0gPSByYWRpdXMwICogU1tzdGFydF07XG4gICAgY29uc3QgczAgPSBzdGVwICogcmFkaXVzMDtcbiAgICBjb25zdCBzMSA9IHMwICsgc3RlcDtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQsIGogPSBzdGFydCArIHMwOyBpIDwgajsgaSArPSBzdGVwKSB7XG4gICAgICBzdW0gKz0gU1tNYXRoLm1pbihzdG9wLCBpKV07XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSBzdGFydCwgaiA9IHN0b3A7IGkgPD0gajsgaSArPSBzdGVwKSB7XG4gICAgICBzdW0gKz0gU1tNYXRoLm1pbihzdG9wLCBpICsgczApXTtcbiAgICAgIFRbaV0gPSAoc3VtICsgdCAqIChTW01hdGgubWF4KHN0YXJ0LCBpIC0gczEpXSArIFNbTWF0aC5taW4oc3RvcCwgaSArIHMxKV0pKSAvIHc7XG4gICAgICBzdW0gLT0gU1tNYXRoLm1heChzdGFydCwgaSAtIHMwKV07XG4gICAgfVxuICB9O1xufVxuXG4vLyBMaWtlIGJsdXJmLCBidXQgb3B0aW1pemVkIGZvciBpbnRlZ2VyIHJhZGl1cy5cbmZ1bmN0aW9uIGJsdXJpKHJhZGl1cykge1xuICBjb25zdCB3ID0gMiAqIHJhZGl1cyArIDE7XG4gIHJldHVybiAoVCwgUywgc3RhcnQsIHN0b3AsIHN0ZXApID0+IHsgLy8gc3RvcCBtdXN0IGJlIGFsaWduZWQhXG4gICAgaWYgKCEoKHN0b3AgLT0gc3RlcCkgPj0gc3RhcnQpKSByZXR1cm47IC8vIGluY2x1c2l2ZSBzdG9wXG4gICAgbGV0IHN1bSA9IHJhZGl1cyAqIFNbc3RhcnRdO1xuICAgIGNvbnN0IHMgPSBzdGVwICogcmFkaXVzO1xuICAgIGZvciAobGV0IGkgPSBzdGFydCwgaiA9IHN0YXJ0ICsgczsgaSA8IGo7IGkgKz0gc3RlcCkge1xuICAgICAgc3VtICs9IFNbTWF0aC5taW4oc3RvcCwgaSldO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gc3RhcnQsIGogPSBzdG9wOyBpIDw9IGo7IGkgKz0gc3RlcCkge1xuICAgICAgc3VtICs9IFNbTWF0aC5taW4oc3RvcCwgaSArIHMpXTtcbiAgICAgIFRbaV0gPSBzdW0gLyB3O1xuICAgICAgc3VtIC09IFNbTWF0aC5tYXgoc3RhcnQsIGkgLSBzKV07XG4gICAgfVxuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY291bnQodmFsdWVzLCB2YWx1ZW9mKSB7XG4gIGxldCBjb3VudCA9IDA7XG4gIGlmICh2YWx1ZW9mID09PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmICh2YWx1ZSA9ICt2YWx1ZSkgPj0gdmFsdWUpIHtcbiAgICAgICAgKytjb3VudDtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZSwgKytpbmRleCwgdmFsdWVzKSkgIT0gbnVsbCAmJiAodmFsdWUgPSArdmFsdWUpID49IHZhbHVlKSB7XG4gICAgICAgICsrY291bnQ7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjb3VudDtcbn1cbiIsImZ1bmN0aW9uIGxlbmd0aChhcnJheSkge1xuICByZXR1cm4gYXJyYXkubGVuZ3RoIHwgMDtcbn1cblxuZnVuY3Rpb24gZW1wdHkobGVuZ3RoKSB7XG4gIHJldHVybiAhKGxlbmd0aCA+IDApO1xufVxuXG5mdW5jdGlvbiBhcnJheWlmeSh2YWx1ZXMpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZXMgIT09IFwib2JqZWN0XCIgfHwgXCJsZW5ndGhcIiBpbiB2YWx1ZXMgPyB2YWx1ZXMgOiBBcnJheS5mcm9tKHZhbHVlcyk7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZXIocmVkdWNlKSB7XG4gIHJldHVybiB2YWx1ZXMgPT4gcmVkdWNlKC4uLnZhbHVlcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyb3NzKC4uLnZhbHVlcykge1xuICBjb25zdCByZWR1Y2UgPSB0eXBlb2YgdmFsdWVzW3ZhbHVlcy5sZW5ndGggLSAxXSA9PT0gXCJmdW5jdGlvblwiICYmIHJlZHVjZXIodmFsdWVzLnBvcCgpKTtcbiAgdmFsdWVzID0gdmFsdWVzLm1hcChhcnJheWlmeSk7XG4gIGNvbnN0IGxlbmd0aHMgPSB2YWx1ZXMubWFwKGxlbmd0aCk7XG4gIGNvbnN0IGogPSB2YWx1ZXMubGVuZ3RoIC0gMTtcbiAgY29uc3QgaW5kZXggPSBuZXcgQXJyYXkoaiArIDEpLmZpbGwoMCk7XG4gIGNvbnN0IHByb2R1Y3QgPSBbXTtcbiAgaWYgKGogPCAwIHx8IGxlbmd0aHMuc29tZShlbXB0eSkpIHJldHVybiBwcm9kdWN0O1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHByb2R1Y3QucHVzaChpbmRleC5tYXAoKGosIGkpID0+IHZhbHVlc1tpXVtqXSkpO1xuICAgIGxldCBpID0gajtcbiAgICB3aGlsZSAoKytpbmRleFtpXSA9PT0gbGVuZ3Roc1tpXSkge1xuICAgICAgaWYgKGkgPT09IDApIHJldHVybiByZWR1Y2UgPyBwcm9kdWN0Lm1hcChyZWR1Y2UpIDogcHJvZHVjdDtcbiAgICAgIGluZGV4W2ktLV0gPSAwO1xuICAgIH1cbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3Vtc3VtKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgc3VtID0gMCwgaW5kZXggPSAwO1xuICByZXR1cm4gRmxvYXQ2NEFycmF5LmZyb20odmFsdWVzLCB2YWx1ZW9mID09PSB1bmRlZmluZWRcbiAgICA/IHYgPT4gKHN1bSArPSArdiB8fCAwKVxuICAgIDogdiA9PiAoc3VtICs9ICt2YWx1ZW9mKHYsIGluZGV4KyssIHZhbHVlcykgfHwgMCkpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZhcmlhbmNlKHZhbHVlcywgdmFsdWVvZikge1xuICBsZXQgY291bnQgPSAwO1xuICBsZXQgZGVsdGE7XG4gIGxldCBtZWFuID0gMDtcbiAgbGV0IHN1bSA9IDA7XG4gIGlmICh2YWx1ZW9mID09PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmICh2YWx1ZSA9ICt2YWx1ZSkgPj0gdmFsdWUpIHtcbiAgICAgICAgZGVsdGEgPSB2YWx1ZSAtIG1lYW47XG4gICAgICAgIG1lYW4gKz0gZGVsdGEgLyArK2NvdW50O1xuICAgICAgICBzdW0gKz0gZGVsdGEgKiAodmFsdWUgLSBtZWFuKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZSwgKytpbmRleCwgdmFsdWVzKSkgIT0gbnVsbCAmJiAodmFsdWUgPSArdmFsdWUpID49IHZhbHVlKSB7XG4gICAgICAgIGRlbHRhID0gdmFsdWUgLSBtZWFuO1xuICAgICAgICBtZWFuICs9IGRlbHRhIC8gKytjb3VudDtcbiAgICAgICAgc3VtICs9IGRlbHRhICogKHZhbHVlIC0gbWVhbik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChjb3VudCA+IDEpIHJldHVybiBzdW0gLyAoY291bnQgLSAxKTtcbn1cbiIsImltcG9ydCB2YXJpYW5jZSBmcm9tIFwiLi92YXJpYW5jZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZXZpYXRpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIGNvbnN0IHYgPSB2YXJpYW5jZSh2YWx1ZXMsIHZhbHVlb2YpO1xuICByZXR1cm4gdiA/IE1hdGguc3FydCh2KSA6IHY7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRlbnQodmFsdWVzLCB2YWx1ZW9mKSB7XG4gIGxldCBtaW47XG4gIGxldCBtYXg7XG4gIGlmICh2YWx1ZW9mID09PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgaWYgKG1pbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHZhbHVlID49IHZhbHVlKSBtaW4gPSBtYXggPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobWluID4gdmFsdWUpIG1pbiA9IHZhbHVlO1xuICAgICAgICAgIGlmIChtYXggPCB2YWx1ZSkgbWF4ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZSwgKytpbmRleCwgdmFsdWVzKSkgIT0gbnVsbCkge1xuICAgICAgICBpZiAobWluID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAodmFsdWUgPj0gdmFsdWUpIG1pbiA9IG1heCA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChtaW4gPiB2YWx1ZSkgbWluID0gdmFsdWU7XG4gICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gW21pbiwgbWF4XTtcbn1cbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9weXRob24vY3B5dGhvbi9ibG9iL2E3NGVlYTIzOGY1YmFiYTE1Nzk3ZTJlOGI1NzBkMTUzYmM4NjkwYTcvTW9kdWxlcy9tYXRobW9kdWxlLmMjTDE0MjNcbmV4cG9ydCBjbGFzcyBBZGRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3BhcnRpYWxzID0gbmV3IEZsb2F0NjRBcnJheSgzMik7XG4gICAgdGhpcy5fbiA9IDA7XG4gIH1cbiAgYWRkKHgpIHtcbiAgICBjb25zdCBwID0gdGhpcy5fcGFydGlhbHM7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5fbiAmJiBqIDwgMzI7IGorKykge1xuICAgICAgY29uc3QgeSA9IHBbal0sXG4gICAgICAgIGhpID0geCArIHksXG4gICAgICAgIGxvID0gTWF0aC5hYnMoeCkgPCBNYXRoLmFicyh5KSA/IHggLSAoaGkgLSB5KSA6IHkgLSAoaGkgLSB4KTtcbiAgICAgIGlmIChsbykgcFtpKytdID0gbG87XG4gICAgICB4ID0gaGk7XG4gICAgfVxuICAgIHBbaV0gPSB4O1xuICAgIHRoaXMuX24gPSBpICsgMTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB2YWx1ZU9mKCkge1xuICAgIGNvbnN0IHAgPSB0aGlzLl9wYXJ0aWFscztcbiAgICBsZXQgbiA9IHRoaXMuX24sIHgsIHksIGxvLCBoaSA9IDA7XG4gICAgaWYgKG4gPiAwKSB7XG4gICAgICBoaSA9IHBbLS1uXTtcbiAgICAgIHdoaWxlIChuID4gMCkge1xuICAgICAgICB4ID0gaGk7XG4gICAgICAgIHkgPSBwWy0tbl07XG4gICAgICAgIGhpID0geCArIHk7XG4gICAgICAgIGxvID0geSAtIChoaSAtIHgpO1xuICAgICAgICBpZiAobG8pIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKG4gPiAwICYmICgobG8gPCAwICYmIHBbbiAtIDFdIDwgMCkgfHwgKGxvID4gMCAmJiBwW24gLSAxXSA+IDApKSkge1xuICAgICAgICB5ID0gbG8gKiAyO1xuICAgICAgICB4ID0gaGkgKyB5O1xuICAgICAgICBpZiAoeSA9PSB4IC0gaGkpIGhpID0geDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmc3VtKHZhbHVlcywgdmFsdWVvZikge1xuICBjb25zdCBhZGRlciA9IG5ldyBBZGRlcigpO1xuICBpZiAodmFsdWVvZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAodmFsdWUgPSArdmFsdWUpIHtcbiAgICAgICAgYWRkZXIuYWRkKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAodmFsdWUgPSArdmFsdWVvZih2YWx1ZSwgKytpbmRleCwgdmFsdWVzKSkge1xuICAgICAgICBhZGRlci5hZGQodmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gK2FkZGVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmN1bXN1bSh2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgY29uc3QgYWRkZXIgPSBuZXcgQWRkZXIoKTtcbiAgbGV0IGluZGV4ID0gLTE7XG4gIHJldHVybiBGbG9hdDY0QXJyYXkuZnJvbSh2YWx1ZXMsIHZhbHVlb2YgPT09IHVuZGVmaW5lZFxuICAgICAgPyB2ID0+IGFkZGVyLmFkZCgrdiB8fCAwKVxuICAgICAgOiB2ID0+IGFkZGVyLmFkZCgrdmFsdWVvZih2LCArK2luZGV4LCB2YWx1ZXMpIHx8IDApXG4gICk7XG59XG4iLCJleHBvcnQgY2xhc3MgSW50ZXJuTWFwIGV4dGVuZHMgTWFwIHtcbiAgY29uc3RydWN0b3IoZW50cmllcywga2V5ID0ga2V5b2YpIHtcbiAgICBzdXBlcigpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtfaW50ZXJuOiB7dmFsdWU6IG5ldyBNYXAoKX0sIF9rZXk6IHt2YWx1ZToga2V5fX0pO1xuICAgIGlmIChlbnRyaWVzICE9IG51bGwpIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHRoaXMuc2V0KGtleSwgdmFsdWUpO1xuICB9XG4gIGdldChrZXkpIHtcbiAgICByZXR1cm4gc3VwZXIuZ2V0KGludGVybl9nZXQodGhpcywga2V5KSk7XG4gIH1cbiAgaGFzKGtleSkge1xuICAgIHJldHVybiBzdXBlci5oYXMoaW50ZXJuX2dldCh0aGlzLCBrZXkpKTtcbiAgfVxuICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdXBlci5zZXQoaW50ZXJuX3NldCh0aGlzLCBrZXkpLCB2YWx1ZSk7XG4gIH1cbiAgZGVsZXRlKGtleSkge1xuICAgIHJldHVybiBzdXBlci5kZWxldGUoaW50ZXJuX2RlbGV0ZSh0aGlzLCBrZXkpKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgSW50ZXJuU2V0IGV4dGVuZHMgU2V0IHtcbiAgY29uc3RydWN0b3IodmFsdWVzLCBrZXkgPSBrZXlvZikge1xuICAgIHN1cGVyKCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge19pbnRlcm46IHt2YWx1ZTogbmV3IE1hcCgpfSwgX2tleToge3ZhbHVlOiBrZXl9fSk7XG4gICAgaWYgKHZhbHVlcyAhPSBudWxsKSBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykgdGhpcy5hZGQodmFsdWUpO1xuICB9XG4gIGhhcyh2YWx1ZSkge1xuICAgIHJldHVybiBzdXBlci5oYXMoaW50ZXJuX2dldCh0aGlzLCB2YWx1ZSkpO1xuICB9XG4gIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiBzdXBlci5hZGQoaW50ZXJuX3NldCh0aGlzLCB2YWx1ZSkpO1xuICB9XG4gIGRlbGV0ZSh2YWx1ZSkge1xuICAgIHJldHVybiBzdXBlci5kZWxldGUoaW50ZXJuX2RlbGV0ZSh0aGlzLCB2YWx1ZSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludGVybl9nZXQoe19pbnRlcm4sIF9rZXl9LCB2YWx1ZSkge1xuICBjb25zdCBrZXkgPSBfa2V5KHZhbHVlKTtcbiAgcmV0dXJuIF9pbnRlcm4uaGFzKGtleSkgPyBfaW50ZXJuLmdldChrZXkpIDogdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGludGVybl9zZXQoe19pbnRlcm4sIF9rZXl9LCB2YWx1ZSkge1xuICBjb25zdCBrZXkgPSBfa2V5KHZhbHVlKTtcbiAgaWYgKF9pbnRlcm4uaGFzKGtleSkpIHJldHVybiBfaW50ZXJuLmdldChrZXkpO1xuICBfaW50ZXJuLnNldChrZXksIHZhbHVlKTtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBpbnRlcm5fZGVsZXRlKHtfaW50ZXJuLCBfa2V5fSwgdmFsdWUpIHtcbiAgY29uc3Qga2V5ID0gX2tleSh2YWx1ZSk7XG4gIGlmIChfaW50ZXJuLmhhcyhrZXkpKSB7XG4gICAgdmFsdWUgPSBfaW50ZXJuLmdldChrZXkpO1xuICAgIF9pbnRlcm4uZGVsZXRlKGtleSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBrZXlvZih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IHtJbnRlcm5NYXB9IGZyb20gXCJpbnRlcm5tYXBcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBncm91cCh2YWx1ZXMsIC4uLmtleXMpIHtcbiAgcmV0dXJuIG5lc3QodmFsdWVzLCBpZGVudGl0eSwgaWRlbnRpdHksIGtleXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3JvdXBzKHZhbHVlcywgLi4ua2V5cykge1xuICByZXR1cm4gbmVzdCh2YWx1ZXMsIEFycmF5LmZyb20sIGlkZW50aXR5LCBrZXlzKTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlbihncm91cHMsIGtleXMpIHtcbiAgZm9yIChsZXQgaSA9IDEsIG4gPSBrZXlzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGdyb3VwcyA9IGdyb3Vwcy5mbGF0TWFwKGcgPT4gZy5wb3AoKS5tYXAoKFtrZXksIHZhbHVlXSkgPT4gWy4uLmcsIGtleSwgdmFsdWVdKSk7XG4gIH1cbiAgcmV0dXJuIGdyb3Vwcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZsYXRHcm91cCh2YWx1ZXMsIC4uLmtleXMpIHtcbiAgcmV0dXJuIGZsYXR0ZW4oZ3JvdXBzKHZhbHVlcywgLi4ua2V5cyksIGtleXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmxhdFJvbGx1cCh2YWx1ZXMsIHJlZHVjZSwgLi4ua2V5cykge1xuICByZXR1cm4gZmxhdHRlbihyb2xsdXBzKHZhbHVlcywgcmVkdWNlLCAuLi5rZXlzKSwga2V5cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByb2xsdXAodmFsdWVzLCByZWR1Y2UsIC4uLmtleXMpIHtcbiAgcmV0dXJuIG5lc3QodmFsdWVzLCBpZGVudGl0eSwgcmVkdWNlLCBrZXlzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJvbGx1cHModmFsdWVzLCByZWR1Y2UsIC4uLmtleXMpIHtcbiAgcmV0dXJuIG5lc3QodmFsdWVzLCBBcnJheS5mcm9tLCByZWR1Y2UsIGtleXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5kZXgodmFsdWVzLCAuLi5rZXlzKSB7XG4gIHJldHVybiBuZXN0KHZhbHVlcywgaWRlbnRpdHksIHVuaXF1ZSwga2V5cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbmRleGVzKHZhbHVlcywgLi4ua2V5cykge1xuICByZXR1cm4gbmVzdCh2YWx1ZXMsIEFycmF5LmZyb20sIHVuaXF1ZSwga2V5cyk7XG59XG5cbmZ1bmN0aW9uIHVuaXF1ZSh2YWx1ZXMpIHtcbiAgaWYgKHZhbHVlcy5sZW5ndGggIT09IDEpIHRocm93IG5ldyBFcnJvcihcImR1cGxpY2F0ZSBrZXlcIik7XG4gIHJldHVybiB2YWx1ZXNbMF07XG59XG5cbmZ1bmN0aW9uIG5lc3QodmFsdWVzLCBtYXAsIHJlZHVjZSwga2V5cykge1xuICByZXR1cm4gKGZ1bmN0aW9uIHJlZ3JvdXAodmFsdWVzLCBpKSB7XG4gICAgaWYgKGkgPj0ga2V5cy5sZW5ndGgpIHJldHVybiByZWR1Y2UodmFsdWVzKTtcbiAgICBjb25zdCBncm91cHMgPSBuZXcgSW50ZXJuTWFwKCk7XG4gICAgY29uc3Qga2V5b2YgPSBrZXlzW2krK107XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleW9mKHZhbHVlLCArK2luZGV4LCB2YWx1ZXMpO1xuICAgICAgY29uc3QgZ3JvdXAgPSBncm91cHMuZ2V0KGtleSk7XG4gICAgICBpZiAoZ3JvdXApIGdyb3VwLnB1c2godmFsdWUpO1xuICAgICAgZWxzZSBncm91cHMuc2V0KGtleSwgW3ZhbHVlXSk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVzXSBvZiBncm91cHMpIHtcbiAgICAgIGdyb3Vwcy5zZXQoa2V5LCByZWdyb3VwKHZhbHVlcywgaSkpO1xuICAgIH1cbiAgICByZXR1cm4gbWFwKGdyb3Vwcyk7XG4gIH0pKHZhbHVlcywgMCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwZXJtdXRlKHNvdXJjZSwga2V5cykge1xuICByZXR1cm4gQXJyYXkuZnJvbShrZXlzLCBrZXkgPT4gc291cmNlW2tleV0pO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmcuanNcIjtcbmltcG9ydCBwZXJtdXRlIGZyb20gXCIuL3Blcm11dGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc29ydCh2YWx1ZXMsIC4uLkYpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZXNbU3ltYm9sLml0ZXJhdG9yXSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwidmFsdWVzIGlzIG5vdCBpdGVyYWJsZVwiKTtcbiAgdmFsdWVzID0gQXJyYXkuZnJvbSh2YWx1ZXMpO1xuICBsZXQgW2ZdID0gRjtcbiAgaWYgKChmICYmIGYubGVuZ3RoICE9PSAyKSB8fCBGLmxlbmd0aCA+IDEpIHtcbiAgICBjb25zdCBpbmRleCA9IFVpbnQzMkFycmF5LmZyb20odmFsdWVzLCAoZCwgaSkgPT4gaSk7XG4gICAgaWYgKEYubGVuZ3RoID4gMSkge1xuICAgICAgRiA9IEYubWFwKGYgPT4gdmFsdWVzLm1hcChmKSk7XG4gICAgICBpbmRleC5zb3J0KChpLCBqKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgZiBvZiBGKSB7XG4gICAgICAgICAgY29uc3QgYyA9IGFzY2VuZGluZ0RlZmluZWQoZltpXSwgZltqXSk7XG4gICAgICAgICAgaWYgKGMpIHJldHVybiBjO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZiA9IHZhbHVlcy5tYXAoZik7XG4gICAgICBpbmRleC5zb3J0KChpLCBqKSA9PiBhc2NlbmRpbmdEZWZpbmVkKGZbaV0sIGZbal0pKTtcbiAgICB9XG4gICAgcmV0dXJuIHBlcm11dGUodmFsdWVzLCBpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlcy5zb3J0KGNvbXBhcmVEZWZpbmVkKGYpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVEZWZpbmVkKGNvbXBhcmUgPSBhc2NlbmRpbmcpIHtcbiAgaWYgKGNvbXBhcmUgPT09IGFzY2VuZGluZykgcmV0dXJuIGFzY2VuZGluZ0RlZmluZWQ7XG4gIGlmICh0eXBlb2YgY29tcGFyZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY29tcGFyZSBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgcmV0dXJuIChhLCBiKSA9PiB7XG4gICAgY29uc3QgeCA9IGNvbXBhcmUoYSwgYik7XG4gICAgaWYgKHggfHwgeCA9PT0gMCkgcmV0dXJuIHg7XG4gICAgcmV0dXJuIChjb21wYXJlKGIsIGIpID09PSAwKSAtIChjb21wYXJlKGEsIGEpID09PSAwKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzY2VuZGluZ0RlZmluZWQoYSwgYikge1xuICByZXR1cm4gKGEgPT0gbnVsbCB8fCAhKGEgPj0gYSkpIC0gKGIgPT0gbnVsbCB8fCAhKGIgPj0gYikpIHx8IChhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogMCk7XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZy5qc1wiO1xuaW1wb3J0IGdyb3VwLCB7cm9sbHVwfSBmcm9tIFwiLi9ncm91cC5qc1wiO1xuaW1wb3J0IHNvcnQgZnJvbSBcIi4vc29ydC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBncm91cFNvcnQodmFsdWVzLCByZWR1Y2UsIGtleSkge1xuICByZXR1cm4gKHJlZHVjZS5sZW5ndGggIT09IDJcbiAgICA/IHNvcnQocm9sbHVwKHZhbHVlcywgcmVkdWNlLCBrZXkpLCAoKFthaywgYXZdLCBbYmssIGJ2XSkgPT4gYXNjZW5kaW5nKGF2LCBidikgfHwgYXNjZW5kaW5nKGFrLCBiaykpKVxuICAgIDogc29ydChncm91cCh2YWx1ZXMsIGtleSksICgoW2FrLCBhdl0sIFtiaywgYnZdKSA9PiByZWR1Y2UoYXYsIGJ2KSB8fCBhc2NlbmRpbmcoYWssIGJrKSkpKVxuICAgIC5tYXAoKFtrZXldKSA9PiBrZXkpO1xufVxuIiwidmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG5leHBvcnQgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG5leHBvcnQgdmFyIG1hcCA9IGFycmF5Lm1hcDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnN0YW50KHgpIHtcbiAgcmV0dXJuICgpID0+IHg7XG59XG4iLCJjb25zdCBlMTAgPSBNYXRoLnNxcnQoNTApLFxuICAgIGU1ID0gTWF0aC5zcXJ0KDEwKSxcbiAgICBlMiA9IE1hdGguc3FydCgyKTtcblxuZnVuY3Rpb24gdGlja1NwZWMoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIGNvbnN0IHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHBvd2VyID0gTWF0aC5mbG9vcihNYXRoLmxvZzEwKHN0ZXApKSxcbiAgICAgIGVycm9yID0gc3RlcCAvIE1hdGgucG93KDEwLCBwb3dlciksXG4gICAgICBmYWN0b3IgPSBlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDE7XG4gIGxldCBpMSwgaTIsIGluYztcbiAgaWYgKHBvd2VyIDwgMCkge1xuICAgIGluYyA9IE1hdGgucG93KDEwLCAtcG93ZXIpIC8gZmFjdG9yO1xuICAgIGkxID0gTWF0aC5yb3VuZChzdGFydCAqIGluYyk7XG4gICAgaTIgPSBNYXRoLnJvdW5kKHN0b3AgKiBpbmMpO1xuICAgIGlmIChpMSAvIGluYyA8IHN0YXJ0KSArK2kxO1xuICAgIGlmIChpMiAvIGluYyA+IHN0b3ApIC0taTI7XG4gICAgaW5jID0gLWluYztcbiAgfSBlbHNlIHtcbiAgICBpbmMgPSBNYXRoLnBvdygxMCwgcG93ZXIpICogZmFjdG9yO1xuICAgIGkxID0gTWF0aC5yb3VuZChzdGFydCAvIGluYyk7XG4gICAgaTIgPSBNYXRoLnJvdW5kKHN0b3AgLyBpbmMpO1xuICAgIGlmIChpMSAqIGluYyA8IHN0YXJ0KSArK2kxO1xuICAgIGlmIChpMiAqIGluYyA+IHN0b3ApIC0taTI7XG4gIH1cbiAgaWYgKGkyIDwgaTEgJiYgMC41IDw9IGNvdW50ICYmIGNvdW50IDwgMikgcmV0dXJuIHRpY2tTcGVjKHN0YXJ0LCBzdG9wLCBjb3VudCAqIDIpO1xuICByZXR1cm4gW2kxLCBpMiwgaW5jXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGlja3Moc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHN0b3AgPSArc3RvcCwgc3RhcnQgPSArc3RhcnQsIGNvdW50ID0gK2NvdW50O1xuICBpZiAoIShjb3VudCA+IDApKSByZXR1cm4gW107XG4gIGlmIChzdGFydCA9PT0gc3RvcCkgcmV0dXJuIFtzdGFydF07XG4gIGNvbnN0IHJldmVyc2UgPSBzdG9wIDwgc3RhcnQsIFtpMSwgaTIsIGluY10gPSByZXZlcnNlID8gdGlja1NwZWMoc3RvcCwgc3RhcnQsIGNvdW50KSA6IHRpY2tTcGVjKHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gIGlmICghKGkyID49IGkxKSkgcmV0dXJuIFtdO1xuICBjb25zdCBuID0gaTIgLSBpMSArIDEsIHRpY2tzID0gbmV3IEFycmF5KG4pO1xuICBpZiAocmV2ZXJzZSkge1xuICAgIGlmIChpbmMgPCAwKSBmb3IgKGxldCBpID0gMDsgaSA8IG47ICsraSkgdGlja3NbaV0gPSAoaTIgLSBpKSAvIC1pbmM7XG4gICAgZWxzZSBmb3IgKGxldCBpID0gMDsgaSA8IG47ICsraSkgdGlja3NbaV0gPSAoaTIgLSBpKSAqIGluYztcbiAgfSBlbHNlIHtcbiAgICBpZiAoaW5jIDwgMCkgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyArK2kpIHRpY2tzW2ldID0gKGkxICsgaSkgLyAtaW5jO1xuICAgIGVsc2UgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyArK2kpIHRpY2tzW2ldID0gKGkxICsgaSkgKiBpbmM7XG4gIH1cbiAgcmV0dXJuIHRpY2tzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgc3RvcCA9ICtzdG9wLCBzdGFydCA9ICtzdGFydCwgY291bnQgPSArY291bnQ7XG4gIHJldHVybiB0aWNrU3BlYyhzdGFydCwgc3RvcCwgY291bnQpWzJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHN0b3AgPSArc3RvcCwgc3RhcnQgPSArc3RhcnQsIGNvdW50ID0gK2NvdW50O1xuICBjb25zdCByZXZlcnNlID0gc3RvcCA8IHN0YXJ0LCBpbmMgPSByZXZlcnNlID8gdGlja0luY3JlbWVudChzdG9wLCBzdGFydCwgY291bnQpIDogdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICByZXR1cm4gKHJldmVyc2UgPyAtMSA6IDEpICogKGluYyA8IDAgPyAxIC8gLWluYyA6IGluYyk7XG59XG4iLCJpbXBvcnQge3RpY2tJbmNyZW1lbnR9IGZyb20gXCIuL3RpY2tzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5pY2Uoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIGxldCBwcmVzdGVwO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGNvbnN0IHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgaWYgKHN0ZXAgPT09IHByZXN0ZXAgfHwgc3RlcCA9PT0gMCB8fCAhaXNGaW5pdGUoc3RlcCkpIHtcbiAgICAgIHJldHVybiBbc3RhcnQsIHN0b3BdO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA+IDApIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCAvIHN0ZXApICogc3RlcDtcbiAgICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgfVxuICAgIHByZXN0ZXAgPSBzdGVwO1xuICB9XG59XG4iLCJpbXBvcnQgY291bnQgZnJvbSBcIi4uL2NvdW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRocmVzaG9sZFN0dXJnZXModmFsdWVzKSB7XG4gIHJldHVybiBNYXRoLm1heCgxLCBNYXRoLmNlaWwoTWF0aC5sb2coY291bnQodmFsdWVzKSkgLyBNYXRoLkxOMikgKyAxKTtcbn1cbiIsImltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5LmpzXCI7XG5pbXBvcnQgYmlzZWN0IGZyb20gXCIuL2Jpc2VjdC5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgZXh0ZW50IGZyb20gXCIuL2V4dGVudC5qc1wiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5LmpzXCI7XG5pbXBvcnQgbmljZSBmcm9tIFwiLi9uaWNlLmpzXCI7XG5pbXBvcnQgdGlja3MsIHt0aWNrSW5jcmVtZW50fSBmcm9tIFwiLi90aWNrcy5qc1wiO1xuaW1wb3J0IHN0dXJnZXMgZnJvbSBcIi4vdGhyZXNob2xkL3N0dXJnZXMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluKCkge1xuICB2YXIgdmFsdWUgPSBpZGVudGl0eSxcbiAgICAgIGRvbWFpbiA9IGV4dGVudCxcbiAgICAgIHRocmVzaG9sZCA9IHN0dXJnZXM7XG5cbiAgZnVuY3Rpb24gaGlzdG9ncmFtKGRhdGEpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpIGRhdGEgPSBBcnJheS5mcm9tKGRhdGEpO1xuXG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgeCxcbiAgICAgICAgc3RlcCxcbiAgICAgICAgdmFsdWVzID0gbmV3IEFycmF5KG4pO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdmFsdWVzW2ldID0gdmFsdWUoZGF0YVtpXSwgaSwgZGF0YSk7XG4gICAgfVxuXG4gICAgdmFyIHh6ID0gZG9tYWluKHZhbHVlcyksXG4gICAgICAgIHgwID0geHpbMF0sXG4gICAgICAgIHgxID0geHpbMV0sXG4gICAgICAgIHR6ID0gdGhyZXNob2xkKHZhbHVlcywgeDAsIHgxKTtcblxuICAgIC8vIENvbnZlcnQgbnVtYmVyIG9mIHRocmVzaG9sZHMgaW50byB1bmlmb3JtIHRocmVzaG9sZHMsIGFuZCBuaWNlIHRoZVxuICAgIC8vIGRlZmF1bHQgZG9tYWluIGFjY29yZGluZ2x5LlxuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eikpIHtcbiAgICAgIGNvbnN0IG1heCA9IHgxLCB0biA9ICt0ejtcbiAgICAgIGlmIChkb21haW4gPT09IGV4dGVudCkgW3gwLCB4MV0gPSBuaWNlKHgwLCB4MSwgdG4pO1xuICAgICAgdHogPSB0aWNrcyh4MCwgeDEsIHRuKTtcblxuICAgICAgLy8gSWYgdGhlIGRvbWFpbiBpcyBhbGlnbmVkIHdpdGggdGhlIGZpcnN0IHRpY2sgKHdoaWNoIGl0IHdpbGwgYnlcbiAgICAgIC8vIGRlZmF1bHQpLCB0aGVuIHdlIGNhbiB1c2UgcXVhbnRpemF0aW9uIHJhdGhlciB0aGFuIGJpc2VjdGlvbiB0byBiaW5cbiAgICAgIC8vIHZhbHVlcywgd2hpY2ggaXMgc3Vic3RhbnRpYWxseSBmYXN0ZXIuXG4gICAgICBpZiAodHpbMF0gPD0geDApIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHgwLCB4MSwgdG4pO1xuXG4gICAgICAvLyBJZiB0aGUgbGFzdCB0aHJlc2hvbGQgaXMgY29pbmNpZGVudCB3aXRoIHRoZSBkb21haW7igJlzIHVwcGVyIGJvdW5kLCB0aGVcbiAgICAgIC8vIGxhc3QgYmluIHdpbGwgYmUgemVyby13aWR0aC4gSWYgdGhlIGRlZmF1bHQgZG9tYWluIGlzIHVzZWQsIGFuZCB0aGlzXG4gICAgICAvLyBsYXN0IHRocmVzaG9sZCBpcyBjb2luY2lkZW50IHdpdGggdGhlIG1heGltdW0gaW5wdXQgdmFsdWUsIHdlIGNhblxuICAgICAgLy8gZXh0ZW5kIHRoZSBuaWNlZCB1cHBlciBib3VuZCBieSBvbmUgdGljayB0byBlbnN1cmUgdW5pZm9ybSBiaW4gd2lkdGhzO1xuICAgICAgLy8gb3RoZXJ3aXNlLCB3ZSBzaW1wbHkgcmVtb3ZlIHRoZSBsYXN0IHRocmVzaG9sZC4gTm90ZSB0aGF0IHdlIGRvbuKAmXRcbiAgICAgIC8vIGNvZXJjZSB2YWx1ZXMgb3IgdGhlIGRvbWFpbiB0byBudW1iZXJzLCBhbmQgdGh1cyBtdXN0IGJlIGNhcmVmdWwgdG9cbiAgICAgIC8vIGNvbXBhcmUgb3JkZXIgKD49KSByYXRoZXIgdGhhbiBzdHJpY3QgZXF1YWxpdHkgKD09PSkhXG4gICAgICBpZiAodHpbdHoubGVuZ3RoIC0gMV0gPj0geDEpIHtcbiAgICAgICAgaWYgKG1heCA+PSB4MSAmJiBkb21haW4gPT09IGV4dGVudCkge1xuICAgICAgICAgIGNvbnN0IHN0ZXAgPSB0aWNrSW5jcmVtZW50KHgwLCB4MSwgdG4pO1xuICAgICAgICAgIGlmIChpc0Zpbml0ZShzdGVwKSkge1xuICAgICAgICAgICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICAgICAgICAgIHgxID0gKE1hdGguZmxvb3IoeDEgLyBzdGVwKSArIDEpICogc3RlcDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgICAgICAgICAgeDEgPSAoTWF0aC5jZWlsKHgxICogLXN0ZXApICsgMSkgLyAtc3RlcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHoucG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgYW55IHRocmVzaG9sZHMgb3V0c2lkZSB0aGUgZG9tYWluLlxuICAgIC8vIEJlIGNhcmVmdWwgbm90IHRvIG11dGF0ZSBhbiBhcnJheSBvd25lZCBieSB0aGUgdXNlciFcbiAgICB2YXIgbSA9IHR6Lmxlbmd0aCwgYSA9IDAsIGIgPSBtO1xuICAgIHdoaWxlICh0elthXSA8PSB4MCkgKythO1xuICAgIHdoaWxlICh0eltiIC0gMV0gPiB4MSkgLS1iO1xuICAgIGlmIChhIHx8IGIgPCBtKSB0eiA9IHR6LnNsaWNlKGEsIGIpLCBtID0gYiAtIGE7XG5cbiAgICB2YXIgYmlucyA9IG5ldyBBcnJheShtICsgMSksXG4gICAgICAgIGJpbjtcblxuICAgIC8vIEluaXRpYWxpemUgYmlucy5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IG07ICsraSkge1xuICAgICAgYmluID0gYmluc1tpXSA9IFtdO1xuICAgICAgYmluLngwID0gaSA+IDAgPyB0eltpIC0gMV0gOiB4MDtcbiAgICAgIGJpbi54MSA9IGkgPCBtID8gdHpbaV0gOiB4MTtcbiAgICB9XG5cbiAgICAvLyBBc3NpZ24gZGF0YSB0byBiaW5zIGJ5IHZhbHVlLCBpZ25vcmluZyBhbnkgb3V0c2lkZSB0aGUgZG9tYWluLlxuICAgIGlmIChpc0Zpbml0ZShzdGVwKSkge1xuICAgICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICBpZiAoKHggPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgeDAgPD0geCAmJiB4IDw9IHgxKSB7XG4gICAgICAgICAgICBiaW5zW01hdGgubWluKG0sIE1hdGguZmxvb3IoKHggLSB4MCkgLyBzdGVwKSldLnB1c2goZGF0YVtpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICBpZiAoKHggPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgeDAgPD0geCAmJiB4IDw9IHgxKSB7XG4gICAgICAgICAgICBjb25zdCBqID0gTWF0aC5mbG9vcigoeDAgLSB4KSAqIHN0ZXApO1xuICAgICAgICAgICAgYmluc1tNYXRoLm1pbihtLCBqICsgKHR6W2pdIDw9IHgpKV0ucHVzaChkYXRhW2ldKTsgLy8gaGFuZGxlIG9mZi1ieS1vbmUgZHVlIHRvIHJvdW5kaW5nXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKCh4ID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHgwIDw9IHggJiYgeCA8PSB4MSkge1xuICAgICAgICAgIGJpbnNbYmlzZWN0KHR6LCB4LCAwLCBtKV0ucHVzaChkYXRhW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBiaW5zO1xuICB9XG5cbiAgaGlzdG9ncmFtLnZhbHVlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZhbHVlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChfKSwgaGlzdG9ncmFtKSA6IHZhbHVlO1xuICB9O1xuXG4gIGhpc3RvZ3JhbS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChbX1swXSwgX1sxXV0pLCBoaXN0b2dyYW0pIDogZG9tYWluO1xuICB9O1xuXG4gIGhpc3RvZ3JhbS50aHJlc2hvbGRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRocmVzaG9sZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoQXJyYXkuaXNBcnJheShfKSA/IHNsaWNlLmNhbGwoXykgOiBfKSwgaGlzdG9ncmFtKSA6IHRocmVzaG9sZDtcbiAgfTtcblxuICByZXR1cm4gaGlzdG9ncmFtO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWF4KHZhbHVlcywgdmFsdWVvZikge1xuICBsZXQgbWF4O1xuICBpZiAodmFsdWVvZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsXG4gICAgICAgICAgJiYgKG1heCA8IHZhbHVlIHx8IChtYXggPT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA+PSB2YWx1ZSkpKSB7XG4gICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgaW5kZXggPSAtMTtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlLCArK2luZGV4LCB2YWx1ZXMpKSAhPSBudWxsXG4gICAgICAgICAgJiYgKG1heCA8IHZhbHVlIHx8IChtYXggPT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA+PSB2YWx1ZSkpKSB7XG4gICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbWF4O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWF4SW5kZXgodmFsdWVzLCB2YWx1ZW9mKSB7XG4gIGxldCBtYXg7XG4gIGxldCBtYXhJbmRleCA9IC0xO1xuICBsZXQgaW5kZXggPSAtMTtcbiAgaWYgKHZhbHVlb2YgPT09IHVuZGVmaW5lZCkge1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICArK2luZGV4O1xuICAgICAgaWYgKHZhbHVlICE9IG51bGxcbiAgICAgICAgICAmJiAobWF4IDwgdmFsdWUgfHwgKG1heCA9PT0gdW5kZWZpbmVkICYmIHZhbHVlID49IHZhbHVlKSkpIHtcbiAgICAgICAgbWF4ID0gdmFsdWUsIG1heEluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAobGV0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWUsICsraW5kZXgsIHZhbHVlcykpICE9IG51bGxcbiAgICAgICAgICAmJiAobWF4IDwgdmFsdWUgfHwgKG1heCA9PT0gdW5kZWZpbmVkICYmIHZhbHVlID49IHZhbHVlKSkpIHtcbiAgICAgICAgbWF4ID0gdmFsdWUsIG1heEluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXhJbmRleDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgbGV0IG1pbjtcbiAgaWYgKHZhbHVlb2YgPT09IHVuZGVmaW5lZCkge1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbFxuICAgICAgICAgICYmIChtaW4gPiB2YWx1ZSB8fCAobWluID09PSB1bmRlZmluZWQgJiYgdmFsdWUgPj0gdmFsdWUpKSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZSwgKytpbmRleCwgdmFsdWVzKSkgIT0gbnVsbFxuICAgICAgICAgICYmIChtaW4gPiB2YWx1ZSB8fCAobWluID09PSB1bmRlZmluZWQgJiYgdmFsdWUgPj0gdmFsdWUpKSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1pbjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pbkluZGV4KHZhbHVlcywgdmFsdWVvZikge1xuICBsZXQgbWluO1xuICBsZXQgbWluSW5kZXggPSAtMTtcbiAgbGV0IGluZGV4ID0gLTE7XG4gIGlmICh2YWx1ZW9mID09PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgKytpbmRleDtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsXG4gICAgICAgICAgJiYgKG1pbiA+IHZhbHVlIHx8IChtaW4gPT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA+PSB2YWx1ZSkpKSB7XG4gICAgICAgIG1pbiA9IHZhbHVlLCBtaW5JbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlLCArK2luZGV4LCB2YWx1ZXMpKSAhPSBudWxsXG4gICAgICAgICAgJiYgKG1pbiA+IHZhbHVlIHx8IChtaW4gPT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA+PSB2YWx1ZSkpKSB7XG4gICAgICAgIG1pbiA9IHZhbHVlLCBtaW5JbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbWluSW5kZXg7XG59XG4iLCJpbXBvcnQge2FzY2VuZGluZ0RlZmluZWQsIGNvbXBhcmVEZWZpbmVkfSBmcm9tIFwiLi9zb3J0LmpzXCI7XG5cbi8vIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3VybmVyL3F1aWNrc2VsZWN0XG4vLyBJU0MgbGljZW5zZSwgQ29weXJpZ2h0IDIwMTggVmxhZGltaXIgQWdhZm9ua2luLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcXVpY2tzZWxlY3QoYXJyYXksIGssIGxlZnQgPSAwLCByaWdodCA9IEluZmluaXR5LCBjb21wYXJlKSB7XG4gIGsgPSBNYXRoLmZsb29yKGspO1xuICBsZWZ0ID0gTWF0aC5mbG9vcihNYXRoLm1heCgwLCBsZWZ0KSk7XG4gIHJpZ2h0ID0gTWF0aC5mbG9vcihNYXRoLm1pbihhcnJheS5sZW5ndGggLSAxLCByaWdodCkpO1xuXG4gIGlmICghKGxlZnQgPD0gayAmJiBrIDw9IHJpZ2h0KSkgcmV0dXJuIGFycmF5O1xuXG4gIGNvbXBhcmUgPSBjb21wYXJlID09PSB1bmRlZmluZWQgPyBhc2NlbmRpbmdEZWZpbmVkIDogY29tcGFyZURlZmluZWQoY29tcGFyZSk7XG5cbiAgd2hpbGUgKHJpZ2h0ID4gbGVmdCkge1xuICAgIGlmIChyaWdodCAtIGxlZnQgPiA2MDApIHtcbiAgICAgIGNvbnN0IG4gPSByaWdodCAtIGxlZnQgKyAxO1xuICAgICAgY29uc3QgbSA9IGsgLSBsZWZ0ICsgMTtcbiAgICAgIGNvbnN0IHogPSBNYXRoLmxvZyhuKTtcbiAgICAgIGNvbnN0IHMgPSAwLjUgKiBNYXRoLmV4cCgyICogeiAvIDMpO1xuICAgICAgY29uc3Qgc2QgPSAwLjUgKiBNYXRoLnNxcnQoeiAqIHMgKiAobiAtIHMpIC8gbikgKiAobSAtIG4gLyAyIDwgMCA/IC0xIDogMSk7XG4gICAgICBjb25zdCBuZXdMZWZ0ID0gTWF0aC5tYXgobGVmdCwgTWF0aC5mbG9vcihrIC0gbSAqIHMgLyBuICsgc2QpKTtcbiAgICAgIGNvbnN0IG5ld1JpZ2h0ID0gTWF0aC5taW4ocmlnaHQsIE1hdGguZmxvb3IoayArIChuIC0gbSkgKiBzIC8gbiArIHNkKSk7XG4gICAgICBxdWlja3NlbGVjdChhcnJheSwgaywgbmV3TGVmdCwgbmV3UmlnaHQsIGNvbXBhcmUpO1xuICAgIH1cblxuICAgIGNvbnN0IHQgPSBhcnJheVtrXTtcbiAgICBsZXQgaSA9IGxlZnQ7XG4gICAgbGV0IGogPSByaWdodDtcblxuICAgIHN3YXAoYXJyYXksIGxlZnQsIGspO1xuICAgIGlmIChjb21wYXJlKGFycmF5W3JpZ2h0XSwgdCkgPiAwKSBzd2FwKGFycmF5LCBsZWZ0LCByaWdodCk7XG5cbiAgICB3aGlsZSAoaSA8IGopIHtcbiAgICAgIHN3YXAoYXJyYXksIGksIGopLCArK2ksIC0tajtcbiAgICAgIHdoaWxlIChjb21wYXJlKGFycmF5W2ldLCB0KSA8IDApICsraTtcbiAgICAgIHdoaWxlIChjb21wYXJlKGFycmF5W2pdLCB0KSA+IDApIC0tajtcbiAgICB9XG5cbiAgICBpZiAoY29tcGFyZShhcnJheVtsZWZ0XSwgdCkgPT09IDApIHN3YXAoYXJyYXksIGxlZnQsIGopO1xuICAgIGVsc2UgKytqLCBzd2FwKGFycmF5LCBqLCByaWdodCk7XG5cbiAgICBpZiAoaiA8PSBrKSBsZWZ0ID0gaiArIDE7XG4gICAgaWYgKGsgPD0gaikgcmlnaHQgPSBqIC0gMTtcbiAgfVxuXG4gIHJldHVybiBhcnJheTtcbn1cblxuZnVuY3Rpb24gc3dhcChhcnJheSwgaSwgaikge1xuICBjb25zdCB0ID0gYXJyYXlbaV07XG4gIGFycmF5W2ldID0gYXJyYXlbal07XG4gIGFycmF5W2pdID0gdDtcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdyZWF0ZXN0KHZhbHVlcywgY29tcGFyZSA9IGFzY2VuZGluZykge1xuICBsZXQgbWF4O1xuICBsZXQgZGVmaW5lZCA9IGZhbHNlO1xuICBpZiAoY29tcGFyZS5sZW5ndGggPT09IDEpIHtcbiAgICBsZXQgbWF4VmFsdWU7XG4gICAgZm9yIChjb25zdCBlbGVtZW50IG9mIHZhbHVlcykge1xuICAgICAgY29uc3QgdmFsdWUgPSBjb21wYXJlKGVsZW1lbnQpO1xuICAgICAgaWYgKGRlZmluZWRcbiAgICAgICAgICA/IGFzY2VuZGluZyh2YWx1ZSwgbWF4VmFsdWUpID4gMFxuICAgICAgICAgIDogYXNjZW5kaW5nKHZhbHVlLCB2YWx1ZSkgPT09IDApIHtcbiAgICAgICAgbWF4ID0gZWxlbWVudDtcbiAgICAgICAgbWF4VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgZGVmaW5lZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAoZGVmaW5lZFxuICAgICAgICAgID8gY29tcGFyZSh2YWx1ZSwgbWF4KSA+IDBcbiAgICAgICAgICA6IGNvbXBhcmUodmFsdWUsIHZhbHVlKSA9PT0gMCkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgZGVmaW5lZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXg7XG59XG4iLCJpbXBvcnQgbWF4IGZyb20gXCIuL21heC5qc1wiO1xuaW1wb3J0IG1heEluZGV4IGZyb20gXCIuL21heEluZGV4LmpzXCI7XG5pbXBvcnQgbWluIGZyb20gXCIuL21pbi5qc1wiO1xuaW1wb3J0IG1pbkluZGV4IGZyb20gXCIuL21pbkluZGV4LmpzXCI7XG5pbXBvcnQgcXVpY2tzZWxlY3QgZnJvbSBcIi4vcXVpY2tzZWxlY3QuanNcIjtcbmltcG9ydCBudW1iZXIsIHtudW1iZXJzfSBmcm9tIFwiLi9udW1iZXIuanNcIjtcbmltcG9ydCB7YXNjZW5kaW5nRGVmaW5lZH0gZnJvbSBcIi4vc29ydC5qc1wiO1xuaW1wb3J0IGdyZWF0ZXN0IGZyb20gXCIuL2dyZWF0ZXN0LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHF1YW50aWxlKHZhbHVlcywgcCwgdmFsdWVvZikge1xuICB2YWx1ZXMgPSBGbG9hdDY0QXJyYXkuZnJvbShudW1iZXJzKHZhbHVlcywgdmFsdWVvZikpO1xuICBpZiAoIShuID0gdmFsdWVzLmxlbmd0aCkgfHwgaXNOYU4ocCA9ICtwKSkgcmV0dXJuO1xuICBpZiAocCA8PSAwIHx8IG4gPCAyKSByZXR1cm4gbWluKHZhbHVlcyk7XG4gIGlmIChwID49IDEpIHJldHVybiBtYXgodmFsdWVzKTtcbiAgdmFyIG4sXG4gICAgICBpID0gKG4gLSAxKSAqIHAsXG4gICAgICBpMCA9IE1hdGguZmxvb3IoaSksXG4gICAgICB2YWx1ZTAgPSBtYXgocXVpY2tzZWxlY3QodmFsdWVzLCBpMCkuc3ViYXJyYXkoMCwgaTAgKyAxKSksXG4gICAgICB2YWx1ZTEgPSBtaW4odmFsdWVzLnN1YmFycmF5KGkwICsgMSkpO1xuICByZXR1cm4gdmFsdWUwICsgKHZhbHVlMSAtIHZhbHVlMCkgKiAoaSAtIGkwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHF1YW50aWxlU29ydGVkKHZhbHVlcywgcCwgdmFsdWVvZiA9IG51bWJlcikge1xuICBpZiAoIShuID0gdmFsdWVzLmxlbmd0aCkgfHwgaXNOYU4ocCA9ICtwKSkgcmV0dXJuO1xuICBpZiAocCA8PSAwIHx8IG4gPCAyKSByZXR1cm4gK3ZhbHVlb2YodmFsdWVzWzBdLCAwLCB2YWx1ZXMpO1xuICBpZiAocCA+PSAxKSByZXR1cm4gK3ZhbHVlb2YodmFsdWVzW24gLSAxXSwgbiAtIDEsIHZhbHVlcyk7XG4gIHZhciBuLFxuICAgICAgaSA9IChuIC0gMSkgKiBwLFxuICAgICAgaTAgPSBNYXRoLmZsb29yKGkpLFxuICAgICAgdmFsdWUwID0gK3ZhbHVlb2YodmFsdWVzW2kwXSwgaTAsIHZhbHVlcyksXG4gICAgICB2YWx1ZTEgPSArdmFsdWVvZih2YWx1ZXNbaTAgKyAxXSwgaTAgKyAxLCB2YWx1ZXMpO1xuICByZXR1cm4gdmFsdWUwICsgKHZhbHVlMSAtIHZhbHVlMCkgKiAoaSAtIGkwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHF1YW50aWxlSW5kZXgodmFsdWVzLCBwLCB2YWx1ZW9mID0gbnVtYmVyKSB7XG4gIGlmIChpc05hTihwID0gK3ApKSByZXR1cm47XG4gIG51bWJlcnMgPSBGbG9hdDY0QXJyYXkuZnJvbSh2YWx1ZXMsIChfLCBpKSA9PiBudW1iZXIodmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpKTtcbiAgaWYgKHAgPD0gMCkgcmV0dXJuIG1pbkluZGV4KG51bWJlcnMpO1xuICBpZiAocCA+PSAxKSByZXR1cm4gbWF4SW5kZXgobnVtYmVycyk7XG4gIHZhciBudW1iZXJzLFxuICAgICAgaW5kZXggPSBVaW50MzJBcnJheS5mcm9tKHZhbHVlcywgKF8sIGkpID0+IGkpLFxuICAgICAgaiA9IG51bWJlcnMubGVuZ3RoIC0gMSxcbiAgICAgIGkgPSBNYXRoLmZsb29yKGogKiBwKTtcbiAgcXVpY2tzZWxlY3QoaW5kZXgsIGksIDAsIGosIChpLCBqKSA9PiBhc2NlbmRpbmdEZWZpbmVkKG51bWJlcnNbaV0sIG51bWJlcnNbal0pKTtcbiAgaSA9IGdyZWF0ZXN0KGluZGV4LnN1YmFycmF5KDAsIGkgKyAxKSwgKGkpID0+IG51bWJlcnNbaV0pO1xuICByZXR1cm4gaSA+PSAwID8gaSA6IC0xO1xufVxuIiwiaW1wb3J0IGNvdW50IGZyb20gXCIuLi9jb3VudC5qc1wiO1xuaW1wb3J0IHF1YW50aWxlIGZyb20gXCIuLi9xdWFudGlsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aHJlc2hvbGRGcmVlZG1hbkRpYWNvbmlzKHZhbHVlcywgbWluLCBtYXgpIHtcbiAgY29uc3QgYyA9IGNvdW50KHZhbHVlcyksIGQgPSBxdWFudGlsZSh2YWx1ZXMsIDAuNzUpIC0gcXVhbnRpbGUodmFsdWVzLCAwLjI1KTtcbiAgcmV0dXJuIGMgJiYgZCA/IE1hdGguY2VpbCgobWF4IC0gbWluKSAvICgyICogZCAqIE1hdGgucG93KGMsIC0xIC8gMykpKSA6IDE7XG59XG4iLCJpbXBvcnQgY291bnQgZnJvbSBcIi4uL2NvdW50LmpzXCI7XG5pbXBvcnQgZGV2aWF0aW9uIGZyb20gXCIuLi9kZXZpYXRpb24uanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGhyZXNob2xkU2NvdHQodmFsdWVzLCBtaW4sIG1heCkge1xuICBjb25zdCBjID0gY291bnQodmFsdWVzKSwgZCA9IGRldmlhdGlvbih2YWx1ZXMpO1xuICByZXR1cm4gYyAmJiBkID8gTWF0aC5jZWlsKChtYXggLSBtaW4pICogTWF0aC5jYnJ0KGMpIC8gKDMuNDkgKiBkKSkgOiAxO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVhbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgbGV0IGNvdW50ID0gMDtcbiAgbGV0IHN1bSA9IDA7XG4gIGlmICh2YWx1ZW9mID09PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmICh2YWx1ZSA9ICt2YWx1ZSkgPj0gdmFsdWUpIHtcbiAgICAgICAgKytjb3VudCwgc3VtICs9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgaW5kZXggPSAtMTtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlLCArK2luZGV4LCB2YWx1ZXMpKSAhPSBudWxsICYmICh2YWx1ZSA9ICt2YWx1ZSkgPj0gdmFsdWUpIHtcbiAgICAgICAgKytjb3VudCwgc3VtICs9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoY291bnQpIHJldHVybiBzdW0gLyBjb3VudDtcbn1cbiIsImltcG9ydCBxdWFudGlsZSwge3F1YW50aWxlSW5kZXh9IGZyb20gXCIuL3F1YW50aWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lZGlhbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgcmV0dXJuIHF1YW50aWxlKHZhbHVlcywgMC41LCB2YWx1ZW9mKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lZGlhbkluZGV4KHZhbHVlcywgdmFsdWVvZikge1xuICByZXR1cm4gcXVhbnRpbGVJbmRleCh2YWx1ZXMsIDAuNSwgdmFsdWVvZik7XG59XG4iLCJmdW5jdGlvbiogZmxhdHRlbihhcnJheXMpIHtcbiAgZm9yIChjb25zdCBhcnJheSBvZiBhcnJheXMpIHtcbiAgICB5aWVsZCogYXJyYXk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2UoYXJyYXlzKSB7XG4gIHJldHVybiBBcnJheS5mcm9tKGZsYXR0ZW4oYXJyYXlzKSk7XG59XG4iLCJpbXBvcnQge0ludGVybk1hcH0gZnJvbSBcImludGVybm1hcFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtb2RlKHZhbHVlcywgdmFsdWVvZikge1xuICBjb25zdCBjb3VudHMgPSBuZXcgSW50ZXJuTWFwKCk7XG4gIGlmICh2YWx1ZW9mID09PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIGNvdW50cy5zZXQodmFsdWUsIChjb3VudHMuZ2V0KHZhbHVlKSB8fCAwKSArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgaW5kZXggPSAtMTtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlLCArK2luZGV4LCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIGNvdW50cy5zZXQodmFsdWUsIChjb3VudHMuZ2V0KHZhbHVlKSB8fCAwKSArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBsZXQgbW9kZVZhbHVlO1xuICBsZXQgbW9kZUNvdW50ID0gMDtcbiAgZm9yIChjb25zdCBbdmFsdWUsIGNvdW50XSBvZiBjb3VudHMpIHtcbiAgICBpZiAoY291bnQgPiBtb2RlQ291bnQpIHtcbiAgICAgIG1vZGVDb3VudCA9IGNvdW50O1xuICAgICAgbW9kZVZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBtb2RlVmFsdWU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYWlycyh2YWx1ZXMsIHBhaXJvZiA9IHBhaXIpIHtcbiAgY29uc3QgcGFpcnMgPSBbXTtcbiAgbGV0IHByZXZpb3VzO1xuICBsZXQgZmlyc3QgPSBmYWxzZTtcbiAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICBpZiAoZmlyc3QpIHBhaXJzLnB1c2gocGFpcm9mKHByZXZpb3VzLCB2YWx1ZSkpO1xuICAgIHByZXZpb3VzID0gdmFsdWU7XG4gICAgZmlyc3QgPSB0cnVlO1xuICB9XG4gIHJldHVybiBwYWlycztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhaXIoYSwgYikge1xuICByZXR1cm4gW2EsIGJdO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmFuZ2Uoc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgc3RhcnQgPSArc3RhcnQsIHN0b3AgPSArc3RvcCwgc3RlcCA9IChuID0gYXJndW1lbnRzLmxlbmd0aCkgPCAyID8gKHN0b3AgPSBzdGFydCwgc3RhcnQgPSAwLCAxKSA6IG4gPCAzID8gMSA6ICtzdGVwO1xuXG4gIHZhciBpID0gLTEsXG4gICAgICBuID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKChzdG9wIC0gc3RhcnQpIC8gc3RlcCkpIHwgMCxcbiAgICAgIHJhbmdlID0gbmV3IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgcmFuZ2VbaV0gPSBzdGFydCArIGkgKiBzdGVwO1xuICB9XG5cbiAgcmV0dXJuIHJhbmdlO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmcuanNcIjtcbmltcG9ydCB7YXNjZW5kaW5nRGVmaW5lZCwgY29tcGFyZURlZmluZWR9IGZyb20gXCIuL3NvcnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmFuayh2YWx1ZXMsIHZhbHVlb2YgPSBhc2NlbmRpbmcpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZXNbU3ltYm9sLml0ZXJhdG9yXSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwidmFsdWVzIGlzIG5vdCBpdGVyYWJsZVwiKTtcbiAgbGV0IFYgPSBBcnJheS5mcm9tKHZhbHVlcyk7XG4gIGNvbnN0IFIgPSBuZXcgRmxvYXQ2NEFycmF5KFYubGVuZ3RoKTtcbiAgaWYgKHZhbHVlb2YubGVuZ3RoICE9PSAyKSBWID0gVi5tYXAodmFsdWVvZiksIHZhbHVlb2YgPSBhc2NlbmRpbmc7XG4gIGNvbnN0IGNvbXBhcmVJbmRleCA9IChpLCBqKSA9PiB2YWx1ZW9mKFZbaV0sIFZbal0pO1xuICBsZXQgaywgcjtcbiAgdmFsdWVzID0gVWludDMyQXJyYXkuZnJvbShWLCAoXywgaSkgPT4gaSk7XG4gIC8vIFJpc2t5IGNoYWluaW5nIGR1ZSB0byBTYWZhcmkgMTQgaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLWFycmF5L2lzc3Vlcy8xMjNcbiAgdmFsdWVzLnNvcnQodmFsdWVvZiA9PT0gYXNjZW5kaW5nID8gKGksIGopID0+IGFzY2VuZGluZ0RlZmluZWQoVltpXSwgVltqXSkgOiBjb21wYXJlRGVmaW5lZChjb21wYXJlSW5kZXgpKTtcbiAgdmFsdWVzLmZvckVhY2goKGosIGkpID0+IHtcbiAgICAgIGNvbnN0IGMgPSBjb21wYXJlSW5kZXgoaiwgayA9PT0gdW5kZWZpbmVkID8gaiA6IGspO1xuICAgICAgaWYgKGMgPj0gMCkge1xuICAgICAgICBpZiAoayA9PT0gdW5kZWZpbmVkIHx8IGMgPiAwKSBrID0gaiwgciA9IGk7XG4gICAgICAgIFJbal0gPSByO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgUltqXSA9IE5hTjtcbiAgICAgIH1cbiAgICB9KTtcbiAgcmV0dXJuIFI7XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsZWFzdCh2YWx1ZXMsIGNvbXBhcmUgPSBhc2NlbmRpbmcpIHtcbiAgbGV0IG1pbjtcbiAgbGV0IGRlZmluZWQgPSBmYWxzZTtcbiAgaWYgKGNvbXBhcmUubGVuZ3RoID09PSAxKSB7XG4gICAgbGV0IG1pblZhbHVlO1xuICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiB2YWx1ZXMpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gY29tcGFyZShlbGVtZW50KTtcbiAgICAgIGlmIChkZWZpbmVkXG4gICAgICAgICAgPyBhc2NlbmRpbmcodmFsdWUsIG1pblZhbHVlKSA8IDBcbiAgICAgICAgICA6IGFzY2VuZGluZyh2YWx1ZSwgdmFsdWUpID09PSAwKSB7XG4gICAgICAgIG1pbiA9IGVsZW1lbnQ7XG4gICAgICAgIG1pblZhbHVlID0gdmFsdWU7XG4gICAgICAgIGRlZmluZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKGRlZmluZWRcbiAgICAgICAgICA/IGNvbXBhcmUodmFsdWUsIG1pbikgPCAwXG4gICAgICAgICAgOiBjb21wYXJlKHZhbHVlLCB2YWx1ZSkgPT09IDApIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgIGRlZmluZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbWluO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmcuanNcIjtcbmltcG9ydCBtaW5JbmRleCBmcm9tIFwiLi9taW5JbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsZWFzdEluZGV4KHZhbHVlcywgY29tcGFyZSA9IGFzY2VuZGluZykge1xuICBpZiAoY29tcGFyZS5sZW5ndGggPT09IDEpIHJldHVybiBtaW5JbmRleCh2YWx1ZXMsIGNvbXBhcmUpO1xuICBsZXQgbWluVmFsdWU7XG4gIGxldCBtaW4gPSAtMTtcbiAgbGV0IGluZGV4ID0gLTE7XG4gIGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgKytpbmRleDtcbiAgICBpZiAobWluIDwgMFxuICAgICAgICA/IGNvbXBhcmUodmFsdWUsIHZhbHVlKSA9PT0gMFxuICAgICAgICA6IGNvbXBhcmUodmFsdWUsIG1pblZhbHVlKSA8IDApIHtcbiAgICAgIG1pblZhbHVlID0gdmFsdWU7XG4gICAgICBtaW4gPSBpbmRleDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1pbjtcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nLmpzXCI7XG5pbXBvcnQgbWF4SW5kZXggZnJvbSBcIi4vbWF4SW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ3JlYXRlc3RJbmRleCh2YWx1ZXMsIGNvbXBhcmUgPSBhc2NlbmRpbmcpIHtcbiAgaWYgKGNvbXBhcmUubGVuZ3RoID09PSAxKSByZXR1cm4gbWF4SW5kZXgodmFsdWVzLCBjb21wYXJlKTtcbiAgbGV0IG1heFZhbHVlO1xuICBsZXQgbWF4ID0gLTE7XG4gIGxldCBpbmRleCA9IC0xO1xuICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICsraW5kZXg7XG4gICAgaWYgKG1heCA8IDBcbiAgICAgICAgPyBjb21wYXJlKHZhbHVlLCB2YWx1ZSkgPT09IDBcbiAgICAgICAgOiBjb21wYXJlKHZhbHVlLCBtYXhWYWx1ZSkgPiAwKSB7XG4gICAgICBtYXhWYWx1ZSA9IHZhbHVlO1xuICAgICAgbWF4ID0gaW5kZXg7XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXg7XG59XG4iLCJpbXBvcnQgbGVhc3RJbmRleCBmcm9tIFwiLi9sZWFzdEluZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNjYW4odmFsdWVzLCBjb21wYXJlKSB7XG4gIGNvbnN0IGluZGV4ID0gbGVhc3RJbmRleCh2YWx1ZXMsIGNvbXBhcmUpO1xuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogaW5kZXg7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBzaHVmZmxlcihNYXRoLnJhbmRvbSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaHVmZmxlcihyYW5kb20pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNodWZmbGUoYXJyYXksIGkwID0gMCwgaTEgPSBhcnJheS5sZW5ndGgpIHtcbiAgICBsZXQgbSA9IGkxIC0gKGkwID0gK2kwKTtcbiAgICB3aGlsZSAobSkge1xuICAgICAgY29uc3QgaSA9IHJhbmRvbSgpICogbS0tIHwgMCwgdCA9IGFycmF5W20gKyBpMF07XG4gICAgICBhcnJheVttICsgaTBdID0gYXJyYXlbaSArIGkwXTtcbiAgICAgIGFycmF5W2kgKyBpMF0gPSB0O1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdW0odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIGxldCBzdW0gPSAwO1xuICBpZiAodmFsdWVvZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAodmFsdWUgPSArdmFsdWUpIHtcbiAgICAgICAgc3VtICs9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgaW5kZXggPSAtMTtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICh2YWx1ZSA9ICt2YWx1ZW9mKHZhbHVlLCArK2luZGV4LCB2YWx1ZXMpKSB7XG4gICAgICAgIHN1bSArPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN1bTtcbn1cbiIsImltcG9ydCBtaW4gZnJvbSBcIi4vbWluLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zcG9zZShtYXRyaXgpIHtcbiAgaWYgKCEobiA9IG1hdHJpeC5sZW5ndGgpKSByZXR1cm4gW107XG4gIGZvciAodmFyIGkgPSAtMSwgbSA9IG1pbihtYXRyaXgsIGxlbmd0aCksIHRyYW5zcG9zZSA9IG5ldyBBcnJheShtKTsgKytpIDwgbTspIHtcbiAgICBmb3IgKHZhciBqID0gLTEsIG4sIHJvdyA9IHRyYW5zcG9zZVtpXSA9IG5ldyBBcnJheShuKTsgKytqIDwgbjspIHtcbiAgICAgIHJvd1tqXSA9IG1hdHJpeFtqXVtpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRyYW5zcG9zZTtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoKGQpIHtcbiAgcmV0dXJuIGQubGVuZ3RoO1xufVxuIiwiaW1wb3J0IHRyYW5zcG9zZSBmcm9tIFwiLi90cmFuc3Bvc2UuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gemlwKCkge1xuICByZXR1cm4gdHJhbnNwb3NlKGFyZ3VtZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBldmVyeSh2YWx1ZXMsIHRlc3QpIHtcbiAgaWYgKHR5cGVvZiB0ZXN0ICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJ0ZXN0IGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICBsZXQgaW5kZXggPSAtMTtcbiAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICBpZiAoIXRlc3QodmFsdWUsICsraW5kZXgsIHZhbHVlcykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzb21lKHZhbHVlcywgdGVzdCkge1xuICBpZiAodHlwZW9mIHRlc3QgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcInRlc3QgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gIGxldCBpbmRleCA9IC0xO1xuICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgIGlmICh0ZXN0KHZhbHVlLCArK2luZGV4LCB2YWx1ZXMpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmlsdGVyKHZhbHVlcywgdGVzdCkge1xuICBpZiAodHlwZW9mIHRlc3QgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcInRlc3QgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gIGNvbnN0IGFycmF5ID0gW107XG4gIGxldCBpbmRleCA9IC0xO1xuICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgIGlmICh0ZXN0KHZhbHVlLCArK2luZGV4LCB2YWx1ZXMpKSB7XG4gICAgICBhcnJheS5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFwKHZhbHVlcywgbWFwcGVyKSB7XG4gIGlmICh0eXBlb2YgdmFsdWVzW1N5bWJvbC5pdGVyYXRvcl0gIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcInZhbHVlcyBpcyBub3QgaXRlcmFibGVcIik7XG4gIGlmICh0eXBlb2YgbWFwcGVyICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJtYXBwZXIgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gIHJldHVybiBBcnJheS5mcm9tKHZhbHVlcywgKHZhbHVlLCBpbmRleCkgPT4gbWFwcGVyKHZhbHVlLCBpbmRleCwgdmFsdWVzKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWR1Y2UodmFsdWVzLCByZWR1Y2VyLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcInJlZHVjZXIgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gIGNvbnN0IGl0ZXJhdG9yID0gdmFsdWVzW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgbGV0IGRvbmUsIG5leHQsIGluZGV4ID0gLTE7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykge1xuICAgICh7ZG9uZSwgdmFsdWV9ID0gaXRlcmF0b3IubmV4dCgpKTtcbiAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICsraW5kZXg7XG4gIH1cbiAgd2hpbGUgKCh7ZG9uZSwgdmFsdWU6IG5leHR9ID0gaXRlcmF0b3IubmV4dCgpKSwgIWRvbmUpIHtcbiAgICB2YWx1ZSA9IHJlZHVjZXIodmFsdWUsIG5leHQsICsraW5kZXgsIHZhbHVlcyk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmV2ZXJzZSh2YWx1ZXMpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZXNbU3ltYm9sLml0ZXJhdG9yXSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwidmFsdWVzIGlzIG5vdCBpdGVyYWJsZVwiKTtcbiAgcmV0dXJuIEFycmF5LmZyb20odmFsdWVzKS5yZXZlcnNlKCk7XG59XG4iLCJpbXBvcnQge0ludGVyblNldH0gZnJvbSBcImludGVybm1hcFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaWZmZXJlbmNlKHZhbHVlcywgLi4ub3RoZXJzKSB7XG4gIHZhbHVlcyA9IG5ldyBJbnRlcm5TZXQodmFsdWVzKTtcbiAgZm9yIChjb25zdCBvdGhlciBvZiBvdGhlcnMpIHtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIG90aGVyKSB7XG4gICAgICB2YWx1ZXMuZGVsZXRlKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlcztcbn1cbiIsImltcG9ydCB7SW50ZXJuU2V0fSBmcm9tIFwiaW50ZXJubWFwXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpc2pvaW50KHZhbHVlcywgb3RoZXIpIHtcbiAgY29uc3QgaXRlcmF0b3IgPSBvdGhlcltTeW1ib2wuaXRlcmF0b3JdKCksIHNldCA9IG5ldyBJbnRlcm5TZXQoKTtcbiAgZm9yIChjb25zdCB2IG9mIHZhbHVlcykge1xuICAgIGlmIChzZXQuaGFzKHYpKSByZXR1cm4gZmFsc2U7XG4gICAgbGV0IHZhbHVlLCBkb25lO1xuICAgIHdoaWxlICgoe3ZhbHVlLCBkb25lfSA9IGl0ZXJhdG9yLm5leHQoKSkpIHtcbiAgICAgIGlmIChkb25lKSBicmVhaztcbiAgICAgIGlmIChPYmplY3QuaXModiwgdmFsdWUpKSByZXR1cm4gZmFsc2U7XG4gICAgICBzZXQuYWRkKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG4iLCJpbXBvcnQge0ludGVyblNldH0gZnJvbSBcImludGVybm1hcFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbnRlcnNlY3Rpb24odmFsdWVzLCAuLi5vdGhlcnMpIHtcbiAgdmFsdWVzID0gbmV3IEludGVyblNldCh2YWx1ZXMpO1xuICBvdGhlcnMgPSBvdGhlcnMubWFwKHNldCk7XG4gIG91dDogZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICBmb3IgKGNvbnN0IG90aGVyIG9mIG90aGVycykge1xuICAgICAgaWYgKCFvdGhlci5oYXModmFsdWUpKSB7XG4gICAgICAgIHZhbHVlcy5kZWxldGUodmFsdWUpO1xuICAgICAgICBjb250aW51ZSBvdXQ7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZXM7XG59XG5cbmZ1bmN0aW9uIHNldCh2YWx1ZXMpIHtcbiAgcmV0dXJuIHZhbHVlcyBpbnN0YW5jZW9mIEludGVyblNldCA/IHZhbHVlcyA6IG5ldyBJbnRlcm5TZXQodmFsdWVzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN1cGVyc2V0KHZhbHVlcywgb3RoZXIpIHtcbiAgY29uc3QgaXRlcmF0b3IgPSB2YWx1ZXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBzZXQgPSBuZXcgU2V0KCk7XG4gIGZvciAoY29uc3QgbyBvZiBvdGhlcikge1xuICAgIGNvbnN0IGlvID0gaW50ZXJuKG8pO1xuICAgIGlmIChzZXQuaGFzKGlvKSkgY29udGludWU7XG4gICAgbGV0IHZhbHVlLCBkb25lO1xuICAgIHdoaWxlICgoe3ZhbHVlLCBkb25lfSA9IGl0ZXJhdG9yLm5leHQoKSkpIHtcbiAgICAgIGlmIChkb25lKSByZXR1cm4gZmFsc2U7XG4gICAgICBjb25zdCBpdmFsdWUgPSBpbnRlcm4odmFsdWUpO1xuICAgICAgc2V0LmFkZChpdmFsdWUpO1xuICAgICAgaWYgKE9iamVjdC5pcyhpbywgaXZhbHVlKSkgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBpbnRlcm4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xufVxuIiwiaW1wb3J0IHN1cGVyc2V0IGZyb20gXCIuL3N1cGVyc2V0LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN1YnNldCh2YWx1ZXMsIG90aGVyKSB7XG4gIHJldHVybiBzdXBlcnNldChvdGhlciwgdmFsdWVzKTtcbn1cbiIsImltcG9ydCB7SW50ZXJuU2V0fSBmcm9tIFwiaW50ZXJubWFwXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVuaW9uKC4uLm90aGVycykge1xuICBjb25zdCBzZXQgPSBuZXcgSW50ZXJuU2V0KCk7XG4gIGZvciAoY29uc3Qgb3RoZXIgb2Ygb3RoZXJzKSB7XG4gICAgZm9yIChjb25zdCBvIG9mIG90aGVyKSB7XG4gICAgICBzZXQuYWRkKG8pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2V0O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eS5qc1wiO1xuXG52YXIgdG9wID0gMSxcbiAgICByaWdodCA9IDIsXG4gICAgYm90dG9tID0gMyxcbiAgICBsZWZ0ID0gNCxcbiAgICBlcHNpbG9uID0gMWUtNjtcblxuZnVuY3Rpb24gdHJhbnNsYXRlWCh4KSB7XG4gIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHggKyBcIiwwKVwiO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVZKHkpIHtcbiAgcmV0dXJuIFwidHJhbnNsYXRlKDAsXCIgKyB5ICsgXCIpXCI7XG59XG5cbmZ1bmN0aW9uIG51bWJlcihzY2FsZSkge1xuICByZXR1cm4gZCA9PiArc2NhbGUoZCk7XG59XG5cbmZ1bmN0aW9uIGNlbnRlcihzY2FsZSwgb2Zmc2V0KSB7XG4gIG9mZnNldCA9IE1hdGgubWF4KDAsIHNjYWxlLmJhbmR3aWR0aCgpIC0gb2Zmc2V0ICogMikgLyAyO1xuICBpZiAoc2NhbGUucm91bmQoKSkgb2Zmc2V0ID0gTWF0aC5yb3VuZChvZmZzZXQpO1xuICByZXR1cm4gZCA9PiArc2NhbGUoZCkgKyBvZmZzZXQ7XG59XG5cbmZ1bmN0aW9uIGVudGVyaW5nKCkge1xuICByZXR1cm4gIXRoaXMuX19heGlzO1xufVxuXG5mdW5jdGlvbiBheGlzKG9yaWVudCwgc2NhbGUpIHtcbiAgdmFyIHRpY2tBcmd1bWVudHMgPSBbXSxcbiAgICAgIHRpY2tWYWx1ZXMgPSBudWxsLFxuICAgICAgdGlja0Zvcm1hdCA9IG51bGwsXG4gICAgICB0aWNrU2l6ZUlubmVyID0gNixcbiAgICAgIHRpY2tTaXplT3V0ZXIgPSA2LFxuICAgICAgdGlja1BhZGRpbmcgPSAzLFxuICAgICAgb2Zmc2V0ID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+IDEgPyAwIDogMC41LFxuICAgICAgayA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gbGVmdCA/IC0xIDogMSxcbiAgICAgIHggPSBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09PSByaWdodCA/IFwieFwiIDogXCJ5XCIsXG4gICAgICB0cmFuc2Zvcm0gPSBvcmllbnQgPT09IHRvcCB8fCBvcmllbnQgPT09IGJvdHRvbSA/IHRyYW5zbGF0ZVggOiB0cmFuc2xhdGVZO1xuXG4gIGZ1bmN0aW9uIGF4aXMoY29udGV4dCkge1xuICAgIHZhciB2YWx1ZXMgPSB0aWNrVmFsdWVzID09IG51bGwgPyAoc2NhbGUudGlja3MgPyBzY2FsZS50aWNrcy5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBzY2FsZS5kb21haW4oKSkgOiB0aWNrVmFsdWVzLFxuICAgICAgICBmb3JtYXQgPSB0aWNrRm9ybWF0ID09IG51bGwgPyAoc2NhbGUudGlja0Zvcm1hdCA/IHNjYWxlLnRpY2tGb3JtYXQuYXBwbHkoc2NhbGUsIHRpY2tBcmd1bWVudHMpIDogaWRlbnRpdHkpIDogdGlja0Zvcm1hdCxcbiAgICAgICAgc3BhY2luZyA9IE1hdGgubWF4KHRpY2tTaXplSW5uZXIsIDApICsgdGlja1BhZGRpbmcsXG4gICAgICAgIHJhbmdlID0gc2NhbGUucmFuZ2UoKSxcbiAgICAgICAgcmFuZ2UwID0gK3JhbmdlWzBdICsgb2Zmc2V0LFxuICAgICAgICByYW5nZTEgPSArcmFuZ2VbcmFuZ2UubGVuZ3RoIC0gMV0gKyBvZmZzZXQsXG4gICAgICAgIHBvc2l0aW9uID0gKHNjYWxlLmJhbmR3aWR0aCA/IGNlbnRlciA6IG51bWJlcikoc2NhbGUuY29weSgpLCBvZmZzZXQpLFxuICAgICAgICBzZWxlY3Rpb24gPSBjb250ZXh0LnNlbGVjdGlvbiA/IGNvbnRleHQuc2VsZWN0aW9uKCkgOiBjb250ZXh0LFxuICAgICAgICBwYXRoID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi5kb21haW5cIikuZGF0YShbbnVsbF0pLFxuICAgICAgICB0aWNrID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi50aWNrXCIpLmRhdGEodmFsdWVzLCBzY2FsZSkub3JkZXIoKSxcbiAgICAgICAgdGlja0V4aXQgPSB0aWNrLmV4aXQoKSxcbiAgICAgICAgdGlja0VudGVyID0gdGljay5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwidGlja1wiKSxcbiAgICAgICAgbGluZSA9IHRpY2suc2VsZWN0KFwibGluZVwiKSxcbiAgICAgICAgdGV4dCA9IHRpY2suc2VsZWN0KFwidGV4dFwiKTtcblxuICAgIHBhdGggPSBwYXRoLm1lcmdlKHBhdGguZW50ZXIoKS5pbnNlcnQoXCJwYXRoXCIsIFwiLnRpY2tcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRvbWFpblwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImN1cnJlbnRDb2xvclwiKSk7XG5cbiAgICB0aWNrID0gdGljay5tZXJnZSh0aWNrRW50ZXIpO1xuXG4gICAgbGluZSA9IGxpbmUubWVyZ2UodGlja0VudGVyLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJjdXJyZW50Q29sb3JcIilcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcikpO1xuXG4gICAgdGV4dCA9IHRleHQubWVyZ2UodGlja0VudGVyLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpXG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAuYXR0cihcImR5XCIsIG9yaWVudCA9PT0gdG9wID8gXCIwZW1cIiA6IG9yaWVudCA9PT0gYm90dG9tID8gXCIwLjcxZW1cIiA6IFwiMC4zMmVtXCIpKTtcblxuICAgIGlmIChjb250ZXh0ICE9PSBzZWxlY3Rpb24pIHtcbiAgICAgIHBhdGggPSBwYXRoLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICB0aWNrID0gdGljay50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgbGluZSA9IGxpbmUudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIHRleHQgPSB0ZXh0LnRyYW5zaXRpb24oY29udGV4dCk7XG5cbiAgICAgIHRpY2tFeGl0ID0gdGlja0V4aXQudHJhbnNpdGlvbihjb250ZXh0KVxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGlzRmluaXRlKGQgPSBwb3NpdGlvbihkKSkgPyB0cmFuc2Zvcm0oZCArIG9mZnNldCkgOiB0aGlzLmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTsgfSk7XG5cbiAgICAgIHRpY2tFbnRlclxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgdmFyIHAgPSB0aGlzLnBhcmVudE5vZGUuX19heGlzOyByZXR1cm4gdHJhbnNmb3JtKChwICYmIGlzRmluaXRlKHAgPSBwKGQpKSA/IHAgOiBwb3NpdGlvbihkKSkgKyBvZmZzZXQpOyB9KTtcbiAgICB9XG5cbiAgICB0aWNrRXhpdC5yZW1vdmUoKTtcblxuICAgIHBhdGhcbiAgICAgICAgLmF0dHIoXCJkXCIsIG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT09IHJpZ2h0XG4gICAgICAgICAgICA/ICh0aWNrU2l6ZU91dGVyID8gXCJNXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiLFwiICsgcmFuZ2UwICsgXCJIXCIgKyBvZmZzZXQgKyBcIlZcIiArIHJhbmdlMSArIFwiSFwiICsgayAqIHRpY2tTaXplT3V0ZXIgOiBcIk1cIiArIG9mZnNldCArIFwiLFwiICsgcmFuZ2UwICsgXCJWXCIgKyByYW5nZTEpXG4gICAgICAgICAgICA6ICh0aWNrU2l6ZU91dGVyID8gXCJNXCIgKyByYW5nZTAgKyBcIixcIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCJWXCIgKyBvZmZzZXQgKyBcIkhcIiArIHJhbmdlMSArIFwiVlwiICsgayAqIHRpY2tTaXplT3V0ZXIgOiBcIk1cIiArIHJhbmdlMCArIFwiLFwiICsgb2Zmc2V0ICsgXCJIXCIgKyByYW5nZTEpKTtcblxuICAgIHRpY2tcbiAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIDEpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHRyYW5zZm9ybShwb3NpdGlvbihkKSArIG9mZnNldCk7IH0pO1xuXG4gICAgbGluZVxuICAgICAgICAuYXR0cih4ICsgXCIyXCIsIGsgKiB0aWNrU2l6ZUlubmVyKTtcblxuICAgIHRleHRcbiAgICAgICAgLmF0dHIoeCwgayAqIHNwYWNpbmcpXG4gICAgICAgIC50ZXh0KGZvcm1hdCk7XG5cbiAgICBzZWxlY3Rpb24uZmlsdGVyKGVudGVyaW5nKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgIC5hdHRyKFwiZm9udC1zaXplXCIsIDEwKVxuICAgICAgICAuYXR0cihcImZvbnQtZmFtaWx5XCIsIFwic2Fucy1zZXJpZlwiKVxuICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIG9yaWVudCA9PT0gcmlnaHQgPyBcInN0YXJ0XCIgOiBvcmllbnQgPT09IGxlZnQgPyBcImVuZFwiIDogXCJtaWRkbGVcIik7XG5cbiAgICBzZWxlY3Rpb25cbiAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7IHRoaXMuX19heGlzID0gcG9zaXRpb247IH0pO1xuICB9XG5cbiAgYXhpcy5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzY2FsZSA9IF8sIGF4aXMpIDogc2NhbGU7XG4gIH07XG5cbiAgYXhpcy50aWNrcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aWNrQXJndW1lbnRzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpLCBheGlzO1xuICB9O1xuXG4gIGF4aXMudGlja0FyZ3VtZW50cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrQXJndW1lbnRzID0gXyA9PSBudWxsID8gW10gOiBBcnJheS5mcm9tKF8pLCBheGlzKSA6IHRpY2tBcmd1bWVudHMuc2xpY2UoKTtcbiAgfTtcblxuICBheGlzLnRpY2tWYWx1ZXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1ZhbHVlcyA9IF8gPT0gbnVsbCA/IG51bGwgOiBBcnJheS5mcm9tKF8pLCBheGlzKSA6IHRpY2tWYWx1ZXMgJiYgdGlja1ZhbHVlcy5zbGljZSgpO1xuICB9O1xuXG4gIGF4aXMudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrRm9ybWF0ID0gXywgYXhpcykgOiB0aWNrRm9ybWF0O1xuICB9O1xuXG4gIGF4aXMudGlja1NpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVJbm5lciA9IHRpY2tTaXplT3V0ZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xuICB9O1xuXG4gIGF4aXMudGlja1NpemVJbm5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gK18sIGF4aXMpIDogdGlja1NpemVJbm5lcjtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplT3V0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplT3V0ZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrUGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrUGFkZGluZyA9ICtfLCBheGlzKSA6IHRpY2tQYWRkaW5nO1xuICB9O1xuXG4gIGF4aXMub2Zmc2V0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG9mZnNldCA9ICtfLCBheGlzKSA6IG9mZnNldDtcbiAgfTtcblxuICByZXR1cm4gYXhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNUb3Aoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXModG9wLCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzUmlnaHQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMocmlnaHQsIHNjYWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNCb3R0b20oc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMoYm90dG9tLCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzTGVmdChzY2FsZSkge1xuICByZXR1cm4gYXhpcyhsZWZ0LCBzY2FsZSk7XG59XG4iLCJ2YXIgbm9vcCA9IHt2YWx1ZTogKCkgPT4ge319O1xuXG5mdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0ge30sIHQ7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoISh0ID0gYXJndW1lbnRzW2ldICsgXCJcIikgfHwgKHQgaW4gXykgfHwgL1tcXHMuXS8udGVzdCh0KSkgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCB0eXBlOiBcIiArIHQpO1xuICAgIF9bdF0gPSBbXTtcbiAgfVxuICByZXR1cm4gbmV3IERpc3BhdGNoKF8pO1xufVxuXG5mdW5jdGlvbiBEaXNwYXRjaChfKSB7XG4gIHRoaXMuXyA9IF87XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcywgdHlwZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIGlmICh0ICYmICF0eXBlcy5oYXNPd25Qcm9wZXJ0eSh0KSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHQpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5EaXNwYXRjaC5wcm90b3R5cGUgPSBkaXNwYXRjaC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBEaXNwYXRjaCxcbiAgb246IGZ1bmN0aW9uKHR5cGVuYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciBfID0gdGhpcy5fLFxuICAgICAgICBUID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiLCBfKSxcbiAgICAgICAgdCxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gVC5sZW5ndGg7XG5cbiAgICAvLyBJZiBubyBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZXR1cm4gdGhlIGNhbGxiYWNrIG9mIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpICYmICh0ID0gZ2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUpKSkgcmV0dXJuIHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgYSB0eXBlIHdhcyBzcGVjaWZpZWQsIHNldCB0aGUgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIC8vIE90aGVyd2lzZSwgaWYgYSBudWxsIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJlbW92ZSBjYWxsYmFja3Mgb2YgdGhlIGdpdmVuIG5hbWUuXG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgY2FsbGJhY2spO1xuICAgICAgZWxzZSBpZiAoY2FsbGJhY2sgPT0gbnVsbCkgZm9yICh0IGluIF8pIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgbnVsbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGNvcHk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb3B5ID0ge30sIF8gPSB0aGlzLl87XG4gICAgZm9yICh2YXIgdCBpbiBfKSBjb3B5W3RdID0gX1t0XS5zbGljZSgpO1xuICAgIHJldHVybiBuZXcgRGlzcGF0Y2goY29weSk7XG4gIH0sXG4gIGNhbGw6IGZ1bmN0aW9uKHR5cGUsIHRoYXQpIHtcbiAgICBpZiAoKG4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMikgPiAwKSBmb3IgKHZhciBhcmdzID0gbmV3IEFycmF5KG4pLCBpID0gMCwgbiwgdDsgaSA8IG47ICsraSkgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbih0eXBlLCB0aGF0LCBhcmdzKSB7XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHZhciB0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXQodHlwZSwgbmFtZSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoLCBjOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKChjID0gdHlwZVtpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgcmV0dXJuIGMudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldCh0eXBlLCBuYW1lLCBjYWxsYmFjaykge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKHR5cGVbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgdHlwZVtpXSA9IG5vb3AsIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpLmNvbmNhdCh0eXBlLnNsaWNlKGkgKyAxKSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHR5cGUucHVzaCh7bmFtZTogbmFtZSwgdmFsdWU6IGNhbGxiYWNrfSk7XG4gIHJldHVybiB0eXBlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkaXNwYXRjaDtcbiIsImZ1bmN0aW9uIG5vbmUoKSB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IG5vbmUgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsIi8vIEdpdmVuIHNvbWV0aGluZyBhcnJheSBsaWtlIChvciBudWxsKSwgcmV0dXJucyBzb21ldGhpbmcgdGhhdCBpcyBzdHJpY3RseSBhblxuLy8gYXJyYXkuIFRoaXMgaXMgdXNlZCB0byBlbnN1cmUgdGhhdCBhcnJheS1saWtlIG9iamVjdHMgcGFzc2VkIHRvIGQzLnNlbGVjdEFsbFxuLy8gb3Igc2VsZWN0aW9uLnNlbGVjdEFsbCBhcmUgY29udmVydGVkIGludG8gcHJvcGVyIGFycmF5cyB3aGVuIGNyZWF0aW5nIGFcbi8vIHNlbGVjdGlvbjsgd2UgZG9u4oCZdCBldmVyIHdhbnQgdG8gY3JlYXRlIGEgc2VsZWN0aW9uIGJhY2tlZCBieSBhIGxpdmVcbi8vIEhUTUxDb2xsZWN0aW9uIG9yIE5vZGVMaXN0LiBIb3dldmVyLCBub3RlIHRoYXQgc2VsZWN0aW9uLnNlbGVjdEFsbCB3aWxsIHVzZSBhXG4vLyBzdGF0aWMgTm9kZUxpc3QgYXMgYSBncm91cCwgc2luY2UgaXQgc2FmZWx5IGRlcml2ZWQgZnJvbSBxdWVyeVNlbGVjdG9yQWxsLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXJyYXkoeCkge1xuICByZXR1cm4geCA9PSBudWxsID8gW10gOiBBcnJheS5pc0FycmF5KHgpID8geCA6IEFycmF5LmZyb20oeCk7XG59XG4iLCJmdW5jdGlvbiBlbXB0eSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IGVtcHR5IDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubWF0Y2hlcyhzZWxlY3Rvcik7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGlsZE1hdGNoZXIoc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgfTtcbn1cblxuIiwiaW1wb3J0IHtjaGlsZE1hdGNoZXJ9IGZyb20gXCIuLi9tYXRjaGVyLmpzXCI7XG5cbnZhciBmaW5kID0gQXJyYXkucHJvdG90eXBlLmZpbmQ7XG5cbmZ1bmN0aW9uIGNoaWxkRmluZChtYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZpbmQuY2FsbCh0aGlzLmNoaWxkcmVuLCBtYXRjaCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNoaWxkRmlyc3QoKSB7XG4gIHJldHVybiB0aGlzLmZpcnN0RWxlbWVudENoaWxkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3QobWF0Y2ggPT0gbnVsbCA/IGNoaWxkRmlyc3RcbiAgICAgIDogY2hpbGRGaW5kKHR5cGVvZiBtYXRjaCA9PT0gXCJmdW5jdGlvblwiID8gbWF0Y2ggOiBjaGlsZE1hdGNoZXIobWF0Y2gpKSk7XG59XG4iLCJpbXBvcnQge2NoaWxkTWF0Y2hlcn0gZnJvbSBcIi4uL21hdGNoZXIuanNcIjtcblxudmFyIGZpbHRlciA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXI7XG5cbmZ1bmN0aW9uIGNoaWxkcmVuKCkge1xuICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gY2hpbGRyZW5GaWx0ZXIobWF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmaWx0ZXIuY2FsbCh0aGlzLmNoaWxkcmVuLCBtYXRjaCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdEFsbChtYXRjaCA9PSBudWxsID8gY2hpbGRyZW5cbiAgICAgIDogY2hpbGRyZW5GaWx0ZXIodHlwZW9mIG1hdGNoID09PSBcImZ1bmN0aW9uXCIgPyBtYXRjaCA6IGNoaWxkTWF0Y2hlcihtYXRjaCkpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHVwZGF0ZSkge1xuICByZXR1cm4gbmV3IEFycmF5KHVwZGF0ZS5sZW5ndGgpO1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2UuanNcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZW50ZXIgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVudGVyTm9kZShwYXJlbnQsIGRhdHVtKSB7XG4gIHRoaXMub3duZXJEb2N1bWVudCA9IHBhcmVudC5vd25lckRvY3VtZW50O1xuICB0aGlzLm5hbWVzcGFjZVVSSSA9IHBhcmVudC5uYW1lc3BhY2VVUkk7XG4gIHRoaXMuX25leHQgPSBudWxsO1xuICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuX19kYXRhX18gPSBkYXR1bTtcbn1cblxuRW50ZXJOb2RlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEVudGVyTm9kZSxcbiAgYXBwZW5kQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkKSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCB0aGlzLl9uZXh0KTsgfSxcbiAgaW5zZXJ0QmVmb3JlOiBmdW5jdGlvbihjaGlsZCwgbmV4dCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgbmV4dCk7IH0sXG4gIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7IH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7IH1cbn07XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCB7RW50ZXJOb2RlfSBmcm9tIFwiLi9lbnRlci5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudC5qc1wiO1xuXG5mdW5jdGlvbiBiaW5kSW5kZXgocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSkge1xuICB2YXIgaSA9IDAsXG4gICAgICBub2RlLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGZpdCBpbnRvIHVwZGF0ZS5cbiAgLy8gUHV0IGFueSBudWxsIG5vZGVzIGludG8gZW50ZXIuXG4gIC8vIFB1dCBhbnkgcmVtYWluaW5nIGRhdGEgaW50byBlbnRlci5cbiAgZm9yICg7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBkb27igJl0IGZpdCBpbnRvIGV4aXQuXG4gIGZvciAoOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBiaW5kS2V5KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEsIGtleSkge1xuICB2YXIgaSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlQnlLZXlWYWx1ZSA9IG5ldyBNYXAsXG4gICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcbiAgICAgIGtleVZhbHVlcyA9IG5ldyBBcnJheShncm91cExlbmd0aCksXG4gICAgICBrZXlWYWx1ZTtcblxuICAvLyBDb21wdXRlIHRoZSBrZXkgZm9yIGVhY2ggbm9kZS5cbiAgLy8gSWYgbXVsdGlwbGUgbm9kZXMgaGF2ZSB0aGUgc2FtZSBrZXksIHRoZSBkdXBsaWNhdGVzIGFyZSBhZGRlZCB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGtleVZhbHVlc1tpXSA9IGtleVZhbHVlID0ga2V5LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApICsgXCJcIjtcbiAgICAgIGlmIChub2RlQnlLZXlWYWx1ZS5oYXMoa2V5VmFsdWUpKSB7XG4gICAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZUJ5S2V5VmFsdWUuc2V0KGtleVZhbHVlLCBub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDb21wdXRlIHRoZSBrZXkgZm9yIGVhY2ggZGF0dW0uXG4gIC8vIElmIHRoZXJlIGEgbm9kZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBrZXksIGpvaW4gYW5kIGFkZCBpdCB0byB1cGRhdGUuXG4gIC8vIElmIHRoZXJlIGlzIG5vdCAob3IgdGhlIGtleSBpcyBhIGR1cGxpY2F0ZSksIGFkZCBpdCB0byBlbnRlci5cbiAgZm9yIChpID0gMDsgaSA8IGRhdGFMZW5ndGg7ICsraSkge1xuICAgIGtleVZhbHVlID0ga2V5LmNhbGwocGFyZW50LCBkYXRhW2ldLCBpLCBkYXRhKSArIFwiXCI7XG4gICAgaWYgKG5vZGUgPSBub2RlQnlLZXlWYWx1ZS5nZXQoa2V5VmFsdWUpKSB7XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICBub2RlQnlLZXlWYWx1ZS5kZWxldGUoa2V5VmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgYW55IHJlbWFpbmluZyBub2RlcyB0aGF0IHdlcmUgbm90IGJvdW5kIHRvIGRhdGEgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKG5vZGVCeUtleVZhbHVlLmdldChrZXlWYWx1ZXNbaV0pID09PSBub2RlKSkge1xuICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRhdHVtKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuX19kYXRhX187XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLCBkYXR1bSk7XG5cbiAgdmFyIGJpbmQgPSBrZXkgPyBiaW5kS2V5IDogYmluZEluZGV4LFxuICAgICAgcGFyZW50cyA9IHRoaXMuX3BhcmVudHMsXG4gICAgICBncm91cHMgPSB0aGlzLl9ncm91cHM7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGNvbnN0YW50KHZhbHVlKTtcblxuICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICB2YXIgcGFyZW50ID0gcGFyZW50c1tqXSxcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbal0sXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICBkYXRhID0gYXJyYXlsaWtlKHZhbHVlLmNhbGwocGFyZW50LCBwYXJlbnQgJiYgcGFyZW50Ll9fZGF0YV9fLCBqLCBwYXJlbnRzKSksXG4gICAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZW50ZXJHcm91cCA9IGVudGVyW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICB1cGRhdGVHcm91cCA9IHVwZGF0ZVtqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgZXhpdEdyb3VwID0gZXhpdFtqXSA9IG5ldyBBcnJheShncm91cExlbmd0aCk7XG5cbiAgICBiaW5kKHBhcmVudCwgZ3JvdXAsIGVudGVyR3JvdXAsIHVwZGF0ZUdyb3VwLCBleGl0R3JvdXAsIGRhdGEsIGtleSk7XG5cbiAgICAvLyBOb3cgY29ubmVjdCB0aGUgZW50ZXIgbm9kZXMgdG8gdGhlaXIgZm9sbG93aW5nIHVwZGF0ZSBub2RlLCBzdWNoIHRoYXRcbiAgICAvLyBhcHBlbmRDaGlsZCBjYW4gaW5zZXJ0IHRoZSBtYXRlcmlhbGl6ZWQgZW50ZXIgbm9kZSBiZWZvcmUgdGhpcyBub2RlLFxuICAgIC8vIHJhdGhlciB0aGFuIGF0IHRoZSBlbmQgb2YgdGhlIHBhcmVudCBub2RlLlxuICAgIGZvciAodmFyIGkwID0gMCwgaTEgPSAwLCBwcmV2aW91cywgbmV4dDsgaTAgPCBkYXRhTGVuZ3RoOyArK2kwKSB7XG4gICAgICBpZiAocHJldmlvdXMgPSBlbnRlckdyb3VwW2kwXSkge1xuICAgICAgICBpZiAoaTAgPj0gaTEpIGkxID0gaTAgKyAxO1xuICAgICAgICB3aGlsZSAoIShuZXh0ID0gdXBkYXRlR3JvdXBbaTFdKSAmJiArK2kxIDwgZGF0YUxlbmd0aCk7XG4gICAgICAgIHByZXZpb3VzLl9uZXh0ID0gbmV4dCB8fCBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZSA9IG5ldyBTZWxlY3Rpb24odXBkYXRlLCBwYXJlbnRzKTtcbiAgdXBkYXRlLl9lbnRlciA9IGVudGVyO1xuICB1cGRhdGUuX2V4aXQgPSBleGl0O1xuICByZXR1cm4gdXBkYXRlO1xufVxuXG4vLyBHaXZlbiBzb21lIGRhdGEsIHRoaXMgcmV0dXJucyBhbiBhcnJheS1saWtlIHZpZXcgb2YgaXQ6IGFuIG9iamVjdCB0aGF0XG4vLyBleHBvc2VzIGEgbGVuZ3RoIHByb3BlcnR5IGFuZCBhbGxvd3MgbnVtZXJpYyBpbmRleGluZy4gTm90ZSB0aGF0IHVubGlrZVxuLy8gc2VsZWN0QWxsLCB0aGlzIGlzbuKAmXQgd29ycmllZCBhYm91dCDigJxsaXZl4oCdIGNvbGxlY3Rpb25zIGJlY2F1c2UgdGhlIHJlc3VsdGluZ1xuLy8gYXJyYXkgd2lsbCBvbmx5IGJlIHVzZWQgYnJpZWZseSB3aGlsZSBkYXRhIGlzIGJlaW5nIGJvdW5kLiAoSXQgaXMgcG9zc2libGUgdG9cbi8vIGNhdXNlIHRoZSBkYXRhIHRvIGNoYW5nZSB3aGlsZSBpdGVyYXRpbmcgYnkgdXNpbmcgYSBrZXkgZnVuY3Rpb24sIGJ1dCBwbGVhc2Vcbi8vIGRvbuKAmXQ7IHdl4oCZZCByYXRoZXIgYXZvaWQgYSBncmF0dWl0b3VzIGNvcHkuKVxuZnVuY3Rpb24gYXJyYXlsaWtlKGRhdGEpIHtcbiAgcmV0dXJuIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmIFwibGVuZ3RoXCIgaW4gZGF0YVxuICAgID8gZGF0YSAvLyBBcnJheSwgVHlwZWRBcnJheSwgTm9kZUxpc3QsIGFycmF5LWxpa2VcbiAgICA6IEFycmF5LmZyb20oZGF0YSk7IC8vIE1hcCwgU2V0LCBpdGVyYWJsZSwgc3RyaW5nLCBvciBhbnl0aGluZyBlbHNlXG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoIWNvbXBhcmUpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgZnVuY3Rpb24gY29tcGFyZU5vZGUoYSwgYikge1xuICAgIHJldHVybiBhICYmIGIgPyBjb21wYXJlKGEuX19kYXRhX18sIGIuX19kYXRhX18pIDogIWEgLSAhYjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHNvcnRncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHNvcnRncm91cCA9IHNvcnRncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNvcnRncm91cFtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvcnRncm91cC5zb3J0KGNvbXBhcmVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHNvcnRncm91cHMsIHRoaXMuX3BhcmVudHMpLm9yZGVyKCk7XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZyhhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImV4cG9ydCB2YXIgeGh0bWwgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzdmc6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgeGh0bWw6IHhodG1sLFxuICB4bGluazogXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gIHhtbDogXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy9cIlxufTtcbiIsImltcG9ydCBuYW1lc3BhY2VzIGZyb20gXCIuL25hbWVzcGFjZXMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgcHJlZml4ID0gbmFtZSArPSBcIlwiLCBpID0gcHJlZml4LmluZGV4T2YoXCI6XCIpO1xuICBpZiAoaSA+PSAwICYmIChwcmVmaXggPSBuYW1lLnNsaWNlKDAsIGkpKSAhPT0gXCJ4bWxuc1wiKSBuYW1lID0gbmFtZS5zbGljZShpICsgMSk7XG4gIHJldHVybiBuYW1lc3BhY2VzLmhhc093blByb3BlcnR5KHByZWZpeCkgPyB7c3BhY2U6IG5hbWVzcGFjZXNbcHJlZml4XSwgbG9jYWw6IG5hbWV9IDogbmFtZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4uL25hbWVzcGFjZS5qc1wiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHYpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTtcbiAgICByZXR1cm4gZnVsbG5hbWUubG9jYWxcbiAgICAgICAgPyBub2RlLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbClcbiAgICAgICAgOiBub2RlLmdldEF0dHJpYnV0ZShmdWxsbmFtZSk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkpKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLm93bmVyRG9jdW1lbnQgJiYgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSAvLyBub2RlIGlzIGEgTm9kZVxuICAgICAgfHwgKG5vZGUuZG9jdW1lbnQgJiYgbm9kZSkgLy8gbm9kZSBpcyBhIFdpbmRvd1xuICAgICAgfHwgbm9kZS5kZWZhdWx0VmlldzsgLy8gbm9kZSBpcyBhIERvY3VtZW50XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvdy5qc1wiO1xuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgZWxzZSB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHYsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gc3R5bGVSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBzdHlsZUZ1bmN0aW9uXG4gICAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQpKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSlcbiAgICAgIDogc3R5bGVWYWx1ZSh0aGlzLm5vZGUoKSwgbmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZVZhbHVlKG5vZGUsIG5hbWUpIHtcbiAgcmV0dXJuIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKVxuICAgICAgfHwgZGVmYXVsdFZpZXcobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gcHJvcGVydHlSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZGVsZXRlIHRoaXNbbmFtZV07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5Q29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXNbbmFtZV0gPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgIGVsc2UgdGhpc1tuYW1lXSA9IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHByb3BlcnR5UmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHByb3BlcnR5RnVuY3Rpb25cbiAgICAgICAgICA6IHByb3BlcnR5Q29uc3RhbnQpKG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKClbbmFtZV07XG59XG4iLCJmdW5jdGlvbiBjbGFzc0FycmF5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnRyaW0oKS5zcGxpdCgvXnxcXHMrLyk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzTGlzdChub2RlKSB7XG4gIHJldHVybiBub2RlLmNsYXNzTGlzdCB8fCBuZXcgQ2xhc3NMaXN0KG5vZGUpO1xufVxuXG5mdW5jdGlvbiBDbGFzc0xpc3Qobm9kZSkge1xuICB0aGlzLl9ub2RlID0gbm9kZTtcbiAgdGhpcy5fbmFtZXMgPSBjbGFzc0FycmF5KG5vZGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIik7XG59XG5cbkNsYXNzTGlzdC5wcm90b3R5cGUgPSB7XG4gIGFkZDogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnB1c2gobmFtZSk7XG4gICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICBpZiAoaSA+PSAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5zcGxpY2UoaSwgMSk7XG4gICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH0sXG4gIGNvbnRhaW5zOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSkgPj0gMDtcbiAgfVxufTtcblxuZnVuY3Rpb24gY2xhc3NlZEFkZChub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5hZGQobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkUmVtb3ZlKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LnJlbW92ZShuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRUcnVlKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjbGFzc2VkQWRkKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZEZhbHNlKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjbGFzc2VkUmVtb3ZlKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZEZ1bmN0aW9uKG5hbWVzLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgKHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgPyBjbGFzc2VkQWRkIDogY2xhc3NlZFJlbW92ZSkodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgbmFtZXMgPSBjbGFzc0FycmF5KG5hbWUgKyBcIlwiKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbGlzdCA9IGNsYXNzTGlzdCh0aGlzLm5vZGUoKSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFsaXN0LmNvbnRhaW5zKG5hbWVzW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gY2xhc3NlZEZ1bmN0aW9uIDogdmFsdWVcbiAgICAgID8gY2xhc3NlZFRydWVcbiAgICAgIDogY2xhc3NlZEZhbHNlKShuYW1lcywgdmFsdWUpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRSZW1vdmUoKSB7XG4gIHRoaXMudGV4dENvbnRlbnQgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gdGV4dFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gdGV4dEZ1bmN0aW9uXG4gICAgICAgICAgOiB0ZXh0Q29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkudGV4dENvbnRlbnQ7XG59XG4iLCJmdW5jdGlvbiBodG1sUmVtb3ZlKCkge1xuICB0aGlzLmlubmVySFRNTCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGh0bWxDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaHRtbEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IGh0bWxSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGh0bWxGdW5jdGlvblxuICAgICAgICAgIDogaHRtbENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLmlubmVySFRNTDtcbn1cbiIsImZ1bmN0aW9uIHJhaXNlKCkge1xuICBpZiAodGhpcy5uZXh0U2libGluZykgdGhpcy5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyYWlzZSk7XG59XG4iLCJmdW5jdGlvbiBsb3dlcigpIHtcbiAgaWYgKHRoaXMucHJldmlvdXNTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMsIHRoaXMucGFyZW50Tm9kZS5maXJzdENoaWxkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gobG93ZXIpO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi9uYW1lc3BhY2UuanNcIjtcbmltcG9ydCB7eGh0bWx9IGZyb20gXCIuL25hbWVzcGFjZXMuanNcIjtcblxuZnVuY3Rpb24gY3JlYXRvckluaGVyaXQobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRvY3VtZW50ID0gdGhpcy5vd25lckRvY3VtZW50LFxuICAgICAgICB1cmkgPSB0aGlzLm5hbWVzcGFjZVVSSTtcbiAgICByZXR1cm4gdXJpID09PSB4aHRtbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJID09PSB4aHRtbFxuICAgICAgICA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSlcbiAgICAgICAgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlModXJpLCBuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRvckZpeGVkKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIChmdWxsbmFtZS5sb2NhbFxuICAgICAgPyBjcmVhdG9yRml4ZWRcbiAgICAgIDogY3JlYXRvckluaGVyaXQpKGZ1bGxuYW1lKTtcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yLmpzXCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yLmpzXCI7XG5cbmZ1bmN0aW9uIGNvbnN0YW50TnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGJlZm9yZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpLFxuICAgICAgc2VsZWN0ID0gYmVmb3JlID09IG51bGwgPyBjb25zdGFudE51bGwgOiB0eXBlb2YgYmVmb3JlID09PSBcImZ1bmN0aW9uXCIgPyBiZWZvcmUgOiBzZWxlY3RvcihiZWZvcmUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBzZWxlY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmUoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmVtb3ZlKTtcbn1cbiIsImZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZVNoYWxsb3coKSB7XG4gIHZhciBjbG9uZSA9IHRoaXMuY2xvbmVOb2RlKGZhbHNlKSwgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICByZXR1cm4gcGFyZW50ID8gcGFyZW50Lmluc2VydEJlZm9yZShjbG9uZSwgdGhpcy5uZXh0U2libGluZykgOiBjbG9uZTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lRGVlcCgpIHtcbiAgdmFyIGNsb25lID0gdGhpcy5jbG9uZU5vZGUodHJ1ZSksIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgcmV0dXJuIHBhcmVudCA/IHBhcmVudC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRoaXMubmV4dFNpYmxpbmcpIDogY2xvbmU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRlZXApIHtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGRlZXAgPyBzZWxlY3Rpb25fY2xvbmVEZWVwIDogc2VsZWN0aW9uX2Nsb25lU2hhbGxvdyk7XG59XG4iLCJmdW5jdGlvbiBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCwgdGhpcy5fX2RhdGFfXyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uUmVtb3ZlKHR5cGVuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb247XG4gICAgaWYgKCFvbikgcmV0dXJuO1xuICAgIGZvciAodmFyIGogPSAwLCBpID0gLTEsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGlmIChvID0gb25bal0sICghdHlwZW5hbWUudHlwZSB8fCBvLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUpICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLm9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25bKytpXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgrK2kpIG9uLmxlbmd0aCA9IGk7XG4gICAgZWxzZSBkZWxldGUgdGhpcy5fX29uO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbkFkZCh0eXBlbmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbiwgbywgbGlzdGVuZXIgPSBjb250ZXh0TGlzdGVuZXIodmFsdWUpO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICAgIGlmICgobyA9IG9uW2pdKS50eXBlID09PSB0eXBlbmFtZS50eXBlICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLm9wdGlvbnMpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyID0gbGlzdGVuZXIsIG8ub3B0aW9ucyA9IG9wdGlvbnMpO1xuICAgICAgICBvLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKHR5cGVuYW1lLnR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgICBvID0ge3R5cGU6IHR5cGVuYW1lLnR5cGUsIG5hbWU6IHR5cGVuYW1lLm5hbWUsIHZhbHVlOiB2YWx1ZSwgbGlzdGVuZXI6IGxpc3RlbmVyLCBvcHRpb25zOiBvcHRpb25zfTtcbiAgICBpZiAoIW9uKSB0aGlzLl9fb24gPSBbb107XG4gICAgZWxzZSBvbi5wdXNoKG8pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlbmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHR5cGVuYW1lcyA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiksIGksIG4gPSB0eXBlbmFtZXMubGVuZ3RoLCB0O1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBvbiA9IHRoaXMubm9kZSgpLl9fb247XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgZm9yIChpID0gMCwgbyA9IG9uW2pdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgodCA9IHR5cGVuYW1lc1tpXSkudHlwZSA9PT0gby50eXBlICYmIHQubmFtZSA9PT0gby5uYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIG8udmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb24gPSB2YWx1ZSA/IG9uQWRkIDogb25SZW1vdmU7XG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHRoaXMuZWFjaChvbih0eXBlbmFtZXNbaV0sIHZhbHVlLCBvcHRpb25zKSk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IGRlZmF1bHRWaWV3IGZyb20gXCIuLi93aW5kb3cuanNcIjtcblxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChub2RlLCB0eXBlLCBwYXJhbXMpIHtcbiAgdmFyIHdpbmRvdyA9IGRlZmF1bHRWaWV3KG5vZGUpLFxuICAgICAgZXZlbnQgPSB3aW5kb3cuQ3VzdG9tRXZlbnQ7XG5cbiAgaWYgKHR5cGVvZiBldmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZXZlbnQgPSBuZXcgZXZlbnQodHlwZSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBldmVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICAgIGlmIChwYXJhbXMpIGV2ZW50LmluaXRFdmVudCh0eXBlLCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUpLCBldmVudC5kZXRhaWwgPSBwYXJhbXMuZGV0YWlsO1xuICAgIGVsc2UgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSk7XG4gIH1cblxuICBub2RlLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaENvbnN0YW50KHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hGdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBkaXNwYXRjaEZ1bmN0aW9uXG4gICAgICA6IGRpc3BhdGNoQ29uc3RhbnQpKHR5cGUsIHBhcmFtcykpO1xufVxuIiwiaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdEFsbCBmcm9tIFwiLi9zZWxlY3RBbGwuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2VsZWN0Q2hpbGQgZnJvbSBcIi4vc2VsZWN0Q2hpbGQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2VsZWN0Q2hpbGRyZW4gZnJvbSBcIi4vc2VsZWN0Q2hpbGRyZW4uanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlci5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXRhIGZyb20gXCIuL2RhdGEuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW50ZXIgZnJvbSBcIi4vZW50ZXIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZXhpdCBmcm9tIFwiLi9leGl0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2pvaW4gZnJvbSBcIi4vam9pbi5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9tZXJnZSBmcm9tIFwiLi9tZXJnZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9vcmRlciBmcm9tIFwiLi9vcmRlci5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zb3J0IGZyb20gXCIuL3NvcnQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2FsbCBmcm9tIFwiLi9jYWxsLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGVzIGZyb20gXCIuL25vZGVzLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGUgZnJvbSBcIi4vbm9kZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zaXplIGZyb20gXCIuL3NpemUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW1wdHkgZnJvbSBcIi4vZW1wdHkuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZWFjaCBmcm9tIFwiLi9lYWNoLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2F0dHIgZnJvbSBcIi4vYXR0ci5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9wcm9wZXJ0eSBmcm9tIFwiLi9wcm9wZXJ0eS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbGFzc2VkIGZyb20gXCIuL2NsYXNzZWQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fdGV4dCBmcm9tIFwiLi90ZXh0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2h0bWwgZnJvbSBcIi4vaHRtbC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9yYWlzZSBmcm9tIFwiLi9yYWlzZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9sb3dlciBmcm9tIFwiLi9sb3dlci5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9hcHBlbmQgZnJvbSBcIi4vYXBwZW5kLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2luc2VydCBmcm9tIFwiLi9pbnNlcnQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbG9uZSBmcm9tIFwiLi9jbG9uZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXR1bSBmcm9tIFwiLi9kYXR1bS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9vbiBmcm9tIFwiLi9vbi5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9kaXNwYXRjaCBmcm9tIFwiLi9kaXNwYXRjaC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9pdGVyYXRvciBmcm9tIFwiLi9pdGVyYXRvci5qc1wiO1xuXG5leHBvcnQgdmFyIHJvb3QgPSBbbnVsbF07XG5cbmV4cG9ydCBmdW5jdGlvbiBTZWxlY3Rpb24oZ3JvdXBzLCBwYXJlbnRzKSB7XG4gIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdXSwgcm9vdCk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9zZWxlY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzO1xufVxuXG5TZWxlY3Rpb24ucHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNlbGVjdGlvbixcbiAgc2VsZWN0OiBzZWxlY3Rpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHNlbGVjdGlvbl9zZWxlY3RBbGwsXG4gIHNlbGVjdENoaWxkOiBzZWxlY3Rpb25fc2VsZWN0Q2hpbGQsXG4gIHNlbGVjdENoaWxkcmVuOiBzZWxlY3Rpb25fc2VsZWN0Q2hpbGRyZW4sXG4gIGZpbHRlcjogc2VsZWN0aW9uX2ZpbHRlcixcbiAgZGF0YTogc2VsZWN0aW9uX2RhdGEsXG4gIGVudGVyOiBzZWxlY3Rpb25fZW50ZXIsXG4gIGV4aXQ6IHNlbGVjdGlvbl9leGl0LFxuICBqb2luOiBzZWxlY3Rpb25fam9pbixcbiAgbWVyZ2U6IHNlbGVjdGlvbl9tZXJnZSxcbiAgc2VsZWN0aW9uOiBzZWxlY3Rpb25fc2VsZWN0aW9uLFxuICBvcmRlcjogc2VsZWN0aW9uX29yZGVyLFxuICBzb3J0OiBzZWxlY3Rpb25fc29ydCxcbiAgY2FsbDogc2VsZWN0aW9uX2NhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fbm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX2VhY2gsXG4gIGF0dHI6IHNlbGVjdGlvbl9hdHRyLFxuICBzdHlsZTogc2VsZWN0aW9uX3N0eWxlLFxuICBwcm9wZXJ0eTogc2VsZWN0aW9uX3Byb3BlcnR5LFxuICBjbGFzc2VkOiBzZWxlY3Rpb25fY2xhc3NlZCxcbiAgdGV4dDogc2VsZWN0aW9uX3RleHQsXG4gIGh0bWw6IHNlbGVjdGlvbl9odG1sLFxuICByYWlzZTogc2VsZWN0aW9uX3JhaXNlLFxuICBsb3dlcjogc2VsZWN0aW9uX2xvd2VyLFxuICBhcHBlbmQ6IHNlbGVjdGlvbl9hcHBlbmQsXG4gIGluc2VydDogc2VsZWN0aW9uX2luc2VydCxcbiAgcmVtb3ZlOiBzZWxlY3Rpb25fcmVtb3ZlLFxuICBjbG9uZTogc2VsZWN0aW9uX2Nsb25lLFxuICBkYXR1bTogc2VsZWN0aW9uX2RhdHVtLFxuICBvbjogc2VsZWN0aW9uX29uLFxuICBkaXNwYXRjaDogc2VsZWN0aW9uX2Rpc3BhdGNoLFxuICBbU3ltYm9sLml0ZXJhdG9yXTogc2VsZWN0aW9uX2l0ZXJhdG9yXG59O1xuXG5leHBvcnQgZGVmYXVsdCBzZWxlY3Rpb247XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBhcnJheSBmcm9tIFwiLi4vYXJyYXkuanNcIjtcbmltcG9ydCBzZWxlY3RvckFsbCBmcm9tIFwiLi4vc2VsZWN0b3JBbGwuanNcIjtcblxuZnVuY3Rpb24gYXJyYXlBbGwoc2VsZWN0KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJyYXkoc2VsZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgPT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gYXJyYXlBbGwoc2VsZWN0KTtcbiAgZWxzZSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSk7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHBhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgbWF0Y2hlciBmcm9tIFwiLi4vbWF0Y2hlci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2UuanNcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZXhpdCB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob25lbnRlciwgb251cGRhdGUsIG9uZXhpdCkge1xuICB2YXIgZW50ZXIgPSB0aGlzLmVudGVyKCksIHVwZGF0ZSA9IHRoaXMsIGV4aXQgPSB0aGlzLmV4aXQoKTtcbiAgaWYgKHR5cGVvZiBvbmVudGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBlbnRlciA9IG9uZW50ZXIoZW50ZXIpO1xuICAgIGlmIChlbnRlcikgZW50ZXIgPSBlbnRlci5zZWxlY3Rpb24oKTtcbiAgfSBlbHNlIHtcbiAgICBlbnRlciA9IGVudGVyLmFwcGVuZChvbmVudGVyICsgXCJcIik7XG4gIH1cbiAgaWYgKG9udXBkYXRlICE9IG51bGwpIHtcbiAgICB1cGRhdGUgPSBvbnVwZGF0ZSh1cGRhdGUpO1xuICAgIGlmICh1cGRhdGUpIHVwZGF0ZSA9IHVwZGF0ZS5zZWxlY3Rpb24oKTtcbiAgfVxuICBpZiAob25leGl0ID09IG51bGwpIGV4aXQucmVtb3ZlKCk7IGVsc2Ugb25leGl0KGV4aXQpO1xuICByZXR1cm4gZW50ZXIgJiYgdXBkYXRlID8gZW50ZXIubWVyZ2UodXBkYXRlKS5vcmRlcigpIDogdXBkYXRlO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IGNvbnRleHQuc2VsZWN0aW9uID8gY29udGV4dC5zZWxlY3Rpb24oKSA6IGNvbnRleHQ7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHNlbGVjdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gLTEsIG0gPSBncm91cHMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gZ3JvdXAubGVuZ3RoIC0gMSwgbmV4dCA9IGdyb3VwW2ldLCBub2RlOyAtLWkgPj0gMDspIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgaWYgKG5leHQgJiYgbm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihuZXh0KSBeIDQpIG5leHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XG4gICAgICAgIG5leHQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1swXTtcbiAgYXJndW1lbnRzWzBdID0gdGhpcztcbiAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20odGhpcyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIG5vZGUgPSBncm91cFtpXTtcbiAgICAgIGlmIChub2RlKSByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICBsZXQgc2l6ZSA9IDA7XG4gIGZvciAoY29uc3Qgbm9kZSBvZiB0aGlzKSArK3NpemU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgcmV0dXJuIHNpemU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICF0aGlzLm5vZGUoKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGNhbGxiYWNrLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiLCB2YWx1ZSlcbiAgICAgIDogdGhpcy5ub2RlKCkuX19kYXRhX187XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiooKSB7XG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB5aWVsZCBub2RlO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb24sIHJvb3R9IGZyb20gXCIuL3NlbGVjdGlvbi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKV1dLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbW3NlbGVjdG9yXV0sIHJvb3QpO1xufVxuIiwiLy8gVGhlc2UgYXJlIHR5cGljYWxseSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggbm9ldmVudCB0byBlbnN1cmUgdGhhdCB3ZSBjYW5cbi8vIHByZXZlbnREZWZhdWx0IG9uIHRoZSBldmVudC5cbmV4cG9ydCBjb25zdCBub25wYXNzaXZlID0ge3Bhc3NpdmU6IGZhbHNlfTtcbmV4cG9ydCBjb25zdCBub25wYXNzaXZlY2FwdHVyZSA9IHtjYXB0dXJlOiB0cnVlLCBwYXNzaXZlOiBmYWxzZX07XG5cbmV4cG9ydCBmdW5jdGlvbiBub3Byb3BhZ2F0aW9uKGV2ZW50KSB7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihldmVudCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgbm9ldmVudCwge25vbnBhc3NpdmVjYXB0dXJlfSBmcm9tIFwiLi9ub2V2ZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZpZXcpIHtcbiAgdmFyIHJvb3QgPSB2aWV3LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdCh2aWV3KS5vbihcImRyYWdzdGFydC5kcmFnXCIsIG5vZXZlbnQsIG5vbnBhc3NpdmVjYXB0dXJlKTtcbiAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICBzZWxlY3Rpb24ub24oXCJzZWxlY3RzdGFydC5kcmFnXCIsIG5vZXZlbnQsIG5vbnBhc3NpdmVjYXB0dXJlKTtcbiAgfSBlbHNlIHtcbiAgICByb290Ll9fbm9zZWxlY3QgPSByb290LnN0eWxlLk1velVzZXJTZWxlY3Q7XG4gICAgcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gXCJub25lXCI7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHllc2RyYWcodmlldywgbm9jbGljaykge1xuICB2YXIgcm9vdCA9IHZpZXcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgc2VsZWN0aW9uID0gc2VsZWN0KHZpZXcpLm9uKFwiZHJhZ3N0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gIGlmIChub2NsaWNrKSB7XG4gICAgc2VsZWN0aW9uLm9uKFwiY2xpY2suZHJhZ1wiLCBub2V2ZW50LCBub25wYXNzaXZlY2FwdHVyZSk7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgc2VsZWN0aW9uLm9uKFwiY2xpY2suZHJhZ1wiLCBudWxsKTsgfSwgMCk7XG4gIH1cbiAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICBzZWxlY3Rpb24ub24oXCJzZWxlY3RzdGFydC5kcmFnXCIsIG51bGwpO1xuICB9IGVsc2Uge1xuICAgIHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdCA9IHJvb3QuX19ub3NlbGVjdDtcbiAgICBkZWxldGUgcm9vdC5fX25vc2VsZWN0O1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb25zdHJ1Y3RvciwgZmFjdG9yeSwgcHJvdG90eXBlKSB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGZhY3RvcnkucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICBwcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3Rvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChwYXJlbnQsIGRlZmluaXRpb24pIHtcbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocGFyZW50LnByb3RvdHlwZSk7XG4gIGZvciAodmFyIGtleSBpbiBkZWZpbml0aW9uKSBwcm90b3R5cGVba2V5XSA9IGRlZmluaXRpb25ba2V5XTtcbiAgcmV0dXJuIHByb3RvdHlwZTtcbn1cbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZS5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ29sb3IoKSB7fVxuXG5leHBvcnQgdmFyIGRhcmtlciA9IDAuNztcbmV4cG9ydCB2YXIgYnJpZ2h0ZXIgPSAxIC8gZGFya2VyO1xuXG52YXIgcmVJID0gXCJcXFxccyooWystXT9cXFxcZCspXFxcXHMqXCIsXG4gICAgcmVOID0gXCJcXFxccyooWystXT8oPzpcXFxcZCpcXFxcLik/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pXFxcXHMqXCIsXG4gICAgcmVQID0gXCJcXFxccyooWystXT8oPzpcXFxcZCpcXFxcLik/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pJVxcXFxzKlwiLFxuICAgIHJlSGV4ID0gL14jKFswLTlhLWZdezMsOH0pJC8sXG4gICAgcmVSZ2JJbnRlZ2VyID0gbmV3IFJlZ0V4cChgXnJnYlxcXFwoJHtyZUl9LCR7cmVJfSwke3JlSX1cXFxcKSRgKSxcbiAgICByZVJnYlBlcmNlbnQgPSBuZXcgUmVnRXhwKGBecmdiXFxcXCgke3JlUH0sJHtyZVB9LCR7cmVQfVxcXFwpJGApLFxuICAgIHJlUmdiYUludGVnZXIgPSBuZXcgUmVnRXhwKGBecmdiYVxcXFwoJHtyZUl9LCR7cmVJfSwke3JlSX0sJHtyZU59XFxcXCkkYCksXG4gICAgcmVSZ2JhUGVyY2VudCA9IG5ldyBSZWdFeHAoYF5yZ2JhXFxcXCgke3JlUH0sJHtyZVB9LCR7cmVQfSwke3JlTn1cXFxcKSRgKSxcbiAgICByZUhzbFBlcmNlbnQgPSBuZXcgUmVnRXhwKGBeaHNsXFxcXCgke3JlTn0sJHtyZVB9LCR7cmVQfVxcXFwpJGApLFxuICAgIHJlSHNsYVBlcmNlbnQgPSBuZXcgUmVnRXhwKGBeaHNsYVxcXFwoJHtyZU59LCR7cmVQfSwke3JlUH0sJHtyZU59XFxcXCkkYCk7XG5cbnZhciBuYW1lZCA9IHtcbiAgYWxpY2VibHVlOiAweGYwZjhmZixcbiAgYW50aXF1ZXdoaXRlOiAweGZhZWJkNyxcbiAgYXF1YTogMHgwMGZmZmYsXG4gIGFxdWFtYXJpbmU6IDB4N2ZmZmQ0LFxuICBhenVyZTogMHhmMGZmZmYsXG4gIGJlaWdlOiAweGY1ZjVkYyxcbiAgYmlzcXVlOiAweGZmZTRjNCxcbiAgYmxhY2s6IDB4MDAwMDAwLFxuICBibGFuY2hlZGFsbW9uZDogMHhmZmViY2QsXG4gIGJsdWU6IDB4MDAwMGZmLFxuICBibHVldmlvbGV0OiAweDhhMmJlMixcbiAgYnJvd246IDB4YTUyYTJhLFxuICBidXJseXdvb2Q6IDB4ZGViODg3LFxuICBjYWRldGJsdWU6IDB4NWY5ZWEwLFxuICBjaGFydHJldXNlOiAweDdmZmYwMCxcbiAgY2hvY29sYXRlOiAweGQyNjkxZSxcbiAgY29yYWw6IDB4ZmY3ZjUwLFxuICBjb3JuZmxvd2VyYmx1ZTogMHg2NDk1ZWQsXG4gIGNvcm5zaWxrOiAweGZmZjhkYyxcbiAgY3JpbXNvbjogMHhkYzE0M2MsXG4gIGN5YW46IDB4MDBmZmZmLFxuICBkYXJrYmx1ZTogMHgwMDAwOGIsXG4gIGRhcmtjeWFuOiAweDAwOGI4YixcbiAgZGFya2dvbGRlbnJvZDogMHhiODg2MGIsXG4gIGRhcmtncmF5OiAweGE5YTlhOSxcbiAgZGFya2dyZWVuOiAweDAwNjQwMCxcbiAgZGFya2dyZXk6IDB4YTlhOWE5LFxuICBkYXJra2hha2k6IDB4YmRiNzZiLFxuICBkYXJrbWFnZW50YTogMHg4YjAwOGIsXG4gIGRhcmtvbGl2ZWdyZWVuOiAweDU1NmIyZixcbiAgZGFya29yYW5nZTogMHhmZjhjMDAsXG4gIGRhcmtvcmNoaWQ6IDB4OTkzMmNjLFxuICBkYXJrcmVkOiAweDhiMDAwMCxcbiAgZGFya3NhbG1vbjogMHhlOTk2N2EsXG4gIGRhcmtzZWFncmVlbjogMHg4ZmJjOGYsXG4gIGRhcmtzbGF0ZWJsdWU6IDB4NDgzZDhiLFxuICBkYXJrc2xhdGVncmF5OiAweDJmNGY0ZixcbiAgZGFya3NsYXRlZ3JleTogMHgyZjRmNGYsXG4gIGRhcmt0dXJxdW9pc2U6IDB4MDBjZWQxLFxuICBkYXJrdmlvbGV0OiAweDk0MDBkMyxcbiAgZGVlcHBpbms6IDB4ZmYxNDkzLFxuICBkZWVwc2t5Ymx1ZTogMHgwMGJmZmYsXG4gIGRpbWdyYXk6IDB4Njk2OTY5LFxuICBkaW1ncmV5OiAweDY5Njk2OSxcbiAgZG9kZ2VyYmx1ZTogMHgxZTkwZmYsXG4gIGZpcmVicmljazogMHhiMjIyMjIsXG4gIGZsb3JhbHdoaXRlOiAweGZmZmFmMCxcbiAgZm9yZXN0Z3JlZW46IDB4MjI4YjIyLFxuICBmdWNoc2lhOiAweGZmMDBmZixcbiAgZ2FpbnNib3JvOiAweGRjZGNkYyxcbiAgZ2hvc3R3aGl0ZTogMHhmOGY4ZmYsXG4gIGdvbGQ6IDB4ZmZkNzAwLFxuICBnb2xkZW5yb2Q6IDB4ZGFhNTIwLFxuICBncmF5OiAweDgwODA4MCxcbiAgZ3JlZW46IDB4MDA4MDAwLFxuICBncmVlbnllbGxvdzogMHhhZGZmMmYsXG4gIGdyZXk6IDB4ODA4MDgwLFxuICBob25leWRldzogMHhmMGZmZjAsXG4gIGhvdHBpbms6IDB4ZmY2OWI0LFxuICBpbmRpYW5yZWQ6IDB4Y2Q1YzVjLFxuICBpbmRpZ286IDB4NGIwMDgyLFxuICBpdm9yeTogMHhmZmZmZjAsXG4gIGtoYWtpOiAweGYwZTY4YyxcbiAgbGF2ZW5kZXI6IDB4ZTZlNmZhLFxuICBsYXZlbmRlcmJsdXNoOiAweGZmZjBmNSxcbiAgbGF3bmdyZWVuOiAweDdjZmMwMCxcbiAgbGVtb25jaGlmZm9uOiAweGZmZmFjZCxcbiAgbGlnaHRibHVlOiAweGFkZDhlNixcbiAgbGlnaHRjb3JhbDogMHhmMDgwODAsXG4gIGxpZ2h0Y3lhbjogMHhlMGZmZmYsXG4gIGxpZ2h0Z29sZGVucm9keWVsbG93OiAweGZhZmFkMixcbiAgbGlnaHRncmF5OiAweGQzZDNkMyxcbiAgbGlnaHRncmVlbjogMHg5MGVlOTAsXG4gIGxpZ2h0Z3JleTogMHhkM2QzZDMsXG4gIGxpZ2h0cGluazogMHhmZmI2YzEsXG4gIGxpZ2h0c2FsbW9uOiAweGZmYTA3YSxcbiAgbGlnaHRzZWFncmVlbjogMHgyMGIyYWEsXG4gIGxpZ2h0c2t5Ymx1ZTogMHg4N2NlZmEsXG4gIGxpZ2h0c2xhdGVncmF5OiAweDc3ODg5OSxcbiAgbGlnaHRzbGF0ZWdyZXk6IDB4Nzc4ODk5LFxuICBsaWdodHN0ZWVsYmx1ZTogMHhiMGM0ZGUsXG4gIGxpZ2h0eWVsbG93OiAweGZmZmZlMCxcbiAgbGltZTogMHgwMGZmMDAsXG4gIGxpbWVncmVlbjogMHgzMmNkMzIsXG4gIGxpbmVuOiAweGZhZjBlNixcbiAgbWFnZW50YTogMHhmZjAwZmYsXG4gIG1hcm9vbjogMHg4MDAwMDAsXG4gIG1lZGl1bWFxdWFtYXJpbmU6IDB4NjZjZGFhLFxuICBtZWRpdW1ibHVlOiAweDAwMDBjZCxcbiAgbWVkaXVtb3JjaGlkOiAweGJhNTVkMyxcbiAgbWVkaXVtcHVycGxlOiAweDkzNzBkYixcbiAgbWVkaXVtc2VhZ3JlZW46IDB4M2NiMzcxLFxuICBtZWRpdW1zbGF0ZWJsdWU6IDB4N2I2OGVlLFxuICBtZWRpdW1zcHJpbmdncmVlbjogMHgwMGZhOWEsXG4gIG1lZGl1bXR1cnF1b2lzZTogMHg0OGQxY2MsXG4gIG1lZGl1bXZpb2xldHJlZDogMHhjNzE1ODUsXG4gIG1pZG5pZ2h0Ymx1ZTogMHgxOTE5NzAsXG4gIG1pbnRjcmVhbTogMHhmNWZmZmEsXG4gIG1pc3R5cm9zZTogMHhmZmU0ZTEsXG4gIG1vY2Nhc2luOiAweGZmZTRiNSxcbiAgbmF2YWpvd2hpdGU6IDB4ZmZkZWFkLFxuICBuYXZ5OiAweDAwMDA4MCxcbiAgb2xkbGFjZTogMHhmZGY1ZTYsXG4gIG9saXZlOiAweDgwODAwMCxcbiAgb2xpdmVkcmFiOiAweDZiOGUyMyxcbiAgb3JhbmdlOiAweGZmYTUwMCxcbiAgb3JhbmdlcmVkOiAweGZmNDUwMCxcbiAgb3JjaGlkOiAweGRhNzBkNixcbiAgcGFsZWdvbGRlbnJvZDogMHhlZWU4YWEsXG4gIHBhbGVncmVlbjogMHg5OGZiOTgsXG4gIHBhbGV0dXJxdW9pc2U6IDB4YWZlZWVlLFxuICBwYWxldmlvbGV0cmVkOiAweGRiNzA5MyxcbiAgcGFwYXlhd2hpcDogMHhmZmVmZDUsXG4gIHBlYWNocHVmZjogMHhmZmRhYjksXG4gIHBlcnU6IDB4Y2Q4NTNmLFxuICBwaW5rOiAweGZmYzBjYixcbiAgcGx1bTogMHhkZGEwZGQsXG4gIHBvd2RlcmJsdWU6IDB4YjBlMGU2LFxuICBwdXJwbGU6IDB4ODAwMDgwLFxuICByZWJlY2NhcHVycGxlOiAweDY2MzM5OSxcbiAgcmVkOiAweGZmMDAwMCxcbiAgcm9zeWJyb3duOiAweGJjOGY4ZixcbiAgcm95YWxibHVlOiAweDQxNjllMSxcbiAgc2FkZGxlYnJvd246IDB4OGI0NTEzLFxuICBzYWxtb246IDB4ZmE4MDcyLFxuICBzYW5keWJyb3duOiAweGY0YTQ2MCxcbiAgc2VhZ3JlZW46IDB4MmU4YjU3LFxuICBzZWFzaGVsbDogMHhmZmY1ZWUsXG4gIHNpZW5uYTogMHhhMDUyMmQsXG4gIHNpbHZlcjogMHhjMGMwYzAsXG4gIHNreWJsdWU6IDB4ODdjZWViLFxuICBzbGF0ZWJsdWU6IDB4NmE1YWNkLFxuICBzbGF0ZWdyYXk6IDB4NzA4MDkwLFxuICBzbGF0ZWdyZXk6IDB4NzA4MDkwLFxuICBzbm93OiAweGZmZmFmYSxcbiAgc3ByaW5nZ3JlZW46IDB4MDBmZjdmLFxuICBzdGVlbGJsdWU6IDB4NDY4MmI0LFxuICB0YW46IDB4ZDJiNDhjLFxuICB0ZWFsOiAweDAwODA4MCxcbiAgdGhpc3RsZTogMHhkOGJmZDgsXG4gIHRvbWF0bzogMHhmZjYzNDcsXG4gIHR1cnF1b2lzZTogMHg0MGUwZDAsXG4gIHZpb2xldDogMHhlZTgyZWUsXG4gIHdoZWF0OiAweGY1ZGViMyxcbiAgd2hpdGU6IDB4ZmZmZmZmLFxuICB3aGl0ZXNtb2tlOiAweGY1ZjVmNSxcbiAgeWVsbG93OiAweGZmZmYwMCxcbiAgeWVsbG93Z3JlZW46IDB4OWFjZDMyXG59O1xuXG5kZWZpbmUoQ29sb3IsIGNvbG9yLCB7XG4gIGNvcHkoY2hhbm5lbHMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgdGhpcy5jb25zdHJ1Y3RvciwgdGhpcywgY2hhbm5lbHMpO1xuICB9LFxuICBkaXNwbGF5YWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5kaXNwbGF5YWJsZSgpO1xuICB9LFxuICBoZXg6IGNvbG9yX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiBjb2xvcl9mb3JtYXRIZXgsXG4gIGZvcm1hdEhleDg6IGNvbG9yX2Zvcm1hdEhleDgsXG4gIGZvcm1hdEhzbDogY29sb3JfZm9ybWF0SHNsLFxuICBmb3JtYXRSZ2I6IGNvbG9yX2Zvcm1hdFJnYixcbiAgdG9TdHJpbmc6IGNvbG9yX2Zvcm1hdFJnYlxufSk7XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhleCgpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0SGV4KCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhleDgoKSB7XG4gIHJldHVybiB0aGlzLnJnYigpLmZvcm1hdEhleDgoKTtcbn1cblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0SHNsKCkge1xuICByZXR1cm4gaHNsQ29udmVydCh0aGlzKS5mb3JtYXRIc2woKTtcbn1cblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0UmdiKCkge1xuICByZXR1cm4gdGhpcy5yZ2IoKS5mb3JtYXRSZ2IoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29sb3IoZm9ybWF0KSB7XG4gIHZhciBtLCBsO1xuICBmb3JtYXQgPSAoZm9ybWF0ICsgXCJcIikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAobSA9IHJlSGV4LmV4ZWMoZm9ybWF0KSkgPyAobCA9IG1bMV0ubGVuZ3RoLCBtID0gcGFyc2VJbnQobVsxXSwgMTYpLCBsID09PSA2ID8gcmdibihtKSAvLyAjZmYwMDAwXG4gICAgICA6IGwgPT09IDMgPyBuZXcgUmdiKChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4ZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgobSAmIDB4ZikgPDwgNCkgfCAobSAmIDB4ZiksIDEpIC8vICNmMDBcbiAgICAgIDogbCA9PT0gOCA/IHJnYmEobSA+PiAyNCAmIDB4ZmYsIG0gPj4gMTYgJiAweGZmLCBtID4+IDggJiAweGZmLCAobSAmIDB4ZmYpIC8gMHhmZikgLy8gI2ZmMDAwMDAwXG4gICAgICA6IGwgPT09IDQgPyByZ2JhKChtID4+IDEyICYgMHhmKSB8IChtID4+IDggJiAweGYwKSwgKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHhmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKCgobSAmIDB4ZikgPDwgNCkgfCAobSAmIDB4ZikpIC8gMHhmZikgLy8gI2YwMDBcbiAgICAgIDogbnVsbCkgLy8gaW52YWxpZCBoZXhcbiAgICAgIDogKG0gPSByZVJnYkludGVnZXIuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSwgbVsyXSwgbVszXSwgMSkgLy8gcmdiKDI1NSwgMCwgMClcbiAgICAgIDogKG0gPSByZVJnYlBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgMSkgLy8gcmdiKDEwMCUsIDAlLCAwJSlcbiAgICAgIDogKG0gPSByZVJnYmFJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0sIG1bMl0sIG1bM10sIG1bNF0pIC8vIHJnYmEoMjU1LCAwLCAwLCAxKVxuICAgICAgOiAobSA9IHJlUmdiYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgbVs0XSkgLy8gcmdiKDEwMCUsIDAlLCAwJSwgMSlcbiAgICAgIDogKG0gPSByZUhzbFBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgMSkgLy8gaHNsKDEyMCwgNTAlLCA1MCUpXG4gICAgICA6IChtID0gcmVIc2xhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCBtWzRdKSAvLyBoc2xhKDEyMCwgNTAlLCA1MCUsIDEpXG4gICAgICA6IG5hbWVkLmhhc093blByb3BlcnR5KGZvcm1hdCkgPyByZ2JuKG5hbWVkW2Zvcm1hdF0pIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgICA6IGZvcm1hdCA9PT0gXCJ0cmFuc3BhcmVudFwiID8gbmV3IFJnYihOYU4sIE5hTiwgTmFOLCAwKVxuICAgICAgOiBudWxsO1xufVxuXG5mdW5jdGlvbiByZ2JuKG4pIHtcbiAgcmV0dXJuIG5ldyBSZ2IobiA+PiAxNiAmIDB4ZmYsIG4gPj4gOCAmIDB4ZmYsIG4gJiAweGZmLCAxKTtcbn1cblxuZnVuY3Rpb24gcmdiYShyLCBnLCBiLCBhKSB7XG4gIGlmIChhIDw9IDApIHIgPSBnID0gYiA9IE5hTjtcbiAgcmV0dXJuIG5ldyBSZ2IociwgZywgYiwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2JDb252ZXJ0KG8pIHtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgUmdiO1xuICBvID0gby5yZ2IoKTtcbiAgcmV0dXJuIG5ldyBSZ2Ioby5yLCBvLmcsIG8uYiwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gcmdiQ29udmVydChyKSA6IG5ldyBSZ2IociwgZywgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5yID0gK3I7XG4gIHRoaXMuZyA9ICtnO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShSZ2IsIHJnYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2IoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGNsYW1wKCkge1xuICAgIHJldHVybiBuZXcgUmdiKGNsYW1waSh0aGlzLnIpLCBjbGFtcGkodGhpcy5nKSwgY2xhbXBpKHRoaXMuYiksIGNsYW1wYSh0aGlzLm9wYWNpdHkpKTtcbiAgfSxcbiAgZGlzcGxheWFibGUoKSB7XG4gICAgcmV0dXJuICgtMC41IDw9IHRoaXMuciAmJiB0aGlzLnIgPCAyNTUuNSlcbiAgICAgICAgJiYgKC0wLjUgPD0gdGhpcy5nICYmIHRoaXMuZyA8IDI1NS41KVxuICAgICAgICAmJiAoLTAuNSA8PSB0aGlzLmIgJiYgdGhpcy5iIDwgMjU1LjUpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGhleDogcmdiX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiByZ2JfZm9ybWF0SGV4LFxuICBmb3JtYXRIZXg4OiByZ2JfZm9ybWF0SGV4OCxcbiAgZm9ybWF0UmdiOiByZ2JfZm9ybWF0UmdiLFxuICB0b1N0cmluZzogcmdiX2Zvcm1hdFJnYlxufSkpO1xuXG5mdW5jdGlvbiByZ2JfZm9ybWF0SGV4KCkge1xuICByZXR1cm4gYCMke2hleCh0aGlzLnIpfSR7aGV4KHRoaXMuZyl9JHtoZXgodGhpcy5iKX1gO1xufVxuXG5mdW5jdGlvbiByZ2JfZm9ybWF0SGV4OCgpIHtcbiAgcmV0dXJuIGAjJHtoZXgodGhpcy5yKX0ke2hleCh0aGlzLmcpfSR7aGV4KHRoaXMuYil9JHtoZXgoKGlzTmFOKHRoaXMub3BhY2l0eSkgPyAxIDogdGhpcy5vcGFjaXR5KSAqIDI1NSl9YDtcbn1cblxuZnVuY3Rpb24gcmdiX2Zvcm1hdFJnYigpIHtcbiAgY29uc3QgYSA9IGNsYW1wYSh0aGlzLm9wYWNpdHkpO1xuICByZXR1cm4gYCR7YSA9PT0gMSA/IFwicmdiKFwiIDogXCJyZ2JhKFwifSR7Y2xhbXBpKHRoaXMucil9LCAke2NsYW1waSh0aGlzLmcpfSwgJHtjbGFtcGkodGhpcy5iKX0ke2EgPT09IDEgPyBcIilcIiA6IGAsICR7YX0pYH1gO1xufVxuXG5mdW5jdGlvbiBjbGFtcGEob3BhY2l0eSkge1xuICByZXR1cm4gaXNOYU4ob3BhY2l0eSkgPyAxIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgb3BhY2l0eSkpO1xufVxuXG5mdW5jdGlvbiBjbGFtcGkodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh2YWx1ZSkgfHwgMCkpO1xufVxuXG5mdW5jdGlvbiBoZXgodmFsdWUpIHtcbiAgdmFsdWUgPSBjbGFtcGkodmFsdWUpO1xuICByZXR1cm4gKHZhbHVlIDwgMTYgPyBcIjBcIiA6IFwiXCIpICsgdmFsdWUudG9TdHJpbmcoMTYpO1xufVxuXG5mdW5jdGlvbiBoc2xhKGgsIHMsIGwsIGEpIHtcbiAgaWYgKGEgPD0gMCkgaCA9IHMgPSBsID0gTmFOO1xuICBlbHNlIGlmIChsIDw9IDAgfHwgbCA+PSAxKSBoID0gcyA9IE5hTjtcbiAgZWxzZSBpZiAocyA8PSAwKSBoID0gTmFOO1xuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG5ldyBIc2woby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgSHNsO1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG87XG4gIG8gPSBvLnJnYigpO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbWluID0gTWF0aC5taW4ociwgZywgYiksXG4gICAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcbiAgICAgIGggPSBOYU4sXG4gICAgICBzID0gbWF4IC0gbWluLFxuICAgICAgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgaWYgKHMpIHtcbiAgICBpZiAociA9PT0gbWF4KSBoID0gKGcgLSBiKSAvIHMgKyAoZyA8IGIpICogNjtcbiAgICBlbHNlIGlmIChnID09PSBtYXgpIGggPSAoYiAtIHIpIC8gcyArIDI7XG4gICAgZWxzZSBoID0gKHIgLSBnKSAvIHMgKyA0O1xuICAgIHMgLz0gbCA8IDAuNSA/IG1heCArIG1pbiA6IDIgLSBtYXggLSBtaW47XG4gICAgaCAqPSA2MDtcbiAgfSBlbHNlIHtcbiAgICBzID0gbCA+IDAgJiYgbCA8IDEgPyAwIDogaDtcbiAgfVxuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoc2xDb252ZXJ0KGgpIDogbmV3IEhzbChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIEhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLnMgPSArcztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoSHNsLCBoc2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXIoaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2IoKSB7XG4gICAgdmFyIGggPSB0aGlzLmggJSAzNjAgKyAodGhpcy5oIDwgMCkgKiAzNjAsXG4gICAgICAgIHMgPSBpc05hTihoKSB8fCBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyxcbiAgICAgICAgbCA9IHRoaXMubCxcbiAgICAgICAgbTIgPSBsICsgKGwgPCAwLjUgPyBsIDogMSAtIGwpICogcyxcbiAgICAgICAgbTEgPSAyICogbCAtIG0yO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgaHNsMnJnYihoID49IDI0MCA/IGggLSAyNDAgOiBoICsgMTIwLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoIDwgMTIwID8gaCArIDI0MCA6IGggLSAxMjAsIG0xLCBtMiksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9LFxuICBjbGFtcCgpIHtcbiAgICByZXR1cm4gbmV3IEhzbChjbGFtcGgodGhpcy5oKSwgY2xhbXB0KHRoaXMucyksIGNsYW1wdCh0aGlzLmwpLCBjbGFtcGEodGhpcy5vcGFjaXR5KSk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnMgJiYgdGhpcy5zIDw9IDEgfHwgaXNOYU4odGhpcy5zKSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5sICYmIHRoaXMubCA8PSAxKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICBmb3JtYXRIc2woKSB7XG4gICAgY29uc3QgYSA9IGNsYW1wYSh0aGlzLm9wYWNpdHkpO1xuICAgIHJldHVybiBgJHthID09PSAxID8gXCJoc2woXCIgOiBcImhzbGEoXCJ9JHtjbGFtcGgodGhpcy5oKX0sICR7Y2xhbXB0KHRoaXMucykgKiAxMDB9JSwgJHtjbGFtcHQodGhpcy5sKSAqIDEwMH0lJHthID09PSAxID8gXCIpXCIgOiBgLCAke2F9KWB9YDtcbiAgfVxufSkpO1xuXG5mdW5jdGlvbiBjbGFtcGgodmFsdWUpIHtcbiAgdmFsdWUgPSAodmFsdWUgfHwgMCkgJSAzNjA7XG4gIHJldHVybiB2YWx1ZSA8IDAgPyB2YWx1ZSArIDM2MCA6IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBjbGFtcHQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHZhbHVlIHx8IDApKTtcbn1cblxuLyogRnJvbSBGdkQgMTMuMzcsIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgMyAqL1xuZnVuY3Rpb24gaHNsMnJnYihoLCBtMSwgbTIpIHtcbiAgcmV0dXJuIChoIDwgNjAgPyBtMSArIChtMiAtIG0xKSAqIGggLyA2MFxuICAgICAgOiBoIDwgMTgwID8gbTJcbiAgICAgIDogaCA8IDI0MCA/IG0xICsgKG0yIC0gbTEpICogKDI0MCAtIGgpIC8gNjBcbiAgICAgIDogbTEpICogMjU1O1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGJhc2lzKHQxLCB2MCwgdjEsIHYyLCB2Mykge1xuICB2YXIgdDIgPSB0MSAqIHQxLCB0MyA9IHQyICogdDE7XG4gIHJldHVybiAoKDEgLSAzICogdDEgKyAzICogdDIgLSB0MykgKiB2MFxuICAgICAgKyAoNCAtIDYgKiB0MiArIDMgKiB0MykgKiB2MVxuICAgICAgKyAoMSArIDMgKiB0MSArIDMgKiB0MiAtIDMgKiB0MykgKiB2MlxuICAgICAgKyB0MyAqIHYzKSAvIDY7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcykge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGggLSAxO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdCA8PSAwID8gKHQgPSAwKSA6IHQgPj0gMSA/ICh0ID0gMSwgbiAtIDEpIDogTWF0aC5mbG9vcih0ICogbiksXG4gICAgICAgIHYxID0gdmFsdWVzW2ldLFxuICAgICAgICB2MiA9IHZhbHVlc1tpICsgMV0sXG4gICAgICAgIHYwID0gaSA+IDAgPyB2YWx1ZXNbaSAtIDFdIDogMiAqIHYxIC0gdjIsXG4gICAgICAgIHYzID0gaSA8IG4gLSAxID8gdmFsdWVzW2kgKyAyXSA6IDIgKiB2MiAtIHYxO1xuICAgIHJldHVybiBiYXNpcygodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcbiAgfTtcbn1cbiIsImltcG9ydCB7YmFzaXN9IGZyb20gXCIuL2Jhc2lzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcykge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGg7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKCgodCAlPSAxKSA8IDAgPyArK3QgOiB0KSAqIG4pLFxuICAgICAgICB2MCA9IHZhbHVlc1soaSArIG4gLSAxKSAlIG5dLFxuICAgICAgICB2MSA9IHZhbHVlc1tpICUgbl0sXG4gICAgICAgIHYyID0gdmFsdWVzWyhpICsgMSkgJSBuXSxcbiAgICAgICAgdjMgPSB2YWx1ZXNbKGkgKyAyKSAlIG5dO1xuICAgIHJldHVybiBiYXNpcygodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IHggPT4gKCkgPT4geDtcbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuXG5mdW5jdGlvbiBsaW5lYXIoYSwgZCkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgdCAqIGQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4cG9uZW50aWFsKGEsIGIsIHkpIHtcbiAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGEgKyB0ICogYiwgeSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBodWUoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkID4gMTgwIHx8IGQgPCAtMTgwID8gZCAtIDM2MCAqIE1hdGgucm91bmQoZCAvIDM2MCkgOiBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2FtbWEoeSkge1xuICByZXR1cm4gKHkgPSAreSkgPT09IDEgPyBub2dhbW1hIDogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiIC0gYSA/IGV4cG9uZW50aWFsKGEsIGIsIHkpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vZ2FtbWEoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuIiwiaW1wb3J0IHtyZ2IgYXMgY29sb3JSZ2J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGJhc2lzIGZyb20gXCIuL2Jhc2lzLmpzXCI7XG5pbXBvcnQgYmFzaXNDbG9zZWQgZnJvbSBcIi4vYmFzaXNDbG9zZWQuanNcIjtcbmltcG9ydCBub2dhbW1hLCB7Z2FtbWF9IGZyb20gXCIuL2NvbG9yLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiByZ2JHYW1tYSh5KSB7XG4gIHZhciBjb2xvciA9IGdhbW1hKHkpO1xuXG4gIGZ1bmN0aW9uIHJnYihzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSBjb2xvcigoc3RhcnQgPSBjb2xvclJnYihzdGFydCkpLnIsIChlbmQgPSBjb2xvclJnYihlbmQpKS5yKSxcbiAgICAgICAgZyA9IGNvbG9yKHN0YXJ0LmcsIGVuZC5nKSxcbiAgICAgICAgYiA9IGNvbG9yKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5yID0gcih0KTtcbiAgICAgIHN0YXJ0LmcgPSBnKHQpO1xuICAgICAgc3RhcnQuYiA9IGIodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxuXG4gIHJnYi5nYW1tYSA9IHJnYkdhbW1hO1xuXG4gIHJldHVybiByZ2I7XG59KSgxKTtcblxuZnVuY3Rpb24gcmdiU3BsaW5lKHNwbGluZSkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgdmFyIG4gPSBjb2xvcnMubGVuZ3RoLFxuICAgICAgICByID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBnID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBpLCBjb2xvcjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb2xvciA9IGNvbG9yUmdiKGNvbG9yc1tpXSk7XG4gICAgICByW2ldID0gY29sb3IuciB8fCAwO1xuICAgICAgZ1tpXSA9IGNvbG9yLmcgfHwgMDtcbiAgICAgIGJbaV0gPSBjb2xvci5iIHx8IDA7XG4gICAgfVxuICAgIHIgPSBzcGxpbmUocik7XG4gICAgZyA9IHNwbGluZShnKTtcbiAgICBiID0gc3BsaW5lKGIpO1xuICAgIGNvbG9yLm9wYWNpdHkgPSAxO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBjb2xvci5yID0gcih0KTtcbiAgICAgIGNvbG9yLmcgPSBnKHQpO1xuICAgICAgY29sb3IuYiA9IGIodCk7XG4gICAgICByZXR1cm4gY29sb3IgKyBcIlwiO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgcmdiQmFzaXMgPSByZ2JTcGxpbmUoYmFzaXMpO1xuZXhwb3J0IHZhciByZ2JCYXNpc0Nsb3NlZCA9IHJnYlNwbGluZShiYXNpc0Nsb3NlZCk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIGlmICghYikgYiA9IFtdO1xuICB2YXIgbiA9IGEgPyBNYXRoLm1pbihiLmxlbmd0aCwgYS5sZW5ndGgpIDogMCxcbiAgICAgIGMgPSBiLnNsaWNlKCksXG4gICAgICBpO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGNbaV0gPSBhW2ldICogKDEgLSB0KSArIGJbaV0gKiB0O1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJBcnJheSh4KSB7XG4gIHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcoeCkgJiYgISh4IGluc3RhbmNlb2YgRGF0YVZpZXcpO1xufVxuIiwiaW1wb3J0IHZhbHVlIGZyb20gXCIuL3ZhbHVlLmpzXCI7XG5pbXBvcnQgbnVtYmVyQXJyYXksIHtpc051bWJlckFycmF5fSBmcm9tIFwiLi9udW1iZXJBcnJheS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiAoaXNOdW1iZXJBcnJheShiKSA/IG51bWJlckFycmF5IDogZ2VuZXJpY0FycmF5KShhLCBiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyaWNBcnJheShhLCBiKSB7XG4gIHZhciBuYiA9IGIgPyBiLmxlbmd0aCA6IDAsXG4gICAgICBuYSA9IGEgPyBNYXRoLm1pbihuYiwgYS5sZW5ndGgpIDogMCxcbiAgICAgIHggPSBuZXcgQXJyYXkobmEpLFxuICAgICAgYyA9IG5ldyBBcnJheShuYiksXG4gICAgICBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSB4W2ldID0gdmFsdWUoYVtpXSwgYltpXSk7XG4gIGZvciAoOyBpIDwgbmI7ICsraSkgY1tpXSA9IGJbaV07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgY1tpXSA9IHhbaV0odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBkID0gbmV3IERhdGU7XG4gIHJldHVybiBhID0gK2EsIGIgPSArYiwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBkLnNldFRpbWUoYSAqICgxIC0gdCkgKyBiICogdCksIGQ7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgPSArYiwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICogKDEgLSB0KSArIGIgKiB0O1xuICB9O1xufVxuIiwiaW1wb3J0IHZhbHVlIGZyb20gXCIuL3ZhbHVlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGkgPSB7fSxcbiAgICAgIGMgPSB7fSxcbiAgICAgIGs7XG5cbiAgaWYgKGEgPT09IG51bGwgfHwgdHlwZW9mIGEgIT09IFwib2JqZWN0XCIpIGEgPSB7fTtcbiAgaWYgKGIgPT09IG51bGwgfHwgdHlwZW9mIGIgIT09IFwib2JqZWN0XCIpIGIgPSB7fTtcblxuICBmb3IgKGsgaW4gYikge1xuICAgIGlmIChrIGluIGEpIHtcbiAgICAgIGlba10gPSB2YWx1ZShhW2tdLCBiW2tdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY1trXSA9IGJba107XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGsgaW4gaSkgY1trXSA9IGlba10odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuXG52YXIgcmVBID0gL1stK10/KD86XFxkK1xcLj9cXGQqfFxcLj9cXGQrKSg/OltlRV1bLStdP1xcZCspPy9nLFxuICAgIHJlQiA9IG5ldyBSZWdFeHAocmVBLnNvdXJjZSwgXCJnXCIpO1xuXG5mdW5jdGlvbiB6ZXJvKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbmUoYikge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBiKHQpICsgXCJcIjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYmkgPSByZUEubGFzdEluZGV4ID0gcmVCLmxhc3RJbmRleCA9IDAsIC8vIHNjYW4gaW5kZXggZm9yIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGFtLCAvLyBjdXJyZW50IG1hdGNoIGluIGFcbiAgICAgIGJtLCAvLyBjdXJyZW50IG1hdGNoIGluIGJcbiAgICAgIGJzLCAvLyBzdHJpbmcgcHJlY2VkaW5nIGN1cnJlbnQgbnVtYmVyIGluIGIsIGlmIGFueVxuICAgICAgaSA9IC0xLCAvLyBpbmRleCBpbiBzXG4gICAgICBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuXG4gIC8vIENvZXJjZSBpbnB1dHMgdG8gc3RyaW5ncy5cbiAgYSA9IGEgKyBcIlwiLCBiID0gYiArIFwiXCI7XG5cbiAgLy8gSW50ZXJwb2xhdGUgcGFpcnMgb2YgbnVtYmVycyBpbiBhICYgYi5cbiAgd2hpbGUgKChhbSA9IHJlQS5leGVjKGEpKVxuICAgICAgJiYgKGJtID0gcmVCLmV4ZWMoYikpKSB7XG4gICAgaWYgKChicyA9IGJtLmluZGV4KSA+IGJpKSB7IC8vIGEgc3RyaW5nIHByZWNlZGVzIHRoZSBuZXh0IG51bWJlciBpbiBiXG4gICAgICBicyA9IGIuc2xpY2UoYmksIGJzKTtcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBicztcbiAgICB9XG4gICAgaWYgKChhbSA9IGFtWzBdKSA9PT0gKGJtID0gYm1bMF0pKSB7IC8vIG51bWJlcnMgaW4gYSAmIGIgbWF0Y2hcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJtOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBibTtcbiAgICB9IGVsc2UgeyAvLyBpbnRlcnBvbGF0ZSBub24tbWF0Y2hpbmcgbnVtYmVyc1xuICAgICAgc1srK2ldID0gbnVsbDtcbiAgICAgIHEucHVzaCh7aTogaSwgeDogbnVtYmVyKGFtLCBibSl9KTtcbiAgICB9XG4gICAgYmkgPSByZUIubGFzdEluZGV4O1xuICB9XG5cbiAgLy8gQWRkIHJlbWFpbnMgb2YgYi5cbiAgaWYgKGJpIDwgYi5sZW5ndGgpIHtcbiAgICBicyA9IGIuc2xpY2UoYmkpO1xuICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gIH1cblxuICAvLyBTcGVjaWFsIG9wdGltaXphdGlvbiBmb3Igb25seSBhIHNpbmdsZSBtYXRjaC5cbiAgLy8gT3RoZXJ3aXNlLCBpbnRlcnBvbGF0ZSBlYWNoIG9mIHRoZSBudW1iZXJzIGFuZCByZWpvaW4gdGhlIHN0cmluZy5cbiAgcmV0dXJuIHMubGVuZ3RoIDwgMiA/IChxWzBdXG4gICAgICA/IG9uZShxWzBdLngpXG4gICAgICA6IHplcm8oYikpXG4gICAgICA6IChiID0gcS5sZW5ndGgsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbzsgaSA8IGI7ICsraSkgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgICAgIH0pO1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgcmdiIGZyb20gXCIuL3JnYi5qc1wiO1xuaW1wb3J0IHtnZW5lcmljQXJyYXl9IGZyb20gXCIuL2FycmF5LmpzXCI7XG5pbXBvcnQgZGF0ZSBmcm9tIFwiLi9kYXRlLmpzXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuaW1wb3J0IG9iamVjdCBmcm9tIFwiLi9vYmplY3QuanNcIjtcbmltcG9ydCBzdHJpbmcgZnJvbSBcIi4vc3RyaW5nLmpzXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBudW1iZXJBcnJheSwge2lzTnVtYmVyQXJyYXl9IGZyb20gXCIuL251bWJlckFycmF5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHQgPSB0eXBlb2YgYiwgYztcbiAgcmV0dXJuIGIgPT0gbnVsbCB8fCB0ID09PSBcImJvb2xlYW5cIiA/IGNvbnN0YW50KGIpXG4gICAgICA6ICh0ID09PSBcIm51bWJlclwiID8gbnVtYmVyXG4gICAgICA6IHQgPT09IFwic3RyaW5nXCIgPyAoKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIHJnYikgOiBzdHJpbmcpXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IHJnYlxuICAgICAgOiBiIGluc3RhbmNlb2YgRGF0ZSA/IGRhdGVcbiAgICAgIDogaXNOdW1iZXJBcnJheShiKSA/IG51bWJlckFycmF5XG4gICAgICA6IEFycmF5LmlzQXJyYXkoYikgPyBnZW5lcmljQXJyYXlcbiAgICAgIDogdHlwZW9mIGIudmFsdWVPZiAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBiLnRvU3RyaW5nICE9PSBcImZ1bmN0aW9uXCIgfHwgaXNOYU4oYikgPyBvYmplY3RcbiAgICAgIDogbnVtYmVyKShhLCBiKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGxldCBzb3VyY2VFdmVudDtcbiAgd2hpbGUgKHNvdXJjZUV2ZW50ID0gZXZlbnQuc291cmNlRXZlbnQpIGV2ZW50ID0gc291cmNlRXZlbnQ7XG4gIHJldHVybiBldmVudDtcbn1cbiIsImltcG9ydCBzb3VyY2VFdmVudCBmcm9tIFwiLi9zb3VyY2VFdmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihldmVudCwgbm9kZSkge1xuICBldmVudCA9IHNvdXJjZUV2ZW50KGV2ZW50KTtcbiAgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCkgbm9kZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gIGlmIChub2RlKSB7XG4gICAgdmFyIHN2ZyA9IG5vZGUub3duZXJTVkdFbGVtZW50IHx8IG5vZGU7XG4gICAgaWYgKHN2Zy5jcmVhdGVTVkdQb2ludCkge1xuICAgICAgdmFyIHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KCk7XG4gICAgICBwb2ludC54ID0gZXZlbnQuY2xpZW50WCwgcG9pbnQueSA9IGV2ZW50LmNsaWVudFk7XG4gICAgICBwb2ludCA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShub2RlLmdldFNjcmVlbkNUTSgpLmludmVyc2UoKSk7XG4gICAgICByZXR1cm4gW3BvaW50LngsIHBvaW50LnldO1xuICAgIH1cbiAgICBpZiAobm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHtcbiAgICAgIHZhciByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHJldHVybiBbZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdCAtIG5vZGUuY2xpZW50TGVmdCwgZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wIC0gbm9kZS5jbGllbnRUb3BdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gW2V2ZW50LnBhZ2VYLCBldmVudC5wYWdlWV07XG59XG4iLCJ2YXIgZnJhbWUgPSAwLCAvLyBpcyBhbiBhbmltYXRpb24gZnJhbWUgcGVuZGluZz9cbiAgICB0aW1lb3V0ID0gMCwgLy8gaXMgYSB0aW1lb3V0IHBlbmRpbmc/XG4gICAgaW50ZXJ2YWwgPSAwLCAvLyBhcmUgYW55IHRpbWVycyBhY3RpdmU/XG4gICAgcG9rZURlbGF5ID0gMTAwMCwgLy8gaG93IGZyZXF1ZW50bHkgd2UgY2hlY2sgZm9yIGNsb2NrIHNrZXdcbiAgICB0YXNrSGVhZCxcbiAgICB0YXNrVGFpbCxcbiAgICBjbG9ja0xhc3QgPSAwLFxuICAgIGNsb2NrTm93ID0gMCxcbiAgICBjbG9ja1NrZXcgPSAwLFxuICAgIGNsb2NrID0gdHlwZW9mIHBlcmZvcm1hbmNlID09PSBcIm9iamVjdFwiICYmIHBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlIDogRGF0ZSxcbiAgICBzZXRGcmFtZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpIDogZnVuY3Rpb24oZikgeyBzZXRUaW1lb3V0KGYsIDE3KTsgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIGNsb2NrTm93IHx8IChzZXRGcmFtZShjbGVhck5vdyksIGNsb2NrTm93ID0gY2xvY2subm93KCkgKyBjbG9ja1NrZXcpO1xufVxuXG5mdW5jdGlvbiBjbGVhck5vdygpIHtcbiAgY2xvY2tOb3cgPSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVGltZXIoKSB7XG4gIHRoaXMuX2NhbGwgPVxuICB0aGlzLl90aW1lID1cbiAgdGhpcy5fbmV4dCA9IG51bGw7XG59XG5cblRpbWVyLnByb3RvdHlwZSA9IHRpbWVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRpbWVyLFxuICByZXN0YXJ0OiBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgICB0aW1lID0gKHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWUpICsgKGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5KTtcbiAgICBpZiAoIXRoaXMuX25leHQgJiYgdGFza1RhaWwgIT09IHRoaXMpIHtcbiAgICAgIGlmICh0YXNrVGFpbCkgdGFza1RhaWwuX25leHQgPSB0aGlzO1xuICAgICAgZWxzZSB0YXNrSGVhZCA9IHRoaXM7XG4gICAgICB0YXNrVGFpbCA9IHRoaXM7XG4gICAgfVxuICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcbiAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICBzbGVlcCgpO1xuICB9LFxuICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2FsbCkge1xuICAgICAgdGhpcy5fY2FsbCA9IG51bGw7XG4gICAgICB0aGlzLl90aW1lID0gSW5maW5pdHk7XG4gICAgICBzbGVlcCgpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgdC5yZXN0YXJ0KGNhbGxiYWNrLCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZXJGbHVzaCgpIHtcbiAgbm93KCk7IC8vIEdldCB0aGUgY3VycmVudCB0aW1lLCBpZiBub3QgYWxyZWFkeSBzZXQuXG4gICsrZnJhbWU7IC8vIFByZXRlbmQgd2XigJl2ZSBzZXQgYW4gYWxhcm0sIGlmIHdlIGhhdmVu4oCZdCBhbHJlYWR5LlxuICB2YXIgdCA9IHRhc2tIZWFkLCBlO1xuICB3aGlsZSAodCkge1xuICAgIGlmICgoZSA9IGNsb2NrTm93IC0gdC5fdGltZSkgPj0gMCkgdC5fY2FsbC5jYWxsKHVuZGVmaW5lZCwgZSk7XG4gICAgdCA9IHQuX25leHQ7XG4gIH1cbiAgLS1mcmFtZTtcbn1cblxuZnVuY3Rpb24gd2FrZSgpIHtcbiAgY2xvY2tOb3cgPSAoY2xvY2tMYXN0ID0gY2xvY2subm93KCkpICsgY2xvY2tTa2V3O1xuICBmcmFtZSA9IHRpbWVvdXQgPSAwO1xuICB0cnkge1xuICAgIHRpbWVyRmx1c2goKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBmcmFtZSA9IDA7XG4gICAgbmFwKCk7XG4gICAgY2xvY2tOb3cgPSAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBva2UoKSB7XG4gIHZhciBub3cgPSBjbG9jay5ub3coKSwgZGVsYXkgPSBub3cgLSBjbG9ja0xhc3Q7XG4gIGlmIChkZWxheSA+IHBva2VEZWxheSkgY2xvY2tTa2V3IC09IGRlbGF5LCBjbG9ja0xhc3QgPSBub3c7XG59XG5cbmZ1bmN0aW9uIG5hcCgpIHtcbiAgdmFyIHQwLCB0MSA9IHRhc2tIZWFkLCB0MiwgdGltZSA9IEluZmluaXR5O1xuICB3aGlsZSAodDEpIHtcbiAgICBpZiAodDEuX2NhbGwpIHtcbiAgICAgIGlmICh0aW1lID4gdDEuX3RpbWUpIHRpbWUgPSB0MS5fdGltZTtcbiAgICAgIHQwID0gdDEsIHQxID0gdDEuX25leHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQyID0gdDEuX25leHQsIHQxLl9uZXh0ID0gbnVsbDtcbiAgICAgIHQxID0gdDAgPyB0MC5fbmV4dCA9IHQyIDogdGFza0hlYWQgPSB0MjtcbiAgICB9XG4gIH1cbiAgdGFza1RhaWwgPSB0MDtcbiAgc2xlZXAodGltZSk7XG59XG5cbmZ1bmN0aW9uIHNsZWVwKHRpbWUpIHtcbiAgaWYgKGZyYW1lKSByZXR1cm47IC8vIFNvb25lc3QgYWxhcm0gYWxyZWFkeSBzZXQsIG9yIHdpbGwgYmUuXG4gIGlmICh0aW1lb3V0KSB0aW1lb3V0ID0gY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICB2YXIgZGVsYXkgPSB0aW1lIC0gY2xvY2tOb3c7IC8vIFN0cmljdGx5IGxlc3MgdGhhbiBpZiB3ZSByZWNvbXB1dGVkIGNsb2NrTm93LlxuICBpZiAoZGVsYXkgPiAyNCkge1xuICAgIGlmICh0aW1lIDwgSW5maW5pdHkpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KHdha2UsIHRpbWUgLSBjbG9jay5ub3coKSAtIGNsb2NrU2tldyk7XG4gICAgaWYgKGludGVydmFsKSBpbnRlcnZhbCA9IGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICB9IGVsc2Uge1xuICAgIGlmICghaW50ZXJ2YWwpIGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpLCBpbnRlcnZhbCA9IHNldEludGVydmFsKHBva2UsIHBva2VEZWxheSk7XG4gICAgZnJhbWUgPSAxLCBzZXRGcmFtZSh3YWtlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtUaW1lcn0gZnJvbSBcIi4vdGltZXIuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gIHZhciB0ID0gbmV3IFRpbWVyO1xuICBkZWxheSA9IGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5O1xuICB0LnJlc3RhcnQoZWxhcHNlZCA9PiB7XG4gICAgdC5zdG9wKCk7XG4gICAgY2FsbGJhY2soZWxhcHNlZCArIGRlbGF5KTtcbiAgfSwgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHt0aW1lciwgdGltZW91dH0gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBlbXB0eU9uID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImVuZFwiLCBcImNhbmNlbFwiLCBcImludGVycnVwdFwiKTtcbnZhciBlbXB0eVR3ZWVuID0gW107XG5cbmV4cG9ydCB2YXIgQ1JFQVRFRCA9IDA7XG5leHBvcnQgdmFyIFNDSEVEVUxFRCA9IDE7XG5leHBvcnQgdmFyIFNUQVJUSU5HID0gMjtcbmV4cG9ydCB2YXIgU1RBUlRFRCA9IDM7XG5leHBvcnQgdmFyIFJVTk5JTkcgPSA0O1xuZXhwb3J0IHZhciBFTkRJTkcgPSA1O1xuZXhwb3J0IHZhciBFTkRFRCA9IDY7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUsIGlkLCBpbmRleCwgZ3JvdXAsIHRpbWluZykge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGVzKSBub2RlLl9fdHJhbnNpdGlvbiA9IHt9O1xuICBlbHNlIGlmIChpZCBpbiBzY2hlZHVsZXMpIHJldHVybjtcbiAgY3JlYXRlKG5vZGUsIGlkLCB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBpbmRleDogaW5kZXgsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBncm91cDogZ3JvdXAsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBvbjogZW1wdHlPbixcbiAgICB0d2VlbjogZW1wdHlUd2VlbixcbiAgICB0aW1lOiB0aW1pbmcudGltZSxcbiAgICBkZWxheTogdGltaW5nLmRlbGF5LFxuICAgIGR1cmF0aW9uOiB0aW1pbmcuZHVyYXRpb24sXG4gICAgZWFzZTogdGltaW5nLmVhc2UsXG4gICAgdGltZXI6IG51bGwsXG4gICAgc3RhdGU6IENSRUFURURcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IENSRUFURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHNjaGVkdWxlZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IFNUQVJURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZSB8fCAhKHNjaGVkdWxlID0gc2NoZWR1bGVbaWRdKSkgdGhyb3cgbmV3IEVycm9yKFwidHJhbnNpdGlvbiBub3QgZm91bmRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlKG5vZGUsIGlkLCBzZWxmKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHR3ZWVuO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHNlbGYgdGltZXIgd2hlbiB0aGUgdHJhbnNpdGlvbiBpcyBjcmVhdGVkLlxuICAvLyBOb3RlIHRoZSBhY3R1YWwgZGVsYXkgaXMgbm90IGtub3duIHVudGlsIHRoZSBmaXJzdCBjYWxsYmFjayFcbiAgc2NoZWR1bGVzW2lkXSA9IHNlbGY7XG4gIHNlbGYudGltZXIgPSB0aW1lcihzY2hlZHVsZSwgMCwgc2VsZi50aW1lKTtcblxuICBmdW5jdGlvbiBzY2hlZHVsZShlbGFwc2VkKSB7XG4gICAgc2VsZi5zdGF0ZSA9IFNDSEVEVUxFRDtcbiAgICBzZWxmLnRpbWVyLnJlc3RhcnQoc3RhcnQsIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG5cbiAgICAvLyBJZiB0aGUgZWxhcHNlZCBkZWxheSBpcyBsZXNzIHRoYW4gb3VyIGZpcnN0IHNsZWVwLCBzdGFydCBpbW1lZGlhdGVseS5cbiAgICBpZiAoc2VsZi5kZWxheSA8PSBlbGFwc2VkKSBzdGFydChlbGFwc2VkIC0gc2VsZi5kZWxheSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChlbGFwc2VkKSB7XG4gICAgdmFyIGksIGosIG4sIG87XG5cbiAgICAvLyBJZiB0aGUgc3RhdGUgaXMgbm90IFNDSEVEVUxFRCwgdGhlbiB3ZSBwcmV2aW91c2x5IGVycm9yZWQgb24gc3RhcnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNDSEVEVUxFRCkgcmV0dXJuIHN0b3AoKTtcblxuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIG8gPSBzY2hlZHVsZXNbaV07XG4gICAgICBpZiAoby5uYW1lICE9PSBzZWxmLm5hbWUpIGNvbnRpbnVlO1xuXG4gICAgICAvLyBXaGlsZSB0aGlzIGVsZW1lbnQgYWxyZWFkeSBoYXMgYSBzdGFydGluZyB0cmFuc2l0aW9uIGR1cmluZyB0aGlzIGZyYW1lLFxuICAgICAgLy8gZGVmZXIgc3RhcnRpbmcgYW4gaW50ZXJydXB0aW5nIHRyYW5zaXRpb24gdW50aWwgdGhhdCB0cmFuc2l0aW9uIGhhcyBhXG4gICAgICAvLyBjaGFuY2UgdG8gdGljayAoYW5kIHBvc3NpYmx5IGVuZCk7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzU0IVxuICAgICAgaWYgKG8uc3RhdGUgPT09IFNUQVJURUQpIHJldHVybiB0aW1lb3V0KHN0YXJ0KTtcblxuICAgICAgLy8gSW50ZXJydXB0IHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgaWYgYW55LlxuICAgICAgaWYgKG8uc3RhdGUgPT09IFJVTk5JTkcpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgby5vbi5jYWxsKFwiaW50ZXJydXB0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuXG4gICAgICAvLyBDYW5jZWwgYW55IHByZS1lbXB0ZWQgdHJhbnNpdGlvbnMuXG4gICAgICBlbHNlIGlmICgraSA8IGlkKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImNhbmNlbFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZWZlciB0aGUgZmlyc3QgdGljayB0byBlbmQgb2YgdGhlIGN1cnJlbnQgZnJhbWU7IHNlZSBkMy9kMyMxNTc2LlxuICAgIC8vIE5vdGUgdGhlIHRyYW5zaXRpb24gbWF5IGJlIGNhbmNlbGVkIGFmdGVyIHN0YXJ0IGFuZCBiZWZvcmUgdGhlIGZpcnN0IHRpY2shXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgc2NoZWR1bGVkIGJlZm9yZSB0aGUgc3RhcnQgZXZlbnQ7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzE2IVxuICAgIC8vIEFzc3VtaW5nIHRoaXMgaXMgc3VjY2Vzc2Z1bCwgc3Vic2VxdWVudCBjYWxsYmFja3MgZ28gc3RyYWlnaHQgdG8gdGljay5cbiAgICB0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHNlbGYuc3RhdGUgPT09IFNUQVJURUQpIHtcbiAgICAgICAgc2VsZi5zdGF0ZSA9IFJVTk5JTkc7XG4gICAgICAgIHNlbGYudGltZXIucmVzdGFydCh0aWNrLCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuICAgICAgICB0aWNrKGVsYXBzZWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIHN0YXJ0IGV2ZW50LlxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIHRoZSB0d2VlbiBhcmUgaW5pdGlhbGl6ZWQuXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJUSU5HO1xuICAgIHNlbGYub24uY2FsbChcInN0YXJ0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTVEFSVElORykgcmV0dXJuOyAvLyBpbnRlcnJ1cHRlZFxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVEVEO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgdHdlZW4sIGRlbGV0aW5nIG51bGwgdHdlZW4uXG4gICAgdHdlZW4gPSBuZXcgQXJyYXkobiA9IHNlbGYudHdlZW4ubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBqID0gLTE7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChvID0gc2VsZi50d2VlbltpXS52YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApKSB7XG4gICAgICAgIHR3ZWVuWysral0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICB0d2Vlbi5sZW5ndGggPSBqICsgMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkge1xuICAgIHZhciB0ID0gZWxhcHNlZCA8IHNlbGYuZHVyYXRpb24gPyBzZWxmLmVhc2UuY2FsbChudWxsLCBlbGFwc2VkIC8gc2VsZi5kdXJhdGlvbikgOiAoc2VsZi50aW1lci5yZXN0YXJ0KHN0b3ApLCBzZWxmLnN0YXRlID0gRU5ESU5HLCAxKSxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gdHdlZW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHR3ZWVuW2ldLmNhbGwobm9kZSwgdCk7XG4gICAgfVxuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIGVuZCBldmVudC5cbiAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gRU5ESU5HKSB7XG4gICAgICBzZWxmLm9uLmNhbGwoXCJlbmRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgICBzdG9wKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBzZWxmLnN0YXRlID0gRU5ERUQ7XG4gICAgc2VsZi50aW1lci5zdG9wKCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpZF07XG4gICAgZm9yICh2YXIgaSBpbiBzY2hlZHVsZXMpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgfVxufVxuIiwiaW1wb3J0IHtTVEFSVElORywgRU5ESU5HLCBFTkRFRH0gZnJvbSBcIi4vdHJhbnNpdGlvbi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHNjaGVkdWxlLFxuICAgICAgYWN0aXZlLFxuICAgICAgZW1wdHkgPSB0cnVlLFxuICAgICAgaTtcblxuICBpZiAoIXNjaGVkdWxlcykgcmV0dXJuO1xuXG4gIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG5cbiAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLm5hbWUgIT09IG5hbWUpIHsgZW1wdHkgPSBmYWxzZTsgY29udGludWU7IH1cbiAgICBhY3RpdmUgPSBzY2hlZHVsZS5zdGF0ZSA+IFNUQVJUSU5HICYmIHNjaGVkdWxlLnN0YXRlIDwgRU5ESU5HO1xuICAgIHNjaGVkdWxlLnN0YXRlID0gRU5ERUQ7XG4gICAgc2NoZWR1bGUudGltZXIuc3RvcCgpO1xuICAgIHNjaGVkdWxlLm9uLmNhbGwoYWN0aXZlID8gXCJpbnRlcnJ1cHRcIiA6IFwiY2FuY2VsXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNjaGVkdWxlLmluZGV4LCBzY2hlZHVsZS5ncm91cCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgfVxuXG4gIGlmIChlbXB0eSkgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xufVxuIiwidmFyIGRlZ3JlZXMgPSAxODAgLyBNYXRoLlBJO1xuXG5leHBvcnQgdmFyIGlkZW50aXR5ID0ge1xuICB0cmFuc2xhdGVYOiAwLFxuICB0cmFuc2xhdGVZOiAwLFxuICByb3RhdGU6IDAsXG4gIHNrZXdYOiAwLFxuICBzY2FsZVg6IDEsXG4gIHNjYWxlWTogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYiwgYywgZCwgZSwgZikge1xuICB2YXIgc2NhbGVYLCBzY2FsZVksIHNrZXdYO1xuICBpZiAoc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpKSBhIC89IHNjYWxlWCwgYiAvPSBzY2FsZVg7XG4gIGlmIChza2V3WCA9IGEgKiBjICsgYiAqIGQpIGMgLT0gYSAqIHNrZXdYLCBkIC09IGIgKiBza2V3WDtcbiAgaWYgKHNjYWxlWSA9IE1hdGguc3FydChjICogYyArIGQgKiBkKSkgYyAvPSBzY2FsZVksIGQgLz0gc2NhbGVZLCBza2V3WCAvPSBzY2FsZVk7XG4gIGlmIChhICogZCA8IGIgKiBjKSBhID0gLWEsIGIgPSAtYiwgc2tld1ggPSAtc2tld1gsIHNjYWxlWCA9IC1zY2FsZVg7XG4gIHJldHVybiB7XG4gICAgdHJhbnNsYXRlWDogZSxcbiAgICB0cmFuc2xhdGVZOiBmLFxuICAgIHJvdGF0ZTogTWF0aC5hdGFuMihiLCBhKSAqIGRlZ3JlZXMsXG4gICAgc2tld1g6IE1hdGguYXRhbihza2V3WCkgKiBkZWdyZWVzLFxuICAgIHNjYWxlWDogc2NhbGVYLFxuICAgIHNjYWxlWTogc2NhbGVZXG4gIH07XG59XG4iLCJpbXBvcnQgZGVjb21wb3NlLCB7aWRlbnRpdHl9IGZyb20gXCIuL2RlY29tcG9zZS5qc1wiO1xuXG52YXIgc3ZnTm9kZTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNzcyh2YWx1ZSkge1xuICBjb25zdCBtID0gbmV3ICh0eXBlb2YgRE9NTWF0cml4ID09PSBcImZ1bmN0aW9uXCIgPyBET01NYXRyaXggOiBXZWJLaXRDU1NNYXRyaXgpKHZhbHVlICsgXCJcIik7XG4gIHJldHVybiBtLmlzSWRlbnRpdHkgPyBpZGVudGl0eSA6IGRlY29tcG9zZShtLmEsIG0uYiwgbS5jLCBtLmQsIG0uZSwgbS5mKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU3ZnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gaWRlbnRpdHk7XG4gIGlmICghc3ZnTm9kZSkgc3ZnTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwiZ1wiKTtcbiAgc3ZnTm9kZS5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdmFsdWUpO1xuICBpZiAoISh2YWx1ZSA9IHN2Z05vZGUudHJhbnNmb3JtLmJhc2VWYWwuY29uc29saWRhdGUoKSkpIHJldHVybiBpZGVudGl0eTtcbiAgdmFsdWUgPSB2YWx1ZS5tYXRyaXg7XG4gIHJldHVybiBkZWNvbXBvc2UodmFsdWUuYSwgdmFsdWUuYiwgdmFsdWUuYywgdmFsdWUuZCwgdmFsdWUuZSwgdmFsdWUuZik7XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuLi9udW1iZXIuanNcIjtcbmltcG9ydCB7cGFyc2VDc3MsIHBhcnNlU3ZnfSBmcm9tIFwiLi9wYXJzZS5qc1wiO1xuXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZSwgcHhDb21tYSwgcHhQYXJlbiwgZGVnUGFyZW4pIHtcblxuICBmdW5jdGlvbiBwb3Aocykge1xuICAgIHJldHVybiBzLmxlbmd0aCA/IHMucG9wKCkgKyBcIiBcIiA6IFwiXCI7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2goXCJ0cmFuc2xhdGUoXCIsIG51bGwsIHB4Q29tbWEsIG51bGwsIHB4UGFyZW4pO1xuICAgICAgcS5wdXNoKHtpOiBpIC0gNCwgeDogbnVtYmVyKHhhLCB4Yil9LCB7aTogaSAtIDIsIHg6IG51bWJlcih5YSwgeWIpfSk7XG4gICAgfSBlbHNlIGlmICh4YiB8fCB5Yikge1xuICAgICAgcy5wdXNoKFwidHJhbnNsYXRlKFwiICsgeGIgKyBweENvbW1hICsgeWIgKyBweFBhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByb3RhdGUoYSwgYiwgcywgcSkge1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICBpZiAoYSAtIGIgPiAxODApIGIgKz0gMzYwOyBlbHNlIGlmIChiIC0gYSA+IDE4MCkgYSArPSAzNjA7IC8vIHNob3J0ZXN0IHBhdGhcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiLCBudWxsLCBkZWdQYXJlbikgLSAyLCB4OiBudW1iZXIoYSwgYil9KTtcbiAgICB9IGVsc2UgaWYgKGIpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2tld1goYSwgYiwgcywgcSkge1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInNrZXdYKFwiLCBudWxsLCBkZWdQYXJlbikgLSAyLCB4OiBudW1iZXIoYSwgYil9KTtcbiAgICB9IGVsc2UgaWYgKGIpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNrZXdYKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiLCBudWxsLCBcIixcIiwgbnVsbCwgXCIpXCIpO1xuICAgICAgcS5wdXNoKHtpOiBpIC0gNCwgeDogbnVtYmVyKHhhLCB4Yil9LCB7aTogaSAtIDIsIHg6IG51bWJlcih5YSwgeWIpfSk7XG4gICAgfSBlbHNlIGlmICh4YiAhPT0gMSB8fCB5YiAhPT0gMSkge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIgKyB4YiArIFwiLFwiICsgeWIgKyBcIilcIik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuICAgIGEgPSBwYXJzZShhKSwgYiA9IHBhcnNlKGIpO1xuICAgIHRyYW5zbGF0ZShhLnRyYW5zbGF0ZVgsIGEudHJhbnNsYXRlWSwgYi50cmFuc2xhdGVYLCBiLnRyYW5zbGF0ZVksIHMsIHEpO1xuICAgIHJvdGF0ZShhLnJvdGF0ZSwgYi5yb3RhdGUsIHMsIHEpO1xuICAgIHNrZXdYKGEuc2tld1gsIGIuc2tld1gsIHMsIHEpO1xuICAgIHNjYWxlKGEuc2NhbGVYLCBhLnNjYWxlWSwgYi5zY2FsZVgsIGIuc2NhbGVZLCBzLCBxKTtcbiAgICBhID0gYiA9IG51bGw7IC8vIGdjXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBpID0gLTEsIG4gPSBxLmxlbmd0aCwgbztcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZUNzcywgXCJweCwgXCIsIFwicHgpXCIsIFwiZGVnKVwiKTtcbmV4cG9ydCB2YXIgaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZVN2ZywgXCIsIFwiLCBcIilcIiwgXCIpXCIpO1xuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gdHdlZW5SZW1vdmUoaWQsIG5hbWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9IHR3ZWVuMCA9IHR3ZWVuO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMSA9IHR3ZWVuMS5zbGljZSgpO1xuICAgICAgICAgIHR3ZWVuMS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHdlZW5GdW5jdGlvbihpZCwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSAodHdlZW4wID0gdHdlZW4pLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciB0ID0ge25hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX0sIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjFbaV0gPSB0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaSA9PT0gbikgdHdlZW4xLnB1c2godCk7XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIG5hbWUgKz0gXCJcIjtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgdHdlZW4gPSBnZXQodGhpcy5ub2RlKCksIGlkKS50d2VlbjtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuLmxlbmd0aCwgdDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKCh0ID0gdHdlZW5baV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHQudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbCA/IHR3ZWVuUmVtb3ZlIDogdHdlZW5GdW5jdGlvbikoaWQsIG5hbWUsIHZhbHVlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0d2VlblZhbHVlKHRyYW5zaXRpb24sIG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRyYW5zaXRpb24uX2lkO1xuXG4gIHRyYW5zaXRpb24uZWFjaChmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpO1xuICAgIChzY2hlZHVsZS52YWx1ZSB8fCAoc2NoZWR1bGUudmFsdWUgPSB7fSkpW25hbWVdID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gZ2V0KG5vZGUsIGlkKS52YWx1ZVtuYW1lXTtcbiAgfTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZU51bWJlciwgaW50ZXJwb2xhdGVSZ2IsIGludGVycG9sYXRlU3RyaW5nfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYztcbiAgcmV0dXJuICh0eXBlb2YgYiA9PT0gXCJudW1iZXJcIiA/IGludGVycG9sYXRlTnVtYmVyXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IGludGVycG9sYXRlUmdiXG4gICAgICA6IChjID0gY29sb3IoYikpID8gKGIgPSBjLCBpbnRlcnBvbGF0ZVJnYilcbiAgICAgIDogaW50ZXJwb2xhdGVTdHJpbmcpKGEsIGIpO1xufVxuIiwiaW1wb3J0IHtpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyBhcyBpbnRlcnBvbGF0ZVRyYW5zZm9ybX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlLmpzXCI7XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyhmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCwgdmFsdWUxID0gdmFsdWUodGhpcyksIHN0cmluZzE7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCI7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgJiYgc3RyaW5nMSA9PT0gc3RyaW5nMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiAoc3RyaW5nMTAgPSBzdHJpbmcxLCBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpLCBzdHJpbmcxO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCI7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgJiYgc3RyaW5nMSA9PT0gc3RyaW5nMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiAoc3RyaW5nMTAgPSBzdHJpbmcxLCBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSkpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSksIGkgPSBmdWxsbmFtZSA9PT0gXCJ0cmFuc2Zvcm1cIiA/IGludGVycG9sYXRlVHJhbnNmb3JtIDogaW50ZXJwb2xhdGU7XG4gIHJldHVybiB0aGlzLmF0dHJUd2VlbihuYW1lLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyRnVuY3Rpb25OUyA6IGF0dHJGdW5jdGlvbikoZnVsbG5hbWUsIGksIHR3ZWVuVmFsdWUodGhpcywgXCJhdHRyLlwiICsgbmFtZSwgdmFsdWUpKVxuICAgICAgOiB2YWx1ZSA9PSBudWxsID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkoZnVsbG5hbWUpXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KShmdWxsbmFtZSwgaSwgdmFsdWUpKTtcbn1cbiIsImltcG9ydCB7bmFtZXNwYWNlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZShuYW1lLCBpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgaS5jYWxsKHRoaXMsIHQpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckludGVycG9sYXRlTlMoZnVsbG5hbWUsIGkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgaS5jYWxsKHRoaXMsIHQpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgYXR0ckludGVycG9sYXRlTlMoZnVsbG5hbWUsIGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5mdW5jdGlvbiBhdHRyVHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgdmFyIHQwLCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdDAgPSAoaTAgPSBpKSAmJiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSk7XG4gICAgcmV0dXJuIHQwO1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBrZXkgPSBcImF0dHIuXCIgKyBuYW1lO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCAoZnVsbG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2VlbikoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge2dldCwgaW5pdH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZGVsYXlGdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlbGF5Q29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gZGVsYXlGdW5jdGlvblxuICAgICAgICAgIDogZGVsYXlDb25zdGFudCkoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZGVsYXk7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBkdXJhdGlvbkZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5kdXJhdGlvbiA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkdXJhdGlvbkNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gZHVyYXRpb25GdW5jdGlvblxuICAgICAgICAgIDogZHVyYXRpb25Db25zdGFudCkoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZHVyYXRpb247XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG52YXIgU2VsZWN0aW9uID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtQ3NzIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7c3R5bGV9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlLmpzXCI7XG5cbmZ1bmN0aW9uIHN0eWxlTnVsbChuYW1lLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHN0cmluZzEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCBzdHJpbmcxMCA9IHN0cmluZzEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9IHZhbHVlKHRoaXMpLFxuICAgICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHN0cmluZzEgPSB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVNYXliZVJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgb24wLCBvbjEsIGxpc3RlbmVyMCwga2V5ID0gXCJzdHlsZS5cIiArIG5hbWUsIGV2ZW50ID0gXCJlbmQuXCIgKyBrZXksIHJlbW92ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub24sXG4gICAgICAgIGxpc3RlbmVyID0gc2NoZWR1bGUudmFsdWVba2V5XSA9PSBudWxsID8gcmVtb3ZlIHx8IChyZW1vdmUgPSBzdHlsZVJlbW92ZShuYW1lKSkgOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjAgfHwgbGlzdGVuZXIwICE9PSBsaXN0ZW5lcikgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihldmVudCwgbGlzdGVuZXIwID0gbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZU51bGwobmFtZSwgaSkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZShuYW1lKSlcbiAgICA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVGdW5jdGlvbihuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpKVxuICAgICAgLmVhY2goc3R5bGVNYXliZVJlbW92ZSh0aGlzLl9pZCwgbmFtZSkpXG4gICAgOiB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZUNvbnN0YW50KG5hbWUsIGksIHZhbHVlKSwgcHJpb3JpdHkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBudWxsKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyIGZyb20gXCIuL2F0dHIuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHJUd2VlbiBmcm9tIFwiLi9hdHRyVHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2RlbGF5IGZyb20gXCIuL2RlbGF5LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kdXJhdGlvbiBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZWFzZSBmcm9tIFwiLi9lYXNlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lYXNlVmFyeWluZyBmcm9tIFwiLi9lYXNlVmFyeWluZy5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlci5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2UuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX29uIGZyb20gXCIuL29uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3Rpb24gZnJvbSBcIi4vc2VsZWN0aW9uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGVUd2VlbiBmcm9tIFwiLi9zdHlsZVR3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0IGZyb20gXCIuL3RleHQuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RleHRUd2VlbiBmcm9tIFwiLi90ZXh0VHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHdlZW4gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2VuZCBmcm9tIFwiLi9lbmQuanNcIjtcblxudmFyIGlkID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zaXRpb24oZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCkge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgdGhpcy5faWQgPSBpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbihuYW1lKSB7XG4gIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SWQoKSB7XG4gIHJldHVybiArK2lkO1xufVxuXG52YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cblRyYW5zaXRpb24ucHJvdG90eXBlID0gdHJhbnNpdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2l0aW9uLFxuICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHRyYW5zaXRpb25fc2VsZWN0QWxsLFxuICBzZWxlY3RDaGlsZDogc2VsZWN0aW9uX3Byb3RvdHlwZS5zZWxlY3RDaGlsZCxcbiAgc2VsZWN0Q2hpbGRyZW46IHNlbGVjdGlvbl9wcm90b3R5cGUuc2VsZWN0Q2hpbGRyZW4sXG4gIGZpbHRlcjogdHJhbnNpdGlvbl9maWx0ZXIsXG4gIG1lcmdlOiB0cmFuc2l0aW9uX21lcmdlLFxuICBzZWxlY3Rpb246IHRyYW5zaXRpb25fc2VsZWN0aW9uLFxuICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uX3RyYW5zaXRpb24sXG4gIGNhbGw6IHNlbGVjdGlvbl9wcm90b3R5cGUuY2FsbCxcbiAgbm9kZXM6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5zaXplLFxuICBlbXB0eTogc2VsZWN0aW9uX3Byb3RvdHlwZS5lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX3Byb3RvdHlwZS5lYWNoLFxuICBvbjogdHJhbnNpdGlvbl9vbixcbiAgYXR0cjogdHJhbnNpdGlvbl9hdHRyLFxuICBhdHRyVHdlZW46IHRyYW5zaXRpb25fYXR0clR3ZWVuLFxuICBzdHlsZTogdHJhbnNpdGlvbl9zdHlsZSxcbiAgc3R5bGVUd2VlbjogdHJhbnNpdGlvbl9zdHlsZVR3ZWVuLFxuICB0ZXh0OiB0cmFuc2l0aW9uX3RleHQsXG4gIHRleHRUd2VlbjogdHJhbnNpdGlvbl90ZXh0VHdlZW4sXG4gIHJlbW92ZTogdHJhbnNpdGlvbl9yZW1vdmUsXG4gIHR3ZWVuOiB0cmFuc2l0aW9uX3R3ZWVuLFxuICBkZWxheTogdHJhbnNpdGlvbl9kZWxheSxcbiAgZHVyYXRpb246IHRyYW5zaXRpb25fZHVyYXRpb24sXG4gIGVhc2U6IHRyYW5zaXRpb25fZWFzZSxcbiAgZWFzZVZhcnlpbmc6IHRyYW5zaXRpb25fZWFzZVZhcnlpbmcsXG4gIGVuZDogdHJhbnNpdGlvbl9lbmQsXG4gIFtTeW1ib2wuaXRlcmF0b3JdOiBzZWxlY3Rpb25fcHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl1cbn07XG4iLCJleHBvcnQgZnVuY3Rpb24gY3ViaWNJbih0KSB7XG4gIHJldHVybiB0ICogdCAqIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY091dCh0KSB7XG4gIHJldHVybiAtLXQgKiB0ICogdCArIDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY0luT3V0KHQpIHtcbiAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gdCAqIHQgKiB0IDogKHQgLT0gMikgKiB0ICogdCArIDIpIC8gMjtcbn1cbiIsImltcG9ydCB7c2VsZWN0b3J9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkID0gdGhpcy5faWQ7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICAgIHNjaGVkdWxlKHN1Ymdyb3VwW2ldLCBuYW1lLCBpZCwgaSwgc3ViZ3JvdXAsIGdldChub2RlLCBpZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0b3JBbGx9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkID0gdGhpcy5faWQ7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBmb3IgKHZhciBjaGlsZHJlbiA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSwgY2hpbGQsIGluaGVyaXQgPSBnZXQobm9kZSwgaWQpLCBrID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgayA8IGw7ICsraykge1xuICAgICAgICAgIGlmIChjaGlsZCA9IGNoaWxkcmVuW2tdKSB7XG4gICAgICAgICAgICBzY2hlZHVsZShjaGlsZCwgbmFtZSwgaWQsIGssIGNoaWxkcmVuLCBpbmhlcml0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3ViZ3JvdXBzLnB1c2goY2hpbGRyZW4pO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiaW1wb3J0IHttYXRjaGVyfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIGlmICh0eXBlb2YgbWF0Y2ggIT09IFwiZnVuY3Rpb25cIikgbWF0Y2ggPSBtYXRjaGVyKG1hdGNoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgbWF0Y2guY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpIHtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRyYW5zaXRpb24pIHtcbiAgaWYgKHRyYW5zaXRpb24uX2lkICE9PSB0aGlzLl9pZCkgdGhyb3cgbmV3IEVycm9yO1xuXG4gIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSB0cmFuc2l0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbiwgbmV3SWR9IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZDAgPSB0aGlzLl9pZCxcbiAgICAgIGlkMSA9IG5ld0lkKCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgdmFyIGluaGVyaXQgPSBnZXQobm9kZSwgaWQwKTtcbiAgICAgICAgc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQxLCBpLCBncm91cCwge1xuICAgICAgICAgIHRpbWU6IGluaGVyaXQudGltZSArIGluaGVyaXQuZGVsYXkgKyBpbmhlcml0LmR1cmF0aW9uLFxuICAgICAgICAgIGRlbGF5OiAwLFxuICAgICAgICAgIGR1cmF0aW9uOiBpbmhlcml0LmR1cmF0aW9uLFxuICAgICAgICAgIGVhc2U6IGluaGVyaXQuZWFzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZDEpO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldCwgaW5pdH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gc3RhcnQobmFtZSkge1xuICByZXR1cm4gKG5hbWUgKyBcIlwiKS50cmltKCkuc3BsaXQoL158XFxzKy8pLmV2ZXJ5KGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgcmV0dXJuICF0IHx8IHQgPT09IFwic3RhcnRcIjtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSB7XG4gIHZhciBvbjAsIG9uMSwgc2l0ID0gc3RhcnQobmFtZSkgPyBpbml0IDogc2V0O1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2l0KHRoaXMsIGlkKSxcbiAgICAgICAgb24gPSBzY2hlZHVsZS5vbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCBkaXNwYXRjaCBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAob24gIT09IG9uMCkgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihuYW1lLCBsaXN0ZW5lcik7XG5cbiAgICBzY2hlZHVsZS5vbiA9IG9uMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyXG4gICAgICA/IGdldCh0aGlzLm5vZGUoKSwgaWQpLm9uLm9uKG5hbWUpXG4gICAgICA6IHRoaXMuZWFjaChvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikpO1xufVxuIiwiZnVuY3Rpb24gc3R5bGVJbnRlcnBvbGF0ZShuYW1lLCBpLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgaS5jYWxsKHRoaXMsIHQpLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciB0LCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdCA9IChpMCA9IGkpICYmIHN0eWxlSW50ZXJwb2xhdGUobmFtZSwgaSwgcHJpb3JpdHkpO1xuICAgIHJldHVybiB0O1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIga2V5ID0gXCJzdHlsZS5cIiArIChuYW1lICs9IFwiXCIpO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkgPT0gbnVsbCA/IFwiXCIgOiBwcmlvcml0eSkpO1xufVxuIiwiaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlMSA9PSBudWxsID8gXCJcIiA6IHZhbHVlMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMudHdlZW4oXCJ0ZXh0XCIsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IHRleHRGdW5jdGlvbih0d2VlblZhbHVlKHRoaXMsIFwidGV4dFwiLCB2YWx1ZSkpXG4gICAgICA6IHRleHRDb25zdGFudCh2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIikpO1xufVxuIiwiZnVuY3Rpb24gdGV4dEludGVycG9sYXRlKGkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gaS5jYWxsKHRoaXMsIHQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0VHdlZW4odmFsdWUpIHtcbiAgdmFyIHQwLCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdDAgPSAoaTAgPSBpKSAmJiB0ZXh0SW50ZXJwb2xhdGUoaSk7XG4gICAgcmV0dXJuIHQwO1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBrZXkgPSBcInRleHRcIjtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIHRleHRUd2Vlbih2YWx1ZSkpO1xufVxuIiwiZnVuY3Rpb24gcmVtb3ZlRnVuY3Rpb24oaWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLl9fdHJhbnNpdGlvbikgaWYgKCtpICE9PSBpZCkgcmV0dXJuO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm9uKFwiZW5kLnJlbW92ZVwiLCByZW1vdmVGdW5jdGlvbih0aGlzLl9pZCkpO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZWFzZSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmVhc2U7XG59XG4iLCJpbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZWFzZVZhcnlpbmcoaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHR5cGVvZiB2ICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgICBzZXQodGhpcywgaWQpLmVhc2UgPSB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMuZWFjaChlYXNlVmFyeWluZyh0aGlzLl9pZCwgdmFsdWUpKTtcbn1cbiIsImltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG9uMCwgb24xLCB0aGF0ID0gdGhpcywgaWQgPSB0aGF0Ll9pZCwgc2l6ZSA9IHRoYXQuc2l6ZSgpO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIGNhbmNlbCA9IHt2YWx1ZTogcmVqZWN0fSxcbiAgICAgICAgZW5kID0ge3ZhbHVlOiBmdW5jdGlvbigpIHsgaWYgKC0tc2l6ZSA9PT0gMCkgcmVzb2x2ZSgpOyB9fTtcblxuICAgIHRoYXQuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgICAgb24gPSBzY2hlZHVsZS5vbjtcblxuICAgICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICAgIGlmIChvbiAhPT0gb24wKSB7XG4gICAgICAgIG9uMSA9IChvbjAgPSBvbikuY29weSgpO1xuICAgICAgICBvbjEuXy5jYW5jZWwucHVzaChjYW5jZWwpO1xuICAgICAgICBvbjEuXy5pbnRlcnJ1cHQucHVzaChjYW5jZWwpO1xuICAgICAgICBvbjEuXy5lbmQucHVzaChlbmQpO1xuICAgICAgfVxuXG4gICAgICBzY2hlZHVsZS5vbiA9IG9uMTtcbiAgICB9KTtcblxuICAgIC8vIFRoZSBzZWxlY3Rpb24gd2FzIGVtcHR5LCByZXNvbHZlIGVuZCBpbW1lZGlhdGVseVxuICAgIGlmIChzaXplID09PSAwKSByZXNvbHZlKCk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4uL3RyYW5zaXRpb24vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSBmcm9tIFwiLi4vdHJhbnNpdGlvbi9zY2hlZHVsZS5qc1wiO1xuaW1wb3J0IHtlYXNlQ3ViaWNJbk91dH0gZnJvbSBcImQzLWVhc2VcIjtcbmltcG9ydCB7bm93fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGRlZmF1bHRUaW1pbmcgPSB7XG4gIHRpbWU6IG51bGwsIC8vIFNldCBvbiB1c2UuXG4gIGRlbGF5OiAwLFxuICBkdXJhdGlvbjogMjUwLFxuICBlYXNlOiBlYXNlQ3ViaWNJbk91dFxufTtcblxuZnVuY3Rpb24gaW5oZXJpdChub2RlLCBpZCkge1xuICB2YXIgdGltaW5nO1xuICB3aGlsZSAoISh0aW1pbmcgPSBub2RlLl9fdHJhbnNpdGlvbikgfHwgISh0aW1pbmcgPSB0aW1pbmdbaWRdKSkge1xuICAgIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHRyYW5zaXRpb24gJHtpZH0gbm90IGZvdW5kYCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aW1pbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGlkLFxuICAgICAgdGltaW5nO1xuXG4gIGlmIChuYW1lIGluc3RhbmNlb2YgVHJhbnNpdGlvbikge1xuICAgIGlkID0gbmFtZS5faWQsIG5hbWUgPSBuYW1lLl9uYW1lO1xuICB9IGVsc2Uge1xuICAgIGlkID0gbmV3SWQoKSwgKHRpbWluZyA9IGRlZmF1bHRUaW1pbmcpLnRpbWUgPSBub3coKSwgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkLCBpLCBncm91cCwgdGltaW5nIHx8IGluaGVyaXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnRlcnJ1cHQgZnJvbSBcIi4vaW50ZXJydXB0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvbi5qc1wiO1xuXG5zZWxlY3Rpb24ucHJvdG90eXBlLmludGVycnVwdCA9IHNlbGVjdGlvbl9pbnRlcnJ1cHQ7XG5zZWxlY3Rpb24ucHJvdG90eXBlLnRyYW5zaXRpb24gPSBzZWxlY3Rpb25fdHJhbnNpdGlvbjtcbiIsImltcG9ydCBpbnRlcnJ1cHQgZnJvbSBcIi4uL2ludGVycnVwdC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgaW50ZXJydXB0KHRoaXMsIG5hbWUpO1xuICB9KTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vdHJhbnNpdGlvbi9pbmRleC5qc1wiO1xuaW1wb3J0IHtTQ0hFRFVMRUR9IGZyb20gXCIuL3RyYW5zaXRpb24vc2NoZWR1bGUuanNcIjtcblxudmFyIHJvb3QgPSBbbnVsbF07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgc2NoZWR1bGUsXG4gICAgICBpO1xuXG4gIGlmIChzY2hlZHVsZXMpIHtcbiAgICBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLnN0YXRlID4gU0NIRURVTEVEICYmIHNjaGVkdWxlLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKFtbbm9kZV1dLCByb290LCBuYW1lLCAraSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJleHBvcnQgZGVmYXVsdCB4ID0+ICgpID0+IHg7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCcnVzaEV2ZW50KHR5cGUsIHtcbiAgc291cmNlRXZlbnQsXG4gIHRhcmdldCxcbiAgc2VsZWN0aW9uLFxuICBtb2RlLFxuICBkaXNwYXRjaFxufSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgdHlwZToge3ZhbHVlOiB0eXBlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIHNvdXJjZUV2ZW50OiB7dmFsdWU6IHNvdXJjZUV2ZW50LCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIHRhcmdldDoge3ZhbHVlOiB0YXJnZXQsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgc2VsZWN0aW9uOiB7dmFsdWU6IHNlbGVjdGlvbiwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICBtb2RlOiB7dmFsdWU6IG1vZGUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgXzoge3ZhbHVlOiBkaXNwYXRjaH1cbiAgfSk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gbm9wcm9wYWdhdGlvbihldmVudCkge1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZXZlbnQpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7ZHJhZ0Rpc2FibGUsIGRyYWdFbmFibGV9IGZyb20gXCJkMy1kcmFnXCI7XG5pbXBvcnQge2ludGVycG9sYXRlfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7cG9pbnRlciwgc2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge2ludGVycnVwdH0gZnJvbSBcImQzLXRyYW5zaXRpb25cIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IEJydXNoRXZlbnQgZnJvbSBcIi4vZXZlbnQuanNcIjtcbmltcG9ydCBub2V2ZW50LCB7bm9wcm9wYWdhdGlvbn0gZnJvbSBcIi4vbm9ldmVudC5qc1wiO1xuXG52YXIgTU9ERV9EUkFHID0ge25hbWU6IFwiZHJhZ1wifSxcbiAgICBNT0RFX1NQQUNFID0ge25hbWU6IFwic3BhY2VcIn0sXG4gICAgTU9ERV9IQU5ETEUgPSB7bmFtZTogXCJoYW5kbGVcIn0sXG4gICAgTU9ERV9DRU5URVIgPSB7bmFtZTogXCJjZW50ZXJcIn07XG5cbmNvbnN0IHthYnMsIG1heCwgbWlufSA9IE1hdGg7XG5cbmZ1bmN0aW9uIG51bWJlcjEoZSkge1xuICByZXR1cm4gWytlWzBdLCArZVsxXV07XG59XG5cbmZ1bmN0aW9uIG51bWJlcjIoZSkge1xuICByZXR1cm4gW251bWJlcjEoZVswXSksIG51bWJlcjEoZVsxXSldO1xufVxuXG52YXIgWCA9IHtcbiAgbmFtZTogXCJ4XCIsXG4gIGhhbmRsZXM6IFtcIndcIiwgXCJlXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHgsIGUpIHsgcmV0dXJuIHggPT0gbnVsbCA/IG51bGwgOiBbWyt4WzBdLCBlWzBdWzFdXSwgWyt4WzFdLCBlWzFdWzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVswXSwgeHlbMV1bMF1dOyB9XG59O1xuXG52YXIgWSA9IHtcbiAgbmFtZTogXCJ5XCIsXG4gIGhhbmRsZXM6IFtcIm5cIiwgXCJzXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHksIGUpIHsgcmV0dXJuIHkgPT0gbnVsbCA/IG51bGwgOiBbW2VbMF1bMF0sICt5WzBdXSwgW2VbMV1bMF0sICt5WzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVsxXSwgeHlbMV1bMV1dOyB9XG59O1xuXG52YXIgWFkgPSB7XG4gIG5hbWU6IFwieHlcIixcbiAgaGFuZGxlczogW1wiblwiLCBcIndcIiwgXCJlXCIsIFwic1wiLCBcIm53XCIsIFwibmVcIiwgXCJzd1wiLCBcInNlXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSA9PSBudWxsID8gbnVsbCA6IG51bWJlcjIoeHkpOyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eTsgfVxufTtcblxudmFyIGN1cnNvcnMgPSB7XG4gIG92ZXJsYXk6IFwiY3Jvc3NoYWlyXCIsXG4gIHNlbGVjdGlvbjogXCJtb3ZlXCIsXG4gIG46IFwibnMtcmVzaXplXCIsXG4gIGU6IFwiZXctcmVzaXplXCIsXG4gIHM6IFwibnMtcmVzaXplXCIsXG4gIHc6IFwiZXctcmVzaXplXCIsXG4gIG53OiBcIm53c2UtcmVzaXplXCIsXG4gIG5lOiBcIm5lc3ctcmVzaXplXCIsXG4gIHNlOiBcIm53c2UtcmVzaXplXCIsXG4gIHN3OiBcIm5lc3ctcmVzaXplXCJcbn07XG5cbnZhciBmbGlwWCA9IHtcbiAgZTogXCJ3XCIsXG4gIHc6IFwiZVwiLFxuICBudzogXCJuZVwiLFxuICBuZTogXCJud1wiLFxuICBzZTogXCJzd1wiLFxuICBzdzogXCJzZVwiXG59O1xuXG52YXIgZmxpcFkgPSB7XG4gIG46IFwic1wiLFxuICBzOiBcIm5cIixcbiAgbnc6IFwic3dcIixcbiAgbmU6IFwic2VcIixcbiAgc2U6IFwibmVcIixcbiAgc3c6IFwibndcIlxufTtcblxudmFyIHNpZ25zWCA9IHtcbiAgb3ZlcmxheTogKzEsXG4gIHNlbGVjdGlvbjogKzEsXG4gIG46IG51bGwsXG4gIGU6ICsxLFxuICBzOiBudWxsLFxuICB3OiAtMSxcbiAgbnc6IC0xLFxuICBuZTogKzEsXG4gIHNlOiArMSxcbiAgc3c6IC0xXG59O1xuXG52YXIgc2lnbnNZID0ge1xuICBvdmVybGF5OiArMSxcbiAgc2VsZWN0aW9uOiArMSxcbiAgbjogLTEsXG4gIGU6IG51bGwsXG4gIHM6ICsxLFxuICB3OiBudWxsLFxuICBudzogLTEsXG4gIG5lOiAtMSxcbiAgc2U6ICsxLFxuICBzdzogKzFcbn07XG5cbmZ1bmN0aW9uIHR5cGUodCkge1xuICByZXR1cm4ge3R5cGU6IHR9O1xufVxuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIoZXZlbnQpIHtcbiAgcmV0dXJuICFldmVudC5jdHJsS2V5ICYmICFldmVudC5idXR0b247XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRFeHRlbnQoKSB7XG4gIHZhciBzdmcgPSB0aGlzLm93bmVyU1ZHRWxlbWVudCB8fCB0aGlzO1xuICBpZiAoc3ZnLmhhc0F0dHJpYnV0ZShcInZpZXdCb3hcIikpIHtcbiAgICBzdmcgPSBzdmcudmlld0JveC5iYXNlVmFsO1xuICAgIHJldHVybiBbW3N2Zy54LCBzdmcueV0sIFtzdmcueCArIHN2Zy53aWR0aCwgc3ZnLnkgKyBzdmcuaGVpZ2h0XV07XG4gIH1cbiAgcmV0dXJuIFtbMCwgMF0sIFtzdmcud2lkdGguYmFzZVZhbC52YWx1ZSwgc3ZnLmhlaWdodC5iYXNlVmFsLnZhbHVlXV07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUb3VjaGFibGUoKSB7XG4gIHJldHVybiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgfHwgKFwib250b3VjaHN0YXJ0XCIgaW4gdGhpcyk7XG59XG5cbi8vIExpa2UgZDMubG9jYWwsIGJ1dCB3aXRoIHRoZSBuYW1lIOKAnF9fYnJ1c2jigJ0gcmF0aGVyIHRoYW4gYXV0by1nZW5lcmF0ZWQuXG5mdW5jdGlvbiBsb2NhbChub2RlKSB7XG4gIHdoaWxlICghbm9kZS5fX2JydXNoKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICByZXR1cm4gbm9kZS5fX2JydXNoO1xufVxuXG5mdW5jdGlvbiBlbXB0eShleHRlbnQpIHtcbiAgcmV0dXJuIGV4dGVudFswXVswXSA9PT0gZXh0ZW50WzFdWzBdXG4gICAgICB8fCBleHRlbnRbMF1bMV0gPT09IGV4dGVudFsxXVsxXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoU2VsZWN0aW9uKG5vZGUpIHtcbiAgdmFyIHN0YXRlID0gbm9kZS5fX2JydXNoO1xuICByZXR1cm4gc3RhdGUgPyBzdGF0ZS5kaW0ub3V0cHV0KHN0YXRlLnNlbGVjdGlvbikgOiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hYKCkge1xuICByZXR1cm4gYnJ1c2goWCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFkoKSB7XG4gIHJldHVybiBicnVzaChZKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBicnVzaChYWSk7XG59XG5cbmZ1bmN0aW9uIGJydXNoKGRpbSkge1xuICB2YXIgZXh0ZW50ID0gZGVmYXVsdEV4dGVudCxcbiAgICAgIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICB0b3VjaGFibGUgPSBkZWZhdWx0VG91Y2hhYmxlLFxuICAgICAga2V5cyA9IHRydWUsXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiYnJ1c2hcIiwgXCJlbmRcIiksXG4gICAgICBoYW5kbGVTaXplID0gNixcbiAgICAgIHRvdWNoZW5kaW5nO1xuXG4gIGZ1bmN0aW9uIGJydXNoKGdyb3VwKSB7XG4gICAgdmFyIG92ZXJsYXkgPSBncm91cFxuICAgICAgICAucHJvcGVydHkoXCJfX2JydXNoXCIsIGluaXRpYWxpemUpXG4gICAgICAuc2VsZWN0QWxsKFwiLm92ZXJsYXlcIilcbiAgICAgIC5kYXRhKFt0eXBlKFwib3ZlcmxheVwiKV0pO1xuXG4gICAgb3ZlcmxheS5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcIm92ZXJsYXlcIilcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpXG4gICAgICAubWVyZ2Uob3ZlcmxheSlcbiAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGV4dGVudCA9IGxvY2FsKHRoaXMpLmV4dGVudDtcbiAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGV4dGVudFswXVswXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGV4dGVudFswXVsxXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBleHRlbnRbMV1bMF0gLSBleHRlbnRbMF1bMF0pXG4gICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGV4dGVudFsxXVsxXSAtIGV4dGVudFswXVsxXSk7XG4gICAgICAgIH0pO1xuXG4gICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgLmRhdGEoW3R5cGUoXCJzZWxlY3Rpb25cIildKVxuICAgICAgLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwic2VsZWN0aW9uXCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjNzc3XCIpXG4gICAgICAgIC5hdHRyKFwiZmlsbC1vcGFjaXR5XCIsIDAuMylcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCIjZmZmXCIpXG4gICAgICAgIC5hdHRyKFwic2hhcGUtcmVuZGVyaW5nXCIsIFwiY3Jpc3BFZGdlc1wiKTtcblxuICAgIHZhciBoYW5kbGUgPSBncm91cC5zZWxlY3RBbGwoXCIuaGFuZGxlXCIpXG4gICAgICAuZGF0YShkaW0uaGFuZGxlcywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlOyB9KTtcblxuICAgIGhhbmRsZS5leGl0KCkucmVtb3ZlKCk7XG5cbiAgICBoYW5kbGUuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gXCJoYW5kbGUgaGFuZGxlLS1cIiArIGQudHlwZTsgfSlcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gY3Vyc29yc1tkLnR5cGVdOyB9KTtcblxuICAgIGdyb3VwXG4gICAgICAgIC5lYWNoKHJlZHJhdylcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpXG4gICAgICAgIC5vbihcIm1vdXNlZG93bi5icnVzaFwiLCBzdGFydGVkKVxuICAgICAgLmZpbHRlcih0b3VjaGFibGUpXG4gICAgICAgIC5vbihcInRvdWNoc3RhcnQuYnJ1c2hcIiwgc3RhcnRlZClcbiAgICAgICAgLm9uKFwidG91Y2htb3ZlLmJydXNoXCIsIHRvdWNobW92ZWQpXG4gICAgICAgIC5vbihcInRvdWNoZW5kLmJydXNoIHRvdWNoY2FuY2VsLmJydXNoXCIsIHRvdWNoZW5kZWQpXG4gICAgICAgIC5zdHlsZShcInRvdWNoLWFjdGlvblwiLCBcIm5vbmVcIilcbiAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcbiAgfVxuXG4gIGJydXNoLm1vdmUgPSBmdW5jdGlvbihncm91cCwgc2VsZWN0aW9uLCBldmVudCkge1xuICAgIGlmIChncm91cC50d2Vlbikge1xuICAgICAgZ3JvdXBcbiAgICAgICAgICAub24oXCJzdGFydC5icnVzaFwiLCBmdW5jdGlvbihldmVudCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuYmVmb3Jlc3RhcnQoKS5zdGFydChldmVudCk7IH0pXG4gICAgICAgICAgLm9uKFwiaW50ZXJydXB0LmJydXNoIGVuZC5icnVzaFwiLCBmdW5jdGlvbihldmVudCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuZW5kKGV2ZW50KTsgfSlcbiAgICAgICAgICAudHdlZW4oXCJicnVzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjAgPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBpID0gaW50ZXJwb2xhdGUoc2VsZWN0aW9uMCwgc2VsZWN0aW9uMSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHR3ZWVuKHQpIHtcbiAgICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gdCA9PT0gMSAmJiBzZWxlY3Rpb24xID09PSBudWxsID8gbnVsbCA6IGkodCk7XG4gICAgICAgICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICAgICAgICBlbWl0LmJydXNoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb24wICE9PSBudWxsICYmIHNlbGVjdGlvbjEgIT09IG51bGwgPyB0d2VlbiA6IHR3ZWVuKDEpO1xuICAgICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgc3RhdGUgPSB0aGF0Ll9fYnJ1c2gsXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhhdCwgYXJncykgOiBzZWxlY3Rpb24sIHN0YXRlLmV4dGVudCksXG4gICAgICAgICAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJncykuYmVmb3Jlc3RhcnQoKTtcblxuICAgICAgICAgICAgaW50ZXJydXB0KHRoYXQpO1xuICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gc2VsZWN0aW9uMSA9PT0gbnVsbCA/IG51bGwgOiBzZWxlY3Rpb24xO1xuICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICBlbWl0LnN0YXJ0KGV2ZW50KS5icnVzaChldmVudCkuZW5kKGV2ZW50KTtcbiAgICAgICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgYnJ1c2guY2xlYXIgPSBmdW5jdGlvbihncm91cCwgZXZlbnQpIHtcbiAgICBicnVzaC5tb3ZlKGdyb3VwLCBudWxsLCBldmVudCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVkcmF3KCkge1xuICAgIHZhciBncm91cCA9IHNlbGVjdCh0aGlzKSxcbiAgICAgICAgc2VsZWN0aW9uID0gbG9jYWwodGhpcykuc2VsZWN0aW9uO1xuXG4gICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgc2VsZWN0aW9uWzBdWzBdKVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBzZWxlY3Rpb25bMF1bMV0pXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdKTtcblxuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlW2QudHlwZS5sZW5ndGggLSAxXSA9PT0gXCJlXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVswXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbMF0gPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gaGFuZGxlU2l6ZSAvIDIgOiBzZWxlY3Rpb25bMF1bMV0gLSBoYW5kbGVTaXplIC8gMjsgfSlcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJuXCIgfHwgZC50eXBlID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJlXCIgfHwgZC50eXBlID09PSBcIndcIiA/IHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb24sLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXR0ZXIodGhhdCwgYXJncywgY2xlYW4pIHtcbiAgICB2YXIgZW1pdCA9IHRoYXQuX19icnVzaC5lbWl0dGVyO1xuICAgIHJldHVybiBlbWl0ICYmICghY2xlYW4gfHwgIWVtaXQuY2xlYW4pID8gZW1pdCA6IG5ldyBFbWl0dGVyKHRoYXQsIGFyZ3MsIGNsZWFuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEVtaXR0ZXIodGhhdCwgYXJncywgY2xlYW4pIHtcbiAgICB0aGlzLnRoYXQgPSB0aGF0O1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5zdGF0ZSA9IHRoYXQuX19icnVzaDtcbiAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gICAgdGhpcy5jbGVhbiA9IGNsZWFuO1xuICB9XG5cbiAgRW1pdHRlci5wcm90b3R5cGUgPSB7XG4gICAgYmVmb3Jlc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCsrdGhpcy5hY3RpdmUgPT09IDEpIHRoaXMuc3RhdGUuZW1pdHRlciA9IHRoaXMsIHRoaXMuc3RhcnRpbmcgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBzdGFydDogZnVuY3Rpb24oZXZlbnQsIG1vZGUpIHtcbiAgICAgIGlmICh0aGlzLnN0YXJ0aW5nKSB0aGlzLnN0YXJ0aW5nID0gZmFsc2UsIHRoaXMuZW1pdChcInN0YXJ0XCIsIGV2ZW50LCBtb2RlKTtcbiAgICAgIGVsc2UgdGhpcy5lbWl0KFwiYnJ1c2hcIiwgZXZlbnQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBicnVzaDogZnVuY3Rpb24oZXZlbnQsIG1vZGUpIHtcbiAgICAgIHRoaXMuZW1pdChcImJydXNoXCIsIGV2ZW50LCBtb2RlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW5kOiBmdW5jdGlvbihldmVudCwgbW9kZSkge1xuICAgICAgaWYgKC0tdGhpcy5hY3RpdmUgPT09IDApIGRlbGV0ZSB0aGlzLnN0YXRlLmVtaXR0ZXIsIHRoaXMuZW1pdChcImVuZFwiLCBldmVudCwgbW9kZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVtaXQ6IGZ1bmN0aW9uKHR5cGUsIGV2ZW50LCBtb2RlKSB7XG4gICAgICB2YXIgZCA9IHNlbGVjdCh0aGlzLnRoYXQpLmRhdHVtKCk7XG4gICAgICBsaXN0ZW5lcnMuY2FsbChcbiAgICAgICAgdHlwZSxcbiAgICAgICAgdGhpcy50aGF0LFxuICAgICAgICBuZXcgQnJ1c2hFdmVudCh0eXBlLCB7XG4gICAgICAgICAgc291cmNlRXZlbnQ6IGV2ZW50LFxuICAgICAgICAgIHRhcmdldDogYnJ1c2gsXG4gICAgICAgICAgc2VsZWN0aW9uOiBkaW0ub3V0cHV0KHRoaXMuc3RhdGUuc2VsZWN0aW9uKSxcbiAgICAgICAgICBtb2RlLFxuICAgICAgICAgIGRpc3BhdGNoOiBsaXN0ZW5lcnNcbiAgICAgICAgfSksXG4gICAgICAgIGRcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHN0YXJ0ZWQoZXZlbnQpIHtcbiAgICBpZiAodG91Y2hlbmRpbmcgJiYgIWV2ZW50LnRvdWNoZXMpIHJldHVybjtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG5cbiAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgIHR5cGUgPSBldmVudC50YXJnZXQuX19kYXRhX18udHlwZSxcbiAgICAgICAgbW9kZSA9IChrZXlzICYmIGV2ZW50Lm1ldGFLZXkgPyB0eXBlID0gXCJvdmVybGF5XCIgOiB0eXBlKSA9PT0gXCJzZWxlY3Rpb25cIiA/IE1PREVfRFJBRyA6IChrZXlzICYmIGV2ZW50LmFsdEtleSA/IE1PREVfQ0VOVEVSIDogTU9ERV9IQU5ETEUpLFxuICAgICAgICBzaWduWCA9IGRpbSA9PT0gWSA/IG51bGwgOiBzaWduc1hbdHlwZV0sXG4gICAgICAgIHNpZ25ZID0gZGltID09PSBYID8gbnVsbCA6IHNpZ25zWVt0eXBlXSxcbiAgICAgICAgc3RhdGUgPSBsb2NhbCh0aGF0KSxcbiAgICAgICAgZXh0ZW50ID0gc3RhdGUuZXh0ZW50LFxuICAgICAgICBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgIFcgPSBleHRlbnRbMF1bMF0sIHcwLCB3MSxcbiAgICAgICAgTiA9IGV4dGVudFswXVsxXSwgbjAsIG4xLFxuICAgICAgICBFID0gZXh0ZW50WzFdWzBdLCBlMCwgZTEsXG4gICAgICAgIFMgPSBleHRlbnRbMV1bMV0sIHMwLCBzMSxcbiAgICAgICAgZHggPSAwLFxuICAgICAgICBkeSA9IDAsXG4gICAgICAgIG1vdmluZyxcbiAgICAgICAgc2hpZnRpbmcgPSBzaWduWCAmJiBzaWduWSAmJiBrZXlzICYmIGV2ZW50LnNoaWZ0S2V5LFxuICAgICAgICBsb2NrWCxcbiAgICAgICAgbG9ja1ksXG4gICAgICAgIHBvaW50cyA9IEFycmF5LmZyb20oZXZlbnQudG91Y2hlcyB8fCBbZXZlbnRdLCB0ID0+IHtcbiAgICAgICAgICBjb25zdCBpID0gdC5pZGVudGlmaWVyO1xuICAgICAgICAgIHQgPSBwb2ludGVyKHQsIHRoYXQpO1xuICAgICAgICAgIHQucG9pbnQwID0gdC5zbGljZSgpO1xuICAgICAgICAgIHQuaWRlbnRpZmllciA9IGk7XG4gICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgIH0pO1xuXG4gICAgaW50ZXJydXB0KHRoYXQpO1xuICAgIHZhciBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMsIHRydWUpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICBpZiAodHlwZSA9PT0gXCJvdmVybGF5XCIpIHtcbiAgICAgIGlmIChzZWxlY3Rpb24pIG1vdmluZyA9IHRydWU7XG4gICAgICBjb25zdCBwdHMgPSBbcG9pbnRzWzBdLCBwb2ludHNbMV0gfHwgcG9pbnRzWzBdXTtcbiAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHNlbGVjdGlvbiA9IFtbXG4gICAgICAgICAgdzAgPSBkaW0gPT09IFkgPyBXIDogbWluKHB0c1swXVswXSwgcHRzWzFdWzBdKSxcbiAgICAgICAgICBuMCA9IGRpbSA9PT0gWCA/IE4gOiBtaW4ocHRzWzBdWzFdLCBwdHNbMV1bMV0pXG4gICAgICAgIF0sIFtcbiAgICAgICAgICBlMCA9IGRpbSA9PT0gWSA/IEUgOiBtYXgocHRzWzBdWzBdLCBwdHNbMV1bMF0pLFxuICAgICAgICAgIHMwID0gZGltID09PSBYID8gUyA6IG1heChwdHNbMF1bMV0sIHB0c1sxXVsxXSlcbiAgICAgICAgXV07XG4gICAgICBpZiAocG9pbnRzLmxlbmd0aCA+IDEpIG1vdmUoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3MCA9IHNlbGVjdGlvblswXVswXTtcbiAgICAgIG4wID0gc2VsZWN0aW9uWzBdWzFdO1xuICAgICAgZTAgPSBzZWxlY3Rpb25bMV1bMF07XG4gICAgICBzMCA9IHNlbGVjdGlvblsxXVsxXTtcbiAgICB9XG5cbiAgICB3MSA9IHcwO1xuICAgIG4xID0gbjA7XG4gICAgZTEgPSBlMDtcbiAgICBzMSA9IHMwO1xuXG4gICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoYXQpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpO1xuXG4gICAgdmFyIG92ZXJsYXkgPSBncm91cC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcblxuICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICBlbWl0Lm1vdmVkID0gbW92ZWQ7XG4gICAgICBlbWl0LmVuZGVkID0gZW5kZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB2aWV3ID0gc2VsZWN0KGV2ZW50LnZpZXcpXG4gICAgICAgICAgLm9uKFwibW91c2Vtb3ZlLmJydXNoXCIsIG1vdmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcIm1vdXNldXAuYnJ1c2hcIiwgZW5kZWQsIHRydWUpO1xuICAgICAgaWYgKGtleXMpIHZpZXdcbiAgICAgICAgICAub24oXCJrZXlkb3duLmJydXNoXCIsIGtleWRvd25lZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJrZXl1cC5icnVzaFwiLCBrZXl1cHBlZCwgdHJ1ZSlcblxuICAgICAgZHJhZ0Rpc2FibGUoZXZlbnQudmlldyk7XG4gICAgfVxuXG4gICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgZW1pdC5zdGFydChldmVudCwgbW9kZS5uYW1lKTtcblxuICAgIGZ1bmN0aW9uIG1vdmVkKGV2ZW50KSB7XG4gICAgICBmb3IgKGNvbnN0IHAgb2YgZXZlbnQuY2hhbmdlZFRvdWNoZXMgfHwgW2V2ZW50XSkge1xuICAgICAgICBmb3IgKGNvbnN0IGQgb2YgcG9pbnRzKVxuICAgICAgICAgIGlmIChkLmlkZW50aWZpZXIgPT09IHAuaWRlbnRpZmllcikgZC5jdXIgPSBwb2ludGVyKHAsIHRoYXQpO1xuICAgICAgfVxuICAgICAgaWYgKHNoaWZ0aW5nICYmICFsb2NrWCAmJiAhbG9ja1kgJiYgcG9pbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1swXTtcbiAgICAgICAgaWYgKGFicyhwb2ludC5jdXJbMF0gLSBwb2ludFswXSkgPiBhYnMocG9pbnQuY3VyWzFdIC0gcG9pbnRbMV0pKVxuICAgICAgICAgIGxvY2tZID0gdHJ1ZTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGxvY2tYID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgcG9pbnQgb2YgcG9pbnRzKVxuICAgICAgICBpZiAocG9pbnQuY3VyKSBwb2ludFswXSA9IHBvaW50LmN1clswXSwgcG9pbnRbMV0gPSBwb2ludC5jdXJbMV07XG4gICAgICBtb3ZpbmcgPSB0cnVlO1xuICAgICAgbm9ldmVudChldmVudCk7XG4gICAgICBtb3ZlKGV2ZW50KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3ZlKGV2ZW50KSB7XG4gICAgICBjb25zdCBwb2ludCA9IHBvaW50c1swXSwgcG9pbnQwID0gcG9pbnQucG9pbnQwO1xuICAgICAgdmFyIHQ7XG5cbiAgICAgIGR4ID0gcG9pbnRbMF0gLSBwb2ludDBbMF07XG4gICAgICBkeSA9IHBvaW50WzFdIC0gcG9pbnQwWzFdO1xuXG4gICAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgY2FzZSBNT0RFX1NQQUNFOlxuICAgICAgICBjYXNlIE1PREVfRFJBRzoge1xuICAgICAgICAgIGlmIChzaWduWCkgZHggPSBtYXgoVyAtIHcwLCBtaW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTAgKyBkeDtcbiAgICAgICAgICBpZiAoc2lnblkpIGR5ID0gbWF4KE4gLSBuMCwgbWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwICsgZHk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBNT0RFX0hBTkRMRToge1xuICAgICAgICAgIGlmIChwb2ludHNbMV0pIHtcbiAgICAgICAgICAgIGlmIChzaWduWCkgdzEgPSBtYXgoVywgbWluKEUsIHBvaW50c1swXVswXSkpLCBlMSA9IG1heChXLCBtaW4oRSwgcG9pbnRzWzFdWzBdKSksIHNpZ25YID0gMTtcbiAgICAgICAgICAgIGlmIChzaWduWSkgbjEgPSBtYXgoTiwgbWluKFMsIHBvaW50c1swXVsxXSkpLCBzMSA9IG1heChOLCBtaW4oUywgcG9pbnRzWzFdWzFdKSksIHNpZ25ZID0gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZHggPSBtYXgoVyAtIHcwLCBtaW4oRSAtIHcwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTA7XG4gICAgICAgICAgICBlbHNlIGlmIChzaWduWCA+IDApIGR4ID0gbWF4KFcgLSBlMCwgbWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgZHkgPSBtYXgoTiAtIG4wLCBtaW4oUyAtIG4wLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczA7XG4gICAgICAgICAgICBlbHNlIGlmIChzaWduWSA+IDApIGR5ID0gbWF4KE4gLSBzMCwgbWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCwgczEgPSBzMCArIGR5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfQ0VOVEVSOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSB3MSA9IG1heChXLCBtaW4oRSwgdzAgLSBkeCAqIHNpZ25YKSksIGUxID0gbWF4KFcsIG1pbihFLCBlMCArIGR4ICogc2lnblgpKTtcbiAgICAgICAgICBpZiAoc2lnblkpIG4xID0gbWF4KE4sIG1pbihTLCBuMCAtIGR5ICogc2lnblkpKSwgczEgPSBtYXgoTiwgbWluKFMsIHMwICsgZHkgKiBzaWduWSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlMSA8IHcxKSB7XG4gICAgICAgIHNpZ25YICo9IC0xO1xuICAgICAgICB0ID0gdzAsIHcwID0gZTAsIGUwID0gdDtcbiAgICAgICAgdCA9IHcxLCB3MSA9IGUxLCBlMSA9IHQ7XG4gICAgICAgIGlmICh0eXBlIGluIGZsaXBYKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFhbdHlwZV1dKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHMxIDwgbjEpIHtcbiAgICAgICAgc2lnblkgKj0gLTE7XG4gICAgICAgIHQgPSBuMCwgbjAgPSBzMCwgczAgPSB0O1xuICAgICAgICB0ID0gbjEsIG4xID0gczEsIHMxID0gdDtcbiAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFkpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWVt0eXBlXV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSFcbiAgICAgIGlmIChsb2NrWCkgdzEgPSBzZWxlY3Rpb25bMF1bMF0sIGUxID0gc2VsZWN0aW9uWzFdWzBdO1xuICAgICAgaWYgKGxvY2tZKSBuMSA9IHNlbGVjdGlvblswXVsxXSwgczEgPSBzZWxlY3Rpb25bMV1bMV07XG5cbiAgICAgIGlmIChzZWxlY3Rpb25bMF1bMF0gIT09IHcxXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzBdWzFdICE9PSBuMVxuICAgICAgICAgIHx8IHNlbGVjdGlvblsxXVswXSAhPT0gZTFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMV1bMV0gIT09IHMxKSB7XG4gICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IFtbdzEsIG4xXSwgW2UxLCBzMV1dO1xuICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgZW1pdC5icnVzaChldmVudCwgbW9kZS5uYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRlZChldmVudCkge1xuICAgICAgbm9wcm9wYWdhdGlvbihldmVudCk7XG4gICAgICBpZiAoZXZlbnQudG91Y2hlcykge1xuICAgICAgICBpZiAoZXZlbnQudG91Y2hlcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgaWYgKHRvdWNoZW5kaW5nKSBjbGVhclRpbWVvdXQodG91Y2hlbmRpbmcpO1xuICAgICAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgNTAwKTsgLy8gR2hvc3QgY2xpY2tzIGFyZSBkZWxheWVkIVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHJhZ0VuYWJsZShldmVudC52aWV3LCBtb3ZpbmcpO1xuICAgICAgICB2aWV3Lm9uKFwia2V5ZG93bi5icnVzaCBrZXl1cC5icnVzaCBtb3VzZW1vdmUuYnJ1c2ggbW91c2V1cC5icnVzaFwiLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGdyb3VwLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKTtcbiAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpO1xuICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbikgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uOyAvLyBNYXkgYmUgc2V0IGJ5IGJydXNoLm1vdmUgKG9uIHN0YXJ0KSFcbiAgICAgIGlmIChlbXB0eShzZWxlY3Rpb24pKSBzdGF0ZS5zZWxlY3Rpb24gPSBudWxsLCByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgIGVtaXQuZW5kKGV2ZW50LCBtb2RlLm5hbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleWRvd25lZChldmVudCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFKSB7XG4gICAgICAgICAgICBpZiAoc2lnblgpIGUwID0gZTEgLSBkeCAqIHNpZ25YLCB3MCA9IHcxICsgZHggKiBzaWduWDtcbiAgICAgICAgICAgIGlmIChzaWduWSkgczAgPSBzMSAtIGR5ICogc2lnblksIG4wID0gbjEgKyBkeSAqIHNpZ25ZO1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgbW92ZShldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzI6IHsgLy8gU1BBQ0U7IHRha2VzIHByaW9yaXR5IG92ZXIgQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFIHx8IG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxIC0gZHg7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MSAtIGR4O1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMSAtIGR5OyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjEgLSBkeTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX1NQQUNFO1xuICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIG1vdmUoZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50KGV2ZW50KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXl1cHBlZChldmVudCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBpZiAoc2hpZnRpbmcpIHtcbiAgICAgICAgICAgIGxvY2tYID0gbG9ja1kgPSBzaGlmdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgbW92ZShldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICBtb3ZlKGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRVxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX1NQQUNFKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuYWx0S2V5KSB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgICBpZiAoc2lnblkpIHMwID0gczEgLSBkeSAqIHNpZ25ZLCBuMCA9IG4xICsgZHkgKiBzaWduWTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMTsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxO1xuICAgICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0hBTkRMRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcbiAgICAgICAgICAgIG1vdmUoZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50KGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaG1vdmVkKGV2ZW50KSB7XG4gICAgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLm1vdmVkKGV2ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoZW5kZWQoZXZlbnQpIHtcbiAgICBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuZW5kZWQoZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9fYnJ1c2ggfHwge3NlbGVjdGlvbjogbnVsbH07XG4gICAgc3RhdGUuZXh0ZW50ID0gbnVtYmVyMihleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgc3RhdGUuZGltID0gZGltO1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIGJydXNoLmV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KG51bWJlcjIoXykpLCBicnVzaCkgOiBleHRlbnQ7XG4gIH07XG5cbiAgYnJ1c2guZmlsdGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgYnJ1c2gpIDogZmlsdGVyO1xuICB9O1xuXG4gIGJydXNoLnRvdWNoYWJsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0b3VjaGFibGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGJydXNoKSA6IHRvdWNoYWJsZTtcbiAgfTtcblxuICBicnVzaC5oYW5kbGVTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGhhbmRsZVNpemUgPSArXywgYnJ1c2gpIDogaGFuZGxlU2l6ZTtcbiAgfTtcblxuICBicnVzaC5rZXlNb2RpZmllcnMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoa2V5cyA9ICEhXywgYnJ1c2gpIDoga2V5cztcbiAgfTtcblxuICBicnVzaC5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBicnVzaCA6IHZhbHVlO1xuICB9O1xuXG4gIHJldHVybiBicnVzaDtcbn1cbiIsImV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnM7XG5leHBvcnQgdmFyIGNvcyA9IE1hdGguY29zO1xuZXhwb3J0IHZhciBzaW4gPSBNYXRoLnNpbjtcbmV4cG9ydCB2YXIgcGkgPSBNYXRoLlBJO1xuZXhwb3J0IHZhciBoYWxmUGkgPSBwaSAvIDI7XG5leHBvcnQgdmFyIHRhdSA9IHBpICogMjtcbmV4cG9ydCB2YXIgbWF4ID0gTWF0aC5tYXg7XG5leHBvcnQgdmFyIGVwc2lsb24gPSAxZS0xMjtcbiIsImltcG9ydCB7bWF4LCB0YXV9IGZyb20gXCIuL21hdGguanNcIjtcblxuZnVuY3Rpb24gcmFuZ2UoaSwgaikge1xuICByZXR1cm4gQXJyYXkuZnJvbSh7bGVuZ3RoOiBqIC0gaX0sIChfLCBrKSA9PiBpICsgayk7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVWYWx1ZShjb21wYXJlKSB7XG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoXG4gICAgICBhLnNvdXJjZS52YWx1ZSArIGEudGFyZ2V0LnZhbHVlLFxuICAgICAgYi5zb3VyY2UudmFsdWUgKyBiLnRhcmdldC52YWx1ZVxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gY2hvcmQoZmFsc2UsIGZhbHNlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNob3JkVHJhbnNwb3NlKCkge1xuICByZXR1cm4gY2hvcmQoZmFsc2UsIHRydWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hvcmREaXJlY3RlZCgpIHtcbiAgcmV0dXJuIGNob3JkKHRydWUsIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gY2hvcmQoZGlyZWN0ZWQsIHRyYW5zcG9zZSkge1xuICB2YXIgcGFkQW5nbGUgPSAwLFxuICAgICAgc29ydEdyb3VwcyA9IG51bGwsXG4gICAgICBzb3J0U3ViZ3JvdXBzID0gbnVsbCxcbiAgICAgIHNvcnRDaG9yZHMgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGNob3JkKG1hdHJpeCkge1xuICAgIHZhciBuID0gbWF0cml4Lmxlbmd0aCxcbiAgICAgICAgZ3JvdXBTdW1zID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBncm91cEluZGV4ID0gcmFuZ2UoMCwgbiksXG4gICAgICAgIGNob3JkcyA9IG5ldyBBcnJheShuICogbiksXG4gICAgICAgIGdyb3VwcyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgayA9IDAsIGR4O1xuXG4gICAgbWF0cml4ID0gRmxvYXQ2NEFycmF5LmZyb20oe2xlbmd0aDogbiAqIG59LCB0cmFuc3Bvc2VcbiAgICAgICAgPyAoXywgaSkgPT4gbWF0cml4W2kgJSBuXVtpIC8gbiB8IDBdXG4gICAgICAgIDogKF8sIGkpID0+IG1hdHJpeFtpIC8gbiB8IDBdW2kgJSBuXSk7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBzY2FsaW5nIGZhY3RvciBmcm9tIHZhbHVlIHRvIGFuZ2xlIGluIFswLCAycGldLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBsZXQgeCA9IDA7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG47ICsraikgeCArPSBtYXRyaXhbaSAqIG4gKyBqXSArIGRpcmVjdGVkICogbWF0cml4W2ogKiBuICsgaV07XG4gICAgICBrICs9IGdyb3VwU3Vtc1tpXSA9IHg7XG4gICAgfVxuICAgIGsgPSBtYXgoMCwgdGF1IC0gcGFkQW5nbGUgKiBuKSAvIGs7XG4gICAgZHggPSBrID8gcGFkQW5nbGUgOiB0YXUgLyBuO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgYW5nbGVzIGZvciBlYWNoIGdyb3VwIGFuZCBjb25zdGl0dWVudCBjaG9yZC5cbiAgICB7XG4gICAgICBsZXQgeCA9IDA7XG4gICAgICBpZiAoc29ydEdyb3VwcykgZ3JvdXBJbmRleC5zb3J0KChhLCBiKSA9PiBzb3J0R3JvdXBzKGdyb3VwU3Vtc1thXSwgZ3JvdXBTdW1zW2JdKSk7XG4gICAgICBmb3IgKGNvbnN0IGkgb2YgZ3JvdXBJbmRleCkge1xuICAgICAgICBjb25zdCB4MCA9IHg7XG4gICAgICAgIGlmIChkaXJlY3RlZCkge1xuICAgICAgICAgIGNvbnN0IHN1Ymdyb3VwSW5kZXggPSByYW5nZSh+biArIDEsIG4pLmZpbHRlcihqID0+IGogPCAwID8gbWF0cml4W35qICogbiArIGldIDogbWF0cml4W2kgKiBuICsgal0pO1xuICAgICAgICAgIGlmIChzb3J0U3ViZ3JvdXBzKSBzdWJncm91cEluZGV4LnNvcnQoKGEsIGIpID0+IHNvcnRTdWJncm91cHMoYSA8IDAgPyAtbWF0cml4W35hICogbiArIGldIDogbWF0cml4W2kgKiBuICsgYV0sIGIgPCAwID8gLW1hdHJpeFt+YiAqIG4gKyBpXSA6IG1hdHJpeFtpICogbiArIGJdKSk7XG4gICAgICAgICAgZm9yIChjb25zdCBqIG9mIHN1Ymdyb3VwSW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChqIDwgMCkge1xuICAgICAgICAgICAgICBjb25zdCBjaG9yZCA9IGNob3Jkc1t+aiAqIG4gKyBpXSB8fCAoY2hvcmRzW35qICogbiArIGldID0ge3NvdXJjZTogbnVsbCwgdGFyZ2V0OiBudWxsfSk7XG4gICAgICAgICAgICAgIGNob3JkLnRhcmdldCA9IHtpbmRleDogaSwgc3RhcnRBbmdsZTogeCwgZW5kQW5nbGU6IHggKz0gbWF0cml4W35qICogbiArIGldICogaywgdmFsdWU6IG1hdHJpeFt+aiAqIG4gKyBpXX07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zdCBjaG9yZCA9IGNob3Jkc1tpICogbiArIGpdIHx8IChjaG9yZHNbaSAqIG4gKyBqXSA9IHtzb3VyY2U6IG51bGwsIHRhcmdldDogbnVsbH0pO1xuICAgICAgICAgICAgICBjaG9yZC5zb3VyY2UgPSB7aW5kZXg6IGksIHN0YXJ0QW5nbGU6IHgsIGVuZEFuZ2xlOiB4ICs9IG1hdHJpeFtpICogbiArIGpdICogaywgdmFsdWU6IG1hdHJpeFtpICogbiArIGpdfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZ3JvdXBzW2ldID0ge2luZGV4OiBpLCBzdGFydEFuZ2xlOiB4MCwgZW5kQW5nbGU6IHgsIHZhbHVlOiBncm91cFN1bXNbaV19O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHN1Ymdyb3VwSW5kZXggPSByYW5nZSgwLCBuKS5maWx0ZXIoaiA9PiBtYXRyaXhbaSAqIG4gKyBqXSB8fCBtYXRyaXhbaiAqIG4gKyBpXSk7XG4gICAgICAgICAgaWYgKHNvcnRTdWJncm91cHMpIHN1Ymdyb3VwSW5kZXguc29ydCgoYSwgYikgPT4gc29ydFN1Ymdyb3VwcyhtYXRyaXhbaSAqIG4gKyBhXSwgbWF0cml4W2kgKiBuICsgYl0pKTtcbiAgICAgICAgICBmb3IgKGNvbnN0IGogb2Ygc3ViZ3JvdXBJbmRleCkge1xuICAgICAgICAgICAgbGV0IGNob3JkO1xuICAgICAgICAgICAgaWYgKGkgPCBqKSB7XG4gICAgICAgICAgICAgIGNob3JkID0gY2hvcmRzW2kgKiBuICsgal0gfHwgKGNob3Jkc1tpICogbiArIGpdID0ge3NvdXJjZTogbnVsbCwgdGFyZ2V0OiBudWxsfSk7XG4gICAgICAgICAgICAgIGNob3JkLnNvdXJjZSA9IHtpbmRleDogaSwgc3RhcnRBbmdsZTogeCwgZW5kQW5nbGU6IHggKz0gbWF0cml4W2kgKiBuICsgal0gKiBrLCB2YWx1ZTogbWF0cml4W2kgKiBuICsgal19O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2hvcmQgPSBjaG9yZHNbaiAqIG4gKyBpXSB8fCAoY2hvcmRzW2ogKiBuICsgaV0gPSB7c291cmNlOiBudWxsLCB0YXJnZXQ6IG51bGx9KTtcbiAgICAgICAgICAgICAgY2hvcmQudGFyZ2V0ID0ge2luZGV4OiBpLCBzdGFydEFuZ2xlOiB4LCBlbmRBbmdsZTogeCArPSBtYXRyaXhbaSAqIG4gKyBqXSAqIGssIHZhbHVlOiBtYXRyaXhbaSAqIG4gKyBqXX07XG4gICAgICAgICAgICAgIGlmIChpID09PSBqKSBjaG9yZC5zb3VyY2UgPSBjaG9yZC50YXJnZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hvcmQuc291cmNlICYmIGNob3JkLnRhcmdldCAmJiBjaG9yZC5zb3VyY2UudmFsdWUgPCBjaG9yZC50YXJnZXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgY29uc3Qgc291cmNlID0gY2hvcmQuc291cmNlO1xuICAgICAgICAgICAgICBjaG9yZC5zb3VyY2UgPSBjaG9yZC50YXJnZXQ7XG4gICAgICAgICAgICAgIGNob3JkLnRhcmdldCA9IHNvdXJjZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZ3JvdXBzW2ldID0ge2luZGV4OiBpLCBzdGFydEFuZ2xlOiB4MCwgZW5kQW5nbGU6IHgsIHZhbHVlOiBncm91cFN1bXNbaV19O1xuICAgICAgICB9XG4gICAgICAgIHggKz0gZHg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGVtcHR5IGNob3Jkcy5cbiAgICBjaG9yZHMgPSBPYmplY3QudmFsdWVzKGNob3Jkcyk7XG4gICAgY2hvcmRzLmdyb3VwcyA9IGdyb3VwcztcbiAgICByZXR1cm4gc29ydENob3JkcyA/IGNob3Jkcy5zb3J0KHNvcnRDaG9yZHMpIDogY2hvcmRzO1xuICB9XG5cbiAgY2hvcmQucGFkQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkQW5nbGUgPSBtYXgoMCwgXyksIGNob3JkKSA6IHBhZEFuZ2xlO1xuICB9O1xuXG4gIGNob3JkLnNvcnRHcm91cHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydEdyb3VwcyA9IF8sIGNob3JkKSA6IHNvcnRHcm91cHM7XG4gIH07XG5cbiAgY2hvcmQuc29ydFN1Ymdyb3VwcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0U3ViZ3JvdXBzID0gXywgY2hvcmQpIDogc29ydFN1Ymdyb3VwcztcbiAgfTtcblxuICBjaG9yZC5zb3J0Q2hvcmRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IHNvcnRDaG9yZHMgPSBudWxsIDogKHNvcnRDaG9yZHMgPSBjb21wYXJlVmFsdWUoXykpLl8gPSBfLCBjaG9yZCkgOiBzb3J0Q2hvcmRzICYmIHNvcnRDaG9yZHMuXztcbiAgfTtcblxuICByZXR1cm4gY2hvcmQ7XG59XG4iLCJjb25zdCBwaSA9IE1hdGguUEksXG4gICAgdGF1ID0gMiAqIHBpLFxuICAgIGVwc2lsb24gPSAxZS02LFxuICAgIHRhdUVwc2lsb24gPSB0YXUgLSBlcHNpbG9uO1xuXG5mdW5jdGlvbiBhcHBlbmQoc3RyaW5ncykge1xuICB0aGlzLl8gKz0gc3RyaW5nc1swXTtcbiAgZm9yIChsZXQgaSA9IDEsIG4gPSBzdHJpbmdzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIHRoaXMuXyArPSBhcmd1bWVudHNbaV0gKyBzdHJpbmdzW2ldO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGVuZFJvdW5kKGRpZ2l0cykge1xuICBsZXQgZCA9IE1hdGguZmxvb3IoZGlnaXRzKTtcbiAgaWYgKCEoZCA+PSAwKSkgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGRpZ2l0czogJHtkaWdpdHN9YCk7XG4gIGlmIChkID4gMTUpIHJldHVybiBhcHBlbmQ7XG4gIGNvbnN0IGsgPSAxMCAqKiBkO1xuICByZXR1cm4gZnVuY3Rpb24oc3RyaW5ncykge1xuICAgIHRoaXMuXyArPSBzdHJpbmdzWzBdO1xuICAgIGZvciAobGV0IGkgPSAxLCBuID0gc3RyaW5ncy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHRoaXMuXyArPSBNYXRoLnJvdW5kKGFyZ3VtZW50c1tpXSAqIGspIC8gayArIHN0cmluZ3NbaV07XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgY2xhc3MgUGF0aCB7XG4gIGNvbnN0cnVjdG9yKGRpZ2l0cykge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feTAgPSAvLyBzdGFydCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgICB0aGlzLl94MSA9IHRoaXMuX3kxID0gbnVsbDsgLy8gZW5kIG9mIGN1cnJlbnQgc3VicGF0aFxuICAgIHRoaXMuXyA9IFwiXCI7XG4gICAgdGhpcy5fYXBwZW5kID0gZGlnaXRzID09IG51bGwgPyBhcHBlbmQgOiBhcHBlbmRSb3VuZChkaWdpdHMpO1xuICB9XG4gIG1vdmVUbyh4LCB5KSB7XG4gICAgdGhpcy5fYXBwZW5kYE0ke3RoaXMuX3gwID0gdGhpcy5feDEgPSAreH0sJHt0aGlzLl95MCA9IHRoaXMuX3kxID0gK3l9YDtcbiAgfVxuICBjbG9zZVBhdGgoKSB7XG4gICAgaWYgKHRoaXMuX3gxICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl94MSA9IHRoaXMuX3gwLCB0aGlzLl95MSA9IHRoaXMuX3kwO1xuICAgICAgdGhpcy5fYXBwZW5kYFpgO1xuICAgIH1cbiAgfVxuICBsaW5lVG8oeCwgeSkge1xuICAgIHRoaXMuX2FwcGVuZGBMJHt0aGlzLl94MSA9ICt4fSwke3RoaXMuX3kxID0gK3l9YDtcbiAgfVxuICBxdWFkcmF0aWNDdXJ2ZVRvKHgxLCB5MSwgeCwgeSkge1xuICAgIHRoaXMuX2FwcGVuZGBRJHsreDF9LCR7K3kxfSwke3RoaXMuX3gxID0gK3h9LCR7dGhpcy5feTEgPSAreX1gO1xuICB9XG4gIGJlemllckN1cnZlVG8oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHtcbiAgICB0aGlzLl9hcHBlbmRgQyR7K3gxfSwkeyt5MX0sJHsreDJ9LCR7K3kyfSwke3RoaXMuX3gxID0gK3h9LCR7dGhpcy5feTEgPSAreX1gO1xuICB9XG4gIGFyY1RvKHgxLCB5MSwgeDIsIHkyLCByKSB7XG4gICAgeDEgPSAreDEsIHkxID0gK3kxLCB4MiA9ICt4MiwgeTIgPSAreTIsIHIgPSArcjtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKGBuZWdhdGl2ZSByYWRpdXM6ICR7cn1gKTtcblxuICAgIGxldCB4MCA9IHRoaXMuX3gxLFxuICAgICAgICB5MCA9IHRoaXMuX3kxLFxuICAgICAgICB4MjEgPSB4MiAtIHgxLFxuICAgICAgICB5MjEgPSB5MiAtIHkxLFxuICAgICAgICB4MDEgPSB4MCAtIHgxLFxuICAgICAgICB5MDEgPSB5MCAtIHkxLFxuICAgICAgICBsMDFfMiA9IHgwMSAqIHgwMSArIHkwMSAqIHkwMTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDEseTEpLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fYXBwZW5kYE0ke3RoaXMuX3gxID0geDF9LCR7dGhpcy5feTEgPSB5MX1gO1xuICAgIH1cblxuICAgIC8vIE9yLCBpcyAoeDEseTEpIGNvaW5jaWRlbnQgd2l0aCAoeDAseTApPyBEbyBub3RoaW5nLlxuICAgIGVsc2UgaWYgKCEobDAxXzIgPiBlcHNpbG9uKSk7XG5cbiAgICAvLyBPciwgYXJlICh4MCx5MCksICh4MSx5MSkgYW5kICh4Mix5MikgY29sbGluZWFyP1xuICAgIC8vIEVxdWl2YWxlbnRseSwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgyLHkyKT9cbiAgICAvLyBPciwgaXMgdGhlIHJhZGl1cyB6ZXJvPyBMaW5lIHRvICh4MSx5MSkuXG4gICAgZWxzZSBpZiAoIShNYXRoLmFicyh5MDEgKiB4MjEgLSB5MjEgKiB4MDEpID4gZXBzaWxvbikgfHwgIXIpIHtcbiAgICAgIHRoaXMuX2FwcGVuZGBMJHt0aGlzLl94MSA9IHgxfSwke3RoaXMuX3kxID0geTF9YDtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIGRyYXcgYW4gYXJjIVxuICAgIGVsc2Uge1xuICAgICAgbGV0IHgyMCA9IHgyIC0geDAsXG4gICAgICAgICAgeTIwID0geTIgLSB5MCxcbiAgICAgICAgICBsMjFfMiA9IHgyMSAqIHgyMSArIHkyMSAqIHkyMSxcbiAgICAgICAgICBsMjBfMiA9IHgyMCAqIHgyMCArIHkyMCAqIHkyMCxcbiAgICAgICAgICBsMjEgPSBNYXRoLnNxcnQobDIxXzIpLFxuICAgICAgICAgIGwwMSA9IE1hdGguc3FydChsMDFfMiksXG4gICAgICAgICAgbCA9IHIgKiBNYXRoLnRhbigocGkgLSBNYXRoLmFjb3MoKGwyMV8yICsgbDAxXzIgLSBsMjBfMikgLyAoMiAqIGwyMSAqIGwwMSkpKSAvIDIpLFxuICAgICAgICAgIHQwMSA9IGwgLyBsMDEsXG4gICAgICAgICAgdDIxID0gbCAvIGwyMTtcblxuICAgICAgLy8gSWYgdGhlIHN0YXJ0IHRhbmdlbnQgaXMgbm90IGNvaW5jaWRlbnQgd2l0aCAoeDAseTApLCBsaW5lIHRvLlxuICAgICAgaWYgKE1hdGguYWJzKHQwMSAtIDEpID4gZXBzaWxvbikge1xuICAgICAgICB0aGlzLl9hcHBlbmRgTCR7eDEgKyB0MDEgKiB4MDF9LCR7eTEgKyB0MDEgKiB5MDF9YDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fYXBwZW5kYEEke3J9LCR7cn0sMCwwLCR7Kyh5MDEgKiB4MjAgPiB4MDEgKiB5MjApfSwke3RoaXMuX3gxID0geDEgKyB0MjEgKiB4MjF9LCR7dGhpcy5feTEgPSB5MSArIHQyMSAqIHkyMX1gO1xuICAgIH1cbiAgfVxuICBhcmMoeCwgeSwgciwgYTAsIGExLCBjY3cpIHtcbiAgICB4ID0gK3gsIHkgPSAreSwgciA9ICtyLCBjY3cgPSAhIWNjdztcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKGBuZWdhdGl2ZSByYWRpdXM6ICR7cn1gKTtcblxuICAgIGxldCBkeCA9IHIgKiBNYXRoLmNvcyhhMCksXG4gICAgICAgIGR5ID0gciAqIE1hdGguc2luKGEwKSxcbiAgICAgICAgeDAgPSB4ICsgZHgsXG4gICAgICAgIHkwID0geSArIGR5LFxuICAgICAgICBjdyA9IDEgXiBjY3csXG4gICAgICAgIGRhID0gY2N3ID8gYTAgLSBhMSA6IGExIC0gYTA7XG5cbiAgICAvLyBJcyB0aGlzIHBhdGggZW1wdHk/IE1vdmUgdG8gKHgwLHkwKS5cbiAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuX2FwcGVuZGBNJHt4MH0sJHt5MH1gO1xuICAgIH1cblxuICAgIC8vIE9yLCBpcyAoeDAseTApIG5vdCBjb2luY2lkZW50IHdpdGggdGhlIHByZXZpb3VzIHBvaW50PyBMaW5lIHRvICh4MCx5MCkuXG4gICAgZWxzZSBpZiAoTWF0aC5hYnModGhpcy5feDEgLSB4MCkgPiBlcHNpbG9uIHx8IE1hdGguYWJzKHRoaXMuX3kxIC0geTApID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fYXBwZW5kYEwke3gwfSwke3kwfWA7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhpcyBhcmMgZW1wdHk/IFdl4oCZcmUgZG9uZS5cbiAgICBpZiAoIXIpIHJldHVybjtcblxuICAgIC8vIERvZXMgdGhlIGFuZ2xlIGdvIHRoZSB3cm9uZyB3YXk/IEZsaXAgdGhlIGRpcmVjdGlvbi5cbiAgICBpZiAoZGEgPCAwKSBkYSA9IGRhICUgdGF1ICsgdGF1O1xuXG4gICAgLy8gSXMgdGhpcyBhIGNvbXBsZXRlIGNpcmNsZT8gRHJhdyB0d28gYXJjcyB0byBjb21wbGV0ZSB0aGUgY2lyY2xlLlxuICAgIGlmIChkYSA+IHRhdUVwc2lsb24pIHtcbiAgICAgIHRoaXMuX2FwcGVuZGBBJHtyfSwke3J9LDAsMSwke2N3fSwke3ggLSBkeH0sJHt5IC0gZHl9QSR7cn0sJHtyfSwwLDEsJHtjd30sJHt0aGlzLl94MSA9IHgwfSwke3RoaXMuX3kxID0geTB9YDtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBub24tZW1wdHk/IERyYXcgYW4gYXJjIVxuICAgIGVsc2UgaWYgKGRhID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fYXBwZW5kYEEke3J9LCR7cn0sMCwkeysoZGEgPj0gcGkpfSwke2N3fSwke3RoaXMuX3gxID0geCArIHIgKiBNYXRoLmNvcyhhMSl9LCR7dGhpcy5feTEgPSB5ICsgciAqIE1hdGguc2luKGExKX1gO1xuICAgIH1cbiAgfVxuICByZWN0KHgsIHksIHcsIGgpIHtcbiAgICB0aGlzLl9hcHBlbmRgTSR7dGhpcy5feDAgPSB0aGlzLl94MSA9ICt4fSwke3RoaXMuX3kwID0gdGhpcy5feTEgPSAreX1oJHt3ID0gK3d9diR7K2h9aCR7LXd9WmA7XG4gIH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuXztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGF0aCgpIHtcbiAgcmV0dXJuIG5ldyBQYXRoO1xufVxuXG4vLyBBbGxvdyBpbnN0YW5jZW9mIGQzLnBhdGhcbnBhdGgucHJvdG90eXBlID0gUGF0aC5wcm90b3R5cGU7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXRoUm91bmQoZGlnaXRzID0gMykge1xuICByZXR1cm4gbmV3IFBhdGgoK2RpZ2l0cyk7XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQge2FicywgY29zLCBlcHNpbG9uLCBoYWxmUGksIHNpbn0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBkZWZhdWx0U291cmNlKGQpIHtcbiAgcmV0dXJuIGQuc291cmNlO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VGFyZ2V0KGQpIHtcbiAgcmV0dXJuIGQudGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0UmFkaXVzKGQpIHtcbiAgcmV0dXJuIGQucmFkaXVzO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0U3RhcnRBbmdsZShkKSB7XG4gIHJldHVybiBkLnN0YXJ0QW5nbGU7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRFbmRBbmdsZShkKSB7XG4gIHJldHVybiBkLmVuZEFuZ2xlO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0UGFkQW5nbGUoKSB7XG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0QXJyb3doZWFkUmFkaXVzKCkge1xuICByZXR1cm4gMTA7XG59XG5cbmZ1bmN0aW9uIHJpYmJvbihoZWFkUmFkaXVzKSB7XG4gIHZhciBzb3VyY2UgPSBkZWZhdWx0U291cmNlLFxuICAgICAgdGFyZ2V0ID0gZGVmYXVsdFRhcmdldCxcbiAgICAgIHNvdXJjZVJhZGl1cyA9IGRlZmF1bHRSYWRpdXMsXG4gICAgICB0YXJnZXRSYWRpdXMgPSBkZWZhdWx0UmFkaXVzLFxuICAgICAgc3RhcnRBbmdsZSA9IGRlZmF1bHRTdGFydEFuZ2xlLFxuICAgICAgZW5kQW5nbGUgPSBkZWZhdWx0RW5kQW5nbGUsXG4gICAgICBwYWRBbmdsZSA9IGRlZmF1bHRQYWRBbmdsZSxcbiAgICAgIGNvbnRleHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHJpYmJvbigpIHtcbiAgICB2YXIgYnVmZmVyLFxuICAgICAgICBzID0gc291cmNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHQgPSB0YXJnZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgYXAgPSBwYWRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC8gMixcbiAgICAgICAgYXJndiA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKSxcbiAgICAgICAgc3IgPSArc291cmNlUmFkaXVzLmFwcGx5KHRoaXMsIChhcmd2WzBdID0gcywgYXJndikpLFxuICAgICAgICBzYTAgPSBzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3YpIC0gaGFsZlBpLFxuICAgICAgICBzYTEgPSBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd2KSAtIGhhbGZQaSxcbiAgICAgICAgdHIgPSArdGFyZ2V0UmFkaXVzLmFwcGx5KHRoaXMsIChhcmd2WzBdID0gdCwgYXJndikpLFxuICAgICAgICB0YTAgPSBzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3YpIC0gaGFsZlBpLFxuICAgICAgICB0YTEgPSBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd2KSAtIGhhbGZQaTtcblxuICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcblxuICAgIGlmIChhcCA+IGVwc2lsb24pIHtcbiAgICAgIGlmIChhYnMoc2ExIC0gc2EwKSA+IGFwICogMiArIGVwc2lsb24pIHNhMSA+IHNhMCA/IChzYTAgKz0gYXAsIHNhMSAtPSBhcCkgOiAoc2EwIC09IGFwLCBzYTEgKz0gYXApO1xuICAgICAgZWxzZSBzYTAgPSBzYTEgPSAoc2EwICsgc2ExKSAvIDI7XG4gICAgICBpZiAoYWJzKHRhMSAtIHRhMCkgPiBhcCAqIDIgKyBlcHNpbG9uKSB0YTEgPiB0YTAgPyAodGEwICs9IGFwLCB0YTEgLT0gYXApIDogKHRhMCAtPSBhcCwgdGExICs9IGFwKTtcbiAgICAgIGVsc2UgdGEwID0gdGExID0gKHRhMCArIHRhMSkgLyAyO1xuICAgIH1cblxuICAgIGNvbnRleHQubW92ZVRvKHNyICogY29zKHNhMCksIHNyICogc2luKHNhMCkpO1xuICAgIGNvbnRleHQuYXJjKDAsIDAsIHNyLCBzYTAsIHNhMSk7XG4gICAgaWYgKHNhMCAhPT0gdGEwIHx8IHNhMSAhPT0gdGExKSB7XG4gICAgICBpZiAoaGVhZFJhZGl1cykge1xuICAgICAgICB2YXIgaHIgPSAraGVhZFJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0cjIgPSB0ciAtIGhyLCB0YTIgPSAodGEwICsgdGExKSAvIDI7XG4gICAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbygwLCAwLCB0cjIgKiBjb3ModGEwKSwgdHIyICogc2luKHRhMCkpO1xuICAgICAgICBjb250ZXh0LmxpbmVUbyh0ciAqIGNvcyh0YTIpLCB0ciAqIHNpbih0YTIpKTtcbiAgICAgICAgY29udGV4dC5saW5lVG8odHIyICogY29zKHRhMSksIHRyMiAqIHNpbih0YTEpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbygwLCAwLCB0ciAqIGNvcyh0YTApLCB0ciAqIHNpbih0YTApKTtcbiAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgdHIsIHRhMCwgdGExKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKDAsIDAsIHNyICogY29zKHNhMCksIHNyICogc2luKHNhMCkpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG5cbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gY29udGV4dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGlmIChoZWFkUmFkaXVzKSByaWJib24uaGVhZFJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChoZWFkUmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHJpYmJvbikgOiBoZWFkUmFkaXVzO1xuICB9O1xuXG4gIHJpYmJvbi5yYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc291cmNlUmFkaXVzID0gdGFyZ2V0UmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHJpYmJvbikgOiBzb3VyY2VSYWRpdXM7XG4gIH07XG5cbiAgcmliYm9uLnNvdXJjZVJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3VyY2VSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcmliYm9uKSA6IHNvdXJjZVJhZGl1cztcbiAgfTtcblxuICByaWJib24udGFyZ2V0UmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRhcmdldFJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCByaWJib24pIDogdGFyZ2V0UmFkaXVzO1xuICB9O1xuXG4gIHJpYmJvbi5zdGFydEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0YXJ0QW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcmliYm9uKSA6IHN0YXJ0QW5nbGU7XG4gIH07XG5cbiAgcmliYm9uLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGVuZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHJpYmJvbikgOiBlbmRBbmdsZTtcbiAgfTtcblxuICByaWJib24ucGFkQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcmliYm9uKSA6IHBhZEFuZ2xlO1xuICB9O1xuXG4gIHJpYmJvbi5zb3VyY2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc291cmNlID0gXywgcmliYm9uKSA6IHNvdXJjZTtcbiAgfTtcblxuICByaWJib24udGFyZ2V0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRhcmdldCA9IF8sIHJpYmJvbikgOiB0YXJnZXQ7XG4gIH07XG5cbiAgcmliYm9uLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoKGNvbnRleHQgPSBfID09IG51bGwgPyBudWxsIDogXyksIHJpYmJvbikgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiByaWJib247XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcmliYm9uKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByaWJib25BcnJvdygpIHtcbiAgcmV0dXJuIHJpYmJvbihkZWZhdWx0QXJyb3doZWFkUmFkaXVzKTtcbn1cbiIsImV4cG9ydCBjb25zdCByYWRpYW5zID0gTWF0aC5QSSAvIDE4MDtcbmV4cG9ydCBjb25zdCBkZWdyZWVzID0gMTgwIC8gTWF0aC5QSTtcbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZS5qc1wiO1xuaW1wb3J0IHtDb2xvciwgcmdiQ29udmVydCwgUmdifSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuaW1wb3J0IHtkZWdyZWVzLCByYWRpYW5zfSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbi8vIGh0dHBzOi8vb2JzZXJ2YWJsZWhxLmNvbS9AbWJvc3RvY2svbGFiLWFuZC1yZ2JcbmNvbnN0IEsgPSAxOCxcbiAgICBYbiA9IDAuOTY0MjIsXG4gICAgWW4gPSAxLFxuICAgIFpuID0gMC44MjUyMSxcbiAgICB0MCA9IDQgLyAyOSxcbiAgICB0MSA9IDYgLyAyOSxcbiAgICB0MiA9IDMgKiB0MSAqIHQxLFxuICAgIHQzID0gdDEgKiB0MSAqIHQxO1xuXG5mdW5jdGlvbiBsYWJDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBMYWIpIHJldHVybiBuZXcgTGFiKG8ubCwgby5hLCBvLmIsIG8ub3BhY2l0eSk7XG4gIGlmIChvIGluc3RhbmNlb2YgSGNsKSByZXR1cm4gaGNsMmxhYihvKTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIFJnYikpIG8gPSByZ2JDb252ZXJ0KG8pO1xuICB2YXIgciA9IHJnYjJscmdiKG8uciksXG4gICAgICBnID0gcmdiMmxyZ2Ioby5nKSxcbiAgICAgIGIgPSByZ2IybHJnYihvLmIpLFxuICAgICAgeSA9IHh5ejJsYWIoKDAuMjIyNTA0NSAqIHIgKyAwLjcxNjg3ODYgKiBnICsgMC4wNjA2MTY5ICogYikgLyBZbiksIHgsIHo7XG4gIGlmIChyID09PSBnICYmIGcgPT09IGIpIHggPSB6ID0geTsgZWxzZSB7XG4gICAgeCA9IHh5ejJsYWIoKDAuNDM2MDc0NyAqIHIgKyAwLjM4NTA2NDkgKiBnICsgMC4xNDMwODA0ICogYikgLyBYbik7XG4gICAgeiA9IHh5ejJsYWIoKDAuMDEzOTMyMiAqIHIgKyAwLjA5NzEwNDUgKiBnICsgMC43MTQxNzMzICogYikgLyBabik7XG4gIH1cbiAgcmV0dXJuIG5ldyBMYWIoMTE2ICogeSAtIDE2LCA1MDAgKiAoeCAtIHkpLCAyMDAgKiAoeSAtIHopLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3JheShsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBuZXcgTGFiKGwsIDAsIDAsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBsYWJDb252ZXJ0KGwpIDogbmV3IExhYihsLCBhLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBMYWIobCwgYSwgYiwgb3BhY2l0eSkge1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5hID0gK2E7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKExhYiwgbGFiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXIoaykge1xuICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCArIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyKGspIHtcbiAgICByZXR1cm4gbmV3IExhYih0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYigpIHtcbiAgICB2YXIgeSA9ICh0aGlzLmwgKyAxNikgLyAxMTYsXG4gICAgICAgIHggPSBpc05hTih0aGlzLmEpID8geSA6IHkgKyB0aGlzLmEgLyA1MDAsXG4gICAgICAgIHogPSBpc05hTih0aGlzLmIpID8geSA6IHkgLSB0aGlzLmIgLyAyMDA7XG4gICAgeCA9IFhuICogbGFiMnh5eih4KTtcbiAgICB5ID0gWW4gKiBsYWIyeHl6KHkpO1xuICAgIHogPSBabiAqIGxhYjJ4eXooeik7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICBscmdiMnJnYiggMy4xMzM4NTYxICogeCAtIDEuNjE2ODY2NyAqIHkgLSAwLjQ5MDYxNDYgKiB6KSxcbiAgICAgIGxyZ2IycmdiKC0wLjk3ODc2ODQgKiB4ICsgMS45MTYxNDE1ICogeSArIDAuMDMzNDU0MCAqIHopLFxuICAgICAgbHJnYjJyZ2IoIDAuMDcxOTQ1MyAqIHggLSAwLjIyODk5MTQgKiB5ICsgMS40MDUyNDI3ICogeiksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9XG59KSk7XG5cbmZ1bmN0aW9uIHh5ejJsYWIodCkge1xuICByZXR1cm4gdCA+IHQzID8gTWF0aC5wb3codCwgMSAvIDMpIDogdCAvIHQyICsgdDA7XG59XG5cbmZ1bmN0aW9uIGxhYjJ4eXoodCkge1xuICByZXR1cm4gdCA+IHQxID8gdCAqIHQgKiB0IDogdDIgKiAodCAtIHQwKTtcbn1cblxuZnVuY3Rpb24gbHJnYjJyZ2IoeCkge1xuICByZXR1cm4gMjU1ICogKHggPD0gMC4wMDMxMzA4ID8gMTIuOTIgKiB4IDogMS4wNTUgKiBNYXRoLnBvdyh4LCAxIC8gMi40KSAtIDAuMDU1KTtcbn1cblxuZnVuY3Rpb24gcmdiMmxyZ2IoeCkge1xuICByZXR1cm4gKHggLz0gMjU1KSA8PSAwLjA0MDQ1ID8geCAvIDEyLjkyIDogTWF0aC5wb3coKHggKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbn1cblxuZnVuY3Rpb24gaGNsQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgSGNsKSByZXR1cm4gbmV3IEhjbChvLmgsIG8uYywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgTGFiKSkgbyA9IGxhYkNvbnZlcnQobyk7XG4gIGlmIChvLmEgPT09IDAgJiYgby5iID09PSAwKSByZXR1cm4gbmV3IEhjbChOYU4sIDAgPCBvLmwgJiYgby5sIDwgMTAwID8gMCA6IE5hTiwgby5sLCBvLm9wYWNpdHkpO1xuICB2YXIgaCA9IE1hdGguYXRhbjIoby5iLCBvLmEpICogZGVncmVlcztcbiAgcmV0dXJuIG5ldyBIY2woaCA8IDAgPyBoICsgMzYwIDogaCwgTWF0aC5zcXJ0KG8uYSAqIG8uYSArIG8uYiAqIG8uYiksIG8ubCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxjaChsLCBjLCBoLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaGNsQ29udmVydChsKSA6IG5ldyBIY2woaCwgYywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGgpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIY2woaCwgYywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5jID0gK2M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZnVuY3Rpb24gaGNsMmxhYihvKSB7XG4gIGlmIChpc05hTihvLmgpKSByZXR1cm4gbmV3IExhYihvLmwsIDAsIDAsIG8ub3BhY2l0eSk7XG4gIHZhciBoID0gby5oICogcmFkaWFucztcbiAgcmV0dXJuIG5ldyBMYWIoby5sLCBNYXRoLmNvcyhoKSAqIG8uYywgTWF0aC5zaW4oaCkgKiBvLmMsIG8ub3BhY2l0eSk7XG59XG5cbmRlZmluZShIY2wsIGhjbCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyKGspIHtcbiAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcihrKSB7XG4gICAgcmV0dXJuIG5ldyBIY2wodGhpcy5oLCB0aGlzLmMsIHRoaXMubCAtIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2IoKSB7XG4gICAgcmV0dXJuIGhjbDJsYWIodGhpcykucmdiKCk7XG4gIH1cbn0pKTtcbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZS5qc1wiO1xuaW1wb3J0IHtDb2xvciwgcmdiQ29udmVydCwgUmdiLCBkYXJrZXIsIGJyaWdodGVyfSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuaW1wb3J0IHtkZWdyZWVzLCByYWRpYW5zfSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbnZhciBBID0gLTAuMTQ4NjEsXG4gICAgQiA9ICsxLjc4Mjc3LFxuICAgIEMgPSAtMC4yOTIyNyxcbiAgICBEID0gLTAuOTA2NDksXG4gICAgRSA9ICsxLjk3Mjk0LFxuICAgIEVEID0gRSAqIEQsXG4gICAgRUIgPSBFICogQixcbiAgICBCQ19EQSA9IEIgKiBDIC0gRCAqIEE7XG5cbmZ1bmN0aW9uIGN1YmVoZWxpeENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEN1YmVoZWxpeCkgcmV0dXJuIG5ldyBDdWJlaGVsaXgoby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIFJnYikpIG8gPSByZ2JDb252ZXJ0KG8pO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbCA9IChCQ19EQSAqIGIgKyBFRCAqIHIgLSBFQiAqIGcpIC8gKEJDX0RBICsgRUQgLSBFQiksXG4gICAgICBibCA9IGIgLSBsLFxuICAgICAgayA9IChFICogKGcgLSBsKSAtIEMgKiBibCkgLyBELFxuICAgICAgcyA9IE1hdGguc3FydChrICogayArIGJsICogYmwpIC8gKEUgKiBsICogKDEgLSBsKSksIC8vIE5hTiBpZiBsPTAgb3IgbD0xXG4gICAgICBoID0gcyA/IE1hdGguYXRhbjIoaywgYmwpICogZGVncmVlcyAtIDEyMCA6IE5hTjtcbiAgcmV0dXJuIG5ldyBDdWJlaGVsaXgoaCA8IDAgPyBoICsgMzYwIDogaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjdWJlaGVsaXhDb252ZXJ0KGgpIDogbmV3IEN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEN1YmVoZWxpeCwgY3ViZWhlbGl4LCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXIoaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiKCkge1xuICAgIHZhciBoID0gaXNOYU4odGhpcy5oKSA/IDAgOiAodGhpcy5oICsgMTIwKSAqIHJhZGlhbnMsXG4gICAgICAgIGwgPSArdGhpcy5sLFxuICAgICAgICBhID0gaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMgKiBsICogKDEgLSBsKSxcbiAgICAgICAgY29zaCA9IE1hdGguY29zKGgpLFxuICAgICAgICBzaW5oID0gTWF0aC5zaW4oaCk7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICAyNTUgKiAobCArIGEgKiAoQSAqIGNvc2ggKyBCICogc2luaCkpLFxuICAgICAgMjU1ICogKGwgKyBhICogKEMgKiBjb3NoICsgRCAqIHNpbmgpKSxcbiAgICAgIDI1NSAqIChsICsgYSAqIChFICogY29zaCkpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuIiwidmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG5leHBvcnQgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhIC0gYjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IHggPT4gKCkgPT4geDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJpbmcsIGhvbGUpIHtcbiAgdmFyIGkgPSAtMSwgbiA9IGhvbGUubGVuZ3RoLCBjO1xuICB3aGlsZSAoKytpIDwgbikgaWYgKGMgPSByaW5nQ29udGFpbnMocmluZywgaG9sZVtpXSkpIHJldHVybiBjO1xuICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gcmluZ0NvbnRhaW5zKHJpbmcsIHBvaW50KSB7XG4gIHZhciB4ID0gcG9pbnRbMF0sIHkgPSBwb2ludFsxXSwgY29udGFpbnMgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSByaW5nLmxlbmd0aCwgaiA9IG4gLSAxOyBpIDwgbjsgaiA9IGkrKykge1xuICAgIHZhciBwaSA9IHJpbmdbaV0sIHhpID0gcGlbMF0sIHlpID0gcGlbMV0sIHBqID0gcmluZ1tqXSwgeGogPSBwalswXSwgeWogPSBwalsxXTtcbiAgICBpZiAoc2VnbWVudENvbnRhaW5zKHBpLCBwaiwgcG9pbnQpKSByZXR1cm4gMDtcbiAgICBpZiAoKCh5aSA+IHkpICE9PSAoeWogPiB5KSkgJiYgKCh4IDwgKHhqIC0geGkpICogKHkgLSB5aSkgLyAoeWogLSB5aSkgKyB4aSkpKSBjb250YWlucyA9IC1jb250YWlucztcbiAgfVxuICByZXR1cm4gY29udGFpbnM7XG59XG5cbmZ1bmN0aW9uIHNlZ21lbnRDb250YWlucyhhLCBiLCBjKSB7XG4gIHZhciBpOyByZXR1cm4gY29sbGluZWFyKGEsIGIsIGMpICYmIHdpdGhpbihhW2kgPSArKGFbMF0gPT09IGJbMF0pXSwgY1tpXSwgYltpXSk7XG59XG5cbmZ1bmN0aW9uIGNvbGxpbmVhcihhLCBiLCBjKSB7XG4gIHJldHVybiAoYlswXSAtIGFbMF0pICogKGNbMV0gLSBhWzFdKSA9PT0gKGNbMF0gLSBhWzBdKSAqIChiWzFdIC0gYVsxXSk7XG59XG5cbmZ1bmN0aW9uIHdpdGhpbihwLCBxLCByKSB7XG4gIHJldHVybiBwIDw9IHEgJiYgcSA8PSByIHx8IHIgPD0gcSAmJiBxIDw9IHA7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHt9XG4iLCJpbXBvcnQge2V4dGVudCwgbmljZSwgdGhyZXNob2xkU3R1cmdlcywgdGlja3N9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXkuanNcIjtcbmltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nLmpzXCI7XG5pbXBvcnQgYXJlYSBmcm9tIFwiLi9hcmVhLmpzXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBjb250YWlucyBmcm9tIFwiLi9jb250YWlucy5qc1wiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4vbm9vcC5qc1wiO1xuXG52YXIgY2FzZXMgPSBbXG4gIFtdLFxuICBbW1sxLjAsIDEuNV0sIFswLjUsIDEuMF1dXSxcbiAgW1tbMS41LCAxLjBdLCBbMS4wLCAxLjVdXV0sXG4gIFtbWzEuNSwgMS4wXSwgWzAuNSwgMS4wXV1dLFxuICBbW1sxLjAsIDAuNV0sIFsxLjUsIDEuMF1dXSxcbiAgW1tbMS4wLCAxLjVdLCBbMC41LCAxLjBdXSwgW1sxLjAsIDAuNV0sIFsxLjUsIDEuMF1dXSxcbiAgW1tbMS4wLCAwLjVdLCBbMS4wLCAxLjVdXV0sXG4gIFtbWzEuMCwgMC41XSwgWzAuNSwgMS4wXV1dLFxuICBbW1swLjUsIDEuMF0sIFsxLjAsIDAuNV1dXSxcbiAgW1tbMS4wLCAxLjVdLCBbMS4wLCAwLjVdXV0sXG4gIFtbWzAuNSwgMS4wXSwgWzEuMCwgMC41XV0sIFtbMS41LCAxLjBdLCBbMS4wLCAxLjVdXV0sXG4gIFtbWzEuNSwgMS4wXSwgWzEuMCwgMC41XV1dLFxuICBbW1swLjUsIDEuMF0sIFsxLjUsIDEuMF1dXSxcbiAgW1tbMS4wLCAxLjVdLCBbMS41LCAxLjBdXV0sXG4gIFtbWzAuNSwgMS4wXSwgWzEuMCwgMS41XV1dLFxuICBbXVxuXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBkeCA9IDEsXG4gICAgICBkeSA9IDEsXG4gICAgICB0aHJlc2hvbGQgPSB0aHJlc2hvbGRTdHVyZ2VzLFxuICAgICAgc21vb3RoID0gc21vb3RoTGluZWFyO1xuXG4gIGZ1bmN0aW9uIGNvbnRvdXJzKHZhbHVlcykge1xuICAgIHZhciB0eiA9IHRocmVzaG9sZCh2YWx1ZXMpO1xuXG4gICAgLy8gQ29udmVydCBudW1iZXIgb2YgdGhyZXNob2xkcyBpbnRvIHVuaWZvcm0gdGhyZXNob2xkcy5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHopKSB7XG4gICAgICBjb25zdCBlID0gZXh0ZW50KHZhbHVlcywgZmluaXRlKTtcbiAgICAgIHR6ID0gdGlja3MoLi4ubmljZShlWzBdLCBlWzFdLCB0eiksIHR6KTtcbiAgICAgIHdoaWxlICh0elt0ei5sZW5ndGggLSAxXSA+PSBlWzFdKSB0ei5wb3AoKTtcbiAgICAgIHdoaWxlICh0elsxXSA8IGVbMF0pIHR6LnNoaWZ0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR6ID0gdHouc2xpY2UoKS5zb3J0KGFzY2VuZGluZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHR6Lm1hcCh2YWx1ZSA9PiBjb250b3VyKHZhbHVlcywgdmFsdWUpKTtcbiAgfVxuXG4gIC8vIEFjY3VtdWxhdGUsIHNtb290aCBjb250b3VyIHJpbmdzLCBhc3NpZ24gaG9sZXMgdG8gZXh0ZXJpb3IgcmluZ3MuXG4gIC8vIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9tYm9zdG9jay9zaGFwZWZpbGUvYmxvYi92MC42LjIvc2hwL3BvbHlnb24uanNcbiAgZnVuY3Rpb24gY29udG91cih2YWx1ZXMsIHZhbHVlKSB7XG4gICAgY29uc3QgdiA9IHZhbHVlID09IG51bGwgPyBOYU4gOiArdmFsdWU7XG4gICAgaWYgKGlzTmFOKHYpKSB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgdmFsdWU6ICR7dmFsdWV9YCk7XG5cbiAgICB2YXIgcG9seWdvbnMgPSBbXSxcbiAgICAgICAgaG9sZXMgPSBbXTtcblxuICAgIGlzb3JpbmdzKHZhbHVlcywgdiwgZnVuY3Rpb24ocmluZykge1xuICAgICAgc21vb3RoKHJpbmcsIHZhbHVlcywgdik7XG4gICAgICBpZiAoYXJlYShyaW5nKSA+IDApIHBvbHlnb25zLnB1c2goW3JpbmddKTtcbiAgICAgIGVsc2UgaG9sZXMucHVzaChyaW5nKTtcbiAgICB9KTtcblxuICAgIGhvbGVzLmZvckVhY2goZnVuY3Rpb24oaG9sZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29ucy5sZW5ndGgsIHBvbHlnb247IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKGNvbnRhaW5zKChwb2x5Z29uID0gcG9seWdvbnNbaV0pWzBdLCBob2xlKSAhPT0gLTEpIHtcbiAgICAgICAgICBwb2x5Z29uLnB1c2goaG9sZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJNdWx0aVBvbHlnb25cIixcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGNvb3JkaW5hdGVzOiBwb2x5Z29uc1xuICAgIH07XG4gIH1cblxuICAvLyBNYXJjaGluZyBzcXVhcmVzIHdpdGggaXNvbGluZXMgc3RpdGNoZWQgaW50byByaW5ncy5cbiAgLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL3RvcG9qc29uL3RvcG9qc29uLWNsaWVudC9ibG9iL3YzLjAuMC9zcmMvc3RpdGNoLmpzXG4gIGZ1bmN0aW9uIGlzb3JpbmdzKHZhbHVlcywgdmFsdWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGZyYWdtZW50QnlTdGFydCA9IG5ldyBBcnJheSxcbiAgICAgICAgZnJhZ21lbnRCeUVuZCA9IG5ldyBBcnJheSxcbiAgICAgICAgeCwgeSwgdDAsIHQxLCB0MiwgdDM7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIHRoZSBmaXJzdCByb3cgKHkgPSAtMSwgdDIgPSB0MyA9IDApLlxuICAgIHggPSB5ID0gLTE7XG4gICAgdDEgPSBhYm92ZSh2YWx1ZXNbMF0sIHZhbHVlKTtcbiAgICBjYXNlc1t0MSA8PCAxXS5mb3JFYWNoKHN0aXRjaCk7XG4gICAgd2hpbGUgKCsreCA8IGR4IC0gMSkge1xuICAgICAgdDAgPSB0MSwgdDEgPSBhYm92ZSh2YWx1ZXNbeCArIDFdLCB2YWx1ZSk7XG4gICAgICBjYXNlc1t0MCB8IHQxIDw8IDFdLmZvckVhY2goc3RpdGNoKTtcbiAgICB9XG4gICAgY2FzZXNbdDEgPDwgMF0uZm9yRWFjaChzdGl0Y2gpO1xuXG4gICAgLy8gR2VuZXJhbCBjYXNlIGZvciB0aGUgaW50ZXJtZWRpYXRlIHJvd3MuXG4gICAgd2hpbGUgKCsreSA8IGR5IC0gMSkge1xuICAgICAgeCA9IC0xO1xuICAgICAgdDEgPSBhYm92ZSh2YWx1ZXNbeSAqIGR4ICsgZHhdLCB2YWx1ZSk7XG4gICAgICB0MiA9IGFib3ZlKHZhbHVlc1t5ICogZHhdLCB2YWx1ZSk7XG4gICAgICBjYXNlc1t0MSA8PCAxIHwgdDIgPDwgMl0uZm9yRWFjaChzdGl0Y2gpO1xuICAgICAgd2hpbGUgKCsreCA8IGR4IC0gMSkge1xuICAgICAgICB0MCA9IHQxLCB0MSA9IGFib3ZlKHZhbHVlc1t5ICogZHggKyBkeCArIHggKyAxXSwgdmFsdWUpO1xuICAgICAgICB0MyA9IHQyLCB0MiA9IGFib3ZlKHZhbHVlc1t5ICogZHggKyB4ICsgMV0sIHZhbHVlKTtcbiAgICAgICAgY2FzZXNbdDAgfCB0MSA8PCAxIHwgdDIgPDwgMiB8IHQzIDw8IDNdLmZvckVhY2goc3RpdGNoKTtcbiAgICAgIH1cbiAgICAgIGNhc2VzW3QxIHwgdDIgPDwgM10uZm9yRWFjaChzdGl0Y2gpO1xuICAgIH1cblxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgdGhlIGxhc3Qgcm93ICh5ID0gZHkgLSAxLCB0MCA9IHQxID0gMCkuXG4gICAgeCA9IC0xO1xuICAgIHQyID0gdmFsdWVzW3kgKiBkeF0gPj0gdmFsdWU7XG4gICAgY2FzZXNbdDIgPDwgMl0uZm9yRWFjaChzdGl0Y2gpO1xuICAgIHdoaWxlICgrK3ggPCBkeCAtIDEpIHtcbiAgICAgIHQzID0gdDIsIHQyID0gYWJvdmUodmFsdWVzW3kgKiBkeCArIHggKyAxXSwgdmFsdWUpO1xuICAgICAgY2FzZXNbdDIgPDwgMiB8IHQzIDw8IDNdLmZvckVhY2goc3RpdGNoKTtcbiAgICB9XG4gICAgY2FzZXNbdDIgPDwgM10uZm9yRWFjaChzdGl0Y2gpO1xuXG4gICAgZnVuY3Rpb24gc3RpdGNoKGxpbmUpIHtcbiAgICAgIHZhciBzdGFydCA9IFtsaW5lWzBdWzBdICsgeCwgbGluZVswXVsxXSArIHldLFxuICAgICAgICAgIGVuZCA9IFtsaW5lWzFdWzBdICsgeCwgbGluZVsxXVsxXSArIHldLFxuICAgICAgICAgIHN0YXJ0SW5kZXggPSBpbmRleChzdGFydCksXG4gICAgICAgICAgZW5kSW5kZXggPSBpbmRleChlbmQpLFxuICAgICAgICAgIGYsIGc7XG4gICAgICBpZiAoZiA9IGZyYWdtZW50QnlFbmRbc3RhcnRJbmRleF0pIHtcbiAgICAgICAgaWYgKGcgPSBmcmFnbWVudEJ5U3RhcnRbZW5kSW5kZXhdKSB7XG4gICAgICAgICAgZGVsZXRlIGZyYWdtZW50QnlFbmRbZi5lbmRdO1xuICAgICAgICAgIGRlbGV0ZSBmcmFnbWVudEJ5U3RhcnRbZy5zdGFydF07XG4gICAgICAgICAgaWYgKGYgPT09IGcpIHtcbiAgICAgICAgICAgIGYucmluZy5wdXNoKGVuZCk7XG4gICAgICAgICAgICBjYWxsYmFjayhmLnJpbmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmcmFnbWVudEJ5U3RhcnRbZi5zdGFydF0gPSBmcmFnbWVudEJ5RW5kW2cuZW5kXSA9IHtzdGFydDogZi5zdGFydCwgZW5kOiBnLmVuZCwgcmluZzogZi5yaW5nLmNvbmNhdChnLnJpbmcpfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGZyYWdtZW50QnlFbmRbZi5lbmRdO1xuICAgICAgICAgIGYucmluZy5wdXNoKGVuZCk7XG4gICAgICAgICAgZnJhZ21lbnRCeUVuZFtmLmVuZCA9IGVuZEluZGV4XSA9IGY7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZiA9IGZyYWdtZW50QnlTdGFydFtlbmRJbmRleF0pIHtcbiAgICAgICAgaWYgKGcgPSBmcmFnbWVudEJ5RW5kW3N0YXJ0SW5kZXhdKSB7XG4gICAgICAgICAgZGVsZXRlIGZyYWdtZW50QnlTdGFydFtmLnN0YXJ0XTtcbiAgICAgICAgICBkZWxldGUgZnJhZ21lbnRCeUVuZFtnLmVuZF07XG4gICAgICAgICAgaWYgKGYgPT09IGcpIHtcbiAgICAgICAgICAgIGYucmluZy5wdXNoKGVuZCk7XG4gICAgICAgICAgICBjYWxsYmFjayhmLnJpbmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmcmFnbWVudEJ5U3RhcnRbZy5zdGFydF0gPSBmcmFnbWVudEJ5RW5kW2YuZW5kXSA9IHtzdGFydDogZy5zdGFydCwgZW5kOiBmLmVuZCwgcmluZzogZy5yaW5nLmNvbmNhdChmLnJpbmcpfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGZyYWdtZW50QnlTdGFydFtmLnN0YXJ0XTtcbiAgICAgICAgICBmLnJpbmcudW5zaGlmdChzdGFydCk7XG4gICAgICAgICAgZnJhZ21lbnRCeVN0YXJ0W2Yuc3RhcnQgPSBzdGFydEluZGV4XSA9IGY7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZyYWdtZW50QnlTdGFydFtzdGFydEluZGV4XSA9IGZyYWdtZW50QnlFbmRbZW5kSW5kZXhdID0ge3N0YXJ0OiBzdGFydEluZGV4LCBlbmQ6IGVuZEluZGV4LCByaW5nOiBbc3RhcnQsIGVuZF19O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluZGV4KHBvaW50KSB7XG4gICAgcmV0dXJuIHBvaW50WzBdICogMiArIHBvaW50WzFdICogKGR4ICsgMSkgKiA0O1xuICB9XG5cbiAgZnVuY3Rpb24gc21vb3RoTGluZWFyKHJpbmcsIHZhbHVlcywgdmFsdWUpIHtcbiAgICByaW5nLmZvckVhY2goZnVuY3Rpb24ocG9pbnQpIHtcbiAgICAgIHZhciB4ID0gcG9pbnRbMF0sXG4gICAgICAgICAgeSA9IHBvaW50WzFdLFxuICAgICAgICAgIHh0ID0geCB8IDAsXG4gICAgICAgICAgeXQgPSB5IHwgMCxcbiAgICAgICAgICB2MSA9IHZhbGlkKHZhbHVlc1t5dCAqIGR4ICsgeHRdKTtcbiAgICAgIGlmICh4ID4gMCAmJiB4IDwgZHggJiYgeHQgPT09IHgpIHtcbiAgICAgICAgcG9pbnRbMF0gPSBzbW9vdGgxKHgsIHZhbGlkKHZhbHVlc1t5dCAqIGR4ICsgeHQgLSAxXSksIHYxLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoeSA+IDAgJiYgeSA8IGR5ICYmIHl0ID09PSB5KSB7XG4gICAgICAgIHBvaW50WzFdID0gc21vb3RoMSh5LCB2YWxpZCh2YWx1ZXNbKHl0IC0gMSkgKiBkeCArIHh0XSksIHYxLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjb250b3Vycy5jb250b3VyID0gY29udG91cjtcblxuICBjb250b3Vycy5zaXplID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtkeCwgZHldO1xuICAgIHZhciBfMCA9IE1hdGguZmxvb3IoX1swXSksIF8xID0gTWF0aC5mbG9vcihfWzFdKTtcbiAgICBpZiAoIShfMCA+PSAwICYmIF8xID49IDApKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHNpemVcIik7XG4gICAgcmV0dXJuIGR4ID0gXzAsIGR5ID0gXzEsIGNvbnRvdXJzO1xuICB9O1xuXG4gIGNvbnRvdXJzLnRocmVzaG9sZHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhyZXNob2xkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBBcnJheS5pc0FycmF5KF8pID8gY29uc3RhbnQoc2xpY2UuY2FsbChfKSkgOiBjb25zdGFudChfKSwgY29udG91cnMpIDogdGhyZXNob2xkO1xuICB9O1xuXG4gIGNvbnRvdXJzLnNtb290aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzbW9vdGggPSBfID8gc21vb3RoTGluZWFyIDogbm9vcCwgY29udG91cnMpIDogc21vb3RoID09PSBzbW9vdGhMaW5lYXI7XG4gIH07XG5cbiAgcmV0dXJuIGNvbnRvdXJzO1xufVxuXG4vLyBXaGVuIGNvbXB1dGluZyB0aGUgZXh0ZW50LCBpZ25vcmUgaW5maW5pdGUgdmFsdWVzIChhcyB3ZWxsIGFzIGludmFsaWQgb25lcykuXG5mdW5jdGlvbiBmaW5pdGUoeCkge1xuICByZXR1cm4gaXNGaW5pdGUoeCkgPyB4IDogTmFOO1xufVxuXG4vLyBJcyB0aGUgKHBvc3NpYmx5IGludmFsaWQpIHggZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSAoa25vd24gdmFsaWQpIHZhbHVlP1xuLy8gVHJlYXQgYW55IGludmFsaWQgdmFsdWUgYXMgYmVsb3cgbmVnYXRpdmUgaW5maW5pdHkuXG5mdW5jdGlvbiBhYm92ZSh4LCB2YWx1ZSkge1xuICByZXR1cm4geCA9PSBudWxsID8gZmFsc2UgOiAreCA+PSB2YWx1ZTtcbn1cblxuLy8gRHVyaW5nIHNtb290aGluZywgdHJlYXQgYW55IGludmFsaWQgdmFsdWUgYXMgbmVnYXRpdmUgaW5maW5pdHkuXG5mdW5jdGlvbiB2YWxpZCh2KSB7XG4gIHJldHVybiB2ID09IG51bGwgfHwgaXNOYU4odiA9ICt2KSA/IC1JbmZpbml0eSA6IHY7XG59XG5cbmZ1bmN0aW9uIHNtb290aDEoeCwgdjAsIHYxLCB2YWx1ZSkge1xuICBjb25zdCBhID0gdmFsdWUgLSB2MDtcbiAgY29uc3QgYiA9IHYxIC0gdjA7XG4gIGNvbnN0IGQgPSBpc0Zpbml0ZShhKSB8fCBpc0Zpbml0ZShiKSA/IGEgLyBiIDogTWF0aC5zaWduKGEpIC8gTWF0aC5zaWduKGIpO1xuICByZXR1cm4gaXNOYU4oZCkgPyB4IDogeCArIGQgLSAwLjU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyaW5nKSB7XG4gIHZhciBpID0gMCwgbiA9IHJpbmcubGVuZ3RoLCBhcmVhID0gcmluZ1tuIC0gMV1bMV0gKiByaW5nWzBdWzBdIC0gcmluZ1tuIC0gMV1bMF0gKiByaW5nWzBdWzFdO1xuICB3aGlsZSAoKytpIDwgbikgYXJlYSArPSByaW5nW2kgLSAxXVsxXSAqIHJpbmdbaV1bMF0gLSByaW5nW2kgLSAxXVswXSAqIHJpbmdbaV1bMV07XG4gIHJldHVybiBhcmVhO1xufVxuIiwiaW1wb3J0IHtibHVyMiwgbWF4LCB0aWNrc30gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgQ29udG91cnMgZnJvbSBcIi4vY29udG91cnMuanNcIjtcblxuZnVuY3Rpb24gZGVmYXVsdFgoZCkge1xuICByZXR1cm4gZFswXTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFkoZCkge1xuICByZXR1cm4gZFsxXTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFdlaWdodCgpIHtcbiAgcmV0dXJuIDE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgeCA9IGRlZmF1bHRYLFxuICAgICAgeSA9IGRlZmF1bHRZLFxuICAgICAgd2VpZ2h0ID0gZGVmYXVsdFdlaWdodCxcbiAgICAgIGR4ID0gOTYwLFxuICAgICAgZHkgPSA1MDAsXG4gICAgICByID0gMjAsIC8vIGJsdXIgcmFkaXVzXG4gICAgICBrID0gMiwgLy8gbG9nMihncmlkIGNlbGwgc2l6ZSlcbiAgICAgIG8gPSByICogMywgLy8gZ3JpZCBvZmZzZXQsIHRvIHBhZCBmb3IgYmx1clxuICAgICAgbiA9IChkeCArIG8gKiAyKSA+PiBrLCAvLyBncmlkIHdpZHRoXG4gICAgICBtID0gKGR5ICsgbyAqIDIpID4+IGssIC8vIGdyaWQgaGVpZ2h0XG4gICAgICB0aHJlc2hvbGQgPSBjb25zdGFudCgyMCk7XG5cbiAgZnVuY3Rpb24gZ3JpZChkYXRhKSB7XG4gICAgdmFyIHZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkobiAqIG0pLFxuICAgICAgICBwb3cyayA9IE1hdGgucG93KDIsIC1rKSxcbiAgICAgICAgaSA9IC0xO1xuXG4gICAgZm9yIChjb25zdCBkIG9mIGRhdGEpIHtcbiAgICAgIHZhciB4aSA9ICh4KGQsICsraSwgZGF0YSkgKyBvKSAqIHBvdzJrLFxuICAgICAgICAgIHlpID0gKHkoZCwgaSwgZGF0YSkgKyBvKSAqIHBvdzJrLFxuICAgICAgICAgIHdpID0gK3dlaWdodChkLCBpLCBkYXRhKTtcbiAgICAgIGlmICh3aSAmJiB4aSA+PSAwICYmIHhpIDwgbiAmJiB5aSA+PSAwICYmIHlpIDwgbSkge1xuICAgICAgICB2YXIgeDAgPSBNYXRoLmZsb29yKHhpKSxcbiAgICAgICAgICAgIHkwID0gTWF0aC5mbG9vcih5aSksXG4gICAgICAgICAgICB4dCA9IHhpIC0geDAgLSAwLjUsXG4gICAgICAgICAgICB5dCA9IHlpIC0geTAgLSAwLjU7XG4gICAgICAgIHZhbHVlc1t4MCArIHkwICogbl0gKz0gKDEgLSB4dCkgKiAoMSAtIHl0KSAqIHdpO1xuICAgICAgICB2YWx1ZXNbeDAgKyAxICsgeTAgKiBuXSArPSB4dCAqICgxIC0geXQpICogd2k7XG4gICAgICAgIHZhbHVlc1t4MCArIDEgKyAoeTAgKyAxKSAqIG5dICs9IHh0ICogeXQgKiB3aTtcbiAgICAgICAgdmFsdWVzW3gwICsgKHkwICsgMSkgKiBuXSArPSAoMSAtIHh0KSAqIHl0ICogd2k7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYmx1cjIoe2RhdGE6IHZhbHVlcywgd2lkdGg6IG4sIGhlaWdodDogbX0sIHIgKiBwb3cyayk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlbnNpdHkoZGF0YSkge1xuICAgIHZhciB2YWx1ZXMgPSBncmlkKGRhdGEpLFxuICAgICAgICB0eiA9IHRocmVzaG9sZCh2YWx1ZXMpLFxuICAgICAgICBwb3c0ayA9IE1hdGgucG93KDIsIDIgKiBrKTtcblxuICAgIC8vIENvbnZlcnQgbnVtYmVyIG9mIHRocmVzaG9sZHMgaW50byB1bmlmb3JtIHRocmVzaG9sZHMuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR6KSkge1xuICAgICAgdHogPSB0aWNrcyhOdW1iZXIuTUlOX1ZBTFVFLCBtYXgodmFsdWVzKSAvIHBvdzRrLCB0eik7XG4gICAgfVxuXG4gICAgcmV0dXJuIENvbnRvdXJzKClcbiAgICAgICAgLnNpemUoW24sIG1dKVxuICAgICAgICAudGhyZXNob2xkcyh0ei5tYXAoZCA9PiBkICogcG93NGspKVxuICAgICAgKHZhbHVlcylcbiAgICAgICAgLm1hcCgoYywgaSkgPT4gKGMudmFsdWUgPSArdHpbaV0sIHRyYW5zZm9ybShjKSkpO1xuICB9XG5cbiAgZGVuc2l0eS5jb250b3VycyA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICB2YXIgdmFsdWVzID0gZ3JpZChkYXRhKSxcbiAgICAgICAgY29udG91cnMgPSBDb250b3VycygpLnNpemUoW24sIG1dKSxcbiAgICAgICAgcG93NGsgPSBNYXRoLnBvdygyLCAyICogayksXG4gICAgICAgIGNvbnRvdXIgPSB2YWx1ZSA9PiB7XG4gICAgICAgICAgdmFsdWUgPSArdmFsdWU7XG4gICAgICAgICAgdmFyIGMgPSB0cmFuc2Zvcm0oY29udG91cnMuY29udG91cih2YWx1ZXMsIHZhbHVlICogcG93NGspKTtcbiAgICAgICAgICBjLnZhbHVlID0gdmFsdWU7IC8vIHByZXNlcnZlIGV4YWN0IHRocmVzaG9sZCB2YWx1ZVxuICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb250b3VyLCBcIm1heFwiLCB7Z2V0OiAoKSA9PiBtYXgodmFsdWVzKSAvIHBvdzRrfSk7XG4gICAgcmV0dXJuIGNvbnRvdXI7XG4gIH07XG5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtKGdlb21ldHJ5KSB7XG4gICAgZ2VvbWV0cnkuY29vcmRpbmF0ZXMuZm9yRWFjaCh0cmFuc2Zvcm1Qb2x5Z29uKTtcbiAgICByZXR1cm4gZ2VvbWV0cnk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2Zvcm1Qb2x5Z29uKGNvb3JkaW5hdGVzKSB7XG4gICAgY29vcmRpbmF0ZXMuZm9yRWFjaCh0cmFuc2Zvcm1SaW5nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybVJpbmcoY29vcmRpbmF0ZXMpIHtcbiAgICBjb29yZGluYXRlcy5mb3JFYWNoKHRyYW5zZm9ybVBvaW50KTtcbiAgfVxuXG4gIC8vIFRPRE8gT3B0aW1pemUuXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybVBvaW50KGNvb3JkaW5hdGVzKSB7XG4gICAgY29vcmRpbmF0ZXNbMF0gPSBjb29yZGluYXRlc1swXSAqIE1hdGgucG93KDIsIGspIC0gbztcbiAgICBjb29yZGluYXRlc1sxXSA9IGNvb3JkaW5hdGVzWzFdICogTWF0aC5wb3coMiwgaykgLSBvO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzaXplKCkge1xuICAgIG8gPSByICogMztcbiAgICBuID0gKGR4ICsgbyAqIDIpID4+IGs7XG4gICAgbSA9IChkeSArIG8gKiAyKSA+PiBrO1xuICAgIHJldHVybiBkZW5zaXR5O1xuICB9XG5cbiAgZGVuc2l0eS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgZGVuc2l0eSkgOiB4O1xuICB9O1xuXG4gIGRlbnNpdHkueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGRlbnNpdHkpIDogeTtcbiAgfTtcblxuICBkZW5zaXR5LndlaWdodCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh3ZWlnaHQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgZGVuc2l0eSkgOiB3ZWlnaHQ7XG4gIH07XG5cbiAgZGVuc2l0eS5zaXplID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtkeCwgZHldO1xuICAgIHZhciBfMCA9ICtfWzBdLCBfMSA9ICtfWzFdO1xuICAgIGlmICghKF8wID49IDAgJiYgXzEgPj0gMCkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgc2l6ZVwiKTtcbiAgICByZXR1cm4gZHggPSBfMCwgZHkgPSBfMSwgcmVzaXplKCk7XG4gIH07XG5cbiAgZGVuc2l0eS5jZWxsU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiAxIDw8IGs7XG4gICAgaWYgKCEoKF8gPSArXykgPj0gMSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2VsbCBzaXplXCIpO1xuICAgIHJldHVybiBrID0gTWF0aC5mbG9vcihNYXRoLmxvZyhfKSAvIE1hdGguTE4yKSwgcmVzaXplKCk7XG4gIH07XG5cbiAgZGVuc2l0eS50aHJlc2hvbGRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRocmVzaG9sZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogQXJyYXkuaXNBcnJheShfKSA/IGNvbnN0YW50KHNsaWNlLmNhbGwoXykpIDogY29uc3RhbnQoXyksIGRlbnNpdHkpIDogdGhyZXNob2xkO1xuICB9O1xuXG4gIGRlbnNpdHkuYmFuZHdpZHRoID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIE1hdGguc3FydChyICogKHIgKyAxKSk7XG4gICAgaWYgKCEoKF8gPSArXykgPj0gMCkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgYmFuZHdpZHRoXCIpO1xuICAgIHJldHVybiByID0gKE1hdGguc3FydCg0ICogXyAqIF8gKyAxKSAtIDEpIC8gMiwgcmVzaXplKCk7XG4gIH07XG5cbiAgcmV0dXJuIGRlbnNpdHk7XG59XG4iLCJleHBvcnQgY29uc3QgZXBzaWxvbiA9IDEuMTEwMjIzMDI0NjI1MTU2NWUtMTY7XG5leHBvcnQgY29uc3Qgc3BsaXR0ZXIgPSAxMzQyMTc3Mjk7XG5leHBvcnQgY29uc3QgcmVzdWx0ZXJyYm91bmQgPSAoMyArIDggKiBlcHNpbG9uKSAqIGVwc2lsb247XG5cbi8vIGZhc3RfZXhwYW5zaW9uX3N1bV96ZXJvZWxpbSByb3V0aW5lIGZyb20gb3JpdGluYWwgY29kZVxuZXhwb3J0IGZ1bmN0aW9uIHN1bShlbGVuLCBlLCBmbGVuLCBmLCBoKSB7XG4gICAgbGV0IFEsIFFuZXcsIGhoLCBidmlydDtcbiAgICBsZXQgZW5vdyA9IGVbMF07XG4gICAgbGV0IGZub3cgPSBmWzBdO1xuICAgIGxldCBlaW5kZXggPSAwO1xuICAgIGxldCBmaW5kZXggPSAwO1xuICAgIGlmICgoZm5vdyA+IGVub3cpID09PSAoZm5vdyA+IC1lbm93KSkge1xuICAgICAgICBRID0gZW5vdztcbiAgICAgICAgZW5vdyA9IGVbKytlaW5kZXhdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIFEgPSBmbm93O1xuICAgICAgICBmbm93ID0gZlsrK2ZpbmRleF07XG4gICAgfVxuICAgIGxldCBoaW5kZXggPSAwO1xuICAgIGlmIChlaW5kZXggPCBlbGVuICYmIGZpbmRleCA8IGZsZW4pIHtcbiAgICAgICAgaWYgKChmbm93ID4gZW5vdykgPT09IChmbm93ID4gLWVub3cpKSB7XG4gICAgICAgICAgICBRbmV3ID0gZW5vdyArIFE7XG4gICAgICAgICAgICBoaCA9IFEgLSAoUW5ldyAtIGVub3cpO1xuICAgICAgICAgICAgZW5vdyA9IGVbKytlaW5kZXhdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgUW5ldyA9IGZub3cgKyBRO1xuICAgICAgICAgICAgaGggPSBRIC0gKFFuZXcgLSBmbm93KTtcbiAgICAgICAgICAgIGZub3cgPSBmWysrZmluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBRID0gUW5ldztcbiAgICAgICAgaWYgKGhoICE9PSAwKSB7XG4gICAgICAgICAgICBoW2hpbmRleCsrXSA9IGhoO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChlaW5kZXggPCBlbGVuICYmIGZpbmRleCA8IGZsZW4pIHtcbiAgICAgICAgICAgIGlmICgoZm5vdyA+IGVub3cpID09PSAoZm5vdyA+IC1lbm93KSkge1xuICAgICAgICAgICAgICAgIFFuZXcgPSBRICsgZW5vdztcbiAgICAgICAgICAgICAgICBidmlydCA9IFFuZXcgLSBRO1xuICAgICAgICAgICAgICAgIGhoID0gUSAtIChRbmV3IC0gYnZpcnQpICsgKGVub3cgLSBidmlydCk7XG4gICAgICAgICAgICAgICAgZW5vdyA9IGVbKytlaW5kZXhdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBRbmV3ID0gUSArIGZub3c7XG4gICAgICAgICAgICAgICAgYnZpcnQgPSBRbmV3IC0gUTtcbiAgICAgICAgICAgICAgICBoaCA9IFEgLSAoUW5ldyAtIGJ2aXJ0KSArIChmbm93IC0gYnZpcnQpO1xuICAgICAgICAgICAgICAgIGZub3cgPSBmWysrZmluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFEgPSBRbmV3O1xuICAgICAgICAgICAgaWYgKGhoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgaFtoaW5kZXgrK10gPSBoaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAoZWluZGV4IDwgZWxlbikge1xuICAgICAgICBRbmV3ID0gUSArIGVub3c7XG4gICAgICAgIGJ2aXJ0ID0gUW5ldyAtIFE7XG4gICAgICAgIGhoID0gUSAtIChRbmV3IC0gYnZpcnQpICsgKGVub3cgLSBidmlydCk7XG4gICAgICAgIGVub3cgPSBlWysrZWluZGV4XTtcbiAgICAgICAgUSA9IFFuZXc7XG4gICAgICAgIGlmIChoaCAhPT0gMCkge1xuICAgICAgICAgICAgaFtoaW5kZXgrK10gPSBoaDtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAoZmluZGV4IDwgZmxlbikge1xuICAgICAgICBRbmV3ID0gUSArIGZub3c7XG4gICAgICAgIGJ2aXJ0ID0gUW5ldyAtIFE7XG4gICAgICAgIGhoID0gUSAtIChRbmV3IC0gYnZpcnQpICsgKGZub3cgLSBidmlydCk7XG4gICAgICAgIGZub3cgPSBmWysrZmluZGV4XTtcbiAgICAgICAgUSA9IFFuZXc7XG4gICAgICAgIGlmIChoaCAhPT0gMCkge1xuICAgICAgICAgICAgaFtoaW5kZXgrK10gPSBoaDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoUSAhPT0gMCB8fCBoaW5kZXggPT09IDApIHtcbiAgICAgICAgaFtoaW5kZXgrK10gPSBRO1xuICAgIH1cbiAgICByZXR1cm4gaGluZGV4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3VtX3RocmVlKGFsZW4sIGEsIGJsZW4sIGIsIGNsZW4sIGMsIHRtcCwgb3V0KSB7XG4gICAgcmV0dXJuIHN1bShzdW0oYWxlbiwgYSwgYmxlbiwgYiwgdG1wKSwgdG1wLCBjbGVuLCBjLCBvdXQpO1xufVxuXG4vLyBzY2FsZV9leHBhbnNpb25femVyb2VsaW0gcm91dGluZSBmcm9tIG9yaXRpbmFsIGNvZGVcbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShlbGVuLCBlLCBiLCBoKSB7XG4gICAgbGV0IFEsIHN1bSwgaGgsIHByb2R1Y3QxLCBwcm9kdWN0MDtcbiAgICBsZXQgYnZpcnQsIGMsIGFoaSwgYWxvLCBiaGksIGJsbztcblxuICAgIGMgPSBzcGxpdHRlciAqIGI7XG4gICAgYmhpID0gYyAtIChjIC0gYik7XG4gICAgYmxvID0gYiAtIGJoaTtcbiAgICBsZXQgZW5vdyA9IGVbMF07XG4gICAgUSA9IGVub3cgKiBiO1xuICAgIGMgPSBzcGxpdHRlciAqIGVub3c7XG4gICAgYWhpID0gYyAtIChjIC0gZW5vdyk7XG4gICAgYWxvID0gZW5vdyAtIGFoaTtcbiAgICBoaCA9IGFsbyAqIGJsbyAtIChRIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICBsZXQgaGluZGV4ID0gMDtcbiAgICBpZiAoaGggIT09IDApIHtcbiAgICAgICAgaFtoaW5kZXgrK10gPSBoaDtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBlbGVuOyBpKyspIHtcbiAgICAgICAgZW5vdyA9IGVbaV07XG4gICAgICAgIHByb2R1Y3QxID0gZW5vdyAqIGI7XG4gICAgICAgIGMgPSBzcGxpdHRlciAqIGVub3c7XG4gICAgICAgIGFoaSA9IGMgLSAoYyAtIGVub3cpO1xuICAgICAgICBhbG8gPSBlbm93IC0gYWhpO1xuICAgICAgICBwcm9kdWN0MCA9IGFsbyAqIGJsbyAtIChwcm9kdWN0MSAtIGFoaSAqIGJoaSAtIGFsbyAqIGJoaSAtIGFoaSAqIGJsbyk7XG4gICAgICAgIHN1bSA9IFEgKyBwcm9kdWN0MDtcbiAgICAgICAgYnZpcnQgPSBzdW0gLSBRO1xuICAgICAgICBoaCA9IFEgLSAoc3VtIC0gYnZpcnQpICsgKHByb2R1Y3QwIC0gYnZpcnQpO1xuICAgICAgICBpZiAoaGggIT09IDApIHtcbiAgICAgICAgICAgIGhbaGluZGV4KytdID0gaGg7XG4gICAgICAgIH1cbiAgICAgICAgUSA9IHByb2R1Y3QxICsgc3VtO1xuICAgICAgICBoaCA9IHN1bSAtIChRIC0gcHJvZHVjdDEpO1xuICAgICAgICBpZiAoaGggIT09IDApIHtcbiAgICAgICAgICAgIGhbaGluZGV4KytdID0gaGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKFEgIT09IDAgfHwgaGluZGV4ID09PSAwKSB7XG4gICAgICAgIGhbaGluZGV4KytdID0gUTtcbiAgICB9XG4gICAgcmV0dXJuIGhpbmRleDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5lZ2F0ZShlbGVuLCBlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVuOyBpKyspIGVbaV0gPSAtZVtpXTtcbiAgICByZXR1cm4gZWxlbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVzdGltYXRlKGVsZW4sIGUpIHtcbiAgICBsZXQgUSA9IGVbMF07XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBlbGVuOyBpKyspIFEgKz0gZVtpXTtcbiAgICByZXR1cm4gUTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZlYyhuKSB7XG4gICAgcmV0dXJuIG5ldyBGbG9hdDY0QXJyYXkobik7XG59XG4iLCJpbXBvcnQge2Vwc2lsb24sIHNwbGl0dGVyLCByZXN1bHRlcnJib3VuZCwgZXN0aW1hdGUsIHZlYywgc3VtfSBmcm9tICcuL3V0aWwuanMnO1xuXG5jb25zdCBjY3dlcnJib3VuZEEgPSAoMyArIDE2ICogZXBzaWxvbikgKiBlcHNpbG9uO1xuY29uc3QgY2N3ZXJyYm91bmRCID0gKDIgKyAxMiAqIGVwc2lsb24pICogZXBzaWxvbjtcbmNvbnN0IGNjd2VycmJvdW5kQyA9ICg5ICsgNjQgKiBlcHNpbG9uKSAqIGVwc2lsb24gKiBlcHNpbG9uO1xuXG5jb25zdCBCID0gdmVjKDQpO1xuY29uc3QgQzEgPSB2ZWMoOCk7XG5jb25zdCBDMiA9IHZlYygxMik7XG5jb25zdCBEID0gdmVjKDE2KTtcbmNvbnN0IHUgPSB2ZWMoNCk7XG5cbmZ1bmN0aW9uIG9yaWVudDJkYWRhcHQoYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgZGV0c3VtKSB7XG4gICAgbGV0IGFjeHRhaWwsIGFjeXRhaWwsIGJjeHRhaWwsIGJjeXRhaWw7XG4gICAgbGV0IGJ2aXJ0LCBjLCBhaGksIGFsbywgYmhpLCBibG8sIF9pLCBfaiwgXzAsIHMxLCBzMCwgdDEsIHQwLCB1MztcblxuICAgIGNvbnN0IGFjeCA9IGF4IC0gY3g7XG4gICAgY29uc3QgYmN4ID0gYnggLSBjeDtcbiAgICBjb25zdCBhY3kgPSBheSAtIGN5O1xuICAgIGNvbnN0IGJjeSA9IGJ5IC0gY3k7XG5cbiAgICBzMSA9IGFjeCAqIGJjeTtcbiAgICBjID0gc3BsaXR0ZXIgKiBhY3g7XG4gICAgYWhpID0gYyAtIChjIC0gYWN4KTtcbiAgICBhbG8gPSBhY3ggLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogYmN5O1xuICAgIGJoaSA9IGMgLSAoYyAtIGJjeSk7XG4gICAgYmxvID0gYmN5IC0gYmhpO1xuICAgIHMwID0gYWxvICogYmxvIC0gKHMxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICB0MSA9IGFjeSAqIGJjeDtcbiAgICBjID0gc3BsaXR0ZXIgKiBhY3k7XG4gICAgYWhpID0gYyAtIChjIC0gYWN5KTtcbiAgICBhbG8gPSBhY3kgLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogYmN4O1xuICAgIGJoaSA9IGMgLSAoYyAtIGJjeCk7XG4gICAgYmxvID0gYmN4IC0gYmhpO1xuICAgIHQwID0gYWxvICogYmxvIC0gKHQxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICBfaSA9IHMwIC0gdDA7XG4gICAgYnZpcnQgPSBzMCAtIF9pO1xuICAgIEJbMF0gPSBzMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQwKTtcbiAgICBfaiA9IHMxICsgX2k7XG4gICAgYnZpcnQgPSBfaiAtIHMxO1xuICAgIF8wID0gczEgLSAoX2ogLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgX2kgPSBfMCAtIHQxO1xuICAgIGJ2aXJ0ID0gXzAgLSBfaTtcbiAgICBCWzFdID0gXzAgLSAoX2kgKyBidmlydCkgKyAoYnZpcnQgLSB0MSk7XG4gICAgdTMgPSBfaiArIF9pO1xuICAgIGJ2aXJ0ID0gdTMgLSBfajtcbiAgICBCWzJdID0gX2ogLSAodTMgLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgQlszXSA9IHUzO1xuXG4gICAgbGV0IGRldCA9IGVzdGltYXRlKDQsIEIpO1xuICAgIGxldCBlcnJib3VuZCA9IGNjd2VycmJvdW5kQiAqIGRldHN1bTtcbiAgICBpZiAoZGV0ID49IGVycmJvdW5kIHx8IC1kZXQgPj0gZXJyYm91bmQpIHtcbiAgICAgICAgcmV0dXJuIGRldDtcbiAgICB9XG5cbiAgICBidmlydCA9IGF4IC0gYWN4O1xuICAgIGFjeHRhaWwgPSBheCAtIChhY3ggKyBidmlydCkgKyAoYnZpcnQgLSBjeCk7XG4gICAgYnZpcnQgPSBieCAtIGJjeDtcbiAgICBiY3h0YWlsID0gYnggLSAoYmN4ICsgYnZpcnQpICsgKGJ2aXJ0IC0gY3gpO1xuICAgIGJ2aXJ0ID0gYXkgLSBhY3k7XG4gICAgYWN5dGFpbCA9IGF5IC0gKGFjeSArIGJ2aXJ0KSArIChidmlydCAtIGN5KTtcbiAgICBidmlydCA9IGJ5IC0gYmN5O1xuICAgIGJjeXRhaWwgPSBieSAtIChiY3kgKyBidmlydCkgKyAoYnZpcnQgLSBjeSk7XG5cbiAgICBpZiAoYWN4dGFpbCA9PT0gMCAmJiBhY3l0YWlsID09PSAwICYmIGJjeHRhaWwgPT09IDAgJiYgYmN5dGFpbCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZGV0O1xuICAgIH1cblxuICAgIGVycmJvdW5kID0gY2N3ZXJyYm91bmRDICogZGV0c3VtICsgcmVzdWx0ZXJyYm91bmQgKiBNYXRoLmFicyhkZXQpO1xuICAgIGRldCArPSAoYWN4ICogYmN5dGFpbCArIGJjeSAqIGFjeHRhaWwpIC0gKGFjeSAqIGJjeHRhaWwgKyBiY3ggKiBhY3l0YWlsKTtcbiAgICBpZiAoZGV0ID49IGVycmJvdW5kIHx8IC1kZXQgPj0gZXJyYm91bmQpIHJldHVybiBkZXQ7XG5cbiAgICBzMSA9IGFjeHRhaWwgKiBiY3k7XG4gICAgYyA9IHNwbGl0dGVyICogYWN4dGFpbDtcbiAgICBhaGkgPSBjIC0gKGMgLSBhY3h0YWlsKTtcbiAgICBhbG8gPSBhY3h0YWlsIC0gYWhpO1xuICAgIGMgPSBzcGxpdHRlciAqIGJjeTtcbiAgICBiaGkgPSBjIC0gKGMgLSBiY3kpO1xuICAgIGJsbyA9IGJjeSAtIGJoaTtcbiAgICBzMCA9IGFsbyAqIGJsbyAtIChzMSAtIGFoaSAqIGJoaSAtIGFsbyAqIGJoaSAtIGFoaSAqIGJsbyk7XG4gICAgdDEgPSBhY3l0YWlsICogYmN4O1xuICAgIGMgPSBzcGxpdHRlciAqIGFjeXRhaWw7XG4gICAgYWhpID0gYyAtIChjIC0gYWN5dGFpbCk7XG4gICAgYWxvID0gYWN5dGFpbCAtIGFoaTtcbiAgICBjID0gc3BsaXR0ZXIgKiBiY3g7XG4gICAgYmhpID0gYyAtIChjIC0gYmN4KTtcbiAgICBibG8gPSBiY3ggLSBiaGk7XG4gICAgdDAgPSBhbG8gKiBibG8gLSAodDEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIF9pID0gczAgLSB0MDtcbiAgICBidmlydCA9IHMwIC0gX2k7XG4gICAgdVswXSA9IHMwIC0gKF9pICsgYnZpcnQpICsgKGJ2aXJ0IC0gdDApO1xuICAgIF9qID0gczEgKyBfaTtcbiAgICBidmlydCA9IF9qIC0gczE7XG4gICAgXzAgPSBzMSAtIChfaiAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICBfaSA9IF8wIC0gdDE7XG4gICAgYnZpcnQgPSBfMCAtIF9pO1xuICAgIHVbMV0gPSBfMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQxKTtcbiAgICB1MyA9IF9qICsgX2k7XG4gICAgYnZpcnQgPSB1MyAtIF9qO1xuICAgIHVbMl0gPSBfaiAtICh1MyAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICB1WzNdID0gdTM7XG4gICAgY29uc3QgQzFsZW4gPSBzdW0oNCwgQiwgNCwgdSwgQzEpO1xuXG4gICAgczEgPSBhY3ggKiBiY3l0YWlsO1xuICAgIGMgPSBzcGxpdHRlciAqIGFjeDtcbiAgICBhaGkgPSBjIC0gKGMgLSBhY3gpO1xuICAgIGFsbyA9IGFjeCAtIGFoaTtcbiAgICBjID0gc3BsaXR0ZXIgKiBiY3l0YWlsO1xuICAgIGJoaSA9IGMgLSAoYyAtIGJjeXRhaWwpO1xuICAgIGJsbyA9IGJjeXRhaWwgLSBiaGk7XG4gICAgczAgPSBhbG8gKiBibG8gLSAoczEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIHQxID0gYWN5ICogYmN4dGFpbDtcbiAgICBjID0gc3BsaXR0ZXIgKiBhY3k7XG4gICAgYWhpID0gYyAtIChjIC0gYWN5KTtcbiAgICBhbG8gPSBhY3kgLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogYmN4dGFpbDtcbiAgICBiaGkgPSBjIC0gKGMgLSBiY3h0YWlsKTtcbiAgICBibG8gPSBiY3h0YWlsIC0gYmhpO1xuICAgIHQwID0gYWxvICogYmxvIC0gKHQxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICBfaSA9IHMwIC0gdDA7XG4gICAgYnZpcnQgPSBzMCAtIF9pO1xuICAgIHVbMF0gPSBzMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQwKTtcbiAgICBfaiA9IHMxICsgX2k7XG4gICAgYnZpcnQgPSBfaiAtIHMxO1xuICAgIF8wID0gczEgLSAoX2ogLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgX2kgPSBfMCAtIHQxO1xuICAgIGJ2aXJ0ID0gXzAgLSBfaTtcbiAgICB1WzFdID0gXzAgLSAoX2kgKyBidmlydCkgKyAoYnZpcnQgLSB0MSk7XG4gICAgdTMgPSBfaiArIF9pO1xuICAgIGJ2aXJ0ID0gdTMgLSBfajtcbiAgICB1WzJdID0gX2ogLSAodTMgLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgdVszXSA9IHUzO1xuICAgIGNvbnN0IEMybGVuID0gc3VtKEMxbGVuLCBDMSwgNCwgdSwgQzIpO1xuXG4gICAgczEgPSBhY3h0YWlsICogYmN5dGFpbDtcbiAgICBjID0gc3BsaXR0ZXIgKiBhY3h0YWlsO1xuICAgIGFoaSA9IGMgLSAoYyAtIGFjeHRhaWwpO1xuICAgIGFsbyA9IGFjeHRhaWwgLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogYmN5dGFpbDtcbiAgICBiaGkgPSBjIC0gKGMgLSBiY3l0YWlsKTtcbiAgICBibG8gPSBiY3l0YWlsIC0gYmhpO1xuICAgIHMwID0gYWxvICogYmxvIC0gKHMxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICB0MSA9IGFjeXRhaWwgKiBiY3h0YWlsO1xuICAgIGMgPSBzcGxpdHRlciAqIGFjeXRhaWw7XG4gICAgYWhpID0gYyAtIChjIC0gYWN5dGFpbCk7XG4gICAgYWxvID0gYWN5dGFpbCAtIGFoaTtcbiAgICBjID0gc3BsaXR0ZXIgKiBiY3h0YWlsO1xuICAgIGJoaSA9IGMgLSAoYyAtIGJjeHRhaWwpO1xuICAgIGJsbyA9IGJjeHRhaWwgLSBiaGk7XG4gICAgdDAgPSBhbG8gKiBibG8gLSAodDEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIF9pID0gczAgLSB0MDtcbiAgICBidmlydCA9IHMwIC0gX2k7XG4gICAgdVswXSA9IHMwIC0gKF9pICsgYnZpcnQpICsgKGJ2aXJ0IC0gdDApO1xuICAgIF9qID0gczEgKyBfaTtcbiAgICBidmlydCA9IF9qIC0gczE7XG4gICAgXzAgPSBzMSAtIChfaiAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICBfaSA9IF8wIC0gdDE7XG4gICAgYnZpcnQgPSBfMCAtIF9pO1xuICAgIHVbMV0gPSBfMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQxKTtcbiAgICB1MyA9IF9qICsgX2k7XG4gICAgYnZpcnQgPSB1MyAtIF9qO1xuICAgIHVbMl0gPSBfaiAtICh1MyAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICB1WzNdID0gdTM7XG4gICAgY29uc3QgRGxlbiA9IHN1bShDMmxlbiwgQzIsIDQsIHUsIEQpO1xuXG4gICAgcmV0dXJuIERbRGxlbiAtIDFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb3JpZW50MmQoYXgsIGF5LCBieCwgYnksIGN4LCBjeSkge1xuICAgIGNvbnN0IGRldGxlZnQgPSAoYXkgLSBjeSkgKiAoYnggLSBjeCk7XG4gICAgY29uc3QgZGV0cmlnaHQgPSAoYXggLSBjeCkgKiAoYnkgLSBjeSk7XG4gICAgY29uc3QgZGV0ID0gZGV0bGVmdCAtIGRldHJpZ2h0O1xuXG4gICAgY29uc3QgZGV0c3VtID0gTWF0aC5hYnMoZGV0bGVmdCArIGRldHJpZ2h0KTtcbiAgICBpZiAoTWF0aC5hYnMoZGV0KSA+PSBjY3dlcnJib3VuZEEgKiBkZXRzdW0pIHJldHVybiBkZXQ7XG5cbiAgICByZXR1cm4gLW9yaWVudDJkYWRhcHQoYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgZGV0c3VtKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9yaWVudDJkZmFzdChheCwgYXksIGJ4LCBieSwgY3gsIGN5KSB7XG4gICAgcmV0dXJuIChheSAtIGN5KSAqIChieCAtIGN4KSAtIChheCAtIGN4KSAqIChieSAtIGN5KTtcbn1cbiIsImltcG9ydCB7ZXBzaWxvbiwgc3BsaXR0ZXIsIHJlc3VsdGVycmJvdW5kLCBlc3RpbWF0ZSwgdmVjLCBzdW0sIHNjYWxlfSBmcm9tICcuL3V0aWwuanMnO1xuXG5jb25zdCBvM2RlcnJib3VuZEEgPSAoNyArIDU2ICogZXBzaWxvbikgKiBlcHNpbG9uO1xuY29uc3QgbzNkZXJyYm91bmRCID0gKDMgKyAyOCAqIGVwc2lsb24pICogZXBzaWxvbjtcbmNvbnN0IG8zZGVycmJvdW5kQyA9ICgyNiArIDI4OCAqIGVwc2lsb24pICogZXBzaWxvbiAqIGVwc2lsb247XG5cbmNvbnN0IGJjID0gdmVjKDQpO1xuY29uc3QgY2EgPSB2ZWMoNCk7XG5jb25zdCBhYiA9IHZlYyg0KTtcbmNvbnN0IGF0X2IgPSB2ZWMoNCk7XG5jb25zdCBhdF9jID0gdmVjKDQpO1xuY29uc3QgYnRfYyA9IHZlYyg0KTtcbmNvbnN0IGJ0X2EgPSB2ZWMoNCk7XG5jb25zdCBjdF9hID0gdmVjKDQpO1xuY29uc3QgY3RfYiA9IHZlYyg0KTtcbmNvbnN0IGJjdCA9IHZlYyg4KTtcbmNvbnN0IGNhdCA9IHZlYyg4KTtcbmNvbnN0IGFidCA9IHZlYyg4KTtcbmNvbnN0IHUgPSB2ZWMoNCk7XG5cbmNvbnN0IF84ID0gdmVjKDgpO1xuY29uc3QgXzhiID0gdmVjKDgpO1xuY29uc3QgXzE2ID0gdmVjKDgpO1xuY29uc3QgXzEyID0gdmVjKDEyKTtcblxubGV0IGZpbiA9IHZlYygxOTIpO1xubGV0IGZpbjIgPSB2ZWMoMTkyKTtcblxuZnVuY3Rpb24gZmluYWRkKGZpbmxlbiwgYWxlbiwgYSkge1xuICAgIGZpbmxlbiA9IHN1bShmaW5sZW4sIGZpbiwgYWxlbiwgYSwgZmluMik7XG4gICAgY29uc3QgdG1wID0gZmluOyBmaW4gPSBmaW4yOyBmaW4yID0gdG1wO1xuICAgIHJldHVybiBmaW5sZW47XG59XG5cbmZ1bmN0aW9uIHRhaWxpbml0KHh0YWlsLCB5dGFpbCwgYXgsIGF5LCBieCwgYnksIGEsIGIpIHtcbiAgICBsZXQgYnZpcnQsIGMsIGFoaSwgYWxvLCBiaGksIGJsbywgX2ksIF9qLCBfaywgXzAsIHMxLCBzMCwgdDEsIHQwLCB1MywgbmVnYXRlO1xuICAgIGlmICh4dGFpbCA9PT0gMCkge1xuICAgICAgICBpZiAoeXRhaWwgPT09IDApIHtcbiAgICAgICAgICAgIGFbMF0gPSAwO1xuICAgICAgICAgICAgYlswXSA9IDA7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5lZ2F0ZSA9IC15dGFpbDtcbiAgICAgICAgICAgIHMxID0gbmVnYXRlICogYXg7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBuZWdhdGU7XG4gICAgICAgICAgICBhaGkgPSBjIC0gKGMgLSBuZWdhdGUpO1xuICAgICAgICAgICAgYWxvID0gbmVnYXRlIC0gYWhpO1xuICAgICAgICAgICAgYyA9IHNwbGl0dGVyICogYXg7XG4gICAgICAgICAgICBiaGkgPSBjIC0gKGMgLSBheCk7XG4gICAgICAgICAgICBibG8gPSBheCAtIGJoaTtcbiAgICAgICAgICAgIGFbMF0gPSBhbG8gKiBibG8gLSAoczEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgICAgICAgICAgYVsxXSA9IHMxO1xuICAgICAgICAgICAgczEgPSB5dGFpbCAqIGJ4O1xuICAgICAgICAgICAgYyA9IHNwbGl0dGVyICogeXRhaWw7XG4gICAgICAgICAgICBhaGkgPSBjIC0gKGMgLSB5dGFpbCk7XG4gICAgICAgICAgICBhbG8gPSB5dGFpbCAtIGFoaTtcbiAgICAgICAgICAgIGMgPSBzcGxpdHRlciAqIGJ4O1xuICAgICAgICAgICAgYmhpID0gYyAtIChjIC0gYngpO1xuICAgICAgICAgICAgYmxvID0gYnggLSBiaGk7XG4gICAgICAgICAgICBiWzBdID0gYWxvICogYmxvIC0gKHMxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICAgICAgICAgIGJbMV0gPSBzMTtcbiAgICAgICAgICAgIHJldHVybiAyO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHl0YWlsID09PSAwKSB7XG4gICAgICAgICAgICBzMSA9IHh0YWlsICogYXk7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiB4dGFpbDtcbiAgICAgICAgICAgIGFoaSA9IGMgLSAoYyAtIHh0YWlsKTtcbiAgICAgICAgICAgIGFsbyA9IHh0YWlsIC0gYWhpO1xuICAgICAgICAgICAgYyA9IHNwbGl0dGVyICogYXk7XG4gICAgICAgICAgICBiaGkgPSBjIC0gKGMgLSBheSk7XG4gICAgICAgICAgICBibG8gPSBheSAtIGJoaTtcbiAgICAgICAgICAgIGFbMF0gPSBhbG8gKiBibG8gLSAoczEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgICAgICAgICAgYVsxXSA9IHMxO1xuICAgICAgICAgICAgbmVnYXRlID0gLXh0YWlsO1xuICAgICAgICAgICAgczEgPSBuZWdhdGUgKiBieTtcbiAgICAgICAgICAgIGMgPSBzcGxpdHRlciAqIG5lZ2F0ZTtcbiAgICAgICAgICAgIGFoaSA9IGMgLSAoYyAtIG5lZ2F0ZSk7XG4gICAgICAgICAgICBhbG8gPSBuZWdhdGUgLSBhaGk7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBieTtcbiAgICAgICAgICAgIGJoaSA9IGMgLSAoYyAtIGJ5KTtcbiAgICAgICAgICAgIGJsbyA9IGJ5IC0gYmhpO1xuICAgICAgICAgICAgYlswXSA9IGFsbyAqIGJsbyAtIChzMSAtIGFoaSAqIGJoaSAtIGFsbyAqIGJoaSAtIGFoaSAqIGJsbyk7XG4gICAgICAgICAgICBiWzFdID0gczE7XG4gICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMxID0geHRhaWwgKiBheTtcbiAgICAgICAgICAgIGMgPSBzcGxpdHRlciAqIHh0YWlsO1xuICAgICAgICAgICAgYWhpID0gYyAtIChjIC0geHRhaWwpO1xuICAgICAgICAgICAgYWxvID0geHRhaWwgLSBhaGk7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBheTtcbiAgICAgICAgICAgIGJoaSA9IGMgLSAoYyAtIGF5KTtcbiAgICAgICAgICAgIGJsbyA9IGF5IC0gYmhpO1xuICAgICAgICAgICAgczAgPSBhbG8gKiBibG8gLSAoczEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgICAgICAgICAgdDEgPSB5dGFpbCAqIGF4O1xuICAgICAgICAgICAgYyA9IHNwbGl0dGVyICogeXRhaWw7XG4gICAgICAgICAgICBhaGkgPSBjIC0gKGMgLSB5dGFpbCk7XG4gICAgICAgICAgICBhbG8gPSB5dGFpbCAtIGFoaTtcbiAgICAgICAgICAgIGMgPSBzcGxpdHRlciAqIGF4O1xuICAgICAgICAgICAgYmhpID0gYyAtIChjIC0gYXgpO1xuICAgICAgICAgICAgYmxvID0gYXggLSBiaGk7XG4gICAgICAgICAgICB0MCA9IGFsbyAqIGJsbyAtICh0MSAtIGFoaSAqIGJoaSAtIGFsbyAqIGJoaSAtIGFoaSAqIGJsbyk7XG4gICAgICAgICAgICBfaSA9IHMwIC0gdDA7XG4gICAgICAgICAgICBidmlydCA9IHMwIC0gX2k7XG4gICAgICAgICAgICBhWzBdID0gczAgLSAoX2kgKyBidmlydCkgKyAoYnZpcnQgLSB0MCk7XG4gICAgICAgICAgICBfaiA9IHMxICsgX2k7XG4gICAgICAgICAgICBidmlydCA9IF9qIC0gczE7XG4gICAgICAgICAgICBfMCA9IHMxIC0gKF9qIC0gYnZpcnQpICsgKF9pIC0gYnZpcnQpO1xuICAgICAgICAgICAgX2kgPSBfMCAtIHQxO1xuICAgICAgICAgICAgYnZpcnQgPSBfMCAtIF9pO1xuICAgICAgICAgICAgYVsxXSA9IF8wIC0gKF9pICsgYnZpcnQpICsgKGJ2aXJ0IC0gdDEpO1xuICAgICAgICAgICAgdTMgPSBfaiArIF9pO1xuICAgICAgICAgICAgYnZpcnQgPSB1MyAtIF9qO1xuICAgICAgICAgICAgYVsyXSA9IF9qIC0gKHUzIC0gYnZpcnQpICsgKF9pIC0gYnZpcnQpO1xuICAgICAgICAgICAgYVszXSA9IHUzO1xuICAgICAgICAgICAgczEgPSB5dGFpbCAqIGJ4O1xuICAgICAgICAgICAgYyA9IHNwbGl0dGVyICogeXRhaWw7XG4gICAgICAgICAgICBhaGkgPSBjIC0gKGMgLSB5dGFpbCk7XG4gICAgICAgICAgICBhbG8gPSB5dGFpbCAtIGFoaTtcbiAgICAgICAgICAgIGMgPSBzcGxpdHRlciAqIGJ4O1xuICAgICAgICAgICAgYmhpID0gYyAtIChjIC0gYngpO1xuICAgICAgICAgICAgYmxvID0gYnggLSBiaGk7XG4gICAgICAgICAgICBzMCA9IGFsbyAqIGJsbyAtIChzMSAtIGFoaSAqIGJoaSAtIGFsbyAqIGJoaSAtIGFoaSAqIGJsbyk7XG4gICAgICAgICAgICB0MSA9IHh0YWlsICogYnk7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiB4dGFpbDtcbiAgICAgICAgICAgIGFoaSA9IGMgLSAoYyAtIHh0YWlsKTtcbiAgICAgICAgICAgIGFsbyA9IHh0YWlsIC0gYWhpO1xuICAgICAgICAgICAgYyA9IHNwbGl0dGVyICogYnk7XG4gICAgICAgICAgICBiaGkgPSBjIC0gKGMgLSBieSk7XG4gICAgICAgICAgICBibG8gPSBieSAtIGJoaTtcbiAgICAgICAgICAgIHQwID0gYWxvICogYmxvIC0gKHQxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICAgICAgICAgIF9pID0gczAgLSB0MDtcbiAgICAgICAgICAgIGJ2aXJ0ID0gczAgLSBfaTtcbiAgICAgICAgICAgIGJbMF0gPSBzMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQwKTtcbiAgICAgICAgICAgIF9qID0gczEgKyBfaTtcbiAgICAgICAgICAgIGJ2aXJ0ID0gX2ogLSBzMTtcbiAgICAgICAgICAgIF8wID0gczEgLSAoX2ogLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgICAgICAgICBfaSA9IF8wIC0gdDE7XG4gICAgICAgICAgICBidmlydCA9IF8wIC0gX2k7XG4gICAgICAgICAgICBiWzFdID0gXzAgLSAoX2kgKyBidmlydCkgKyAoYnZpcnQgLSB0MSk7XG4gICAgICAgICAgICB1MyA9IF9qICsgX2k7XG4gICAgICAgICAgICBidmlydCA9IHUzIC0gX2o7XG4gICAgICAgICAgICBiWzJdID0gX2ogLSAodTMgLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgICAgICAgICBiWzNdID0gdTM7XG4gICAgICAgICAgICByZXR1cm4gNDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gdGFpbGFkZChmaW5sZW4sIGEsIGIsIGssIHopIHtcbiAgICBsZXQgYnZpcnQsIGMsIGFoaSwgYWxvLCBiaGksIGJsbywgX2ksIF9qLCBfaywgXzAsIHMxLCBzMCwgdTM7XG4gICAgczEgPSBhICogYjtcbiAgICBjID0gc3BsaXR0ZXIgKiBhO1xuICAgIGFoaSA9IGMgLSAoYyAtIGEpO1xuICAgIGFsbyA9IGEgLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogYjtcbiAgICBiaGkgPSBjIC0gKGMgLSBiKTtcbiAgICBibG8gPSBiIC0gYmhpO1xuICAgIHMwID0gYWxvICogYmxvIC0gKHMxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICBjID0gc3BsaXR0ZXIgKiBrO1xuICAgIGJoaSA9IGMgLSAoYyAtIGspO1xuICAgIGJsbyA9IGsgLSBiaGk7XG4gICAgX2kgPSBzMCAqIGs7XG4gICAgYyA9IHNwbGl0dGVyICogczA7XG4gICAgYWhpID0gYyAtIChjIC0gczApO1xuICAgIGFsbyA9IHMwIC0gYWhpO1xuICAgIHVbMF0gPSBhbG8gKiBibG8gLSAoX2kgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIF9qID0gczEgKiBrO1xuICAgIGMgPSBzcGxpdHRlciAqIHMxO1xuICAgIGFoaSA9IGMgLSAoYyAtIHMxKTtcbiAgICBhbG8gPSBzMSAtIGFoaTtcbiAgICBfMCA9IGFsbyAqIGJsbyAtIChfaiAtIGFoaSAqIGJoaSAtIGFsbyAqIGJoaSAtIGFoaSAqIGJsbyk7XG4gICAgX2sgPSBfaSArIF8wO1xuICAgIGJ2aXJ0ID0gX2sgLSBfaTtcbiAgICB1WzFdID0gX2kgLSAoX2sgLSBidmlydCkgKyAoXzAgLSBidmlydCk7XG4gICAgdTMgPSBfaiArIF9rO1xuICAgIHVbMl0gPSBfayAtICh1MyAtIF9qKTtcbiAgICB1WzNdID0gdTM7XG4gICAgZmlubGVuID0gZmluYWRkKGZpbmxlbiwgNCwgdSk7XG4gICAgaWYgKHogIT09IDApIHtcbiAgICAgICAgYyA9IHNwbGl0dGVyICogejtcbiAgICAgICAgYmhpID0gYyAtIChjIC0geik7XG4gICAgICAgIGJsbyA9IHogLSBiaGk7XG4gICAgICAgIF9pID0gczAgKiB6O1xuICAgICAgICBjID0gc3BsaXR0ZXIgKiBzMDtcbiAgICAgICAgYWhpID0gYyAtIChjIC0gczApO1xuICAgICAgICBhbG8gPSBzMCAtIGFoaTtcbiAgICAgICAgdVswXSA9IGFsbyAqIGJsbyAtIChfaSAtIGFoaSAqIGJoaSAtIGFsbyAqIGJoaSAtIGFoaSAqIGJsbyk7XG4gICAgICAgIF9qID0gczEgKiB6O1xuICAgICAgICBjID0gc3BsaXR0ZXIgKiBzMTtcbiAgICAgICAgYWhpID0gYyAtIChjIC0gczEpO1xuICAgICAgICBhbG8gPSBzMSAtIGFoaTtcbiAgICAgICAgXzAgPSBhbG8gKiBibG8gLSAoX2ogLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgICAgICBfayA9IF9pICsgXzA7XG4gICAgICAgIGJ2aXJ0ID0gX2sgLSBfaTtcbiAgICAgICAgdVsxXSA9IF9pIC0gKF9rIC0gYnZpcnQpICsgKF8wIC0gYnZpcnQpO1xuICAgICAgICB1MyA9IF9qICsgX2s7XG4gICAgICAgIHVbMl0gPSBfayAtICh1MyAtIF9qKTtcbiAgICAgICAgdVszXSA9IHUzO1xuICAgICAgICBmaW5sZW4gPSBmaW5hZGQoZmlubGVuLCA0LCB1KTtcbiAgICB9XG4gICAgcmV0dXJuIGZpbmxlbjtcbn1cblxuZnVuY3Rpb24gb3JpZW50M2RhZGFwdChheCwgYXksIGF6LCBieCwgYnksIGJ6LCBjeCwgY3ksIGN6LCBkeCwgZHksIGR6LCBwZXJtYW5lbnQpIHtcbiAgICBsZXQgZmlubGVuO1xuICAgIGxldCBhZHh0YWlsLCBiZHh0YWlsLCBjZHh0YWlsO1xuICAgIGxldCBhZHl0YWlsLCBiZHl0YWlsLCBjZHl0YWlsO1xuICAgIGxldCBhZHp0YWlsLCBiZHp0YWlsLCBjZHp0YWlsO1xuICAgIGxldCBidmlydCwgYywgYWhpLCBhbG8sIGJoaSwgYmxvLCBfaSwgX2osIF9rLCBfMCwgczEsIHMwLCB0MSwgdDAsIHUzO1xuXG4gICAgY29uc3QgYWR4ID0gYXggLSBkeDtcbiAgICBjb25zdCBiZHggPSBieCAtIGR4O1xuICAgIGNvbnN0IGNkeCA9IGN4IC0gZHg7XG4gICAgY29uc3QgYWR5ID0gYXkgLSBkeTtcbiAgICBjb25zdCBiZHkgPSBieSAtIGR5O1xuICAgIGNvbnN0IGNkeSA9IGN5IC0gZHk7XG4gICAgY29uc3QgYWR6ID0gYXogLSBkejtcbiAgICBjb25zdCBiZHogPSBieiAtIGR6O1xuICAgIGNvbnN0IGNkeiA9IGN6IC0gZHo7XG5cbiAgICBzMSA9IGJkeCAqIGNkeTtcbiAgICBjID0gc3BsaXR0ZXIgKiBiZHg7XG4gICAgYWhpID0gYyAtIChjIC0gYmR4KTtcbiAgICBhbG8gPSBiZHggLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogY2R5O1xuICAgIGJoaSA9IGMgLSAoYyAtIGNkeSk7XG4gICAgYmxvID0gY2R5IC0gYmhpO1xuICAgIHMwID0gYWxvICogYmxvIC0gKHMxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICB0MSA9IGNkeCAqIGJkeTtcbiAgICBjID0gc3BsaXR0ZXIgKiBjZHg7XG4gICAgYWhpID0gYyAtIChjIC0gY2R4KTtcbiAgICBhbG8gPSBjZHggLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogYmR5O1xuICAgIGJoaSA9IGMgLSAoYyAtIGJkeSk7XG4gICAgYmxvID0gYmR5IC0gYmhpO1xuICAgIHQwID0gYWxvICogYmxvIC0gKHQxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICBfaSA9IHMwIC0gdDA7XG4gICAgYnZpcnQgPSBzMCAtIF9pO1xuICAgIGJjWzBdID0gczAgLSAoX2kgKyBidmlydCkgKyAoYnZpcnQgLSB0MCk7XG4gICAgX2ogPSBzMSArIF9pO1xuICAgIGJ2aXJ0ID0gX2ogLSBzMTtcbiAgICBfMCA9IHMxIC0gKF9qIC0gYnZpcnQpICsgKF9pIC0gYnZpcnQpO1xuICAgIF9pID0gXzAgLSB0MTtcbiAgICBidmlydCA9IF8wIC0gX2k7XG4gICAgYmNbMV0gPSBfMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQxKTtcbiAgICB1MyA9IF9qICsgX2k7XG4gICAgYnZpcnQgPSB1MyAtIF9qO1xuICAgIGJjWzJdID0gX2ogLSAodTMgLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgYmNbM10gPSB1MztcbiAgICBzMSA9IGNkeCAqIGFkeTtcbiAgICBjID0gc3BsaXR0ZXIgKiBjZHg7XG4gICAgYWhpID0gYyAtIChjIC0gY2R4KTtcbiAgICBhbG8gPSBjZHggLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogYWR5O1xuICAgIGJoaSA9IGMgLSAoYyAtIGFkeSk7XG4gICAgYmxvID0gYWR5IC0gYmhpO1xuICAgIHMwID0gYWxvICogYmxvIC0gKHMxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICB0MSA9IGFkeCAqIGNkeTtcbiAgICBjID0gc3BsaXR0ZXIgKiBhZHg7XG4gICAgYWhpID0gYyAtIChjIC0gYWR4KTtcbiAgICBhbG8gPSBhZHggLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogY2R5O1xuICAgIGJoaSA9IGMgLSAoYyAtIGNkeSk7XG4gICAgYmxvID0gY2R5IC0gYmhpO1xuICAgIHQwID0gYWxvICogYmxvIC0gKHQxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICBfaSA9IHMwIC0gdDA7XG4gICAgYnZpcnQgPSBzMCAtIF9pO1xuICAgIGNhWzBdID0gczAgLSAoX2kgKyBidmlydCkgKyAoYnZpcnQgLSB0MCk7XG4gICAgX2ogPSBzMSArIF9pO1xuICAgIGJ2aXJ0ID0gX2ogLSBzMTtcbiAgICBfMCA9IHMxIC0gKF9qIC0gYnZpcnQpICsgKF9pIC0gYnZpcnQpO1xuICAgIF9pID0gXzAgLSB0MTtcbiAgICBidmlydCA9IF8wIC0gX2k7XG4gICAgY2FbMV0gPSBfMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQxKTtcbiAgICB1MyA9IF9qICsgX2k7XG4gICAgYnZpcnQgPSB1MyAtIF9qO1xuICAgIGNhWzJdID0gX2ogLSAodTMgLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgY2FbM10gPSB1MztcbiAgICBzMSA9IGFkeCAqIGJkeTtcbiAgICBjID0gc3BsaXR0ZXIgKiBhZHg7XG4gICAgYWhpID0gYyAtIChjIC0gYWR4KTtcbiAgICBhbG8gPSBhZHggLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogYmR5O1xuICAgIGJoaSA9IGMgLSAoYyAtIGJkeSk7XG4gICAgYmxvID0gYmR5IC0gYmhpO1xuICAgIHMwID0gYWxvICogYmxvIC0gKHMxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICB0MSA9IGJkeCAqIGFkeTtcbiAgICBjID0gc3BsaXR0ZXIgKiBiZHg7XG4gICAgYWhpID0gYyAtIChjIC0gYmR4KTtcbiAgICBhbG8gPSBiZHggLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogYWR5O1xuICAgIGJoaSA9IGMgLSAoYyAtIGFkeSk7XG4gICAgYmxvID0gYWR5IC0gYmhpO1xuICAgIHQwID0gYWxvICogYmxvIC0gKHQxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICBfaSA9IHMwIC0gdDA7XG4gICAgYnZpcnQgPSBzMCAtIF9pO1xuICAgIGFiWzBdID0gczAgLSAoX2kgKyBidmlydCkgKyAoYnZpcnQgLSB0MCk7XG4gICAgX2ogPSBzMSArIF9pO1xuICAgIGJ2aXJ0ID0gX2ogLSBzMTtcbiAgICBfMCA9IHMxIC0gKF9qIC0gYnZpcnQpICsgKF9pIC0gYnZpcnQpO1xuICAgIF9pID0gXzAgLSB0MTtcbiAgICBidmlydCA9IF8wIC0gX2k7XG4gICAgYWJbMV0gPSBfMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQxKTtcbiAgICB1MyA9IF9qICsgX2k7XG4gICAgYnZpcnQgPSB1MyAtIF9qO1xuICAgIGFiWzJdID0gX2ogLSAodTMgLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgYWJbM10gPSB1MztcblxuICAgIGZpbmxlbiA9IHN1bShcbiAgICAgICAgc3VtKFxuICAgICAgICAgICAgc2NhbGUoNCwgYmMsIGFkeiwgXzgpLCBfOCxcbiAgICAgICAgICAgIHNjYWxlKDQsIGNhLCBiZHosIF84YiksIF84YiwgXzE2KSwgXzE2LFxuICAgICAgICBzY2FsZSg0LCBhYiwgY2R6LCBfOCksIF84LCBmaW4pO1xuXG4gICAgbGV0IGRldCA9IGVzdGltYXRlKGZpbmxlbiwgZmluKTtcbiAgICBsZXQgZXJyYm91bmQgPSBvM2RlcnJib3VuZEIgKiBwZXJtYW5lbnQ7XG4gICAgaWYgKGRldCA+PSBlcnJib3VuZCB8fCAtZGV0ID49IGVycmJvdW5kKSB7XG4gICAgICAgIHJldHVybiBkZXQ7XG4gICAgfVxuXG4gICAgYnZpcnQgPSBheCAtIGFkeDtcbiAgICBhZHh0YWlsID0gYXggLSAoYWR4ICsgYnZpcnQpICsgKGJ2aXJ0IC0gZHgpO1xuICAgIGJ2aXJ0ID0gYnggLSBiZHg7XG4gICAgYmR4dGFpbCA9IGJ4IC0gKGJkeCArIGJ2aXJ0KSArIChidmlydCAtIGR4KTtcbiAgICBidmlydCA9IGN4IC0gY2R4O1xuICAgIGNkeHRhaWwgPSBjeCAtIChjZHggKyBidmlydCkgKyAoYnZpcnQgLSBkeCk7XG4gICAgYnZpcnQgPSBheSAtIGFkeTtcbiAgICBhZHl0YWlsID0gYXkgLSAoYWR5ICsgYnZpcnQpICsgKGJ2aXJ0IC0gZHkpO1xuICAgIGJ2aXJ0ID0gYnkgLSBiZHk7XG4gICAgYmR5dGFpbCA9IGJ5IC0gKGJkeSArIGJ2aXJ0KSArIChidmlydCAtIGR5KTtcbiAgICBidmlydCA9IGN5IC0gY2R5O1xuICAgIGNkeXRhaWwgPSBjeSAtIChjZHkgKyBidmlydCkgKyAoYnZpcnQgLSBkeSk7XG4gICAgYnZpcnQgPSBheiAtIGFkejtcbiAgICBhZHp0YWlsID0gYXogLSAoYWR6ICsgYnZpcnQpICsgKGJ2aXJ0IC0gZHopO1xuICAgIGJ2aXJ0ID0gYnogLSBiZHo7XG4gICAgYmR6dGFpbCA9IGJ6IC0gKGJkeiArIGJ2aXJ0KSArIChidmlydCAtIGR6KTtcbiAgICBidmlydCA9IGN6IC0gY2R6O1xuICAgIGNkenRhaWwgPSBjeiAtIChjZHogKyBidmlydCkgKyAoYnZpcnQgLSBkeik7XG5cbiAgICBpZiAoYWR4dGFpbCA9PT0gMCAmJiBiZHh0YWlsID09PSAwICYmIGNkeHRhaWwgPT09IDAgJiZcbiAgICAgICAgYWR5dGFpbCA9PT0gMCAmJiBiZHl0YWlsID09PSAwICYmIGNkeXRhaWwgPT09IDAgJiZcbiAgICAgICAgYWR6dGFpbCA9PT0gMCAmJiBiZHp0YWlsID09PSAwICYmIGNkenRhaWwgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGRldDtcbiAgICB9XG5cbiAgICBlcnJib3VuZCA9IG8zZGVycmJvdW5kQyAqIHBlcm1hbmVudCArIHJlc3VsdGVycmJvdW5kICogTWF0aC5hYnMoZGV0KTtcbiAgICBkZXQgKz1cbiAgICAgICAgYWR6ICogKGJkeCAqIGNkeXRhaWwgKyBjZHkgKiBiZHh0YWlsIC0gKGJkeSAqIGNkeHRhaWwgKyBjZHggKiBiZHl0YWlsKSkgKyBhZHp0YWlsICogKGJkeCAqIGNkeSAtIGJkeSAqIGNkeCkgK1xuICAgICAgICBiZHogKiAoY2R4ICogYWR5dGFpbCArIGFkeSAqIGNkeHRhaWwgLSAoY2R5ICogYWR4dGFpbCArIGFkeCAqIGNkeXRhaWwpKSArIGJkenRhaWwgKiAoY2R4ICogYWR5IC0gY2R5ICogYWR4KSArXG4gICAgICAgIGNkeiAqIChhZHggKiBiZHl0YWlsICsgYmR5ICogYWR4dGFpbCAtIChhZHkgKiBiZHh0YWlsICsgYmR4ICogYWR5dGFpbCkpICsgY2R6dGFpbCAqIChhZHggKiBiZHkgLSBhZHkgKiBiZHgpO1xuICAgIGlmIChkZXQgPj0gZXJyYm91bmQgfHwgLWRldCA+PSBlcnJib3VuZCkge1xuICAgICAgICByZXR1cm4gZGV0O1xuICAgIH1cblxuICAgIGNvbnN0IGF0X2xlbiA9IHRhaWxpbml0KGFkeHRhaWwsIGFkeXRhaWwsIGJkeCwgYmR5LCBjZHgsIGNkeSwgYXRfYiwgYXRfYyk7XG4gICAgY29uc3QgYnRfbGVuID0gdGFpbGluaXQoYmR4dGFpbCwgYmR5dGFpbCwgY2R4LCBjZHksIGFkeCwgYWR5LCBidF9jLCBidF9hKTtcbiAgICBjb25zdCBjdF9sZW4gPSB0YWlsaW5pdChjZHh0YWlsLCBjZHl0YWlsLCBhZHgsIGFkeSwgYmR4LCBiZHksIGN0X2EsIGN0X2IpO1xuXG4gICAgY29uc3QgYmN0bGVuID0gc3VtKGJ0X2xlbiwgYnRfYywgY3RfbGVuLCBjdF9iLCBiY3QpO1xuICAgIGZpbmxlbiA9IGZpbmFkZChmaW5sZW4sIHNjYWxlKGJjdGxlbiwgYmN0LCBhZHosIF8xNiksIF8xNik7XG5cbiAgICBjb25zdCBjYXRsZW4gPSBzdW0oY3RfbGVuLCBjdF9hLCBhdF9sZW4sIGF0X2MsIGNhdCk7XG4gICAgZmlubGVuID0gZmluYWRkKGZpbmxlbiwgc2NhbGUoY2F0bGVuLCBjYXQsIGJkeiwgXzE2KSwgXzE2KTtcblxuICAgIGNvbnN0IGFidGxlbiA9IHN1bShhdF9sZW4sIGF0X2IsIGJ0X2xlbiwgYnRfYSwgYWJ0KTtcbiAgICBmaW5sZW4gPSBmaW5hZGQoZmlubGVuLCBzY2FsZShhYnRsZW4sIGFidCwgY2R6LCBfMTYpLCBfMTYpO1xuXG4gICAgaWYgKGFkenRhaWwgIT09IDApIHtcbiAgICAgICAgZmlubGVuID0gZmluYWRkKGZpbmxlbiwgc2NhbGUoNCwgYmMsIGFkenRhaWwsIF8xMiksIF8xMik7XG4gICAgICAgIGZpbmxlbiA9IGZpbmFkZChmaW5sZW4sIHNjYWxlKGJjdGxlbiwgYmN0LCBhZHp0YWlsLCBfMTYpLCBfMTYpO1xuICAgIH1cbiAgICBpZiAoYmR6dGFpbCAhPT0gMCkge1xuICAgICAgICBmaW5sZW4gPSBmaW5hZGQoZmlubGVuLCBzY2FsZSg0LCBjYSwgYmR6dGFpbCwgXzEyKSwgXzEyKTtcbiAgICAgICAgZmlubGVuID0gZmluYWRkKGZpbmxlbiwgc2NhbGUoY2F0bGVuLCBjYXQsIGJkenRhaWwsIF8xNiksIF8xNik7XG4gICAgfVxuICAgIGlmIChjZHp0YWlsICE9PSAwKSB7XG4gICAgICAgIGZpbmxlbiA9IGZpbmFkZChmaW5sZW4sIHNjYWxlKDQsIGFiLCBjZHp0YWlsLCBfMTIpLCBfMTIpO1xuICAgICAgICBmaW5sZW4gPSBmaW5hZGQoZmlubGVuLCBzY2FsZShhYnRsZW4sIGFidCwgY2R6dGFpbCwgXzE2KSwgXzE2KTtcbiAgICB9XG5cbiAgICBpZiAoYWR4dGFpbCAhPT0gMCkge1xuICAgICAgICBpZiAoYmR5dGFpbCAhPT0gMCkge1xuICAgICAgICAgICAgZmlubGVuID0gdGFpbGFkZChmaW5sZW4sIGFkeHRhaWwsIGJkeXRhaWwsIGNkeiwgY2R6dGFpbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNkeXRhaWwgIT09IDApIHtcbiAgICAgICAgICAgIGZpbmxlbiA9IHRhaWxhZGQoZmlubGVuLCAtYWR4dGFpbCwgY2R5dGFpbCwgYmR6LCBiZHp0YWlsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYmR4dGFpbCAhPT0gMCkge1xuICAgICAgICBpZiAoY2R5dGFpbCAhPT0gMCkge1xuICAgICAgICAgICAgZmlubGVuID0gdGFpbGFkZChmaW5sZW4sIGJkeHRhaWwsIGNkeXRhaWwsIGFkeiwgYWR6dGFpbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFkeXRhaWwgIT09IDApIHtcbiAgICAgICAgICAgIGZpbmxlbiA9IHRhaWxhZGQoZmlubGVuLCAtYmR4dGFpbCwgYWR5dGFpbCwgY2R6LCBjZHp0YWlsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoY2R4dGFpbCAhPT0gMCkge1xuICAgICAgICBpZiAoYWR5dGFpbCAhPT0gMCkge1xuICAgICAgICAgICAgZmlubGVuID0gdGFpbGFkZChmaW5sZW4sIGNkeHRhaWwsIGFkeXRhaWwsIGJkeiwgYmR6dGFpbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJkeXRhaWwgIT09IDApIHtcbiAgICAgICAgICAgIGZpbmxlbiA9IHRhaWxhZGQoZmlubGVuLCAtY2R4dGFpbCwgYmR5dGFpbCwgYWR6LCBhZHp0YWlsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmaW5bZmlubGVuIC0gMV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvcmllbnQzZChheCwgYXksIGF6LCBieCwgYnksIGJ6LCBjeCwgY3ksIGN6LCBkeCwgZHksIGR6KSB7XG4gICAgY29uc3QgYWR4ID0gYXggLSBkeDtcbiAgICBjb25zdCBiZHggPSBieCAtIGR4O1xuICAgIGNvbnN0IGNkeCA9IGN4IC0gZHg7XG4gICAgY29uc3QgYWR5ID0gYXkgLSBkeTtcbiAgICBjb25zdCBiZHkgPSBieSAtIGR5O1xuICAgIGNvbnN0IGNkeSA9IGN5IC0gZHk7XG4gICAgY29uc3QgYWR6ID0gYXogLSBkejtcbiAgICBjb25zdCBiZHogPSBieiAtIGR6O1xuICAgIGNvbnN0IGNkeiA9IGN6IC0gZHo7XG5cbiAgICBjb25zdCBiZHhjZHkgPSBiZHggKiBjZHk7XG4gICAgY29uc3QgY2R4YmR5ID0gY2R4ICogYmR5O1xuXG4gICAgY29uc3QgY2R4YWR5ID0gY2R4ICogYWR5O1xuICAgIGNvbnN0IGFkeGNkeSA9IGFkeCAqIGNkeTtcblxuICAgIGNvbnN0IGFkeGJkeSA9IGFkeCAqIGJkeTtcbiAgICBjb25zdCBiZHhhZHkgPSBiZHggKiBhZHk7XG5cbiAgICBjb25zdCBkZXQgPVxuICAgICAgICBhZHogKiAoYmR4Y2R5IC0gY2R4YmR5KSArXG4gICAgICAgIGJkeiAqIChjZHhhZHkgLSBhZHhjZHkpICtcbiAgICAgICAgY2R6ICogKGFkeGJkeSAtIGJkeGFkeSk7XG5cbiAgICBjb25zdCBwZXJtYW5lbnQgPVxuICAgICAgICAoTWF0aC5hYnMoYmR4Y2R5KSArIE1hdGguYWJzKGNkeGJkeSkpICogTWF0aC5hYnMoYWR6KSArXG4gICAgICAgIChNYXRoLmFicyhjZHhhZHkpICsgTWF0aC5hYnMoYWR4Y2R5KSkgKiBNYXRoLmFicyhiZHopICtcbiAgICAgICAgKE1hdGguYWJzKGFkeGJkeSkgKyBNYXRoLmFicyhiZHhhZHkpKSAqIE1hdGguYWJzKGNkeik7XG5cbiAgICBjb25zdCBlcnJib3VuZCA9IG8zZGVycmJvdW5kQSAqIHBlcm1hbmVudDtcbiAgICBpZiAoZGV0ID4gZXJyYm91bmQgfHwgLWRldCA+IGVycmJvdW5kKSB7XG4gICAgICAgIHJldHVybiBkZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9yaWVudDNkYWRhcHQoYXgsIGF5LCBheiwgYngsIGJ5LCBieiwgY3gsIGN5LCBjeiwgZHgsIGR5LCBkeiwgcGVybWFuZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9yaWVudDNkZmFzdChheCwgYXksIGF6LCBieCwgYnksIGJ6LCBjeCwgY3ksIGN6LCBkeCwgZHksIGR6KSB7XG4gICAgY29uc3QgYWR4ID0gYXggLSBkeDtcbiAgICBjb25zdCBiZHggPSBieCAtIGR4O1xuICAgIGNvbnN0IGNkeCA9IGN4IC0gZHg7XG4gICAgY29uc3QgYWR5ID0gYXkgLSBkeTtcbiAgICBjb25zdCBiZHkgPSBieSAtIGR5O1xuICAgIGNvbnN0IGNkeSA9IGN5IC0gZHk7XG4gICAgY29uc3QgYWR6ID0gYXogLSBkejtcbiAgICBjb25zdCBiZHogPSBieiAtIGR6O1xuICAgIGNvbnN0IGNkeiA9IGN6IC0gZHo7XG5cbiAgICByZXR1cm4gYWR4ICogKGJkeSAqIGNkeiAtIGJkeiAqIGNkeSkgK1xuICAgICAgICBiZHggKiAoY2R5ICogYWR6IC0gY2R6ICogYWR5KSArXG4gICAgICAgIGNkeCAqIChhZHkgKiBiZHogLSBhZHogKiBiZHkpO1xufVxuIiwiaW1wb3J0IHtlcHNpbG9uLCBzcGxpdHRlciwgcmVzdWx0ZXJyYm91bmQsIGVzdGltYXRlLCB2ZWMsIHN1bSwgc3VtX3RocmVlLCBzY2FsZX0gZnJvbSAnLi91dGlsLmpzJztcblxuY29uc3QgaWNjZXJyYm91bmRBID0gKDEwICsgOTYgKiBlcHNpbG9uKSAqIGVwc2lsb247XG5jb25zdCBpY2NlcnJib3VuZEIgPSAoNCArIDQ4ICogZXBzaWxvbikgKiBlcHNpbG9uO1xuY29uc3QgaWNjZXJyYm91bmRDID0gKDQ0ICsgNTc2ICogZXBzaWxvbikgKiBlcHNpbG9uICogZXBzaWxvbjtcblxuY29uc3QgYmMgPSB2ZWMoNCk7XG5jb25zdCBjYSA9IHZlYyg0KTtcbmNvbnN0IGFiID0gdmVjKDQpO1xuY29uc3QgYWEgPSB2ZWMoNCk7XG5jb25zdCBiYiA9IHZlYyg0KTtcbmNvbnN0IGNjID0gdmVjKDQpO1xuY29uc3QgdSA9IHZlYyg0KTtcbmNvbnN0IHYgPSB2ZWMoNCk7XG5jb25zdCBheHRiYyA9IHZlYyg4KTtcbmNvbnN0IGF5dGJjID0gdmVjKDgpO1xuY29uc3QgYnh0Y2EgPSB2ZWMoOCk7XG5jb25zdCBieXRjYSA9IHZlYyg4KTtcbmNvbnN0IGN4dGFiID0gdmVjKDgpO1xuY29uc3QgY3l0YWIgPSB2ZWMoOCk7XG5jb25zdCBhYnQgPSB2ZWMoOCk7XG5jb25zdCBiY3QgPSB2ZWMoOCk7XG5jb25zdCBjYXQgPSB2ZWMoOCk7XG5jb25zdCBhYnR0ID0gdmVjKDQpO1xuY29uc3QgYmN0dCA9IHZlYyg0KTtcbmNvbnN0IGNhdHQgPSB2ZWMoNCk7XG5cbmNvbnN0IF84ID0gdmVjKDgpO1xuY29uc3QgXzE2ID0gdmVjKDE2KTtcbmNvbnN0IF8xNmIgPSB2ZWMoMTYpO1xuY29uc3QgXzE2YyA9IHZlYygxNik7XG5jb25zdCBfMzIgPSB2ZWMoMzIpO1xuY29uc3QgXzMyYiA9IHZlYygzMik7XG5jb25zdCBfNDggPSB2ZWMoNDgpO1xuY29uc3QgXzY0ID0gdmVjKDY0KTtcblxubGV0IGZpbiA9IHZlYygxMTUyKTtcbmxldCBmaW4yID0gdmVjKDExNTIpO1xuXG5mdW5jdGlvbiBmaW5hZGQoZmlubGVuLCBhLCBhbGVuKSB7XG4gICAgZmlubGVuID0gc3VtKGZpbmxlbiwgZmluLCBhLCBhbGVuLCBmaW4yKTtcbiAgICBjb25zdCB0bXAgPSBmaW47IGZpbiA9IGZpbjI7IGZpbjIgPSB0bXA7XG4gICAgcmV0dXJuIGZpbmxlbjtcbn1cblxuZnVuY3Rpb24gaW5jaXJjbGVhZGFwdChheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBkeCwgZHksIHBlcm1hbmVudCkge1xuICAgIGxldCBmaW5sZW47XG4gICAgbGV0IGFkeHRhaWwsIGJkeHRhaWwsIGNkeHRhaWwsIGFkeXRhaWwsIGJkeXRhaWwsIGNkeXRhaWw7XG4gICAgbGV0IGF4dGJjbGVuLCBheXRiY2xlbiwgYnh0Y2FsZW4sIGJ5dGNhbGVuLCBjeHRhYmxlbiwgY3l0YWJsZW47XG4gICAgbGV0IGFidGxlbiwgYmN0bGVuLCBjYXRsZW47XG4gICAgbGV0IGFidHRsZW4sIGJjdHRsZW4sIGNhdHRsZW47XG4gICAgbGV0IG4xLCBuMDtcblxuICAgIGxldCBidmlydCwgYywgYWhpLCBhbG8sIGJoaSwgYmxvLCBfaSwgX2osIF8wLCBzMSwgczAsIHQxLCB0MCwgdTM7XG5cbiAgICBjb25zdCBhZHggPSBheCAtIGR4O1xuICAgIGNvbnN0IGJkeCA9IGJ4IC0gZHg7XG4gICAgY29uc3QgY2R4ID0gY3ggLSBkeDtcbiAgICBjb25zdCBhZHkgPSBheSAtIGR5O1xuICAgIGNvbnN0IGJkeSA9IGJ5IC0gZHk7XG4gICAgY29uc3QgY2R5ID0gY3kgLSBkeTtcblxuICAgIHMxID0gYmR4ICogY2R5O1xuICAgIGMgPSBzcGxpdHRlciAqIGJkeDtcbiAgICBhaGkgPSBjIC0gKGMgLSBiZHgpO1xuICAgIGFsbyA9IGJkeCAtIGFoaTtcbiAgICBjID0gc3BsaXR0ZXIgKiBjZHk7XG4gICAgYmhpID0gYyAtIChjIC0gY2R5KTtcbiAgICBibG8gPSBjZHkgLSBiaGk7XG4gICAgczAgPSBhbG8gKiBibG8gLSAoczEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIHQxID0gY2R4ICogYmR5O1xuICAgIGMgPSBzcGxpdHRlciAqIGNkeDtcbiAgICBhaGkgPSBjIC0gKGMgLSBjZHgpO1xuICAgIGFsbyA9IGNkeCAtIGFoaTtcbiAgICBjID0gc3BsaXR0ZXIgKiBiZHk7XG4gICAgYmhpID0gYyAtIChjIC0gYmR5KTtcbiAgICBibG8gPSBiZHkgLSBiaGk7XG4gICAgdDAgPSBhbG8gKiBibG8gLSAodDEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIF9pID0gczAgLSB0MDtcbiAgICBidmlydCA9IHMwIC0gX2k7XG4gICAgYmNbMF0gPSBzMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQwKTtcbiAgICBfaiA9IHMxICsgX2k7XG4gICAgYnZpcnQgPSBfaiAtIHMxO1xuICAgIF8wID0gczEgLSAoX2ogLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgX2kgPSBfMCAtIHQxO1xuICAgIGJ2aXJ0ID0gXzAgLSBfaTtcbiAgICBiY1sxXSA9IF8wIC0gKF9pICsgYnZpcnQpICsgKGJ2aXJ0IC0gdDEpO1xuICAgIHUzID0gX2ogKyBfaTtcbiAgICBidmlydCA9IHUzIC0gX2o7XG4gICAgYmNbMl0gPSBfaiAtICh1MyAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICBiY1szXSA9IHUzO1xuICAgIHMxID0gY2R4ICogYWR5O1xuICAgIGMgPSBzcGxpdHRlciAqIGNkeDtcbiAgICBhaGkgPSBjIC0gKGMgLSBjZHgpO1xuICAgIGFsbyA9IGNkeCAtIGFoaTtcbiAgICBjID0gc3BsaXR0ZXIgKiBhZHk7XG4gICAgYmhpID0gYyAtIChjIC0gYWR5KTtcbiAgICBibG8gPSBhZHkgLSBiaGk7XG4gICAgczAgPSBhbG8gKiBibG8gLSAoczEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIHQxID0gYWR4ICogY2R5O1xuICAgIGMgPSBzcGxpdHRlciAqIGFkeDtcbiAgICBhaGkgPSBjIC0gKGMgLSBhZHgpO1xuICAgIGFsbyA9IGFkeCAtIGFoaTtcbiAgICBjID0gc3BsaXR0ZXIgKiBjZHk7XG4gICAgYmhpID0gYyAtIChjIC0gY2R5KTtcbiAgICBibG8gPSBjZHkgLSBiaGk7XG4gICAgdDAgPSBhbG8gKiBibG8gLSAodDEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIF9pID0gczAgLSB0MDtcbiAgICBidmlydCA9IHMwIC0gX2k7XG4gICAgY2FbMF0gPSBzMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQwKTtcbiAgICBfaiA9IHMxICsgX2k7XG4gICAgYnZpcnQgPSBfaiAtIHMxO1xuICAgIF8wID0gczEgLSAoX2ogLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgX2kgPSBfMCAtIHQxO1xuICAgIGJ2aXJ0ID0gXzAgLSBfaTtcbiAgICBjYVsxXSA9IF8wIC0gKF9pICsgYnZpcnQpICsgKGJ2aXJ0IC0gdDEpO1xuICAgIHUzID0gX2ogKyBfaTtcbiAgICBidmlydCA9IHUzIC0gX2o7XG4gICAgY2FbMl0gPSBfaiAtICh1MyAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICBjYVszXSA9IHUzO1xuICAgIHMxID0gYWR4ICogYmR5O1xuICAgIGMgPSBzcGxpdHRlciAqIGFkeDtcbiAgICBhaGkgPSBjIC0gKGMgLSBhZHgpO1xuICAgIGFsbyA9IGFkeCAtIGFoaTtcbiAgICBjID0gc3BsaXR0ZXIgKiBiZHk7XG4gICAgYmhpID0gYyAtIChjIC0gYmR5KTtcbiAgICBibG8gPSBiZHkgLSBiaGk7XG4gICAgczAgPSBhbG8gKiBibG8gLSAoczEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIHQxID0gYmR4ICogYWR5O1xuICAgIGMgPSBzcGxpdHRlciAqIGJkeDtcbiAgICBhaGkgPSBjIC0gKGMgLSBiZHgpO1xuICAgIGFsbyA9IGJkeCAtIGFoaTtcbiAgICBjID0gc3BsaXR0ZXIgKiBhZHk7XG4gICAgYmhpID0gYyAtIChjIC0gYWR5KTtcbiAgICBibG8gPSBhZHkgLSBiaGk7XG4gICAgdDAgPSBhbG8gKiBibG8gLSAodDEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIF9pID0gczAgLSB0MDtcbiAgICBidmlydCA9IHMwIC0gX2k7XG4gICAgYWJbMF0gPSBzMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQwKTtcbiAgICBfaiA9IHMxICsgX2k7XG4gICAgYnZpcnQgPSBfaiAtIHMxO1xuICAgIF8wID0gczEgLSAoX2ogLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgX2kgPSBfMCAtIHQxO1xuICAgIGJ2aXJ0ID0gXzAgLSBfaTtcbiAgICBhYlsxXSA9IF8wIC0gKF9pICsgYnZpcnQpICsgKGJ2aXJ0IC0gdDEpO1xuICAgIHUzID0gX2ogKyBfaTtcbiAgICBidmlydCA9IHUzIC0gX2o7XG4gICAgYWJbMl0gPSBfaiAtICh1MyAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICBhYlszXSA9IHUzO1xuXG4gICAgZmlubGVuID0gc3VtKFxuICAgICAgICBzdW0oXG4gICAgICAgICAgICBzdW0oXG4gICAgICAgICAgICAgICAgc2NhbGUoc2NhbGUoNCwgYmMsIGFkeCwgXzgpLCBfOCwgYWR4LCBfMTYpLCBfMTYsXG4gICAgICAgICAgICAgICAgc2NhbGUoc2NhbGUoNCwgYmMsIGFkeSwgXzgpLCBfOCwgYWR5LCBfMTZiKSwgXzE2YiwgXzMyKSwgXzMyLFxuICAgICAgICAgICAgc3VtKFxuICAgICAgICAgICAgICAgIHNjYWxlKHNjYWxlKDQsIGNhLCBiZHgsIF84KSwgXzgsIGJkeCwgXzE2KSwgXzE2LFxuICAgICAgICAgICAgICAgIHNjYWxlKHNjYWxlKDQsIGNhLCBiZHksIF84KSwgXzgsIGJkeSwgXzE2YiksIF8xNmIsIF8zMmIpLCBfMzJiLCBfNjQpLCBfNjQsXG4gICAgICAgIHN1bShcbiAgICAgICAgICAgIHNjYWxlKHNjYWxlKDQsIGFiLCBjZHgsIF84KSwgXzgsIGNkeCwgXzE2KSwgXzE2LFxuICAgICAgICAgICAgc2NhbGUoc2NhbGUoNCwgYWIsIGNkeSwgXzgpLCBfOCwgY2R5LCBfMTZiKSwgXzE2YiwgXzMyKSwgXzMyLCBmaW4pO1xuXG4gICAgbGV0IGRldCA9IGVzdGltYXRlKGZpbmxlbiwgZmluKTtcbiAgICBsZXQgZXJyYm91bmQgPSBpY2NlcnJib3VuZEIgKiBwZXJtYW5lbnQ7XG4gICAgaWYgKGRldCA+PSBlcnJib3VuZCB8fCAtZGV0ID49IGVycmJvdW5kKSB7XG4gICAgICAgIHJldHVybiBkZXQ7XG4gICAgfVxuXG4gICAgYnZpcnQgPSBheCAtIGFkeDtcbiAgICBhZHh0YWlsID0gYXggLSAoYWR4ICsgYnZpcnQpICsgKGJ2aXJ0IC0gZHgpO1xuICAgIGJ2aXJ0ID0gYXkgLSBhZHk7XG4gICAgYWR5dGFpbCA9IGF5IC0gKGFkeSArIGJ2aXJ0KSArIChidmlydCAtIGR5KTtcbiAgICBidmlydCA9IGJ4IC0gYmR4O1xuICAgIGJkeHRhaWwgPSBieCAtIChiZHggKyBidmlydCkgKyAoYnZpcnQgLSBkeCk7XG4gICAgYnZpcnQgPSBieSAtIGJkeTtcbiAgICBiZHl0YWlsID0gYnkgLSAoYmR5ICsgYnZpcnQpICsgKGJ2aXJ0IC0gZHkpO1xuICAgIGJ2aXJ0ID0gY3ggLSBjZHg7XG4gICAgY2R4dGFpbCA9IGN4IC0gKGNkeCArIGJ2aXJ0KSArIChidmlydCAtIGR4KTtcbiAgICBidmlydCA9IGN5IC0gY2R5O1xuICAgIGNkeXRhaWwgPSBjeSAtIChjZHkgKyBidmlydCkgKyAoYnZpcnQgLSBkeSk7XG4gICAgaWYgKGFkeHRhaWwgPT09IDAgJiYgYmR4dGFpbCA9PT0gMCAmJiBjZHh0YWlsID09PSAwICYmIGFkeXRhaWwgPT09IDAgJiYgYmR5dGFpbCA9PT0gMCAmJiBjZHl0YWlsID09PSAwKSB7XG4gICAgICAgIHJldHVybiBkZXQ7XG4gICAgfVxuXG4gICAgZXJyYm91bmQgPSBpY2NlcnJib3VuZEMgKiBwZXJtYW5lbnQgKyByZXN1bHRlcnJib3VuZCAqIE1hdGguYWJzKGRldCk7XG4gICAgZGV0ICs9ICgoYWR4ICogYWR4ICsgYWR5ICogYWR5KSAqICgoYmR4ICogY2R5dGFpbCArIGNkeSAqIGJkeHRhaWwpIC0gKGJkeSAqIGNkeHRhaWwgKyBjZHggKiBiZHl0YWlsKSkgK1xuICAgICAgICAyICogKGFkeCAqIGFkeHRhaWwgKyBhZHkgKiBhZHl0YWlsKSAqIChiZHggKiBjZHkgLSBiZHkgKiBjZHgpKSArXG4gICAgICAgICgoYmR4ICogYmR4ICsgYmR5ICogYmR5KSAqICgoY2R4ICogYWR5dGFpbCArIGFkeSAqIGNkeHRhaWwpIC0gKGNkeSAqIGFkeHRhaWwgKyBhZHggKiBjZHl0YWlsKSkgK1xuICAgICAgICAyICogKGJkeCAqIGJkeHRhaWwgKyBiZHkgKiBiZHl0YWlsKSAqIChjZHggKiBhZHkgLSBjZHkgKiBhZHgpKSArXG4gICAgICAgICgoY2R4ICogY2R4ICsgY2R5ICogY2R5KSAqICgoYWR4ICogYmR5dGFpbCArIGJkeSAqIGFkeHRhaWwpIC0gKGFkeSAqIGJkeHRhaWwgKyBiZHggKiBhZHl0YWlsKSkgK1xuICAgICAgICAyICogKGNkeCAqIGNkeHRhaWwgKyBjZHkgKiBjZHl0YWlsKSAqIChhZHggKiBiZHkgLSBhZHkgKiBiZHgpKTtcblxuICAgIGlmIChkZXQgPj0gZXJyYm91bmQgfHwgLWRldCA+PSBlcnJib3VuZCkge1xuICAgICAgICByZXR1cm4gZGV0O1xuICAgIH1cblxuICAgIGlmIChiZHh0YWlsICE9PSAwIHx8IGJkeXRhaWwgIT09IDAgfHwgY2R4dGFpbCAhPT0gMCB8fCBjZHl0YWlsICE9PSAwKSB7XG4gICAgICAgIHMxID0gYWR4ICogYWR4O1xuICAgICAgICBjID0gc3BsaXR0ZXIgKiBhZHg7XG4gICAgICAgIGFoaSA9IGMgLSAoYyAtIGFkeCk7XG4gICAgICAgIGFsbyA9IGFkeCAtIGFoaTtcbiAgICAgICAgczAgPSBhbG8gKiBhbG8gLSAoczEgLSBhaGkgKiBhaGkgLSAoYWhpICsgYWhpKSAqIGFsbyk7XG4gICAgICAgIHQxID0gYWR5ICogYWR5O1xuICAgICAgICBjID0gc3BsaXR0ZXIgKiBhZHk7XG4gICAgICAgIGFoaSA9IGMgLSAoYyAtIGFkeSk7XG4gICAgICAgIGFsbyA9IGFkeSAtIGFoaTtcbiAgICAgICAgdDAgPSBhbG8gKiBhbG8gLSAodDEgLSBhaGkgKiBhaGkgLSAoYWhpICsgYWhpKSAqIGFsbyk7XG4gICAgICAgIF9pID0gczAgKyB0MDtcbiAgICAgICAgYnZpcnQgPSBfaSAtIHMwO1xuICAgICAgICBhYVswXSA9IHMwIC0gKF9pIC0gYnZpcnQpICsgKHQwIC0gYnZpcnQpO1xuICAgICAgICBfaiA9IHMxICsgX2k7XG4gICAgICAgIGJ2aXJ0ID0gX2ogLSBzMTtcbiAgICAgICAgXzAgPSBzMSAtIChfaiAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICAgICAgX2kgPSBfMCArIHQxO1xuICAgICAgICBidmlydCA9IF9pIC0gXzA7XG4gICAgICAgIGFhWzFdID0gXzAgLSAoX2kgLSBidmlydCkgKyAodDEgLSBidmlydCk7XG4gICAgICAgIHUzID0gX2ogKyBfaTtcbiAgICAgICAgYnZpcnQgPSB1MyAtIF9qO1xuICAgICAgICBhYVsyXSA9IF9qIC0gKHUzIC0gYnZpcnQpICsgKF9pIC0gYnZpcnQpO1xuICAgICAgICBhYVszXSA9IHUzO1xuICAgIH1cbiAgICBpZiAoY2R4dGFpbCAhPT0gMCB8fCBjZHl0YWlsICE9PSAwIHx8IGFkeHRhaWwgIT09IDAgfHwgYWR5dGFpbCAhPT0gMCkge1xuICAgICAgICBzMSA9IGJkeCAqIGJkeDtcbiAgICAgICAgYyA9IHNwbGl0dGVyICogYmR4O1xuICAgICAgICBhaGkgPSBjIC0gKGMgLSBiZHgpO1xuICAgICAgICBhbG8gPSBiZHggLSBhaGk7XG4gICAgICAgIHMwID0gYWxvICogYWxvIC0gKHMxIC0gYWhpICogYWhpIC0gKGFoaSArIGFoaSkgKiBhbG8pO1xuICAgICAgICB0MSA9IGJkeSAqIGJkeTtcbiAgICAgICAgYyA9IHNwbGl0dGVyICogYmR5O1xuICAgICAgICBhaGkgPSBjIC0gKGMgLSBiZHkpO1xuICAgICAgICBhbG8gPSBiZHkgLSBhaGk7XG4gICAgICAgIHQwID0gYWxvICogYWxvIC0gKHQxIC0gYWhpICogYWhpIC0gKGFoaSArIGFoaSkgKiBhbG8pO1xuICAgICAgICBfaSA9IHMwICsgdDA7XG4gICAgICAgIGJ2aXJ0ID0gX2kgLSBzMDtcbiAgICAgICAgYmJbMF0gPSBzMCAtIChfaSAtIGJ2aXJ0KSArICh0MCAtIGJ2aXJ0KTtcbiAgICAgICAgX2ogPSBzMSArIF9pO1xuICAgICAgICBidmlydCA9IF9qIC0gczE7XG4gICAgICAgIF8wID0gczEgLSAoX2ogLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgICAgIF9pID0gXzAgKyB0MTtcbiAgICAgICAgYnZpcnQgPSBfaSAtIF8wO1xuICAgICAgICBiYlsxXSA9IF8wIC0gKF9pIC0gYnZpcnQpICsgKHQxIC0gYnZpcnQpO1xuICAgICAgICB1MyA9IF9qICsgX2k7XG4gICAgICAgIGJ2aXJ0ID0gdTMgLSBfajtcbiAgICAgICAgYmJbMl0gPSBfaiAtICh1MyAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICAgICAgYmJbM10gPSB1MztcbiAgICB9XG4gICAgaWYgKGFkeHRhaWwgIT09IDAgfHwgYWR5dGFpbCAhPT0gMCB8fCBiZHh0YWlsICE9PSAwIHx8IGJkeXRhaWwgIT09IDApIHtcbiAgICAgICAgczEgPSBjZHggKiBjZHg7XG4gICAgICAgIGMgPSBzcGxpdHRlciAqIGNkeDtcbiAgICAgICAgYWhpID0gYyAtIChjIC0gY2R4KTtcbiAgICAgICAgYWxvID0gY2R4IC0gYWhpO1xuICAgICAgICBzMCA9IGFsbyAqIGFsbyAtIChzMSAtIGFoaSAqIGFoaSAtIChhaGkgKyBhaGkpICogYWxvKTtcbiAgICAgICAgdDEgPSBjZHkgKiBjZHk7XG4gICAgICAgIGMgPSBzcGxpdHRlciAqIGNkeTtcbiAgICAgICAgYWhpID0gYyAtIChjIC0gY2R5KTtcbiAgICAgICAgYWxvID0gY2R5IC0gYWhpO1xuICAgICAgICB0MCA9IGFsbyAqIGFsbyAtICh0MSAtIGFoaSAqIGFoaSAtIChhaGkgKyBhaGkpICogYWxvKTtcbiAgICAgICAgX2kgPSBzMCArIHQwO1xuICAgICAgICBidmlydCA9IF9pIC0gczA7XG4gICAgICAgIGNjWzBdID0gczAgLSAoX2kgLSBidmlydCkgKyAodDAgLSBidmlydCk7XG4gICAgICAgIF9qID0gczEgKyBfaTtcbiAgICAgICAgYnZpcnQgPSBfaiAtIHMxO1xuICAgICAgICBfMCA9IHMxIC0gKF9qIC0gYnZpcnQpICsgKF9pIC0gYnZpcnQpO1xuICAgICAgICBfaSA9IF8wICsgdDE7XG4gICAgICAgIGJ2aXJ0ID0gX2kgLSBfMDtcbiAgICAgICAgY2NbMV0gPSBfMCAtIChfaSAtIGJ2aXJ0KSArICh0MSAtIGJ2aXJ0KTtcbiAgICAgICAgdTMgPSBfaiArIF9pO1xuICAgICAgICBidmlydCA9IHUzIC0gX2o7XG4gICAgICAgIGNjWzJdID0gX2ogLSAodTMgLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgICAgIGNjWzNdID0gdTM7XG4gICAgfVxuXG4gICAgaWYgKGFkeHRhaWwgIT09IDApIHtcbiAgICAgICAgYXh0YmNsZW4gPSBzY2FsZSg0LCBiYywgYWR4dGFpbCwgYXh0YmMpO1xuICAgICAgICBmaW5sZW4gPSBmaW5hZGQoZmlubGVuLCBzdW1fdGhyZWUoXG4gICAgICAgICAgICBzY2FsZShheHRiY2xlbiwgYXh0YmMsIDIgKiBhZHgsIF8xNiksIF8xNixcbiAgICAgICAgICAgIHNjYWxlKHNjYWxlKDQsIGNjLCBhZHh0YWlsLCBfOCksIF84LCBiZHksIF8xNmIpLCBfMTZiLFxuICAgICAgICAgICAgc2NhbGUoc2NhbGUoNCwgYmIsIGFkeHRhaWwsIF84KSwgXzgsIC1jZHksIF8xNmMpLCBfMTZjLCBfMzIsIF80OCksIF80OCk7XG4gICAgfVxuICAgIGlmIChhZHl0YWlsICE9PSAwKSB7XG4gICAgICAgIGF5dGJjbGVuID0gc2NhbGUoNCwgYmMsIGFkeXRhaWwsIGF5dGJjKTtcbiAgICAgICAgZmlubGVuID0gZmluYWRkKGZpbmxlbiwgc3VtX3RocmVlKFxuICAgICAgICAgICAgc2NhbGUoYXl0YmNsZW4sIGF5dGJjLCAyICogYWR5LCBfMTYpLCBfMTYsXG4gICAgICAgICAgICBzY2FsZShzY2FsZSg0LCBiYiwgYWR5dGFpbCwgXzgpLCBfOCwgY2R4LCBfMTZiKSwgXzE2YixcbiAgICAgICAgICAgIHNjYWxlKHNjYWxlKDQsIGNjLCBhZHl0YWlsLCBfOCksIF84LCAtYmR4LCBfMTZjKSwgXzE2YywgXzMyLCBfNDgpLCBfNDgpO1xuICAgIH1cbiAgICBpZiAoYmR4dGFpbCAhPT0gMCkge1xuICAgICAgICBieHRjYWxlbiA9IHNjYWxlKDQsIGNhLCBiZHh0YWlsLCBieHRjYSk7XG4gICAgICAgIGZpbmxlbiA9IGZpbmFkZChmaW5sZW4sIHN1bV90aHJlZShcbiAgICAgICAgICAgIHNjYWxlKGJ4dGNhbGVuLCBieHRjYSwgMiAqIGJkeCwgXzE2KSwgXzE2LFxuICAgICAgICAgICAgc2NhbGUoc2NhbGUoNCwgYWEsIGJkeHRhaWwsIF84KSwgXzgsIGNkeSwgXzE2YiksIF8xNmIsXG4gICAgICAgICAgICBzY2FsZShzY2FsZSg0LCBjYywgYmR4dGFpbCwgXzgpLCBfOCwgLWFkeSwgXzE2YyksIF8xNmMsIF8zMiwgXzQ4KSwgXzQ4KTtcbiAgICB9XG4gICAgaWYgKGJkeXRhaWwgIT09IDApIHtcbiAgICAgICAgYnl0Y2FsZW4gPSBzY2FsZSg0LCBjYSwgYmR5dGFpbCwgYnl0Y2EpO1xuICAgICAgICBmaW5sZW4gPSBmaW5hZGQoZmlubGVuLCBzdW1fdGhyZWUoXG4gICAgICAgICAgICBzY2FsZShieXRjYWxlbiwgYnl0Y2EsIDIgKiBiZHksIF8xNiksIF8xNixcbiAgICAgICAgICAgIHNjYWxlKHNjYWxlKDQsIGNjLCBiZHl0YWlsLCBfOCksIF84LCBhZHgsIF8xNmIpLCBfMTZiLFxuICAgICAgICAgICAgc2NhbGUoc2NhbGUoNCwgYWEsIGJkeXRhaWwsIF84KSwgXzgsIC1jZHgsIF8xNmMpLCBfMTZjLCBfMzIsIF80OCksIF80OCk7XG4gICAgfVxuICAgIGlmIChjZHh0YWlsICE9PSAwKSB7XG4gICAgICAgIGN4dGFibGVuID0gc2NhbGUoNCwgYWIsIGNkeHRhaWwsIGN4dGFiKTtcbiAgICAgICAgZmlubGVuID0gZmluYWRkKGZpbmxlbiwgc3VtX3RocmVlKFxuICAgICAgICAgICAgc2NhbGUoY3h0YWJsZW4sIGN4dGFiLCAyICogY2R4LCBfMTYpLCBfMTYsXG4gICAgICAgICAgICBzY2FsZShzY2FsZSg0LCBiYiwgY2R4dGFpbCwgXzgpLCBfOCwgYWR5LCBfMTZiKSwgXzE2YixcbiAgICAgICAgICAgIHNjYWxlKHNjYWxlKDQsIGFhLCBjZHh0YWlsLCBfOCksIF84LCAtYmR5LCBfMTZjKSwgXzE2YywgXzMyLCBfNDgpLCBfNDgpO1xuICAgIH1cbiAgICBpZiAoY2R5dGFpbCAhPT0gMCkge1xuICAgICAgICBjeXRhYmxlbiA9IHNjYWxlKDQsIGFiLCBjZHl0YWlsLCBjeXRhYik7XG4gICAgICAgIGZpbmxlbiA9IGZpbmFkZChmaW5sZW4sIHN1bV90aHJlZShcbiAgICAgICAgICAgIHNjYWxlKGN5dGFibGVuLCBjeXRhYiwgMiAqIGNkeSwgXzE2KSwgXzE2LFxuICAgICAgICAgICAgc2NhbGUoc2NhbGUoNCwgYWEsIGNkeXRhaWwsIF84KSwgXzgsIGJkeCwgXzE2YiksIF8xNmIsXG4gICAgICAgICAgICBzY2FsZShzY2FsZSg0LCBiYiwgY2R5dGFpbCwgXzgpLCBfOCwgLWFkeCwgXzE2YyksIF8xNmMsIF8zMiwgXzQ4KSwgXzQ4KTtcbiAgICB9XG5cbiAgICBpZiAoYWR4dGFpbCAhPT0gMCB8fCBhZHl0YWlsICE9PSAwKSB7XG4gICAgICAgIGlmIChiZHh0YWlsICE9PSAwIHx8IGJkeXRhaWwgIT09IDAgfHwgY2R4dGFpbCAhPT0gMCB8fCBjZHl0YWlsICE9PSAwKSB7XG4gICAgICAgICAgICBzMSA9IGJkeHRhaWwgKiBjZHk7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBiZHh0YWlsO1xuICAgICAgICAgICAgYWhpID0gYyAtIChjIC0gYmR4dGFpbCk7XG4gICAgICAgICAgICBhbG8gPSBiZHh0YWlsIC0gYWhpO1xuICAgICAgICAgICAgYyA9IHNwbGl0dGVyICogY2R5O1xuICAgICAgICAgICAgYmhpID0gYyAtIChjIC0gY2R5KTtcbiAgICAgICAgICAgIGJsbyA9IGNkeSAtIGJoaTtcbiAgICAgICAgICAgIHMwID0gYWxvICogYmxvIC0gKHMxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICAgICAgICAgIHQxID0gYmR4ICogY2R5dGFpbDtcbiAgICAgICAgICAgIGMgPSBzcGxpdHRlciAqIGJkeDtcbiAgICAgICAgICAgIGFoaSA9IGMgLSAoYyAtIGJkeCk7XG4gICAgICAgICAgICBhbG8gPSBiZHggLSBhaGk7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBjZHl0YWlsO1xuICAgICAgICAgICAgYmhpID0gYyAtIChjIC0gY2R5dGFpbCk7XG4gICAgICAgICAgICBibG8gPSBjZHl0YWlsIC0gYmhpO1xuICAgICAgICAgICAgdDAgPSBhbG8gKiBibG8gLSAodDEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgICAgICAgICAgX2kgPSBzMCArIHQwO1xuICAgICAgICAgICAgYnZpcnQgPSBfaSAtIHMwO1xuICAgICAgICAgICAgdVswXSA9IHMwIC0gKF9pIC0gYnZpcnQpICsgKHQwIC0gYnZpcnQpO1xuICAgICAgICAgICAgX2ogPSBzMSArIF9pO1xuICAgICAgICAgICAgYnZpcnQgPSBfaiAtIHMxO1xuICAgICAgICAgICAgXzAgPSBzMSAtIChfaiAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICAgICAgICAgIF9pID0gXzAgKyB0MTtcbiAgICAgICAgICAgIGJ2aXJ0ID0gX2kgLSBfMDtcbiAgICAgICAgICAgIHVbMV0gPSBfMCAtIChfaSAtIGJ2aXJ0KSArICh0MSAtIGJ2aXJ0KTtcbiAgICAgICAgICAgIHUzID0gX2ogKyBfaTtcbiAgICAgICAgICAgIGJ2aXJ0ID0gdTMgLSBfajtcbiAgICAgICAgICAgIHVbMl0gPSBfaiAtICh1MyAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICAgICAgICAgIHVbM10gPSB1MztcbiAgICAgICAgICAgIHMxID0gY2R4dGFpbCAqIC1iZHk7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBjZHh0YWlsO1xuICAgICAgICAgICAgYWhpID0gYyAtIChjIC0gY2R4dGFpbCk7XG4gICAgICAgICAgICBhbG8gPSBjZHh0YWlsIC0gYWhpO1xuICAgICAgICAgICAgYyA9IHNwbGl0dGVyICogLWJkeTtcbiAgICAgICAgICAgIGJoaSA9IGMgLSAoYyAtIC1iZHkpO1xuICAgICAgICAgICAgYmxvID0gLWJkeSAtIGJoaTtcbiAgICAgICAgICAgIHMwID0gYWxvICogYmxvIC0gKHMxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICAgICAgICAgIHQxID0gY2R4ICogLWJkeXRhaWw7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBjZHg7XG4gICAgICAgICAgICBhaGkgPSBjIC0gKGMgLSBjZHgpO1xuICAgICAgICAgICAgYWxvID0gY2R4IC0gYWhpO1xuICAgICAgICAgICAgYyA9IHNwbGl0dGVyICogLWJkeXRhaWw7XG4gICAgICAgICAgICBiaGkgPSBjIC0gKGMgLSAtYmR5dGFpbCk7XG4gICAgICAgICAgICBibG8gPSAtYmR5dGFpbCAtIGJoaTtcbiAgICAgICAgICAgIHQwID0gYWxvICogYmxvIC0gKHQxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICAgICAgICAgIF9pID0gczAgKyB0MDtcbiAgICAgICAgICAgIGJ2aXJ0ID0gX2kgLSBzMDtcbiAgICAgICAgICAgIHZbMF0gPSBzMCAtIChfaSAtIGJ2aXJ0KSArICh0MCAtIGJ2aXJ0KTtcbiAgICAgICAgICAgIF9qID0gczEgKyBfaTtcbiAgICAgICAgICAgIGJ2aXJ0ID0gX2ogLSBzMTtcbiAgICAgICAgICAgIF8wID0gczEgLSAoX2ogLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgICAgICAgICBfaSA9IF8wICsgdDE7XG4gICAgICAgICAgICBidmlydCA9IF9pIC0gXzA7XG4gICAgICAgICAgICB2WzFdID0gXzAgLSAoX2kgLSBidmlydCkgKyAodDEgLSBidmlydCk7XG4gICAgICAgICAgICB1MyA9IF9qICsgX2k7XG4gICAgICAgICAgICBidmlydCA9IHUzIC0gX2o7XG4gICAgICAgICAgICB2WzJdID0gX2ogLSAodTMgLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgICAgICAgICB2WzNdID0gdTM7XG4gICAgICAgICAgICBiY3RsZW4gPSBzdW0oNCwgdSwgNCwgdiwgYmN0KTtcbiAgICAgICAgICAgIHMxID0gYmR4dGFpbCAqIGNkeXRhaWw7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBiZHh0YWlsO1xuICAgICAgICAgICAgYWhpID0gYyAtIChjIC0gYmR4dGFpbCk7XG4gICAgICAgICAgICBhbG8gPSBiZHh0YWlsIC0gYWhpO1xuICAgICAgICAgICAgYyA9IHNwbGl0dGVyICogY2R5dGFpbDtcbiAgICAgICAgICAgIGJoaSA9IGMgLSAoYyAtIGNkeXRhaWwpO1xuICAgICAgICAgICAgYmxvID0gY2R5dGFpbCAtIGJoaTtcbiAgICAgICAgICAgIHMwID0gYWxvICogYmxvIC0gKHMxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICAgICAgICAgIHQxID0gY2R4dGFpbCAqIGJkeXRhaWw7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBjZHh0YWlsO1xuICAgICAgICAgICAgYWhpID0gYyAtIChjIC0gY2R4dGFpbCk7XG4gICAgICAgICAgICBhbG8gPSBjZHh0YWlsIC0gYWhpO1xuICAgICAgICAgICAgYyA9IHNwbGl0dGVyICogYmR5dGFpbDtcbiAgICAgICAgICAgIGJoaSA9IGMgLSAoYyAtIGJkeXRhaWwpO1xuICAgICAgICAgICAgYmxvID0gYmR5dGFpbCAtIGJoaTtcbiAgICAgICAgICAgIHQwID0gYWxvICogYmxvIC0gKHQxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICAgICAgICAgIF9pID0gczAgLSB0MDtcbiAgICAgICAgICAgIGJ2aXJ0ID0gczAgLSBfaTtcbiAgICAgICAgICAgIGJjdHRbMF0gPSBzMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQwKTtcbiAgICAgICAgICAgIF9qID0gczEgKyBfaTtcbiAgICAgICAgICAgIGJ2aXJ0ID0gX2ogLSBzMTtcbiAgICAgICAgICAgIF8wID0gczEgLSAoX2ogLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgICAgICAgICBfaSA9IF8wIC0gdDE7XG4gICAgICAgICAgICBidmlydCA9IF8wIC0gX2k7XG4gICAgICAgICAgICBiY3R0WzFdID0gXzAgLSAoX2kgKyBidmlydCkgKyAoYnZpcnQgLSB0MSk7XG4gICAgICAgICAgICB1MyA9IF9qICsgX2k7XG4gICAgICAgICAgICBidmlydCA9IHUzIC0gX2o7XG4gICAgICAgICAgICBiY3R0WzJdID0gX2ogLSAodTMgLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgICAgICAgICBiY3R0WzNdID0gdTM7XG4gICAgICAgICAgICBiY3R0bGVuID0gNDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJjdFswXSA9IDA7XG4gICAgICAgICAgICBiY3RsZW4gPSAxO1xuICAgICAgICAgICAgYmN0dFswXSA9IDA7XG4gICAgICAgICAgICBiY3R0bGVuID0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWR4dGFpbCAhPT0gMCkge1xuICAgICAgICAgICAgY29uc3QgbGVuID0gc2NhbGUoYmN0bGVuLCBiY3QsIGFkeHRhaWwsIF8xNmMpO1xuICAgICAgICAgICAgZmlubGVuID0gZmluYWRkKGZpbmxlbiwgc3VtKFxuICAgICAgICAgICAgICAgIHNjYWxlKGF4dGJjbGVuLCBheHRiYywgYWR4dGFpbCwgXzE2KSwgXzE2LFxuICAgICAgICAgICAgICAgIHNjYWxlKGxlbiwgXzE2YywgMiAqIGFkeCwgXzMyKSwgXzMyLCBfNDgpLCBfNDgpO1xuXG4gICAgICAgICAgICBjb25zdCBsZW4yID0gc2NhbGUoYmN0dGxlbiwgYmN0dCwgYWR4dGFpbCwgXzgpO1xuICAgICAgICAgICAgZmlubGVuID0gZmluYWRkKGZpbmxlbiwgc3VtX3RocmVlKFxuICAgICAgICAgICAgICAgIHNjYWxlKGxlbjIsIF84LCAyICogYWR4LCBfMTYpLCBfMTYsXG4gICAgICAgICAgICAgICAgc2NhbGUobGVuMiwgXzgsIGFkeHRhaWwsIF8xNmIpLCBfMTZiLFxuICAgICAgICAgICAgICAgIHNjYWxlKGxlbiwgXzE2YywgYWR4dGFpbCwgXzMyKSwgXzMyLCBfMzJiLCBfNjQpLCBfNjQpO1xuXG4gICAgICAgICAgICBpZiAoYmR5dGFpbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGZpbmxlbiA9IGZpbmFkZChmaW5sZW4sIHNjYWxlKHNjYWxlKDQsIGNjLCBhZHh0YWlsLCBfOCksIF84LCBiZHl0YWlsLCBfMTYpLCBfMTYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNkeXRhaWwgIT09IDApIHtcbiAgICAgICAgICAgICAgICBmaW5sZW4gPSBmaW5hZGQoZmlubGVuLCBzY2FsZShzY2FsZSg0LCBiYiwgLWFkeHRhaWwsIF84KSwgXzgsIGNkeXRhaWwsIF8xNiksIF8xNik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFkeXRhaWwgIT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IHNjYWxlKGJjdGxlbiwgYmN0LCBhZHl0YWlsLCBfMTZjKTtcbiAgICAgICAgICAgIGZpbmxlbiA9IGZpbmFkZChmaW5sZW4sIHN1bShcbiAgICAgICAgICAgICAgICBzY2FsZShheXRiY2xlbiwgYXl0YmMsIGFkeXRhaWwsIF8xNiksIF8xNixcbiAgICAgICAgICAgICAgICBzY2FsZShsZW4sIF8xNmMsIDIgKiBhZHksIF8zMiksIF8zMiwgXzQ4KSwgXzQ4KTtcblxuICAgICAgICAgICAgY29uc3QgbGVuMiA9IHNjYWxlKGJjdHRsZW4sIGJjdHQsIGFkeXRhaWwsIF84KTtcbiAgICAgICAgICAgIGZpbmxlbiA9IGZpbmFkZChmaW5sZW4sIHN1bV90aHJlZShcbiAgICAgICAgICAgICAgICBzY2FsZShsZW4yLCBfOCwgMiAqIGFkeSwgXzE2KSwgXzE2LFxuICAgICAgICAgICAgICAgIHNjYWxlKGxlbjIsIF84LCBhZHl0YWlsLCBfMTZiKSwgXzE2YixcbiAgICAgICAgICAgICAgICBzY2FsZShsZW4sIF8xNmMsIGFkeXRhaWwsIF8zMiksIF8zMiwgXzMyYiwgXzY0KSwgXzY0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYmR4dGFpbCAhPT0gMCB8fCBiZHl0YWlsICE9PSAwKSB7XG4gICAgICAgIGlmIChjZHh0YWlsICE9PSAwIHx8IGNkeXRhaWwgIT09IDAgfHwgYWR4dGFpbCAhPT0gMCB8fCBhZHl0YWlsICE9PSAwKSB7XG4gICAgICAgICAgICBzMSA9IGNkeHRhaWwgKiBhZHk7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBjZHh0YWlsO1xuICAgICAgICAgICAgYWhpID0gYyAtIChjIC0gY2R4dGFpbCk7XG4gICAgICAgICAgICBhbG8gPSBjZHh0YWlsIC0gYWhpO1xuICAgICAgICAgICAgYyA9IHNwbGl0dGVyICogYWR5O1xuICAgICAgICAgICAgYmhpID0gYyAtIChjIC0gYWR5KTtcbiAgICAgICAgICAgIGJsbyA9IGFkeSAtIGJoaTtcbiAgICAgICAgICAgIHMwID0gYWxvICogYmxvIC0gKHMxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICAgICAgICAgIHQxID0gY2R4ICogYWR5dGFpbDtcbiAgICAgICAgICAgIGMgPSBzcGxpdHRlciAqIGNkeDtcbiAgICAgICAgICAgIGFoaSA9IGMgLSAoYyAtIGNkeCk7XG4gICAgICAgICAgICBhbG8gPSBjZHggLSBhaGk7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBhZHl0YWlsO1xuICAgICAgICAgICAgYmhpID0gYyAtIChjIC0gYWR5dGFpbCk7XG4gICAgICAgICAgICBibG8gPSBhZHl0YWlsIC0gYmhpO1xuICAgICAgICAgICAgdDAgPSBhbG8gKiBibG8gLSAodDEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgICAgICAgICAgX2kgPSBzMCArIHQwO1xuICAgICAgICAgICAgYnZpcnQgPSBfaSAtIHMwO1xuICAgICAgICAgICAgdVswXSA9IHMwIC0gKF9pIC0gYnZpcnQpICsgKHQwIC0gYnZpcnQpO1xuICAgICAgICAgICAgX2ogPSBzMSArIF9pO1xuICAgICAgICAgICAgYnZpcnQgPSBfaiAtIHMxO1xuICAgICAgICAgICAgXzAgPSBzMSAtIChfaiAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICAgICAgICAgIF9pID0gXzAgKyB0MTtcbiAgICAgICAgICAgIGJ2aXJ0ID0gX2kgLSBfMDtcbiAgICAgICAgICAgIHVbMV0gPSBfMCAtIChfaSAtIGJ2aXJ0KSArICh0MSAtIGJ2aXJ0KTtcbiAgICAgICAgICAgIHUzID0gX2ogKyBfaTtcbiAgICAgICAgICAgIGJ2aXJ0ID0gdTMgLSBfajtcbiAgICAgICAgICAgIHVbMl0gPSBfaiAtICh1MyAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICAgICAgICAgIHVbM10gPSB1MztcbiAgICAgICAgICAgIG4xID0gLWNkeTtcbiAgICAgICAgICAgIG4wID0gLWNkeXRhaWw7XG4gICAgICAgICAgICBzMSA9IGFkeHRhaWwgKiBuMTtcbiAgICAgICAgICAgIGMgPSBzcGxpdHRlciAqIGFkeHRhaWw7XG4gICAgICAgICAgICBhaGkgPSBjIC0gKGMgLSBhZHh0YWlsKTtcbiAgICAgICAgICAgIGFsbyA9IGFkeHRhaWwgLSBhaGk7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBuMTtcbiAgICAgICAgICAgIGJoaSA9IGMgLSAoYyAtIG4xKTtcbiAgICAgICAgICAgIGJsbyA9IG4xIC0gYmhpO1xuICAgICAgICAgICAgczAgPSBhbG8gKiBibG8gLSAoczEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgICAgICAgICAgdDEgPSBhZHggKiBuMDtcbiAgICAgICAgICAgIGMgPSBzcGxpdHRlciAqIGFkeDtcbiAgICAgICAgICAgIGFoaSA9IGMgLSAoYyAtIGFkeCk7XG4gICAgICAgICAgICBhbG8gPSBhZHggLSBhaGk7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBuMDtcbiAgICAgICAgICAgIGJoaSA9IGMgLSAoYyAtIG4wKTtcbiAgICAgICAgICAgIGJsbyA9IG4wIC0gYmhpO1xuICAgICAgICAgICAgdDAgPSBhbG8gKiBibG8gLSAodDEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgICAgICAgICAgX2kgPSBzMCArIHQwO1xuICAgICAgICAgICAgYnZpcnQgPSBfaSAtIHMwO1xuICAgICAgICAgICAgdlswXSA9IHMwIC0gKF9pIC0gYnZpcnQpICsgKHQwIC0gYnZpcnQpO1xuICAgICAgICAgICAgX2ogPSBzMSArIF9pO1xuICAgICAgICAgICAgYnZpcnQgPSBfaiAtIHMxO1xuICAgICAgICAgICAgXzAgPSBzMSAtIChfaiAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICAgICAgICAgIF9pID0gXzAgKyB0MTtcbiAgICAgICAgICAgIGJ2aXJ0ID0gX2kgLSBfMDtcbiAgICAgICAgICAgIHZbMV0gPSBfMCAtIChfaSAtIGJ2aXJ0KSArICh0MSAtIGJ2aXJ0KTtcbiAgICAgICAgICAgIHUzID0gX2ogKyBfaTtcbiAgICAgICAgICAgIGJ2aXJ0ID0gdTMgLSBfajtcbiAgICAgICAgICAgIHZbMl0gPSBfaiAtICh1MyAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICAgICAgICAgIHZbM10gPSB1MztcbiAgICAgICAgICAgIGNhdGxlbiA9IHN1bSg0LCB1LCA0LCB2LCBjYXQpO1xuICAgICAgICAgICAgczEgPSBjZHh0YWlsICogYWR5dGFpbDtcbiAgICAgICAgICAgIGMgPSBzcGxpdHRlciAqIGNkeHRhaWw7XG4gICAgICAgICAgICBhaGkgPSBjIC0gKGMgLSBjZHh0YWlsKTtcbiAgICAgICAgICAgIGFsbyA9IGNkeHRhaWwgLSBhaGk7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBhZHl0YWlsO1xuICAgICAgICAgICAgYmhpID0gYyAtIChjIC0gYWR5dGFpbCk7XG4gICAgICAgICAgICBibG8gPSBhZHl0YWlsIC0gYmhpO1xuICAgICAgICAgICAgczAgPSBhbG8gKiBibG8gLSAoczEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgICAgICAgICAgdDEgPSBhZHh0YWlsICogY2R5dGFpbDtcbiAgICAgICAgICAgIGMgPSBzcGxpdHRlciAqIGFkeHRhaWw7XG4gICAgICAgICAgICBhaGkgPSBjIC0gKGMgLSBhZHh0YWlsKTtcbiAgICAgICAgICAgIGFsbyA9IGFkeHRhaWwgLSBhaGk7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBjZHl0YWlsO1xuICAgICAgICAgICAgYmhpID0gYyAtIChjIC0gY2R5dGFpbCk7XG4gICAgICAgICAgICBibG8gPSBjZHl0YWlsIC0gYmhpO1xuICAgICAgICAgICAgdDAgPSBhbG8gKiBibG8gLSAodDEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgICAgICAgICAgX2kgPSBzMCAtIHQwO1xuICAgICAgICAgICAgYnZpcnQgPSBzMCAtIF9pO1xuICAgICAgICAgICAgY2F0dFswXSA9IHMwIC0gKF9pICsgYnZpcnQpICsgKGJ2aXJ0IC0gdDApO1xuICAgICAgICAgICAgX2ogPSBzMSArIF9pO1xuICAgICAgICAgICAgYnZpcnQgPSBfaiAtIHMxO1xuICAgICAgICAgICAgXzAgPSBzMSAtIChfaiAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICAgICAgICAgIF9pID0gXzAgLSB0MTtcbiAgICAgICAgICAgIGJ2aXJ0ID0gXzAgLSBfaTtcbiAgICAgICAgICAgIGNhdHRbMV0gPSBfMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQxKTtcbiAgICAgICAgICAgIHUzID0gX2ogKyBfaTtcbiAgICAgICAgICAgIGJ2aXJ0ID0gdTMgLSBfajtcbiAgICAgICAgICAgIGNhdHRbMl0gPSBfaiAtICh1MyAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICAgICAgICAgIGNhdHRbM10gPSB1MztcbiAgICAgICAgICAgIGNhdHRsZW4gPSA0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2F0WzBdID0gMDtcbiAgICAgICAgICAgIGNhdGxlbiA9IDE7XG4gICAgICAgICAgICBjYXR0WzBdID0gMDtcbiAgICAgICAgICAgIGNhdHRsZW4gPSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiZHh0YWlsICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBsZW4gPSBzY2FsZShjYXRsZW4sIGNhdCwgYmR4dGFpbCwgXzE2Yyk7XG4gICAgICAgICAgICBmaW5sZW4gPSBmaW5hZGQoZmlubGVuLCBzdW0oXG4gICAgICAgICAgICAgICAgc2NhbGUoYnh0Y2FsZW4sIGJ4dGNhLCBiZHh0YWlsLCBfMTYpLCBfMTYsXG4gICAgICAgICAgICAgICAgc2NhbGUobGVuLCBfMTZjLCAyICogYmR4LCBfMzIpLCBfMzIsIF80OCksIF80OCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGxlbjIgPSBzY2FsZShjYXR0bGVuLCBjYXR0LCBiZHh0YWlsLCBfOCk7XG4gICAgICAgICAgICBmaW5sZW4gPSBmaW5hZGQoZmlubGVuLCBzdW1fdGhyZWUoXG4gICAgICAgICAgICAgICAgc2NhbGUobGVuMiwgXzgsIDIgKiBiZHgsIF8xNiksIF8xNixcbiAgICAgICAgICAgICAgICBzY2FsZShsZW4yLCBfOCwgYmR4dGFpbCwgXzE2YiksIF8xNmIsXG4gICAgICAgICAgICAgICAgc2NhbGUobGVuLCBfMTZjLCBiZHh0YWlsLCBfMzIpLCBfMzIsIF8zMmIsIF82NCksIF82NCk7XG5cbiAgICAgICAgICAgIGlmIChjZHl0YWlsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgZmlubGVuID0gZmluYWRkKGZpbmxlbiwgc2NhbGUoc2NhbGUoNCwgYWEsIGJkeHRhaWwsIF84KSwgXzgsIGNkeXRhaWwsIF8xNiksIF8xNik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWR5dGFpbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGZpbmxlbiA9IGZpbmFkZChmaW5sZW4sIHNjYWxlKHNjYWxlKDQsIGNjLCAtYmR4dGFpbCwgXzgpLCBfOCwgYWR5dGFpbCwgXzE2KSwgXzE2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYmR5dGFpbCAhPT0gMCkge1xuICAgICAgICAgICAgY29uc3QgbGVuID0gc2NhbGUoY2F0bGVuLCBjYXQsIGJkeXRhaWwsIF8xNmMpO1xuICAgICAgICAgICAgZmlubGVuID0gZmluYWRkKGZpbmxlbiwgc3VtKFxuICAgICAgICAgICAgICAgIHNjYWxlKGJ5dGNhbGVuLCBieXRjYSwgYmR5dGFpbCwgXzE2KSwgXzE2LFxuICAgICAgICAgICAgICAgIHNjYWxlKGxlbiwgXzE2YywgMiAqIGJkeSwgXzMyKSwgXzMyLCBfNDgpLCBfNDgpO1xuXG4gICAgICAgICAgICBjb25zdCBsZW4yID0gc2NhbGUoY2F0dGxlbiwgY2F0dCwgYmR5dGFpbCwgXzgpO1xuICAgICAgICAgICAgZmlubGVuID0gZmluYWRkKGZpbmxlbiwgc3VtX3RocmVlKFxuICAgICAgICAgICAgICAgIHNjYWxlKGxlbjIsIF84LCAyICogYmR5LCBfMTYpLCBfMTYsXG4gICAgICAgICAgICAgICAgc2NhbGUobGVuMiwgXzgsIGJkeXRhaWwsIF8xNmIpLCBfMTZiLFxuICAgICAgICAgICAgICAgIHNjYWxlKGxlbiwgXzE2YywgYmR5dGFpbCwgXzMyKSwgXzMyLCAgXzMyYiwgXzY0KSwgXzY0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoY2R4dGFpbCAhPT0gMCB8fCBjZHl0YWlsICE9PSAwKSB7XG4gICAgICAgIGlmIChhZHh0YWlsICE9PSAwIHx8IGFkeXRhaWwgIT09IDAgfHwgYmR4dGFpbCAhPT0gMCB8fCBiZHl0YWlsICE9PSAwKSB7XG4gICAgICAgICAgICBzMSA9IGFkeHRhaWwgKiBiZHk7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBhZHh0YWlsO1xuICAgICAgICAgICAgYWhpID0gYyAtIChjIC0gYWR4dGFpbCk7XG4gICAgICAgICAgICBhbG8gPSBhZHh0YWlsIC0gYWhpO1xuICAgICAgICAgICAgYyA9IHNwbGl0dGVyICogYmR5O1xuICAgICAgICAgICAgYmhpID0gYyAtIChjIC0gYmR5KTtcbiAgICAgICAgICAgIGJsbyA9IGJkeSAtIGJoaTtcbiAgICAgICAgICAgIHMwID0gYWxvICogYmxvIC0gKHMxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICAgICAgICAgIHQxID0gYWR4ICogYmR5dGFpbDtcbiAgICAgICAgICAgIGMgPSBzcGxpdHRlciAqIGFkeDtcbiAgICAgICAgICAgIGFoaSA9IGMgLSAoYyAtIGFkeCk7XG4gICAgICAgICAgICBhbG8gPSBhZHggLSBhaGk7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBiZHl0YWlsO1xuICAgICAgICAgICAgYmhpID0gYyAtIChjIC0gYmR5dGFpbCk7XG4gICAgICAgICAgICBibG8gPSBiZHl0YWlsIC0gYmhpO1xuICAgICAgICAgICAgdDAgPSBhbG8gKiBibG8gLSAodDEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgICAgICAgICAgX2kgPSBzMCArIHQwO1xuICAgICAgICAgICAgYnZpcnQgPSBfaSAtIHMwO1xuICAgICAgICAgICAgdVswXSA9IHMwIC0gKF9pIC0gYnZpcnQpICsgKHQwIC0gYnZpcnQpO1xuICAgICAgICAgICAgX2ogPSBzMSArIF9pO1xuICAgICAgICAgICAgYnZpcnQgPSBfaiAtIHMxO1xuICAgICAgICAgICAgXzAgPSBzMSAtIChfaiAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICAgICAgICAgIF9pID0gXzAgKyB0MTtcbiAgICAgICAgICAgIGJ2aXJ0ID0gX2kgLSBfMDtcbiAgICAgICAgICAgIHVbMV0gPSBfMCAtIChfaSAtIGJ2aXJ0KSArICh0MSAtIGJ2aXJ0KTtcbiAgICAgICAgICAgIHUzID0gX2ogKyBfaTtcbiAgICAgICAgICAgIGJ2aXJ0ID0gdTMgLSBfajtcbiAgICAgICAgICAgIHVbMl0gPSBfaiAtICh1MyAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICAgICAgICAgIHVbM10gPSB1MztcbiAgICAgICAgICAgIG4xID0gLWFkeTtcbiAgICAgICAgICAgIG4wID0gLWFkeXRhaWw7XG4gICAgICAgICAgICBzMSA9IGJkeHRhaWwgKiBuMTtcbiAgICAgICAgICAgIGMgPSBzcGxpdHRlciAqIGJkeHRhaWw7XG4gICAgICAgICAgICBhaGkgPSBjIC0gKGMgLSBiZHh0YWlsKTtcbiAgICAgICAgICAgIGFsbyA9IGJkeHRhaWwgLSBhaGk7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBuMTtcbiAgICAgICAgICAgIGJoaSA9IGMgLSAoYyAtIG4xKTtcbiAgICAgICAgICAgIGJsbyA9IG4xIC0gYmhpO1xuICAgICAgICAgICAgczAgPSBhbG8gKiBibG8gLSAoczEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgICAgICAgICAgdDEgPSBiZHggKiBuMDtcbiAgICAgICAgICAgIGMgPSBzcGxpdHRlciAqIGJkeDtcbiAgICAgICAgICAgIGFoaSA9IGMgLSAoYyAtIGJkeCk7XG4gICAgICAgICAgICBhbG8gPSBiZHggLSBhaGk7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBuMDtcbiAgICAgICAgICAgIGJoaSA9IGMgLSAoYyAtIG4wKTtcbiAgICAgICAgICAgIGJsbyA9IG4wIC0gYmhpO1xuICAgICAgICAgICAgdDAgPSBhbG8gKiBibG8gLSAodDEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgICAgICAgICAgX2kgPSBzMCArIHQwO1xuICAgICAgICAgICAgYnZpcnQgPSBfaSAtIHMwO1xuICAgICAgICAgICAgdlswXSA9IHMwIC0gKF9pIC0gYnZpcnQpICsgKHQwIC0gYnZpcnQpO1xuICAgICAgICAgICAgX2ogPSBzMSArIF9pO1xuICAgICAgICAgICAgYnZpcnQgPSBfaiAtIHMxO1xuICAgICAgICAgICAgXzAgPSBzMSAtIChfaiAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICAgICAgICAgIF9pID0gXzAgKyB0MTtcbiAgICAgICAgICAgIGJ2aXJ0ID0gX2kgLSBfMDtcbiAgICAgICAgICAgIHZbMV0gPSBfMCAtIChfaSAtIGJ2aXJ0KSArICh0MSAtIGJ2aXJ0KTtcbiAgICAgICAgICAgIHUzID0gX2ogKyBfaTtcbiAgICAgICAgICAgIGJ2aXJ0ID0gdTMgLSBfajtcbiAgICAgICAgICAgIHZbMl0gPSBfaiAtICh1MyAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICAgICAgICAgIHZbM10gPSB1MztcbiAgICAgICAgICAgIGFidGxlbiA9IHN1bSg0LCB1LCA0LCB2LCBhYnQpO1xuICAgICAgICAgICAgczEgPSBhZHh0YWlsICogYmR5dGFpbDtcbiAgICAgICAgICAgIGMgPSBzcGxpdHRlciAqIGFkeHRhaWw7XG4gICAgICAgICAgICBhaGkgPSBjIC0gKGMgLSBhZHh0YWlsKTtcbiAgICAgICAgICAgIGFsbyA9IGFkeHRhaWwgLSBhaGk7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBiZHl0YWlsO1xuICAgICAgICAgICAgYmhpID0gYyAtIChjIC0gYmR5dGFpbCk7XG4gICAgICAgICAgICBibG8gPSBiZHl0YWlsIC0gYmhpO1xuICAgICAgICAgICAgczAgPSBhbG8gKiBibG8gLSAoczEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgICAgICAgICAgdDEgPSBiZHh0YWlsICogYWR5dGFpbDtcbiAgICAgICAgICAgIGMgPSBzcGxpdHRlciAqIGJkeHRhaWw7XG4gICAgICAgICAgICBhaGkgPSBjIC0gKGMgLSBiZHh0YWlsKTtcbiAgICAgICAgICAgIGFsbyA9IGJkeHRhaWwgLSBhaGk7XG4gICAgICAgICAgICBjID0gc3BsaXR0ZXIgKiBhZHl0YWlsO1xuICAgICAgICAgICAgYmhpID0gYyAtIChjIC0gYWR5dGFpbCk7XG4gICAgICAgICAgICBibG8gPSBhZHl0YWlsIC0gYmhpO1xuICAgICAgICAgICAgdDAgPSBhbG8gKiBibG8gLSAodDEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgICAgICAgICAgX2kgPSBzMCAtIHQwO1xuICAgICAgICAgICAgYnZpcnQgPSBzMCAtIF9pO1xuICAgICAgICAgICAgYWJ0dFswXSA9IHMwIC0gKF9pICsgYnZpcnQpICsgKGJ2aXJ0IC0gdDApO1xuICAgICAgICAgICAgX2ogPSBzMSArIF9pO1xuICAgICAgICAgICAgYnZpcnQgPSBfaiAtIHMxO1xuICAgICAgICAgICAgXzAgPSBzMSAtIChfaiAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICAgICAgICAgIF9pID0gXzAgLSB0MTtcbiAgICAgICAgICAgIGJ2aXJ0ID0gXzAgLSBfaTtcbiAgICAgICAgICAgIGFidHRbMV0gPSBfMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQxKTtcbiAgICAgICAgICAgIHUzID0gX2ogKyBfaTtcbiAgICAgICAgICAgIGJ2aXJ0ID0gdTMgLSBfajtcbiAgICAgICAgICAgIGFidHRbMl0gPSBfaiAtICh1MyAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICAgICAgICAgIGFidHRbM10gPSB1MztcbiAgICAgICAgICAgIGFidHRsZW4gPSA0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWJ0WzBdID0gMDtcbiAgICAgICAgICAgIGFidGxlbiA9IDE7XG4gICAgICAgICAgICBhYnR0WzBdID0gMDtcbiAgICAgICAgICAgIGFidHRsZW4gPSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjZHh0YWlsICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBsZW4gPSBzY2FsZShhYnRsZW4sIGFidCwgY2R4dGFpbCwgXzE2Yyk7XG4gICAgICAgICAgICBmaW5sZW4gPSBmaW5hZGQoZmlubGVuLCBzdW0oXG4gICAgICAgICAgICAgICAgc2NhbGUoY3h0YWJsZW4sIGN4dGFiLCBjZHh0YWlsLCBfMTYpLCBfMTYsXG4gICAgICAgICAgICAgICAgc2NhbGUobGVuLCBfMTZjLCAyICogY2R4LCBfMzIpLCBfMzIsIF80OCksIF80OCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGxlbjIgPSBzY2FsZShhYnR0bGVuLCBhYnR0LCBjZHh0YWlsLCBfOCk7XG4gICAgICAgICAgICBmaW5sZW4gPSBmaW5hZGQoZmlubGVuLCBzdW1fdGhyZWUoXG4gICAgICAgICAgICAgICAgc2NhbGUobGVuMiwgXzgsIDIgKiBjZHgsIF8xNiksIF8xNixcbiAgICAgICAgICAgICAgICBzY2FsZShsZW4yLCBfOCwgY2R4dGFpbCwgXzE2YiksIF8xNmIsXG4gICAgICAgICAgICAgICAgc2NhbGUobGVuLCBfMTZjLCBjZHh0YWlsLCBfMzIpLCBfMzIsIF8zMmIsIF82NCksIF82NCk7XG5cbiAgICAgICAgICAgIGlmIChhZHl0YWlsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgZmlubGVuID0gZmluYWRkKGZpbmxlbiwgc2NhbGUoc2NhbGUoNCwgYmIsIGNkeHRhaWwsIF84KSwgXzgsIGFkeXRhaWwsIF8xNiksIF8xNik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmR5dGFpbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGZpbmxlbiA9IGZpbmFkZChmaW5sZW4sIHNjYWxlKHNjYWxlKDQsIGFhLCAtY2R4dGFpbCwgXzgpLCBfOCwgYmR5dGFpbCwgXzE2KSwgXzE2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY2R5dGFpbCAhPT0gMCkge1xuICAgICAgICAgICAgY29uc3QgbGVuID0gc2NhbGUoYWJ0bGVuLCBhYnQsIGNkeXRhaWwsIF8xNmMpO1xuICAgICAgICAgICAgZmlubGVuID0gZmluYWRkKGZpbmxlbiwgc3VtKFxuICAgICAgICAgICAgICAgIHNjYWxlKGN5dGFibGVuLCBjeXRhYiwgY2R5dGFpbCwgXzE2KSwgXzE2LFxuICAgICAgICAgICAgICAgIHNjYWxlKGxlbiwgXzE2YywgMiAqIGNkeSwgXzMyKSwgXzMyLCBfNDgpLCBfNDgpO1xuXG4gICAgICAgICAgICBjb25zdCBsZW4yID0gc2NhbGUoYWJ0dGxlbiwgYWJ0dCwgY2R5dGFpbCwgXzgpO1xuICAgICAgICAgICAgZmlubGVuID0gZmluYWRkKGZpbmxlbiwgc3VtX3RocmVlKFxuICAgICAgICAgICAgICAgIHNjYWxlKGxlbjIsIF84LCAyICogY2R5LCBfMTYpLCBfMTYsXG4gICAgICAgICAgICAgICAgc2NhbGUobGVuMiwgXzgsIGNkeXRhaWwsIF8xNmIpLCBfMTZiLFxuICAgICAgICAgICAgICAgIHNjYWxlKGxlbiwgXzE2YywgY2R5dGFpbCwgXzMyKSwgXzMyLCBfMzJiLCBfNjQpLCBfNjQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbltmaW5sZW4gLSAxXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluY2lyY2xlKGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIGR4LCBkeSkge1xuICAgIGNvbnN0IGFkeCA9IGF4IC0gZHg7XG4gICAgY29uc3QgYmR4ID0gYnggLSBkeDtcbiAgICBjb25zdCBjZHggPSBjeCAtIGR4O1xuICAgIGNvbnN0IGFkeSA9IGF5IC0gZHk7XG4gICAgY29uc3QgYmR5ID0gYnkgLSBkeTtcbiAgICBjb25zdCBjZHkgPSBjeSAtIGR5O1xuXG4gICAgY29uc3QgYmR4Y2R5ID0gYmR4ICogY2R5O1xuICAgIGNvbnN0IGNkeGJkeSA9IGNkeCAqIGJkeTtcbiAgICBjb25zdCBhbGlmdCA9IGFkeCAqIGFkeCArIGFkeSAqIGFkeTtcblxuICAgIGNvbnN0IGNkeGFkeSA9IGNkeCAqIGFkeTtcbiAgICBjb25zdCBhZHhjZHkgPSBhZHggKiBjZHk7XG4gICAgY29uc3QgYmxpZnQgPSBiZHggKiBiZHggKyBiZHkgKiBiZHk7XG5cbiAgICBjb25zdCBhZHhiZHkgPSBhZHggKiBiZHk7XG4gICAgY29uc3QgYmR4YWR5ID0gYmR4ICogYWR5O1xuICAgIGNvbnN0IGNsaWZ0ID0gY2R4ICogY2R4ICsgY2R5ICogY2R5O1xuXG4gICAgY29uc3QgZGV0ID1cbiAgICAgICAgYWxpZnQgKiAoYmR4Y2R5IC0gY2R4YmR5KSArXG4gICAgICAgIGJsaWZ0ICogKGNkeGFkeSAtIGFkeGNkeSkgK1xuICAgICAgICBjbGlmdCAqIChhZHhiZHkgLSBiZHhhZHkpO1xuXG4gICAgY29uc3QgcGVybWFuZW50ID1cbiAgICAgICAgKE1hdGguYWJzKGJkeGNkeSkgKyBNYXRoLmFicyhjZHhiZHkpKSAqIGFsaWZ0ICtcbiAgICAgICAgKE1hdGguYWJzKGNkeGFkeSkgKyBNYXRoLmFicyhhZHhjZHkpKSAqIGJsaWZ0ICtcbiAgICAgICAgKE1hdGguYWJzKGFkeGJkeSkgKyBNYXRoLmFicyhiZHhhZHkpKSAqIGNsaWZ0O1xuXG4gICAgY29uc3QgZXJyYm91bmQgPSBpY2NlcnJib3VuZEEgKiBwZXJtYW5lbnQ7XG5cbiAgICBpZiAoZGV0ID4gZXJyYm91bmQgfHwgLWRldCA+IGVycmJvdW5kKSB7XG4gICAgICAgIHJldHVybiBkZXQ7XG4gICAgfVxuICAgIHJldHVybiBpbmNpcmNsZWFkYXB0KGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIGR4LCBkeSwgcGVybWFuZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluY2lyY2xlZmFzdChheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBkeCwgZHkpIHtcbiAgICBjb25zdCBhZHggPSBheCAtIGR4O1xuICAgIGNvbnN0IGFkeSA9IGF5IC0gZHk7XG4gICAgY29uc3QgYmR4ID0gYnggLSBkeDtcbiAgICBjb25zdCBiZHkgPSBieSAtIGR5O1xuICAgIGNvbnN0IGNkeCA9IGN4IC0gZHg7XG4gICAgY29uc3QgY2R5ID0gY3kgLSBkeTtcblxuICAgIGNvbnN0IGFiZGV0ID0gYWR4ICogYmR5IC0gYmR4ICogYWR5O1xuICAgIGNvbnN0IGJjZGV0ID0gYmR4ICogY2R5IC0gY2R4ICogYmR5O1xuICAgIGNvbnN0IGNhZGV0ID0gY2R4ICogYWR5IC0gYWR4ICogY2R5O1xuICAgIGNvbnN0IGFsaWZ0ID0gYWR4ICogYWR4ICsgYWR5ICogYWR5O1xuICAgIGNvbnN0IGJsaWZ0ID0gYmR4ICogYmR4ICsgYmR5ICogYmR5O1xuICAgIGNvbnN0IGNsaWZ0ID0gY2R4ICogY2R4ICsgY2R5ICogY2R5O1xuXG4gICAgcmV0dXJuIGFsaWZ0ICogYmNkZXQgKyBibGlmdCAqIGNhZGV0ICsgY2xpZnQgKiBhYmRldDtcbn1cbiIsImltcG9ydCB7ZXBzaWxvbiwgc3BsaXR0ZXIsIHJlc3VsdGVycmJvdW5kLCBlc3RpbWF0ZSwgdmVjLCBzdW0sIHN1bV90aHJlZSwgc2NhbGUsIG5lZ2F0ZX0gZnJvbSAnLi91dGlsLmpzJztcblxuY29uc3QgaXNwZXJyYm91bmRBID0gKDE2ICsgMjI0ICogZXBzaWxvbikgKiBlcHNpbG9uO1xuY29uc3QgaXNwZXJyYm91bmRCID0gKDUgKyA3MiAqIGVwc2lsb24pICogZXBzaWxvbjtcbmNvbnN0IGlzcGVycmJvdW5kQyA9ICg3MSArIDE0MDggKiBlcHNpbG9uKSAqIGVwc2lsb24gKiBlcHNpbG9uO1xuXG5jb25zdCBhYiA9IHZlYyg0KTtcbmNvbnN0IGJjID0gdmVjKDQpO1xuY29uc3QgY2QgPSB2ZWMoNCk7XG5jb25zdCBkZSA9IHZlYyg0KTtcbmNvbnN0IGVhID0gdmVjKDQpO1xuY29uc3QgYWMgPSB2ZWMoNCk7XG5jb25zdCBiZCA9IHZlYyg0KTtcbmNvbnN0IGNlID0gdmVjKDQpO1xuY29uc3QgZGEgPSB2ZWMoNCk7XG5jb25zdCBlYiA9IHZlYyg0KTtcblxuY29uc3QgYWJjID0gdmVjKDI0KTtcbmNvbnN0IGJjZCA9IHZlYygyNCk7XG5jb25zdCBjZGUgPSB2ZWMoMjQpO1xuY29uc3QgZGVhID0gdmVjKDI0KTtcbmNvbnN0IGVhYiA9IHZlYygyNCk7XG5jb25zdCBhYmQgPSB2ZWMoMjQpO1xuY29uc3QgYmNlID0gdmVjKDI0KTtcbmNvbnN0IGNkYSA9IHZlYygyNCk7XG5jb25zdCBkZWIgPSB2ZWMoMjQpO1xuY29uc3QgZWFjID0gdmVjKDI0KTtcblxuY29uc3QgYWRldCA9IHZlYygxMTUyKTtcbmNvbnN0IGJkZXQgPSB2ZWMoMTE1Mik7XG5jb25zdCBjZGV0ID0gdmVjKDExNTIpO1xuY29uc3QgZGRldCA9IHZlYygxMTUyKTtcbmNvbnN0IGVkZXQgPSB2ZWMoMTE1Mik7XG5jb25zdCBhYmRldCA9IHZlYygyMzA0KTtcbmNvbnN0IGNkZGV0ID0gdmVjKDIzMDQpO1xuY29uc3QgY2RlZGV0ID0gdmVjKDM0NTYpO1xuY29uc3QgZGV0ZXIgPSB2ZWMoNTc2MCk7XG5cbmNvbnN0IF84ID0gdmVjKDgpO1xuY29uc3QgXzhiID0gdmVjKDgpO1xuY29uc3QgXzhjID0gdmVjKDgpO1xuY29uc3QgXzE2ID0gdmVjKDE2KTtcbmNvbnN0IF8yNCA9IHZlYygyNCk7XG5jb25zdCBfNDggPSB2ZWMoNDgpO1xuY29uc3QgXzQ4YiA9IHZlYyg0OCk7XG5jb25zdCBfOTYgPSB2ZWMoOTYpO1xuY29uc3QgXzE5MiA9IHZlYygxOTIpO1xuY29uc3QgXzM4NHggPSB2ZWMoMzg0KTtcbmNvbnN0IF8zODR5ID0gdmVjKDM4NCk7XG5jb25zdCBfMzg0eiA9IHZlYygzODQpO1xuY29uc3QgXzc2OCA9IHZlYyg3NjgpO1xuXG5mdW5jdGlvbiBzdW1fdGhyZWVfc2NhbGUoYSwgYiwgYywgYXosIGJ6LCBjeiwgb3V0KSB7XG4gICAgcmV0dXJuIHN1bV90aHJlZShcbiAgICAgICAgc2NhbGUoNCwgYSwgYXosIF84KSwgXzgsXG4gICAgICAgIHNjYWxlKDQsIGIsIGJ6LCBfOGIpLCBfOGIsXG4gICAgICAgIHNjYWxlKDQsIGMsIGN6LCBfOGMpLCBfOGMsIF8xNiwgb3V0KTtcbn1cblxuZnVuY3Rpb24gbGlmdGV4YWN0KGFsZW4sIGEsIGJsZW4sIGIsIGNsZW4sIGMsIGRsZW4sIGQsIHgsIHksIHosIG91dCkge1xuICAgIGNvbnN0IGxlbiA9IHN1bShcbiAgICAgICAgc3VtKGFsZW4sIGEsIGJsZW4sIGIsIF80OCksIF80OCxcbiAgICAgICAgbmVnYXRlKHN1bShjbGVuLCBjLCBkbGVuLCBkLCBfNDhiKSwgXzQ4YiksIF80OGIsIF85Nik7XG5cbiAgICByZXR1cm4gc3VtX3RocmVlKFxuICAgICAgICBzY2FsZShzY2FsZShsZW4sIF85NiwgeCwgXzE5MiksIF8xOTIsIHgsIF8zODR4KSwgXzM4NHgsXG4gICAgICAgIHNjYWxlKHNjYWxlKGxlbiwgXzk2LCB5LCBfMTkyKSwgXzE5MiwgeSwgXzM4NHkpLCBfMzg0eSxcbiAgICAgICAgc2NhbGUoc2NhbGUobGVuLCBfOTYsIHosIF8xOTIpLCBfMTkyLCB6LCBfMzg0eiksIF8zODR6LCBfNzY4LCBvdXQpO1xufVxuXG5mdW5jdGlvbiBpbnNwaGVyZWV4YWN0KGF4LCBheSwgYXosIGJ4LCBieSwgYnosIGN4LCBjeSwgY3osIGR4LCBkeSwgZHosIGV4LCBleSwgZXopIHtcbiAgICBsZXQgYnZpcnQsIGMsIGFoaSwgYWxvLCBiaGksIGJsbywgX2ksIF9qLCBfMCwgczEsIHMwLCB0MSwgdDAsIHUzO1xuXG4gICAgczEgPSBheCAqIGJ5O1xuICAgIGMgPSBzcGxpdHRlciAqIGF4O1xuICAgIGFoaSA9IGMgLSAoYyAtIGF4KTtcbiAgICBhbG8gPSBheCAtIGFoaTtcbiAgICBjID0gc3BsaXR0ZXIgKiBieTtcbiAgICBiaGkgPSBjIC0gKGMgLSBieSk7XG4gICAgYmxvID0gYnkgLSBiaGk7XG4gICAgczAgPSBhbG8gKiBibG8gLSAoczEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIHQxID0gYnggKiBheTtcbiAgICBjID0gc3BsaXR0ZXIgKiBieDtcbiAgICBhaGkgPSBjIC0gKGMgLSBieCk7XG4gICAgYWxvID0gYnggLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogYXk7XG4gICAgYmhpID0gYyAtIChjIC0gYXkpO1xuICAgIGJsbyA9IGF5IC0gYmhpO1xuICAgIHQwID0gYWxvICogYmxvIC0gKHQxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICBfaSA9IHMwIC0gdDA7XG4gICAgYnZpcnQgPSBzMCAtIF9pO1xuICAgIGFiWzBdID0gczAgLSAoX2kgKyBidmlydCkgKyAoYnZpcnQgLSB0MCk7XG4gICAgX2ogPSBzMSArIF9pO1xuICAgIGJ2aXJ0ID0gX2ogLSBzMTtcbiAgICBfMCA9IHMxIC0gKF9qIC0gYnZpcnQpICsgKF9pIC0gYnZpcnQpO1xuICAgIF9pID0gXzAgLSB0MTtcbiAgICBidmlydCA9IF8wIC0gX2k7XG4gICAgYWJbMV0gPSBfMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQxKTtcbiAgICB1MyA9IF9qICsgX2k7XG4gICAgYnZpcnQgPSB1MyAtIF9qO1xuICAgIGFiWzJdID0gX2ogLSAodTMgLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgYWJbM10gPSB1MztcbiAgICBzMSA9IGJ4ICogY3k7XG4gICAgYyA9IHNwbGl0dGVyICogYng7XG4gICAgYWhpID0gYyAtIChjIC0gYngpO1xuICAgIGFsbyA9IGJ4IC0gYWhpO1xuICAgIGMgPSBzcGxpdHRlciAqIGN5O1xuICAgIGJoaSA9IGMgLSAoYyAtIGN5KTtcbiAgICBibG8gPSBjeSAtIGJoaTtcbiAgICBzMCA9IGFsbyAqIGJsbyAtIChzMSAtIGFoaSAqIGJoaSAtIGFsbyAqIGJoaSAtIGFoaSAqIGJsbyk7XG4gICAgdDEgPSBjeCAqIGJ5O1xuICAgIGMgPSBzcGxpdHRlciAqIGN4O1xuICAgIGFoaSA9IGMgLSAoYyAtIGN4KTtcbiAgICBhbG8gPSBjeCAtIGFoaTtcbiAgICBjID0gc3BsaXR0ZXIgKiBieTtcbiAgICBiaGkgPSBjIC0gKGMgLSBieSk7XG4gICAgYmxvID0gYnkgLSBiaGk7XG4gICAgdDAgPSBhbG8gKiBibG8gLSAodDEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIF9pID0gczAgLSB0MDtcbiAgICBidmlydCA9IHMwIC0gX2k7XG4gICAgYmNbMF0gPSBzMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQwKTtcbiAgICBfaiA9IHMxICsgX2k7XG4gICAgYnZpcnQgPSBfaiAtIHMxO1xuICAgIF8wID0gczEgLSAoX2ogLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgX2kgPSBfMCAtIHQxO1xuICAgIGJ2aXJ0ID0gXzAgLSBfaTtcbiAgICBiY1sxXSA9IF8wIC0gKF9pICsgYnZpcnQpICsgKGJ2aXJ0IC0gdDEpO1xuICAgIHUzID0gX2ogKyBfaTtcbiAgICBidmlydCA9IHUzIC0gX2o7XG4gICAgYmNbMl0gPSBfaiAtICh1MyAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICBiY1szXSA9IHUzO1xuICAgIHMxID0gY3ggKiBkeTtcbiAgICBjID0gc3BsaXR0ZXIgKiBjeDtcbiAgICBhaGkgPSBjIC0gKGMgLSBjeCk7XG4gICAgYWxvID0gY3ggLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogZHk7XG4gICAgYmhpID0gYyAtIChjIC0gZHkpO1xuICAgIGJsbyA9IGR5IC0gYmhpO1xuICAgIHMwID0gYWxvICogYmxvIC0gKHMxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICB0MSA9IGR4ICogY3k7XG4gICAgYyA9IHNwbGl0dGVyICogZHg7XG4gICAgYWhpID0gYyAtIChjIC0gZHgpO1xuICAgIGFsbyA9IGR4IC0gYWhpO1xuICAgIGMgPSBzcGxpdHRlciAqIGN5O1xuICAgIGJoaSA9IGMgLSAoYyAtIGN5KTtcbiAgICBibG8gPSBjeSAtIGJoaTtcbiAgICB0MCA9IGFsbyAqIGJsbyAtICh0MSAtIGFoaSAqIGJoaSAtIGFsbyAqIGJoaSAtIGFoaSAqIGJsbyk7XG4gICAgX2kgPSBzMCAtIHQwO1xuICAgIGJ2aXJ0ID0gczAgLSBfaTtcbiAgICBjZFswXSA9IHMwIC0gKF9pICsgYnZpcnQpICsgKGJ2aXJ0IC0gdDApO1xuICAgIF9qID0gczEgKyBfaTtcbiAgICBidmlydCA9IF9qIC0gczE7XG4gICAgXzAgPSBzMSAtIChfaiAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICBfaSA9IF8wIC0gdDE7XG4gICAgYnZpcnQgPSBfMCAtIF9pO1xuICAgIGNkWzFdID0gXzAgLSAoX2kgKyBidmlydCkgKyAoYnZpcnQgLSB0MSk7XG4gICAgdTMgPSBfaiArIF9pO1xuICAgIGJ2aXJ0ID0gdTMgLSBfajtcbiAgICBjZFsyXSA9IF9qIC0gKHUzIC0gYnZpcnQpICsgKF9pIC0gYnZpcnQpO1xuICAgIGNkWzNdID0gdTM7XG4gICAgczEgPSBkeCAqIGV5O1xuICAgIGMgPSBzcGxpdHRlciAqIGR4O1xuICAgIGFoaSA9IGMgLSAoYyAtIGR4KTtcbiAgICBhbG8gPSBkeCAtIGFoaTtcbiAgICBjID0gc3BsaXR0ZXIgKiBleTtcbiAgICBiaGkgPSBjIC0gKGMgLSBleSk7XG4gICAgYmxvID0gZXkgLSBiaGk7XG4gICAgczAgPSBhbG8gKiBibG8gLSAoczEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIHQxID0gZXggKiBkeTtcbiAgICBjID0gc3BsaXR0ZXIgKiBleDtcbiAgICBhaGkgPSBjIC0gKGMgLSBleCk7XG4gICAgYWxvID0gZXggLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogZHk7XG4gICAgYmhpID0gYyAtIChjIC0gZHkpO1xuICAgIGJsbyA9IGR5IC0gYmhpO1xuICAgIHQwID0gYWxvICogYmxvIC0gKHQxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICBfaSA9IHMwIC0gdDA7XG4gICAgYnZpcnQgPSBzMCAtIF9pO1xuICAgIGRlWzBdID0gczAgLSAoX2kgKyBidmlydCkgKyAoYnZpcnQgLSB0MCk7XG4gICAgX2ogPSBzMSArIF9pO1xuICAgIGJ2aXJ0ID0gX2ogLSBzMTtcbiAgICBfMCA9IHMxIC0gKF9qIC0gYnZpcnQpICsgKF9pIC0gYnZpcnQpO1xuICAgIF9pID0gXzAgLSB0MTtcbiAgICBidmlydCA9IF8wIC0gX2k7XG4gICAgZGVbMV0gPSBfMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQxKTtcbiAgICB1MyA9IF9qICsgX2k7XG4gICAgYnZpcnQgPSB1MyAtIF9qO1xuICAgIGRlWzJdID0gX2ogLSAodTMgLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgZGVbM10gPSB1MztcbiAgICBzMSA9IGV4ICogYXk7XG4gICAgYyA9IHNwbGl0dGVyICogZXg7XG4gICAgYWhpID0gYyAtIChjIC0gZXgpO1xuICAgIGFsbyA9IGV4IC0gYWhpO1xuICAgIGMgPSBzcGxpdHRlciAqIGF5O1xuICAgIGJoaSA9IGMgLSAoYyAtIGF5KTtcbiAgICBibG8gPSBheSAtIGJoaTtcbiAgICBzMCA9IGFsbyAqIGJsbyAtIChzMSAtIGFoaSAqIGJoaSAtIGFsbyAqIGJoaSAtIGFoaSAqIGJsbyk7XG4gICAgdDEgPSBheCAqIGV5O1xuICAgIGMgPSBzcGxpdHRlciAqIGF4O1xuICAgIGFoaSA9IGMgLSAoYyAtIGF4KTtcbiAgICBhbG8gPSBheCAtIGFoaTtcbiAgICBjID0gc3BsaXR0ZXIgKiBleTtcbiAgICBiaGkgPSBjIC0gKGMgLSBleSk7XG4gICAgYmxvID0gZXkgLSBiaGk7XG4gICAgdDAgPSBhbG8gKiBibG8gLSAodDEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIF9pID0gczAgLSB0MDtcbiAgICBidmlydCA9IHMwIC0gX2k7XG4gICAgZWFbMF0gPSBzMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQwKTtcbiAgICBfaiA9IHMxICsgX2k7XG4gICAgYnZpcnQgPSBfaiAtIHMxO1xuICAgIF8wID0gczEgLSAoX2ogLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgX2kgPSBfMCAtIHQxO1xuICAgIGJ2aXJ0ID0gXzAgLSBfaTtcbiAgICBlYVsxXSA9IF8wIC0gKF9pICsgYnZpcnQpICsgKGJ2aXJ0IC0gdDEpO1xuICAgIHUzID0gX2ogKyBfaTtcbiAgICBidmlydCA9IHUzIC0gX2o7XG4gICAgZWFbMl0gPSBfaiAtICh1MyAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICBlYVszXSA9IHUzO1xuICAgIHMxID0gYXggKiBjeTtcbiAgICBjID0gc3BsaXR0ZXIgKiBheDtcbiAgICBhaGkgPSBjIC0gKGMgLSBheCk7XG4gICAgYWxvID0gYXggLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogY3k7XG4gICAgYmhpID0gYyAtIChjIC0gY3kpO1xuICAgIGJsbyA9IGN5IC0gYmhpO1xuICAgIHMwID0gYWxvICogYmxvIC0gKHMxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICB0MSA9IGN4ICogYXk7XG4gICAgYyA9IHNwbGl0dGVyICogY3g7XG4gICAgYWhpID0gYyAtIChjIC0gY3gpO1xuICAgIGFsbyA9IGN4IC0gYWhpO1xuICAgIGMgPSBzcGxpdHRlciAqIGF5O1xuICAgIGJoaSA9IGMgLSAoYyAtIGF5KTtcbiAgICBibG8gPSBheSAtIGJoaTtcbiAgICB0MCA9IGFsbyAqIGJsbyAtICh0MSAtIGFoaSAqIGJoaSAtIGFsbyAqIGJoaSAtIGFoaSAqIGJsbyk7XG4gICAgX2kgPSBzMCAtIHQwO1xuICAgIGJ2aXJ0ID0gczAgLSBfaTtcbiAgICBhY1swXSA9IHMwIC0gKF9pICsgYnZpcnQpICsgKGJ2aXJ0IC0gdDApO1xuICAgIF9qID0gczEgKyBfaTtcbiAgICBidmlydCA9IF9qIC0gczE7XG4gICAgXzAgPSBzMSAtIChfaiAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICBfaSA9IF8wIC0gdDE7XG4gICAgYnZpcnQgPSBfMCAtIF9pO1xuICAgIGFjWzFdID0gXzAgLSAoX2kgKyBidmlydCkgKyAoYnZpcnQgLSB0MSk7XG4gICAgdTMgPSBfaiArIF9pO1xuICAgIGJ2aXJ0ID0gdTMgLSBfajtcbiAgICBhY1syXSA9IF9qIC0gKHUzIC0gYnZpcnQpICsgKF9pIC0gYnZpcnQpO1xuICAgIGFjWzNdID0gdTM7XG4gICAgczEgPSBieCAqIGR5O1xuICAgIGMgPSBzcGxpdHRlciAqIGJ4O1xuICAgIGFoaSA9IGMgLSAoYyAtIGJ4KTtcbiAgICBhbG8gPSBieCAtIGFoaTtcbiAgICBjID0gc3BsaXR0ZXIgKiBkeTtcbiAgICBiaGkgPSBjIC0gKGMgLSBkeSk7XG4gICAgYmxvID0gZHkgLSBiaGk7XG4gICAgczAgPSBhbG8gKiBibG8gLSAoczEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIHQxID0gZHggKiBieTtcbiAgICBjID0gc3BsaXR0ZXIgKiBkeDtcbiAgICBhaGkgPSBjIC0gKGMgLSBkeCk7XG4gICAgYWxvID0gZHggLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogYnk7XG4gICAgYmhpID0gYyAtIChjIC0gYnkpO1xuICAgIGJsbyA9IGJ5IC0gYmhpO1xuICAgIHQwID0gYWxvICogYmxvIC0gKHQxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICBfaSA9IHMwIC0gdDA7XG4gICAgYnZpcnQgPSBzMCAtIF9pO1xuICAgIGJkWzBdID0gczAgLSAoX2kgKyBidmlydCkgKyAoYnZpcnQgLSB0MCk7XG4gICAgX2ogPSBzMSArIF9pO1xuICAgIGJ2aXJ0ID0gX2ogLSBzMTtcbiAgICBfMCA9IHMxIC0gKF9qIC0gYnZpcnQpICsgKF9pIC0gYnZpcnQpO1xuICAgIF9pID0gXzAgLSB0MTtcbiAgICBidmlydCA9IF8wIC0gX2k7XG4gICAgYmRbMV0gPSBfMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQxKTtcbiAgICB1MyA9IF9qICsgX2k7XG4gICAgYnZpcnQgPSB1MyAtIF9qO1xuICAgIGJkWzJdID0gX2ogLSAodTMgLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgYmRbM10gPSB1MztcbiAgICBzMSA9IGN4ICogZXk7XG4gICAgYyA9IHNwbGl0dGVyICogY3g7XG4gICAgYWhpID0gYyAtIChjIC0gY3gpO1xuICAgIGFsbyA9IGN4IC0gYWhpO1xuICAgIGMgPSBzcGxpdHRlciAqIGV5O1xuICAgIGJoaSA9IGMgLSAoYyAtIGV5KTtcbiAgICBibG8gPSBleSAtIGJoaTtcbiAgICBzMCA9IGFsbyAqIGJsbyAtIChzMSAtIGFoaSAqIGJoaSAtIGFsbyAqIGJoaSAtIGFoaSAqIGJsbyk7XG4gICAgdDEgPSBleCAqIGN5O1xuICAgIGMgPSBzcGxpdHRlciAqIGV4O1xuICAgIGFoaSA9IGMgLSAoYyAtIGV4KTtcbiAgICBhbG8gPSBleCAtIGFoaTtcbiAgICBjID0gc3BsaXR0ZXIgKiBjeTtcbiAgICBiaGkgPSBjIC0gKGMgLSBjeSk7XG4gICAgYmxvID0gY3kgLSBiaGk7XG4gICAgdDAgPSBhbG8gKiBibG8gLSAodDEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIF9pID0gczAgLSB0MDtcbiAgICBidmlydCA9IHMwIC0gX2k7XG4gICAgY2VbMF0gPSBzMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQwKTtcbiAgICBfaiA9IHMxICsgX2k7XG4gICAgYnZpcnQgPSBfaiAtIHMxO1xuICAgIF8wID0gczEgLSAoX2ogLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgX2kgPSBfMCAtIHQxO1xuICAgIGJ2aXJ0ID0gXzAgLSBfaTtcbiAgICBjZVsxXSA9IF8wIC0gKF9pICsgYnZpcnQpICsgKGJ2aXJ0IC0gdDEpO1xuICAgIHUzID0gX2ogKyBfaTtcbiAgICBidmlydCA9IHUzIC0gX2o7XG4gICAgY2VbMl0gPSBfaiAtICh1MyAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICBjZVszXSA9IHUzO1xuICAgIHMxID0gZHggKiBheTtcbiAgICBjID0gc3BsaXR0ZXIgKiBkeDtcbiAgICBhaGkgPSBjIC0gKGMgLSBkeCk7XG4gICAgYWxvID0gZHggLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogYXk7XG4gICAgYmhpID0gYyAtIChjIC0gYXkpO1xuICAgIGJsbyA9IGF5IC0gYmhpO1xuICAgIHMwID0gYWxvICogYmxvIC0gKHMxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICB0MSA9IGF4ICogZHk7XG4gICAgYyA9IHNwbGl0dGVyICogYXg7XG4gICAgYWhpID0gYyAtIChjIC0gYXgpO1xuICAgIGFsbyA9IGF4IC0gYWhpO1xuICAgIGMgPSBzcGxpdHRlciAqIGR5O1xuICAgIGJoaSA9IGMgLSAoYyAtIGR5KTtcbiAgICBibG8gPSBkeSAtIGJoaTtcbiAgICB0MCA9IGFsbyAqIGJsbyAtICh0MSAtIGFoaSAqIGJoaSAtIGFsbyAqIGJoaSAtIGFoaSAqIGJsbyk7XG4gICAgX2kgPSBzMCAtIHQwO1xuICAgIGJ2aXJ0ID0gczAgLSBfaTtcbiAgICBkYVswXSA9IHMwIC0gKF9pICsgYnZpcnQpICsgKGJ2aXJ0IC0gdDApO1xuICAgIF9qID0gczEgKyBfaTtcbiAgICBidmlydCA9IF9qIC0gczE7XG4gICAgXzAgPSBzMSAtIChfaiAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICBfaSA9IF8wIC0gdDE7XG4gICAgYnZpcnQgPSBfMCAtIF9pO1xuICAgIGRhWzFdID0gXzAgLSAoX2kgKyBidmlydCkgKyAoYnZpcnQgLSB0MSk7XG4gICAgdTMgPSBfaiArIF9pO1xuICAgIGJ2aXJ0ID0gdTMgLSBfajtcbiAgICBkYVsyXSA9IF9qIC0gKHUzIC0gYnZpcnQpICsgKF9pIC0gYnZpcnQpO1xuICAgIGRhWzNdID0gdTM7XG4gICAgczEgPSBleCAqIGJ5O1xuICAgIGMgPSBzcGxpdHRlciAqIGV4O1xuICAgIGFoaSA9IGMgLSAoYyAtIGV4KTtcbiAgICBhbG8gPSBleCAtIGFoaTtcbiAgICBjID0gc3BsaXR0ZXIgKiBieTtcbiAgICBiaGkgPSBjIC0gKGMgLSBieSk7XG4gICAgYmxvID0gYnkgLSBiaGk7XG4gICAgczAgPSBhbG8gKiBibG8gLSAoczEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIHQxID0gYnggKiBleTtcbiAgICBjID0gc3BsaXR0ZXIgKiBieDtcbiAgICBhaGkgPSBjIC0gKGMgLSBieCk7XG4gICAgYWxvID0gYnggLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogZXk7XG4gICAgYmhpID0gYyAtIChjIC0gZXkpO1xuICAgIGJsbyA9IGV5IC0gYmhpO1xuICAgIHQwID0gYWxvICogYmxvIC0gKHQxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICBfaSA9IHMwIC0gdDA7XG4gICAgYnZpcnQgPSBzMCAtIF9pO1xuICAgIGViWzBdID0gczAgLSAoX2kgKyBidmlydCkgKyAoYnZpcnQgLSB0MCk7XG4gICAgX2ogPSBzMSArIF9pO1xuICAgIGJ2aXJ0ID0gX2ogLSBzMTtcbiAgICBfMCA9IHMxIC0gKF9qIC0gYnZpcnQpICsgKF9pIC0gYnZpcnQpO1xuICAgIF9pID0gXzAgLSB0MTtcbiAgICBidmlydCA9IF8wIC0gX2k7XG4gICAgZWJbMV0gPSBfMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQxKTtcbiAgICB1MyA9IF9qICsgX2k7XG4gICAgYnZpcnQgPSB1MyAtIF9qO1xuICAgIGViWzJdID0gX2ogLSAodTMgLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgZWJbM10gPSB1MztcblxuICAgIGNvbnN0IGFiY2xlbiA9IHN1bV90aHJlZV9zY2FsZShhYiwgYmMsIGFjLCBjeiwgYXosIC1ieiwgYWJjKTtcbiAgICBjb25zdCBiY2RsZW4gPSBzdW1fdGhyZWVfc2NhbGUoYmMsIGNkLCBiZCwgZHosIGJ6LCAtY3osIGJjZCk7XG4gICAgY29uc3QgY2RlbGVuID0gc3VtX3RocmVlX3NjYWxlKGNkLCBkZSwgY2UsIGV6LCBjeiwgLWR6LCBjZGUpO1xuICAgIGNvbnN0IGRlYWxlbiA9IHN1bV90aHJlZV9zY2FsZShkZSwgZWEsIGRhLCBheiwgZHosIC1leiwgZGVhKTtcbiAgICBjb25zdCBlYWJsZW4gPSBzdW1fdGhyZWVfc2NhbGUoZWEsIGFiLCBlYiwgYnosIGV6LCAtYXosIGVhYik7XG4gICAgY29uc3QgYWJkbGVuID0gc3VtX3RocmVlX3NjYWxlKGFiLCBiZCwgZGEsIGR6LCBheiwgYnosIGFiZCk7XG4gICAgY29uc3QgYmNlbGVuID0gc3VtX3RocmVlX3NjYWxlKGJjLCBjZSwgZWIsIGV6LCBieiwgY3osIGJjZSk7XG4gICAgY29uc3QgY2RhbGVuID0gc3VtX3RocmVlX3NjYWxlKGNkLCBkYSwgYWMsIGF6LCBjeiwgZHosIGNkYSk7XG4gICAgY29uc3QgZGVibGVuID0gc3VtX3RocmVlX3NjYWxlKGRlLCBlYiwgYmQsIGJ6LCBkeiwgZXosIGRlYik7XG4gICAgY29uc3QgZWFjbGVuID0gc3VtX3RocmVlX3NjYWxlKGVhLCBhYywgY2UsIGN6LCBleiwgYXosIGVhYyk7XG5cbiAgICBjb25zdCBkZXRlcmxlbiA9IHN1bV90aHJlZShcbiAgICAgICAgbGlmdGV4YWN0KGNkZWxlbiwgY2RlLCBiY2VsZW4sIGJjZSwgZGVibGVuLCBkZWIsIGJjZGxlbiwgYmNkLCBheCwgYXksIGF6LCBhZGV0KSwgYWRldCxcbiAgICAgICAgbGlmdGV4YWN0KGRlYWxlbiwgZGVhLCBjZGFsZW4sIGNkYSwgZWFjbGVuLCBlYWMsIGNkZWxlbiwgY2RlLCBieCwgYnksIGJ6LCBiZGV0KSwgYmRldCxcbiAgICAgICAgc3VtX3RocmVlKFxuICAgICAgICAgICAgbGlmdGV4YWN0KGVhYmxlbiwgZWFiLCBkZWJsZW4sIGRlYiwgYWJkbGVuLCBhYmQsIGRlYWxlbiwgZGVhLCBjeCwgY3ksIGN6LCBjZGV0KSwgY2RldCxcbiAgICAgICAgICAgIGxpZnRleGFjdChhYmNsZW4sIGFiYywgZWFjbGVuLCBlYWMsIGJjZWxlbiwgYmNlLCBlYWJsZW4sIGVhYiwgZHgsIGR5LCBkeiwgZGRldCksIGRkZXQsXG4gICAgICAgICAgICBsaWZ0ZXhhY3QoYmNkbGVuLCBiY2QsIGFiZGxlbiwgYWJkLCBjZGFsZW4sIGNkYSwgYWJjbGVuLCBhYmMsIGV4LCBleSwgZXosIGVkZXQpLCBlZGV0LCBjZGRldCwgY2RlZGV0KSwgY2RlZGV0LCBhYmRldCwgZGV0ZXIpO1xuXG4gICAgcmV0dXJuIGRldGVyW2RldGVybGVuIC0gMV07XG59XG5cbmNvbnN0IHhkZXQgPSB2ZWMoOTYpO1xuY29uc3QgeWRldCA9IHZlYyg5Nik7XG5jb25zdCB6ZGV0ID0gdmVjKDk2KTtcbmNvbnN0IGZpbiA9IHZlYygxMTUyKTtcblxuZnVuY3Rpb24gbGlmdGFkYXB0KGEsIGIsIGMsIGF6LCBieiwgY3osIHgsIHksIHosIG91dCkge1xuICAgIGNvbnN0IGxlbiA9IHN1bV90aHJlZV9zY2FsZShhLCBiLCBjLCBheiwgYnosIGN6LCBfMjQpO1xuICAgIHJldHVybiBzdW1fdGhyZWUoXG4gICAgICAgIHNjYWxlKHNjYWxlKGxlbiwgXzI0LCB4LCBfNDgpLCBfNDgsIHgsIHhkZXQpLCB4ZGV0LFxuICAgICAgICBzY2FsZShzY2FsZShsZW4sIF8yNCwgeSwgXzQ4KSwgXzQ4LCB5LCB5ZGV0KSwgeWRldCxcbiAgICAgICAgc2NhbGUoc2NhbGUobGVuLCBfMjQsIHosIF80OCksIF80OCwgeiwgemRldCksIHpkZXQsIF8xOTIsIG91dCk7XG59XG5cbmZ1bmN0aW9uIGluc3BoZXJlYWRhcHQoYXgsIGF5LCBheiwgYngsIGJ5LCBieiwgY3gsIGN5LCBjeiwgZHgsIGR5LCBkeiwgZXgsIGV5LCBleiwgcGVybWFuZW50KSB7XG4gICAgbGV0IGFiMywgYmMzLCBjZDMsIGRhMywgYWMzLCBiZDM7XG5cbiAgICBsZXQgYWV4dGFpbCwgYmV4dGFpbCwgY2V4dGFpbCwgZGV4dGFpbDtcbiAgICBsZXQgYWV5dGFpbCwgYmV5dGFpbCwgY2V5dGFpbCwgZGV5dGFpbDtcbiAgICBsZXQgYWV6dGFpbCwgYmV6dGFpbCwgY2V6dGFpbCwgZGV6dGFpbDtcblxuICAgIGxldCBidmlydCwgYywgYWhpLCBhbG8sIGJoaSwgYmxvLCBfaSwgX2osIF8wLCBzMSwgczAsIHQxLCB0MDtcblxuICAgIGNvbnN0IGFleCA9IGF4IC0gZXg7XG4gICAgY29uc3QgYmV4ID0gYnggLSBleDtcbiAgICBjb25zdCBjZXggPSBjeCAtIGV4O1xuICAgIGNvbnN0IGRleCA9IGR4IC0gZXg7XG4gICAgY29uc3QgYWV5ID0gYXkgLSBleTtcbiAgICBjb25zdCBiZXkgPSBieSAtIGV5O1xuICAgIGNvbnN0IGNleSA9IGN5IC0gZXk7XG4gICAgY29uc3QgZGV5ID0gZHkgLSBleTtcbiAgICBjb25zdCBhZXogPSBheiAtIGV6O1xuICAgIGNvbnN0IGJleiA9IGJ6IC0gZXo7XG4gICAgY29uc3QgY2V6ID0gY3ogLSBlejtcbiAgICBjb25zdCBkZXogPSBkeiAtIGV6O1xuXG4gICAgczEgPSBhZXggKiBiZXk7XG4gICAgYyA9IHNwbGl0dGVyICogYWV4O1xuICAgIGFoaSA9IGMgLSAoYyAtIGFleCk7XG4gICAgYWxvID0gYWV4IC0gYWhpO1xuICAgIGMgPSBzcGxpdHRlciAqIGJleTtcbiAgICBiaGkgPSBjIC0gKGMgLSBiZXkpO1xuICAgIGJsbyA9IGJleSAtIGJoaTtcbiAgICBzMCA9IGFsbyAqIGJsbyAtIChzMSAtIGFoaSAqIGJoaSAtIGFsbyAqIGJoaSAtIGFoaSAqIGJsbyk7XG4gICAgdDEgPSBiZXggKiBhZXk7XG4gICAgYyA9IHNwbGl0dGVyICogYmV4O1xuICAgIGFoaSA9IGMgLSAoYyAtIGJleCk7XG4gICAgYWxvID0gYmV4IC0gYWhpO1xuICAgIGMgPSBzcGxpdHRlciAqIGFleTtcbiAgICBiaGkgPSBjIC0gKGMgLSBhZXkpO1xuICAgIGJsbyA9IGFleSAtIGJoaTtcbiAgICB0MCA9IGFsbyAqIGJsbyAtICh0MSAtIGFoaSAqIGJoaSAtIGFsbyAqIGJoaSAtIGFoaSAqIGJsbyk7XG4gICAgX2kgPSBzMCAtIHQwO1xuICAgIGJ2aXJ0ID0gczAgLSBfaTtcbiAgICBhYlswXSA9IHMwIC0gKF9pICsgYnZpcnQpICsgKGJ2aXJ0IC0gdDApO1xuICAgIF9qID0gczEgKyBfaTtcbiAgICBidmlydCA9IF9qIC0gczE7XG4gICAgXzAgPSBzMSAtIChfaiAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICBfaSA9IF8wIC0gdDE7XG4gICAgYnZpcnQgPSBfMCAtIF9pO1xuICAgIGFiWzFdID0gXzAgLSAoX2kgKyBidmlydCkgKyAoYnZpcnQgLSB0MSk7XG4gICAgYWIzID0gX2ogKyBfaTtcbiAgICBidmlydCA9IGFiMyAtIF9qO1xuICAgIGFiWzJdID0gX2ogLSAoYWIzIC0gYnZpcnQpICsgKF9pIC0gYnZpcnQpO1xuICAgIGFiWzNdID0gYWIzO1xuICAgIHMxID0gYmV4ICogY2V5O1xuICAgIGMgPSBzcGxpdHRlciAqIGJleDtcbiAgICBhaGkgPSBjIC0gKGMgLSBiZXgpO1xuICAgIGFsbyA9IGJleCAtIGFoaTtcbiAgICBjID0gc3BsaXR0ZXIgKiBjZXk7XG4gICAgYmhpID0gYyAtIChjIC0gY2V5KTtcbiAgICBibG8gPSBjZXkgLSBiaGk7XG4gICAgczAgPSBhbG8gKiBibG8gLSAoczEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIHQxID0gY2V4ICogYmV5O1xuICAgIGMgPSBzcGxpdHRlciAqIGNleDtcbiAgICBhaGkgPSBjIC0gKGMgLSBjZXgpO1xuICAgIGFsbyA9IGNleCAtIGFoaTtcbiAgICBjID0gc3BsaXR0ZXIgKiBiZXk7XG4gICAgYmhpID0gYyAtIChjIC0gYmV5KTtcbiAgICBibG8gPSBiZXkgLSBiaGk7XG4gICAgdDAgPSBhbG8gKiBibG8gLSAodDEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIF9pID0gczAgLSB0MDtcbiAgICBidmlydCA9IHMwIC0gX2k7XG4gICAgYmNbMF0gPSBzMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQwKTtcbiAgICBfaiA9IHMxICsgX2k7XG4gICAgYnZpcnQgPSBfaiAtIHMxO1xuICAgIF8wID0gczEgLSAoX2ogLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgX2kgPSBfMCAtIHQxO1xuICAgIGJ2aXJ0ID0gXzAgLSBfaTtcbiAgICBiY1sxXSA9IF8wIC0gKF9pICsgYnZpcnQpICsgKGJ2aXJ0IC0gdDEpO1xuICAgIGJjMyA9IF9qICsgX2k7XG4gICAgYnZpcnQgPSBiYzMgLSBfajtcbiAgICBiY1syXSA9IF9qIC0gKGJjMyAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICBiY1szXSA9IGJjMztcbiAgICBzMSA9IGNleCAqIGRleTtcbiAgICBjID0gc3BsaXR0ZXIgKiBjZXg7XG4gICAgYWhpID0gYyAtIChjIC0gY2V4KTtcbiAgICBhbG8gPSBjZXggLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogZGV5O1xuICAgIGJoaSA9IGMgLSAoYyAtIGRleSk7XG4gICAgYmxvID0gZGV5IC0gYmhpO1xuICAgIHMwID0gYWxvICogYmxvIC0gKHMxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICB0MSA9IGRleCAqIGNleTtcbiAgICBjID0gc3BsaXR0ZXIgKiBkZXg7XG4gICAgYWhpID0gYyAtIChjIC0gZGV4KTtcbiAgICBhbG8gPSBkZXggLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogY2V5O1xuICAgIGJoaSA9IGMgLSAoYyAtIGNleSk7XG4gICAgYmxvID0gY2V5IC0gYmhpO1xuICAgIHQwID0gYWxvICogYmxvIC0gKHQxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICBfaSA9IHMwIC0gdDA7XG4gICAgYnZpcnQgPSBzMCAtIF9pO1xuICAgIGNkWzBdID0gczAgLSAoX2kgKyBidmlydCkgKyAoYnZpcnQgLSB0MCk7XG4gICAgX2ogPSBzMSArIF9pO1xuICAgIGJ2aXJ0ID0gX2ogLSBzMTtcbiAgICBfMCA9IHMxIC0gKF9qIC0gYnZpcnQpICsgKF9pIC0gYnZpcnQpO1xuICAgIF9pID0gXzAgLSB0MTtcbiAgICBidmlydCA9IF8wIC0gX2k7XG4gICAgY2RbMV0gPSBfMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQxKTtcbiAgICBjZDMgPSBfaiArIF9pO1xuICAgIGJ2aXJ0ID0gY2QzIC0gX2o7XG4gICAgY2RbMl0gPSBfaiAtIChjZDMgLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgY2RbM10gPSBjZDM7XG4gICAgczEgPSBkZXggKiBhZXk7XG4gICAgYyA9IHNwbGl0dGVyICogZGV4O1xuICAgIGFoaSA9IGMgLSAoYyAtIGRleCk7XG4gICAgYWxvID0gZGV4IC0gYWhpO1xuICAgIGMgPSBzcGxpdHRlciAqIGFleTtcbiAgICBiaGkgPSBjIC0gKGMgLSBhZXkpO1xuICAgIGJsbyA9IGFleSAtIGJoaTtcbiAgICBzMCA9IGFsbyAqIGJsbyAtIChzMSAtIGFoaSAqIGJoaSAtIGFsbyAqIGJoaSAtIGFoaSAqIGJsbyk7XG4gICAgdDEgPSBhZXggKiBkZXk7XG4gICAgYyA9IHNwbGl0dGVyICogYWV4O1xuICAgIGFoaSA9IGMgLSAoYyAtIGFleCk7XG4gICAgYWxvID0gYWV4IC0gYWhpO1xuICAgIGMgPSBzcGxpdHRlciAqIGRleTtcbiAgICBiaGkgPSBjIC0gKGMgLSBkZXkpO1xuICAgIGJsbyA9IGRleSAtIGJoaTtcbiAgICB0MCA9IGFsbyAqIGJsbyAtICh0MSAtIGFoaSAqIGJoaSAtIGFsbyAqIGJoaSAtIGFoaSAqIGJsbyk7XG4gICAgX2kgPSBzMCAtIHQwO1xuICAgIGJ2aXJ0ID0gczAgLSBfaTtcbiAgICBkYVswXSA9IHMwIC0gKF9pICsgYnZpcnQpICsgKGJ2aXJ0IC0gdDApO1xuICAgIF9qID0gczEgKyBfaTtcbiAgICBidmlydCA9IF9qIC0gczE7XG4gICAgXzAgPSBzMSAtIChfaiAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICBfaSA9IF8wIC0gdDE7XG4gICAgYnZpcnQgPSBfMCAtIF9pO1xuICAgIGRhWzFdID0gXzAgLSAoX2kgKyBidmlydCkgKyAoYnZpcnQgLSB0MSk7XG4gICAgZGEzID0gX2ogKyBfaTtcbiAgICBidmlydCA9IGRhMyAtIF9qO1xuICAgIGRhWzJdID0gX2ogLSAoZGEzIC0gYnZpcnQpICsgKF9pIC0gYnZpcnQpO1xuICAgIGRhWzNdID0gZGEzO1xuICAgIHMxID0gYWV4ICogY2V5O1xuICAgIGMgPSBzcGxpdHRlciAqIGFleDtcbiAgICBhaGkgPSBjIC0gKGMgLSBhZXgpO1xuICAgIGFsbyA9IGFleCAtIGFoaTtcbiAgICBjID0gc3BsaXR0ZXIgKiBjZXk7XG4gICAgYmhpID0gYyAtIChjIC0gY2V5KTtcbiAgICBibG8gPSBjZXkgLSBiaGk7XG4gICAgczAgPSBhbG8gKiBibG8gLSAoczEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIHQxID0gY2V4ICogYWV5O1xuICAgIGMgPSBzcGxpdHRlciAqIGNleDtcbiAgICBhaGkgPSBjIC0gKGMgLSBjZXgpO1xuICAgIGFsbyA9IGNleCAtIGFoaTtcbiAgICBjID0gc3BsaXR0ZXIgKiBhZXk7XG4gICAgYmhpID0gYyAtIChjIC0gYWV5KTtcbiAgICBibG8gPSBhZXkgLSBiaGk7XG4gICAgdDAgPSBhbG8gKiBibG8gLSAodDEgLSBhaGkgKiBiaGkgLSBhbG8gKiBiaGkgLSBhaGkgKiBibG8pO1xuICAgIF9pID0gczAgLSB0MDtcbiAgICBidmlydCA9IHMwIC0gX2k7XG4gICAgYWNbMF0gPSBzMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQwKTtcbiAgICBfaiA9IHMxICsgX2k7XG4gICAgYnZpcnQgPSBfaiAtIHMxO1xuICAgIF8wID0gczEgLSAoX2ogLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgX2kgPSBfMCAtIHQxO1xuICAgIGJ2aXJ0ID0gXzAgLSBfaTtcbiAgICBhY1sxXSA9IF8wIC0gKF9pICsgYnZpcnQpICsgKGJ2aXJ0IC0gdDEpO1xuICAgIGFjMyA9IF9qICsgX2k7XG4gICAgYnZpcnQgPSBhYzMgLSBfajtcbiAgICBhY1syXSA9IF9qIC0gKGFjMyAtIGJ2aXJ0KSArIChfaSAtIGJ2aXJ0KTtcbiAgICBhY1szXSA9IGFjMztcbiAgICBzMSA9IGJleCAqIGRleTtcbiAgICBjID0gc3BsaXR0ZXIgKiBiZXg7XG4gICAgYWhpID0gYyAtIChjIC0gYmV4KTtcbiAgICBhbG8gPSBiZXggLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogZGV5O1xuICAgIGJoaSA9IGMgLSAoYyAtIGRleSk7XG4gICAgYmxvID0gZGV5IC0gYmhpO1xuICAgIHMwID0gYWxvICogYmxvIC0gKHMxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICB0MSA9IGRleCAqIGJleTtcbiAgICBjID0gc3BsaXR0ZXIgKiBkZXg7XG4gICAgYWhpID0gYyAtIChjIC0gZGV4KTtcbiAgICBhbG8gPSBkZXggLSBhaGk7XG4gICAgYyA9IHNwbGl0dGVyICogYmV5O1xuICAgIGJoaSA9IGMgLSAoYyAtIGJleSk7XG4gICAgYmxvID0gYmV5IC0gYmhpO1xuICAgIHQwID0gYWxvICogYmxvIC0gKHQxIC0gYWhpICogYmhpIC0gYWxvICogYmhpIC0gYWhpICogYmxvKTtcbiAgICBfaSA9IHMwIC0gdDA7XG4gICAgYnZpcnQgPSBzMCAtIF9pO1xuICAgIGJkWzBdID0gczAgLSAoX2kgKyBidmlydCkgKyAoYnZpcnQgLSB0MCk7XG4gICAgX2ogPSBzMSArIF9pO1xuICAgIGJ2aXJ0ID0gX2ogLSBzMTtcbiAgICBfMCA9IHMxIC0gKF9qIC0gYnZpcnQpICsgKF9pIC0gYnZpcnQpO1xuICAgIF9pID0gXzAgLSB0MTtcbiAgICBidmlydCA9IF8wIC0gX2k7XG4gICAgYmRbMV0gPSBfMCAtIChfaSArIGJ2aXJ0KSArIChidmlydCAtIHQxKTtcbiAgICBiZDMgPSBfaiArIF9pO1xuICAgIGJ2aXJ0ID0gYmQzIC0gX2o7XG4gICAgYmRbMl0gPSBfaiAtIChiZDMgLSBidmlydCkgKyAoX2kgLSBidmlydCk7XG4gICAgYmRbM10gPSBiZDM7XG5cbiAgICBjb25zdCBmaW5sZW4gPSBzdW0oXG4gICAgICAgIHN1bShcbiAgICAgICAgICAgIG5lZ2F0ZShsaWZ0YWRhcHQoYmMsIGNkLCBiZCwgZGV6LCBiZXosIC1jZXosIGFleCwgYWV5LCBhZXosIGFkZXQpLCBhZGV0KSwgYWRldCxcbiAgICAgICAgICAgIGxpZnRhZGFwdChjZCwgZGEsIGFjLCBhZXosIGNleiwgZGV6LCBiZXgsIGJleSwgYmV6LCBiZGV0KSwgYmRldCwgYWJkZXQpLCBhYmRldCxcbiAgICAgICAgc3VtKFxuICAgICAgICAgICAgbmVnYXRlKGxpZnRhZGFwdChkYSwgYWIsIGJkLCBiZXosIGRleiwgYWV6LCBjZXgsIGNleSwgY2V6LCBjZGV0KSwgY2RldCksIGNkZXQsXG4gICAgICAgICAgICBsaWZ0YWRhcHQoYWIsIGJjLCBhYywgY2V6LCBhZXosIC1iZXosIGRleCwgZGV5LCBkZXosIGRkZXQpLCBkZGV0LCBjZGRldCksIGNkZGV0LCBmaW4pO1xuXG4gICAgbGV0IGRldCA9IGVzdGltYXRlKGZpbmxlbiwgZmluKTtcbiAgICBsZXQgZXJyYm91bmQgPSBpc3BlcnJib3VuZEIgKiBwZXJtYW5lbnQ7XG4gICAgaWYgKGRldCA+PSBlcnJib3VuZCB8fCAtZGV0ID49IGVycmJvdW5kKSB7XG4gICAgICAgIHJldHVybiBkZXQ7XG4gICAgfVxuXG4gICAgYnZpcnQgPSBheCAtIGFleDtcbiAgICBhZXh0YWlsID0gYXggLSAoYWV4ICsgYnZpcnQpICsgKGJ2aXJ0IC0gZXgpO1xuICAgIGJ2aXJ0ID0gYXkgLSBhZXk7XG4gICAgYWV5dGFpbCA9IGF5IC0gKGFleSArIGJ2aXJ0KSArIChidmlydCAtIGV5KTtcbiAgICBidmlydCA9IGF6IC0gYWV6O1xuICAgIGFlenRhaWwgPSBheiAtIChhZXogKyBidmlydCkgKyAoYnZpcnQgLSBleik7XG4gICAgYnZpcnQgPSBieCAtIGJleDtcbiAgICBiZXh0YWlsID0gYnggLSAoYmV4ICsgYnZpcnQpICsgKGJ2aXJ0IC0gZXgpO1xuICAgIGJ2aXJ0ID0gYnkgLSBiZXk7XG4gICAgYmV5dGFpbCA9IGJ5IC0gKGJleSArIGJ2aXJ0KSArIChidmlydCAtIGV5KTtcbiAgICBidmlydCA9IGJ6IC0gYmV6O1xuICAgIGJlenRhaWwgPSBieiAtIChiZXogKyBidmlydCkgKyAoYnZpcnQgLSBleik7XG4gICAgYnZpcnQgPSBjeCAtIGNleDtcbiAgICBjZXh0YWlsID0gY3ggLSAoY2V4ICsgYnZpcnQpICsgKGJ2aXJ0IC0gZXgpO1xuICAgIGJ2aXJ0ID0gY3kgLSBjZXk7XG4gICAgY2V5dGFpbCA9IGN5IC0gKGNleSArIGJ2aXJ0KSArIChidmlydCAtIGV5KTtcbiAgICBidmlydCA9IGN6IC0gY2V6O1xuICAgIGNlenRhaWwgPSBjeiAtIChjZXogKyBidmlydCkgKyAoYnZpcnQgLSBleik7XG4gICAgYnZpcnQgPSBkeCAtIGRleDtcbiAgICBkZXh0YWlsID0gZHggLSAoZGV4ICsgYnZpcnQpICsgKGJ2aXJ0IC0gZXgpO1xuICAgIGJ2aXJ0ID0gZHkgLSBkZXk7XG4gICAgZGV5dGFpbCA9IGR5IC0gKGRleSArIGJ2aXJ0KSArIChidmlydCAtIGV5KTtcbiAgICBidmlydCA9IGR6IC0gZGV6O1xuICAgIGRlenRhaWwgPSBkeiAtIChkZXogKyBidmlydCkgKyAoYnZpcnQgLSBleik7XG4gICAgaWYgKGFleHRhaWwgPT09IDAgJiYgYWV5dGFpbCA9PT0gMCAmJiBhZXp0YWlsID09PSAwICYmXG4gICAgICAgIGJleHRhaWwgPT09IDAgJiYgYmV5dGFpbCA9PT0gMCAmJiBiZXp0YWlsID09PSAwICYmXG4gICAgICAgIGNleHRhaWwgPT09IDAgJiYgY2V5dGFpbCA9PT0gMCAmJiBjZXp0YWlsID09PSAwICYmXG4gICAgICAgIGRleHRhaWwgPT09IDAgJiYgZGV5dGFpbCA9PT0gMCAmJiBkZXp0YWlsID09PSAwKSB7XG4gICAgICAgIHJldHVybiBkZXQ7XG4gICAgfVxuXG4gICAgZXJyYm91bmQgPSBpc3BlcnJib3VuZEMgKiBwZXJtYW5lbnQgKyByZXN1bHRlcnJib3VuZCAqIE1hdGguYWJzKGRldCk7XG5cbiAgICBjb25zdCBhYmVwcyA9IChhZXggKiBiZXl0YWlsICsgYmV5ICogYWV4dGFpbCkgLSAoYWV5ICogYmV4dGFpbCArIGJleCAqIGFleXRhaWwpO1xuICAgIGNvbnN0IGJjZXBzID0gKGJleCAqIGNleXRhaWwgKyBjZXkgKiBiZXh0YWlsKSAtIChiZXkgKiBjZXh0YWlsICsgY2V4ICogYmV5dGFpbCk7XG4gICAgY29uc3QgY2RlcHMgPSAoY2V4ICogZGV5dGFpbCArIGRleSAqIGNleHRhaWwpIC0gKGNleSAqIGRleHRhaWwgKyBkZXggKiBjZXl0YWlsKTtcbiAgICBjb25zdCBkYWVwcyA9IChkZXggKiBhZXl0YWlsICsgYWV5ICogZGV4dGFpbCkgLSAoZGV5ICogYWV4dGFpbCArIGFleCAqIGRleXRhaWwpO1xuICAgIGNvbnN0IGFjZXBzID0gKGFleCAqIGNleXRhaWwgKyBjZXkgKiBhZXh0YWlsKSAtIChhZXkgKiBjZXh0YWlsICsgY2V4ICogYWV5dGFpbCk7XG4gICAgY29uc3QgYmRlcHMgPSAoYmV4ICogZGV5dGFpbCArIGRleSAqIGJleHRhaWwpIC0gKGJleSAqIGRleHRhaWwgKyBkZXggKiBiZXl0YWlsKTtcbiAgICBkZXQgKz1cbiAgICAgICAgKCgoYmV4ICogYmV4ICsgYmV5ICogYmV5ICsgYmV6ICogYmV6KSAqICgoY2V6ICogZGFlcHMgKyBkZXogKiBhY2VwcyArIGFleiAqIGNkZXBzKSArXG4gICAgICAgIChjZXp0YWlsICogZGEzICsgZGV6dGFpbCAqIGFjMyArIGFlenRhaWwgKiBjZDMpKSArIChkZXggKiBkZXggKyBkZXkgKiBkZXkgKyBkZXogKiBkZXopICpcbiAgICAgICAgKChhZXogKiBiY2VwcyAtIGJleiAqIGFjZXBzICsgY2V6ICogYWJlcHMpICsgKGFlenRhaWwgKiBiYzMgLSBiZXp0YWlsICogYWMzICsgY2V6dGFpbCAqIGFiMykpKSAtXG4gICAgICAgICgoYWV4ICogYWV4ICsgYWV5ICogYWV5ICsgYWV6ICogYWV6KSAqICgoYmV6ICogY2RlcHMgLSBjZXogKiBiZGVwcyArIGRleiAqIGJjZXBzKSArXG4gICAgICAgIChiZXp0YWlsICogY2QzIC0gY2V6dGFpbCAqIGJkMyArIGRlenRhaWwgKiBiYzMpKSArIChjZXggKiBjZXggKyBjZXkgKiBjZXkgKyBjZXogKiBjZXopICpcbiAgICAgICAgKChkZXogKiBhYmVwcyArIGFleiAqIGJkZXBzICsgYmV6ICogZGFlcHMpICsgKGRlenRhaWwgKiBhYjMgKyBhZXp0YWlsICogYmQzICsgYmV6dGFpbCAqIGRhMykpKSkgK1xuICAgICAgICAyICogKCgoYmV4ICogYmV4dGFpbCArIGJleSAqIGJleXRhaWwgKyBiZXogKiBiZXp0YWlsKSAqIChjZXogKiBkYTMgKyBkZXogKiBhYzMgKyBhZXogKiBjZDMpICtcbiAgICAgICAgKGRleCAqIGRleHRhaWwgKyBkZXkgKiBkZXl0YWlsICsgZGV6ICogZGV6dGFpbCkgKiAoYWV6ICogYmMzIC0gYmV6ICogYWMzICsgY2V6ICogYWIzKSkgLVxuICAgICAgICAoKGFleCAqIGFleHRhaWwgKyBhZXkgKiBhZXl0YWlsICsgYWV6ICogYWV6dGFpbCkgKiAoYmV6ICogY2QzIC0gY2V6ICogYmQzICsgZGV6ICogYmMzKSArXG4gICAgICAgIChjZXggKiBjZXh0YWlsICsgY2V5ICogY2V5dGFpbCArIGNleiAqIGNlenRhaWwpICogKGRleiAqIGFiMyArIGFleiAqIGJkMyArIGJleiAqIGRhMykpKTtcblxuICAgIGlmIChkZXQgPj0gZXJyYm91bmQgfHwgLWRldCA+PSBlcnJib3VuZCkge1xuICAgICAgICByZXR1cm4gZGV0O1xuICAgIH1cblxuICAgIHJldHVybiBpbnNwaGVyZWV4YWN0KGF4LCBheSwgYXosIGJ4LCBieSwgYnosIGN4LCBjeSwgY3osIGR4LCBkeSwgZHosIGV4LCBleSwgZXopO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5zcGhlcmUoYXgsIGF5LCBheiwgYngsIGJ5LCBieiwgY3gsIGN5LCBjeiwgZHgsIGR5LCBkeiwgZXgsIGV5LCBleikge1xuICAgIGNvbnN0IGFleCA9IGF4IC0gZXg7XG4gICAgY29uc3QgYmV4ID0gYnggLSBleDtcbiAgICBjb25zdCBjZXggPSBjeCAtIGV4O1xuICAgIGNvbnN0IGRleCA9IGR4IC0gZXg7XG4gICAgY29uc3QgYWV5ID0gYXkgLSBleTtcbiAgICBjb25zdCBiZXkgPSBieSAtIGV5O1xuICAgIGNvbnN0IGNleSA9IGN5IC0gZXk7XG4gICAgY29uc3QgZGV5ID0gZHkgLSBleTtcbiAgICBjb25zdCBhZXogPSBheiAtIGV6O1xuICAgIGNvbnN0IGJleiA9IGJ6IC0gZXo7XG4gICAgY29uc3QgY2V6ID0gY3ogLSBlejtcbiAgICBjb25zdCBkZXogPSBkeiAtIGV6O1xuXG4gICAgY29uc3QgYWV4YmV5ID0gYWV4ICogYmV5O1xuICAgIGNvbnN0IGJleGFleSA9IGJleCAqIGFleTtcbiAgICBjb25zdCBhYiA9IGFleGJleSAtIGJleGFleTtcbiAgICBjb25zdCBiZXhjZXkgPSBiZXggKiBjZXk7XG4gICAgY29uc3QgY2V4YmV5ID0gY2V4ICogYmV5O1xuICAgIGNvbnN0IGJjID0gYmV4Y2V5IC0gY2V4YmV5O1xuICAgIGNvbnN0IGNleGRleSA9IGNleCAqIGRleTtcbiAgICBjb25zdCBkZXhjZXkgPSBkZXggKiBjZXk7XG4gICAgY29uc3QgY2QgPSBjZXhkZXkgLSBkZXhjZXk7XG4gICAgY29uc3QgZGV4YWV5ID0gZGV4ICogYWV5O1xuICAgIGNvbnN0IGFleGRleSA9IGFleCAqIGRleTtcbiAgICBjb25zdCBkYSA9IGRleGFleSAtIGFleGRleTtcbiAgICBjb25zdCBhZXhjZXkgPSBhZXggKiBjZXk7XG4gICAgY29uc3QgY2V4YWV5ID0gY2V4ICogYWV5O1xuICAgIGNvbnN0IGFjID0gYWV4Y2V5IC0gY2V4YWV5O1xuICAgIGNvbnN0IGJleGRleSA9IGJleCAqIGRleTtcbiAgICBjb25zdCBkZXhiZXkgPSBkZXggKiBiZXk7XG4gICAgY29uc3QgYmQgPSBiZXhkZXkgLSBkZXhiZXk7XG5cbiAgICBjb25zdCBhbGlmdCA9IGFleCAqIGFleCArIGFleSAqIGFleSArIGFleiAqIGFlejtcbiAgICBjb25zdCBibGlmdCA9IGJleCAqIGJleCArIGJleSAqIGJleSArIGJleiAqIGJlejtcbiAgICBjb25zdCBjbGlmdCA9IGNleCAqIGNleCArIGNleSAqIGNleSArIGNleiAqIGNlejtcbiAgICBjb25zdCBkbGlmdCA9IGRleCAqIGRleCArIGRleSAqIGRleSArIGRleiAqIGRlejtcblxuICAgIGNvbnN0IGRldCA9XG4gICAgICAgIChjbGlmdCAqIChkZXogKiBhYiArIGFleiAqIGJkICsgYmV6ICogZGEpIC0gZGxpZnQgKiAoYWV6ICogYmMgLSBiZXogKiBhYyArIGNleiAqIGFiKSkgK1xuICAgICAgICAoYWxpZnQgKiAoYmV6ICogY2QgLSBjZXogKiBiZCArIGRleiAqIGJjKSAtIGJsaWZ0ICogKGNleiAqIGRhICsgZGV6ICogYWMgKyBhZXogKiBjZCkpO1xuXG4gICAgY29uc3QgYWV6cGx1cyA9IE1hdGguYWJzKGFleik7XG4gICAgY29uc3QgYmV6cGx1cyA9IE1hdGguYWJzKGJleik7XG4gICAgY29uc3QgY2V6cGx1cyA9IE1hdGguYWJzKGNleik7XG4gICAgY29uc3QgZGV6cGx1cyA9IE1hdGguYWJzKGRleik7XG4gICAgY29uc3QgYWV4YmV5cGx1cyA9IE1hdGguYWJzKGFleGJleSkgKyBNYXRoLmFicyhiZXhhZXkpO1xuICAgIGNvbnN0IGJleGNleXBsdXMgPSBNYXRoLmFicyhiZXhjZXkpICsgTWF0aC5hYnMoY2V4YmV5KTtcbiAgICBjb25zdCBjZXhkZXlwbHVzID0gTWF0aC5hYnMoY2V4ZGV5KSArIE1hdGguYWJzKGRleGNleSk7XG4gICAgY29uc3QgZGV4YWV5cGx1cyA9IE1hdGguYWJzKGRleGFleSkgKyBNYXRoLmFicyhhZXhkZXkpO1xuICAgIGNvbnN0IGFleGNleXBsdXMgPSBNYXRoLmFicyhhZXhjZXkpICsgTWF0aC5hYnMoY2V4YWV5KTtcbiAgICBjb25zdCBiZXhkZXlwbHVzID0gTWF0aC5hYnMoYmV4ZGV5KSArIE1hdGguYWJzKGRleGJleSk7XG4gICAgY29uc3QgcGVybWFuZW50ID1cbiAgICAgICAgKGNleGRleXBsdXMgKiBiZXpwbHVzICsgYmV4ZGV5cGx1cyAqIGNlenBsdXMgKyBiZXhjZXlwbHVzICogZGV6cGx1cykgKiBhbGlmdCArXG4gICAgICAgIChkZXhhZXlwbHVzICogY2V6cGx1cyArIGFleGNleXBsdXMgKiBkZXpwbHVzICsgY2V4ZGV5cGx1cyAqIGFlenBsdXMpICogYmxpZnQgK1xuICAgICAgICAoYWV4YmV5cGx1cyAqIGRlenBsdXMgKyBiZXhkZXlwbHVzICogYWV6cGx1cyArIGRleGFleXBsdXMgKiBiZXpwbHVzKSAqIGNsaWZ0ICtcbiAgICAgICAgKGJleGNleXBsdXMgKiBhZXpwbHVzICsgYWV4Y2V5cGx1cyAqIGJlenBsdXMgKyBhZXhiZXlwbHVzICogY2V6cGx1cykgKiBkbGlmdDtcblxuICAgIGNvbnN0IGVycmJvdW5kID0gaXNwZXJyYm91bmRBICogcGVybWFuZW50O1xuICAgIGlmIChkZXQgPiBlcnJib3VuZCB8fCAtZGV0ID4gZXJyYm91bmQpIHtcbiAgICAgICAgcmV0dXJuIGRldDtcbiAgICB9XG4gICAgcmV0dXJuIC1pbnNwaGVyZWFkYXB0KGF4LCBheSwgYXosIGJ4LCBieSwgYnosIGN4LCBjeSwgY3osIGR4LCBkeSwgZHosIGV4LCBleSwgZXosIHBlcm1hbmVudCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnNwaGVyZWZhc3QocGF4LCBwYXksIHBheiwgcGJ4LCBwYnksIHBieiwgcGN4LCBwY3ksIHBjeiwgcGR4LCBwZHksIHBkeiwgcGV4LCBwZXksIHBleikge1xuICAgIGNvbnN0IGFleCA9IHBheCAtIHBleDtcbiAgICBjb25zdCBiZXggPSBwYnggLSBwZXg7XG4gICAgY29uc3QgY2V4ID0gcGN4IC0gcGV4O1xuICAgIGNvbnN0IGRleCA9IHBkeCAtIHBleDtcbiAgICBjb25zdCBhZXkgPSBwYXkgLSBwZXk7XG4gICAgY29uc3QgYmV5ID0gcGJ5IC0gcGV5O1xuICAgIGNvbnN0IGNleSA9IHBjeSAtIHBleTtcbiAgICBjb25zdCBkZXkgPSBwZHkgLSBwZXk7XG4gICAgY29uc3QgYWV6ID0gcGF6IC0gcGV6O1xuICAgIGNvbnN0IGJleiA9IHBieiAtIHBlejtcbiAgICBjb25zdCBjZXogPSBwY3ogLSBwZXo7XG4gICAgY29uc3QgZGV6ID0gcGR6IC0gcGV6O1xuXG4gICAgY29uc3QgYWIgPSBhZXggKiBiZXkgLSBiZXggKiBhZXk7XG4gICAgY29uc3QgYmMgPSBiZXggKiBjZXkgLSBjZXggKiBiZXk7XG4gICAgY29uc3QgY2QgPSBjZXggKiBkZXkgLSBkZXggKiBjZXk7XG4gICAgY29uc3QgZGEgPSBkZXggKiBhZXkgLSBhZXggKiBkZXk7XG4gICAgY29uc3QgYWMgPSBhZXggKiBjZXkgLSBjZXggKiBhZXk7XG4gICAgY29uc3QgYmQgPSBiZXggKiBkZXkgLSBkZXggKiBiZXk7XG5cbiAgICBjb25zdCBhYmMgPSBhZXogKiBiYyAtIGJleiAqIGFjICsgY2V6ICogYWI7XG4gICAgY29uc3QgYmNkID0gYmV6ICogY2QgLSBjZXogKiBiZCArIGRleiAqIGJjO1xuICAgIGNvbnN0IGNkYSA9IGNleiAqIGRhICsgZGV6ICogYWMgKyBhZXogKiBjZDtcbiAgICBjb25zdCBkYWIgPSBkZXogKiBhYiArIGFleiAqIGJkICsgYmV6ICogZGE7XG5cbiAgICBjb25zdCBhbGlmdCA9IGFleCAqIGFleCArIGFleSAqIGFleSArIGFleiAqIGFlejtcbiAgICBjb25zdCBibGlmdCA9IGJleCAqIGJleCArIGJleSAqIGJleSArIGJleiAqIGJlejtcbiAgICBjb25zdCBjbGlmdCA9IGNleCAqIGNleCArIGNleSAqIGNleSArIGNleiAqIGNlejtcbiAgICBjb25zdCBkbGlmdCA9IGRleCAqIGRleCArIGRleSAqIGRleSArIGRleiAqIGRlejtcblxuICAgIHJldHVybiAoY2xpZnQgKiBkYWIgLSBkbGlmdCAqIGFiYykgKyAoYWxpZnQgKiBiY2QgLSBibGlmdCAqIGNkYSk7XG59XG4iLCJcbmNvbnN0IEVQU0lMT04gPSBNYXRoLnBvdygyLCAtNTIpO1xuY29uc3QgRURHRV9TVEFDSyA9IG5ldyBVaW50MzJBcnJheSg1MTIpO1xuXG5pbXBvcnQge29yaWVudDJkfSBmcm9tICdyb2J1c3QtcHJlZGljYXRlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERlbGF1bmF0b3Ige1xuXG4gICAgc3RhdGljIGZyb20ocG9pbnRzLCBnZXRYID0gZGVmYXVsdEdldFgsIGdldFkgPSBkZWZhdWx0R2V0WSkge1xuICAgICAgICBjb25zdCBuID0gcG9pbnRzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgY29vcmRzID0gbmV3IEZsb2F0NjRBcnJheShuICogMik7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHAgPSBwb2ludHNbaV07XG4gICAgICAgICAgICBjb29yZHNbMiAqIGldID0gZ2V0WChwKTtcbiAgICAgICAgICAgIGNvb3Jkc1syICogaSArIDFdID0gZ2V0WShwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgRGVsYXVuYXRvcihjb29yZHMpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKGNvb3Jkcykge1xuICAgICAgICBjb25zdCBuID0gY29vcmRzLmxlbmd0aCA+PiAxO1xuICAgICAgICBpZiAobiA+IDAgJiYgdHlwZW9mIGNvb3Jkc1swXSAhPT0gJ251bWJlcicpIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgY29vcmRzIHRvIGNvbnRhaW4gbnVtYmVycy4nKTtcblxuICAgICAgICB0aGlzLmNvb3JkcyA9IGNvb3JkcztcblxuICAgICAgICAvLyBhcnJheXMgdGhhdCB3aWxsIHN0b3JlIHRoZSB0cmlhbmd1bGF0aW9uIGdyYXBoXG4gICAgICAgIGNvbnN0IG1heFRyaWFuZ2xlcyA9IE1hdGgubWF4KDIgKiBuIC0gNSwgMCk7XG4gICAgICAgIHRoaXMuX3RyaWFuZ2xlcyA9IG5ldyBVaW50MzJBcnJheShtYXhUcmlhbmdsZXMgKiAzKTtcbiAgICAgICAgdGhpcy5faGFsZmVkZ2VzID0gbmV3IEludDMyQXJyYXkobWF4VHJpYW5nbGVzICogMyk7XG5cbiAgICAgICAgLy8gdGVtcG9yYXJ5IGFycmF5cyBmb3IgdHJhY2tpbmcgdGhlIGVkZ2VzIG9mIHRoZSBhZHZhbmNpbmcgY29udmV4IGh1bGxcbiAgICAgICAgdGhpcy5faGFzaFNpemUgPSBNYXRoLmNlaWwoTWF0aC5zcXJ0KG4pKTtcbiAgICAgICAgdGhpcy5faHVsbFByZXYgPSBuZXcgVWludDMyQXJyYXkobik7IC8vIGVkZ2UgdG8gcHJldiBlZGdlXG4gICAgICAgIHRoaXMuX2h1bGxOZXh0ID0gbmV3IFVpbnQzMkFycmF5KG4pOyAvLyBlZGdlIHRvIG5leHQgZWRnZVxuICAgICAgICB0aGlzLl9odWxsVHJpID0gbmV3IFVpbnQzMkFycmF5KG4pOyAvLyBlZGdlIHRvIGFkamFjZW50IHRyaWFuZ2xlXG4gICAgICAgIHRoaXMuX2h1bGxIYXNoID0gbmV3IEludDMyQXJyYXkodGhpcy5faGFzaFNpemUpOyAvLyBhbmd1bGFyIGVkZ2UgaGFzaFxuXG4gICAgICAgIC8vIHRlbXBvcmFyeSBhcnJheXMgZm9yIHNvcnRpbmcgcG9pbnRzXG4gICAgICAgIHRoaXMuX2lkcyA9IG5ldyBVaW50MzJBcnJheShuKTtcbiAgICAgICAgdGhpcy5fZGlzdHMgPSBuZXcgRmxvYXQ2NEFycmF5KG4pO1xuXG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlKCkge1xuICAgICAgICBjb25zdCB7Y29vcmRzLCBfaHVsbFByZXY6IGh1bGxQcmV2LCBfaHVsbE5leHQ6IGh1bGxOZXh0LCBfaHVsbFRyaTogaHVsbFRyaSwgX2h1bGxIYXNoOiBodWxsSGFzaH0gPSAgdGhpcztcbiAgICAgICAgY29uc3QgbiA9IGNvb3Jkcy5sZW5ndGggPj4gMTtcblxuICAgICAgICAvLyBwb3B1bGF0ZSBhbiBhcnJheSBvZiBwb2ludCBpbmRpY2VzOyBjYWxjdWxhdGUgaW5wdXQgZGF0YSBiYm94XG4gICAgICAgIGxldCBtaW5YID0gSW5maW5pdHk7XG4gICAgICAgIGxldCBtaW5ZID0gSW5maW5pdHk7XG4gICAgICAgIGxldCBtYXhYID0gLUluZmluaXR5O1xuICAgICAgICBsZXQgbWF4WSA9IC1JbmZpbml0eTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgY29uc3QgeCA9IGNvb3Jkc1syICogaV07XG4gICAgICAgICAgICBjb25zdCB5ID0gY29vcmRzWzIgKiBpICsgMV07XG4gICAgICAgICAgICBpZiAoeCA8IG1pblgpIG1pblggPSB4O1xuICAgICAgICAgICAgaWYgKHkgPCBtaW5ZKSBtaW5ZID0geTtcbiAgICAgICAgICAgIGlmICh4ID4gbWF4WCkgbWF4WCA9IHg7XG4gICAgICAgICAgICBpZiAoeSA+IG1heFkpIG1heFkgPSB5O1xuICAgICAgICAgICAgdGhpcy5faWRzW2ldID0gaTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjeCA9IChtaW5YICsgbWF4WCkgLyAyO1xuICAgICAgICBjb25zdCBjeSA9IChtaW5ZICsgbWF4WSkgLyAyO1xuXG4gICAgICAgIGxldCBpMCwgaTEsIGkyO1xuXG4gICAgICAgIC8vIHBpY2sgYSBzZWVkIHBvaW50IGNsb3NlIHRvIHRoZSBjZW50ZXJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIG1pbkRpc3QgPSBJbmZpbml0eTsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZCA9IGRpc3QoY3gsIGN5LCBjb29yZHNbMiAqIGldLCBjb29yZHNbMiAqIGkgKyAxXSk7XG4gICAgICAgICAgICBpZiAoZCA8IG1pbkRpc3QpIHtcbiAgICAgICAgICAgICAgICBpMCA9IGk7XG4gICAgICAgICAgICAgICAgbWluRGlzdCA9IGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaTB4ID0gY29vcmRzWzIgKiBpMF07XG4gICAgICAgIGNvbnN0IGkweSA9IGNvb3Jkc1syICogaTAgKyAxXTtcblxuICAgICAgICAvLyBmaW5kIHRoZSBwb2ludCBjbG9zZXN0IHRvIHRoZSBzZWVkXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBtaW5EaXN0ID0gSW5maW5pdHk7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpID09PSBpMCkgY29udGludWU7XG4gICAgICAgICAgICBjb25zdCBkID0gZGlzdChpMHgsIGkweSwgY29vcmRzWzIgKiBpXSwgY29vcmRzWzIgKiBpICsgMV0pO1xuICAgICAgICAgICAgaWYgKGQgPCBtaW5EaXN0ICYmIGQgPiAwKSB7XG4gICAgICAgICAgICAgICAgaTEgPSBpO1xuICAgICAgICAgICAgICAgIG1pbkRpc3QgPSBkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBpMXggPSBjb29yZHNbMiAqIGkxXTtcbiAgICAgICAgbGV0IGkxeSA9IGNvb3Jkc1syICogaTEgKyAxXTtcblxuICAgICAgICBsZXQgbWluUmFkaXVzID0gSW5maW5pdHk7XG5cbiAgICAgICAgLy8gZmluZCB0aGUgdGhpcmQgcG9pbnQgd2hpY2ggZm9ybXMgdGhlIHNtYWxsZXN0IGNpcmN1bWNpcmNsZSB3aXRoIHRoZSBmaXJzdCB0d29cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpID09PSBpMCB8fCBpID09PSBpMSkgY29udGludWU7XG4gICAgICAgICAgICBjb25zdCByID0gY2lyY3VtcmFkaXVzKGkweCwgaTB5LCBpMXgsIGkxeSwgY29vcmRzWzIgKiBpXSwgY29vcmRzWzIgKiBpICsgMV0pO1xuICAgICAgICAgICAgaWYgKHIgPCBtaW5SYWRpdXMpIHtcbiAgICAgICAgICAgICAgICBpMiA9IGk7XG4gICAgICAgICAgICAgICAgbWluUmFkaXVzID0gcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgaTJ4ID0gY29vcmRzWzIgKiBpMl07XG4gICAgICAgIGxldCBpMnkgPSBjb29yZHNbMiAqIGkyICsgMV07XG5cbiAgICAgICAgaWYgKG1pblJhZGl1cyA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgICAgIC8vIG9yZGVyIGNvbGxpbmVhciBwb2ludHMgYnkgZHggKG9yIGR5IGlmIGFsbCB4IGFyZSBpZGVudGljYWwpXG4gICAgICAgICAgICAvLyBhbmQgcmV0dXJuIHRoZSBsaXN0IGFzIGEgaHVsbFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXN0c1tpXSA9IChjb29yZHNbMiAqIGldIC0gY29vcmRzWzBdKSB8fCAoY29vcmRzWzIgKiBpICsgMV0gLSBjb29yZHNbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcXVpY2tzb3J0KHRoaXMuX2lkcywgdGhpcy5fZGlzdHMsIDAsIG4gLSAxKTtcbiAgICAgICAgICAgIGNvbnN0IGh1bGwgPSBuZXcgVWludDMyQXJyYXkobik7XG4gICAgICAgICAgICBsZXQgaiA9IDA7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgZDAgPSAtSW5maW5pdHk7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IHRoaXMuX2lkc1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCBkID0gdGhpcy5fZGlzdHNbaWRdO1xuICAgICAgICAgICAgICAgIGlmIChkID4gZDApIHtcbiAgICAgICAgICAgICAgICAgICAgaHVsbFtqKytdID0gaWQ7XG4gICAgICAgICAgICAgICAgICAgIGQwID0gZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmh1bGwgPSBodWxsLnN1YmFycmF5KDAsIGopO1xuICAgICAgICAgICAgdGhpcy50cmlhbmdsZXMgPSBuZXcgVWludDMyQXJyYXkoMCk7XG4gICAgICAgICAgICB0aGlzLmhhbGZlZGdlcyA9IG5ldyBVaW50MzJBcnJheSgwKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHN3YXAgdGhlIG9yZGVyIG9mIHRoZSBzZWVkIHBvaW50cyBmb3IgY291bnRlci1jbG9ja3dpc2Ugb3JpZW50YXRpb25cbiAgICAgICAgaWYgKG9yaWVudDJkKGkweCwgaTB5LCBpMXgsIGkxeSwgaTJ4LCBpMnkpIDwgMCkge1xuICAgICAgICAgICAgY29uc3QgaSA9IGkxO1xuICAgICAgICAgICAgY29uc3QgeCA9IGkxeDtcbiAgICAgICAgICAgIGNvbnN0IHkgPSBpMXk7XG4gICAgICAgICAgICBpMSA9IGkyO1xuICAgICAgICAgICAgaTF4ID0gaTJ4O1xuICAgICAgICAgICAgaTF5ID0gaTJ5O1xuICAgICAgICAgICAgaTIgPSBpO1xuICAgICAgICAgICAgaTJ4ID0geDtcbiAgICAgICAgICAgIGkyeSA9IHk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjZW50ZXIgPSBjaXJjdW1jZW50ZXIoaTB4LCBpMHksIGkxeCwgaTF5LCBpMngsIGkyeSk7XG4gICAgICAgIHRoaXMuX2N4ID0gY2VudGVyLng7XG4gICAgICAgIHRoaXMuX2N5ID0gY2VudGVyLnk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX2Rpc3RzW2ldID0gZGlzdChjb29yZHNbMiAqIGldLCBjb29yZHNbMiAqIGkgKyAxXSwgY2VudGVyLngsIGNlbnRlci55KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNvcnQgdGhlIHBvaW50cyBieSBkaXN0YW5jZSBmcm9tIHRoZSBzZWVkIHRyaWFuZ2xlIGNpcmN1bWNlbnRlclxuICAgICAgICBxdWlja3NvcnQodGhpcy5faWRzLCB0aGlzLl9kaXN0cywgMCwgbiAtIDEpO1xuXG4gICAgICAgIC8vIHNldCB1cCB0aGUgc2VlZCB0cmlhbmdsZSBhcyB0aGUgc3RhcnRpbmcgaHVsbFxuICAgICAgICB0aGlzLl9odWxsU3RhcnQgPSBpMDtcbiAgICAgICAgbGV0IGh1bGxTaXplID0gMztcblxuICAgICAgICBodWxsTmV4dFtpMF0gPSBodWxsUHJldltpMl0gPSBpMTtcbiAgICAgICAgaHVsbE5leHRbaTFdID0gaHVsbFByZXZbaTBdID0gaTI7XG4gICAgICAgIGh1bGxOZXh0W2kyXSA9IGh1bGxQcmV2W2kxXSA9IGkwO1xuXG4gICAgICAgIGh1bGxUcmlbaTBdID0gMDtcbiAgICAgICAgaHVsbFRyaVtpMV0gPSAxO1xuICAgICAgICBodWxsVHJpW2kyXSA9IDI7XG5cbiAgICAgICAgaHVsbEhhc2guZmlsbCgtMSk7XG4gICAgICAgIGh1bGxIYXNoW3RoaXMuX2hhc2hLZXkoaTB4LCBpMHkpXSA9IGkwO1xuICAgICAgICBodWxsSGFzaFt0aGlzLl9oYXNoS2V5KGkxeCwgaTF5KV0gPSBpMTtcbiAgICAgICAgaHVsbEhhc2hbdGhpcy5faGFzaEtleShpMngsIGkyeSldID0gaTI7XG5cbiAgICAgICAgdGhpcy50cmlhbmdsZXNMZW4gPSAwO1xuICAgICAgICB0aGlzLl9hZGRUcmlhbmdsZShpMCwgaTEsIGkyLCAtMSwgLTEsIC0xKTtcblxuICAgICAgICBmb3IgKGxldCBrID0gMCwgeHAsIHlwOyBrIDwgdGhpcy5faWRzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICBjb25zdCBpID0gdGhpcy5faWRzW2tdO1xuICAgICAgICAgICAgY29uc3QgeCA9IGNvb3Jkc1syICogaV07XG4gICAgICAgICAgICBjb25zdCB5ID0gY29vcmRzWzIgKiBpICsgMV07XG5cbiAgICAgICAgICAgIC8vIHNraXAgbmVhci1kdXBsaWNhdGUgcG9pbnRzXG4gICAgICAgICAgICBpZiAoayA+IDAgJiYgTWF0aC5hYnMoeCAtIHhwKSA8PSBFUFNJTE9OICYmIE1hdGguYWJzKHkgLSB5cCkgPD0gRVBTSUxPTikgY29udGludWU7XG4gICAgICAgICAgICB4cCA9IHg7XG4gICAgICAgICAgICB5cCA9IHk7XG5cbiAgICAgICAgICAgIC8vIHNraXAgc2VlZCB0cmlhbmdsZSBwb2ludHNcbiAgICAgICAgICAgIGlmIChpID09PSBpMCB8fCBpID09PSBpMSB8fCBpID09PSBpMikgY29udGludWU7XG5cbiAgICAgICAgICAgIC8vIGZpbmQgYSB2aXNpYmxlIGVkZ2Ugb24gdGhlIGNvbnZleCBodWxsIHVzaW5nIGVkZ2UgaGFzaFxuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwLCBrZXkgPSB0aGlzLl9oYXNoS2V5KHgsIHkpOyBqIDwgdGhpcy5faGFzaFNpemU7IGorKykge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gaHVsbEhhc2hbKGtleSArIGopICUgdGhpcy5faGFzaFNpemVdO1xuICAgICAgICAgICAgICAgIGlmIChzdGFydCAhPT0gLTEgJiYgc3RhcnQgIT09IGh1bGxOZXh0W3N0YXJ0XSkgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN0YXJ0ID0gaHVsbFByZXZbc3RhcnRdO1xuICAgICAgICAgICAgbGV0IGUgPSBzdGFydCwgcTtcbiAgICAgICAgICAgIHdoaWxlIChxID0gaHVsbE5leHRbZV0sIG9yaWVudDJkKHgsIHksIGNvb3Jkc1syICogZV0sIGNvb3Jkc1syICogZSArIDFdLCBjb29yZHNbMiAqIHFdLCBjb29yZHNbMiAqIHEgKyAxXSkgPj0gMCkge1xuICAgICAgICAgICAgICAgIGUgPSBxO1xuICAgICAgICAgICAgICAgIGlmIChlID09PSBzdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBlID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlID09PSAtMSkgY29udGludWU7IC8vIGxpa2VseSBhIG5lYXItZHVwbGljYXRlIHBvaW50OyBza2lwIGl0XG5cbiAgICAgICAgICAgIC8vIGFkZCB0aGUgZmlyc3QgdHJpYW5nbGUgZnJvbSB0aGUgcG9pbnRcbiAgICAgICAgICAgIGxldCB0ID0gdGhpcy5fYWRkVHJpYW5nbGUoZSwgaSwgaHVsbE5leHRbZV0sIC0xLCAtMSwgaHVsbFRyaVtlXSk7XG5cbiAgICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IGZsaXAgdHJpYW5nbGVzIGZyb20gdGhlIHBvaW50IHVudGlsIHRoZXkgc2F0aXNmeSB0aGUgRGVsYXVuYXkgY29uZGl0aW9uXG4gICAgICAgICAgICBodWxsVHJpW2ldID0gdGhpcy5fbGVnYWxpemUodCArIDIpO1xuICAgICAgICAgICAgaHVsbFRyaVtlXSA9IHQ7IC8vIGtlZXAgdHJhY2sgb2YgYm91bmRhcnkgdHJpYW5nbGVzIG9uIHRoZSBodWxsXG4gICAgICAgICAgICBodWxsU2l6ZSsrO1xuXG4gICAgICAgICAgICAvLyB3YWxrIGZvcndhcmQgdGhyb3VnaCB0aGUgaHVsbCwgYWRkaW5nIG1vcmUgdHJpYW5nbGVzIGFuZCBmbGlwcGluZyByZWN1cnNpdmVseVxuICAgICAgICAgICAgbGV0IG4gPSBodWxsTmV4dFtlXTtcbiAgICAgICAgICAgIHdoaWxlIChxID0gaHVsbE5leHRbbl0sIG9yaWVudDJkKHgsIHksIGNvb3Jkc1syICogbl0sIGNvb3Jkc1syICogbiArIDFdLCBjb29yZHNbMiAqIHFdLCBjb29yZHNbMiAqIHEgKyAxXSkgPCAwKSB7XG4gICAgICAgICAgICAgICAgdCA9IHRoaXMuX2FkZFRyaWFuZ2xlKG4sIGksIHEsIGh1bGxUcmlbaV0sIC0xLCBodWxsVHJpW25dKTtcbiAgICAgICAgICAgICAgICBodWxsVHJpW2ldID0gdGhpcy5fbGVnYWxpemUodCArIDIpO1xuICAgICAgICAgICAgICAgIGh1bGxOZXh0W25dID0gbjsgLy8gbWFyayBhcyByZW1vdmVkXG4gICAgICAgICAgICAgICAgaHVsbFNpemUtLTtcbiAgICAgICAgICAgICAgICBuID0gcTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gd2FsayBiYWNrd2FyZCBmcm9tIHRoZSBvdGhlciBzaWRlLCBhZGRpbmcgbW9yZSB0cmlhbmdsZXMgYW5kIGZsaXBwaW5nXG4gICAgICAgICAgICBpZiAoZSA9PT0gc3RhcnQpIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAocSA9IGh1bGxQcmV2W2VdLCBvcmllbnQyZCh4LCB5LCBjb29yZHNbMiAqIHFdLCBjb29yZHNbMiAqIHEgKyAxXSwgY29vcmRzWzIgKiBlXSwgY29vcmRzWzIgKiBlICsgMV0pIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICB0ID0gdGhpcy5fYWRkVHJpYW5nbGUocSwgaSwgZSwgLTEsIGh1bGxUcmlbZV0sIGh1bGxUcmlbcV0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sZWdhbGl6ZSh0ICsgMik7XG4gICAgICAgICAgICAgICAgICAgIGh1bGxUcmlbcV0gPSB0O1xuICAgICAgICAgICAgICAgICAgICBodWxsTmV4dFtlXSA9IGU7IC8vIG1hcmsgYXMgcmVtb3ZlZFxuICAgICAgICAgICAgICAgICAgICBodWxsU2l6ZS0tO1xuICAgICAgICAgICAgICAgICAgICBlID0gcTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgaHVsbCBpbmRpY2VzXG4gICAgICAgICAgICB0aGlzLl9odWxsU3RhcnQgPSBodWxsUHJldltpXSA9IGU7XG4gICAgICAgICAgICBodWxsTmV4dFtlXSA9IGh1bGxQcmV2W25dID0gaTtcbiAgICAgICAgICAgIGh1bGxOZXh0W2ldID0gbjtcblxuICAgICAgICAgICAgLy8gc2F2ZSB0aGUgdHdvIG5ldyBlZGdlcyBpbiB0aGUgaGFzaCB0YWJsZVxuICAgICAgICAgICAgaHVsbEhhc2hbdGhpcy5faGFzaEtleSh4LCB5KV0gPSBpO1xuICAgICAgICAgICAgaHVsbEhhc2hbdGhpcy5faGFzaEtleShjb29yZHNbMiAqIGVdLCBjb29yZHNbMiAqIGUgKyAxXSldID0gZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaHVsbCA9IG5ldyBVaW50MzJBcnJheShodWxsU2l6ZSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBlID0gdGhpcy5faHVsbFN0YXJ0OyBpIDwgaHVsbFNpemU7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5odWxsW2ldID0gZTtcbiAgICAgICAgICAgIGUgPSBodWxsTmV4dFtlXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRyaW0gdHlwZWQgdHJpYW5nbGUgbWVzaCBhcnJheXNcbiAgICAgICAgdGhpcy50cmlhbmdsZXMgPSB0aGlzLl90cmlhbmdsZXMuc3ViYXJyYXkoMCwgdGhpcy50cmlhbmdsZXNMZW4pO1xuICAgICAgICB0aGlzLmhhbGZlZGdlcyA9IHRoaXMuX2hhbGZlZGdlcy5zdWJhcnJheSgwLCB0aGlzLnRyaWFuZ2xlc0xlbik7XG4gICAgfVxuXG4gICAgX2hhc2hLZXkoeCwgeSkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihwc2V1ZG9BbmdsZSh4IC0gdGhpcy5fY3gsIHkgLSB0aGlzLl9jeSkgKiB0aGlzLl9oYXNoU2l6ZSkgJSB0aGlzLl9oYXNoU2l6ZTtcbiAgICB9XG5cbiAgICBfbGVnYWxpemUoYSkge1xuICAgICAgICBjb25zdCB7X3RyaWFuZ2xlczogdHJpYW5nbGVzLCBfaGFsZmVkZ2VzOiBoYWxmZWRnZXMsIGNvb3Jkc30gPSB0aGlzO1xuXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgbGV0IGFyID0gMDtcblxuICAgICAgICAvLyByZWN1cnNpb24gZWxpbWluYXRlZCB3aXRoIGEgZml4ZWQtc2l6ZSBzdGFja1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgY29uc3QgYiA9IGhhbGZlZGdlc1thXTtcblxuICAgICAgICAgICAgLyogaWYgdGhlIHBhaXIgb2YgdHJpYW5nbGVzIGRvZXNuJ3Qgc2F0aXNmeSB0aGUgRGVsYXVuYXkgY29uZGl0aW9uXG4gICAgICAgICAgICAgKiAocDEgaXMgaW5zaWRlIHRoZSBjaXJjdW1jaXJjbGUgb2YgW3AwLCBwbCwgcHJdKSwgZmxpcCB0aGVtLFxuICAgICAgICAgICAgICogdGhlbiBkbyB0aGUgc2FtZSBjaGVjay9mbGlwIHJlY3Vyc2l2ZWx5IGZvciB0aGUgbmV3IHBhaXIgb2YgdHJpYW5nbGVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogICAgICAgICAgIHBsICAgICAgICAgICAgICAgICAgICBwbFxuICAgICAgICAgICAgICogICAgICAgICAgL3x8XFwgICAgICAgICAgICAgICAgICAvICBcXFxuICAgICAgICAgICAgICogICAgICAgYWwvIHx8IFxcYmwgICAgICAgICAgICBhbC8gICAgXFxhXG4gICAgICAgICAgICAgKiAgICAgICAgLyAgfHwgIFxcICAgICAgICAgICAgICAvICAgICAgXFxcbiAgICAgICAgICAgICAqICAgICAgIC8gIGF8fGIgIFxcICAgIGZsaXAgICAgL19fX2FyX19fXFxcbiAgICAgICAgICAgICAqICAgICBwMFxcICAgfHwgICAvcDEgICA9PiAgIHAwXFwtLS1ibC0tLS9wMVxuICAgICAgICAgICAgICogICAgICAgIFxcICB8fCAgLyAgICAgICAgICAgICAgXFwgICAgICAvXG4gICAgICAgICAgICAgKiAgICAgICBhclxcIHx8IC9iciAgICAgICAgICAgICBiXFwgICAgL2JyXG4gICAgICAgICAgICAgKiAgICAgICAgICBcXHx8LyAgICAgICAgICAgICAgICAgIFxcICAvXG4gICAgICAgICAgICAgKiAgICAgICAgICAgcHIgICAgICAgICAgICAgICAgICAgIHByXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IGEwID0gYSAtIGEgJSAzO1xuICAgICAgICAgICAgYXIgPSBhMCArIChhICsgMikgJSAzO1xuXG4gICAgICAgICAgICBpZiAoYiA9PT0gLTEpIHsgLy8gY29udmV4IGh1bGwgZWRnZVxuICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSBicmVhaztcbiAgICAgICAgICAgICAgICBhID0gRURHRV9TVEFDS1stLWldO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBiMCA9IGIgLSBiICUgMztcbiAgICAgICAgICAgIGNvbnN0IGFsID0gYTAgKyAoYSArIDEpICUgMztcbiAgICAgICAgICAgIGNvbnN0IGJsID0gYjAgKyAoYiArIDIpICUgMztcblxuICAgICAgICAgICAgY29uc3QgcDAgPSB0cmlhbmdsZXNbYXJdO1xuICAgICAgICAgICAgY29uc3QgcHIgPSB0cmlhbmdsZXNbYV07XG4gICAgICAgICAgICBjb25zdCBwbCA9IHRyaWFuZ2xlc1thbF07XG4gICAgICAgICAgICBjb25zdCBwMSA9IHRyaWFuZ2xlc1tibF07XG5cbiAgICAgICAgICAgIGNvbnN0IGlsbGVnYWwgPSBpbkNpcmNsZShcbiAgICAgICAgICAgICAgICBjb29yZHNbMiAqIHAwXSwgY29vcmRzWzIgKiBwMCArIDFdLFxuICAgICAgICAgICAgICAgIGNvb3Jkc1syICogcHJdLCBjb29yZHNbMiAqIHByICsgMV0sXG4gICAgICAgICAgICAgICAgY29vcmRzWzIgKiBwbF0sIGNvb3Jkc1syICogcGwgKyAxXSxcbiAgICAgICAgICAgICAgICBjb29yZHNbMiAqIHAxXSwgY29vcmRzWzIgKiBwMSArIDFdKTtcblxuICAgICAgICAgICAgaWYgKGlsbGVnYWwpIHtcbiAgICAgICAgICAgICAgICB0cmlhbmdsZXNbYV0gPSBwMTtcbiAgICAgICAgICAgICAgICB0cmlhbmdsZXNbYl0gPSBwMDtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGhibCA9IGhhbGZlZGdlc1tibF07XG5cbiAgICAgICAgICAgICAgICAvLyBlZGdlIHN3YXBwZWQgb24gdGhlIG90aGVyIHNpZGUgb2YgdGhlIGh1bGwgKHJhcmUpOyBmaXggdGhlIGhhbGZlZGdlIHJlZmVyZW5jZVxuICAgICAgICAgICAgICAgIGlmIChoYmwgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBlID0gdGhpcy5faHVsbFN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faHVsbFRyaVtlXSA9PT0gYmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9odWxsVHJpW2VdID0gYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSB0aGlzLl9odWxsUHJldltlXTtcbiAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoZSAhPT0gdGhpcy5faHVsbFN0YXJ0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fbGluayhhLCBoYmwpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xpbmsoYiwgaGFsZmVkZ2VzW2FyXSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGluayhhciwgYmwpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgYnIgPSBiMCArIChiICsgMSkgJSAzO1xuXG4gICAgICAgICAgICAgICAgLy8gZG9uJ3Qgd29ycnkgYWJvdXQgaGl0dGluZyB0aGUgY2FwOiBpdCBjYW4gb25seSBoYXBwZW4gb24gZXh0cmVtZWx5IGRlZ2VuZXJhdGUgaW5wdXRcbiAgICAgICAgICAgICAgICBpZiAoaSA8IEVER0VfU1RBQ0subGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIEVER0VfU1RBQ0tbaSsrXSA9IGJyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIGJyZWFrO1xuICAgICAgICAgICAgICAgIGEgPSBFREdFX1NUQUNLWy0taV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXI7XG4gICAgfVxuXG4gICAgX2xpbmsoYSwgYikge1xuICAgICAgICB0aGlzLl9oYWxmZWRnZXNbYV0gPSBiO1xuICAgICAgICBpZiAoYiAhPT0gLTEpIHRoaXMuX2hhbGZlZGdlc1tiXSA9IGE7XG4gICAgfVxuXG4gICAgLy8gYWRkIGEgbmV3IHRyaWFuZ2xlIGdpdmVuIHZlcnRleCBpbmRpY2VzIGFuZCBhZGphY2VudCBoYWxmLWVkZ2UgaWRzXG4gICAgX2FkZFRyaWFuZ2xlKGkwLCBpMSwgaTIsIGEsIGIsIGMpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMudHJpYW5nbGVzTGVuO1xuXG4gICAgICAgIHRoaXMuX3RyaWFuZ2xlc1t0XSA9IGkwO1xuICAgICAgICB0aGlzLl90cmlhbmdsZXNbdCArIDFdID0gaTE7XG4gICAgICAgIHRoaXMuX3RyaWFuZ2xlc1t0ICsgMl0gPSBpMjtcblxuICAgICAgICB0aGlzLl9saW5rKHQsIGEpO1xuICAgICAgICB0aGlzLl9saW5rKHQgKyAxLCBiKTtcbiAgICAgICAgdGhpcy5fbGluayh0ICsgMiwgYyk7XG5cbiAgICAgICAgdGhpcy50cmlhbmdsZXNMZW4gKz0gMztcblxuICAgICAgICByZXR1cm4gdDtcbiAgICB9XG59XG5cbi8vIG1vbm90b25pY2FsbHkgaW5jcmVhc2VzIHdpdGggcmVhbCBhbmdsZSwgYnV0IGRvZXNuJ3QgbmVlZCBleHBlbnNpdmUgdHJpZ29ub21ldHJ5XG5mdW5jdGlvbiBwc2V1ZG9BbmdsZShkeCwgZHkpIHtcbiAgICBjb25zdCBwID0gZHggLyAoTWF0aC5hYnMoZHgpICsgTWF0aC5hYnMoZHkpKTtcbiAgICByZXR1cm4gKGR5ID4gMCA/IDMgLSBwIDogMSArIHApIC8gNDsgLy8gWzAuLjFdXG59XG5cbmZ1bmN0aW9uIGRpc3QoYXgsIGF5LCBieCwgYnkpIHtcbiAgICBjb25zdCBkeCA9IGF4IC0gYng7XG4gICAgY29uc3QgZHkgPSBheSAtIGJ5O1xuICAgIHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeTtcbn1cblxuZnVuY3Rpb24gaW5DaXJjbGUoYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgcHgsIHB5KSB7XG4gICAgY29uc3QgZHggPSBheCAtIHB4O1xuICAgIGNvbnN0IGR5ID0gYXkgLSBweTtcbiAgICBjb25zdCBleCA9IGJ4IC0gcHg7XG4gICAgY29uc3QgZXkgPSBieSAtIHB5O1xuICAgIGNvbnN0IGZ4ID0gY3ggLSBweDtcbiAgICBjb25zdCBmeSA9IGN5IC0gcHk7XG5cbiAgICBjb25zdCBhcCA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgIGNvbnN0IGJwID0gZXggKiBleCArIGV5ICogZXk7XG4gICAgY29uc3QgY3AgPSBmeCAqIGZ4ICsgZnkgKiBmeTtcblxuICAgIHJldHVybiBkeCAqIChleSAqIGNwIC0gYnAgKiBmeSkgLVxuICAgICAgICAgICBkeSAqIChleCAqIGNwIC0gYnAgKiBmeCkgK1xuICAgICAgICAgICBhcCAqIChleCAqIGZ5IC0gZXkgKiBmeCkgPCAwO1xufVxuXG5mdW5jdGlvbiBjaXJjdW1yYWRpdXMoYXgsIGF5LCBieCwgYnksIGN4LCBjeSkge1xuICAgIGNvbnN0IGR4ID0gYnggLSBheDtcbiAgICBjb25zdCBkeSA9IGJ5IC0gYXk7XG4gICAgY29uc3QgZXggPSBjeCAtIGF4O1xuICAgIGNvbnN0IGV5ID0gY3kgLSBheTtcblxuICAgIGNvbnN0IGJsID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgY29uc3QgY2wgPSBleCAqIGV4ICsgZXkgKiBleTtcbiAgICBjb25zdCBkID0gMC41IC8gKGR4ICogZXkgLSBkeSAqIGV4KTtcblxuICAgIGNvbnN0IHggPSAoZXkgKiBibCAtIGR5ICogY2wpICogZDtcbiAgICBjb25zdCB5ID0gKGR4ICogY2wgLSBleCAqIGJsKSAqIGQ7XG5cbiAgICByZXR1cm4geCAqIHggKyB5ICogeTtcbn1cblxuZnVuY3Rpb24gY2lyY3VtY2VudGVyKGF4LCBheSwgYngsIGJ5LCBjeCwgY3kpIHtcbiAgICBjb25zdCBkeCA9IGJ4IC0gYXg7XG4gICAgY29uc3QgZHkgPSBieSAtIGF5O1xuICAgIGNvbnN0IGV4ID0gY3ggLSBheDtcbiAgICBjb25zdCBleSA9IGN5IC0gYXk7XG5cbiAgICBjb25zdCBibCA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgIGNvbnN0IGNsID0gZXggKiBleCArIGV5ICogZXk7XG4gICAgY29uc3QgZCA9IDAuNSAvIChkeCAqIGV5IC0gZHkgKiBleCk7XG5cbiAgICBjb25zdCB4ID0gYXggKyAoZXkgKiBibCAtIGR5ICogY2wpICogZDtcbiAgICBjb25zdCB5ID0gYXkgKyAoZHggKiBjbCAtIGV4ICogYmwpICogZDtcblxuICAgIHJldHVybiB7eCwgeX07XG59XG5cbmZ1bmN0aW9uIHF1aWNrc29ydChpZHMsIGRpc3RzLCBsZWZ0LCByaWdodCkge1xuICAgIGlmIChyaWdodCAtIGxlZnQgPD0gMjApIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IGxlZnQgKyAxOyBpIDw9IHJpZ2h0OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBpZHNbaV07XG4gICAgICAgICAgICBjb25zdCB0ZW1wRGlzdCA9IGRpc3RzW3RlbXBdO1xuICAgICAgICAgICAgbGV0IGogPSBpIC0gMTtcbiAgICAgICAgICAgIHdoaWxlIChqID49IGxlZnQgJiYgZGlzdHNbaWRzW2pdXSA+IHRlbXBEaXN0KSBpZHNbaiArIDFdID0gaWRzW2otLV07XG4gICAgICAgICAgICBpZHNbaiArIDFdID0gdGVtcDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG1lZGlhbiA9IChsZWZ0ICsgcmlnaHQpID4+IDE7XG4gICAgICAgIGxldCBpID0gbGVmdCArIDE7XG4gICAgICAgIGxldCBqID0gcmlnaHQ7XG4gICAgICAgIHN3YXAoaWRzLCBtZWRpYW4sIGkpO1xuICAgICAgICBpZiAoZGlzdHNbaWRzW2xlZnRdXSA+IGRpc3RzW2lkc1tyaWdodF1dKSBzd2FwKGlkcywgbGVmdCwgcmlnaHQpO1xuICAgICAgICBpZiAoZGlzdHNbaWRzW2ldXSA+IGRpc3RzW2lkc1tyaWdodF1dKSBzd2FwKGlkcywgaSwgcmlnaHQpO1xuICAgICAgICBpZiAoZGlzdHNbaWRzW2xlZnRdXSA+IGRpc3RzW2lkc1tpXV0pIHN3YXAoaWRzLCBsZWZ0LCBpKTtcblxuICAgICAgICBjb25zdCB0ZW1wID0gaWRzW2ldO1xuICAgICAgICBjb25zdCB0ZW1wRGlzdCA9IGRpc3RzW3RlbXBdO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgZG8gaSsrOyB3aGlsZSAoZGlzdHNbaWRzW2ldXSA8IHRlbXBEaXN0KTtcbiAgICAgICAgICAgIGRvIGotLTsgd2hpbGUgKGRpc3RzW2lkc1tqXV0gPiB0ZW1wRGlzdCk7XG4gICAgICAgICAgICBpZiAoaiA8IGkpIGJyZWFrO1xuICAgICAgICAgICAgc3dhcChpZHMsIGksIGopO1xuICAgICAgICB9XG4gICAgICAgIGlkc1tsZWZ0ICsgMV0gPSBpZHNbal07XG4gICAgICAgIGlkc1tqXSA9IHRlbXA7XG5cbiAgICAgICAgaWYgKHJpZ2h0IC0gaSArIDEgPj0gaiAtIGxlZnQpIHtcbiAgICAgICAgICAgIHF1aWNrc29ydChpZHMsIGRpc3RzLCBpLCByaWdodCk7XG4gICAgICAgICAgICBxdWlja3NvcnQoaWRzLCBkaXN0cywgbGVmdCwgaiAtIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcXVpY2tzb3J0KGlkcywgZGlzdHMsIGxlZnQsIGogLSAxKTtcbiAgICAgICAgICAgIHF1aWNrc29ydChpZHMsIGRpc3RzLCBpLCByaWdodCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHN3YXAoYXJyLCBpLCBqKSB7XG4gICAgY29uc3QgdG1wID0gYXJyW2ldO1xuICAgIGFycltpXSA9IGFycltqXTtcbiAgICBhcnJbal0gPSB0bXA7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRHZXRYKHApIHtcbiAgICByZXR1cm4gcFswXTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRHZXRZKHApIHtcbiAgICByZXR1cm4gcFsxXTtcbn1cbiIsImNvbnN0IGVwc2lsb24gPSAxZS02O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXRoIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl95MCA9IC8vIHN0YXJ0IG9mIGN1cnJlbnQgc3VicGF0aFxuICAgIHRoaXMuX3gxID0gdGhpcy5feTEgPSBudWxsOyAvLyBlbmQgb2YgY3VycmVudCBzdWJwYXRoXG4gICAgdGhpcy5fID0gXCJcIjtcbiAgfVxuICBtb3ZlVG8oeCwgeSkge1xuICAgIHRoaXMuXyArPSBgTSR7dGhpcy5feDAgPSB0aGlzLl94MSA9ICt4fSwke3RoaXMuX3kwID0gdGhpcy5feTEgPSAreX1gO1xuICB9XG4gIGNsb3NlUGF0aCgpIHtcbiAgICBpZiAodGhpcy5feDEgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX3gxID0gdGhpcy5feDAsIHRoaXMuX3kxID0gdGhpcy5feTA7XG4gICAgICB0aGlzLl8gKz0gXCJaXCI7XG4gICAgfVxuICB9XG4gIGxpbmVUbyh4LCB5KSB7XG4gICAgdGhpcy5fICs9IGBMJHt0aGlzLl94MSA9ICt4fSwke3RoaXMuX3kxID0gK3l9YDtcbiAgfVxuICBhcmMoeCwgeSwgcikge1xuICAgIHggPSAreCwgeSA9ICt5LCByID0gK3I7XG4gICAgY29uc3QgeDAgPSB4ICsgcjtcbiAgICBjb25zdCB5MCA9IHk7XG4gICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXNcIik7XG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB0aGlzLl8gKz0gYE0ke3gwfSwke3kwfWA7XG4gICAgZWxzZSBpZiAoTWF0aC5hYnModGhpcy5feDEgLSB4MCkgPiBlcHNpbG9uIHx8IE1hdGguYWJzKHRoaXMuX3kxIC0geTApID4gZXBzaWxvbikgdGhpcy5fICs9IFwiTFwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIGlmICghcikgcmV0dXJuO1xuICAgIHRoaXMuXyArPSBgQSR7cn0sJHtyfSwwLDEsMSwke3ggLSByfSwke3l9QSR7cn0sJHtyfSwwLDEsMSwke3RoaXMuX3gxID0geDB9LCR7dGhpcy5feTEgPSB5MH1gO1xuICB9XG4gIHJlY3QoeCwgeSwgdywgaCkge1xuICAgIHRoaXMuXyArPSBgTSR7dGhpcy5feDAgPSB0aGlzLl94MSA9ICt4fSwke3RoaXMuX3kwID0gdGhpcy5feTEgPSAreX1oJHsrd312JHsraH1oJHstd31aYDtcbiAgfVxuICB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fIHx8IG51bGw7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvbHlnb24ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl8gPSBbXTtcbiAgfVxuICBtb3ZlVG8oeCwgeSkge1xuICAgIHRoaXMuXy5wdXNoKFt4LCB5XSk7XG4gIH1cbiAgY2xvc2VQYXRoKCkge1xuICAgIHRoaXMuXy5wdXNoKHRoaXMuX1swXS5zbGljZSgpKTtcbiAgfVxuICBsaW5lVG8oeCwgeSkge1xuICAgIHRoaXMuXy5wdXNoKFt4LCB5XSk7XG4gIH1cbiAgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuXy5sZW5ndGggPyB0aGlzLl8gOiBudWxsO1xuICB9XG59XG4iLCJpbXBvcnQgUGF0aCBmcm9tIFwiLi9wYXRoLmpzXCI7XG5pbXBvcnQgUG9seWdvbiBmcm9tIFwiLi9wb2x5Z29uLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZvcm9ub2kge1xuICBjb25zdHJ1Y3RvcihkZWxhdW5heSwgW3htaW4sIHltaW4sIHhtYXgsIHltYXhdID0gWzAsIDAsIDk2MCwgNTAwXSkge1xuICAgIGlmICghKCh4bWF4ID0gK3htYXgpID49ICh4bWluID0gK3htaW4pKSB8fCAhKCh5bWF4ID0gK3ltYXgpID49ICh5bWluID0gK3ltaW4pKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBib3VuZHNcIik7XG4gICAgdGhpcy5kZWxhdW5heSA9IGRlbGF1bmF5O1xuICAgIHRoaXMuX2NpcmN1bWNlbnRlcnMgPSBuZXcgRmxvYXQ2NEFycmF5KGRlbGF1bmF5LnBvaW50cy5sZW5ndGggKiAyKTtcbiAgICB0aGlzLnZlY3RvcnMgPSBuZXcgRmxvYXQ2NEFycmF5KGRlbGF1bmF5LnBvaW50cy5sZW5ndGggKiAyKTtcbiAgICB0aGlzLnhtYXggPSB4bWF4LCB0aGlzLnhtaW4gPSB4bWluO1xuICAgIHRoaXMueW1heCA9IHltYXgsIHRoaXMueW1pbiA9IHltaW47XG4gICAgdGhpcy5faW5pdCgpO1xuICB9XG4gIHVwZGF0ZSgpIHtcbiAgICB0aGlzLmRlbGF1bmF5LnVwZGF0ZSgpO1xuICAgIHRoaXMuX2luaXQoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBfaW5pdCgpIHtcbiAgICBjb25zdCB7ZGVsYXVuYXk6IHtwb2ludHMsIGh1bGwsIHRyaWFuZ2xlc30sIHZlY3RvcnN9ID0gdGhpcztcbiAgICBsZXQgYngsIGJ5OyAvLyBsYXppbHkgY29tcHV0ZWQgYmFyeWNlbnRlciBvZiB0aGUgaHVsbFxuXG4gICAgLy8gQ29tcHV0ZSBjaXJjdW1jZW50ZXJzLlxuICAgIGNvbnN0IGNpcmN1bWNlbnRlcnMgPSB0aGlzLmNpcmN1bWNlbnRlcnMgPSB0aGlzLl9jaXJjdW1jZW50ZXJzLnN1YmFycmF5KDAsIHRyaWFuZ2xlcy5sZW5ndGggLyAzICogMik7XG4gICAgZm9yIChsZXQgaSA9IDAsIGogPSAwLCBuID0gdHJpYW5nbGVzLmxlbmd0aCwgeCwgeTsgaSA8IG47IGkgKz0gMywgaiArPSAyKSB7XG4gICAgICBjb25zdCB0MSA9IHRyaWFuZ2xlc1tpXSAqIDI7XG4gICAgICBjb25zdCB0MiA9IHRyaWFuZ2xlc1tpICsgMV0gKiAyO1xuICAgICAgY29uc3QgdDMgPSB0cmlhbmdsZXNbaSArIDJdICogMjtcbiAgICAgIGNvbnN0IHgxID0gcG9pbnRzW3QxXTtcbiAgICAgIGNvbnN0IHkxID0gcG9pbnRzW3QxICsgMV07XG4gICAgICBjb25zdCB4MiA9IHBvaW50c1t0Ml07XG4gICAgICBjb25zdCB5MiA9IHBvaW50c1t0MiArIDFdO1xuICAgICAgY29uc3QgeDMgPSBwb2ludHNbdDNdO1xuICAgICAgY29uc3QgeTMgPSBwb2ludHNbdDMgKyAxXTtcblxuICAgICAgY29uc3QgZHggPSB4MiAtIHgxO1xuICAgICAgY29uc3QgZHkgPSB5MiAtIHkxO1xuICAgICAgY29uc3QgZXggPSB4MyAtIHgxO1xuICAgICAgY29uc3QgZXkgPSB5MyAtIHkxO1xuICAgICAgY29uc3QgYWIgPSAoZHggKiBleSAtIGR5ICogZXgpICogMjtcblxuICAgICAgaWYgKE1hdGguYWJzKGFiKSA8IDFlLTkpIHtcbiAgICAgICAgLy8gRm9yIGEgZGVnZW5lcmF0ZSB0cmlhbmdsZSwgdGhlIGNpcmN1bWNlbnRlciBpcyBhdCB0aGUgaW5maW5pdHksIGluIGFcbiAgICAgICAgLy8gZGlyZWN0aW9uIG9ydGhvZ29uYWwgdG8gdGhlIGhhbGZlZGdlIGFuZCBhd2F5IGZyb20gdGhlIOKAnGNlbnRlcuKAnSBvZlxuICAgICAgICAvLyB0aGUgZGlhZ3JhbSA8YngsIGJ5PiwgZGVmaW5lZCBhcyB0aGUgaHVsbOKAmXMgYmFyeWNlbnRlci5cbiAgICAgICAgaWYgKGJ4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBieCA9IGJ5ID0gMDtcbiAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgaHVsbCkgYnggKz0gcG9pbnRzW2kgKiAyXSwgYnkgKz0gcG9pbnRzW2kgKiAyICsgMV07XG4gICAgICAgICAgYnggLz0gaHVsbC5sZW5ndGgsIGJ5IC89IGh1bGwubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGEgPSAxZTkgKiBNYXRoLnNpZ24oKGJ4IC0geDEpICogZXkgLSAoYnkgLSB5MSkgKiBleCk7XG4gICAgICAgIHggPSAoeDEgKyB4MykgLyAyIC0gYSAqIGV5O1xuICAgICAgICB5ID0gKHkxICsgeTMpIC8gMiArIGEgKiBleDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGQgPSAxIC8gYWI7XG4gICAgICAgIGNvbnN0IGJsID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIGNvbnN0IGNsID0gZXggKiBleCArIGV5ICogZXk7XG4gICAgICAgIHggPSB4MSArIChleSAqIGJsIC0gZHkgKiBjbCkgKiBkO1xuICAgICAgICB5ID0geTEgKyAoZHggKiBjbCAtIGV4ICogYmwpICogZDtcbiAgICAgIH1cbiAgICAgIGNpcmN1bWNlbnRlcnNbal0gPSB4O1xuICAgICAgY2lyY3VtY2VudGVyc1tqICsgMV0gPSB5O1xuICAgIH1cblxuICAgIC8vIENvbXB1dGUgZXh0ZXJpb3IgY2VsbCByYXlzLlxuICAgIGxldCBoID0gaHVsbFtodWxsLmxlbmd0aCAtIDFdO1xuICAgIGxldCBwMCwgcDEgPSBoICogNDtcbiAgICBsZXQgeDAsIHgxID0gcG9pbnRzWzIgKiBoXTtcbiAgICBsZXQgeTAsIHkxID0gcG9pbnRzWzIgKiBoICsgMV07XG4gICAgdmVjdG9ycy5maWxsKDApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaHVsbC5sZW5ndGg7ICsraSkge1xuICAgICAgaCA9IGh1bGxbaV07XG4gICAgICBwMCA9IHAxLCB4MCA9IHgxLCB5MCA9IHkxO1xuICAgICAgcDEgPSBoICogNCwgeDEgPSBwb2ludHNbMiAqIGhdLCB5MSA9IHBvaW50c1syICogaCArIDFdO1xuICAgICAgdmVjdG9yc1twMCArIDJdID0gdmVjdG9yc1twMV0gPSB5MCAtIHkxO1xuICAgICAgdmVjdG9yc1twMCArIDNdID0gdmVjdG9yc1twMSArIDFdID0geDEgLSB4MDtcbiAgICB9XG4gIH1cbiAgcmVuZGVyKGNvbnRleHQpIHtcbiAgICBjb25zdCBidWZmZXIgPSBjb250ZXh0ID09IG51bGwgPyBjb250ZXh0ID0gbmV3IFBhdGggOiB1bmRlZmluZWQ7XG4gICAgY29uc3Qge2RlbGF1bmF5OiB7aGFsZmVkZ2VzLCBpbmVkZ2VzLCBodWxsfSwgY2lyY3VtY2VudGVycywgdmVjdG9yc30gPSB0aGlzO1xuICAgIGlmIChodWxsLmxlbmd0aCA8PSAxKSByZXR1cm4gbnVsbDtcbiAgICBmb3IgKGxldCBpID0gMCwgbiA9IGhhbGZlZGdlcy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIGNvbnN0IGogPSBoYWxmZWRnZXNbaV07XG4gICAgICBpZiAoaiA8IGkpIGNvbnRpbnVlO1xuICAgICAgY29uc3QgdGkgPSBNYXRoLmZsb29yKGkgLyAzKSAqIDI7XG4gICAgICBjb25zdCB0aiA9IE1hdGguZmxvb3IoaiAvIDMpICogMjtcbiAgICAgIGNvbnN0IHhpID0gY2lyY3VtY2VudGVyc1t0aV07XG4gICAgICBjb25zdCB5aSA9IGNpcmN1bWNlbnRlcnNbdGkgKyAxXTtcbiAgICAgIGNvbnN0IHhqID0gY2lyY3VtY2VudGVyc1t0al07XG4gICAgICBjb25zdCB5aiA9IGNpcmN1bWNlbnRlcnNbdGogKyAxXTtcbiAgICAgIHRoaXMuX3JlbmRlclNlZ21lbnQoeGksIHlpLCB4aiwgeWosIGNvbnRleHQpO1xuICAgIH1cbiAgICBsZXQgaDAsIGgxID0gaHVsbFtodWxsLmxlbmd0aCAtIDFdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaHVsbC5sZW5ndGg7ICsraSkge1xuICAgICAgaDAgPSBoMSwgaDEgPSBodWxsW2ldO1xuICAgICAgY29uc3QgdCA9IE1hdGguZmxvb3IoaW5lZGdlc1toMV0gLyAzKSAqIDI7XG4gICAgICBjb25zdCB4ID0gY2lyY3VtY2VudGVyc1t0XTtcbiAgICAgIGNvbnN0IHkgPSBjaXJjdW1jZW50ZXJzW3QgKyAxXTtcbiAgICAgIGNvbnN0IHYgPSBoMCAqIDQ7XG4gICAgICBjb25zdCBwID0gdGhpcy5fcHJvamVjdCh4LCB5LCB2ZWN0b3JzW3YgKyAyXSwgdmVjdG9yc1t2ICsgM10pO1xuICAgICAgaWYgKHApIHRoaXMuX3JlbmRlclNlZ21lbnQoeCwgeSwgcFswXSwgcFsxXSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBidWZmZXIgJiYgYnVmZmVyLnZhbHVlKCk7XG4gIH1cbiAgcmVuZGVyQm91bmRzKGNvbnRleHQpIHtcbiAgICBjb25zdCBidWZmZXIgPSBjb250ZXh0ID09IG51bGwgPyBjb250ZXh0ID0gbmV3IFBhdGggOiB1bmRlZmluZWQ7XG4gICAgY29udGV4dC5yZWN0KHRoaXMueG1pbiwgdGhpcy55bWluLCB0aGlzLnhtYXggLSB0aGlzLnhtaW4sIHRoaXMueW1heCAtIHRoaXMueW1pbik7XG4gICAgcmV0dXJuIGJ1ZmZlciAmJiBidWZmZXIudmFsdWUoKTtcbiAgfVxuICByZW5kZXJDZWxsKGksIGNvbnRleHQpIHtcbiAgICBjb25zdCBidWZmZXIgPSBjb250ZXh0ID09IG51bGwgPyBjb250ZXh0ID0gbmV3IFBhdGggOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcG9pbnRzID0gdGhpcy5fY2xpcChpKTtcbiAgICBpZiAocG9pbnRzID09PSBudWxsIHx8ICFwb2ludHMubGVuZ3RoKSByZXR1cm47XG4gICAgY29udGV4dC5tb3ZlVG8ocG9pbnRzWzBdLCBwb2ludHNbMV0pO1xuICAgIGxldCBuID0gcG9pbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAocG9pbnRzWzBdID09PSBwb2ludHNbbi0yXSAmJiBwb2ludHNbMV0gPT09IHBvaW50c1tuLTFdICYmIG4gPiAxKSBuIC09IDI7XG4gICAgZm9yIChsZXQgaSA9IDI7IGkgPCBuOyBpICs9IDIpIHtcbiAgICAgIGlmIChwb2ludHNbaV0gIT09IHBvaW50c1tpLTJdIHx8IHBvaW50c1tpKzFdICE9PSBwb2ludHNbaS0xXSlcbiAgICAgICAgY29udGV4dC5saW5lVG8ocG9pbnRzW2ldLCBwb2ludHNbaSArIDFdKTtcbiAgICB9XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICByZXR1cm4gYnVmZmVyICYmIGJ1ZmZlci52YWx1ZSgpO1xuICB9XG4gICpjZWxsUG9seWdvbnMoKSB7XG4gICAgY29uc3Qge2RlbGF1bmF5OiB7cG9pbnRzfX0gPSB0aGlzO1xuICAgIGZvciAobGV0IGkgPSAwLCBuID0gcG9pbnRzLmxlbmd0aCAvIDI7IGkgPCBuOyArK2kpIHtcbiAgICAgIGNvbnN0IGNlbGwgPSB0aGlzLmNlbGxQb2x5Z29uKGkpO1xuICAgICAgaWYgKGNlbGwpIGNlbGwuaW5kZXggPSBpLCB5aWVsZCBjZWxsO1xuICAgIH1cbiAgfVxuICBjZWxsUG9seWdvbihpKSB7XG4gICAgY29uc3QgcG9seWdvbiA9IG5ldyBQb2x5Z29uO1xuICAgIHRoaXMucmVuZGVyQ2VsbChpLCBwb2x5Z29uKTtcbiAgICByZXR1cm4gcG9seWdvbi52YWx1ZSgpO1xuICB9XG4gIF9yZW5kZXJTZWdtZW50KHgwLCB5MCwgeDEsIHkxLCBjb250ZXh0KSB7XG4gICAgbGV0IFM7XG4gICAgY29uc3QgYzAgPSB0aGlzLl9yZWdpb25jb2RlKHgwLCB5MCk7XG4gICAgY29uc3QgYzEgPSB0aGlzLl9yZWdpb25jb2RlKHgxLCB5MSk7XG4gICAgaWYgKGMwID09PSAwICYmIGMxID09PSAwKSB7XG4gICAgICBjb250ZXh0Lm1vdmVUbyh4MCwgeTApO1xuICAgICAgY29udGV4dC5saW5lVG8oeDEsIHkxKTtcbiAgICB9IGVsc2UgaWYgKFMgPSB0aGlzLl9jbGlwU2VnbWVudCh4MCwgeTAsIHgxLCB5MSwgYzAsIGMxKSkge1xuICAgICAgY29udGV4dC5tb3ZlVG8oU1swXSwgU1sxXSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhTWzJdLCBTWzNdKTtcbiAgICB9XG4gIH1cbiAgY29udGFpbnMoaSwgeCwgeSkge1xuICAgIGlmICgoeCA9ICt4LCB4ICE9PSB4KSB8fCAoeSA9ICt5LCB5ICE9PSB5KSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLmRlbGF1bmF5Ll9zdGVwKGksIHgsIHkpID09PSBpO1xuICB9XG4gICpuZWlnaGJvcnMoaSkge1xuICAgIGNvbnN0IGNpID0gdGhpcy5fY2xpcChpKTtcbiAgICBpZiAoY2kpIGZvciAoY29uc3QgaiBvZiB0aGlzLmRlbGF1bmF5Lm5laWdoYm9ycyhpKSkge1xuICAgICAgY29uc3QgY2ogPSB0aGlzLl9jbGlwKGopO1xuICAgICAgLy8gZmluZCB0aGUgY29tbW9uIGVkZ2VcbiAgICAgIGlmIChjaikgbG9vcDogZm9yIChsZXQgYWkgPSAwLCBsaSA9IGNpLmxlbmd0aDsgYWkgPCBsaTsgYWkgKz0gMikge1xuICAgICAgICBmb3IgKGxldCBhaiA9IDAsIGxqID0gY2oubGVuZ3RoOyBhaiA8IGxqOyBhaiArPSAyKSB7XG4gICAgICAgICAgaWYgKGNpW2FpXSA9PT0gY2pbYWpdXG4gICAgICAgICAgICAgICYmIGNpW2FpICsgMV0gPT09IGNqW2FqICsgMV1cbiAgICAgICAgICAgICAgJiYgY2lbKGFpICsgMikgJSBsaV0gPT09IGNqWyhhaiArIGxqIC0gMikgJSBsal1cbiAgICAgICAgICAgICAgJiYgY2lbKGFpICsgMykgJSBsaV0gPT09IGNqWyhhaiArIGxqIC0gMSkgJSBsal0pIHtcbiAgICAgICAgICAgIHlpZWxkIGo7XG4gICAgICAgICAgICBicmVhayBsb29wO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBfY2VsbChpKSB7XG4gICAgY29uc3Qge2NpcmN1bWNlbnRlcnMsIGRlbGF1bmF5OiB7aW5lZGdlcywgaGFsZmVkZ2VzLCB0cmlhbmdsZXN9fSA9IHRoaXM7XG4gICAgY29uc3QgZTAgPSBpbmVkZ2VzW2ldO1xuICAgIGlmIChlMCA9PT0gLTEpIHJldHVybiBudWxsOyAvLyBjb2luY2lkZW50IHBvaW50XG4gICAgY29uc3QgcG9pbnRzID0gW107XG4gICAgbGV0IGUgPSBlMDtcbiAgICBkbyB7XG4gICAgICBjb25zdCB0ID0gTWF0aC5mbG9vcihlIC8gMyk7XG4gICAgICBwb2ludHMucHVzaChjaXJjdW1jZW50ZXJzW3QgKiAyXSwgY2lyY3VtY2VudGVyc1t0ICogMiArIDFdKTtcbiAgICAgIGUgPSBlICUgMyA9PT0gMiA/IGUgLSAyIDogZSArIDE7XG4gICAgICBpZiAodHJpYW5nbGVzW2VdICE9PSBpKSBicmVhazsgLy8gYmFkIHRyaWFuZ3VsYXRpb25cbiAgICAgIGUgPSBoYWxmZWRnZXNbZV07XG4gICAgfSB3aGlsZSAoZSAhPT0gZTAgJiYgZSAhPT0gLTEpO1xuICAgIHJldHVybiBwb2ludHM7XG4gIH1cbiAgX2NsaXAoaSkge1xuICAgIC8vIGRlZ2VuZXJhdGUgY2FzZSAoMSB2YWxpZCBwb2ludDogcmV0dXJuIHRoZSBib3gpXG4gICAgaWYgKGkgPT09IDAgJiYgdGhpcy5kZWxhdW5heS5odWxsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIFt0aGlzLnhtYXgsIHRoaXMueW1pbiwgdGhpcy54bWF4LCB0aGlzLnltYXgsIHRoaXMueG1pbiwgdGhpcy55bWF4LCB0aGlzLnhtaW4sIHRoaXMueW1pbl07XG4gICAgfVxuICAgIGNvbnN0IHBvaW50cyA9IHRoaXMuX2NlbGwoaSk7XG4gICAgaWYgKHBvaW50cyA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgY29uc3Qge3ZlY3RvcnM6IFZ9ID0gdGhpcztcbiAgICBjb25zdCB2ID0gaSAqIDQ7XG4gICAgcmV0dXJuIHRoaXMuX3NpbXBsaWZ5KFZbdl0gfHwgVlt2ICsgMV1cbiAgICAgICAgPyB0aGlzLl9jbGlwSW5maW5pdGUoaSwgcG9pbnRzLCBWW3ZdLCBWW3YgKyAxXSwgVlt2ICsgMl0sIFZbdiArIDNdKVxuICAgICAgICA6IHRoaXMuX2NsaXBGaW5pdGUoaSwgcG9pbnRzKSk7XG4gIH1cbiAgX2NsaXBGaW5pdGUoaSwgcG9pbnRzKSB7XG4gICAgY29uc3QgbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgbGV0IFAgPSBudWxsO1xuICAgIGxldCB4MCwgeTAsIHgxID0gcG9pbnRzW24gLSAyXSwgeTEgPSBwb2ludHNbbiAtIDFdO1xuICAgIGxldCBjMCwgYzEgPSB0aGlzLl9yZWdpb25jb2RlKHgxLCB5MSk7XG4gICAgbGV0IGUwLCBlMSA9IDA7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBuOyBqICs9IDIpIHtcbiAgICAgIHgwID0geDEsIHkwID0geTEsIHgxID0gcG9pbnRzW2pdLCB5MSA9IHBvaW50c1tqICsgMV07XG4gICAgICBjMCA9IGMxLCBjMSA9IHRoaXMuX3JlZ2lvbmNvZGUoeDEsIHkxKTtcbiAgICAgIGlmIChjMCA9PT0gMCAmJiBjMSA9PT0gMCkge1xuICAgICAgICBlMCA9IGUxLCBlMSA9IDA7XG4gICAgICAgIGlmIChQKSBQLnB1c2goeDEsIHkxKTtcbiAgICAgICAgZWxzZSBQID0gW3gxLCB5MV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgUywgc3gwLCBzeTAsIHN4MSwgc3kxO1xuICAgICAgICBpZiAoYzAgPT09IDApIHtcbiAgICAgICAgICBpZiAoKFMgPSB0aGlzLl9jbGlwU2VnbWVudCh4MCwgeTAsIHgxLCB5MSwgYzAsIGMxKSkgPT09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICAgIFtzeDAsIHN5MCwgc3gxLCBzeTFdID0gUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoKFMgPSB0aGlzLl9jbGlwU2VnbWVudCh4MSwgeTEsIHgwLCB5MCwgYzEsIGMwKSkgPT09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICAgIFtzeDEsIHN5MSwgc3gwLCBzeTBdID0gUztcbiAgICAgICAgICBlMCA9IGUxLCBlMSA9IHRoaXMuX2VkZ2Vjb2RlKHN4MCwgc3kwKTtcbiAgICAgICAgICBpZiAoZTAgJiYgZTEpIHRoaXMuX2VkZ2UoaSwgZTAsIGUxLCBQLCBQLmxlbmd0aCk7XG4gICAgICAgICAgaWYgKFApIFAucHVzaChzeDAsIHN5MCk7XG4gICAgICAgICAgZWxzZSBQID0gW3N4MCwgc3kwXTtcbiAgICAgICAgfVxuICAgICAgICBlMCA9IGUxLCBlMSA9IHRoaXMuX2VkZ2Vjb2RlKHN4MSwgc3kxKTtcbiAgICAgICAgaWYgKGUwICYmIGUxKSB0aGlzLl9lZGdlKGksIGUwLCBlMSwgUCwgUC5sZW5ndGgpO1xuICAgICAgICBpZiAoUCkgUC5wdXNoKHN4MSwgc3kxKTtcbiAgICAgICAgZWxzZSBQID0gW3N4MSwgc3kxXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKFApIHtcbiAgICAgIGUwID0gZTEsIGUxID0gdGhpcy5fZWRnZWNvZGUoUFswXSwgUFsxXSk7XG4gICAgICBpZiAoZTAgJiYgZTEpIHRoaXMuX2VkZ2UoaSwgZTAsIGUxLCBQLCBQLmxlbmd0aCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbnRhaW5zKGksICh0aGlzLnhtaW4gKyB0aGlzLnhtYXgpIC8gMiwgKHRoaXMueW1pbiArIHRoaXMueW1heCkgLyAyKSkge1xuICAgICAgcmV0dXJuIFt0aGlzLnhtYXgsIHRoaXMueW1pbiwgdGhpcy54bWF4LCB0aGlzLnltYXgsIHRoaXMueG1pbiwgdGhpcy55bWF4LCB0aGlzLnhtaW4sIHRoaXMueW1pbl07XG4gICAgfVxuICAgIHJldHVybiBQO1xuICB9XG4gIF9jbGlwU2VnbWVudCh4MCwgeTAsIHgxLCB5MSwgYzAsIGMxKSB7XG4gICAgLy8gZm9yIG1vcmUgcm9idXN0bmVzcywgYWx3YXlzIGNvbnNpZGVyIHRoZSBzZWdtZW50IGluIHRoZSBzYW1lIG9yZGVyXG4gICAgY29uc3QgZmxpcCA9IGMwIDwgYzE7XG4gICAgaWYgKGZsaXApIFt4MCwgeTAsIHgxLCB5MSwgYzAsIGMxXSA9IFt4MSwgeTEsIHgwLCB5MCwgYzEsIGMwXTtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgaWYgKGMwID09PSAwICYmIGMxID09PSAwKSByZXR1cm4gZmxpcCA/IFt4MSwgeTEsIHgwLCB5MF0gOiBbeDAsIHkwLCB4MSwgeTFdO1xuICAgICAgaWYgKGMwICYgYzEpIHJldHVybiBudWxsO1xuICAgICAgbGV0IHgsIHksIGMgPSBjMCB8fCBjMTtcbiAgICAgIGlmIChjICYgMGIxMDAwKSB4ID0geDAgKyAoeDEgLSB4MCkgKiAodGhpcy55bWF4IC0geTApIC8gKHkxIC0geTApLCB5ID0gdGhpcy55bWF4O1xuICAgICAgZWxzZSBpZiAoYyAmIDBiMDEwMCkgeCA9IHgwICsgKHgxIC0geDApICogKHRoaXMueW1pbiAtIHkwKSAvICh5MSAtIHkwKSwgeSA9IHRoaXMueW1pbjtcbiAgICAgIGVsc2UgaWYgKGMgJiAwYjAwMTApIHkgPSB5MCArICh5MSAtIHkwKSAqICh0aGlzLnhtYXggLSB4MCkgLyAoeDEgLSB4MCksIHggPSB0aGlzLnhtYXg7XG4gICAgICBlbHNlIHkgPSB5MCArICh5MSAtIHkwKSAqICh0aGlzLnhtaW4gLSB4MCkgLyAoeDEgLSB4MCksIHggPSB0aGlzLnhtaW47XG4gICAgICBpZiAoYzApIHgwID0geCwgeTAgPSB5LCBjMCA9IHRoaXMuX3JlZ2lvbmNvZGUoeDAsIHkwKTtcbiAgICAgIGVsc2UgeDEgPSB4LCB5MSA9IHksIGMxID0gdGhpcy5fcmVnaW9uY29kZSh4MSwgeTEpO1xuICAgIH1cbiAgfVxuICBfY2xpcEluZmluaXRlKGksIHBvaW50cywgdngwLCB2eTAsIHZ4biwgdnluKSB7XG4gICAgbGV0IFAgPSBBcnJheS5mcm9tKHBvaW50cyksIHA7XG4gICAgaWYgKHAgPSB0aGlzLl9wcm9qZWN0KFBbMF0sIFBbMV0sIHZ4MCwgdnkwKSkgUC51bnNoaWZ0KHBbMF0sIHBbMV0pO1xuICAgIGlmIChwID0gdGhpcy5fcHJvamVjdChQW1AubGVuZ3RoIC0gMl0sIFBbUC5sZW5ndGggLSAxXSwgdnhuLCB2eW4pKSBQLnB1c2gocFswXSwgcFsxXSk7XG4gICAgaWYgKFAgPSB0aGlzLl9jbGlwRmluaXRlKGksIFApKSB7XG4gICAgICBmb3IgKGxldCBqID0gMCwgbiA9IFAubGVuZ3RoLCBjMCwgYzEgPSB0aGlzLl9lZGdlY29kZShQW24gLSAyXSwgUFtuIC0gMV0pOyBqIDwgbjsgaiArPSAyKSB7XG4gICAgICAgIGMwID0gYzEsIGMxID0gdGhpcy5fZWRnZWNvZGUoUFtqXSwgUFtqICsgMV0pO1xuICAgICAgICBpZiAoYzAgJiYgYzEpIGogPSB0aGlzLl9lZGdlKGksIGMwLCBjMSwgUCwgaiksIG4gPSBQLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuY29udGFpbnMoaSwgKHRoaXMueG1pbiArIHRoaXMueG1heCkgLyAyLCAodGhpcy55bWluICsgdGhpcy55bWF4KSAvIDIpKSB7XG4gICAgICBQID0gW3RoaXMueG1pbiwgdGhpcy55bWluLCB0aGlzLnhtYXgsIHRoaXMueW1pbiwgdGhpcy54bWF4LCB0aGlzLnltYXgsIHRoaXMueG1pbiwgdGhpcy55bWF4XTtcbiAgICB9XG4gICAgcmV0dXJuIFA7XG4gIH1cbiAgX2VkZ2UoaSwgZTAsIGUxLCBQLCBqKSB7XG4gICAgd2hpbGUgKGUwICE9PSBlMSkge1xuICAgICAgbGV0IHgsIHk7XG4gICAgICBzd2l0Y2ggKGUwKSB7XG4gICAgICAgIGNhc2UgMGIwMTAxOiBlMCA9IDBiMDEwMDsgY29udGludWU7IC8vIHRvcC1sZWZ0XG4gICAgICAgIGNhc2UgMGIwMTAwOiBlMCA9IDBiMDExMCwgeCA9IHRoaXMueG1heCwgeSA9IHRoaXMueW1pbjsgYnJlYWs7IC8vIHRvcFxuICAgICAgICBjYXNlIDBiMDExMDogZTAgPSAwYjAwMTA7IGNvbnRpbnVlOyAvLyB0b3AtcmlnaHRcbiAgICAgICAgY2FzZSAwYjAwMTA6IGUwID0gMGIxMDEwLCB4ID0gdGhpcy54bWF4LCB5ID0gdGhpcy55bWF4OyBicmVhazsgLy8gcmlnaHRcbiAgICAgICAgY2FzZSAwYjEwMTA6IGUwID0gMGIxMDAwOyBjb250aW51ZTsgLy8gYm90dG9tLXJpZ2h0XG4gICAgICAgIGNhc2UgMGIxMDAwOiBlMCA9IDBiMTAwMSwgeCA9IHRoaXMueG1pbiwgeSA9IHRoaXMueW1heDsgYnJlYWs7IC8vIGJvdHRvbVxuICAgICAgICBjYXNlIDBiMTAwMTogZTAgPSAwYjAwMDE7IGNvbnRpbnVlOyAvLyBib3R0b20tbGVmdFxuICAgICAgICBjYXNlIDBiMDAwMTogZTAgPSAwYjAxMDEsIHggPSB0aGlzLnhtaW4sIHkgPSB0aGlzLnltaW47IGJyZWFrOyAvLyBsZWZ0XG4gICAgICB9XG4gICAgICAvLyBOb3RlOiB0aGlzIGltcGxpY2l0bHkgY2hlY2tzIGZvciBvdXQgb2YgYm91bmRzOiBpZiBQW2pdIG9yIFBbaisxXSBhcmVcbiAgICAgIC8vIHVuZGVmaW5lZCwgdGhlIGNvbmRpdGlvbmFsIHN0YXRlbWVudCB3aWxsIGJlIGV4ZWN1dGVkLlxuICAgICAgaWYgKChQW2pdICE9PSB4IHx8IFBbaiArIDFdICE9PSB5KSAmJiB0aGlzLmNvbnRhaW5zKGksIHgsIHkpKSB7XG4gICAgICAgIFAuc3BsaWNlKGosIDAsIHgsIHkpLCBqICs9IDI7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBqO1xuICB9XG4gIF9wcm9qZWN0KHgwLCB5MCwgdngsIHZ5KSB7XG4gICAgbGV0IHQgPSBJbmZpbml0eSwgYywgeCwgeTtcbiAgICBpZiAodnkgPCAwKSB7IC8vIHRvcFxuICAgICAgaWYgKHkwIDw9IHRoaXMueW1pbikgcmV0dXJuIG51bGw7XG4gICAgICBpZiAoKGMgPSAodGhpcy55bWluIC0geTApIC8gdnkpIDwgdCkgeSA9IHRoaXMueW1pbiwgeCA9IHgwICsgKHQgPSBjKSAqIHZ4O1xuICAgIH0gZWxzZSBpZiAodnkgPiAwKSB7IC8vIGJvdHRvbVxuICAgICAgaWYgKHkwID49IHRoaXMueW1heCkgcmV0dXJuIG51bGw7XG4gICAgICBpZiAoKGMgPSAodGhpcy55bWF4IC0geTApIC8gdnkpIDwgdCkgeSA9IHRoaXMueW1heCwgeCA9IHgwICsgKHQgPSBjKSAqIHZ4O1xuICAgIH1cbiAgICBpZiAodnggPiAwKSB7IC8vIHJpZ2h0XG4gICAgICBpZiAoeDAgPj0gdGhpcy54bWF4KSByZXR1cm4gbnVsbDtcbiAgICAgIGlmICgoYyA9ICh0aGlzLnhtYXggLSB4MCkgLyB2eCkgPCB0KSB4ID0gdGhpcy54bWF4LCB5ID0geTAgKyAodCA9IGMpICogdnk7XG4gICAgfSBlbHNlIGlmICh2eCA8IDApIHsgLy8gbGVmdFxuICAgICAgaWYgKHgwIDw9IHRoaXMueG1pbikgcmV0dXJuIG51bGw7XG4gICAgICBpZiAoKGMgPSAodGhpcy54bWluIC0geDApIC8gdngpIDwgdCkgeCA9IHRoaXMueG1pbiwgeSA9IHkwICsgKHQgPSBjKSAqIHZ5O1xuICAgIH1cbiAgICByZXR1cm4gW3gsIHldO1xuICB9XG4gIF9lZGdlY29kZSh4LCB5KSB7XG4gICAgcmV0dXJuICh4ID09PSB0aGlzLnhtaW4gPyAwYjAwMDFcbiAgICAgICAgOiB4ID09PSB0aGlzLnhtYXggPyAwYjAwMTAgOiAwYjAwMDApXG4gICAgICAgIHwgKHkgPT09IHRoaXMueW1pbiA/IDBiMDEwMFxuICAgICAgICA6IHkgPT09IHRoaXMueW1heCA/IDBiMTAwMCA6IDBiMDAwMCk7XG4gIH1cbiAgX3JlZ2lvbmNvZGUoeCwgeSkge1xuICAgIHJldHVybiAoeCA8IHRoaXMueG1pbiA/IDBiMDAwMVxuICAgICAgICA6IHggPiB0aGlzLnhtYXggPyAwYjAwMTAgOiAwYjAwMDApXG4gICAgICAgIHwgKHkgPCB0aGlzLnltaW4gPyAwYjAxMDBcbiAgICAgICAgOiB5ID4gdGhpcy55bWF4ID8gMGIxMDAwIDogMGIwMDAwKTtcbiAgfVxuICBfc2ltcGxpZnkoUCkge1xuICAgIGlmIChQICYmIFAubGVuZ3RoID4gNCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBQLmxlbmd0aDsgaSs9IDIpIHtcbiAgICAgICAgY29uc3QgaiA9IChpICsgMikgJSBQLmxlbmd0aCwgayA9IChpICsgNCkgJSBQLmxlbmd0aDtcbiAgICAgICAgaWYgKFBbaV0gPT09IFBbal0gJiYgUFtqXSA9PT0gUFtrXSB8fCBQW2kgKyAxXSA9PT0gUFtqICsgMV0gJiYgUFtqICsgMV0gPT09IFBbayArIDFdKSB7XG4gICAgICAgICAgUC5zcGxpY2UoaiwgMiksIGkgLT0gMjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFQLmxlbmd0aCkgUCA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBQO1xuICB9XG59XG4iLCJpbXBvcnQgRGVsYXVuYXRvciBmcm9tIFwiZGVsYXVuYXRvclwiO1xuaW1wb3J0IFBhdGggZnJvbSBcIi4vcGF0aC5qc1wiO1xuaW1wb3J0IFBvbHlnb24gZnJvbSBcIi4vcG9seWdvbi5qc1wiO1xuaW1wb3J0IFZvcm9ub2kgZnJvbSBcIi4vdm9yb25vaS5qc1wiO1xuXG5jb25zdCB0YXUgPSAyICogTWF0aC5QSSwgcG93ID0gTWF0aC5wb3c7XG5cbmZ1bmN0aW9uIHBvaW50WChwKSB7XG4gIHJldHVybiBwWzBdO1xufVxuXG5mdW5jdGlvbiBwb2ludFkocCkge1xuICByZXR1cm4gcFsxXTtcbn1cblxuLy8gQSB0cmlhbmd1bGF0aW9uIGlzIGNvbGxpbmVhciBpZiBhbGwgaXRzIHRyaWFuZ2xlcyBoYXZlIGEgbm9uLW51bGwgYXJlYVxuZnVuY3Rpb24gY29sbGluZWFyKGQpIHtcbiAgY29uc3Qge3RyaWFuZ2xlcywgY29vcmRzfSA9IGQ7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdHJpYW5nbGVzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgY29uc3QgYSA9IDIgKiB0cmlhbmdsZXNbaV0sXG4gICAgICAgICAgYiA9IDIgKiB0cmlhbmdsZXNbaSArIDFdLFxuICAgICAgICAgIGMgPSAyICogdHJpYW5nbGVzW2kgKyAyXSxcbiAgICAgICAgICBjcm9zcyA9IChjb29yZHNbY10gLSBjb29yZHNbYV0pICogKGNvb3Jkc1tiICsgMV0gLSBjb29yZHNbYSArIDFdKVxuICAgICAgICAgICAgICAgIC0gKGNvb3Jkc1tiXSAtIGNvb3Jkc1thXSkgKiAoY29vcmRzW2MgKyAxXSAtIGNvb3Jkc1thICsgMV0pO1xuICAgIGlmIChjcm9zcyA+IDFlLTEwKSByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGppdHRlcih4LCB5LCByKSB7XG4gIHJldHVybiBbeCArIE1hdGguc2luKHggKyB5KSAqIHIsIHkgKyBNYXRoLmNvcyh4IC0geSkgKiByXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVsYXVuYXkge1xuICBzdGF0aWMgZnJvbShwb2ludHMsIGZ4ID0gcG9pbnRYLCBmeSA9IHBvaW50WSwgdGhhdCkge1xuICAgIHJldHVybiBuZXcgRGVsYXVuYXkoXCJsZW5ndGhcIiBpbiBwb2ludHNcbiAgICAgICAgPyBmbGF0QXJyYXkocG9pbnRzLCBmeCwgZnksIHRoYXQpXG4gICAgICAgIDogRmxvYXQ2NEFycmF5LmZyb20oZmxhdEl0ZXJhYmxlKHBvaW50cywgZngsIGZ5LCB0aGF0KSkpO1xuICB9XG4gIGNvbnN0cnVjdG9yKHBvaW50cykge1xuICAgIHRoaXMuX2RlbGF1bmF0b3IgPSBuZXcgRGVsYXVuYXRvcihwb2ludHMpO1xuICAgIHRoaXMuaW5lZGdlcyA9IG5ldyBJbnQzMkFycmF5KHBvaW50cy5sZW5ndGggLyAyKTtcbiAgICB0aGlzLl9odWxsSW5kZXggPSBuZXcgSW50MzJBcnJheShwb2ludHMubGVuZ3RoIC8gMik7XG4gICAgdGhpcy5wb2ludHMgPSB0aGlzLl9kZWxhdW5hdG9yLmNvb3JkcztcbiAgICB0aGlzLl9pbml0KCk7XG4gIH1cbiAgdXBkYXRlKCkge1xuICAgIHRoaXMuX2RlbGF1bmF0b3IudXBkYXRlKCk7XG4gICAgdGhpcy5faW5pdCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIF9pbml0KCkge1xuICAgIGNvbnN0IGQgPSB0aGlzLl9kZWxhdW5hdG9yLCBwb2ludHMgPSB0aGlzLnBvaW50cztcblxuICAgIC8vIGNoZWNrIGZvciBjb2xsaW5lYXJcbiAgICBpZiAoZC5odWxsICYmIGQuaHVsbC5sZW5ndGggPiAyICYmIGNvbGxpbmVhcihkKSkge1xuICAgICAgdGhpcy5jb2xsaW5lYXIgPSBJbnQzMkFycmF5LmZyb20oe2xlbmd0aDogcG9pbnRzLmxlbmd0aC8yfSwgKF8saSkgPT4gaSlcbiAgICAgICAgLnNvcnQoKGksIGopID0+IHBvaW50c1syICogaV0gLSBwb2ludHNbMiAqIGpdIHx8IHBvaW50c1syICogaSArIDFdIC0gcG9pbnRzWzIgKiBqICsgMV0pOyAvLyBmb3IgZXhhY3QgbmVpZ2hib3JzXG4gICAgICBjb25zdCBlID0gdGhpcy5jb2xsaW5lYXJbMF0sIGYgPSB0aGlzLmNvbGxpbmVhclt0aGlzLmNvbGxpbmVhci5sZW5ndGggLSAxXSxcbiAgICAgICAgYm91bmRzID0gWyBwb2ludHNbMiAqIGVdLCBwb2ludHNbMiAqIGUgKyAxXSwgcG9pbnRzWzIgKiBmXSwgcG9pbnRzWzIgKiBmICsgMV0gXSxcbiAgICAgICAgciA9IDFlLTggKiBNYXRoLmh5cG90KGJvdW5kc1szXSAtIGJvdW5kc1sxXSwgYm91bmRzWzJdIC0gYm91bmRzWzBdKTtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBuID0gcG9pbnRzLmxlbmd0aCAvIDI7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgY29uc3QgcCA9IGppdHRlcihwb2ludHNbMiAqIGldLCBwb2ludHNbMiAqIGkgKyAxXSwgcik7XG4gICAgICAgIHBvaW50c1syICogaV0gPSBwWzBdO1xuICAgICAgICBwb2ludHNbMiAqIGkgKyAxXSA9IHBbMV07XG4gICAgICB9XG4gICAgICB0aGlzLl9kZWxhdW5hdG9yID0gbmV3IERlbGF1bmF0b3IocG9pbnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHRoaXMuY29sbGluZWFyO1xuICAgIH1cblxuICAgIGNvbnN0IGhhbGZlZGdlcyA9IHRoaXMuaGFsZmVkZ2VzID0gdGhpcy5fZGVsYXVuYXRvci5oYWxmZWRnZXM7XG4gICAgY29uc3QgaHVsbCA9IHRoaXMuaHVsbCA9IHRoaXMuX2RlbGF1bmF0b3IuaHVsbDtcbiAgICBjb25zdCB0cmlhbmdsZXMgPSB0aGlzLnRyaWFuZ2xlcyA9IHRoaXMuX2RlbGF1bmF0b3IudHJpYW5nbGVzO1xuICAgIGNvbnN0IGluZWRnZXMgPSB0aGlzLmluZWRnZXMuZmlsbCgtMSk7XG4gICAgY29uc3QgaHVsbEluZGV4ID0gdGhpcy5faHVsbEluZGV4LmZpbGwoLTEpO1xuXG4gICAgLy8gQ29tcHV0ZSBhbiBpbmRleCBmcm9tIGVhY2ggcG9pbnQgdG8gYW4gKGFyYml0cmFyeSkgaW5jb21pbmcgaGFsZmVkZ2VcbiAgICAvLyBVc2VkIHRvIGdpdmUgdGhlIGZpcnN0IG5laWdoYm9yIG9mIGVhY2ggcG9pbnQ7IGZvciB0aGlzIHJlYXNvbixcbiAgICAvLyBvbiB0aGUgaHVsbCB3ZSBnaXZlIHByaW9yaXR5IHRvIGV4dGVyaW9yIGhhbGZlZGdlc1xuICAgIGZvciAobGV0IGUgPSAwLCBuID0gaGFsZmVkZ2VzLmxlbmd0aDsgZSA8IG47ICsrZSkge1xuICAgICAgY29uc3QgcCA9IHRyaWFuZ2xlc1tlICUgMyA9PT0gMiA/IGUgLSAyIDogZSArIDFdO1xuICAgICAgaWYgKGhhbGZlZGdlc1tlXSA9PT0gLTEgfHwgaW5lZGdlc1twXSA9PT0gLTEpIGluZWRnZXNbcF0gPSBlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMCwgbiA9IGh1bGwubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBodWxsSW5kZXhbaHVsbFtpXV0gPSBpO1xuICAgIH1cblxuICAgIC8vIGRlZ2VuZXJhdGUgY2FzZTogMSBvciAyIChkaXN0aW5jdCkgcG9pbnRzXG4gICAgaWYgKGh1bGwubGVuZ3RoIDw9IDIgJiYgaHVsbC5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnRyaWFuZ2xlcyA9IG5ldyBJbnQzMkFycmF5KDMpLmZpbGwoLTEpO1xuICAgICAgdGhpcy5oYWxmZWRnZXMgPSBuZXcgSW50MzJBcnJheSgzKS5maWxsKC0xKTtcbiAgICAgIHRoaXMudHJpYW5nbGVzWzBdID0gaHVsbFswXTtcbiAgICAgIGluZWRnZXNbaHVsbFswXV0gPSAxO1xuICAgICAgaWYgKGh1bGwubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIGluZWRnZXNbaHVsbFsxXV0gPSAwO1xuICAgICAgICB0aGlzLnRyaWFuZ2xlc1sxXSA9IGh1bGxbMV07XG4gICAgICAgIHRoaXMudHJpYW5nbGVzWzJdID0gaHVsbFsxXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdm9yb25vaShib3VuZHMpIHtcbiAgICByZXR1cm4gbmV3IFZvcm9ub2kodGhpcywgYm91bmRzKTtcbiAgfVxuICAqbmVpZ2hib3JzKGkpIHtcbiAgICBjb25zdCB7aW5lZGdlcywgaHVsbCwgX2h1bGxJbmRleCwgaGFsZmVkZ2VzLCB0cmlhbmdsZXMsIGNvbGxpbmVhcn0gPSB0aGlzO1xuXG4gICAgLy8gZGVnZW5lcmF0ZSBjYXNlIHdpdGggc2V2ZXJhbCBjb2xsaW5lYXIgcG9pbnRzXG4gICAgaWYgKGNvbGxpbmVhcikge1xuICAgICAgY29uc3QgbCA9IGNvbGxpbmVhci5pbmRleE9mKGkpO1xuICAgICAgaWYgKGwgPiAwKSB5aWVsZCBjb2xsaW5lYXJbbCAtIDFdO1xuICAgICAgaWYgKGwgPCBjb2xsaW5lYXIubGVuZ3RoIC0gMSkgeWllbGQgY29sbGluZWFyW2wgKyAxXTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBlMCA9IGluZWRnZXNbaV07XG4gICAgaWYgKGUwID09PSAtMSkgcmV0dXJuOyAvLyBjb2luY2lkZW50IHBvaW50XG4gICAgbGV0IGUgPSBlMCwgcDAgPSAtMTtcbiAgICBkbyB7XG4gICAgICB5aWVsZCBwMCA9IHRyaWFuZ2xlc1tlXTtcbiAgICAgIGUgPSBlICUgMyA9PT0gMiA/IGUgLSAyIDogZSArIDE7XG4gICAgICBpZiAodHJpYW5nbGVzW2VdICE9PSBpKSByZXR1cm47IC8vIGJhZCB0cmlhbmd1bGF0aW9uXG4gICAgICBlID0gaGFsZmVkZ2VzW2VdO1xuICAgICAgaWYgKGUgPT09IC0xKSB7XG4gICAgICAgIGNvbnN0IHAgPSBodWxsWyhfaHVsbEluZGV4W2ldICsgMSkgJSBodWxsLmxlbmd0aF07XG4gICAgICAgIGlmIChwICE9PSBwMCkgeWllbGQgcDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKGUgIT09IGUwKTtcbiAgfVxuICBmaW5kKHgsIHksIGkgPSAwKSB7XG4gICAgaWYgKCh4ID0gK3gsIHggIT09IHgpIHx8ICh5ID0gK3ksIHkgIT09IHkpKSByZXR1cm4gLTE7XG4gICAgY29uc3QgaTAgPSBpO1xuICAgIGxldCBjO1xuICAgIHdoaWxlICgoYyA9IHRoaXMuX3N0ZXAoaSwgeCwgeSkpID49IDAgJiYgYyAhPT0gaSAmJiBjICE9PSBpMCkgaSA9IGM7XG4gICAgcmV0dXJuIGM7XG4gIH1cbiAgX3N0ZXAoaSwgeCwgeSkge1xuICAgIGNvbnN0IHtpbmVkZ2VzLCBodWxsLCBfaHVsbEluZGV4LCBoYWxmZWRnZXMsIHRyaWFuZ2xlcywgcG9pbnRzfSA9IHRoaXM7XG4gICAgaWYgKGluZWRnZXNbaV0gPT09IC0xIHx8ICFwb2ludHMubGVuZ3RoKSByZXR1cm4gKGkgKyAxKSAlIChwb2ludHMubGVuZ3RoID4+IDEpO1xuICAgIGxldCBjID0gaTtcbiAgICBsZXQgZGMgPSBwb3coeCAtIHBvaW50c1tpICogMl0sIDIpICsgcG93KHkgLSBwb2ludHNbaSAqIDIgKyAxXSwgMik7XG4gICAgY29uc3QgZTAgPSBpbmVkZ2VzW2ldO1xuICAgIGxldCBlID0gZTA7XG4gICAgZG8ge1xuICAgICAgbGV0IHQgPSB0cmlhbmdsZXNbZV07XG4gICAgICBjb25zdCBkdCA9IHBvdyh4IC0gcG9pbnRzW3QgKiAyXSwgMikgKyBwb3coeSAtIHBvaW50c1t0ICogMiArIDFdLCAyKTtcbiAgICAgIGlmIChkdCA8IGRjKSBkYyA9IGR0LCBjID0gdDtcbiAgICAgIGUgPSBlICUgMyA9PT0gMiA/IGUgLSAyIDogZSArIDE7XG4gICAgICBpZiAodHJpYW5nbGVzW2VdICE9PSBpKSBicmVhazsgLy8gYmFkIHRyaWFuZ3VsYXRpb25cbiAgICAgIGUgPSBoYWxmZWRnZXNbZV07XG4gICAgICBpZiAoZSA9PT0gLTEpIHtcbiAgICAgICAgZSA9IGh1bGxbKF9odWxsSW5kZXhbaV0gKyAxKSAlIGh1bGwubGVuZ3RoXTtcbiAgICAgICAgaWYgKGUgIT09IHQpIHtcbiAgICAgICAgICBpZiAocG93KHggLSBwb2ludHNbZSAqIDJdLCAyKSArIHBvdyh5IC0gcG9pbnRzW2UgKiAyICsgMV0sIDIpIDwgZGMpIHJldHVybiBlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKGUgIT09IGUwKTtcbiAgICByZXR1cm4gYztcbiAgfVxuICByZW5kZXIoY29udGV4dCkge1xuICAgIGNvbnN0IGJ1ZmZlciA9IGNvbnRleHQgPT0gbnVsbCA/IGNvbnRleHQgPSBuZXcgUGF0aCA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCB7cG9pbnRzLCBoYWxmZWRnZXMsIHRyaWFuZ2xlc30gPSB0aGlzO1xuICAgIGZvciAobGV0IGkgPSAwLCBuID0gaGFsZmVkZ2VzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgY29uc3QgaiA9IGhhbGZlZGdlc1tpXTtcbiAgICAgIGlmIChqIDwgaSkgY29udGludWU7XG4gICAgICBjb25zdCB0aSA9IHRyaWFuZ2xlc1tpXSAqIDI7XG4gICAgICBjb25zdCB0aiA9IHRyaWFuZ2xlc1tqXSAqIDI7XG4gICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbdGldLCBwb2ludHNbdGkgKyAxXSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbdGpdLCBwb2ludHNbdGogKyAxXSk7XG4gICAgfVxuICAgIHRoaXMucmVuZGVySHVsbChjb250ZXh0KTtcbiAgICByZXR1cm4gYnVmZmVyICYmIGJ1ZmZlci52YWx1ZSgpO1xuICB9XG4gIHJlbmRlclBvaW50cyhjb250ZXh0LCByKSB7XG4gICAgaWYgKHIgPT09IHVuZGVmaW5lZCAmJiAoIWNvbnRleHQgfHwgdHlwZW9mIGNvbnRleHQubW92ZVRvICE9PSBcImZ1bmN0aW9uXCIpKSByID0gY29udGV4dCwgY29udGV4dCA9IG51bGw7XG4gICAgciA9IHIgPT0gdW5kZWZpbmVkID8gMiA6ICtyO1xuICAgIGNvbnN0IGJ1ZmZlciA9IGNvbnRleHQgPT0gbnVsbCA/IGNvbnRleHQgPSBuZXcgUGF0aCA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCB7cG9pbnRzfSA9IHRoaXM7XG4gICAgZm9yIChsZXQgaSA9IDAsIG4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbjsgaSArPSAyKSB7XG4gICAgICBjb25zdCB4ID0gcG9pbnRzW2ldLCB5ID0gcG9pbnRzW2kgKyAxXTtcbiAgICAgIGNvbnRleHQubW92ZVRvKHggKyByLCB5KTtcbiAgICAgIGNvbnRleHQuYXJjKHgsIHksIHIsIDAsIHRhdSk7XG4gICAgfVxuICAgIHJldHVybiBidWZmZXIgJiYgYnVmZmVyLnZhbHVlKCk7XG4gIH1cbiAgcmVuZGVySHVsbChjb250ZXh0KSB7XG4gICAgY29uc3QgYnVmZmVyID0gY29udGV4dCA9PSBudWxsID8gY29udGV4dCA9IG5ldyBQYXRoIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHtodWxsLCBwb2ludHN9ID0gdGhpcztcbiAgICBjb25zdCBoID0gaHVsbFswXSAqIDIsIG4gPSBodWxsLmxlbmd0aDtcbiAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbaF0sIHBvaW50c1toICsgMV0pO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb25zdCBoID0gMiAqIGh1bGxbaV07XG4gICAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbaF0sIHBvaW50c1toICsgMV0pO1xuICAgIH1cbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHJldHVybiBidWZmZXIgJiYgYnVmZmVyLnZhbHVlKCk7XG4gIH1cbiAgaHVsbFBvbHlnb24oKSB7XG4gICAgY29uc3QgcG9seWdvbiA9IG5ldyBQb2x5Z29uO1xuICAgIHRoaXMucmVuZGVySHVsbChwb2x5Z29uKTtcbiAgICByZXR1cm4gcG9seWdvbi52YWx1ZSgpO1xuICB9XG4gIHJlbmRlclRyaWFuZ2xlKGksIGNvbnRleHQpIHtcbiAgICBjb25zdCBidWZmZXIgPSBjb250ZXh0ID09IG51bGwgPyBjb250ZXh0ID0gbmV3IFBhdGggOiB1bmRlZmluZWQ7XG4gICAgY29uc3Qge3BvaW50cywgdHJpYW5nbGVzfSA9IHRoaXM7XG4gICAgY29uc3QgdDAgPSB0cmlhbmdsZXNbaSAqPSAzXSAqIDI7XG4gICAgY29uc3QgdDEgPSB0cmlhbmdsZXNbaSArIDFdICogMjtcbiAgICBjb25zdCB0MiA9IHRyaWFuZ2xlc1tpICsgMl0gKiAyO1xuICAgIGNvbnRleHQubW92ZVRvKHBvaW50c1t0MF0sIHBvaW50c1t0MCArIDFdKTtcbiAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbdDFdLCBwb2ludHNbdDEgKyAxXSk7XG4gICAgY29udGV4dC5saW5lVG8ocG9pbnRzW3QyXSwgcG9pbnRzW3QyICsgMV0pO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgcmV0dXJuIGJ1ZmZlciAmJiBidWZmZXIudmFsdWUoKTtcbiAgfVxuICAqdHJpYW5nbGVQb2x5Z29ucygpIHtcbiAgICBjb25zdCB7dHJpYW5nbGVzfSA9IHRoaXM7XG4gICAgZm9yIChsZXQgaSA9IDAsIG4gPSB0cmlhbmdsZXMubGVuZ3RoIC8gMzsgaSA8IG47ICsraSkge1xuICAgICAgeWllbGQgdGhpcy50cmlhbmdsZVBvbHlnb24oaSk7XG4gICAgfVxuICB9XG4gIHRyaWFuZ2xlUG9seWdvbihpKSB7XG4gICAgY29uc3QgcG9seWdvbiA9IG5ldyBQb2x5Z29uO1xuICAgIHRoaXMucmVuZGVyVHJpYW5nbGUoaSwgcG9seWdvbik7XG4gICAgcmV0dXJuIHBvbHlnb24udmFsdWUoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmbGF0QXJyYXkocG9pbnRzLCBmeCwgZnksIHRoYXQpIHtcbiAgY29uc3QgbiA9IHBvaW50cy5sZW5ndGg7XG4gIGNvbnN0IGFycmF5ID0gbmV3IEZsb2F0NjRBcnJheShuICogMik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgY29uc3QgcCA9IHBvaW50c1tpXTtcbiAgICBhcnJheVtpICogMl0gPSBmeC5jYWxsKHRoYXQsIHAsIGksIHBvaW50cyk7XG4gICAgYXJyYXlbaSAqIDIgKyAxXSA9IGZ5LmNhbGwodGhhdCwgcCwgaSwgcG9pbnRzKTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbmZ1bmN0aW9uKiBmbGF0SXRlcmFibGUocG9pbnRzLCBmeCwgZnksIHRoYXQpIHtcbiAgbGV0IGkgPSAwO1xuICBmb3IgKGNvbnN0IHAgb2YgcG9pbnRzKSB7XG4gICAgeWllbGQgZnguY2FsbCh0aGF0LCBwLCBpLCBwb2ludHMpO1xuICAgIHlpZWxkIGZ5LmNhbGwodGhhdCwgcCwgaSwgcG9pbnRzKTtcbiAgICArK2k7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IHggPT4gKCkgPT4geDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERyYWdFdmVudCh0eXBlLCB7XG4gIHNvdXJjZUV2ZW50LFxuICBzdWJqZWN0LFxuICB0YXJnZXQsXG4gIGlkZW50aWZpZXIsXG4gIGFjdGl2ZSxcbiAgeCwgeSwgZHgsIGR5LFxuICBkaXNwYXRjaFxufSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgdHlwZToge3ZhbHVlOiB0eXBlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIHNvdXJjZUV2ZW50OiB7dmFsdWU6IHNvdXJjZUV2ZW50LCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIHN1YmplY3Q6IHt2YWx1ZTogc3ViamVjdCwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICB0YXJnZXQ6IHt2YWx1ZTogdGFyZ2V0LCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIGlkZW50aWZpZXI6IHt2YWx1ZTogaWRlbnRpZmllciwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICBhY3RpdmU6IHt2YWx1ZTogYWN0aXZlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIHg6IHt2YWx1ZTogeCwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICB5OiB7dmFsdWU6IHksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgZHg6IHt2YWx1ZTogZHgsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgZHk6IHt2YWx1ZTogZHksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgXzoge3ZhbHVlOiBkaXNwYXRjaH1cbiAgfSk7XG59XG5cbkRyYWdFdmVudC5wcm90b3R5cGUub24gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHZhbHVlID0gdGhpcy5fLm9uLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHZhbHVlID09PSB0aGlzLl8gPyB0aGlzIDogdmFsdWU7XG59O1xuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge3NlbGVjdCwgcG9pbnRlcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IG5vZHJhZywge3llc2RyYWd9IGZyb20gXCIuL25vZHJhZy5qc1wiO1xuaW1wb3J0IG5vZXZlbnQsIHtub25wYXNzaXZlLCBub25wYXNzaXZlY2FwdHVyZSwgbm9wcm9wYWdhdGlvbn0gZnJvbSBcIi4vbm9ldmVudC5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgRHJhZ0V2ZW50IGZyb20gXCIuL2V2ZW50LmpzXCI7XG5cbi8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuZnVuY3Rpb24gZGVmYXVsdEZpbHRlcihldmVudCkge1xuICByZXR1cm4gIWV2ZW50LmN0cmxLZXkgJiYgIWV2ZW50LmJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdENvbnRhaW5lcigpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFN1YmplY3QoZXZlbnQsIGQpIHtcbiAgcmV0dXJuIGQgPT0gbnVsbCA/IHt4OiBldmVudC54LCB5OiBldmVudC55fSA6IGQ7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUb3VjaGFibGUoKSB7XG4gIHJldHVybiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgfHwgKFwib250b3VjaHN0YXJ0XCIgaW4gdGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgZmlsdGVyID0gZGVmYXVsdEZpbHRlcixcbiAgICAgIGNvbnRhaW5lciA9IGRlZmF1bHRDb250YWluZXIsXG4gICAgICBzdWJqZWN0ID0gZGVmYXVsdFN1YmplY3QsXG4gICAgICB0b3VjaGFibGUgPSBkZWZhdWx0VG91Y2hhYmxlLFxuICAgICAgZ2VzdHVyZXMgPSB7fSxcbiAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJkcmFnXCIsIFwiZW5kXCIpLFxuICAgICAgYWN0aXZlID0gMCxcbiAgICAgIG1vdXNlZG93bngsXG4gICAgICBtb3VzZWRvd255LFxuICAgICAgbW91c2Vtb3ZpbmcsXG4gICAgICB0b3VjaGVuZGluZyxcbiAgICAgIGNsaWNrRGlzdGFuY2UyID0gMDtcblxuICBmdW5jdGlvbiBkcmFnKHNlbGVjdGlvbikge1xuICAgIHNlbGVjdGlvblxuICAgICAgICAub24oXCJtb3VzZWRvd24uZHJhZ1wiLCBtb3VzZWRvd25lZClcbiAgICAgIC5maWx0ZXIodG91Y2hhYmxlKVxuICAgICAgICAub24oXCJ0b3VjaHN0YXJ0LmRyYWdcIiwgdG91Y2hzdGFydGVkKVxuICAgICAgICAub24oXCJ0b3VjaG1vdmUuZHJhZ1wiLCB0b3VjaG1vdmVkLCBub25wYXNzaXZlKVxuICAgICAgICAub24oXCJ0b3VjaGVuZC5kcmFnIHRvdWNoY2FuY2VsLmRyYWdcIiwgdG91Y2hlbmRlZClcbiAgICAgICAgLnN0eWxlKFwidG91Y2gtYWN0aW9uXCIsIFwibm9uZVwiKVxuICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW91c2Vkb3duZWQoZXZlbnQsIGQpIHtcbiAgICBpZiAodG91Y2hlbmRpbmcgfHwgIWZpbHRlci5jYWxsKHRoaXMsIGV2ZW50LCBkKSkgcmV0dXJuO1xuICAgIHZhciBnZXN0dXJlID0gYmVmb3Jlc3RhcnQodGhpcywgY29udGFpbmVyLmNhbGwodGhpcywgZXZlbnQsIGQpLCBldmVudCwgZCwgXCJtb3VzZVwiKTtcbiAgICBpZiAoIWdlc3R1cmUpIHJldHVybjtcbiAgICBzZWxlY3QoZXZlbnQudmlldylcbiAgICAgIC5vbihcIm1vdXNlbW92ZS5kcmFnXCIsIG1vdXNlbW92ZWQsIG5vbnBhc3NpdmVjYXB0dXJlKVxuICAgICAgLm9uKFwibW91c2V1cC5kcmFnXCIsIG1vdXNldXBwZWQsIG5vbnBhc3NpdmVjYXB0dXJlKTtcbiAgICBub2RyYWcoZXZlbnQudmlldyk7XG4gICAgbm9wcm9wYWdhdGlvbihldmVudCk7XG4gICAgbW91c2Vtb3ZpbmcgPSBmYWxzZTtcbiAgICBtb3VzZWRvd254ID0gZXZlbnQuY2xpZW50WDtcbiAgICBtb3VzZWRvd255ID0gZXZlbnQuY2xpZW50WTtcbiAgICBnZXN0dXJlKFwic3RhcnRcIiwgZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW91c2Vtb3ZlZChldmVudCkge1xuICAgIG5vZXZlbnQoZXZlbnQpO1xuICAgIGlmICghbW91c2Vtb3ZpbmcpIHtcbiAgICAgIHZhciBkeCA9IGV2ZW50LmNsaWVudFggLSBtb3VzZWRvd254LCBkeSA9IGV2ZW50LmNsaWVudFkgLSBtb3VzZWRvd255O1xuICAgICAgbW91c2Vtb3ZpbmcgPSBkeCAqIGR4ICsgZHkgKiBkeSA+IGNsaWNrRGlzdGFuY2UyO1xuICAgIH1cbiAgICBnZXN0dXJlcy5tb3VzZShcImRyYWdcIiwgZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW91c2V1cHBlZChldmVudCkge1xuICAgIHNlbGVjdChldmVudC52aWV3KS5vbihcIm1vdXNlbW92ZS5kcmFnIG1vdXNldXAuZHJhZ1wiLCBudWxsKTtcbiAgICB5ZXNkcmFnKGV2ZW50LnZpZXcsIG1vdXNlbW92aW5nKTtcbiAgICBub2V2ZW50KGV2ZW50KTtcbiAgICBnZXN0dXJlcy5tb3VzZShcImVuZFwiLCBldmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaHN0YXJ0ZWQoZXZlbnQsIGQpIHtcbiAgICBpZiAoIWZpbHRlci5jYWxsKHRoaXMsIGV2ZW50LCBkKSkgcmV0dXJuO1xuICAgIHZhciB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIGMgPSBjb250YWluZXIuY2FsbCh0aGlzLCBldmVudCwgZCksXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgZ2VzdHVyZTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChnZXN0dXJlID0gYmVmb3Jlc3RhcnQodGhpcywgYywgZXZlbnQsIGQsIHRvdWNoZXNbaV0uaWRlbnRpZmllciwgdG91Y2hlc1tpXSkpIHtcbiAgICAgICAgbm9wcm9wYWdhdGlvbihldmVudCk7XG4gICAgICAgIGdlc3R1cmUoXCJzdGFydFwiLCBldmVudCwgdG91Y2hlc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2htb3ZlZChldmVudCkge1xuICAgIHZhciB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgZ2VzdHVyZTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChnZXN0dXJlID0gZ2VzdHVyZXNbdG91Y2hlc1tpXS5pZGVudGlmaWVyXSkge1xuICAgICAgICBub2V2ZW50KGV2ZW50KTtcbiAgICAgICAgZ2VzdHVyZShcImRyYWdcIiwgZXZlbnQsIHRvdWNoZXNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoZW5kZWQoZXZlbnQpIHtcbiAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIDUwMCk7IC8vIEdob3N0IGNsaWNrcyBhcmUgZGVsYXllZCFcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoZ2VzdHVyZSA9IGdlc3R1cmVzW3RvdWNoZXNbaV0uaWRlbnRpZmllcl0pIHtcbiAgICAgICAgbm9wcm9wYWdhdGlvbihldmVudCk7XG4gICAgICAgIGdlc3R1cmUoXCJlbmRcIiwgZXZlbnQsIHRvdWNoZXNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGJlZm9yZXN0YXJ0KHRoYXQsIGNvbnRhaW5lciwgZXZlbnQsIGQsIGlkZW50aWZpZXIsIHRvdWNoKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gbGlzdGVuZXJzLmNvcHkoKSxcbiAgICAgICAgcCA9IHBvaW50ZXIodG91Y2ggfHwgZXZlbnQsIGNvbnRhaW5lciksIGR4LCBkeSxcbiAgICAgICAgcztcblxuICAgIGlmICgocyA9IHN1YmplY3QuY2FsbCh0aGF0LCBuZXcgRHJhZ0V2ZW50KFwiYmVmb3Jlc3RhcnRcIiwge1xuICAgICAgICBzb3VyY2VFdmVudDogZXZlbnQsXG4gICAgICAgIHRhcmdldDogZHJhZyxcbiAgICAgICAgaWRlbnRpZmllcixcbiAgICAgICAgYWN0aXZlLFxuICAgICAgICB4OiBwWzBdLFxuICAgICAgICB5OiBwWzFdLFxuICAgICAgICBkeDogMCxcbiAgICAgICAgZHk6IDAsXG4gICAgICAgIGRpc3BhdGNoXG4gICAgICB9KSwgZCkpID09IG51bGwpIHJldHVybjtcblxuICAgIGR4ID0gcy54IC0gcFswXSB8fCAwO1xuICAgIGR5ID0gcy55IC0gcFsxXSB8fCAwO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGdlc3R1cmUodHlwZSwgZXZlbnQsIHRvdWNoKSB7XG4gICAgICB2YXIgcDAgPSBwLCBuO1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJzdGFydFwiOiBnZXN0dXJlc1tpZGVudGlmaWVyXSA9IGdlc3R1cmUsIG4gPSBhY3RpdmUrKzsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJlbmRcIjogZGVsZXRlIGdlc3R1cmVzW2lkZW50aWZpZXJdLCAtLWFjdGl2ZTsgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgICBjYXNlIFwiZHJhZ1wiOiBwID0gcG9pbnRlcih0b3VjaCB8fCBldmVudCwgY29udGFpbmVyKSwgbiA9IGFjdGl2ZTsgYnJlYWs7XG4gICAgICB9XG4gICAgICBkaXNwYXRjaC5jYWxsKFxuICAgICAgICB0eXBlLFxuICAgICAgICB0aGF0LFxuICAgICAgICBuZXcgRHJhZ0V2ZW50KHR5cGUsIHtcbiAgICAgICAgICBzb3VyY2VFdmVudDogZXZlbnQsXG4gICAgICAgICAgc3ViamVjdDogcyxcbiAgICAgICAgICB0YXJnZXQ6IGRyYWcsXG4gICAgICAgICAgaWRlbnRpZmllcixcbiAgICAgICAgICBhY3RpdmU6IG4sXG4gICAgICAgICAgeDogcFswXSArIGR4LFxuICAgICAgICAgIHk6IHBbMV0gKyBkeSxcbiAgICAgICAgICBkeDogcFswXSAtIHAwWzBdLFxuICAgICAgICAgIGR5OiBwWzFdIC0gcDBbMV0sXG4gICAgICAgICAgZGlzcGF0Y2hcbiAgICAgICAgfSksXG4gICAgICAgIGRcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuXG4gIGRyYWcuZmlsdGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgZHJhZykgOiBmaWx0ZXI7XG4gIH07XG5cbiAgZHJhZy5jb250YWluZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29udGFpbmVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChfKSwgZHJhZykgOiBjb250YWluZXI7XG4gIH07XG5cbiAgZHJhZy5zdWJqZWN0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN1YmplY3QgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KF8pLCBkcmFnKSA6IHN1YmplY3Q7XG4gIH07XG5cbiAgZHJhZy50b3VjaGFibGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodG91Y2hhYmxlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBkcmFnKSA6IHRvdWNoYWJsZTtcbiAgfTtcblxuICBkcmFnLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IGRyYWcgOiB2YWx1ZTtcbiAgfTtcblxuICBkcmFnLmNsaWNrRGlzdGFuY2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xpY2tEaXN0YW5jZTIgPSAoXyA9ICtfKSAqIF8sIGRyYWcpIDogTWF0aC5zcXJ0KGNsaWNrRGlzdGFuY2UyKTtcbiAgfTtcblxuICByZXR1cm4gZHJhZztcbn1cbiIsInZhciBFT0wgPSB7fSxcbiAgICBFT0YgPSB7fSxcbiAgICBRVU9URSA9IDM0LFxuICAgIE5FV0xJTkUgPSAxMCxcbiAgICBSRVRVUk4gPSAxMztcblxuZnVuY3Rpb24gb2JqZWN0Q29udmVydGVyKGNvbHVtbnMpIHtcbiAgcmV0dXJuIG5ldyBGdW5jdGlvbihcImRcIiwgXCJyZXR1cm4ge1wiICsgY29sdW1ucy5tYXAoZnVuY3Rpb24obmFtZSwgaSkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShuYW1lKSArIFwiOiBkW1wiICsgaSArIFwiXSB8fCBcXFwiXFxcIlwiO1xuICB9KS5qb2luKFwiLFwiKSArIFwifVwiKTtcbn1cblxuZnVuY3Rpb24gY3VzdG9tQ29udmVydGVyKGNvbHVtbnMsIGYpIHtcbiAgdmFyIG9iamVjdCA9IG9iamVjdENvbnZlcnRlcihjb2x1bW5zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgIHJldHVybiBmKG9iamVjdChyb3cpLCBpLCBjb2x1bW5zKTtcbiAgfTtcbn1cblxuLy8gQ29tcHV0ZSB1bmlxdWUgY29sdW1ucyBpbiBvcmRlciBvZiBkaXNjb3ZlcnkuXG5mdW5jdGlvbiBpbmZlckNvbHVtbnMocm93cykge1xuICB2YXIgY29sdW1uU2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgIGNvbHVtbnMgPSBbXTtcblxuICByb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KSB7XG4gICAgZm9yICh2YXIgY29sdW1uIGluIHJvdykge1xuICAgICAgaWYgKCEoY29sdW1uIGluIGNvbHVtblNldCkpIHtcbiAgICAgICAgY29sdW1ucy5wdXNoKGNvbHVtblNldFtjb2x1bW5dID0gY29sdW1uKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb2x1bW5zO1xufVxuXG5mdW5jdGlvbiBwYWQodmFsdWUsIHdpZHRoKSB7XG4gIHZhciBzID0gdmFsdWUgKyBcIlwiLCBsZW5ndGggPSBzLmxlbmd0aDtcbiAgcmV0dXJuIGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbigwKSArIHMgOiBzO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRZZWFyKHllYXIpIHtcbiAgcmV0dXJuIHllYXIgPCAwID8gXCItXCIgKyBwYWQoLXllYXIsIDYpXG4gICAgOiB5ZWFyID4gOTk5OSA/IFwiK1wiICsgcGFkKHllYXIsIDYpXG4gICAgOiBwYWQoeWVhciwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSkge1xuICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCksXG4gICAgICBtaW51dGVzID0gZGF0ZS5nZXRVVENNaW51dGVzKCksXG4gICAgICBzZWNvbmRzID0gZGF0ZS5nZXRVVENTZWNvbmRzKCksXG4gICAgICBtaWxsaXNlY29uZHMgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICByZXR1cm4gaXNOYU4oZGF0ZSkgPyBcIkludmFsaWQgRGF0ZVwiXG4gICAgICA6IGZvcm1hdFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpLCA0KSArIFwiLVwiICsgcGFkKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEsIDIpICsgXCItXCIgKyBwYWQoZGF0ZS5nZXRVVENEYXRlKCksIDIpXG4gICAgICArIChtaWxsaXNlY29uZHMgPyBcIlRcIiArIHBhZChob3VycywgMikgKyBcIjpcIiArIHBhZChtaW51dGVzLCAyKSArIFwiOlwiICsgcGFkKHNlY29uZHMsIDIpICsgXCIuXCIgKyBwYWQobWlsbGlzZWNvbmRzLCAzKSArIFwiWlwiXG4gICAgICA6IHNlY29uZHMgPyBcIlRcIiArIHBhZChob3VycywgMikgKyBcIjpcIiArIHBhZChtaW51dGVzLCAyKSArIFwiOlwiICsgcGFkKHNlY29uZHMsIDIpICsgXCJaXCJcbiAgICAgIDogbWludXRlcyB8fCBob3VycyA/IFwiVFwiICsgcGFkKGhvdXJzLCAyKSArIFwiOlwiICsgcGFkKG1pbnV0ZXMsIDIpICsgXCJaXCJcbiAgICAgIDogXCJcIik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRlbGltaXRlcikge1xuICB2YXIgcmVGb3JtYXQgPSBuZXcgUmVnRXhwKFwiW1xcXCJcIiArIGRlbGltaXRlciArIFwiXFxuXFxyXVwiKSxcbiAgICAgIERFTElNSVRFUiA9IGRlbGltaXRlci5jaGFyQ29kZUF0KDApO1xuXG4gIGZ1bmN0aW9uIHBhcnNlKHRleHQsIGYpIHtcbiAgICB2YXIgY29udmVydCwgY29sdW1ucywgcm93cyA9IHBhcnNlUm93cyh0ZXh0LCBmdW5jdGlvbihyb3csIGkpIHtcbiAgICAgIGlmIChjb252ZXJ0KSByZXR1cm4gY29udmVydChyb3csIGkgLSAxKTtcbiAgICAgIGNvbHVtbnMgPSByb3csIGNvbnZlcnQgPSBmID8gY3VzdG9tQ29udmVydGVyKHJvdywgZikgOiBvYmplY3RDb252ZXJ0ZXIocm93KTtcbiAgICB9KTtcbiAgICByb3dzLmNvbHVtbnMgPSBjb2x1bW5zIHx8IFtdO1xuICAgIHJldHVybiByb3dzO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VSb3dzKHRleHQsIGYpIHtcbiAgICB2YXIgcm93cyA9IFtdLCAvLyBvdXRwdXQgcm93c1xuICAgICAgICBOID0gdGV4dC5sZW5ndGgsXG4gICAgICAgIEkgPSAwLCAvLyBjdXJyZW50IGNoYXJhY3RlciBpbmRleFxuICAgICAgICBuID0gMCwgLy8gY3VycmVudCBsaW5lIG51bWJlclxuICAgICAgICB0LCAvLyBjdXJyZW50IHRva2VuXG4gICAgICAgIGVvZiA9IE4gPD0gMCwgLy8gY3VycmVudCB0b2tlbiBmb2xsb3dlZCBieSBFT0Y/XG4gICAgICAgIGVvbCA9IGZhbHNlOyAvLyBjdXJyZW50IHRva2VuIGZvbGxvd2VkIGJ5IEVPTD9cblxuICAgIC8vIFN0cmlwIHRoZSB0cmFpbGluZyBuZXdsaW5lLlxuICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoTiAtIDEpID09PSBORVdMSU5FKSAtLU47XG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChOIC0gMSkgPT09IFJFVFVSTikgLS1OO1xuXG4gICAgZnVuY3Rpb24gdG9rZW4oKSB7XG4gICAgICBpZiAoZW9mKSByZXR1cm4gRU9GO1xuICAgICAgaWYgKGVvbCkgcmV0dXJuIGVvbCA9IGZhbHNlLCBFT0w7XG5cbiAgICAgIC8vIFVuZXNjYXBlIHF1b3Rlcy5cbiAgICAgIHZhciBpLCBqID0gSSwgYztcbiAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaikgPT09IFFVT1RFKSB7XG4gICAgICAgIHdoaWxlIChJKysgPCBOICYmIHRleHQuY2hhckNvZGVBdChJKSAhPT0gUVVPVEUgfHwgdGV4dC5jaGFyQ29kZUF0KCsrSSkgPT09IFFVT1RFKTtcbiAgICAgICAgaWYgKChpID0gSSkgPj0gTikgZW9mID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoKGMgPSB0ZXh0LmNoYXJDb2RlQXQoSSsrKSkgPT09IE5FV0xJTkUpIGVvbCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFJFVFVSTikgeyBlb2wgPSB0cnVlOyBpZiAodGV4dC5jaGFyQ29kZUF0KEkpID09PSBORVdMSU5FKSArK0k7IH1cbiAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiArIDEsIGkgLSAxKS5yZXBsYWNlKC9cIlwiL2csIFwiXFxcIlwiKTtcbiAgICAgIH1cblxuICAgICAgLy8gRmluZCBuZXh0IGRlbGltaXRlciBvciBuZXdsaW5lLlxuICAgICAgd2hpbGUgKEkgPCBOKSB7XG4gICAgICAgIGlmICgoYyA9IHRleHQuY2hhckNvZGVBdChpID0gSSsrKSkgPT09IE5FV0xJTkUpIGVvbCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFJFVFVSTikgeyBlb2wgPSB0cnVlOyBpZiAodGV4dC5jaGFyQ29kZUF0KEkpID09PSBORVdMSU5FKSArK0k7IH1cbiAgICAgICAgZWxzZSBpZiAoYyAhPT0gREVMSU1JVEVSKSBjb250aW51ZTtcbiAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiwgaSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJldHVybiBsYXN0IHRva2VuIGJlZm9yZSBFT0YuXG4gICAgICByZXR1cm4gZW9mID0gdHJ1ZSwgdGV4dC5zbGljZShqLCBOKTtcbiAgICB9XG5cbiAgICB3aGlsZSAoKHQgPSB0b2tlbigpKSAhPT0gRU9GKSB7XG4gICAgICB2YXIgcm93ID0gW107XG4gICAgICB3aGlsZSAodCAhPT0gRU9MICYmIHQgIT09IEVPRikgcm93LnB1c2godCksIHQgPSB0b2tlbigpO1xuICAgICAgaWYgKGYgJiYgKHJvdyA9IGYocm93LCBuKyspKSA9PSBudWxsKSBjb250aW51ZTtcbiAgICAgIHJvd3MucHVzaChyb3cpO1xuICAgIH1cblxuICAgIHJldHVybiByb3dzO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJlZm9ybWF0Qm9keShyb3dzLCBjb2x1bW5zKSB7XG4gICAgcmV0dXJuIHJvd3MubWFwKGZ1bmN0aW9uKHJvdykge1xuICAgICAgcmV0dXJuIGNvbHVtbnMubWFwKGZ1bmN0aW9uKGNvbHVtbikge1xuICAgICAgICByZXR1cm4gZm9ybWF0VmFsdWUocm93W2NvbHVtbl0pO1xuICAgICAgfSkuam9pbihkZWxpbWl0ZXIpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0KHJvd3MsIGNvbHVtbnMpIHtcbiAgICBpZiAoY29sdW1ucyA9PSBudWxsKSBjb2x1bW5zID0gaW5mZXJDb2x1bW5zKHJvd3MpO1xuICAgIHJldHVybiBbY29sdW1ucy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKV0uY29uY2F0KHByZWZvcm1hdEJvZHkocm93cywgY29sdW1ucykpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRCb2R5KHJvd3MsIGNvbHVtbnMpIHtcbiAgICBpZiAoY29sdW1ucyA9PSBudWxsKSBjb2x1bW5zID0gaW5mZXJDb2x1bW5zKHJvd3MpO1xuICAgIHJldHVybiBwcmVmb3JtYXRCb2R5KHJvd3MsIGNvbHVtbnMpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3dzKHJvd3MpIHtcbiAgICByZXR1cm4gcm93cy5tYXAoZm9ybWF0Um93KS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0Um93KHJvdykge1xuICAgIHJldHVybiByb3cubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIlxuICAgICAgICA6IHZhbHVlIGluc3RhbmNlb2YgRGF0ZSA/IGZvcm1hdERhdGUodmFsdWUpXG4gICAgICAgIDogcmVGb3JtYXQudGVzdCh2YWx1ZSArPSBcIlwiKSA/IFwiXFxcIlwiICsgdmFsdWUucmVwbGFjZSgvXCIvZywgXCJcXFwiXFxcIlwiKSArIFwiXFxcIlwiXG4gICAgICAgIDogdmFsdWU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhcnNlOiBwYXJzZSxcbiAgICBwYXJzZVJvd3M6IHBhcnNlUm93cyxcbiAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICBmb3JtYXRCb2R5OiBmb3JtYXRCb2R5LFxuICAgIGZvcm1hdFJvd3M6IGZvcm1hdFJvd3MsXG4gICAgZm9ybWF0Um93OiBmb3JtYXRSb3csXG4gICAgZm9ybWF0VmFsdWU6IGZvcm1hdFZhbHVlXG4gIH07XG59XG4iLCJpbXBvcnQgZHN2IGZyb20gXCIuL2Rzdi5qc1wiO1xuXG52YXIgY3N2ID0gZHN2KFwiLFwiKTtcblxuZXhwb3J0IHZhciBjc3ZQYXJzZSA9IGNzdi5wYXJzZTtcbmV4cG9ydCB2YXIgY3N2UGFyc2VSb3dzID0gY3N2LnBhcnNlUm93cztcbmV4cG9ydCB2YXIgY3N2Rm9ybWF0ID0gY3N2LmZvcm1hdDtcbmV4cG9ydCB2YXIgY3N2Rm9ybWF0Qm9keSA9IGNzdi5mb3JtYXRCb2R5O1xuZXhwb3J0IHZhciBjc3ZGb3JtYXRSb3dzID0gY3N2LmZvcm1hdFJvd3M7XG5leHBvcnQgdmFyIGNzdkZvcm1hdFJvdyA9IGNzdi5mb3JtYXRSb3c7XG5leHBvcnQgdmFyIGNzdkZvcm1hdFZhbHVlID0gY3N2LmZvcm1hdFZhbHVlO1xuIiwiaW1wb3J0IGRzdiBmcm9tIFwiLi9kc3YuanNcIjtcblxudmFyIHRzdiA9IGRzdihcIlxcdFwiKTtcblxuZXhwb3J0IHZhciB0c3ZQYXJzZSA9IHRzdi5wYXJzZTtcbmV4cG9ydCB2YXIgdHN2UGFyc2VSb3dzID0gdHN2LnBhcnNlUm93cztcbmV4cG9ydCB2YXIgdHN2Rm9ybWF0ID0gdHN2LmZvcm1hdDtcbmV4cG9ydCB2YXIgdHN2Rm9ybWF0Qm9keSA9IHRzdi5mb3JtYXRCb2R5O1xuZXhwb3J0IHZhciB0c3ZGb3JtYXRSb3dzID0gdHN2LmZvcm1hdFJvd3M7XG5leHBvcnQgdmFyIHRzdkZvcm1hdFJvdyA9IHRzdi5mb3JtYXRSb3c7XG5leHBvcnQgdmFyIHRzdkZvcm1hdFZhbHVlID0gdHN2LmZvcm1hdFZhbHVlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXV0b1R5cGUob2JqZWN0KSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XS50cmltKCksIG51bWJlciwgbTtcbiAgICBpZiAoIXZhbHVlKSB2YWx1ZSA9IG51bGw7XG4gICAgZWxzZSBpZiAodmFsdWUgPT09IFwidHJ1ZVwiKSB2YWx1ZSA9IHRydWU7XG4gICAgZWxzZSBpZiAodmFsdWUgPT09IFwiZmFsc2VcIikgdmFsdWUgPSBmYWxzZTtcbiAgICBlbHNlIGlmICh2YWx1ZSA9PT0gXCJOYU5cIikgdmFsdWUgPSBOYU47XG4gICAgZWxzZSBpZiAoIWlzTmFOKG51bWJlciA9ICt2YWx1ZSkpIHZhbHVlID0gbnVtYmVyO1xuICAgIGVsc2UgaWYgKG0gPSB2YWx1ZS5tYXRjaCgvXihbLStdXFxkezJ9KT9cXGR7NH0oLVxcZHsyfSgtXFxkezJ9KT8pPyhUXFxkezJ9OlxcZHsyfSg6XFxkezJ9KFxcLlxcZHszfSk/KT8oWnxbLStdXFxkezJ9OlxcZHsyfSk/KT8kLykpIHtcbiAgICAgIGlmIChmaXh0eiAmJiAhIW1bNF0gJiYgIW1bN10pIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvLS9nLCBcIi9cIikucmVwbGFjZSgvVC8sIFwiIFwiKTtcbiAgICAgIHZhbHVlID0gbmV3IERhdGUodmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIGNvbnRpbnVlO1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLWRzdi9pc3N1ZXMvNDVcbmNvbnN0IGZpeHR6ID0gbmV3IERhdGUoXCIyMDE5LTAxLTAxVDAwOjAwXCIpLmdldEhvdXJzKCkgfHwgbmV3IERhdGUoXCIyMDE5LTA3LTAxVDAwOjAwXCIpLmdldEhvdXJzKCk7IiwiZXhwb3J0IGNvbnN0IGxpbmVhciA9IHQgPT4gK3Q7XG4iLCJleHBvcnQgZnVuY3Rpb24gcXVhZEluKHQpIHtcbiAgcmV0dXJuIHQgKiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVhZE91dCh0KSB7XG4gIHJldHVybiB0ICogKDIgLSB0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHF1YWRJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IHQgKiB0IDogLS10ICogKDIgLSB0KSArIDEpIC8gMjtcbn1cbiIsInZhciBleHBvbmVudCA9IDM7XG5cbmV4cG9ydCB2YXIgcG9seUluID0gKGZ1bmN0aW9uIGN1c3RvbShlKSB7XG4gIGUgPSArZTtcblxuICBmdW5jdGlvbiBwb2x5SW4odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyh0LCBlKTtcbiAgfVxuXG4gIHBvbHlJbi5leHBvbmVudCA9IGN1c3RvbTtcblxuICByZXR1cm4gcG9seUluO1xufSkoZXhwb25lbnQpO1xuXG5leHBvcnQgdmFyIHBvbHlPdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGUpIHtcbiAgZSA9ICtlO1xuXG4gIGZ1bmN0aW9uIHBvbHlPdXQodCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5wb3coMSAtIHQsIGUpO1xuICB9XG5cbiAgcG9seU91dC5leHBvbmVudCA9IGN1c3RvbTtcblxuICByZXR1cm4gcG9seU91dDtcbn0pKGV4cG9uZW50KTtcblxuZXhwb3J0IHZhciBwb2x5SW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGUpIHtcbiAgZSA9ICtlO1xuXG4gIGZ1bmN0aW9uIHBvbHlJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gTWF0aC5wb3codCwgZSkgOiAyIC0gTWF0aC5wb3coMiAtIHQsIGUpKSAvIDI7XG4gIH1cblxuICBwb2x5SW5PdXQuZXhwb25lbnQgPSBjdXN0b207XG5cbiAgcmV0dXJuIHBvbHlJbk91dDtcbn0pKGV4cG9uZW50KTtcbiIsInZhciBwaSA9IE1hdGguUEksXG4gICAgaGFsZlBpID0gcGkgLyAyO1xuXG5leHBvcnQgZnVuY3Rpb24gc2luSW4odCkge1xuICByZXR1cm4gKCt0ID09PSAxKSA/IDEgOiAxIC0gTWF0aC5jb3ModCAqIGhhbGZQaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5PdXQodCkge1xuICByZXR1cm4gTWF0aC5zaW4odCAqIGhhbGZQaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5Jbk91dCh0KSB7XG4gIHJldHVybiAoMSAtIE1hdGguY29zKHBpICogdCkpIC8gMjtcbn1cbiIsIi8vIHRwbXQgaXMgdHdvIHBvd2VyIG1pbnVzIHRlbiB0aW1lcyB0IHNjYWxlZCB0byBbMCwxXVxuZXhwb3J0IGZ1bmN0aW9uIHRwbXQoeCkge1xuICByZXR1cm4gKE1hdGgucG93KDIsIC0xMCAqIHgpIC0gMC4wMDA5NzY1NjI1KSAqIDEuMDAwOTc3NTE3MTA2NTQ5NDtcbn1cbiIsImltcG9ydCB7dHBtdH0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZXhwSW4odCkge1xuICByZXR1cm4gdHBtdCgxIC0gK3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXhwT3V0KHQpIHtcbiAgcmV0dXJuIDEgLSB0cG10KHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXhwSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyB0cG10KDEgLSB0KSA6IDIgLSB0cG10KHQgLSAxKSkgLyAyO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGNpcmNsZUluKHQpIHtcbiAgcmV0dXJuIDEgLSBNYXRoLnNxcnQoMSAtIHQgKiB0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNpcmNsZU91dCh0KSB7XG4gIHJldHVybiBNYXRoLnNxcnQoMSAtIC0tdCAqIHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2lyY2xlSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyAxIC0gTWF0aC5zcXJ0KDEgLSB0ICogdCkgOiBNYXRoLnNxcnQoMSAtICh0IC09IDIpICogdCkgKyAxKSAvIDI7XG59XG4iLCJ2YXIgYjEgPSA0IC8gMTEsXG4gICAgYjIgPSA2IC8gMTEsXG4gICAgYjMgPSA4IC8gMTEsXG4gICAgYjQgPSAzIC8gNCxcbiAgICBiNSA9IDkgLyAxMSxcbiAgICBiNiA9IDEwIC8gMTEsXG4gICAgYjcgPSAxNSAvIDE2LFxuICAgIGI4ID0gMjEgLyAyMixcbiAgICBiOSA9IDYzIC8gNjQsXG4gICAgYjAgPSAxIC8gYjEgLyBiMTtcblxuZXhwb3J0IGZ1bmN0aW9uIGJvdW5jZUluKHQpIHtcbiAgcmV0dXJuIDEgLSBib3VuY2VPdXQoMSAtIHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYm91bmNlT3V0KHQpIHtcbiAgcmV0dXJuICh0ID0gK3QpIDwgYjEgPyBiMCAqIHQgKiB0IDogdCA8IGIzID8gYjAgKiAodCAtPSBiMikgKiB0ICsgYjQgOiB0IDwgYjYgPyBiMCAqICh0IC09IGI1KSAqIHQgKyBiNyA6IGIwICogKHQgLT0gYjgpICogdCArIGI5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYm91bmNlSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyAxIC0gYm91bmNlT3V0KDEgLSB0KSA6IGJvdW5jZU91dCh0IC0gMSkgKyAxKSAvIDI7XG59XG4iLCJ2YXIgb3ZlcnNob290ID0gMS43MDE1ODtcblxuZXhwb3J0IHZhciBiYWNrSW4gPSAoZnVuY3Rpb24gY3VzdG9tKHMpIHtcbiAgcyA9ICtzO1xuXG4gIGZ1bmN0aW9uIGJhY2tJbih0KSB7XG4gICAgcmV0dXJuICh0ID0gK3QpICogdCAqIChzICogKHQgLSAxKSArIHQpO1xuICB9XG5cbiAgYmFja0luLm92ZXJzaG9vdCA9IGN1c3RvbTtcblxuICByZXR1cm4gYmFja0luO1xufSkob3ZlcnNob290KTtcblxuZXhwb3J0IHZhciBiYWNrT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gIHMgPSArcztcblxuICBmdW5jdGlvbiBiYWNrT3V0KHQpIHtcbiAgICByZXR1cm4gLS10ICogdCAqICgodCArIDEpICogcyArIHQpICsgMTtcbiAgfVxuXG4gIGJhY2tPdXQub3ZlcnNob290ID0gY3VzdG9tO1xuXG4gIHJldHVybiBiYWNrT3V0O1xufSkob3ZlcnNob290KTtcblxuZXhwb3J0IHZhciBiYWNrSW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKHMpIHtcbiAgcyA9ICtzO1xuXG4gIGZ1bmN0aW9uIGJhY2tJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCAqPSAyKSA8IDEgPyB0ICogdCAqICgocyArIDEpICogdCAtIHMpIDogKHQgLT0gMikgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAyKSAvIDI7XG4gIH1cblxuICBiYWNrSW5PdXQub3ZlcnNob290ID0gY3VzdG9tO1xuXG4gIHJldHVybiBiYWNrSW5PdXQ7XG59KShvdmVyc2hvb3QpO1xuIiwiaW1wb3J0IHt0cG10fSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbnZhciB0YXUgPSAyICogTWF0aC5QSSxcbiAgICBhbXBsaXR1ZGUgPSAxLFxuICAgIHBlcmlvZCA9IDAuMztcblxuZXhwb3J0IHZhciBlbGFzdGljSW4gPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luKHQpIHtcbiAgICByZXR1cm4gYSAqIHRwbXQoLSgtLXQpKSAqIE1hdGguc2luKChzIC0gdCkgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNJbi5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbi5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbjtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuZXhwb3J0IHZhciBlbGFzdGljT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNPdXQodCkge1xuICAgIHJldHVybiAxIC0gYSAqIHRwbXQodCA9ICt0KSAqIE1hdGguc2luKCh0ICsgcykgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNPdXQuYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljT3V0LnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICByZXR1cm4gZWxhc3RpY091dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuZXhwb3J0IHZhciBlbGFzdGljSW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ID0gdCAqIDIgLSAxKSA8IDBcbiAgICAgICAgPyBhICogdHBtdCgtdCkgKiBNYXRoLnNpbigocyAtIHQpIC8gcClcbiAgICAgICAgOiAyIC0gYSAqIHRwbXQodCkgKiBNYXRoLnNpbigocyArIHQpIC8gcCkpIC8gMjtcbiAgfVxuXG4gIGVsYXN0aWNJbk91dC5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbk91dC5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbk91dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcbiIsImZ1bmN0aW9uIHJlc3BvbnNlQmxvYihyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgcmV0dXJuIHJlc3BvbnNlLmJsb2IoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlQmxvYik7XG59XG4iLCJmdW5jdGlvbiByZXNwb25zZUFycmF5QnVmZmVyKHJlc3BvbnNlKSB7XG4gIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXMgKyBcIiBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICByZXR1cm4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlQXJyYXlCdWZmZXIpO1xufVxuIiwiZnVuY3Rpb24gcmVzcG9uc2VUZXh0KHJlc3BvbnNlKSB7XG4gIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXMgKyBcIiBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gZmV0Y2goaW5wdXQsIGluaXQpLnRoZW4ocmVzcG9uc2VUZXh0KTtcbn1cbiIsImltcG9ydCB7Y3N2UGFyc2UsIGRzdkZvcm1hdCwgdHN2UGFyc2V9IGZyb20gXCJkMy1kc3ZcIjtcbmltcG9ydCB0ZXh0IGZyb20gXCIuL3RleHQuanNcIjtcblxuZnVuY3Rpb24gZHN2UGFyc2UocGFyc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBpbml0LCByb3cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgaW5pdCA9PT0gXCJmdW5jdGlvblwiKSByb3cgPSBpbml0LCBpbml0ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiB0ZXh0KGlucHV0LCBpbml0KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gcGFyc2UocmVzcG9uc2UsIHJvdyk7XG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRzdihkZWxpbWl0ZXIsIGlucHV0LCBpbml0LCByb3cpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIGluaXQgPT09IFwiZnVuY3Rpb25cIikgcm93ID0gaW5pdCwgaW5pdCA9IHVuZGVmaW5lZDtcbiAgdmFyIGZvcm1hdCA9IGRzdkZvcm1hdChkZWxpbWl0ZXIpO1xuICByZXR1cm4gdGV4dChpbnB1dCwgaW5pdCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgIHJldHVybiBmb3JtYXQucGFyc2UocmVzcG9uc2UsIHJvdyk7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIGNzdiA9IGRzdlBhcnNlKGNzdlBhcnNlKTtcbmV4cG9ydCB2YXIgdHN2ID0gZHN2UGFyc2UodHN2UGFyc2UpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZTtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5pdCkgaW1hZ2Vba2V5XSA9IGluaXRba2V5XTtcbiAgICBpbWFnZS5vbmVycm9yID0gcmVqZWN0O1xuICAgIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uKCkgeyByZXNvbHZlKGltYWdlKTsgfTtcbiAgICBpbWFnZS5zcmMgPSBpbnB1dDtcbiAgfSk7XG59XG4iLCJmdW5jdGlvbiByZXNwb25zZUpzb24ocmVzcG9uc2UpIHtcbiAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1cyArIFwiIFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwNCB8fCByZXNwb25zZS5zdGF0dXMgPT09IDIwNSkgcmV0dXJuO1xuICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gZmV0Y2goaW5wdXQsIGluaXQpLnRoZW4ocmVzcG9uc2VKc29uKTtcbn1cbiIsImltcG9ydCB0ZXh0IGZyb20gXCIuL3RleHQuanNcIjtcblxuZnVuY3Rpb24gcGFyc2VyKHR5cGUpIHtcbiAgcmV0dXJuIChpbnB1dCwgaW5pdCkgPT4gdGV4dChpbnB1dCwgaW5pdClcbiAgICAudGhlbih0ZXh0ID0+IChuZXcgRE9NUGFyc2VyKS5wYXJzZUZyb21TdHJpbmcodGV4dCwgdHlwZSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBwYXJzZXIoXCJhcHBsaWNhdGlvbi94bWxcIik7XG5cbmV4cG9ydCB2YXIgaHRtbCA9IHBhcnNlcihcInRleHQvaHRtbFwiKTtcblxuZXhwb3J0IHZhciBzdmcgPSBwYXJzZXIoXCJpbWFnZS9zdmcreG1sXCIpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgeSkge1xuICB2YXIgbm9kZXMsIHN0cmVuZ3RoID0gMTtcblxuICBpZiAoeCA9PSBudWxsKSB4ID0gMDtcbiAgaWYgKHkgPT0gbnVsbCkgeSA9IDA7XG5cbiAgZnVuY3Rpb24gZm9yY2UoKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgIG5vZGUsXG4gICAgICAgIHN4ID0gMCxcbiAgICAgICAgc3kgPSAwO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBzeCArPSBub2RlLngsIHN5ICs9IG5vZGUueTtcbiAgICB9XG5cbiAgICBmb3IgKHN4ID0gKHN4IC8gbiAtIHgpICogc3RyZW5ndGgsIHN5ID0gKHN5IC8gbiAtIHkpICogc3RyZW5ndGgsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUueCAtPSBzeCwgbm9kZS55IC09IHN5O1xuICAgIH1cbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgbm9kZXMgPSBfO1xuICB9O1xuXG4gIGZvcmNlLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9ICtfLCBmb3JjZSkgOiB4O1xuICB9O1xuXG4gIGZvcmNlLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9ICtfLCBmb3JjZSkgOiB5O1xuICB9O1xuXG4gIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gK18sIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGQpIHtcbiAgY29uc3QgeCA9ICt0aGlzLl94LmNhbGwobnVsbCwgZCksXG4gICAgICB5ID0gK3RoaXMuX3kuY2FsbChudWxsLCBkKTtcbiAgcmV0dXJuIGFkZCh0aGlzLmNvdmVyKHgsIHkpLCB4LCB5LCBkKTtcbn1cblxuZnVuY3Rpb24gYWRkKHRyZWUsIHgsIHksIGQpIHtcbiAgaWYgKGlzTmFOKHgpIHx8IGlzTmFOKHkpKSByZXR1cm4gdHJlZTsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXG5cbiAgdmFyIHBhcmVudCxcbiAgICAgIG5vZGUgPSB0cmVlLl9yb290LFxuICAgICAgbGVhZiA9IHtkYXRhOiBkfSxcbiAgICAgIHgwID0gdHJlZS5feDAsXG4gICAgICB5MCA9IHRyZWUuX3kwLFxuICAgICAgeDEgPSB0cmVlLl94MSxcbiAgICAgIHkxID0gdHJlZS5feTEsXG4gICAgICB4bSxcbiAgICAgIHltLFxuICAgICAgeHAsXG4gICAgICB5cCxcbiAgICAgIHJpZ2h0LFxuICAgICAgYm90dG9tLFxuICAgICAgaSxcbiAgICAgIGo7XG5cbiAgLy8gSWYgdGhlIHRyZWUgaXMgZW1wdHksIGluaXRpYWxpemUgdGhlIHJvb3QgYXMgYSBsZWFmLlxuICBpZiAoIW5vZGUpIHJldHVybiB0cmVlLl9yb290ID0gbGVhZiwgdHJlZTtcblxuICAvLyBGaW5kIHRoZSBleGlzdGluZyBsZWFmIGZvciB0aGUgbmV3IHBvaW50LCBvciBhZGQgaXQuXG4gIHdoaWxlIChub2RlLmxlbmd0aCkge1xuICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICBpZiAoYm90dG9tID0geSA+PSAoeW0gPSAoeTAgKyB5MSkgLyAyKSkgeTAgPSB5bTsgZWxzZSB5MSA9IHltO1xuICAgIGlmIChwYXJlbnQgPSBub2RlLCAhKG5vZGUgPSBub2RlW2kgPSBib3R0b20gPDwgMSB8IHJpZ2h0XSkpIHJldHVybiBwYXJlbnRbaV0gPSBsZWFmLCB0cmVlO1xuICB9XG5cbiAgLy8gSXMgdGhlIG5ldyBwb2ludCBpcyBleGFjdGx5IGNvaW5jaWRlbnQgd2l0aCB0aGUgZXhpc3RpbmcgcG9pbnQ/XG4gIHhwID0gK3RyZWUuX3guY2FsbChudWxsLCBub2RlLmRhdGEpO1xuICB5cCA9ICt0cmVlLl95LmNhbGwobnVsbCwgbm9kZS5kYXRhKTtcbiAgaWYgKHggPT09IHhwICYmIHkgPT09IHlwKSByZXR1cm4gbGVhZi5uZXh0ID0gbm9kZSwgcGFyZW50ID8gcGFyZW50W2ldID0gbGVhZiA6IHRyZWUuX3Jvb3QgPSBsZWFmLCB0cmVlO1xuXG4gIC8vIE90aGVyd2lzZSwgc3BsaXQgdGhlIGxlYWYgbm9kZSB1bnRpbCB0aGUgb2xkIGFuZCBuZXcgcG9pbnQgYXJlIHNlcGFyYXRlZC5cbiAgZG8ge1xuICAgIHBhcmVudCA9IHBhcmVudCA/IHBhcmVudFtpXSA9IG5ldyBBcnJheSg0KSA6IHRyZWUuX3Jvb3QgPSBuZXcgQXJyYXkoNCk7XG4gICAgaWYgKHJpZ2h0ID0geCA+PSAoeG0gPSAoeDAgKyB4MSkgLyAyKSkgeDAgPSB4bTsgZWxzZSB4MSA9IHhtO1xuICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XG4gIH0gd2hpbGUgKChpID0gYm90dG9tIDw8IDEgfCByaWdodCkgPT09IChqID0gKHlwID49IHltKSA8PCAxIHwgKHhwID49IHhtKSkpO1xuICByZXR1cm4gcGFyZW50W2pdID0gbm9kZSwgcGFyZW50W2ldID0gbGVhZiwgdHJlZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEFsbChkYXRhKSB7XG4gIHZhciBkLCBpLCBuID0gZGF0YS5sZW5ndGgsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHh6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgeXogPSBuZXcgQXJyYXkobiksXG4gICAgICB4MCA9IEluZmluaXR5LFxuICAgICAgeTAgPSBJbmZpbml0eSxcbiAgICAgIHgxID0gLUluZmluaXR5LFxuICAgICAgeTEgPSAtSW5maW5pdHk7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgcG9pbnRzIGFuZCB0aGVpciBleHRlbnQuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoaXNOYU4oeCA9ICt0aGlzLl94LmNhbGwobnVsbCwgZCA9IGRhdGFbaV0pKSB8fCBpc05hTih5ID0gK3RoaXMuX3kuY2FsbChudWxsLCBkKSkpIGNvbnRpbnVlO1xuICAgIHh6W2ldID0geDtcbiAgICB5eltpXSA9IHk7XG4gICAgaWYgKHggPCB4MCkgeDAgPSB4O1xuICAgIGlmICh4ID4geDEpIHgxID0geDtcbiAgICBpZiAoeSA8IHkwKSB5MCA9IHk7XG4gICAgaWYgKHkgPiB5MSkgeTEgPSB5O1xuICB9XG5cbiAgLy8gSWYgdGhlcmUgd2VyZSBubyAodmFsaWQpIHBvaW50cywgYWJvcnQuXG4gIGlmICh4MCA+IHgxIHx8IHkwID4geTEpIHJldHVybiB0aGlzO1xuXG4gIC8vIEV4cGFuZCB0aGUgdHJlZSB0byBjb3ZlciB0aGUgbmV3IHBvaW50cy5cbiAgdGhpcy5jb3Zlcih4MCwgeTApLmNvdmVyKHgxLCB5MSk7XG5cbiAgLy8gQWRkIHRoZSBuZXcgcG9pbnRzLlxuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgYWRkKHRoaXMsIHh6W2ldLCB5eltpXSwgZGF0YVtpXSk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHRoaXMubm9kZSA9IG5vZGU7XG4gIHRoaXMueDAgPSB4MDtcbiAgdGhpcy55MCA9IHkwO1xuICB0aGlzLngxID0geDE7XG4gIHRoaXMueTEgPSB5MTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0WChkKSB7XG4gIHJldHVybiBkWzBdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihfKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRoaXMuX3ggPSBfLCB0aGlzKSA6IHRoaXMuX3g7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZGVmYXVsdFkoZCkge1xuICByZXR1cm4gZFsxXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oXykge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGlzLl95ID0gXywgdGhpcykgOiB0aGlzLl95O1xufVxuIiwiaW1wb3J0IHRyZWVfYWRkLCB7YWRkQWxsIGFzIHRyZWVfYWRkQWxsfSBmcm9tIFwiLi9hZGQuanNcIjtcbmltcG9ydCB0cmVlX2NvdmVyIGZyb20gXCIuL2NvdmVyLmpzXCI7XG5pbXBvcnQgdHJlZV9kYXRhIGZyb20gXCIuL2RhdGEuanNcIjtcbmltcG9ydCB0cmVlX2V4dGVudCBmcm9tIFwiLi9leHRlbnQuanNcIjtcbmltcG9ydCB0cmVlX2ZpbmQgZnJvbSBcIi4vZmluZC5qc1wiO1xuaW1wb3J0IHRyZWVfcmVtb3ZlLCB7cmVtb3ZlQWxsIGFzIHRyZWVfcmVtb3ZlQWxsfSBmcm9tIFwiLi9yZW1vdmUuanNcIjtcbmltcG9ydCB0cmVlX3Jvb3QgZnJvbSBcIi4vcm9vdC5qc1wiO1xuaW1wb3J0IHRyZWVfc2l6ZSBmcm9tIFwiLi9zaXplLmpzXCI7XG5pbXBvcnQgdHJlZV92aXNpdCBmcm9tIFwiLi92aXNpdC5qc1wiO1xuaW1wb3J0IHRyZWVfdmlzaXRBZnRlciBmcm9tIFwiLi92aXNpdEFmdGVyLmpzXCI7XG5pbXBvcnQgdHJlZV94LCB7ZGVmYXVsdFh9IGZyb20gXCIuL3guanNcIjtcbmltcG9ydCB0cmVlX3ksIHtkZWZhdWx0WX0gZnJvbSBcIi4veS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBxdWFkdHJlZShub2RlcywgeCwgeSkge1xuICB2YXIgdHJlZSA9IG5ldyBRdWFkdHJlZSh4ID09IG51bGwgPyBkZWZhdWx0WCA6IHgsIHkgPT0gbnVsbCA/IGRlZmF1bHRZIDogeSwgTmFOLCBOYU4sIE5hTiwgTmFOKTtcbiAgcmV0dXJuIG5vZGVzID09IG51bGwgPyB0cmVlIDogdHJlZS5hZGRBbGwobm9kZXMpO1xufVxuXG5mdW5jdGlvbiBRdWFkdHJlZSh4LCB5LCB4MCwgeTAsIHgxLCB5MSkge1xuICB0aGlzLl94ID0geDtcbiAgdGhpcy5feSA9IHk7XG4gIHRoaXMuX3gwID0geDA7XG4gIHRoaXMuX3kwID0geTA7XG4gIHRoaXMuX3gxID0geDE7XG4gIHRoaXMuX3kxID0geTE7XG4gIHRoaXMuX3Jvb3QgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGxlYWZfY29weShsZWFmKSB7XG4gIHZhciBjb3B5ID0ge2RhdGE6IGxlYWYuZGF0YX0sIG5leHQgPSBjb3B5O1xuICB3aGlsZSAobGVhZiA9IGxlYWYubmV4dCkgbmV4dCA9IG5leHQubmV4dCA9IHtkYXRhOiBsZWFmLmRhdGF9O1xuICByZXR1cm4gY29weTtcbn1cblxudmFyIHRyZWVQcm90byA9IHF1YWR0cmVlLnByb3RvdHlwZSA9IFF1YWR0cmVlLnByb3RvdHlwZTtcblxudHJlZVByb3RvLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGNvcHkgPSBuZXcgUXVhZHRyZWUodGhpcy5feCwgdGhpcy5feSwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpLFxuICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICBub2RlcyxcbiAgICAgIGNoaWxkO1xuXG4gIGlmICghbm9kZSkgcmV0dXJuIGNvcHk7XG5cbiAgaWYgKCFub2RlLmxlbmd0aCkgcmV0dXJuIGNvcHkuX3Jvb3QgPSBsZWFmX2NvcHkobm9kZSksIGNvcHk7XG5cbiAgbm9kZXMgPSBbe3NvdXJjZTogbm9kZSwgdGFyZ2V0OiBjb3B5Ll9yb290ID0gbmV3IEFycmF5KDQpfV07XG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7ICsraSkge1xuICAgICAgaWYgKGNoaWxkID0gbm9kZS5zb3VyY2VbaV0pIHtcbiAgICAgICAgaWYgKGNoaWxkLmxlbmd0aCkgbm9kZXMucHVzaCh7c291cmNlOiBjaGlsZCwgdGFyZ2V0OiBub2RlLnRhcmdldFtpXSA9IG5ldyBBcnJheSg0KX0pO1xuICAgICAgICBlbHNlIG5vZGUudGFyZ2V0W2ldID0gbGVhZl9jb3B5KGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29weTtcbn07XG5cbnRyZWVQcm90by5hZGQgPSB0cmVlX2FkZDtcbnRyZWVQcm90by5hZGRBbGwgPSB0cmVlX2FkZEFsbDtcbnRyZWVQcm90by5jb3ZlciA9IHRyZWVfY292ZXI7XG50cmVlUHJvdG8uZGF0YSA9IHRyZWVfZGF0YTtcbnRyZWVQcm90by5leHRlbnQgPSB0cmVlX2V4dGVudDtcbnRyZWVQcm90by5maW5kID0gdHJlZV9maW5kO1xudHJlZVByb3RvLnJlbW92ZSA9IHRyZWVfcmVtb3ZlO1xudHJlZVByb3RvLnJlbW92ZUFsbCA9IHRyZWVfcmVtb3ZlQWxsO1xudHJlZVByb3RvLnJvb3QgPSB0cmVlX3Jvb3Q7XG50cmVlUHJvdG8uc2l6ZSA9IHRyZWVfc2l6ZTtcbnRyZWVQcm90by52aXNpdCA9IHRyZWVfdmlzaXQ7XG50cmVlUHJvdG8udmlzaXRBZnRlciA9IHRyZWVfdmlzaXRBZnRlcjtcbnRyZWVQcm90by54ID0gdHJlZV94O1xudHJlZVByb3RvLnkgPSB0cmVlX3k7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJhbmRvbSkge1xuICByZXR1cm4gKHJhbmRvbSgpIC0gMC41KSAqIDFlLTY7XG59XG4iLCJpbXBvcnQge3F1YWR0cmVlfSBmcm9tIFwiZDMtcXVhZHRyZWVcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IGppZ2dsZSBmcm9tIFwiLi9qaWdnbGUuanNcIjtcblxuZnVuY3Rpb24geChkKSB7XG4gIHJldHVybiBkLnggKyBkLnZ4O1xufVxuXG5mdW5jdGlvbiB5KGQpIHtcbiAgcmV0dXJuIGQueSArIGQudnk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJhZGl1cykge1xuICB2YXIgbm9kZXMsXG4gICAgICByYWRpaSxcbiAgICAgIHJhbmRvbSxcbiAgICAgIHN0cmVuZ3RoID0gMSxcbiAgICAgIGl0ZXJhdGlvbnMgPSAxO1xuXG4gIGlmICh0eXBlb2YgcmFkaXVzICE9PSBcImZ1bmN0aW9uXCIpIHJhZGl1cyA9IGNvbnN0YW50KHJhZGl1cyA9PSBudWxsID8gMSA6ICtyYWRpdXMpO1xuXG4gIGZ1bmN0aW9uIGZvcmNlKCkge1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICB0cmVlLFxuICAgICAgICBub2RlLFxuICAgICAgICB4aSxcbiAgICAgICAgeWksXG4gICAgICAgIHJpLFxuICAgICAgICByaTI7XG5cbiAgICBmb3IgKHZhciBrID0gMDsgayA8IGl0ZXJhdGlvbnM7ICsraykge1xuICAgICAgdHJlZSA9IHF1YWR0cmVlKG5vZGVzLCB4LCB5KS52aXNpdEFmdGVyKHByZXBhcmUpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIHJpID0gcmFkaWlbbm9kZS5pbmRleF0sIHJpMiA9IHJpICogcmk7XG4gICAgICAgIHhpID0gbm9kZS54ICsgbm9kZS52eDtcbiAgICAgICAgeWkgPSBub2RlLnkgKyBub2RlLnZ5O1xuICAgICAgICB0cmVlLnZpc2l0KGFwcGx5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseShxdWFkLCB4MCwgeTAsIHgxLCB5MSkge1xuICAgICAgdmFyIGRhdGEgPSBxdWFkLmRhdGEsIHJqID0gcXVhZC5yLCByID0gcmkgKyByajtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhLmluZGV4ID4gbm9kZS5pbmRleCkge1xuICAgICAgICAgIHZhciB4ID0geGkgLSBkYXRhLnggLSBkYXRhLnZ4LFxuICAgICAgICAgICAgICB5ID0geWkgLSBkYXRhLnkgLSBkYXRhLnZ5LFxuICAgICAgICAgICAgICBsID0geCAqIHggKyB5ICogeTtcbiAgICAgICAgICBpZiAobCA8IHIgKiByKSB7XG4gICAgICAgICAgICBpZiAoeCA9PT0gMCkgeCA9IGppZ2dsZShyYW5kb20pLCBsICs9IHggKiB4O1xuICAgICAgICAgICAgaWYgKHkgPT09IDApIHkgPSBqaWdnbGUocmFuZG9tKSwgbCArPSB5ICogeTtcbiAgICAgICAgICAgIGwgPSAociAtIChsID0gTWF0aC5zcXJ0KGwpKSkgLyBsICogc3RyZW5ndGg7XG4gICAgICAgICAgICBub2RlLnZ4ICs9ICh4ICo9IGwpICogKHIgPSAocmogKj0gcmopIC8gKHJpMiArIHJqKSk7XG4gICAgICAgICAgICBub2RlLnZ5ICs9ICh5ICo9IGwpICogcjtcbiAgICAgICAgICAgIGRhdGEudnggLT0geCAqIChyID0gMSAtIHIpO1xuICAgICAgICAgICAgZGF0YS52eSAtPSB5ICogcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHgwID4geGkgKyByIHx8IHgxIDwgeGkgLSByIHx8IHkwID4geWkgKyByIHx8IHkxIDwgeWkgLSByO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByZXBhcmUocXVhZCkge1xuICAgIGlmIChxdWFkLmRhdGEpIHJldHVybiBxdWFkLnIgPSByYWRpaVtxdWFkLmRhdGEuaW5kZXhdO1xuICAgIGZvciAodmFyIGkgPSBxdWFkLnIgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgICBpZiAocXVhZFtpXSAmJiBxdWFkW2ldLnIgPiBxdWFkLnIpIHtcbiAgICAgICAgcXVhZC5yID0gcXVhZFtpXS5yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlO1xuICAgIHJhZGlpID0gbmV3IEFycmF5KG4pO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIG5vZGUgPSBub2Rlc1tpXSwgcmFkaWlbbm9kZS5pbmRleF0gPSArcmFkaXVzKG5vZGUsIGksIG5vZGVzKTtcbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfbm9kZXMsIF9yYW5kb20pIHtcbiAgICBub2RlcyA9IF9ub2RlcztcbiAgICByYW5kb20gPSBfcmFuZG9tO1xuICAgIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5pdGVyYXRpb25zID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGl0ZXJhdGlvbnMgPSArXywgZm9yY2UpIDogaXRlcmF0aW9ucztcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9ICtfLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgfTtcblxuICBmb3JjZS5yYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogcmFkaXVzO1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IGppZ2dsZSBmcm9tIFwiLi9qaWdnbGUuanNcIjtcblxuZnVuY3Rpb24gaW5kZXgoZCkge1xuICByZXR1cm4gZC5pbmRleDtcbn1cblxuZnVuY3Rpb24gZmluZChub2RlQnlJZCwgbm9kZUlkKSB7XG4gIHZhciBub2RlID0gbm9kZUJ5SWQuZ2V0KG5vZGVJZCk7XG4gIGlmICghbm9kZSkgdGhyb3cgbmV3IEVycm9yKFwibm9kZSBub3QgZm91bmQ6IFwiICsgbm9kZUlkKTtcbiAgcmV0dXJuIG5vZGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGxpbmtzKSB7XG4gIHZhciBpZCA9IGluZGV4LFxuICAgICAgc3RyZW5ndGggPSBkZWZhdWx0U3RyZW5ndGgsXG4gICAgICBzdHJlbmd0aHMsXG4gICAgICBkaXN0YW5jZSA9IGNvbnN0YW50KDMwKSxcbiAgICAgIGRpc3RhbmNlcyxcbiAgICAgIG5vZGVzLFxuICAgICAgY291bnQsXG4gICAgICBiaWFzLFxuICAgICAgcmFuZG9tLFxuICAgICAgaXRlcmF0aW9ucyA9IDE7XG5cbiAgaWYgKGxpbmtzID09IG51bGwpIGxpbmtzID0gW107XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFN0cmVuZ3RoKGxpbmspIHtcbiAgICByZXR1cm4gMSAvIE1hdGgubWluKGNvdW50W2xpbmsuc291cmNlLmluZGV4XSwgY291bnRbbGluay50YXJnZXQuaW5kZXhdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcmNlKGFscGhhKSB7XG4gICAgZm9yICh2YXIgayA9IDAsIG4gPSBsaW5rcy5sZW5ndGg7IGsgPCBpdGVyYXRpb25zOyArK2spIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsaW5rLCBzb3VyY2UsIHRhcmdldCwgeCwgeSwgbCwgYjsgaSA8IG47ICsraSkge1xuICAgICAgICBsaW5rID0gbGlua3NbaV0sIHNvdXJjZSA9IGxpbmsuc291cmNlLCB0YXJnZXQgPSBsaW5rLnRhcmdldDtcbiAgICAgICAgeCA9IHRhcmdldC54ICsgdGFyZ2V0LnZ4IC0gc291cmNlLnggLSBzb3VyY2UudnggfHwgamlnZ2xlKHJhbmRvbSk7XG4gICAgICAgIHkgPSB0YXJnZXQueSArIHRhcmdldC52eSAtIHNvdXJjZS55IC0gc291cmNlLnZ5IHx8IGppZ2dsZShyYW5kb20pO1xuICAgICAgICBsID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICAgICAgICBsID0gKGwgLSBkaXN0YW5jZXNbaV0pIC8gbCAqIGFscGhhICogc3RyZW5ndGhzW2ldO1xuICAgICAgICB4ICo9IGwsIHkgKj0gbDtcbiAgICAgICAgdGFyZ2V0LnZ4IC09IHggKiAoYiA9IGJpYXNbaV0pO1xuICAgICAgICB0YXJnZXQudnkgLT0geSAqIGI7XG4gICAgICAgIHNvdXJjZS52eCArPSB4ICogKGIgPSAxIC0gYik7XG4gICAgICAgIHNvdXJjZS52eSArPSB5ICogYjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcblxuICAgIHZhciBpLFxuICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICBtID0gbGlua3MubGVuZ3RoLFxuICAgICAgICBub2RlQnlJZCA9IG5ldyBNYXAobm9kZXMubWFwKChkLCBpKSA9PiBbaWQoZCwgaSwgbm9kZXMpLCBkXSkpLFxuICAgICAgICBsaW5rO1xuXG4gICAgZm9yIChpID0gMCwgY291bnQgPSBuZXcgQXJyYXkobik7IGkgPCBtOyArK2kpIHtcbiAgICAgIGxpbmsgPSBsaW5rc1tpXSwgbGluay5pbmRleCA9IGk7XG4gICAgICBpZiAodHlwZW9mIGxpbmsuc291cmNlICE9PSBcIm9iamVjdFwiKSBsaW5rLnNvdXJjZSA9IGZpbmQobm9kZUJ5SWQsIGxpbmsuc291cmNlKTtcbiAgICAgIGlmICh0eXBlb2YgbGluay50YXJnZXQgIT09IFwib2JqZWN0XCIpIGxpbmsudGFyZ2V0ID0gZmluZChub2RlQnlJZCwgbGluay50YXJnZXQpO1xuICAgICAgY291bnRbbGluay5zb3VyY2UuaW5kZXhdID0gKGNvdW50W2xpbmsuc291cmNlLmluZGV4XSB8fCAwKSArIDE7XG4gICAgICBjb3VudFtsaW5rLnRhcmdldC5pbmRleF0gPSAoY291bnRbbGluay50YXJnZXQuaW5kZXhdIHx8IDApICsgMTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwLCBiaWFzID0gbmV3IEFycmF5KG0pOyBpIDwgbTsgKytpKSB7XG4gICAgICBsaW5rID0gbGlua3NbaV0sIGJpYXNbaV0gPSBjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0gLyAoY291bnRbbGluay5zb3VyY2UuaW5kZXhdICsgY291bnRbbGluay50YXJnZXQuaW5kZXhdKTtcbiAgICB9XG5cbiAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobSksIGluaXRpYWxpemVTdHJlbmd0aCgpO1xuICAgIGRpc3RhbmNlcyA9IG5ldyBBcnJheShtKSwgaW5pdGlhbGl6ZURpc3RhbmNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplU3RyZW5ndGgoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBsaW5rcy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHN0cmVuZ3Roc1tpXSA9ICtzdHJlbmd0aChsaW5rc1tpXSwgaSwgbGlua3MpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVEaXN0YW5jZSgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgZGlzdGFuY2VzW2ldID0gK2Rpc3RhbmNlKGxpbmtzW2ldLCBpLCBsaW5rcyk7XG4gICAgfVxuICB9XG5cbiAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF9ub2RlcywgX3JhbmRvbSkge1xuICAgIG5vZGVzID0gX25vZGVzO1xuICAgIHJhbmRvbSA9IF9yYW5kb207XG4gICAgaW5pdGlhbGl6ZSgpO1xuICB9O1xuXG4gIGZvcmNlLmxpbmtzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGxpbmtzID0gXywgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiBsaW5rcztcbiAgfTtcblxuICBmb3JjZS5pZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpZCA9IF8sIGZvcmNlKSA6IGlkO1xuICB9O1xuXG4gIGZvcmNlLml0ZXJhdGlvbnMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaXRlcmF0aW9ucyA9ICtfLCBmb3JjZSkgOiBpdGVyYXRpb25zO1xuICB9O1xuXG4gIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemVTdHJlbmd0aCgpLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgfTtcblxuICBmb3JjZS5kaXN0YW5jZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkaXN0YW5jZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplRGlzdGFuY2UoKSwgZm9yY2UpIDogZGlzdGFuY2U7XG4gIH07XG5cbiAgcmV0dXJuIGZvcmNlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgeSkge1xuICBpZiAoaXNOYU4oeCA9ICt4KSB8fCBpc05hTih5ID0gK3kpKSByZXR1cm4gdGhpczsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXG5cbiAgdmFyIHgwID0gdGhpcy5feDAsXG4gICAgICB5MCA9IHRoaXMuX3kwLFxuICAgICAgeDEgPSB0aGlzLl94MSxcbiAgICAgIHkxID0gdGhpcy5feTE7XG5cbiAgLy8gSWYgdGhlIHF1YWR0cmVlIGhhcyBubyBleHRlbnQsIGluaXRpYWxpemUgdGhlbS5cbiAgLy8gSW50ZWdlciBleHRlbnQgYXJlIG5lY2Vzc2FyeSBzbyB0aGF0IGlmIHdlIGxhdGVyIGRvdWJsZSB0aGUgZXh0ZW50LFxuICAvLyB0aGUgZXhpc3RpbmcgcXVhZHJhbnQgYm91bmRhcmllcyBkb27igJl0IGNoYW5nZSBkdWUgdG8gZmxvYXRpbmcgcG9pbnQgZXJyb3IhXG4gIGlmIChpc05hTih4MCkpIHtcbiAgICB4MSA9ICh4MCA9IE1hdGguZmxvb3IoeCkpICsgMTtcbiAgICB5MSA9ICh5MCA9IE1hdGguZmxvb3IoeSkpICsgMTtcbiAgfVxuXG4gIC8vIE90aGVyd2lzZSwgZG91YmxlIHJlcGVhdGVkbHkgdG8gY292ZXIuXG4gIGVsc2Uge1xuICAgIHZhciB6ID0geDEgLSB4MCB8fCAxLFxuICAgICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICBpO1xuXG4gICAgd2hpbGUgKHgwID4geCB8fCB4ID49IHgxIHx8IHkwID4geSB8fCB5ID49IHkxKSB7XG4gICAgICBpID0gKHkgPCB5MCkgPDwgMSB8ICh4IDwgeDApO1xuICAgICAgcGFyZW50ID0gbmV3IEFycmF5KDQpLCBwYXJlbnRbaV0gPSBub2RlLCBub2RlID0gcGFyZW50LCB6ICo9IDI7XG4gICAgICBzd2l0Y2ggKGkpIHtcbiAgICAgICAgY2FzZSAwOiB4MSA9IHgwICsgeiwgeTEgPSB5MCArIHo7IGJyZWFrO1xuICAgICAgICBjYXNlIDE6IHgwID0geDEgLSB6LCB5MSA9IHkwICsgejsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogeDEgPSB4MCArIHosIHkwID0geTEgLSB6OyBicmVhaztcbiAgICAgICAgY2FzZSAzOiB4MCA9IHgxIC0geiwgeTAgPSB5MSAtIHo7IGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9yb290ICYmIHRoaXMuX3Jvb3QubGVuZ3RoKSB0aGlzLl9yb290ID0gbm9kZTtcbiAgfVxuXG4gIHRoaXMuX3gwID0geDA7XG4gIHRoaXMuX3kwID0geTA7XG4gIHRoaXMuX3gxID0geDE7XG4gIHRoaXMuX3kxID0geTE7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBkYXRhID0gW107XG4gIHRoaXMudmlzaXQoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5sZW5ndGgpIGRvIGRhdGEucHVzaChub2RlLmRhdGEpOyB3aGlsZSAobm9kZSA9IG5vZGUubmV4dClcbiAgfSk7XG4gIHJldHVybiBkYXRhO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oXykge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmNvdmVyKCtfWzBdWzBdLCArX1swXVsxXSkuY292ZXIoK19bMV1bMF0sICtfWzFdWzFdKVxuICAgICAgOiBpc05hTih0aGlzLl94MCkgPyB1bmRlZmluZWQgOiBbW3RoaXMuX3gwLCB0aGlzLl95MF0sIFt0aGlzLl94MSwgdGhpcy5feTFdXTtcbn1cbiIsImltcG9ydCBRdWFkIGZyb20gXCIuL3F1YWQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgeSwgcmFkaXVzKSB7XG4gIHZhciBkYXRhLFxuICAgICAgeDAgPSB0aGlzLl94MCxcbiAgICAgIHkwID0gdGhpcy5feTAsXG4gICAgICB4MSxcbiAgICAgIHkxLFxuICAgICAgeDIsXG4gICAgICB5MixcbiAgICAgIHgzID0gdGhpcy5feDEsXG4gICAgICB5MyA9IHRoaXMuX3kxLFxuICAgICAgcXVhZHMgPSBbXSxcbiAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgcSxcbiAgICAgIGk7XG5cbiAgaWYgKG5vZGUpIHF1YWRzLnB1c2gobmV3IFF1YWQobm9kZSwgeDAsIHkwLCB4MywgeTMpKTtcbiAgaWYgKHJhZGl1cyA9PSBudWxsKSByYWRpdXMgPSBJbmZpbml0eTtcbiAgZWxzZSB7XG4gICAgeDAgPSB4IC0gcmFkaXVzLCB5MCA9IHkgLSByYWRpdXM7XG4gICAgeDMgPSB4ICsgcmFkaXVzLCB5MyA9IHkgKyByYWRpdXM7XG4gICAgcmFkaXVzICo9IHJhZGl1cztcbiAgfVxuXG4gIHdoaWxlIChxID0gcXVhZHMucG9wKCkpIHtcblxuICAgIC8vIFN0b3Agc2VhcmNoaW5nIGlmIHRoaXMgcXVhZHJhbnQgY2Fu4oCZdCBjb250YWluIGEgY2xvc2VyIG5vZGUuXG4gICAgaWYgKCEobm9kZSA9IHEubm9kZSlcbiAgICAgICAgfHwgKHgxID0gcS54MCkgPiB4M1xuICAgICAgICB8fCAoeTEgPSBxLnkwKSA+IHkzXG4gICAgICAgIHx8ICh4MiA9IHEueDEpIDwgeDBcbiAgICAgICAgfHwgKHkyID0gcS55MSkgPCB5MCkgY29udGludWU7XG5cbiAgICAvLyBCaXNlY3QgdGhlIGN1cnJlbnQgcXVhZHJhbnQuXG4gICAgaWYgKG5vZGUubGVuZ3RoKSB7XG4gICAgICB2YXIgeG0gPSAoeDEgKyB4MikgLyAyLFxuICAgICAgICAgIHltID0gKHkxICsgeTIpIC8gMjtcblxuICAgICAgcXVhZHMucHVzaChcbiAgICAgICAgbmV3IFF1YWQobm9kZVszXSwgeG0sIHltLCB4MiwgeTIpLFxuICAgICAgICBuZXcgUXVhZChub2RlWzJdLCB4MSwgeW0sIHhtLCB5MiksXG4gICAgICAgIG5ldyBRdWFkKG5vZGVbMV0sIHhtLCB5MSwgeDIsIHltKSxcbiAgICAgICAgbmV3IFF1YWQobm9kZVswXSwgeDEsIHkxLCB4bSwgeW0pXG4gICAgICApO1xuXG4gICAgICAvLyBWaXNpdCB0aGUgY2xvc2VzdCBxdWFkcmFudCBmaXJzdC5cbiAgICAgIGlmIChpID0gKHkgPj0geW0pIDw8IDEgfCAoeCA+PSB4bSkpIHtcbiAgICAgICAgcSA9IHF1YWRzW3F1YWRzLmxlbmd0aCAtIDFdO1xuICAgICAgICBxdWFkc1txdWFkcy5sZW5ndGggLSAxXSA9IHF1YWRzW3F1YWRzLmxlbmd0aCAtIDEgLSBpXTtcbiAgICAgICAgcXVhZHNbcXVhZHMubGVuZ3RoIC0gMSAtIGldID0gcTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBWaXNpdCB0aGlzIHBvaW50LiAoVmlzaXRpbmcgY29pbmNpZGVudCBwb2ludHMgaXNu4oCZdCBuZWNlc3NhcnkhKVxuICAgIGVsc2Uge1xuICAgICAgdmFyIGR4ID0geCAtICt0aGlzLl94LmNhbGwobnVsbCwgbm9kZS5kYXRhKSxcbiAgICAgICAgICBkeSA9IHkgLSArdGhpcy5feS5jYWxsKG51bGwsIG5vZGUuZGF0YSksXG4gICAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgIGlmIChkMiA8IHJhZGl1cykge1xuICAgICAgICB2YXIgZCA9IE1hdGguc3FydChyYWRpdXMgPSBkMik7XG4gICAgICAgIHgwID0geCAtIGQsIHkwID0geSAtIGQ7XG4gICAgICAgIHgzID0geCArIGQsIHkzID0geSArIGQ7XG4gICAgICAgIGRhdGEgPSBub2RlLmRhdGE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkKSB7XG4gIGlmIChpc05hTih4ID0gK3RoaXMuX3guY2FsbChudWxsLCBkKSkgfHwgaXNOYU4oeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCkpKSByZXR1cm4gdGhpczsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXG5cbiAgdmFyIHBhcmVudCxcbiAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgcmV0YWluZXIsXG4gICAgICBwcmV2aW91cyxcbiAgICAgIG5leHQsXG4gICAgICB4MCA9IHRoaXMuX3gwLFxuICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgIHgxID0gdGhpcy5feDEsXG4gICAgICB5MSA9IHRoaXMuX3kxLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB4bSxcbiAgICAgIHltLFxuICAgICAgcmlnaHQsXG4gICAgICBib3R0b20sXG4gICAgICBpLFxuICAgICAgajtcblxuICAvLyBJZiB0aGUgdHJlZSBpcyBlbXB0eSwgaW5pdGlhbGl6ZSB0aGUgcm9vdCBhcyBhIGxlYWYuXG4gIGlmICghbm9kZSkgcmV0dXJuIHRoaXM7XG5cbiAgLy8gRmluZCB0aGUgbGVhZiBub2RlIGZvciB0aGUgcG9pbnQuXG4gIC8vIFdoaWxlIGRlc2NlbmRpbmcsIGFsc28gcmV0YWluIHRoZSBkZWVwZXN0IHBhcmVudCB3aXRoIGEgbm9uLXJlbW92ZWQgc2libGluZy5cbiAgaWYgKG5vZGUubGVuZ3RoKSB3aGlsZSAodHJ1ZSkge1xuICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICBpZiAoYm90dG9tID0geSA+PSAoeW0gPSAoeTAgKyB5MSkgLyAyKSkgeTAgPSB5bTsgZWxzZSB5MSA9IHltO1xuICAgIGlmICghKHBhcmVudCA9IG5vZGUsIG5vZGUgPSBub2RlW2kgPSBib3R0b20gPDwgMSB8IHJpZ2h0XSkpIHJldHVybiB0aGlzO1xuICAgIGlmICghbm9kZS5sZW5ndGgpIGJyZWFrO1xuICAgIGlmIChwYXJlbnRbKGkgKyAxKSAmIDNdIHx8IHBhcmVudFsoaSArIDIpICYgM10gfHwgcGFyZW50WyhpICsgMykgJiAzXSkgcmV0YWluZXIgPSBwYXJlbnQsIGogPSBpO1xuICB9XG5cbiAgLy8gRmluZCB0aGUgcG9pbnQgdG8gcmVtb3ZlLlxuICB3aGlsZSAobm9kZS5kYXRhICE9PSBkKSBpZiAoIShwcmV2aW91cyA9IG5vZGUsIG5vZGUgPSBub2RlLm5leHQpKSByZXR1cm4gdGhpcztcbiAgaWYgKG5leHQgPSBub2RlLm5leHQpIGRlbGV0ZSBub2RlLm5leHQ7XG5cbiAgLy8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvaW5jaWRlbnQgcG9pbnRzLCByZW1vdmUganVzdCB0aGUgcG9pbnQuXG4gIGlmIChwcmV2aW91cykgcmV0dXJuIChuZXh0ID8gcHJldmlvdXMubmV4dCA9IG5leHQgOiBkZWxldGUgcHJldmlvdXMubmV4dCksIHRoaXM7XG5cbiAgLy8gSWYgdGhpcyBpcyB0aGUgcm9vdCBwb2ludCwgcmVtb3ZlIGl0LlxuICBpZiAoIXBhcmVudCkgcmV0dXJuIHRoaXMuX3Jvb3QgPSBuZXh0LCB0aGlzO1xuXG4gIC8vIFJlbW92ZSB0aGlzIGxlYWYuXG4gIG5leHQgPyBwYXJlbnRbaV0gPSBuZXh0IDogZGVsZXRlIHBhcmVudFtpXTtcblxuICAvLyBJZiB0aGUgcGFyZW50IG5vdyBjb250YWlucyBleGFjdGx5IG9uZSBsZWFmLCBjb2xsYXBzZSBzdXBlcmZsdW91cyBwYXJlbnRzLlxuICBpZiAoKG5vZGUgPSBwYXJlbnRbMF0gfHwgcGFyZW50WzFdIHx8IHBhcmVudFsyXSB8fCBwYXJlbnRbM10pXG4gICAgICAmJiBub2RlID09PSAocGFyZW50WzNdIHx8IHBhcmVudFsyXSB8fCBwYXJlbnRbMV0gfHwgcGFyZW50WzBdKVxuICAgICAgJiYgIW5vZGUubGVuZ3RoKSB7XG4gICAgaWYgKHJldGFpbmVyKSByZXRhaW5lcltqXSA9IG5vZGU7XG4gICAgZWxzZSB0aGlzLl9yb290ID0gbm9kZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQWxsKGRhdGEpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBkYXRhLmxlbmd0aDsgaSA8IG47ICsraSkgdGhpcy5yZW1vdmUoZGF0YVtpXSk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9yb290O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBzaXplID0gMDtcbiAgdGhpcy52aXNpdChmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLmxlbmd0aCkgZG8gKytzaXplOyB3aGlsZSAobm9kZSA9IG5vZGUubmV4dClcbiAgfSk7XG4gIHJldHVybiBzaXplO1xufVxuIiwiaW1wb3J0IFF1YWQgZnJvbSBcIi4vcXVhZC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgcXVhZHMgPSBbXSwgcSwgbm9kZSA9IHRoaXMuX3Jvb3QsIGNoaWxkLCB4MCwgeTAsIHgxLCB5MTtcbiAgaWYgKG5vZGUpIHF1YWRzLnB1c2gobmV3IFF1YWQobm9kZSwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpKTtcbiAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xuICAgIGlmICghY2FsbGJhY2sobm9kZSA9IHEubm9kZSwgeDAgPSBxLngwLCB5MCA9IHEueTAsIHgxID0gcS54MSwgeTEgPSBxLnkxKSAmJiBub2RlLmxlbmd0aCkge1xuICAgICAgdmFyIHhtID0gKHgwICsgeDEpIC8gMiwgeW0gPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVszXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHltLCB4MSwgeTEpKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMl0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5bSwgeG0sIHkxKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzFdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeTAsIHgxLCB5bSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVswXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHkwLCB4bSwgeW0pKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgUXVhZCBmcm9tIFwiLi9xdWFkLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBxdWFkcyA9IFtdLCBuZXh0ID0gW10sIHE7XG4gIGlmICh0aGlzLl9yb290KSBxdWFkcy5wdXNoKG5ldyBRdWFkKHRoaXMuX3Jvb3QsIHRoaXMuX3gwLCB0aGlzLl95MCwgdGhpcy5feDEsIHRoaXMuX3kxKSk7XG4gIHdoaWxlIChxID0gcXVhZHMucG9wKCkpIHtcbiAgICB2YXIgbm9kZSA9IHEubm9kZTtcbiAgICBpZiAobm9kZS5sZW5ndGgpIHtcbiAgICAgIHZhciBjaGlsZCwgeDAgPSBxLngwLCB5MCA9IHEueTAsIHgxID0gcS54MSwgeTEgPSBxLnkxLCB4bSA9ICh4MCArIHgxKSAvIDIsIHltID0gKHkwICsgeTEpIC8gMjtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMF0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5MCwgeG0sIHltKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzFdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeTAsIHgxLCB5bSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVsyXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHltLCB4bSwgeTEpKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbM10pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5bSwgeDEsIHkxKSk7XG4gICAgfVxuICAgIG5leHQucHVzaChxKTtcbiAgfVxuICB3aGlsZSAocSA9IG5leHQucG9wKCkpIHtcbiAgICBjYWxsYmFjayhxLm5vZGUsIHEueDAsIHEueTAsIHEueDEsIHEueTEpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGluZWFyX2NvbmdydWVudGlhbF9nZW5lcmF0b3IjUGFyYW1ldGVyc19pbl9jb21tb25fdXNlXG5jb25zdCBhID0gMTY2NDUyNTtcbmNvbnN0IGMgPSAxMDEzOTA0MjIzO1xuY29uc3QgbSA9IDQyOTQ5NjcyOTY7IC8vIDJeMzJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGxldCBzID0gMTtcbiAgcmV0dXJuICgpID0+IChzID0gKGEgKiBzICsgYykgJSBtKSAvIG07XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7dGltZXJ9IGZyb20gXCJkMy10aW1lclwiO1xuaW1wb3J0IGxjZyBmcm9tIFwiLi9sY2cuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHgoZCkge1xuICByZXR1cm4gZC54O1xufVxuXG5leHBvcnQgZnVuY3Rpb24geShkKSB7XG4gIHJldHVybiBkLnk7XG59XG5cbnZhciBpbml0aWFsUmFkaXVzID0gMTAsXG4gICAgaW5pdGlhbEFuZ2xlID0gTWF0aC5QSSAqICgzIC0gTWF0aC5zcXJ0KDUpKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZXMpIHtcbiAgdmFyIHNpbXVsYXRpb24sXG4gICAgICBhbHBoYSA9IDEsXG4gICAgICBhbHBoYU1pbiA9IDAuMDAxLFxuICAgICAgYWxwaGFEZWNheSA9IDEgLSBNYXRoLnBvdyhhbHBoYU1pbiwgMSAvIDMwMCksXG4gICAgICBhbHBoYVRhcmdldCA9IDAsXG4gICAgICB2ZWxvY2l0eURlY2F5ID0gMC42LFxuICAgICAgZm9yY2VzID0gbmV3IE1hcCgpLFxuICAgICAgc3RlcHBlciA9IHRpbWVyKHN0ZXApLFxuICAgICAgZXZlbnQgPSBkaXNwYXRjaChcInRpY2tcIiwgXCJlbmRcIiksXG4gICAgICByYW5kb20gPSBsY2coKTtcblxuICBpZiAobm9kZXMgPT0gbnVsbCkgbm9kZXMgPSBbXTtcblxuICBmdW5jdGlvbiBzdGVwKCkge1xuICAgIHRpY2soKTtcbiAgICBldmVudC5jYWxsKFwidGlja1wiLCBzaW11bGF0aW9uKTtcbiAgICBpZiAoYWxwaGEgPCBhbHBoYU1pbikge1xuICAgICAgc3RlcHBlci5zdG9wKCk7XG4gICAgICBldmVudC5jYWxsKFwiZW5kXCIsIHNpbXVsYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2soaXRlcmF0aW9ucykge1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlO1xuXG4gICAgaWYgKGl0ZXJhdGlvbnMgPT09IHVuZGVmaW5lZCkgaXRlcmF0aW9ucyA9IDE7XG5cbiAgICBmb3IgKHZhciBrID0gMDsgayA8IGl0ZXJhdGlvbnM7ICsraykge1xuICAgICAgYWxwaGEgKz0gKGFscGhhVGFyZ2V0IC0gYWxwaGEpICogYWxwaGFEZWNheTtcblxuICAgICAgZm9yY2VzLmZvckVhY2goZnVuY3Rpb24oZm9yY2UpIHtcbiAgICAgICAgZm9yY2UoYWxwaGEpO1xuICAgICAgfSk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAobm9kZS5meCA9PSBudWxsKSBub2RlLnggKz0gbm9kZS52eCAqPSB2ZWxvY2l0eURlY2F5O1xuICAgICAgICBlbHNlIG5vZGUueCA9IG5vZGUuZngsIG5vZGUudnggPSAwO1xuICAgICAgICBpZiAobm9kZS5meSA9PSBudWxsKSBub2RlLnkgKz0gbm9kZS52eSAqPSB2ZWxvY2l0eURlY2F5O1xuICAgICAgICBlbHNlIG5vZGUueSA9IG5vZGUuZnksIG5vZGUudnkgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzaW11bGF0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZU5vZGVzKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUuaW5kZXggPSBpO1xuICAgICAgaWYgKG5vZGUuZnggIT0gbnVsbCkgbm9kZS54ID0gbm9kZS5meDtcbiAgICAgIGlmIChub2RlLmZ5ICE9IG51bGwpIG5vZGUueSA9IG5vZGUuZnk7XG4gICAgICBpZiAoaXNOYU4obm9kZS54KSB8fCBpc05hTihub2RlLnkpKSB7XG4gICAgICAgIHZhciByYWRpdXMgPSBpbml0aWFsUmFkaXVzICogTWF0aC5zcXJ0KDAuNSArIGkpLCBhbmdsZSA9IGkgKiBpbml0aWFsQW5nbGU7XG4gICAgICAgIG5vZGUueCA9IHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgbm9kZS55ID0gcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzTmFOKG5vZGUudngpIHx8IGlzTmFOKG5vZGUudnkpKSB7XG4gICAgICAgIG5vZGUudnggPSBub2RlLnZ5ID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplRm9yY2UoZm9yY2UpIHtcbiAgICBpZiAoZm9yY2UuaW5pdGlhbGl6ZSkgZm9yY2UuaW5pdGlhbGl6ZShub2RlcywgcmFuZG9tKTtcbiAgICByZXR1cm4gZm9yY2U7XG4gIH1cblxuICBpbml0aWFsaXplTm9kZXMoKTtcblxuICByZXR1cm4gc2ltdWxhdGlvbiA9IHtcbiAgICB0aWNrOiB0aWNrLFxuXG4gICAgcmVzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3RlcHBlci5yZXN0YXJ0KHN0ZXApLCBzaW11bGF0aW9uO1xuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdGVwcGVyLnN0b3AoKSwgc2ltdWxhdGlvbjtcbiAgICB9LFxuXG4gICAgbm9kZXM6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVzID0gXywgaW5pdGlhbGl6ZU5vZGVzKCksIGZvcmNlcy5mb3JFYWNoKGluaXRpYWxpemVGb3JjZSksIHNpbXVsYXRpb24pIDogbm9kZXM7XG4gICAgfSxcblxuICAgIGFscGhhOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYSA9ICtfLCBzaW11bGF0aW9uKSA6IGFscGhhO1xuICAgIH0sXG5cbiAgICBhbHBoYU1pbjogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFNaW4gPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYU1pbjtcbiAgICB9LFxuXG4gICAgYWxwaGFEZWNheTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFEZWNheSA9ICtfLCBzaW11bGF0aW9uKSA6ICthbHBoYURlY2F5O1xuICAgIH0sXG5cbiAgICBhbHBoYVRhcmdldDogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFUYXJnZXQgPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYVRhcmdldDtcbiAgICB9LFxuXG4gICAgdmVsb2NpdHlEZWNheTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmVsb2NpdHlEZWNheSA9IDEgLSBfLCBzaW11bGF0aW9uKSA6IDEgLSB2ZWxvY2l0eURlY2F5O1xuICAgIH0sXG5cbiAgICByYW5kb21Tb3VyY2U6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmRvbSA9IF8sIGZvcmNlcy5mb3JFYWNoKGluaXRpYWxpemVGb3JjZSksIHNpbXVsYXRpb24pIDogcmFuZG9tO1xuICAgIH0sXG5cbiAgICBmb3JjZTogZnVuY3Rpb24obmFtZSwgXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gKChfID09IG51bGwgPyBmb3JjZXMuZGVsZXRlKG5hbWUpIDogZm9yY2VzLnNldChuYW1lLCBpbml0aWFsaXplRm9yY2UoXykpKSwgc2ltdWxhdGlvbikgOiBmb3JjZXMuZ2V0KG5hbWUpO1xuICAgIH0sXG5cbiAgICBmaW5kOiBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICAgIGR4LFxuICAgICAgICAgIGR5LFxuICAgICAgICAgIGQyLFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgY2xvc2VzdDtcblxuICAgICAgaWYgKHJhZGl1cyA9PSBudWxsKSByYWRpdXMgPSBJbmZpbml0eTtcbiAgICAgIGVsc2UgcmFkaXVzICo9IHJhZGl1cztcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGR4ID0geCAtIG5vZGUueDtcbiAgICAgICAgZHkgPSB5IC0gbm9kZS55O1xuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICBpZiAoZDIgPCByYWRpdXMpIGNsb3Nlc3QgPSBub2RlLCByYWRpdXMgPSBkMjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsb3Nlc3Q7XG4gICAgfSxcblxuICAgIG9uOiBmdW5jdGlvbihuYW1lLCBfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyAoZXZlbnQub24obmFtZSwgXyksIHNpbXVsYXRpb24pIDogZXZlbnQub24obmFtZSk7XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IHtxdWFkdHJlZX0gZnJvbSBcImQzLXF1YWR0cmVlXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBqaWdnbGUgZnJvbSBcIi4vamlnZ2xlLmpzXCI7XG5pbXBvcnQge3gsIHl9IGZyb20gXCIuL3NpbXVsYXRpb24uanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlcyxcbiAgICAgIG5vZGUsXG4gICAgICByYW5kb20sXG4gICAgICBhbHBoYSxcbiAgICAgIHN0cmVuZ3RoID0gY29uc3RhbnQoLTMwKSxcbiAgICAgIHN0cmVuZ3RocyxcbiAgICAgIGRpc3RhbmNlTWluMiA9IDEsXG4gICAgICBkaXN0YW5jZU1heDIgPSBJbmZpbml0eSxcbiAgICAgIHRoZXRhMiA9IDAuODE7XG5cbiAgZnVuY3Rpb24gZm9yY2UoXykge1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLCB0cmVlID0gcXVhZHRyZWUobm9kZXMsIHgsIHkpLnZpc2l0QWZ0ZXIoYWNjdW11bGF0ZSk7XG4gICAgZm9yIChhbHBoYSA9IF8sIGkgPSAwOyBpIDwgbjsgKytpKSBub2RlID0gbm9kZXNbaV0sIHRyZWUudmlzaXQoYXBwbHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG4gICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGgsIG5vZGU7XG4gICAgc3RyZW5ndGhzID0gbmV3IEFycmF5KG4pO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIG5vZGUgPSBub2Rlc1tpXSwgc3RyZW5ndGhzW25vZGUuaW5kZXhdID0gK3N0cmVuZ3RoKG5vZGUsIGksIG5vZGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFjY3VtdWxhdGUocXVhZCkge1xuICAgIHZhciBzdHJlbmd0aCA9IDAsIHEsIGMsIHdlaWdodCA9IDAsIHgsIHksIGk7XG5cbiAgICAvLyBGb3IgaW50ZXJuYWwgbm9kZXMsIGFjY3VtdWxhdGUgZm9yY2VzIGZyb20gY2hpbGQgcXVhZHJhbnRzLlxuICAgIGlmIChxdWFkLmxlbmd0aCkge1xuICAgICAgZm9yICh4ID0geSA9IGkgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgICAgIGlmICgocSA9IHF1YWRbaV0pICYmIChjID0gTWF0aC5hYnMocS52YWx1ZSkpKSB7XG4gICAgICAgICAgc3RyZW5ndGggKz0gcS52YWx1ZSwgd2VpZ2h0ICs9IGMsIHggKz0gYyAqIHEueCwgeSArPSBjICogcS55O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBxdWFkLnggPSB4IC8gd2VpZ2h0O1xuICAgICAgcXVhZC55ID0geSAvIHdlaWdodDtcbiAgICB9XG5cbiAgICAvLyBGb3IgbGVhZiBub2RlcywgYWNjdW11bGF0ZSBmb3JjZXMgZnJvbSBjb2luY2lkZW50IHF1YWRyYW50cy5cbiAgICBlbHNlIHtcbiAgICAgIHEgPSBxdWFkO1xuICAgICAgcS54ID0gcS5kYXRhLng7XG4gICAgICBxLnkgPSBxLmRhdGEueTtcbiAgICAgIGRvIHN0cmVuZ3RoICs9IHN0cmVuZ3Roc1txLmRhdGEuaW5kZXhdO1xuICAgICAgd2hpbGUgKHEgPSBxLm5leHQpO1xuICAgIH1cblxuICAgIHF1YWQudmFsdWUgPSBzdHJlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFwcGx5KHF1YWQsIHgxLCBfLCB4Mikge1xuICAgIGlmICghcXVhZC52YWx1ZSkgcmV0dXJuIHRydWU7XG5cbiAgICB2YXIgeCA9IHF1YWQueCAtIG5vZGUueCxcbiAgICAgICAgeSA9IHF1YWQueSAtIG5vZGUueSxcbiAgICAgICAgdyA9IHgyIC0geDEsXG4gICAgICAgIGwgPSB4ICogeCArIHkgKiB5O1xuXG4gICAgLy8gQXBwbHkgdGhlIEJhcm5lcy1IdXQgYXBwcm94aW1hdGlvbiBpZiBwb3NzaWJsZS5cbiAgICAvLyBMaW1pdCBmb3JjZXMgZm9yIHZlcnkgY2xvc2Ugbm9kZXM7IHJhbmRvbWl6ZSBkaXJlY3Rpb24gaWYgY29pbmNpZGVudC5cbiAgICBpZiAodyAqIHcgLyB0aGV0YTIgPCBsKSB7XG4gICAgICBpZiAobCA8IGRpc3RhbmNlTWF4Mikge1xuICAgICAgICBpZiAoeCA9PT0gMCkgeCA9IGppZ2dsZShyYW5kb20pLCBsICs9IHggKiB4O1xuICAgICAgICBpZiAoeSA9PT0gMCkgeSA9IGppZ2dsZShyYW5kb20pLCBsICs9IHkgKiB5O1xuICAgICAgICBpZiAobCA8IGRpc3RhbmNlTWluMikgbCA9IE1hdGguc3FydChkaXN0YW5jZU1pbjIgKiBsKTtcbiAgICAgICAgbm9kZS52eCArPSB4ICogcXVhZC52YWx1ZSAqIGFscGhhIC8gbDtcbiAgICAgICAgbm9kZS52eSArPSB5ICogcXVhZC52YWx1ZSAqIGFscGhhIC8gbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgcHJvY2VzcyBwb2ludHMgZGlyZWN0bHkuXG4gICAgZWxzZSBpZiAocXVhZC5sZW5ndGggfHwgbCA+PSBkaXN0YW5jZU1heDIpIHJldHVybjtcblxuICAgIC8vIExpbWl0IGZvcmNlcyBmb3IgdmVyeSBjbG9zZSBub2RlczsgcmFuZG9taXplIGRpcmVjdGlvbiBpZiBjb2luY2lkZW50LlxuICAgIGlmIChxdWFkLmRhdGEgIT09IG5vZGUgfHwgcXVhZC5uZXh0KSB7XG4gICAgICBpZiAoeCA9PT0gMCkgeCA9IGppZ2dsZShyYW5kb20pLCBsICs9IHggKiB4O1xuICAgICAgaWYgKHkgPT09IDApIHkgPSBqaWdnbGUocmFuZG9tKSwgbCArPSB5ICogeTtcbiAgICAgIGlmIChsIDwgZGlzdGFuY2VNaW4yKSBsID0gTWF0aC5zcXJ0KGRpc3RhbmNlTWluMiAqIGwpO1xuICAgIH1cblxuICAgIGRvIGlmIChxdWFkLmRhdGEgIT09IG5vZGUpIHtcbiAgICAgIHcgPSBzdHJlbmd0aHNbcXVhZC5kYXRhLmluZGV4XSAqIGFscGhhIC8gbDtcbiAgICAgIG5vZGUudnggKz0geCAqIHc7XG4gICAgICBub2RlLnZ5ICs9IHkgKiB3O1xuICAgIH0gd2hpbGUgKHF1YWQgPSBxdWFkLm5leHQpO1xuICB9XG5cbiAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF9ub2RlcywgX3JhbmRvbSkge1xuICAgIG5vZGVzID0gX25vZGVzO1xuICAgIHJhbmRvbSA9IF9yYW5kb207XG4gICAgaW5pdGlhbGl6ZSgpO1xuICB9O1xuXG4gIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UuZGlzdGFuY2VNaW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGlzdGFuY2VNaW4yID0gXyAqIF8sIGZvcmNlKSA6IE1hdGguc3FydChkaXN0YW5jZU1pbjIpO1xuICB9O1xuXG4gIGZvcmNlLmRpc3RhbmNlTWF4ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlTWF4MiA9IF8gKiBfLCBmb3JjZSkgOiBNYXRoLnNxcnQoZGlzdGFuY2VNYXgyKTtcbiAgfTtcblxuICBmb3JjZS50aGV0YSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGV0YTIgPSBfICogXywgZm9yY2UpIDogTWF0aC5zcXJ0KHRoZXRhMik7XG4gIH07XG5cbiAgcmV0dXJuIGZvcmNlO1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJhZGl1cywgeCwgeSkge1xuICB2YXIgbm9kZXMsXG4gICAgICBzdHJlbmd0aCA9IGNvbnN0YW50KDAuMSksXG4gICAgICBzdHJlbmd0aHMsXG4gICAgICByYWRpdXNlcztcblxuICBpZiAodHlwZW9mIHJhZGl1cyAhPT0gXCJmdW5jdGlvblwiKSByYWRpdXMgPSBjb25zdGFudCgrcmFkaXVzKTtcbiAgaWYgKHggPT0gbnVsbCkgeCA9IDA7XG4gIGlmICh5ID09IG51bGwpIHkgPSAwO1xuXG4gIGZ1bmN0aW9uIGZvcmNlKGFscGhhKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBub2Rlcy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBub2RlID0gbm9kZXNbaV0sXG4gICAgICAgICAgZHggPSBub2RlLnggLSB4IHx8IDFlLTYsXG4gICAgICAgICAgZHkgPSBub2RlLnkgLSB5IHx8IDFlLTYsXG4gICAgICAgICAgciA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSksXG4gICAgICAgICAgayA9IChyYWRpdXNlc1tpXSAtIHIpICogc3RyZW5ndGhzW2ldICogYWxwaGEgLyByO1xuICAgICAgbm9kZS52eCArPSBkeCAqIGs7XG4gICAgICBub2RlLnZ5ICs9IGR5ICogaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aDtcbiAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobik7XG4gICAgcmFkaXVzZXMgPSBuZXcgQXJyYXkobik7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgcmFkaXVzZXNbaV0gPSArcmFkaXVzKG5vZGVzW2ldLCBpLCBub2Rlcyk7XG4gICAgICBzdHJlbmd0aHNbaV0gPSBpc05hTihyYWRpdXNlc1tpXSkgPyAwIDogK3N0cmVuZ3RoKG5vZGVzW2ldLCBpLCBub2Rlcyk7XG4gICAgfVxuICB9XG5cbiAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBub2RlcyA9IF8sIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICB9O1xuXG4gIGZvcmNlLnJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiByYWRpdXM7XG4gIH07XG5cbiAgZm9yY2UueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gK18sIGZvcmNlKSA6IHg7XG4gIH07XG5cbiAgZm9yY2UueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gK18sIGZvcmNlKSA6IHk7XG4gIH07XG5cbiAgcmV0dXJuIGZvcmNlO1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgdmFyIHN0cmVuZ3RoID0gY29uc3RhbnQoMC4xKSxcbiAgICAgIG5vZGVzLFxuICAgICAgc3RyZW5ndGhzLFxuICAgICAgeHo7XG5cbiAgaWYgKHR5cGVvZiB4ICE9PSBcImZ1bmN0aW9uXCIpIHggPSBjb25zdGFudCh4ID09IG51bGwgPyAwIDogK3gpO1xuXG4gIGZ1bmN0aW9uIGZvcmNlKGFscGhhKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBub2Rlcy5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS52eCArPSAoeHpbaV0gLSBub2RlLngpICogc3RyZW5ndGhzW2ldICogYWxwaGE7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG4gICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGg7XG4gICAgc3RyZW5ndGhzID0gbmV3IEFycmF5KG4pO1xuICAgIHh6ID0gbmV3IEFycmF5KG4pO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHN0cmVuZ3Roc1tpXSA9IGlzTmFOKHh6W2ldID0gK3gobm9kZXNbaV0sIGksIG5vZGVzKSkgPyAwIDogK3N0cmVuZ3RoKG5vZGVzW2ldLCBpLCBub2Rlcyk7XG4gICAgfVxuICB9XG5cbiAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBub2RlcyA9IF87XG4gICAgaW5pdGlhbGl6ZSgpO1xuICB9O1xuXG4gIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogeDtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeSkge1xuICB2YXIgc3RyZW5ndGggPSBjb25zdGFudCgwLjEpLFxuICAgICAgbm9kZXMsXG4gICAgICBzdHJlbmd0aHMsXG4gICAgICB5ejtcblxuICBpZiAodHlwZW9mIHkgIT09IFwiZnVuY3Rpb25cIikgeSA9IGNvbnN0YW50KHkgPT0gbnVsbCA/IDAgOiAreSk7XG5cbiAgZnVuY3Rpb24gZm9yY2UoYWxwaGEpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnZ5ICs9ICh5eltpXSAtIG5vZGUueSkgKiBzdHJlbmd0aHNbaV0gKiBhbHBoYTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aDtcbiAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobik7XG4gICAgeXogPSBuZXcgQXJyYXkobik7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgc3RyZW5ndGhzW2ldID0gaXNOYU4oeXpbaV0gPSAreShub2Rlc1tpXSwgaSwgbm9kZXMpKSA/IDAgOiArc3RyZW5ndGgobm9kZXNbaV0sIGksIG5vZGVzKTtcbiAgICB9XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXztcbiAgICBpbml0aWFsaXplKCk7XG4gIH07XG5cbiAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgfTtcblxuICBmb3JjZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiB5O1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIE1hdGguYWJzKHggPSBNYXRoLnJvdW5kKHgpKSA+PSAxZTIxXG4gICAgICA/IHgudG9Mb2NhbGVTdHJpbmcoXCJlblwiKS5yZXBsYWNlKC8sL2csIFwiXCIpXG4gICAgICA6IHgudG9TdHJpbmcoMTApO1xufVxuXG4vLyBDb21wdXRlcyB0aGUgZGVjaW1hbCBjb2VmZmljaWVudCBhbmQgZXhwb25lbnQgb2YgdGhlIHNwZWNpZmllZCBudW1iZXIgeCB3aXRoXG4vLyBzaWduaWZpY2FudCBkaWdpdHMgcCwgd2hlcmUgeCBpcyBwb3NpdGl2ZSBhbmQgcCBpcyBpbiBbMSwgMjFdIG9yIHVuZGVmaW5lZC5cbi8vIEZvciBleGFtcGxlLCBmb3JtYXREZWNpbWFsUGFydHMoMS4yMykgcmV0dXJucyBbXCIxMjNcIiwgMF0uXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RGVjaW1hbFBhcnRzKHgsIHApIHtcbiAgaWYgKChpID0gKHggPSBwID8geC50b0V4cG9uZW50aWFsKHAgLSAxKSA6IHgudG9FeHBvbmVudGlhbCgpKS5pbmRleE9mKFwiZVwiKSkgPCAwKSByZXR1cm4gbnVsbDsgLy8gTmFOLCDCsUluZmluaXR5XG4gIHZhciBpLCBjb2VmZmljaWVudCA9IHguc2xpY2UoMCwgaSk7XG5cbiAgLy8gVGhlIHN0cmluZyByZXR1cm5lZCBieSB0b0V4cG9uZW50aWFsIGVpdGhlciBoYXMgdGhlIGZvcm0gXFxkXFwuXFxkK2VbLStdXFxkK1xuICAvLyAoZS5nLiwgMS4yZSszKSBvciB0aGUgZm9ybSBcXGRlWy0rXVxcZCsgKGUuZy4sIDFlKzMpLlxuICByZXR1cm4gW1xuICAgIGNvZWZmaWNpZW50Lmxlbmd0aCA+IDEgPyBjb2VmZmljaWVudFswXSArIGNvZWZmaWNpZW50LnNsaWNlKDIpIDogY29lZmZpY2llbnQsXG4gICAgK3guc2xpY2UoaSArIDEpXG4gIF07XG59XG4iLCJpbXBvcnQge2Zvcm1hdERlY2ltYWxQYXJ0c30gZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4ID0gZm9ybWF0RGVjaW1hbFBhcnRzKE1hdGguYWJzKHgpKSwgeCA/IHhbMV0gOiBOYU47XG59XG4iLCIvLyBbW2ZpbGxdYWxpZ25dW3NpZ25dW3N5bWJvbF1bMF1bd2lkdGhdWyxdWy5wcmVjaXNpb25dW35dW3R5cGVdXG52YXIgcmUgPSAvXig/OiguKT8oWzw+PV5dKSk/KFsrXFwtKCBdKT8oWyQjXSk/KDApPyhcXGQrKT8oLCk/KFxcLlxcZCspPyh+KT8oW2EteiVdKT8kL2k7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgaWYgKCEobWF0Y2ggPSByZS5leGVjKHNwZWNpZmllcikpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGZvcm1hdDogXCIgKyBzcGVjaWZpZXIpO1xuICB2YXIgbWF0Y2g7XG4gIHJldHVybiBuZXcgRm9ybWF0U3BlY2lmaWVyKHtcbiAgICBmaWxsOiBtYXRjaFsxXSxcbiAgICBhbGlnbjogbWF0Y2hbMl0sXG4gICAgc2lnbjogbWF0Y2hbM10sXG4gICAgc3ltYm9sOiBtYXRjaFs0XSxcbiAgICB6ZXJvOiBtYXRjaFs1XSxcbiAgICB3aWR0aDogbWF0Y2hbNl0sXG4gICAgY29tbWE6IG1hdGNoWzddLFxuICAgIHByZWNpc2lvbjogbWF0Y2hbOF0gJiYgbWF0Y2hbOF0uc2xpY2UoMSksXG4gICAgdHJpbTogbWF0Y2hbOV0sXG4gICAgdHlwZTogbWF0Y2hbMTBdXG4gIH0pO1xufVxuXG5mb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlID0gRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZTsgLy8gaW5zdGFuY2VvZlxuXG5leHBvcnQgZnVuY3Rpb24gRm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICB0aGlzLmZpbGwgPSBzcGVjaWZpZXIuZmlsbCA9PT0gdW5kZWZpbmVkID8gXCIgXCIgOiBzcGVjaWZpZXIuZmlsbCArIFwiXCI7XG4gIHRoaXMuYWxpZ24gPSBzcGVjaWZpZXIuYWxpZ24gPT09IHVuZGVmaW5lZCA/IFwiPlwiIDogc3BlY2lmaWVyLmFsaWduICsgXCJcIjtcbiAgdGhpcy5zaWduID0gc3BlY2lmaWVyLnNpZ24gPT09IHVuZGVmaW5lZCA/IFwiLVwiIDogc3BlY2lmaWVyLnNpZ24gKyBcIlwiO1xuICB0aGlzLnN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBzcGVjaWZpZXIuc3ltYm9sICsgXCJcIjtcbiAgdGhpcy56ZXJvID0gISFzcGVjaWZpZXIuemVybztcbiAgdGhpcy53aWR0aCA9IHNwZWNpZmllci53aWR0aCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogK3NwZWNpZmllci53aWR0aDtcbiAgdGhpcy5jb21tYSA9ICEhc3BlY2lmaWVyLmNvbW1hO1xuICB0aGlzLnByZWNpc2lvbiA9IHNwZWNpZmllci5wcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6ICtzcGVjaWZpZXIucHJlY2lzaW9uO1xuICB0aGlzLnRyaW0gPSAhIXNwZWNpZmllci50cmltO1xuICB0aGlzLnR5cGUgPSBzcGVjaWZpZXIudHlwZSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IHNwZWNpZmllci50eXBlICsgXCJcIjtcbn1cblxuRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5maWxsXG4gICAgICArIHRoaXMuYWxpZ25cbiAgICAgICsgdGhpcy5zaWduXG4gICAgICArIHRoaXMuc3ltYm9sXG4gICAgICArICh0aGlzLnplcm8gPyBcIjBcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLndpZHRoID09PSB1bmRlZmluZWQgPyBcIlwiIDogTWF0aC5tYXgoMSwgdGhpcy53aWR0aCB8IDApKVxuICAgICAgKyAodGhpcy5jb21tYSA/IFwiLFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMucHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyBcIlwiIDogXCIuXCIgKyBNYXRoLm1heCgwLCB0aGlzLnByZWNpc2lvbiB8IDApKVxuICAgICAgKyAodGhpcy50cmltID8gXCJ+XCIgOiBcIlwiKVxuICAgICAgKyB0aGlzLnR5cGU7XG59O1xuIiwiaW1wb3J0IHtmb3JtYXREZWNpbWFsUGFydHN9IGZyb20gXCIuL2Zvcm1hdERlY2ltYWwuanNcIjtcblxuZXhwb3J0IHZhciBwcmVmaXhFeHBvbmVudDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICB2YXIgZCA9IGZvcm1hdERlY2ltYWxQYXJ0cyh4LCBwKTtcbiAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICBleHBvbmVudCA9IGRbMV0sXG4gICAgICBpID0gZXhwb25lbnQgLSAocHJlZml4RXhwb25lbnQgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCAvIDMpKSkgKiAzKSArIDEsXG4gICAgICBuID0gY29lZmZpY2llbnQubGVuZ3RoO1xuICByZXR1cm4gaSA9PT0gbiA/IGNvZWZmaWNpZW50XG4gICAgICA6IGkgPiBuID8gY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoaSAtIG4gKyAxKS5qb2luKFwiMFwiKVxuICAgICAgOiBpID4gMCA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGkpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShpKVxuICAgICAgOiBcIjAuXCIgKyBuZXcgQXJyYXkoMSAtIGkpLmpvaW4oXCIwXCIpICsgZm9ybWF0RGVjaW1hbFBhcnRzKHgsIE1hdGgubWF4KDAsIHAgKyBpIC0gMSkpWzBdOyAvLyBsZXNzIHRoYW4gMXkhXG59XG4iLCJpbXBvcnQge2Zvcm1hdERlY2ltYWxQYXJ0c30gZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbFBhcnRzKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXTtcbiAgcmV0dXJuIGV4cG9uZW50IDwgMCA/IFwiMC5cIiArIG5ldyBBcnJheSgtZXhwb25lbnQpLmpvaW4oXCIwXCIpICsgY29lZmZpY2llbnRcbiAgICAgIDogY29lZmZpY2llbnQubGVuZ3RoID4gZXhwb25lbnQgKyAxID8gY29lZmZpY2llbnQuc2xpY2UoMCwgZXhwb25lbnQgKyAxKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoZXhwb25lbnQgKyAxKVxuICAgICAgOiBjb2VmZmljaWVudCArIG5ldyBBcnJheShleHBvbmVudCAtIGNvZWZmaWNpZW50Lmxlbmd0aCArIDIpLmpvaW4oXCIwXCIpO1xufVxuIiwiaW1wb3J0IGZvcm1hdERlY2ltYWwgZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuaW1wb3J0IGZvcm1hdFByZWZpeEF1dG8gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0by5qc1wiO1xuaW1wb3J0IGZvcm1hdFJvdW5kZWQgZnJvbSBcIi4vZm9ybWF0Um91bmRlZC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFwiJVwiOiAoeCwgcCkgPT4gKHggKiAxMDApLnRvRml4ZWQocCksXG4gIFwiYlwiOiAoeCkgPT4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygyKSxcbiAgXCJjXCI6ICh4KSA9PiB4ICsgXCJcIixcbiAgXCJkXCI6IGZvcm1hdERlY2ltYWwsXG4gIFwiZVwiOiAoeCwgcCkgPT4geC50b0V4cG9uZW50aWFsKHApLFxuICBcImZcIjogKHgsIHApID0+IHgudG9GaXhlZChwKSxcbiAgXCJnXCI6ICh4LCBwKSA9PiB4LnRvUHJlY2lzaW9uKHApLFxuICBcIm9cIjogKHgpID0+IE1hdGgucm91bmQoeCkudG9TdHJpbmcoOCksXG4gIFwicFwiOiAoeCwgcCkgPT4gZm9ybWF0Um91bmRlZCh4ICogMTAwLCBwKSxcbiAgXCJyXCI6IGZvcm1hdFJvdW5kZWQsXG4gIFwic1wiOiBmb3JtYXRQcmVmaXhBdXRvLFxuICBcIlhcIjogKHgpID0+IE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCksXG4gIFwieFwiOiAoeCkgPT4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNilcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5pbXBvcnQgZm9ybWF0R3JvdXAgZnJvbSBcIi4vZm9ybWF0R3JvdXAuanNcIjtcbmltcG9ydCBmb3JtYXROdW1lcmFscyBmcm9tIFwiLi9mb3JtYXROdW1lcmFscy5qc1wiO1xuaW1wb3J0IGZvcm1hdFNwZWNpZmllciBmcm9tIFwiLi9mb3JtYXRTcGVjaWZpZXIuanNcIjtcbmltcG9ydCBmb3JtYXRUcmltIGZyb20gXCIuL2Zvcm1hdFRyaW0uanNcIjtcbmltcG9ydCBmb3JtYXRUeXBlcyBmcm9tIFwiLi9mb3JtYXRUeXBlcy5qc1wiO1xuaW1wb3J0IHtwcmVmaXhFeHBvbmVudH0gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0by5qc1wiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5LmpzXCI7XG5cbnZhciBtYXAgPSBBcnJheS5wcm90b3R5cGUubWFwLFxuICAgIHByZWZpeGVzID0gW1wieVwiLFwielwiLFwiYVwiLFwiZlwiLFwicFwiLFwiblwiLFwiwrVcIixcIm1cIixcIlwiLFwia1wiLFwiTVwiLFwiR1wiLFwiVFwiLFwiUFwiLFwiRVwiLFwiWlwiLFwiWVwiXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obG9jYWxlKSB7XG4gIHZhciBncm91cCA9IGxvY2FsZS5ncm91cGluZyA9PT0gdW5kZWZpbmVkIHx8IGxvY2FsZS50aG91c2FuZHMgPT09IHVuZGVmaW5lZCA/IGlkZW50aXR5IDogZm9ybWF0R3JvdXAobWFwLmNhbGwobG9jYWxlLmdyb3VwaW5nLCBOdW1iZXIpLCBsb2NhbGUudGhvdXNhbmRzICsgXCJcIiksXG4gICAgICBjdXJyZW5jeVByZWZpeCA9IGxvY2FsZS5jdXJyZW5jeSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IGxvY2FsZS5jdXJyZW5jeVswXSArIFwiXCIsXG4gICAgICBjdXJyZW5jeVN1ZmZpeCA9IGxvY2FsZS5jdXJyZW5jeSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IGxvY2FsZS5jdXJyZW5jeVsxXSArIFwiXCIsXG4gICAgICBkZWNpbWFsID0gbG9jYWxlLmRlY2ltYWwgPT09IHVuZGVmaW5lZCA/IFwiLlwiIDogbG9jYWxlLmRlY2ltYWwgKyBcIlwiLFxuICAgICAgbnVtZXJhbHMgPSBsb2NhbGUubnVtZXJhbHMgPT09IHVuZGVmaW5lZCA/IGlkZW50aXR5IDogZm9ybWF0TnVtZXJhbHMobWFwLmNhbGwobG9jYWxlLm51bWVyYWxzLCBTdHJpbmcpKSxcbiAgICAgIHBlcmNlbnQgPSBsb2NhbGUucGVyY2VudCA9PT0gdW5kZWZpbmVkID8gXCIlXCIgOiBsb2NhbGUucGVyY2VudCArIFwiXCIsXG4gICAgICBtaW51cyA9IGxvY2FsZS5taW51cyA9PT0gdW5kZWZpbmVkID8gXCLiiJJcIiA6IGxvY2FsZS5taW51cyArIFwiXCIsXG4gICAgICBuYW4gPSBsb2NhbGUubmFuID09PSB1bmRlZmluZWQgPyBcIk5hTlwiIDogbG9jYWxlLm5hbiArIFwiXCI7XG5cbiAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllcikge1xuICAgIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpO1xuXG4gICAgdmFyIGZpbGwgPSBzcGVjaWZpZXIuZmlsbCxcbiAgICAgICAgYWxpZ24gPSBzcGVjaWZpZXIuYWxpZ24sXG4gICAgICAgIHNpZ24gPSBzcGVjaWZpZXIuc2lnbixcbiAgICAgICAgc3ltYm9sID0gc3BlY2lmaWVyLnN5bWJvbCxcbiAgICAgICAgemVybyA9IHNwZWNpZmllci56ZXJvLFxuICAgICAgICB3aWR0aCA9IHNwZWNpZmllci53aWR0aCxcbiAgICAgICAgY29tbWEgPSBzcGVjaWZpZXIuY29tbWEsXG4gICAgICAgIHByZWNpc2lvbiA9IHNwZWNpZmllci5wcmVjaXNpb24sXG4gICAgICAgIHRyaW0gPSBzcGVjaWZpZXIudHJpbSxcbiAgICAgICAgdHlwZSA9IHNwZWNpZmllci50eXBlO1xuXG4gICAgLy8gVGhlIFwiblwiIHR5cGUgaXMgYW4gYWxpYXMgZm9yIFwiLGdcIi5cbiAgICBpZiAodHlwZSA9PT0gXCJuXCIpIGNvbW1hID0gdHJ1ZSwgdHlwZSA9IFwiZ1wiO1xuXG4gICAgLy8gVGhlIFwiXCIgdHlwZSwgYW5kIGFueSBpbnZhbGlkIHR5cGUsIGlzIGFuIGFsaWFzIGZvciBcIi4xMn5nXCIuXG4gICAgZWxzZSBpZiAoIWZvcm1hdFR5cGVzW3R5cGVdKSBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCAmJiAocHJlY2lzaW9uID0gMTIpLCB0cmltID0gdHJ1ZSwgdHlwZSA9IFwiZ1wiO1xuXG4gICAgLy8gSWYgemVybyBmaWxsIGlzIHNwZWNpZmllZCwgcGFkZGluZyBnb2VzIGFmdGVyIHNpZ24gYW5kIGJlZm9yZSBkaWdpdHMuXG4gICAgaWYgKHplcm8gfHwgKGZpbGwgPT09IFwiMFwiICYmIGFsaWduID09PSBcIj1cIikpIHplcm8gPSB0cnVlLCBmaWxsID0gXCIwXCIsIGFsaWduID0gXCI9XCI7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAvLyBGb3IgU0ktcHJlZml4LCB0aGUgc3VmZml4IGlzIGxhemlseSBjb21wdXRlZC5cbiAgICB2YXIgcHJlZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5UHJlZml4IDogc3ltYm9sID09PSBcIiNcIiAmJiAvW2JveFhdLy50ZXN0KHR5cGUpID8gXCIwXCIgKyB0eXBlLnRvTG93ZXJDYXNlKCkgOiBcIlwiLFxuICAgICAgICBzdWZmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lTdWZmaXggOiAvWyVwXS8udGVzdCh0eXBlKSA/IHBlcmNlbnQgOiBcIlwiO1xuXG4gICAgLy8gV2hhdCBmb3JtYXQgZnVuY3Rpb24gc2hvdWxkIHdlIHVzZT9cbiAgICAvLyBJcyB0aGlzIGFuIGludGVnZXIgdHlwZT9cbiAgICAvLyBDYW4gdGhpcyB0eXBlIGdlbmVyYXRlIGV4cG9uZW50aWFsIG5vdGF0aW9uP1xuICAgIHZhciBmb3JtYXRUeXBlID0gZm9ybWF0VHlwZXNbdHlwZV0sXG4gICAgICAgIG1heWJlU3VmZml4ID0gL1tkZWZncHJzJV0vLnRlc3QodHlwZSk7XG5cbiAgICAvLyBTZXQgdGhlIGRlZmF1bHQgcHJlY2lzaW9uIGlmIG5vdCBzcGVjaWZpZWQsXG4gICAgLy8gb3IgY2xhbXAgdGhlIHNwZWNpZmllZCBwcmVjaXNpb24gdG8gdGhlIHN1cHBvcnRlZCByYW5nZS5cbiAgICAvLyBGb3Igc2lnbmlmaWNhbnQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFsxLCAyMV0uXG4gICAgLy8gRm9yIGZpeGVkIHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMCwgMjBdLlxuICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gNlxuICAgICAgICA6IC9bZ3Byc10vLnRlc3QodHlwZSkgPyBNYXRoLm1heCgxLCBNYXRoLm1pbigyMSwgcHJlY2lzaW9uKSlcbiAgICAgICAgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigyMCwgcHJlY2lzaW9uKSk7XG5cbiAgICBmdW5jdGlvbiBmb3JtYXQodmFsdWUpIHtcbiAgICAgIHZhciB2YWx1ZVByZWZpeCA9IHByZWZpeCxcbiAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IHN1ZmZpeCxcbiAgICAgICAgICBpLCBuLCBjO1xuXG4gICAgICBpZiAodHlwZSA9PT0gXCJjXCIpIHtcbiAgICAgICAgdmFsdWVTdWZmaXggPSBmb3JtYXRUeXBlKHZhbHVlKSArIHZhbHVlU3VmZml4O1xuICAgICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9ICt2YWx1ZTtcblxuICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIHNpZ24uIC0wIGlzIG5vdCBsZXNzIHRoYW4gMCwgYnV0IDEgLyAtMCBpcyFcbiAgICAgICAgdmFyIHZhbHVlTmVnYXRpdmUgPSB2YWx1ZSA8IDAgfHwgMSAvIHZhbHVlIDwgMDtcblxuICAgICAgICAvLyBQZXJmb3JtIHRoZSBpbml0aWFsIGZvcm1hdHRpbmcuXG4gICAgICAgIHZhbHVlID0gaXNOYU4odmFsdWUpID8gbmFuIDogZm9ybWF0VHlwZShNYXRoLmFicyh2YWx1ZSksIHByZWNpc2lvbik7XG5cbiAgICAgICAgLy8gVHJpbSBpbnNpZ25pZmljYW50IHplcm9zLlxuICAgICAgICBpZiAodHJpbSkgdmFsdWUgPSBmb3JtYXRUcmltKHZhbHVlKTtcblxuICAgICAgICAvLyBJZiBhIG5lZ2F0aXZlIHZhbHVlIHJvdW5kcyB0byB6ZXJvIGFmdGVyIGZvcm1hdHRpbmcsIGFuZCBubyBleHBsaWNpdCBwb3NpdGl2ZSBzaWduIGlzIHJlcXVlc3RlZCwgaGlkZSB0aGUgc2lnbi5cbiAgICAgICAgaWYgKHZhbHVlTmVnYXRpdmUgJiYgK3ZhbHVlID09PSAwICYmIHNpZ24gIT09IFwiK1wiKSB2YWx1ZU5lZ2F0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgICAgIHZhbHVlUHJlZml4ID0gKHZhbHVlTmVnYXRpdmUgPyAoc2lnbiA9PT0gXCIoXCIgPyBzaWduIDogbWludXMpIDogc2lnbiA9PT0gXCItXCIgfHwgc2lnbiA9PT0gXCIoXCIgPyBcIlwiIDogc2lnbikgKyB2YWx1ZVByZWZpeDtcbiAgICAgICAgdmFsdWVTdWZmaXggPSAodHlwZSA9PT0gXCJzXCIgPyBwcmVmaXhlc1s4ICsgcHJlZml4RXhwb25lbnQgLyAzXSA6IFwiXCIpICsgdmFsdWVTdWZmaXggKyAodmFsdWVOZWdhdGl2ZSAmJiBzaWduID09PSBcIihcIiA/IFwiKVwiIDogXCJcIik7XG5cbiAgICAgICAgLy8gQnJlYWsgdGhlIGZvcm1hdHRlZCB2YWx1ZSBpbnRvIHRoZSBpbnRlZ2VyIOKAnHZhbHVl4oCdIHBhcnQgdGhhdCBjYW4gYmVcbiAgICAgICAgLy8gZ3JvdXBlZCwgYW5kIGZyYWN0aW9uYWwgb3IgZXhwb25lbnRpYWwg4oCcc3VmZml44oCdIHBhcnQgdGhhdCBpcyBub3QuXG4gICAgICAgIGlmIChtYXliZVN1ZmZpeCkge1xuICAgICAgICAgIGkgPSAtMSwgbiA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgICAgaWYgKGMgPSB2YWx1ZS5jaGFyQ29kZUF0KGkpLCA0OCA+IGMgfHwgYyA+IDU3KSB7XG4gICAgICAgICAgICAgIHZhbHVlU3VmZml4ID0gKGMgPT09IDQ2ID8gZGVjaW1hbCArIHZhbHVlLnNsaWNlKGkgKyAxKSA6IHZhbHVlLnNsaWNlKGkpKSArIHZhbHVlU3VmZml4O1xuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIG5vdCBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBiZWZvcmUgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiAhemVybykgdmFsdWUgPSBncm91cCh2YWx1ZSwgSW5maW5pdHkpO1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBwYWRkaW5nLlxuICAgICAgdmFyIGxlbmd0aCA9IHZhbHVlUHJlZml4Lmxlbmd0aCArIHZhbHVlLmxlbmd0aCArIHZhbHVlU3VmZml4Lmxlbmd0aCxcbiAgICAgICAgICBwYWRkaW5nID0gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpIDogXCJcIjtcblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGFmdGVyIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgemVybykgdmFsdWUgPSBncm91cChwYWRkaW5nICsgdmFsdWUsIHBhZGRpbmcubGVuZ3RoID8gd2lkdGggLSB2YWx1ZVN1ZmZpeC5sZW5ndGggOiBJbmZpbml0eSksIHBhZGRpbmcgPSBcIlwiO1xuXG4gICAgICAvLyBSZWNvbnN0cnVjdCB0aGUgZmluYWwgb3V0cHV0IGJhc2VkIG9uIHRoZSBkZXNpcmVkIGFsaWdubWVudC5cbiAgICAgIHN3aXRjaCAoYWxpZ24pIHtcbiAgICAgICAgY2FzZSBcIjxcIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nOyBicmVhaztcbiAgICAgICAgY2FzZSBcIj1cIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHBhZGRpbmcgKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgICAgY2FzZSBcIl5cIjogdmFsdWUgPSBwYWRkaW5nLnNsaWNlKDAsIGxlbmd0aCA9IHBhZGRpbmcubGVuZ3RoID4+IDEpICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZy5zbGljZShsZW5ndGgpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDogdmFsdWUgPSBwYWRkaW5nICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bWVyYWxzKHZhbHVlKTtcbiAgICB9XG5cbiAgICBmb3JtYXQudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzcGVjaWZpZXIgKyBcIlwiO1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9ybWF0O1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpIHtcbiAgICB2YXIgZiA9IG5ld0Zvcm1hdCgoc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciksIHNwZWNpZmllci50eXBlID0gXCJmXCIsIHNwZWNpZmllcikpLFxuICAgICAgICBlID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMsXG4gICAgICAgIGsgPSBNYXRoLnBvdygxMCwgLWUpLFxuICAgICAgICBwcmVmaXggPSBwcmVmaXhlc1s4ICsgZSAvIDNdO1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGYoayAqIHZhbHVlKSArIHByZWZpeDtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IG5ld0Zvcm1hdCxcbiAgICBmb3JtYXRQcmVmaXg6IGZvcm1hdFByZWZpeFxuICB9O1xufVxuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGUuanNcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgZm9ybWF0O1xuZXhwb3J0IHZhciBmb3JtYXRQcmVmaXg7XG5cbmRlZmF1bHRMb2NhbGUoe1xuICB0aG91c2FuZHM6IFwiLFwiLFxuICBncm91cGluZzogWzNdLFxuICBjdXJyZW5jeTogW1wiJFwiLCBcIlwiXVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUoZGVmaW5pdGlvbikge1xuICBsb2NhbGUgPSBmb3JtYXRMb2NhbGUoZGVmaW5pdGlvbik7XG4gIGZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gIGZvcm1hdFByZWZpeCA9IGxvY2FsZS5mb3JtYXRQcmVmaXg7XG4gIHJldHVybiBsb2NhbGU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihncm91cGluZywgdGhvdXNhbmRzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgd2lkdGgpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aCxcbiAgICAgICAgdCA9IFtdLFxuICAgICAgICBqID0gMCxcbiAgICAgICAgZyA9IGdyb3VwaW5nWzBdLFxuICAgICAgICBsZW5ndGggPSAwO1xuXG4gICAgd2hpbGUgKGkgPiAwICYmIGcgPiAwKSB7XG4gICAgICBpZiAobGVuZ3RoICsgZyArIDEgPiB3aWR0aCkgZyA9IE1hdGgubWF4KDEsIHdpZHRoIC0gbGVuZ3RoKTtcbiAgICAgIHQucHVzaCh2YWx1ZS5zdWJzdHJpbmcoaSAtPSBnLCBpICsgZykpO1xuICAgICAgaWYgKChsZW5ndGggKz0gZyArIDEpID4gd2lkdGgpIGJyZWFrO1xuICAgICAgZyA9IGdyb3VwaW5nW2ogPSAoaiArIDEpICUgZ3JvdXBpbmcubGVuZ3RoXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdC5yZXZlcnNlKCkuam9pbih0aG91c2FuZHMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obnVtZXJhbHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1swLTldL2csIGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiBudW1lcmFsc1sraV07XG4gICAgfSk7XG4gIH07XG59XG4iLCIvLyBUcmltcyBpbnNpZ25pZmljYW50IHplcm9zLCBlLmcuLCByZXBsYWNlcyAxLjIwMDBrIHdpdGggMS4yay5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHMpIHtcbiAgb3V0OiBmb3IgKHZhciBuID0gcy5sZW5ndGgsIGkgPSAxLCBpMCA9IC0xLCBpMTsgaSA8IG47ICsraSkge1xuICAgIHN3aXRjaCAoc1tpXSkge1xuICAgICAgY2FzZSBcIi5cIjogaTAgPSBpMSA9IGk7IGJyZWFrO1xuICAgICAgY2FzZSBcIjBcIjogaWYgKGkwID09PSAwKSBpMCA9IGk7IGkxID0gaTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBpZiAoIStzW2ldKSBicmVhayBvdXQ7IGlmIChpMCA+IDApIGkwID0gMDsgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBpMCA+IDAgPyBzLnNsaWNlKDAsIGkwKSArIHMuc2xpY2UoaTEgKyAxKSA6IHM7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgLWV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCwgdmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzIC0gZXhwb25lbnQoTWF0aC5hYnMoc3RlcCkpKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCBtYXgpIHtcbiAgc3RlcCA9IE1hdGguYWJzKHN0ZXApLCBtYXggPSBNYXRoLmFicyhtYXgpIC0gc3RlcDtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIGV4cG9uZW50KG1heCkgLSBleHBvbmVudChzdGVwKSkgKyAxO1xufVxuIiwiZXhwb3J0IHZhciBlcHNpbG9uID0gMWUtNjtcbmV4cG9ydCB2YXIgZXBzaWxvbjIgPSAxZS0xMjtcbmV4cG9ydCB2YXIgcGkgPSBNYXRoLlBJO1xuZXhwb3J0IHZhciBoYWxmUGkgPSBwaSAvIDI7XG5leHBvcnQgdmFyIHF1YXJ0ZXJQaSA9IHBpIC8gNDtcbmV4cG9ydCB2YXIgdGF1ID0gcGkgKiAyO1xuXG5leHBvcnQgdmFyIGRlZ3JlZXMgPSAxODAgLyBwaTtcbmV4cG9ydCB2YXIgcmFkaWFucyA9IHBpIC8gMTgwO1xuXG5leHBvcnQgdmFyIGFicyA9IE1hdGguYWJzO1xuZXhwb3J0IHZhciBhdGFuID0gTWF0aC5hdGFuO1xuZXhwb3J0IHZhciBhdGFuMiA9IE1hdGguYXRhbjI7XG5leHBvcnQgdmFyIGNvcyA9IE1hdGguY29zO1xuZXhwb3J0IHZhciBjZWlsID0gTWF0aC5jZWlsO1xuZXhwb3J0IHZhciBleHAgPSBNYXRoLmV4cDtcbmV4cG9ydCB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuZXhwb3J0IHZhciBoeXBvdCA9IE1hdGguaHlwb3Q7XG5leHBvcnQgdmFyIGxvZyA9IE1hdGgubG9nO1xuZXhwb3J0IHZhciBwb3cgPSBNYXRoLnBvdztcbmV4cG9ydCB2YXIgc2luID0gTWF0aC5zaW47XG5leHBvcnQgdmFyIHNpZ24gPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24oeCkgeyByZXR1cm4geCA+IDAgPyAxIDogeCA8IDAgPyAtMSA6IDA7IH07XG5leHBvcnQgdmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG5leHBvcnQgdmFyIHRhbiA9IE1hdGgudGFuO1xuXG5leHBvcnQgZnVuY3Rpb24gYWNvcyh4KSB7XG4gIHJldHVybiB4ID4gMSA/IDAgOiB4IDwgLTEgPyBwaSA6IE1hdGguYWNvcyh4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzaW4oeCkge1xuICByZXR1cm4geCA+IDEgPyBoYWxmUGkgOiB4IDwgLTEgPyAtaGFsZlBpIDogTWF0aC5hc2luKHgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGF2ZXJzaW4oeCkge1xuICByZXR1cm4gKHggPSBzaW4oeCAvIDIpKSAqIHg7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub29wKCkge31cbiIsImZ1bmN0aW9uIHN0cmVhbUdlb21ldHJ5KGdlb21ldHJ5LCBzdHJlYW0pIHtcbiAgaWYgKGdlb21ldHJ5ICYmIHN0cmVhbUdlb21ldHJ5VHlwZS5oYXNPd25Qcm9wZXJ0eShnZW9tZXRyeS50eXBlKSkge1xuICAgIHN0cmVhbUdlb21ldHJ5VHlwZVtnZW9tZXRyeS50eXBlXShnZW9tZXRyeSwgc3RyZWFtKTtcbiAgfVxufVxuXG52YXIgc3RyZWFtT2JqZWN0VHlwZSA9IHtcbiAgRmVhdHVyZTogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBzdHJlYW1HZW9tZXRyeShvYmplY3QuZ2VvbWV0cnksIHN0cmVhbSk7XG4gIH0sXG4gIEZlYXR1cmVDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHZhciBmZWF0dXJlcyA9IG9iamVjdC5mZWF0dXJlcywgaSA9IC0xLCBuID0gZmVhdHVyZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1HZW9tZXRyeShmZWF0dXJlc1tpXS5nZW9tZXRyeSwgc3RyZWFtKTtcbiAgfVxufTtcblxudmFyIHN0cmVhbUdlb21ldHJ5VHlwZSA9IHtcbiAgU3BoZXJlOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHN0cmVhbS5zcGhlcmUoKTtcbiAgfSxcbiAgUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgb2JqZWN0ID0gb2JqZWN0LmNvb3JkaW5hdGVzO1xuICAgIHN0cmVhbS5wb2ludChvYmplY3RbMF0sIG9iamVjdFsxXSwgb2JqZWN0WzJdKTtcbiAgfSxcbiAgTXVsdGlQb2ludDogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgb2JqZWN0ID0gY29vcmRpbmF0ZXNbaV0sIHN0cmVhbS5wb2ludChvYmplY3RbMF0sIG9iamVjdFsxXSwgb2JqZWN0WzJdKTtcbiAgfSxcbiAgTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBzdHJlYW1MaW5lKG9iamVjdC5jb29yZGluYXRlcywgc3RyZWFtLCAwKTtcbiAgfSxcbiAgTXVsdGlMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1MaW5lKGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0sIDApO1xuICB9LFxuICBQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHN0cmVhbVBvbHlnb24ob2JqZWN0LmNvb3JkaW5hdGVzLCBzdHJlYW0pO1xuICB9LFxuICBNdWx0aVBvbHlnb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbVBvbHlnb24oY29vcmRpbmF0ZXNbaV0sIHN0cmVhbSk7XG4gIH0sXG4gIEdlb21ldHJ5Q29sbGVjdGlvbjogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICB2YXIgZ2VvbWV0cmllcyA9IG9iamVjdC5nZW9tZXRyaWVzLCBpID0gLTEsIG4gPSBnZW9tZXRyaWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtR2VvbWV0cnkoZ2VvbWV0cmllc1tpXSwgc3RyZWFtKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RyZWFtTGluZShjb29yZGluYXRlcywgc3RyZWFtLCBjbG9zZWQpIHtcbiAgdmFyIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aCAtIGNsb3NlZCwgY29vcmRpbmF0ZTtcbiAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICB3aGlsZSAoKytpIDwgbikgY29vcmRpbmF0ZSA9IGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0ucG9pbnQoY29vcmRpbmF0ZVswXSwgY29vcmRpbmF0ZVsxXSwgY29vcmRpbmF0ZVsyXSk7XG4gIHN0cmVhbS5saW5lRW5kKCk7XG59XG5cbmZ1bmN0aW9uIHN0cmVhbVBvbHlnb24oY29vcmRpbmF0ZXMsIHN0cmVhbSkge1xuICB2YXIgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICBzdHJlYW0ucG9seWdvblN0YXJ0KCk7XG4gIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1MaW5lKGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0sIDEpO1xuICBzdHJlYW0ucG9seWdvbkVuZCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICBpZiAob2JqZWN0ICYmIHN0cmVhbU9iamVjdFR5cGUuaGFzT3duUHJvcGVydHkob2JqZWN0LnR5cGUpKSB7XG4gICAgc3RyZWFtT2JqZWN0VHlwZVtvYmplY3QudHlwZV0ob2JqZWN0LCBzdHJlYW0pO1xuICB9IGVsc2Uge1xuICAgIHN0cmVhbUdlb21ldHJ5KG9iamVjdCwgc3RyZWFtKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtBZGRlcn0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2F0YW4yLCBjb3MsIHF1YXJ0ZXJQaSwgcmFkaWFucywgc2luLCB0YXV9IGZyb20gXCIuL21hdGguanNcIjtcbmltcG9ydCBub29wIGZyb20gXCIuL25vb3AuanNcIjtcbmltcG9ydCBzdHJlYW0gZnJvbSBcIi4vc3RyZWFtLmpzXCI7XG5cbmV4cG9ydCB2YXIgYXJlYVJpbmdTdW0gPSBuZXcgQWRkZXIoKTtcblxuLy8gaGVsbG8/XG5cbnZhciBhcmVhU3VtID0gbmV3IEFkZGVyKCksXG4gICAgbGFtYmRhMDAsXG4gICAgcGhpMDAsXG4gICAgbGFtYmRhMCxcbiAgICBjb3NQaGkwLFxuICAgIHNpblBoaTA7XG5cbmV4cG9ydCB2YXIgYXJlYVN0cmVhbSA9IHtcbiAgcG9pbnQ6IG5vb3AsXG4gIGxpbmVTdGFydDogbm9vcCxcbiAgbGluZUVuZDogbm9vcCxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBhcmVhUmluZ1N1bSA9IG5ldyBBZGRlcigpO1xuICAgIGFyZWFTdHJlYW0ubGluZVN0YXJ0ID0gYXJlYVJpbmdTdGFydDtcbiAgICBhcmVhU3RyZWFtLmxpbmVFbmQgPSBhcmVhUmluZ0VuZDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZWFSaW5nID0gK2FyZWFSaW5nU3VtO1xuICAgIGFyZWFTdW0uYWRkKGFyZWFSaW5nIDwgMCA/IHRhdSArIGFyZWFSaW5nIDogYXJlYVJpbmcpO1xuICAgIHRoaXMubGluZVN0YXJ0ID0gdGhpcy5saW5lRW5kID0gdGhpcy5wb2ludCA9IG5vb3A7XG4gIH0sXG4gIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgYXJlYVN1bS5hZGQodGF1KTtcbiAgfVxufTtcblxuZnVuY3Rpb24gYXJlYVJpbmdTdGFydCgpIHtcbiAgYXJlYVN0cmVhbS5wb2ludCA9IGFyZWFQb2ludEZpcnN0O1xufVxuXG5mdW5jdGlvbiBhcmVhUmluZ0VuZCgpIHtcbiAgYXJlYVBvaW50KGxhbWJkYTAwLCBwaGkwMCk7XG59XG5cbmZ1bmN0aW9uIGFyZWFQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gIGFyZWFTdHJlYW0ucG9pbnQgPSBhcmVhUG9pbnQ7XG4gIGxhbWJkYTAwID0gbGFtYmRhLCBwaGkwMCA9IHBoaTtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICBsYW1iZGEwID0gbGFtYmRhLCBjb3NQaGkwID0gY29zKHBoaSA9IHBoaSAvIDIgKyBxdWFydGVyUGkpLCBzaW5QaGkwID0gc2luKHBoaSk7XG59XG5cbmZ1bmN0aW9uIGFyZWFQb2ludChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIHBoaSA9IHBoaSAvIDIgKyBxdWFydGVyUGk7IC8vIGhhbGYgdGhlIGFuZ3VsYXIgZGlzdGFuY2UgZnJvbSBzb3V0aCBwb2xlXG5cbiAgLy8gU3BoZXJpY2FsIGV4Y2VzcyBFIGZvciBhIHNwaGVyaWNhbCB0cmlhbmdsZSB3aXRoIHZlcnRpY2VzOiBzb3V0aCBwb2xlLFxuICAvLyBwcmV2aW91cyBwb2ludCwgY3VycmVudCBwb2ludC4gIFVzZXMgYSBmb3JtdWxhIGRlcml2ZWQgZnJvbSBDYWdub2xp4oCZc1xuICAvLyB0aGVvcmVtLiAgU2VlIFRvZGh1bnRlciwgU3BoZXJpY2FsIFRyaWcuICgxODcxKSwgU2VjLiAxMDMsIEVxLiAoMikuXG4gIHZhciBkTGFtYmRhID0gbGFtYmRhIC0gbGFtYmRhMCxcbiAgICAgIHNkTGFtYmRhID0gZExhbWJkYSA+PSAwID8gMSA6IC0xLFxuICAgICAgYWRMYW1iZGEgPSBzZExhbWJkYSAqIGRMYW1iZGEsXG4gICAgICBjb3NQaGkgPSBjb3MocGhpKSxcbiAgICAgIHNpblBoaSA9IHNpbihwaGkpLFxuICAgICAgayA9IHNpblBoaTAgKiBzaW5QaGksXG4gICAgICB1ID0gY29zUGhpMCAqIGNvc1BoaSArIGsgKiBjb3MoYWRMYW1iZGEpLFxuICAgICAgdiA9IGsgKiBzZExhbWJkYSAqIHNpbihhZExhbWJkYSk7XG4gIGFyZWFSaW5nU3VtLmFkZChhdGFuMih2LCB1KSk7XG5cbiAgLy8gQWR2YW5jZSB0aGUgcHJldmlvdXMgcG9pbnRzLlxuICBsYW1iZGEwID0gbGFtYmRhLCBjb3NQaGkwID0gY29zUGhpLCBzaW5QaGkwID0gc2luUGhpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmplY3QpIHtcbiAgYXJlYVN1bSA9IG5ldyBBZGRlcigpO1xuICBzdHJlYW0ob2JqZWN0LCBhcmVhU3RyZWFtKTtcbiAgcmV0dXJuIGFyZWFTdW0gKiAyO1xufVxuIiwiaW1wb3J0IHtBZGRlcn0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2FyZWFTdHJlYW0sIGFyZWFSaW5nU3VtfSBmcm9tIFwiLi9hcmVhLmpzXCI7XG5pbXBvcnQge2NhcnRlc2lhbiwgY2FydGVzaWFuQ3Jvc3MsIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UsIHNwaGVyaWNhbH0gZnJvbSBcIi4vY2FydGVzaWFuLmpzXCI7XG5pbXBvcnQge2FicywgZGVncmVlcywgZXBzaWxvbiwgcmFkaWFuc30gZnJvbSBcIi4vbWF0aC5qc1wiO1xuaW1wb3J0IHN0cmVhbSBmcm9tIFwiLi9zdHJlYW0uanNcIjtcblxudmFyIGxhbWJkYTAsIHBoaTAsIGxhbWJkYTEsIHBoaTEsIC8vIGJvdW5kc1xuICAgIGxhbWJkYTIsIC8vIHByZXZpb3VzIGxhbWJkYS1jb29yZGluYXRlXG4gICAgbGFtYmRhMDAsIHBoaTAwLCAvLyBmaXJzdCBwb2ludFxuICAgIHAwLCAvLyBwcmV2aW91cyAzRCBwb2ludFxuICAgIGRlbHRhU3VtLFxuICAgIHJhbmdlcyxcbiAgICByYW5nZTtcblxudmFyIGJvdW5kc1N0cmVhbSA9IHtcbiAgcG9pbnQ6IGJvdW5kc1BvaW50LFxuICBsaW5lU3RhcnQ6IGJvdW5kc0xpbmVTdGFydCxcbiAgbGluZUVuZDogYm91bmRzTGluZUVuZCxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBib3VuZHNTdHJlYW0ucG9pbnQgPSBib3VuZHNSaW5nUG9pbnQ7XG4gICAgYm91bmRzU3RyZWFtLmxpbmVTdGFydCA9IGJvdW5kc1JpbmdTdGFydDtcbiAgICBib3VuZHNTdHJlYW0ubGluZUVuZCA9IGJvdW5kc1JpbmdFbmQ7XG4gICAgZGVsdGFTdW0gPSBuZXcgQWRkZXIoKTtcbiAgICBhcmVhU3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBhcmVhU3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICBib3VuZHNTdHJlYW0ucG9pbnQgPSBib3VuZHNQb2ludDtcbiAgICBib3VuZHNTdHJlYW0ubGluZVN0YXJ0ID0gYm91bmRzTGluZVN0YXJ0O1xuICAgIGJvdW5kc1N0cmVhbS5saW5lRW5kID0gYm91bmRzTGluZUVuZDtcbiAgICBpZiAoYXJlYVJpbmdTdW0gPCAwKSBsYW1iZGEwID0gLShsYW1iZGExID0gMTgwKSwgcGhpMCA9IC0ocGhpMSA9IDkwKTtcbiAgICBlbHNlIGlmIChkZWx0YVN1bSA+IGVwc2lsb24pIHBoaTEgPSA5MDtcbiAgICBlbHNlIGlmIChkZWx0YVN1bSA8IC1lcHNpbG9uKSBwaGkwID0gLTkwO1xuICAgIHJhbmdlWzBdID0gbGFtYmRhMCwgcmFuZ2VbMV0gPSBsYW1iZGExO1xuICB9LFxuICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgIGxhbWJkYTAgPSAtKGxhbWJkYTEgPSAxODApLCBwaGkwID0gLShwaGkxID0gOTApO1xuICB9XG59O1xuXG5mdW5jdGlvbiBib3VuZHNQb2ludChsYW1iZGEsIHBoaSkge1xuICByYW5nZXMucHVzaChyYW5nZSA9IFtsYW1iZGEwID0gbGFtYmRhLCBsYW1iZGExID0gbGFtYmRhXSk7XG4gIGlmIChwaGkgPCBwaGkwKSBwaGkwID0gcGhpO1xuICBpZiAocGhpID4gcGhpMSkgcGhpMSA9IHBoaTtcbn1cblxuZnVuY3Rpb24gbGluZVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gIHZhciBwID0gY2FydGVzaWFuKFtsYW1iZGEgKiByYWRpYW5zLCBwaGkgKiByYWRpYW5zXSk7XG4gIGlmIChwMCkge1xuICAgIHZhciBub3JtYWwgPSBjYXJ0ZXNpYW5Dcm9zcyhwMCwgcCksXG4gICAgICAgIGVxdWF0b3JpYWwgPSBbbm9ybWFsWzFdLCAtbm9ybWFsWzBdLCAwXSxcbiAgICAgICAgaW5mbGVjdGlvbiA9IGNhcnRlc2lhbkNyb3NzKGVxdWF0b3JpYWwsIG5vcm1hbCk7XG4gICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShpbmZsZWN0aW9uKTtcbiAgICBpbmZsZWN0aW9uID0gc3BoZXJpY2FsKGluZmxlY3Rpb24pO1xuICAgIHZhciBkZWx0YSA9IGxhbWJkYSAtIGxhbWJkYTIsXG4gICAgICAgIHNpZ24gPSBkZWx0YSA+IDAgPyAxIDogLTEsXG4gICAgICAgIGxhbWJkYWkgPSBpbmZsZWN0aW9uWzBdICogZGVncmVlcyAqIHNpZ24sXG4gICAgICAgIHBoaWksXG4gICAgICAgIGFudGltZXJpZGlhbiA9IGFicyhkZWx0YSkgPiAxODA7XG4gICAgaWYgKGFudGltZXJpZGlhbiBeIChzaWduICogbGFtYmRhMiA8IGxhbWJkYWkgJiYgbGFtYmRhaSA8IHNpZ24gKiBsYW1iZGEpKSB7XG4gICAgICBwaGlpID0gaW5mbGVjdGlvblsxXSAqIGRlZ3JlZXM7XG4gICAgICBpZiAocGhpaSA+IHBoaTEpIHBoaTEgPSBwaGlpO1xuICAgIH0gZWxzZSBpZiAobGFtYmRhaSA9IChsYW1iZGFpICsgMzYwKSAlIDM2MCAtIDE4MCwgYW50aW1lcmlkaWFuIF4gKHNpZ24gKiBsYW1iZGEyIDwgbGFtYmRhaSAmJiBsYW1iZGFpIDwgc2lnbiAqIGxhbWJkYSkpIHtcbiAgICAgIHBoaWkgPSAtaW5mbGVjdGlvblsxXSAqIGRlZ3JlZXM7XG4gICAgICBpZiAocGhpaSA8IHBoaTApIHBoaTAgPSBwaGlpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGhpIDwgcGhpMCkgcGhpMCA9IHBoaTtcbiAgICAgIGlmIChwaGkgPiBwaGkxKSBwaGkxID0gcGhpO1xuICAgIH1cbiAgICBpZiAoYW50aW1lcmlkaWFuKSB7XG4gICAgICBpZiAobGFtYmRhIDwgbGFtYmRhMikge1xuICAgICAgICBpZiAoYW5nbGUobGFtYmRhMCwgbGFtYmRhKSA+IGFuZ2xlKGxhbWJkYTAsIGxhbWJkYTEpKSBsYW1iZGExID0gbGFtYmRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYSwgbGFtYmRhMSkgPiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSkgbGFtYmRhMCA9IGxhbWJkYTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxhbWJkYTEgPj0gbGFtYmRhMCkge1xuICAgICAgICBpZiAobGFtYmRhIDwgbGFtYmRhMCkgbGFtYmRhMCA9IGxhbWJkYTtcbiAgICAgICAgaWYgKGxhbWJkYSA+IGxhbWJkYTEpIGxhbWJkYTEgPSBsYW1iZGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobGFtYmRhID4gbGFtYmRhMikge1xuICAgICAgICAgIGlmIChhbmdsZShsYW1iZGEwLCBsYW1iZGEpID4gYW5nbGUobGFtYmRhMCwgbGFtYmRhMSkpIGxhbWJkYTEgPSBsYW1iZGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYSwgbGFtYmRhMSkgPiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSkgbGFtYmRhMCA9IGxhbWJkYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByYW5nZXMucHVzaChyYW5nZSA9IFtsYW1iZGEwID0gbGFtYmRhLCBsYW1iZGExID0gbGFtYmRhXSk7XG4gIH1cbiAgaWYgKHBoaSA8IHBoaTApIHBoaTAgPSBwaGk7XG4gIGlmIChwaGkgPiBwaGkxKSBwaGkxID0gcGhpO1xuICBwMCA9IHAsIGxhbWJkYTIgPSBsYW1iZGE7XG59XG5cbmZ1bmN0aW9uIGJvdW5kc0xpbmVTdGFydCgpIHtcbiAgYm91bmRzU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xufVxuXG5mdW5jdGlvbiBib3VuZHNMaW5lRW5kKCkge1xuICByYW5nZVswXSA9IGxhbWJkYTAsIHJhbmdlWzFdID0gbGFtYmRhMTtcbiAgYm91bmRzU3RyZWFtLnBvaW50ID0gYm91bmRzUG9pbnQ7XG4gIHAwID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gYm91bmRzUmluZ1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGlmIChwMCkge1xuICAgIHZhciBkZWx0YSA9IGxhbWJkYSAtIGxhbWJkYTI7XG4gICAgZGVsdGFTdW0uYWRkKGFicyhkZWx0YSkgPiAxODAgPyBkZWx0YSArIChkZWx0YSA+IDAgPyAzNjAgOiAtMzYwKSA6IGRlbHRhKTtcbiAgfSBlbHNlIHtcbiAgICBsYW1iZGEwMCA9IGxhbWJkYSwgcGhpMDAgPSBwaGk7XG4gIH1cbiAgYXJlYVN0cmVhbS5wb2ludChsYW1iZGEsIHBoaSk7XG4gIGxpbmVQb2ludChsYW1iZGEsIHBoaSk7XG59XG5cbmZ1bmN0aW9uIGJvdW5kc1JpbmdTdGFydCgpIHtcbiAgYXJlYVN0cmVhbS5saW5lU3RhcnQoKTtcbn1cblxuZnVuY3Rpb24gYm91bmRzUmluZ0VuZCgpIHtcbiAgYm91bmRzUmluZ1BvaW50KGxhbWJkYTAwLCBwaGkwMCk7XG4gIGFyZWFTdHJlYW0ubGluZUVuZCgpO1xuICBpZiAoYWJzKGRlbHRhU3VtKSA+IGVwc2lsb24pIGxhbWJkYTAgPSAtKGxhbWJkYTEgPSAxODApO1xuICByYW5nZVswXSA9IGxhbWJkYTAsIHJhbmdlWzFdID0gbGFtYmRhMTtcbiAgcDAgPSBudWxsO1xufVxuXG4vLyBGaW5kcyB0aGUgbGVmdC1yaWdodCBkaXN0YW5jZSBiZXR3ZWVuIHR3byBsb25naXR1ZGVzLlxuLy8gVGhpcyBpcyBhbG1vc3QgdGhlIHNhbWUgYXMgKGxhbWJkYTEgLSBsYW1iZGEwICsgMzYwwrApICUgMzYwwrAsIGV4Y2VwdCB0aGF0IHdlIHdhbnRcbi8vIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIMKxMTgwwrAgdG8gYmUgMzYwwrAuXG5mdW5jdGlvbiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSB7XG4gIHJldHVybiAobGFtYmRhMSAtPSBsYW1iZGEwKSA8IDAgPyBsYW1iZGExICsgMzYwIDogbGFtYmRhMTtcbn1cblxuZnVuY3Rpb24gcmFuZ2VDb21wYXJlKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gLSBiWzBdO1xufVxuXG5mdW5jdGlvbiByYW5nZUNvbnRhaW5zKHJhbmdlLCB4KSB7XG4gIHJldHVybiByYW5nZVswXSA8PSByYW5nZVsxXSA/IHJhbmdlWzBdIDw9IHggJiYgeCA8PSByYW5nZVsxXSA6IHggPCByYW5nZVswXSB8fCByYW5nZVsxXSA8IHg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGZlYXR1cmUpIHtcbiAgdmFyIGksIG4sIGEsIGIsIG1lcmdlZCwgZGVsdGFNYXgsIGRlbHRhO1xuXG4gIHBoaTEgPSBsYW1iZGExID0gLShsYW1iZGEwID0gcGhpMCA9IEluZmluaXR5KTtcbiAgcmFuZ2VzID0gW107XG4gIHN0cmVhbShmZWF0dXJlLCBib3VuZHNTdHJlYW0pO1xuXG4gIC8vIEZpcnN0LCBzb3J0IHJhbmdlcyBieSB0aGVpciBtaW5pbXVtIGxvbmdpdHVkZXMuXG4gIGlmIChuID0gcmFuZ2VzLmxlbmd0aCkge1xuICAgIHJhbmdlcy5zb3J0KHJhbmdlQ29tcGFyZSk7XG5cbiAgICAvLyBUaGVuLCBtZXJnZSBhbnkgcmFuZ2VzIHRoYXQgb3ZlcmxhcC5cbiAgICBmb3IgKGkgPSAxLCBhID0gcmFuZ2VzWzBdLCBtZXJnZWQgPSBbYV07IGkgPCBuOyArK2kpIHtcbiAgICAgIGIgPSByYW5nZXNbaV07XG4gICAgICBpZiAocmFuZ2VDb250YWlucyhhLCBiWzBdKSB8fCByYW5nZUNvbnRhaW5zKGEsIGJbMV0pKSB7XG4gICAgICAgIGlmIChhbmdsZShhWzBdLCBiWzFdKSA+IGFuZ2xlKGFbMF0sIGFbMV0pKSBhWzFdID0gYlsxXTtcbiAgICAgICAgaWYgKGFuZ2xlKGJbMF0sIGFbMV0pID4gYW5nbGUoYVswXSwgYVsxXSkpIGFbMF0gPSBiWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVyZ2VkLnB1c2goYSA9IGIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbmFsbHksIGZpbmQgdGhlIGxhcmdlc3QgZ2FwIGJldHdlZW4gdGhlIG1lcmdlZCByYW5nZXMuXG4gICAgLy8gVGhlIGZpbmFsIGJvdW5kaW5nIGJveCB3aWxsIGJlIHRoZSBpbnZlcnNlIG9mIHRoaXMgZ2FwLlxuICAgIGZvciAoZGVsdGFNYXggPSAtSW5maW5pdHksIG4gPSBtZXJnZWQubGVuZ3RoIC0gMSwgaSA9IDAsIGEgPSBtZXJnZWRbbl07IGkgPD0gbjsgYSA9IGIsICsraSkge1xuICAgICAgYiA9IG1lcmdlZFtpXTtcbiAgICAgIGlmICgoZGVsdGEgPSBhbmdsZShhWzFdLCBiWzBdKSkgPiBkZWx0YU1heCkgZGVsdGFNYXggPSBkZWx0YSwgbGFtYmRhMCA9IGJbMF0sIGxhbWJkYTEgPSBhWzFdO1xuICAgIH1cbiAgfVxuXG4gIHJhbmdlcyA9IHJhbmdlID0gbnVsbDtcblxuICByZXR1cm4gbGFtYmRhMCA9PT0gSW5maW5pdHkgfHwgcGhpMCA9PT0gSW5maW5pdHlcbiAgICAgID8gW1tOYU4sIE5hTl0sIFtOYU4sIE5hTl1dXG4gICAgICA6IFtbbGFtYmRhMCwgcGhpMF0sIFtsYW1iZGExLCBwaGkxXV07XG59XG4iLCJpbXBvcnQge2FzaW4sIGF0YW4yLCBjb3MsIHNpbiwgc3FydH0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gc3BoZXJpY2FsKGNhcnRlc2lhbikge1xuICByZXR1cm4gW2F0YW4yKGNhcnRlc2lhblsxXSwgY2FydGVzaWFuWzBdKSwgYXNpbihjYXJ0ZXNpYW5bMl0pXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhbihzcGhlcmljYWwpIHtcbiAgdmFyIGxhbWJkYSA9IHNwaGVyaWNhbFswXSwgcGhpID0gc3BoZXJpY2FsWzFdLCBjb3NQaGkgPSBjb3MocGhpKTtcbiAgcmV0dXJuIFtjb3NQaGkgKiBjb3MobGFtYmRhKSwgY29zUGhpICogc2luKGxhbWJkYSksIHNpbihwaGkpXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhbkRvdChhLCBiKSB7XG4gIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5Dcm9zcyhhLCBiKSB7XG4gIHJldHVybiBbYVsxXSAqIGJbMl0gLSBhWzJdICogYlsxXSwgYVsyXSAqIGJbMF0gLSBhWzBdICogYlsyXSwgYVswXSAqIGJbMV0gLSBhWzFdICogYlswXV07XG59XG5cbi8vIFRPRE8gcmV0dXJuIGFcbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5BZGRJblBsYWNlKGEsIGIpIHtcbiAgYVswXSArPSBiWzBdLCBhWzFdICs9IGJbMV0sIGFbMl0gKz0gYlsyXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhblNjYWxlKHZlY3Rvciwgaykge1xuICByZXR1cm4gW3ZlY3RvclswXSAqIGssIHZlY3RvclsxXSAqIGssIHZlY3RvclsyXSAqIGtdO1xufVxuXG4vLyBUT0RPIHJldHVybiBkXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShkKSB7XG4gIHZhciBsID0gc3FydChkWzBdICogZFswXSArIGRbMV0gKiBkWzFdICsgZFsyXSAqIGRbMl0pO1xuICBkWzBdIC89IGwsIGRbMV0gLz0gbCwgZFsyXSAvPSBsO1xufVxuIiwiaW1wb3J0IHtBZGRlcn0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2FzaW4sIGF0YW4yLCBjb3MsIGRlZ3JlZXMsIGVwc2lsb24sIGVwc2lsb24yLCBoeXBvdCwgcmFkaWFucywgc2luLCBzcXJ0fSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi9ub29wLmpzXCI7XG5pbXBvcnQgc3RyZWFtIGZyb20gXCIuL3N0cmVhbS5qc1wiO1xuXG52YXIgVzAsIFcxLFxuICAgIFgwLCBZMCwgWjAsXG4gICAgWDEsIFkxLCBaMSxcbiAgICBYMiwgWTIsIFoyLFxuICAgIGxhbWJkYTAwLCBwaGkwMCwgLy8gZmlyc3QgcG9pbnRcbiAgICB4MCwgeTAsIHowOyAvLyBwcmV2aW91cyBwb2ludFxuXG52YXIgY2VudHJvaWRTdHJlYW0gPSB7XG4gIHNwaGVyZTogbm9vcCxcbiAgcG9pbnQ6IGNlbnRyb2lkUG9pbnQsXG4gIGxpbmVTdGFydDogY2VudHJvaWRMaW5lU3RhcnQsXG4gIGxpbmVFbmQ6IGNlbnRyb2lkTGluZUVuZCxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lU3RhcnQgPSBjZW50cm9pZFJpbmdTdGFydDtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lRW5kID0gY2VudHJvaWRSaW5nRW5kO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lU3RhcnQgPSBjZW50cm9pZExpbmVTdGFydDtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lRW5kID0gY2VudHJvaWRMaW5lRW5kO1xuICB9XG59O1xuXG4vLyBBcml0aG1ldGljIG1lYW4gb2YgQ2FydGVzaWFuIHZlY3RvcnMuXG5mdW5jdGlvbiBjZW50cm9pZFBvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgdmFyIGNvc1BoaSA9IGNvcyhwaGkpO1xuICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKGNvc1BoaSAqIGNvcyhsYW1iZGEpLCBjb3NQaGkgKiBzaW4obGFtYmRhKSwgc2luKHBoaSkpO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgsIHksIHopIHtcbiAgKytXMDtcbiAgWDAgKz0gKHggLSBYMCkgLyBXMDtcbiAgWTAgKz0gKHkgLSBZMCkgLyBXMDtcbiAgWjAgKz0gKHogLSBaMCkgLyBXMDtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRMaW5lU3RhcnQoKSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRMaW5lUG9pbnRGaXJzdDtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRMaW5lUG9pbnRGaXJzdChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIHZhciBjb3NQaGkgPSBjb3MocGhpKTtcbiAgeDAgPSBjb3NQaGkgKiBjb3MobGFtYmRhKTtcbiAgeTAgPSBjb3NQaGkgKiBzaW4obGFtYmRhKTtcbiAgejAgPSBzaW4ocGhpKTtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZExpbmVQb2ludDtcbiAgY2VudHJvaWRQb2ludENhcnRlc2lhbih4MCwgeTAsIHowKTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRMaW5lUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICB2YXIgY29zUGhpID0gY29zKHBoaSksXG4gICAgICB4ID0gY29zUGhpICogY29zKGxhbWJkYSksXG4gICAgICB5ID0gY29zUGhpICogc2luKGxhbWJkYSksXG4gICAgICB6ID0gc2luKHBoaSksXG4gICAgICB3ID0gYXRhbjIoc3FydCgodyA9IHkwICogeiAtIHowICogeSkgKiB3ICsgKHcgPSB6MCAqIHggLSB4MCAqIHopICogdyArICh3ID0geDAgKiB5IC0geTAgKiB4KSAqIHcpLCB4MCAqIHggKyB5MCAqIHkgKyB6MCAqIHopO1xuICBXMSArPSB3O1xuICBYMSArPSB3ICogKHgwICsgKHgwID0geCkpO1xuICBZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xuICBaMSArPSB3ICogKHowICsgKHowID0geikpO1xuICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgwLCB5MCwgejApO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZExpbmVFbmQoKSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludDtcbn1cblxuLy8gU2VlIEouIEUuIEJyb2NrLCBUaGUgSW5lcnRpYSBUZW5zb3IgZm9yIGEgU3BoZXJpY2FsIFRyaWFuZ2xlLFxuLy8gSi4gQXBwbGllZCBNZWNoYW5pY3MgNDIsIDIzOSAoMTk3NSkuXG5mdW5jdGlvbiBjZW50cm9pZFJpbmdTdGFydCgpIHtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFJpbmdQb2ludEZpcnN0O1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFJpbmdFbmQoKSB7XG4gIGNlbnRyb2lkUmluZ1BvaW50KGxhbWJkYTAwLCBwaGkwMCk7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludDtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRSaW5nUG9pbnRGaXJzdChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEwMCA9IGxhbWJkYSwgcGhpMDAgPSBwaGk7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFJpbmdQb2ludDtcbiAgdmFyIGNvc1BoaSA9IGNvcyhwaGkpO1xuICB4MCA9IGNvc1BoaSAqIGNvcyhsYW1iZGEpO1xuICB5MCA9IGNvc1BoaSAqIHNpbihsYW1iZGEpO1xuICB6MCA9IHNpbihwaGkpO1xuICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgwLCB5MCwgejApO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFJpbmdQb2ludChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIHZhciBjb3NQaGkgPSBjb3MocGhpKSxcbiAgICAgIHggPSBjb3NQaGkgKiBjb3MobGFtYmRhKSxcbiAgICAgIHkgPSBjb3NQaGkgKiBzaW4obGFtYmRhKSxcbiAgICAgIHogPSBzaW4ocGhpKSxcbiAgICAgIGN4ID0geTAgKiB6IC0gejAgKiB5LFxuICAgICAgY3kgPSB6MCAqIHggLSB4MCAqIHosXG4gICAgICBjeiA9IHgwICogeSAtIHkwICogeCxcbiAgICAgIG0gPSBoeXBvdChjeCwgY3ksIGN6KSxcbiAgICAgIHcgPSBhc2luKG0pLCAvLyBsaW5lIHdlaWdodCA9IGFuZ2xlXG4gICAgICB2ID0gbSAmJiAtdyAvIG07IC8vIGFyZWEgd2VpZ2h0IG11bHRpcGxpZXJcbiAgWDIuYWRkKHYgKiBjeCk7XG4gIFkyLmFkZCh2ICogY3kpO1xuICBaMi5hZGQodiAqIGN6KTtcbiAgVzEgKz0gdztcbiAgWDEgKz0gdyAqICh4MCArICh4MCA9IHgpKTtcbiAgWTEgKz0gdyAqICh5MCArICh5MCA9IHkpKTtcbiAgWjEgKz0gdyAqICh6MCArICh6MCA9IHopKTtcbiAgY2VudHJvaWRQb2ludENhcnRlc2lhbih4MCwgeTAsIHowKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0KSB7XG4gIFcwID0gVzEgPVxuICBYMCA9IFkwID0gWjAgPVxuICBYMSA9IFkxID0gWjEgPSAwO1xuICBYMiA9IG5ldyBBZGRlcigpO1xuICBZMiA9IG5ldyBBZGRlcigpO1xuICBaMiA9IG5ldyBBZGRlcigpO1xuICBzdHJlYW0ob2JqZWN0LCBjZW50cm9pZFN0cmVhbSk7XG5cbiAgdmFyIHggPSArWDIsXG4gICAgICB5ID0gK1kyLFxuICAgICAgeiA9ICtaMixcbiAgICAgIG0gPSBoeXBvdCh4LCB5LCB6KTtcblxuICAvLyBJZiB0aGUgYXJlYS13ZWlnaHRlZCBjY2VudHJvaWQgaXMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbGVuZ3RoLXdlaWdodGVkIGNjZW50cm9pZC5cbiAgaWYgKG0gPCBlcHNpbG9uMikge1xuICAgIHggPSBYMSwgeSA9IFkxLCB6ID0gWjE7XG4gICAgLy8gSWYgdGhlIGZlYXR1cmUgaGFzIHplcm8gbGVuZ3RoLCBmYWxsIGJhY2sgdG8gYXJpdGhtZXRpYyBtZWFuIG9mIHBvaW50IHZlY3RvcnMuXG4gICAgaWYgKFcxIDwgZXBzaWxvbikgeCA9IFgwLCB5ID0gWTAsIHogPSBaMDtcbiAgICBtID0gaHlwb3QoeCwgeSwgeik7XG4gICAgLy8gSWYgdGhlIGZlYXR1cmUgc3RpbGwgaGFzIGFuIHVuZGVmaW5lZCBjY2VudHJvaWQsIHRoZW4gcmV0dXJuLlxuICAgIGlmIChtIDwgZXBzaWxvbjIpIHJldHVybiBbTmFOLCBOYU5dO1xuICB9XG5cbiAgcmV0dXJuIFthdGFuMih5LCB4KSAqIGRlZ3JlZXMsIGFzaW4oeiAvIG0pICogZGVncmVlc107XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcblxuICBmdW5jdGlvbiBjb21wb3NlKHgsIHkpIHtcbiAgICByZXR1cm4geCA9IGEoeCwgeSksIGIoeFswXSwgeFsxXSk7XG4gIH1cblxuICBpZiAoYS5pbnZlcnQgJiYgYi5pbnZlcnQpIGNvbXBvc2UuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiB4ID0gYi5pbnZlcnQoeCwgeSksIHggJiYgYS5pbnZlcnQoeFswXSwgeFsxXSk7XG4gIH07XG5cbiAgcmV0dXJuIGNvbXBvc2U7XG59XG4iLCJpbXBvcnQgY29tcG9zZSBmcm9tIFwiLi9jb21wb3NlLmpzXCI7XG5pbXBvcnQge2FicywgYXNpbiwgYXRhbjIsIGNvcywgZGVncmVlcywgcGksIHJhZGlhbnMsIHNpbiwgdGF1fSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIHJvdGF0aW9uSWRlbnRpdHkobGFtYmRhLCBwaGkpIHtcbiAgaWYgKGFicyhsYW1iZGEpID4gcGkpIGxhbWJkYSAtPSBNYXRoLnJvdW5kKGxhbWJkYSAvIHRhdSkgKiB0YXU7XG4gIHJldHVybiBbbGFtYmRhLCBwaGldO1xufVxuXG5yb3RhdGlvbklkZW50aXR5LmludmVydCA9IHJvdGF0aW9uSWRlbnRpdHk7XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVSYWRpYW5zKGRlbHRhTGFtYmRhLCBkZWx0YVBoaSwgZGVsdGFHYW1tYSkge1xuICByZXR1cm4gKGRlbHRhTGFtYmRhICU9IHRhdSkgPyAoZGVsdGFQaGkgfHwgZGVsdGFHYW1tYSA/IGNvbXBvc2Uocm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpLCByb3RhdGlvblBoaUdhbW1hKGRlbHRhUGhpLCBkZWx0YUdhbW1hKSlcbiAgICA6IHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSlcbiAgICA6IChkZWx0YVBoaSB8fCBkZWx0YUdhbW1hID8gcm90YXRpb25QaGlHYW1tYShkZWx0YVBoaSwgZGVsdGFHYW1tYSlcbiAgICA6IHJvdGF0aW9uSWRlbnRpdHkpO1xufVxuXG5mdW5jdGlvbiBmb3J3YXJkUm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxhbWJkYSwgcGhpKSB7XG4gICAgbGFtYmRhICs9IGRlbHRhTGFtYmRhO1xuICAgIGlmIChhYnMobGFtYmRhKSA+IHBpKSBsYW1iZGEgLT0gTWF0aC5yb3VuZChsYW1iZGEgLyB0YXUpICogdGF1O1xuICAgIHJldHVybiBbbGFtYmRhLCBwaGldO1xuICB9O1xufVxuXG5mdW5jdGlvbiByb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSkge1xuICB2YXIgcm90YXRpb24gPSBmb3J3YXJkUm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpO1xuICByb3RhdGlvbi5pbnZlcnQgPSBmb3J3YXJkUm90YXRpb25MYW1iZGEoLWRlbHRhTGFtYmRhKTtcbiAgcmV0dXJuIHJvdGF0aW9uO1xufVxuXG5mdW5jdGlvbiByb3RhdGlvblBoaUdhbW1hKGRlbHRhUGhpLCBkZWx0YUdhbW1hKSB7XG4gIHZhciBjb3NEZWx0YVBoaSA9IGNvcyhkZWx0YVBoaSksXG4gICAgICBzaW5EZWx0YVBoaSA9IHNpbihkZWx0YVBoaSksXG4gICAgICBjb3NEZWx0YUdhbW1hID0gY29zKGRlbHRhR2FtbWEpLFxuICAgICAgc2luRGVsdGFHYW1tYSA9IHNpbihkZWx0YUdhbW1hKTtcblxuICBmdW5jdGlvbiByb3RhdGlvbihsYW1iZGEsIHBoaSkge1xuICAgIHZhciBjb3NQaGkgPSBjb3MocGhpKSxcbiAgICAgICAgeCA9IGNvcyhsYW1iZGEpICogY29zUGhpLFxuICAgICAgICB5ID0gc2luKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgIHogPSBzaW4ocGhpKSxcbiAgICAgICAgayA9IHogKiBjb3NEZWx0YVBoaSArIHggKiBzaW5EZWx0YVBoaTtcbiAgICByZXR1cm4gW1xuICAgICAgYXRhbjIoeSAqIGNvc0RlbHRhR2FtbWEgLSBrICogc2luRGVsdGFHYW1tYSwgeCAqIGNvc0RlbHRhUGhpIC0geiAqIHNpbkRlbHRhUGhpKSxcbiAgICAgIGFzaW4oayAqIGNvc0RlbHRhR2FtbWEgKyB5ICogc2luRGVsdGFHYW1tYSlcbiAgICBdO1xuICB9XG5cbiAgcm90YXRpb24uaW52ZXJ0ID0gZnVuY3Rpb24obGFtYmRhLCBwaGkpIHtcbiAgICB2YXIgY29zUGhpID0gY29zKHBoaSksXG4gICAgICAgIHggPSBjb3MobGFtYmRhKSAqIGNvc1BoaSxcbiAgICAgICAgeSA9IHNpbihsYW1iZGEpICogY29zUGhpLFxuICAgICAgICB6ID0gc2luKHBoaSksXG4gICAgICAgIGsgPSB6ICogY29zRGVsdGFHYW1tYSAtIHkgKiBzaW5EZWx0YUdhbW1hO1xuICAgIHJldHVybiBbXG4gICAgICBhdGFuMih5ICogY29zRGVsdGFHYW1tYSArIHogKiBzaW5EZWx0YUdhbW1hLCB4ICogY29zRGVsdGFQaGkgKyBrICogc2luRGVsdGFQaGkpLFxuICAgICAgYXNpbihrICogY29zRGVsdGFQaGkgLSB4ICogc2luRGVsdGFQaGkpXG4gICAgXTtcbiAgfTtcblxuICByZXR1cm4gcm90YXRpb247XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJvdGF0ZSkge1xuICByb3RhdGUgPSByb3RhdGVSYWRpYW5zKHJvdGF0ZVswXSAqIHJhZGlhbnMsIHJvdGF0ZVsxXSAqIHJhZGlhbnMsIHJvdGF0ZS5sZW5ndGggPiAyID8gcm90YXRlWzJdICogcmFkaWFucyA6IDApO1xuXG4gIGZ1bmN0aW9uIGZvcndhcmQoY29vcmRpbmF0ZXMpIHtcbiAgICBjb29yZGluYXRlcyA9IHJvdGF0ZShjb29yZGluYXRlc1swXSAqIHJhZGlhbnMsIGNvb3JkaW5hdGVzWzFdICogcmFkaWFucyk7XG4gICAgcmV0dXJuIGNvb3JkaW5hdGVzWzBdICo9IGRlZ3JlZXMsIGNvb3JkaW5hdGVzWzFdICo9IGRlZ3JlZXMsIGNvb3JkaW5hdGVzO1xuICB9XG5cbiAgZm9yd2FyZC5pbnZlcnQgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgIGNvb3JkaW5hdGVzID0gcm90YXRlLmludmVydChjb29yZGluYXRlc1swXSAqIHJhZGlhbnMsIGNvb3JkaW5hdGVzWzFdICogcmFkaWFucyk7XG4gICAgcmV0dXJuIGNvb3JkaW5hdGVzWzBdICo9IGRlZ3JlZXMsIGNvb3JkaW5hdGVzWzFdICo9IGRlZ3JlZXMsIGNvb3JkaW5hdGVzO1xuICB9O1xuXG4gIHJldHVybiBmb3J3YXJkO1xufVxuIiwiaW1wb3J0IHtjYXJ0ZXNpYW4sIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UsIHNwaGVyaWNhbH0gZnJvbSBcIi4vY2FydGVzaWFuLmpzXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCB7YWNvcywgY29zLCBkZWdyZWVzLCBlcHNpbG9uLCByYWRpYW5zLCBzaW4sIHRhdX0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuaW1wb3J0IHtyb3RhdGVSYWRpYW5zfSBmcm9tIFwiLi9yb3RhdGlvbi5qc1wiO1xuXG4vLyBHZW5lcmF0ZXMgYSBjaXJjbGUgY2VudGVyZWQgYXQgWzDCsCwgMMKwXSwgd2l0aCBhIGdpdmVuIHJhZGl1cyBhbmQgcHJlY2lzaW9uLlxuZXhwb3J0IGZ1bmN0aW9uIGNpcmNsZVN0cmVhbShzdHJlYW0sIHJhZGl1cywgZGVsdGEsIGRpcmVjdGlvbiwgdDAsIHQxKSB7XG4gIGlmICghZGVsdGEpIHJldHVybjtcbiAgdmFyIGNvc1JhZGl1cyA9IGNvcyhyYWRpdXMpLFxuICAgICAgc2luUmFkaXVzID0gc2luKHJhZGl1cyksXG4gICAgICBzdGVwID0gZGlyZWN0aW9uICogZGVsdGE7XG4gIGlmICh0MCA9PSBudWxsKSB7XG4gICAgdDAgPSByYWRpdXMgKyBkaXJlY3Rpb24gKiB0YXU7XG4gICAgdDEgPSByYWRpdXMgLSBzdGVwIC8gMjtcbiAgfSBlbHNlIHtcbiAgICB0MCA9IGNpcmNsZVJhZGl1cyhjb3NSYWRpdXMsIHQwKTtcbiAgICB0MSA9IGNpcmNsZVJhZGl1cyhjb3NSYWRpdXMsIHQxKTtcbiAgICBpZiAoZGlyZWN0aW9uID4gMCA/IHQwIDwgdDEgOiB0MCA+IHQxKSB0MCArPSBkaXJlY3Rpb24gKiB0YXU7XG4gIH1cbiAgZm9yICh2YXIgcG9pbnQsIHQgPSB0MDsgZGlyZWN0aW9uID4gMCA/IHQgPiB0MSA6IHQgPCB0MTsgdCAtPSBzdGVwKSB7XG4gICAgcG9pbnQgPSBzcGhlcmljYWwoW2Nvc1JhZGl1cywgLXNpblJhZGl1cyAqIGNvcyh0KSwgLXNpblJhZGl1cyAqIHNpbih0KV0pO1xuICAgIHN0cmVhbS5wb2ludChwb2ludFswXSwgcG9pbnRbMV0pO1xuICB9XG59XG5cbi8vIFJldHVybnMgdGhlIHNpZ25lZCBhbmdsZSBvZiBhIGNhcnRlc2lhbiBwb2ludCByZWxhdGl2ZSB0byBbY29zUmFkaXVzLCAwLCAwXS5cbmZ1bmN0aW9uIGNpcmNsZVJhZGl1cyhjb3NSYWRpdXMsIHBvaW50KSB7XG4gIHBvaW50ID0gY2FydGVzaWFuKHBvaW50KSwgcG9pbnRbMF0gLT0gY29zUmFkaXVzO1xuICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKHBvaW50KTtcbiAgdmFyIHJhZGl1cyA9IGFjb3MoLXBvaW50WzFdKTtcbiAgcmV0dXJuICgoLXBvaW50WzJdIDwgMCA/IC1yYWRpdXMgOiByYWRpdXMpICsgdGF1IC0gZXBzaWxvbikgJSB0YXU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgY2VudGVyID0gY29uc3RhbnQoWzAsIDBdKSxcbiAgICAgIHJhZGl1cyA9IGNvbnN0YW50KDkwKSxcbiAgICAgIHByZWNpc2lvbiA9IGNvbnN0YW50KDIpLFxuICAgICAgcmluZyxcbiAgICAgIHJvdGF0ZSxcbiAgICAgIHN0cmVhbSA9IHtwb2ludDogcG9pbnR9O1xuXG4gIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICByaW5nLnB1c2goeCA9IHJvdGF0ZSh4LCB5KSk7XG4gICAgeFswXSAqPSBkZWdyZWVzLCB4WzFdICo9IGRlZ3JlZXM7XG4gIH1cblxuICBmdW5jdGlvbiBjaXJjbGUoKSB7XG4gICAgdmFyIGMgPSBjZW50ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgciA9IHJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpICogcmFkaWFucyxcbiAgICAgICAgcCA9IHByZWNpc2lvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpICogcmFkaWFucztcbiAgICByaW5nID0gW107XG4gICAgcm90YXRlID0gcm90YXRlUmFkaWFucygtY1swXSAqIHJhZGlhbnMsIC1jWzFdICogcmFkaWFucywgMCkuaW52ZXJ0O1xuICAgIGNpcmNsZVN0cmVhbShzdHJlYW0sIHIsIHAsIDEpO1xuICAgIGMgPSB7dHlwZTogXCJQb2x5Z29uXCIsIGNvb3JkaW5hdGVzOiBbcmluZ119O1xuICAgIHJpbmcgPSByb3RhdGUgPSBudWxsO1xuICAgIHJldHVybiBjO1xuICB9XG5cbiAgY2lyY2xlLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjZW50ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KFsrX1swXSwgK19bMV1dKSwgY2lyY2xlKSA6IGNlbnRlcjtcbiAgfTtcblxuICBjaXJjbGUucmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBjaXJjbGUpIDogcmFkaXVzO1xuICB9O1xuXG4gIGNpcmNsZS5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJlY2lzaW9uID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGNpcmNsZSkgOiBwcmVjaXNpb247XG4gIH07XG5cbiAgcmV0dXJuIGNpcmNsZTtcbn1cbiIsImltcG9ydCBub29wIGZyb20gXCIuLi9ub29wLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbGluZXMgPSBbXSxcbiAgICAgIGxpbmU7XG4gIHJldHVybiB7XG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHksIG0pIHtcbiAgICAgIGxpbmUucHVzaChbeCwgeSwgbV0pO1xuICAgIH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGxpbmVzLnB1c2gobGluZSA9IFtdKTtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IG5vb3AsXG4gICAgcmVqb2luOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChsaW5lcy5sZW5ndGggPiAxKSBsaW5lcy5wdXNoKGxpbmVzLnBvcCgpLmNvbmNhdChsaW5lcy5zaGlmdCgpKSk7XG4gICAgfSxcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxpbmVzO1xuICAgICAgbGluZXMgPSBbXTtcbiAgICAgIGxpbmUgPSBudWxsO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQge2FicywgZXBzaWxvbn0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhYnMoYVswXSAtIGJbMF0pIDwgZXBzaWxvbiAmJiBhYnMoYVsxXSAtIGJbMV0pIDwgZXBzaWxvbjtcbn1cbiIsImltcG9ydCBwb2ludEVxdWFsIGZyb20gXCIuLi9wb2ludEVxdWFsLmpzXCI7XG5pbXBvcnQge2Vwc2lsb259IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIEludGVyc2VjdGlvbihwb2ludCwgcG9pbnRzLCBvdGhlciwgZW50cnkpIHtcbiAgdGhpcy54ID0gcG9pbnQ7XG4gIHRoaXMueiA9IHBvaW50cztcbiAgdGhpcy5vID0gb3RoZXI7IC8vIGFub3RoZXIgaW50ZXJzZWN0aW9uXG4gIHRoaXMuZSA9IGVudHJ5OyAvLyBpcyBhbiBlbnRyeT9cbiAgdGhpcy52ID0gZmFsc2U7IC8vIHZpc2l0ZWRcbiAgdGhpcy5uID0gdGhpcy5wID0gbnVsbDsgLy8gbmV4dCAmIHByZXZpb3VzXG59XG5cbi8vIEEgZ2VuZXJhbGl6ZWQgcG9seWdvbiBjbGlwcGluZyBhbGdvcml0aG06IGdpdmVuIGEgcG9seWdvbiB0aGF0IGhhcyBiZWVuIGN1dFxuLy8gaW50byBpdHMgdmlzaWJsZSBsaW5lIHNlZ21lbnRzLCBhbmQgcmVqb2lucyB0aGUgc2VnbWVudHMgYnkgaW50ZXJwb2xhdGluZ1xuLy8gYWxvbmcgdGhlIGNsaXAgZWRnZS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlZ21lbnRzLCBjb21wYXJlSW50ZXJzZWN0aW9uLCBzdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIHN0cmVhbSkge1xuICB2YXIgc3ViamVjdCA9IFtdLFxuICAgICAgY2xpcCA9IFtdLFxuICAgICAgaSxcbiAgICAgIG47XG5cbiAgc2VnbWVudHMuZm9yRWFjaChmdW5jdGlvbihzZWdtZW50KSB7XG4gICAgaWYgKChuID0gc2VnbWVudC5sZW5ndGggLSAxKSA8PSAwKSByZXR1cm47XG4gICAgdmFyIG4sIHAwID0gc2VnbWVudFswXSwgcDEgPSBzZWdtZW50W25dLCB4O1xuXG4gICAgaWYgKHBvaW50RXF1YWwocDAsIHAxKSkge1xuICAgICAgaWYgKCFwMFsyXSAmJiAhcDFbMl0pIHtcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBzdHJlYW0ucG9pbnQoKHAwID0gc2VnbWVudFtpXSlbMF0sIHAwWzFdKTtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gaGFuZGxlIGRlZ2VuZXJhdGUgY2FzZXMgYnkgbW92aW5nIHRoZSBwb2ludFxuICAgICAgcDFbMF0gKz0gMiAqIGVwc2lsb247XG4gICAgfVxuXG4gICAgc3ViamVjdC5wdXNoKHggPSBuZXcgSW50ZXJzZWN0aW9uKHAwLCBzZWdtZW50LCBudWxsLCB0cnVlKSk7XG4gICAgY2xpcC5wdXNoKHgubyA9IG5ldyBJbnRlcnNlY3Rpb24ocDAsIG51bGwsIHgsIGZhbHNlKSk7XG4gICAgc3ViamVjdC5wdXNoKHggPSBuZXcgSW50ZXJzZWN0aW9uKHAxLCBzZWdtZW50LCBudWxsLCBmYWxzZSkpO1xuICAgIGNsaXAucHVzaCh4Lm8gPSBuZXcgSW50ZXJzZWN0aW9uKHAxLCBudWxsLCB4LCB0cnVlKSk7XG4gIH0pO1xuXG4gIGlmICghc3ViamVjdC5sZW5ndGgpIHJldHVybjtcblxuICBjbGlwLnNvcnQoY29tcGFyZUludGVyc2VjdGlvbik7XG4gIGxpbmsoc3ViamVjdCk7XG4gIGxpbmsoY2xpcCk7XG5cbiAgZm9yIChpID0gMCwgbiA9IGNsaXAubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgY2xpcFtpXS5lID0gc3RhcnRJbnNpZGUgPSAhc3RhcnRJbnNpZGU7XG4gIH1cblxuICB2YXIgc3RhcnQgPSBzdWJqZWN0WzBdLFxuICAgICAgcG9pbnRzLFxuICAgICAgcG9pbnQ7XG5cbiAgd2hpbGUgKDEpIHtcbiAgICAvLyBGaW5kIGZpcnN0IHVudmlzaXRlZCBpbnRlcnNlY3Rpb24uXG4gICAgdmFyIGN1cnJlbnQgPSBzdGFydCxcbiAgICAgICAgaXNTdWJqZWN0ID0gdHJ1ZTtcbiAgICB3aGlsZSAoY3VycmVudC52KSBpZiAoKGN1cnJlbnQgPSBjdXJyZW50Lm4pID09PSBzdGFydCkgcmV0dXJuO1xuICAgIHBvaW50cyA9IGN1cnJlbnQuejtcbiAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgZG8ge1xuICAgICAgY3VycmVudC52ID0gY3VycmVudC5vLnYgPSB0cnVlO1xuICAgICAgaWYgKGN1cnJlbnQuZSkge1xuICAgICAgICBpZiAoaXNTdWJqZWN0KSB7XG4gICAgICAgICAgZm9yIChpID0gMCwgbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBuOyArK2kpIHN0cmVhbS5wb2ludCgocG9pbnQgPSBwb2ludHNbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW50ZXJwb2xhdGUoY3VycmVudC54LCBjdXJyZW50Lm4ueCwgMSwgc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzU3ViamVjdCkge1xuICAgICAgICAgIHBvaW50cyA9IGN1cnJlbnQucC56O1xuICAgICAgICAgIGZvciAoaSA9IHBvaW50cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgc3RyZWFtLnBvaW50KChwb2ludCA9IHBvaW50c1tpXSlbMF0sIHBvaW50WzFdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnRlcnBvbGF0ZShjdXJyZW50LngsIGN1cnJlbnQucC54LCAtMSwgc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IGN1cnJlbnQubztcbiAgICAgIHBvaW50cyA9IGN1cnJlbnQuejtcbiAgICAgIGlzU3ViamVjdCA9ICFpc1N1YmplY3Q7XG4gICAgfSB3aGlsZSAoIWN1cnJlbnQudik7XG4gICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsaW5rKGFycmF5KSB7XG4gIGlmICghKG4gPSBhcnJheS5sZW5ndGgpKSByZXR1cm47XG4gIHZhciBuLFxuICAgICAgaSA9IDAsXG4gICAgICBhID0gYXJyYXlbMF0sXG4gICAgICBiO1xuICB3aGlsZSAoKytpIDwgbikge1xuICAgIGEubiA9IGIgPSBhcnJheVtpXTtcbiAgICBiLnAgPSBhO1xuICAgIGEgPSBiO1xuICB9XG4gIGEubiA9IGIgPSBhcnJheVswXTtcbiAgYi5wID0gYTtcbn1cbiIsImltcG9ydCB7QWRkZXJ9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtjYXJ0ZXNpYW4sIGNhcnRlc2lhbkNyb3NzLCBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlfSBmcm9tIFwiLi9jYXJ0ZXNpYW4uanNcIjtcbmltcG9ydCB7YWJzLCBhc2luLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBlcHNpbG9uMiwgaGFsZlBpLCBwaSwgcXVhcnRlclBpLCBzaWduLCBzaW4sIHRhdX0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBsb25naXR1ZGUocG9pbnQpIHtcbiAgcmV0dXJuIGFicyhwb2ludFswXSkgPD0gcGkgPyBwb2ludFswXSA6IHNpZ24ocG9pbnRbMF0pICogKChhYnMocG9pbnRbMF0pICsgcGkpICUgdGF1IC0gcGkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2x5Z29uLCBwb2ludCkge1xuICB2YXIgbGFtYmRhID0gbG9uZ2l0dWRlKHBvaW50KSxcbiAgICAgIHBoaSA9IHBvaW50WzFdLFxuICAgICAgc2luUGhpID0gc2luKHBoaSksXG4gICAgICBub3JtYWwgPSBbc2luKGxhbWJkYSksIC1jb3MobGFtYmRhKSwgMF0sXG4gICAgICBhbmdsZSA9IDAsXG4gICAgICB3aW5kaW5nID0gMDtcblxuICB2YXIgc3VtID0gbmV3IEFkZGVyKCk7XG5cbiAgaWYgKHNpblBoaSA9PT0gMSkgcGhpID0gaGFsZlBpICsgZXBzaWxvbjtcbiAgZWxzZSBpZiAoc2luUGhpID09PSAtMSkgcGhpID0gLWhhbGZQaSAtIGVwc2lsb247XG5cbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKG0gPSAocmluZyA9IHBvbHlnb25baV0pLmxlbmd0aCkpIGNvbnRpbnVlO1xuICAgIHZhciByaW5nLFxuICAgICAgICBtLFxuICAgICAgICBwb2ludDAgPSByaW5nW20gLSAxXSxcbiAgICAgICAgbGFtYmRhMCA9IGxvbmdpdHVkZShwb2ludDApLFxuICAgICAgICBwaGkwID0gcG9pbnQwWzFdIC8gMiArIHF1YXJ0ZXJQaSxcbiAgICAgICAgc2luUGhpMCA9IHNpbihwaGkwKSxcbiAgICAgICAgY29zUGhpMCA9IGNvcyhwaGkwKTtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbTsgKytqLCBsYW1iZGEwID0gbGFtYmRhMSwgc2luUGhpMCA9IHNpblBoaTEsIGNvc1BoaTAgPSBjb3NQaGkxLCBwb2ludDAgPSBwb2ludDEpIHtcbiAgICAgIHZhciBwb2ludDEgPSByaW5nW2pdLFxuICAgICAgICAgIGxhbWJkYTEgPSBsb25naXR1ZGUocG9pbnQxKSxcbiAgICAgICAgICBwaGkxID0gcG9pbnQxWzFdIC8gMiArIHF1YXJ0ZXJQaSxcbiAgICAgICAgICBzaW5QaGkxID0gc2luKHBoaTEpLFxuICAgICAgICAgIGNvc1BoaTEgPSBjb3MocGhpMSksXG4gICAgICAgICAgZGVsdGEgPSBsYW1iZGExIC0gbGFtYmRhMCxcbiAgICAgICAgICBzaWduID0gZGVsdGEgPj0gMCA/IDEgOiAtMSxcbiAgICAgICAgICBhYnNEZWx0YSA9IHNpZ24gKiBkZWx0YSxcbiAgICAgICAgICBhbnRpbWVyaWRpYW4gPSBhYnNEZWx0YSA+IHBpLFxuICAgICAgICAgIGsgPSBzaW5QaGkwICogc2luUGhpMTtcblxuICAgICAgc3VtLmFkZChhdGFuMihrICogc2lnbiAqIHNpbihhYnNEZWx0YSksIGNvc1BoaTAgKiBjb3NQaGkxICsgayAqIGNvcyhhYnNEZWx0YSkpKTtcbiAgICAgIGFuZ2xlICs9IGFudGltZXJpZGlhbiA/IGRlbHRhICsgc2lnbiAqIHRhdSA6IGRlbHRhO1xuXG4gICAgICAvLyBBcmUgdGhlIGxvbmdpdHVkZXMgZWl0aGVyIHNpZGUgb2YgdGhlIHBvaW504oCZcyBtZXJpZGlhbiAobGFtYmRhKSxcbiAgICAgIC8vIGFuZCBhcmUgdGhlIGxhdGl0dWRlcyBzbWFsbGVyIHRoYW4gdGhlIHBhcmFsbGVsIChwaGkpP1xuICAgICAgaWYgKGFudGltZXJpZGlhbiBeIGxhbWJkYTAgPj0gbGFtYmRhIF4gbGFtYmRhMSA+PSBsYW1iZGEpIHtcbiAgICAgICAgdmFyIGFyYyA9IGNhcnRlc2lhbkNyb3NzKGNhcnRlc2lhbihwb2ludDApLCBjYXJ0ZXNpYW4ocG9pbnQxKSk7XG4gICAgICAgIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UoYXJjKTtcbiAgICAgICAgdmFyIGludGVyc2VjdGlvbiA9IGNhcnRlc2lhbkNyb3NzKG5vcm1hbCwgYXJjKTtcbiAgICAgICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShpbnRlcnNlY3Rpb24pO1xuICAgICAgICB2YXIgcGhpQXJjID0gKGFudGltZXJpZGlhbiBeIGRlbHRhID49IDAgPyAtMSA6IDEpICogYXNpbihpbnRlcnNlY3Rpb25bMl0pO1xuICAgICAgICBpZiAocGhpID4gcGhpQXJjIHx8IHBoaSA9PT0gcGhpQXJjICYmIChhcmNbMF0gfHwgYXJjWzFdKSkge1xuICAgICAgICAgIHdpbmRpbmcgKz0gYW50aW1lcmlkaWFuIF4gZGVsdGEgPj0gMCA/IDEgOiAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEZpcnN0LCBkZXRlcm1pbmUgd2hldGhlciB0aGUgU291dGggcG9sZSBpcyBpbnNpZGUgb3Igb3V0c2lkZTpcbiAgLy9cbiAgLy8gSXQgaXMgaW5zaWRlIGlmOlxuICAvLyAqIHRoZSBwb2x5Z29uIHdpbmRzIGFyb3VuZCBpdCBpbiBhIGNsb2Nrd2lzZSBkaXJlY3Rpb24uXG4gIC8vICogdGhlIHBvbHlnb24gZG9lcyBub3QgKGN1bXVsYXRpdmVseSkgd2luZCBhcm91bmQgaXQsIGJ1dCBoYXMgYSBuZWdhdGl2ZVxuICAvLyAgIChjb3VudGVyLWNsb2Nrd2lzZSkgYXJlYS5cbiAgLy9cbiAgLy8gU2Vjb25kLCBjb3VudCB0aGUgKHNpZ25lZCkgbnVtYmVyIG9mIHRpbWVzIGEgc2VnbWVudCBjcm9zc2VzIGEgbGFtYmRhXG4gIC8vIGZyb20gdGhlIHBvaW50IHRvIHRoZSBTb3V0aCBwb2xlLiAgSWYgaXQgaXMgemVybywgdGhlbiB0aGUgcG9pbnQgaXMgdGhlXG4gIC8vIHNhbWUgc2lkZSBhcyB0aGUgU291dGggcG9sZS5cblxuICByZXR1cm4gKGFuZ2xlIDwgLWVwc2lsb24gfHwgYW5nbGUgPCBlcHNpbG9uICYmIHN1bSA8IC1lcHNpbG9uMikgXiAod2luZGluZyAmIDEpO1xufVxuIiwiaW1wb3J0IGNsaXBCdWZmZXIgZnJvbSBcIi4vYnVmZmVyLmpzXCI7XG5pbXBvcnQgY2xpcFJlam9pbiBmcm9tIFwiLi9yZWpvaW4uanNcIjtcbmltcG9ydCB7ZXBzaWxvbiwgaGFsZlBpfSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IHBvbHlnb25Db250YWlucyBmcm9tIFwiLi4vcG9seWdvbkNvbnRhaW5zLmpzXCI7XG5pbXBvcnQge21lcmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocG9pbnRWaXNpYmxlLCBjbGlwTGluZSwgaW50ZXJwb2xhdGUsIHN0YXJ0KSB7XG4gIHJldHVybiBmdW5jdGlvbihzaW5rKSB7XG4gICAgdmFyIGxpbmUgPSBjbGlwTGluZShzaW5rKSxcbiAgICAgICAgcmluZ0J1ZmZlciA9IGNsaXBCdWZmZXIoKSxcbiAgICAgICAgcmluZ1NpbmsgPSBjbGlwTGluZShyaW5nQnVmZmVyKSxcbiAgICAgICAgcG9seWdvblN0YXJ0ZWQgPSBmYWxzZSxcbiAgICAgICAgcG9seWdvbixcbiAgICAgICAgc2VnbWVudHMsXG4gICAgICAgIHJpbmc7XG5cbiAgICB2YXIgY2xpcCA9IHtcbiAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNsaXAucG9pbnQgPSBwb2ludFJpbmc7XG4gICAgICAgIGNsaXAubGluZVN0YXJ0ID0gcmluZ1N0YXJ0O1xuICAgICAgICBjbGlwLmxpbmVFbmQgPSByaW5nRW5kO1xuICAgICAgICBzZWdtZW50cyA9IFtdO1xuICAgICAgICBwb2x5Z29uID0gW107XG4gICAgICB9LFxuICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNsaXAucG9pbnQgPSBwb2ludDtcbiAgICAgICAgY2xpcC5saW5lU3RhcnQgPSBsaW5lU3RhcnQ7XG4gICAgICAgIGNsaXAubGluZUVuZCA9IGxpbmVFbmQ7XG4gICAgICAgIHNlZ21lbnRzID0gbWVyZ2Uoc2VnbWVudHMpO1xuICAgICAgICB2YXIgc3RhcnRJbnNpZGUgPSBwb2x5Z29uQ29udGFpbnMocG9seWdvbiwgc3RhcnQpO1xuICAgICAgICBpZiAoc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgc2luay5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgIGNsaXBSZWpvaW4oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc2luayk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhcnRJbnNpZGUpIHtcbiAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgc2luay5saW5lU3RhcnQoKTtcbiAgICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBzaW5rKTtcbiAgICAgICAgICBzaW5rLmxpbmVFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvbkVuZCgpLCBwb2x5Z29uU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICBzZWdtZW50cyA9IHBvbHlnb24gPSBudWxsO1xuICAgICAgfSxcbiAgICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHNpbmsucG9seWdvblN0YXJ0KCk7XG4gICAgICAgIHNpbmsubGluZVN0YXJ0KCk7XG4gICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIHNpbmspO1xuICAgICAgICBzaW5rLmxpbmVFbmQoKTtcbiAgICAgICAgc2luay5wb2x5Z29uRW5kKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgICBpZiAocG9pbnRWaXNpYmxlKGxhbWJkYSwgcGhpKSkgc2luay5wb2ludChsYW1iZGEsIHBoaSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9pbnRMaW5lKGxhbWJkYSwgcGhpKSB7XG4gICAgICBsaW5lLnBvaW50KGxhbWJkYSwgcGhpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICBjbGlwLnBvaW50ID0gcG9pbnRMaW5lO1xuICAgICAgbGluZS5saW5lU3RhcnQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgY2xpcC5wb2ludCA9IHBvaW50O1xuICAgICAgbGluZS5saW5lRW5kKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9pbnRSaW5nKGxhbWJkYSwgcGhpKSB7XG4gICAgICByaW5nLnB1c2goW2xhbWJkYSwgcGhpXSk7XG4gICAgICByaW5nU2luay5wb2ludChsYW1iZGEsIHBoaSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ1N0YXJ0KCkge1xuICAgICAgcmluZ1NpbmsubGluZVN0YXJ0KCk7XG4gICAgICByaW5nID0gW107XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcbiAgICAgIHBvaW50UmluZyhyaW5nWzBdWzBdLCByaW5nWzBdWzFdKTtcbiAgICAgIHJpbmdTaW5rLmxpbmVFbmQoKTtcblxuICAgICAgdmFyIGNsZWFuID0gcmluZ1NpbmsuY2xlYW4oKSxcbiAgICAgICAgICByaW5nU2VnbWVudHMgPSByaW5nQnVmZmVyLnJlc3VsdCgpLFxuICAgICAgICAgIGksIG4gPSByaW5nU2VnbWVudHMubGVuZ3RoLCBtLFxuICAgICAgICAgIHNlZ21lbnQsXG4gICAgICAgICAgcG9pbnQ7XG5cbiAgICAgIHJpbmcucG9wKCk7XG4gICAgICBwb2x5Z29uLnB1c2gocmluZyk7XG4gICAgICByaW5nID0gbnVsbDtcblxuICAgICAgaWYgKCFuKSByZXR1cm47XG5cbiAgICAgIC8vIE5vIGludGVyc2VjdGlvbnMuXG4gICAgICBpZiAoY2xlYW4gJiAxKSB7XG4gICAgICAgIHNlZ21lbnQgPSByaW5nU2VnbWVudHNbMF07XG4gICAgICAgIGlmICgobSA9IHNlZ21lbnQubGVuZ3RoIC0gMSkgPiAwKSB7XG4gICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgc2luay5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgIHNpbmsubGluZVN0YXJ0KCk7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IG07ICsraSkgc2luay5wb2ludCgocG9pbnQgPSBzZWdtZW50W2ldKVswXSwgcG9pbnRbMV0pO1xuICAgICAgICAgIHNpbmsubGluZUVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUmVqb2luIGNvbm5lY3RlZCBzZWdtZW50cy5cbiAgICAgIC8vIFRPRE8gcmV1c2UgcmluZ0J1ZmZlci5yZWpvaW4oKT9cbiAgICAgIGlmIChuID4gMSAmJiBjbGVhbiAmIDIpIHJpbmdTZWdtZW50cy5wdXNoKHJpbmdTZWdtZW50cy5wb3AoKS5jb25jYXQocmluZ1NlZ21lbnRzLnNoaWZ0KCkpKTtcblxuICAgICAgc2VnbWVudHMucHVzaChyaW5nU2VnbWVudHMuZmlsdGVyKHZhbGlkU2VnbWVudCkpO1xuICAgIH1cblxuICAgIHJldHVybiBjbGlwO1xuICB9O1xufVxuXG5mdW5jdGlvbiB2YWxpZFNlZ21lbnQoc2VnbWVudCkge1xuICByZXR1cm4gc2VnbWVudC5sZW5ndGggPiAxO1xufVxuXG4vLyBJbnRlcnNlY3Rpb25zIGFyZSBzb3J0ZWQgYWxvbmcgdGhlIGNsaXAgZWRnZS4gRm9yIGJvdGggYW50aW1lcmlkaWFuIGN1dHRpbmdcbi8vIGFuZCBjaXJjbGUgY2xpcHBpbmcsIHRoZSBzYW1lIGNvbXBhcmlzb24gaXMgdXNlZC5cbmZ1bmN0aW9uIGNvbXBhcmVJbnRlcnNlY3Rpb24oYSwgYikge1xuICByZXR1cm4gKChhID0gYS54KVswXSA8IDAgPyBhWzFdIC0gaGFsZlBpIC0gZXBzaWxvbiA6IGhhbGZQaSAtIGFbMV0pXG4gICAgICAgLSAoKGIgPSBiLngpWzBdIDwgMCA/IGJbMV0gLSBoYWxmUGkgLSBlcHNpbG9uIDogaGFsZlBpIC0gYlsxXSk7XG59XG4iLCJpbXBvcnQgY2xpcCBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHthYnMsIGF0YW4sIGNvcywgZXBzaWxvbiwgaGFsZlBpLCBwaSwgc2lufSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGlwKFxuICBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0sXG4gIGNsaXBBbnRpbWVyaWRpYW5MaW5lLFxuICBjbGlwQW50aW1lcmlkaWFuSW50ZXJwb2xhdGUsXG4gIFstcGksIC1oYWxmUGldXG4pO1xuXG4vLyBUYWtlcyBhIGxpbmUgYW5kIGN1dHMgaW50byB2aXNpYmxlIHNlZ21lbnRzLiBSZXR1cm4gdmFsdWVzOiAwIC0gdGhlcmUgd2VyZVxuLy8gaW50ZXJzZWN0aW9ucyBvciB0aGUgbGluZSB3YXMgZW1wdHk7IDEgLSBubyBpbnRlcnNlY3Rpb25zOyAyIC0gdGhlcmUgd2VyZVxuLy8gaW50ZXJzZWN0aW9ucywgYW5kIHRoZSBmaXJzdCBhbmQgbGFzdCBzZWdtZW50cyBzaG91bGQgYmUgcmVqb2luZWQuXG5mdW5jdGlvbiBjbGlwQW50aW1lcmlkaWFuTGluZShzdHJlYW0pIHtcbiAgdmFyIGxhbWJkYTAgPSBOYU4sXG4gICAgICBwaGkwID0gTmFOLFxuICAgICAgc2lnbjAgPSBOYU4sXG4gICAgICBjbGVhbjsgLy8gbm8gaW50ZXJzZWN0aW9uc1xuXG4gIHJldHVybiB7XG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgIGNsZWFuID0gMTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbihsYW1iZGExLCBwaGkxKSB7XG4gICAgICB2YXIgc2lnbjEgPSBsYW1iZGExID4gMCA/IHBpIDogLXBpLFxuICAgICAgICAgIGRlbHRhID0gYWJzKGxhbWJkYTEgLSBsYW1iZGEwKTtcbiAgICAgIGlmIChhYnMoZGVsdGEgLSBwaSkgPCBlcHNpbG9uKSB7IC8vIGxpbmUgY3Jvc3NlcyBhIHBvbGVcbiAgICAgICAgc3RyZWFtLnBvaW50KGxhbWJkYTAsIHBoaTAgPSAocGhpMCArIHBoaTEpIC8gMiA+IDAgPyBoYWxmUGkgOiAtaGFsZlBpKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24wLCBwaGkwKTtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjEsIHBoaTApO1xuICAgICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMSwgcGhpMCk7XG4gICAgICAgIGNsZWFuID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoc2lnbjAgIT09IHNpZ24xICYmIGRlbHRhID49IHBpKSB7IC8vIGxpbmUgY3Jvc3NlcyBhbnRpbWVyaWRpYW5cbiAgICAgICAgaWYgKGFicyhsYW1iZGEwIC0gc2lnbjApIDwgZXBzaWxvbikgbGFtYmRhMCAtPSBzaWduMCAqIGVwc2lsb247IC8vIGhhbmRsZSBkZWdlbmVyYWNpZXNcbiAgICAgICAgaWYgKGFicyhsYW1iZGExIC0gc2lnbjEpIDwgZXBzaWxvbikgbGFtYmRhMSAtPSBzaWduMSAqIGVwc2lsb247XG4gICAgICAgIHBoaTAgPSBjbGlwQW50aW1lcmlkaWFuSW50ZXJzZWN0KGxhbWJkYTAsIHBoaTAsIGxhbWJkYTEsIHBoaTEpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjAsIHBoaTApO1xuICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgIHN0cmVhbS5wb2ludChzaWduMSwgcGhpMCk7XG4gICAgICAgIGNsZWFuID0gMDtcbiAgICAgIH1cbiAgICAgIHN0cmVhbS5wb2ludChsYW1iZGEwID0gbGFtYmRhMSwgcGhpMCA9IHBoaTEpO1xuICAgICAgc2lnbjAgPSBzaWduMTtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgIGxhbWJkYTAgPSBwaGkwID0gTmFOO1xuICAgIH0sXG4gICAgY2xlYW46IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIDIgLSBjbGVhbjsgLy8gaWYgaW50ZXJzZWN0aW9ucywgcmVqb2luIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzXG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjbGlwQW50aW1lcmlkaWFuSW50ZXJzZWN0KGxhbWJkYTAsIHBoaTAsIGxhbWJkYTEsIHBoaTEpIHtcbiAgdmFyIGNvc1BoaTAsXG4gICAgICBjb3NQaGkxLFxuICAgICAgc2luTGFtYmRhMExhbWJkYTEgPSBzaW4obGFtYmRhMCAtIGxhbWJkYTEpO1xuICByZXR1cm4gYWJzKHNpbkxhbWJkYTBMYW1iZGExKSA+IGVwc2lsb25cbiAgICAgID8gYXRhbigoc2luKHBoaTApICogKGNvc1BoaTEgPSBjb3MocGhpMSkpICogc2luKGxhbWJkYTEpXG4gICAgICAgICAgLSBzaW4ocGhpMSkgKiAoY29zUGhpMCA9IGNvcyhwaGkwKSkgKiBzaW4obGFtYmRhMCkpXG4gICAgICAgICAgLyAoY29zUGhpMCAqIGNvc1BoaTEgKiBzaW5MYW1iZGEwTGFtYmRhMSkpXG4gICAgICA6IChwaGkwICsgcGhpMSkgLyAyO1xufVxuXG5mdW5jdGlvbiBjbGlwQW50aW1lcmlkaWFuSW50ZXJwb2xhdGUoZnJvbSwgdG8sIGRpcmVjdGlvbiwgc3RyZWFtKSB7XG4gIHZhciBwaGk7XG4gIGlmIChmcm9tID09IG51bGwpIHtcbiAgICBwaGkgPSBkaXJlY3Rpb24gKiBoYWxmUGk7XG4gICAgc3RyZWFtLnBvaW50KC1waSwgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQoMCwgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQocGksIHBoaSk7XG4gICAgc3RyZWFtLnBvaW50KHBpLCAwKTtcbiAgICBzdHJlYW0ucG9pbnQocGksIC1waGkpO1xuICAgIHN0cmVhbS5wb2ludCgwLCAtcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQoLXBpLCAtcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQoLXBpLCAwKTtcbiAgICBzdHJlYW0ucG9pbnQoLXBpLCBwaGkpO1xuICB9IGVsc2UgaWYgKGFicyhmcm9tWzBdIC0gdG9bMF0pID4gZXBzaWxvbikge1xuICAgIHZhciBsYW1iZGEgPSBmcm9tWzBdIDwgdG9bMF0gPyBwaSA6IC1waTtcbiAgICBwaGkgPSBkaXJlY3Rpb24gKiBsYW1iZGEgLyAyO1xuICAgIHN0cmVhbS5wb2ludCgtbGFtYmRhLCBwaGkpO1xuICAgIHN0cmVhbS5wb2ludCgwLCBwaGkpO1xuICAgIHN0cmVhbS5wb2ludChsYW1iZGEsIHBoaSk7XG4gIH0gZWxzZSB7XG4gICAgc3RyZWFtLnBvaW50KHRvWzBdLCB0b1sxXSk7XG4gIH1cbn1cbiIsImltcG9ydCB7Y2FydGVzaWFuLCBjYXJ0ZXNpYW5BZGRJblBsYWNlLCBjYXJ0ZXNpYW5Dcm9zcywgY2FydGVzaWFuRG90LCBjYXJ0ZXNpYW5TY2FsZSwgc3BoZXJpY2FsfSBmcm9tIFwiLi4vY2FydGVzaWFuLmpzXCI7XG5pbXBvcnQge2NpcmNsZVN0cmVhbX0gZnJvbSBcIi4uL2NpcmNsZS5qc1wiO1xuaW1wb3J0IHthYnMsIGNvcywgZXBzaWxvbiwgcGksIHJhZGlhbnMsIHNxcnR9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQgcG9pbnRFcXVhbCBmcm9tIFwiLi4vcG9pbnRFcXVhbC5qc1wiO1xuaW1wb3J0IGNsaXAgZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocmFkaXVzKSB7XG4gIHZhciBjciA9IGNvcyhyYWRpdXMpLFxuICAgICAgZGVsdGEgPSAyICogcmFkaWFucyxcbiAgICAgIHNtYWxsUmFkaXVzID0gY3IgPiAwLFxuICAgICAgbm90SGVtaXNwaGVyZSA9IGFicyhjcikgPiBlcHNpbG9uOyAvLyBUT0RPIG9wdGltaXNlIGZvciB0aGlzIGNvbW1vbiBjYXNlXG5cbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGUoZnJvbSwgdG8sIGRpcmVjdGlvbiwgc3RyZWFtKSB7XG4gICAgY2lyY2xlU3RyZWFtKHN0cmVhbSwgcmFkaXVzLCBkZWx0YSwgZGlyZWN0aW9uLCBmcm9tLCB0byk7XG4gIH1cblxuICBmdW5jdGlvbiB2aXNpYmxlKGxhbWJkYSwgcGhpKSB7XG4gICAgcmV0dXJuIGNvcyhsYW1iZGEpICogY29zKHBoaSkgPiBjcjtcbiAgfVxuXG4gIC8vIFRha2VzIGEgbGluZSBhbmQgY3V0cyBpbnRvIHZpc2libGUgc2VnbWVudHMuIFJldHVybiB2YWx1ZXMgdXNlZCBmb3IgcG9seWdvblxuICAvLyBjbGlwcGluZzogMCAtIHRoZXJlIHdlcmUgaW50ZXJzZWN0aW9ucyBvciB0aGUgbGluZSB3YXMgZW1wdHk7IDEgLSBub1xuICAvLyBpbnRlcnNlY3Rpb25zIDIgLSB0aGVyZSB3ZXJlIGludGVyc2VjdGlvbnMsIGFuZCB0aGUgZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHNcbiAgLy8gc2hvdWxkIGJlIHJlam9pbmVkLlxuICBmdW5jdGlvbiBjbGlwTGluZShzdHJlYW0pIHtcbiAgICB2YXIgcG9pbnQwLCAvLyBwcmV2aW91cyBwb2ludFxuICAgICAgICBjMCwgLy8gY29kZSBmb3IgcHJldmlvdXMgcG9pbnRcbiAgICAgICAgdjAsIC8vIHZpc2liaWxpdHkgb2YgcHJldmlvdXMgcG9pbnRcbiAgICAgICAgdjAwLCAvLyB2aXNpYmlsaXR5IG9mIGZpcnN0IHBvaW50XG4gICAgICAgIGNsZWFuOyAvLyBubyBpbnRlcnNlY3Rpb25zXG4gICAgcmV0dXJuIHtcbiAgICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHYwMCA9IHYwID0gZmFsc2U7XG4gICAgICAgIGNsZWFuID0gMTtcbiAgICAgIH0sXG4gICAgICBwb2ludDogZnVuY3Rpb24obGFtYmRhLCBwaGkpIHtcbiAgICAgICAgdmFyIHBvaW50MSA9IFtsYW1iZGEsIHBoaV0sXG4gICAgICAgICAgICBwb2ludDIsXG4gICAgICAgICAgICB2ID0gdmlzaWJsZShsYW1iZGEsIHBoaSksXG4gICAgICAgICAgICBjID0gc21hbGxSYWRpdXNcbiAgICAgICAgICAgICAgPyB2ID8gMCA6IGNvZGUobGFtYmRhLCBwaGkpXG4gICAgICAgICAgICAgIDogdiA/IGNvZGUobGFtYmRhICsgKGxhbWJkYSA8IDAgPyBwaSA6IC1waSksIHBoaSkgOiAwO1xuICAgICAgICBpZiAoIXBvaW50MCAmJiAodjAwID0gdjAgPSB2KSkgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICBpZiAodiAhPT0gdjApIHtcbiAgICAgICAgICBwb2ludDIgPSBpbnRlcnNlY3QocG9pbnQwLCBwb2ludDEpO1xuICAgICAgICAgIGlmICghcG9pbnQyIHx8IHBvaW50RXF1YWwocG9pbnQwLCBwb2ludDIpIHx8IHBvaW50RXF1YWwocG9pbnQxLCBwb2ludDIpKVxuICAgICAgICAgICAgcG9pbnQxWzJdID0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodiAhPT0gdjApIHtcbiAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgIC8vIG91dHNpZGUgZ29pbmcgaW5cbiAgICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDEsIHBvaW50MCk7XG4gICAgICAgICAgICBzdHJlYW0ucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpbnNpZGUgZ29pbmcgb3V0XG4gICAgICAgICAgICBwb2ludDIgPSBpbnRlcnNlY3QocG9pbnQwLCBwb2ludDEpO1xuICAgICAgICAgICAgc3RyZWFtLnBvaW50KHBvaW50MlswXSwgcG9pbnQyWzFdLCAyKTtcbiAgICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvaW50MCA9IHBvaW50MjtcbiAgICAgICAgfSBlbHNlIGlmIChub3RIZW1pc3BoZXJlICYmIHBvaW50MCAmJiBzbWFsbFJhZGl1cyBeIHYpIHtcbiAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAvLyBJZiB0aGUgY29kZXMgZm9yIHR3byBwb2ludHMgYXJlIGRpZmZlcmVudCwgb3IgYXJlIGJvdGggemVybyxcbiAgICAgICAgICAvLyBhbmQgdGhlcmUgdGhpcyBzZWdtZW50IGludGVyc2VjdHMgd2l0aCB0aGUgc21hbGwgY2lyY2xlLlxuICAgICAgICAgIGlmICghKGMgJiBjMCkgJiYgKHQgPSBpbnRlcnNlY3QocG9pbnQxLCBwb2ludDAsIHRydWUpKSkge1xuICAgICAgICAgICAgY2xlYW4gPSAwO1xuICAgICAgICAgICAgaWYgKHNtYWxsUmFkaXVzKSB7XG4gICAgICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHRbMF1bMF0sIHRbMF1bMV0pO1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFsxXVswXSwgdFsxXVsxXSk7XG4gICAgICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFsxXVswXSwgdFsxXVsxXSk7XG4gICAgICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHRbMF1bMF0sIHRbMF1bMV0sIDMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodiAmJiAoIXBvaW50MCB8fCAhcG9pbnRFcXVhbChwb2ludDAsIHBvaW50MSkpKSB7XG4gICAgICAgICAgc3RyZWFtLnBvaW50KHBvaW50MVswXSwgcG9pbnQxWzFdKTtcbiAgICAgICAgfVxuICAgICAgICBwb2ludDAgPSBwb2ludDEsIHYwID0gdiwgYzAgPSBjO1xuICAgICAgfSxcbiAgICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodjApIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgIHBvaW50MCA9IG51bGw7XG4gICAgICB9LFxuICAgICAgLy8gUmVqb2luIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzIGlmIHRoZXJlIHdlcmUgaW50ZXJzZWN0aW9ucyBhbmQgdGhlIGZpcnN0XG4gICAgICAvLyBhbmQgbGFzdCBwb2ludHMgd2VyZSB2aXNpYmxlLlxuICAgICAgY2xlYW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY2xlYW4gfCAoKHYwMCAmJiB2MCkgPDwgMSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIEludGVyc2VjdHMgdGhlIGdyZWF0IGNpcmNsZSBiZXR3ZWVuIGEgYW5kIGIgd2l0aCB0aGUgY2xpcCBjaXJjbGUuXG4gIGZ1bmN0aW9uIGludGVyc2VjdChhLCBiLCB0d28pIHtcbiAgICB2YXIgcGEgPSBjYXJ0ZXNpYW4oYSksXG4gICAgICAgIHBiID0gY2FydGVzaWFuKGIpO1xuXG4gICAgLy8gV2UgaGF2ZSB0d28gcGxhbmVzLCBuMS5wID0gZDEgYW5kIG4yLnAgPSBkMi5cbiAgICAvLyBGaW5kIGludGVyc2VjdGlvbiBsaW5lIHAodCkgPSBjMSBuMSArIGMyIG4yICsgdCAobjEg4qivIG4yKS5cbiAgICB2YXIgbjEgPSBbMSwgMCwgMF0sIC8vIG5vcm1hbFxuICAgICAgICBuMiA9IGNhcnRlc2lhbkNyb3NzKHBhLCBwYiksXG4gICAgICAgIG4ybjIgPSBjYXJ0ZXNpYW5Eb3QobjIsIG4yKSxcbiAgICAgICAgbjFuMiA9IG4yWzBdLCAvLyBjYXJ0ZXNpYW5Eb3QobjEsIG4yKSxcbiAgICAgICAgZGV0ZXJtaW5hbnQgPSBuMm4yIC0gbjFuMiAqIG4xbjI7XG5cbiAgICAvLyBUd28gcG9sYXIgcG9pbnRzLlxuICAgIGlmICghZGV0ZXJtaW5hbnQpIHJldHVybiAhdHdvICYmIGE7XG5cbiAgICB2YXIgYzEgPSAgY3IgKiBuMm4yIC8gZGV0ZXJtaW5hbnQsXG4gICAgICAgIGMyID0gLWNyICogbjFuMiAvIGRldGVybWluYW50LFxuICAgICAgICBuMXhuMiA9IGNhcnRlc2lhbkNyb3NzKG4xLCBuMiksXG4gICAgICAgIEEgPSBjYXJ0ZXNpYW5TY2FsZShuMSwgYzEpLFxuICAgICAgICBCID0gY2FydGVzaWFuU2NhbGUobjIsIGMyKTtcbiAgICBjYXJ0ZXNpYW5BZGRJblBsYWNlKEEsIEIpO1xuXG4gICAgLy8gU29sdmUgfHAodCl8XjIgPSAxLlxuICAgIHZhciB1ID0gbjF4bjIsXG4gICAgICAgIHcgPSBjYXJ0ZXNpYW5Eb3QoQSwgdSksXG4gICAgICAgIHV1ID0gY2FydGVzaWFuRG90KHUsIHUpLFxuICAgICAgICB0MiA9IHcgKiB3IC0gdXUgKiAoY2FydGVzaWFuRG90KEEsIEEpIC0gMSk7XG5cbiAgICBpZiAodDIgPCAwKSByZXR1cm47XG5cbiAgICB2YXIgdCA9IHNxcnQodDIpLFxuICAgICAgICBxID0gY2FydGVzaWFuU2NhbGUodSwgKC13IC0gdCkgLyB1dSk7XG4gICAgY2FydGVzaWFuQWRkSW5QbGFjZShxLCBBKTtcbiAgICBxID0gc3BoZXJpY2FsKHEpO1xuXG4gICAgaWYgKCF0d28pIHJldHVybiBxO1xuXG4gICAgLy8gVHdvIGludGVyc2VjdGlvbiBwb2ludHMuXG4gICAgdmFyIGxhbWJkYTAgPSBhWzBdLFxuICAgICAgICBsYW1iZGExID0gYlswXSxcbiAgICAgICAgcGhpMCA9IGFbMV0sXG4gICAgICAgIHBoaTEgPSBiWzFdLFxuICAgICAgICB6O1xuXG4gICAgaWYgKGxhbWJkYTEgPCBsYW1iZGEwKSB6ID0gbGFtYmRhMCwgbGFtYmRhMCA9IGxhbWJkYTEsIGxhbWJkYTEgPSB6O1xuXG4gICAgdmFyIGRlbHRhID0gbGFtYmRhMSAtIGxhbWJkYTAsXG4gICAgICAgIHBvbGFyID0gYWJzKGRlbHRhIC0gcGkpIDwgZXBzaWxvbixcbiAgICAgICAgbWVyaWRpYW4gPSBwb2xhciB8fCBkZWx0YSA8IGVwc2lsb247XG5cbiAgICBpZiAoIXBvbGFyICYmIHBoaTEgPCBwaGkwKSB6ID0gcGhpMCwgcGhpMCA9IHBoaTEsIHBoaTEgPSB6O1xuXG4gICAgLy8gQ2hlY2sgdGhhdCB0aGUgZmlyc3QgcG9pbnQgaXMgYmV0d2VlbiBhIGFuZCBiLlxuICAgIGlmIChtZXJpZGlhblxuICAgICAgICA/IHBvbGFyXG4gICAgICAgICAgPyBwaGkwICsgcGhpMSA+IDAgXiBxWzFdIDwgKGFicyhxWzBdIC0gbGFtYmRhMCkgPCBlcHNpbG9uID8gcGhpMCA6IHBoaTEpXG4gICAgICAgICAgOiBwaGkwIDw9IHFbMV0gJiYgcVsxXSA8PSBwaGkxXG4gICAgICAgIDogZGVsdGEgPiBwaSBeIChsYW1iZGEwIDw9IHFbMF0gJiYgcVswXSA8PSBsYW1iZGExKSkge1xuICAgICAgdmFyIHExID0gY2FydGVzaWFuU2NhbGUodSwgKC13ICsgdCkgLyB1dSk7XG4gICAgICBjYXJ0ZXNpYW5BZGRJblBsYWNlKHExLCBBKTtcbiAgICAgIHJldHVybiBbcSwgc3BoZXJpY2FsKHExKV07XG4gICAgfVxuICB9XG5cbiAgLy8gR2VuZXJhdGVzIGEgNC1iaXQgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgbG9jYXRpb24gb2YgYSBwb2ludCByZWxhdGl2ZSB0b1xuICAvLyB0aGUgc21hbGwgY2lyY2xlJ3MgYm91bmRpbmcgYm94LlxuICBmdW5jdGlvbiBjb2RlKGxhbWJkYSwgcGhpKSB7XG4gICAgdmFyIHIgPSBzbWFsbFJhZGl1cyA/IHJhZGl1cyA6IHBpIC0gcmFkaXVzLFxuICAgICAgICBjb2RlID0gMDtcbiAgICBpZiAobGFtYmRhIDwgLXIpIGNvZGUgfD0gMTsgLy8gbGVmdFxuICAgIGVsc2UgaWYgKGxhbWJkYSA+IHIpIGNvZGUgfD0gMjsgLy8gcmlnaHRcbiAgICBpZiAocGhpIDwgLXIpIGNvZGUgfD0gNDsgLy8gYmVsb3dcbiAgICBlbHNlIGlmIChwaGkgPiByKSBjb2RlIHw9IDg7IC8vIGFib3ZlXG4gICAgcmV0dXJuIGNvZGU7XG4gIH1cblxuICByZXR1cm4gY2xpcCh2aXNpYmxlLCBjbGlwTGluZSwgaW50ZXJwb2xhdGUsIHNtYWxsUmFkaXVzID8gWzAsIC1yYWRpdXNdIDogWy1waSwgcmFkaXVzIC0gcGldKTtcbn1cbiIsImltcG9ydCB7YWJzLCBlcHNpbG9ufSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IGNsaXBCdWZmZXIgZnJvbSBcIi4vYnVmZmVyLmpzXCI7XG5pbXBvcnQgY2xpcExpbmUgZnJvbSBcIi4vbGluZS5qc1wiO1xuaW1wb3J0IGNsaXBSZWpvaW4gZnJvbSBcIi4vcmVqb2luLmpzXCI7XG5pbXBvcnQge21lcmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcblxudmFyIGNsaXBNYXggPSAxZTksIGNsaXBNaW4gPSAtY2xpcE1heDtcblxuLy8gVE9ETyBVc2UgZDMtcG9seWdvbuKAmXMgcG9seWdvbkNvbnRhaW5zIGhlcmUgZm9yIHRoZSByaW5nIGNoZWNrP1xuLy8gVE9ETyBFbGltaW5hdGUgZHVwbGljYXRlIGJ1ZmZlcmluZyBpbiBjbGlwQnVmZmVyIGFuZCBwb2x5Z29uLnB1c2g/XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsaXBSZWN0YW5nbGUoeDAsIHkwLCB4MSwgeTEpIHtcblxuICBmdW5jdGlvbiB2aXNpYmxlKHgsIHkpIHtcbiAgICByZXR1cm4geDAgPD0geCAmJiB4IDw9IHgxICYmIHkwIDw9IHkgJiYgeSA8PSB5MTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIHN0cmVhbSkge1xuICAgIHZhciBhID0gMCwgYTEgPSAwO1xuICAgIGlmIChmcm9tID09IG51bGxcbiAgICAgICAgfHwgKGEgPSBjb3JuZXIoZnJvbSwgZGlyZWN0aW9uKSkgIT09IChhMSA9IGNvcm5lcih0bywgZGlyZWN0aW9uKSlcbiAgICAgICAgfHwgY29tcGFyZVBvaW50KGZyb20sIHRvKSA8IDAgXiBkaXJlY3Rpb24gPiAwKSB7XG4gICAgICBkbyBzdHJlYW0ucG9pbnQoYSA9PT0gMCB8fCBhID09PSAzID8geDAgOiB4MSwgYSA+IDEgPyB5MSA6IHkwKTtcbiAgICAgIHdoaWxlICgoYSA9IChhICsgZGlyZWN0aW9uICsgNCkgJSA0KSAhPT0gYTEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHJlYW0ucG9pbnQodG9bMF0sIHRvWzFdKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb3JuZXIocCwgZGlyZWN0aW9uKSB7XG4gICAgcmV0dXJuIGFicyhwWzBdIC0geDApIDwgZXBzaWxvbiA/IGRpcmVjdGlvbiA+IDAgPyAwIDogM1xuICAgICAgICA6IGFicyhwWzBdIC0geDEpIDwgZXBzaWxvbiA/IGRpcmVjdGlvbiA+IDAgPyAyIDogMVxuICAgICAgICA6IGFicyhwWzFdIC0geTApIDwgZXBzaWxvbiA/IGRpcmVjdGlvbiA+IDAgPyAxIDogMFxuICAgICAgICA6IGRpcmVjdGlvbiA+IDAgPyAzIDogMjsgLy8gYWJzKHBbMV0gLSB5MSkgPCBlcHNpbG9uXG4gIH1cblxuICBmdW5jdGlvbiBjb21wYXJlSW50ZXJzZWN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gY29tcGFyZVBvaW50KGEueCwgYi54KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBhcmVQb2ludChhLCBiKSB7XG4gICAgdmFyIGNhID0gY29ybmVyKGEsIDEpLFxuICAgICAgICBjYiA9IGNvcm5lcihiLCAxKTtcbiAgICByZXR1cm4gY2EgIT09IGNiID8gY2EgLSBjYlxuICAgICAgICA6IGNhID09PSAwID8gYlsxXSAtIGFbMV1cbiAgICAgICAgOiBjYSA9PT0gMSA/IGFbMF0gLSBiWzBdXG4gICAgICAgIDogY2EgPT09IDIgPyBhWzFdIC0gYlsxXVxuICAgICAgICA6IGJbMF0gLSBhWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHZhciBhY3RpdmVTdHJlYW0gPSBzdHJlYW0sXG4gICAgICAgIGJ1ZmZlclN0cmVhbSA9IGNsaXBCdWZmZXIoKSxcbiAgICAgICAgc2VnbWVudHMsXG4gICAgICAgIHBvbHlnb24sXG4gICAgICAgIHJpbmcsXG4gICAgICAgIHhfXywgeV9fLCB2X18sIC8vIGZpcnN0IHBvaW50XG4gICAgICAgIHhfLCB5Xywgdl8sIC8vIHByZXZpb3VzIHBvaW50XG4gICAgICAgIGZpcnN0LFxuICAgICAgICBjbGVhbjtcblxuICAgIHZhciBjbGlwU3RyZWFtID0ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgcG9seWdvblN0YXJ0OiBwb2x5Z29uU3RhcnQsXG4gICAgICBwb2x5Z29uRW5kOiBwb2x5Z29uRW5kXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIGlmICh2aXNpYmxlKHgsIHkpKSBhY3RpdmVTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9seWdvbkluc2lkZSgpIHtcbiAgICAgIHZhciB3aW5kaW5nID0gMDtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBmb3IgKHZhciByaW5nID0gcG9seWdvbltpXSwgaiA9IDEsIG0gPSByaW5nLmxlbmd0aCwgcG9pbnQgPSByaW5nWzBdLCBhMCwgYTEsIGIwID0gcG9pbnRbMF0sIGIxID0gcG9pbnRbMV07IGogPCBtOyArK2opIHtcbiAgICAgICAgICBhMCA9IGIwLCBhMSA9IGIxLCBwb2ludCA9IHJpbmdbal0sIGIwID0gcG9pbnRbMF0sIGIxID0gcG9pbnRbMV07XG4gICAgICAgICAgaWYgKGExIDw9IHkxKSB7IGlmIChiMSA+IHkxICYmIChiMCAtIGEwKSAqICh5MSAtIGExKSA+IChiMSAtIGExKSAqICh4MCAtIGEwKSkgKyt3aW5kaW5nOyB9XG4gICAgICAgICAgZWxzZSB7IGlmIChiMSA8PSB5MSAmJiAoYjAgLSBhMCkgKiAoeTEgLSBhMSkgPCAoYjEgLSBhMSkgKiAoeDAgLSBhMCkpIC0td2luZGluZzsgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB3aW5kaW5nO1xuICAgIH1cblxuICAgIC8vIEJ1ZmZlciBnZW9tZXRyeSB3aXRoaW4gYSBwb2x5Z29uIGFuZCB0aGVuIGNsaXAgaXQgZW4gbWFzc2UuXG4gICAgZnVuY3Rpb24gcG9seWdvblN0YXJ0KCkge1xuICAgICAgYWN0aXZlU3RyZWFtID0gYnVmZmVyU3RyZWFtLCBzZWdtZW50cyA9IFtdLCBwb2x5Z29uID0gW10sIGNsZWFuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2x5Z29uRW5kKCkge1xuICAgICAgdmFyIHN0YXJ0SW5zaWRlID0gcG9seWdvbkluc2lkZSgpLFxuICAgICAgICAgIGNsZWFuSW5zaWRlID0gY2xlYW4gJiYgc3RhcnRJbnNpZGUsXG4gICAgICAgICAgdmlzaWJsZSA9IChzZWdtZW50cyA9IG1lcmdlKHNlZ21lbnRzKSkubGVuZ3RoO1xuICAgICAgaWYgKGNsZWFuSW5zaWRlIHx8IHZpc2libGUpIHtcbiAgICAgICAgc3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICAgICAgICBpZiAoY2xlYW5JbnNpZGUpIHtcbiAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgc3RyZWFtKTtcbiAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgICAgY2xpcFJlam9pbihzZWdtZW50cywgY29tcGFyZUludGVyc2VjdGlvbiwgc3RhcnRJbnNpZGUsIGludGVycG9sYXRlLCBzdHJlYW0pO1xuICAgICAgICB9XG4gICAgICAgIHN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgICB9XG4gICAgICBhY3RpdmVTdHJlYW0gPSBzdHJlYW0sIHNlZ21lbnRzID0gcG9seWdvbiA9IHJpbmcgPSBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgIGNsaXBTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICBpZiAocG9seWdvbikgcG9seWdvbi5wdXNoKHJpbmcgPSBbXSk7XG4gICAgICBmaXJzdCA9IHRydWU7XG4gICAgICB2XyA9IGZhbHNlO1xuICAgICAgeF8gPSB5XyA9IE5hTjtcbiAgICB9XG5cbiAgICAvLyBUT0RPIHJhdGhlciB0aGFuIHNwZWNpYWwtY2FzZSBwb2x5Z29ucywgc2ltcGx5IGhhbmRsZSB0aGVtIHNlcGFyYXRlbHkuXG4gICAgLy8gSWRlYWxseSwgY29pbmNpZGVudCBpbnRlcnNlY3Rpb24gcG9pbnRzIHNob3VsZCBiZSBqaXR0ZXJlZCB0byBhdm9pZFxuICAgIC8vIGNsaXBwaW5nIGlzc3Vlcy5cbiAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgaWYgKHNlZ21lbnRzKSB7XG4gICAgICAgIGxpbmVQb2ludCh4X18sIHlfXyk7XG4gICAgICAgIGlmICh2X18gJiYgdl8pIGJ1ZmZlclN0cmVhbS5yZWpvaW4oKTtcbiAgICAgICAgc2VnbWVudHMucHVzaChidWZmZXJTdHJlYW0ucmVzdWx0KCkpO1xuICAgICAgfVxuICAgICAgY2xpcFN0cmVhbS5wb2ludCA9IHBvaW50O1xuICAgICAgaWYgKHZfKSBhY3RpdmVTdHJlYW0ubGluZUVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVQb2ludCh4LCB5KSB7XG4gICAgICB2YXIgdiA9IHZpc2libGUoeCwgeSk7XG4gICAgICBpZiAocG9seWdvbikgcmluZy5wdXNoKFt4LCB5XSk7XG4gICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgeF9fID0geCwgeV9fID0geSwgdl9fID0gdjtcbiAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICBhY3RpdmVTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgYWN0aXZlU3RyZWFtLnBvaW50KHgsIHkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodiAmJiB2XykgYWN0aXZlU3RyZWFtLnBvaW50KHgsIHkpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgYSA9IFt4XyA9IE1hdGgubWF4KGNsaXBNaW4sIE1hdGgubWluKGNsaXBNYXgsIHhfKSksIHlfID0gTWF0aC5tYXgoY2xpcE1pbiwgTWF0aC5taW4oY2xpcE1heCwgeV8pKV0sXG4gICAgICAgICAgICAgIGIgPSBbeCA9IE1hdGgubWF4KGNsaXBNaW4sIE1hdGgubWluKGNsaXBNYXgsIHgpKSwgeSA9IE1hdGgubWF4KGNsaXBNaW4sIE1hdGgubWluKGNsaXBNYXgsIHkpKV07XG4gICAgICAgICAgaWYgKGNsaXBMaW5lKGEsIGIsIHgwLCB5MCwgeDEsIHkxKSkge1xuICAgICAgICAgICAgaWYgKCF2Xykge1xuICAgICAgICAgICAgICBhY3RpdmVTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludChhWzBdLCBhWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludChiWzBdLCBiWzFdKTtcbiAgICAgICAgICAgIGlmICghdikgYWN0aXZlU3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICAgIGNsZWFuID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIGlmICh2KSB7XG4gICAgICAgICAgICBhY3RpdmVTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgICAgICAgICBjbGVhbiA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgeF8gPSB4LCB5XyA9IHksIHZfID0gdjtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xpcFN0cmVhbTtcbiAgfTtcbn1cbiIsImltcG9ydCB7QWRkZXJ9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHthYnMsIGF0YW4yLCBjb3MsIHJhZGlhbnMsIHNpbiwgc3FydH0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4vbm9vcC5qc1wiO1xuaW1wb3J0IHN0cmVhbSBmcm9tIFwiLi9zdHJlYW0uanNcIjtcblxudmFyIGxlbmd0aFN1bSxcbiAgICBsYW1iZGEwLFxuICAgIHNpblBoaTAsXG4gICAgY29zUGhpMDtcblxudmFyIGxlbmd0aFN0cmVhbSA9IHtcbiAgc3BoZXJlOiBub29wLFxuICBwb2ludDogbm9vcCxcbiAgbGluZVN0YXJ0OiBsZW5ndGhMaW5lU3RhcnQsXG4gIGxpbmVFbmQ6IG5vb3AsXG4gIHBvbHlnb25TdGFydDogbm9vcCxcbiAgcG9seWdvbkVuZDogbm9vcFxufTtcblxuZnVuY3Rpb24gbGVuZ3RoTGluZVN0YXJ0KCkge1xuICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludEZpcnN0O1xuICBsZW5ndGhTdHJlYW0ubGluZUVuZCA9IGxlbmd0aExpbmVFbmQ7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aExpbmVFbmQoKSB7XG4gIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFN0cmVhbS5saW5lRW5kID0gbm9vcDtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoUG9pbnRGaXJzdChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIGxhbWJkYTAgPSBsYW1iZGEsIHNpblBoaTAgPSBzaW4ocGhpKSwgY29zUGhpMCA9IGNvcyhwaGkpO1xuICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludDtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICB2YXIgc2luUGhpID0gc2luKHBoaSksXG4gICAgICBjb3NQaGkgPSBjb3MocGhpKSxcbiAgICAgIGRlbHRhID0gYWJzKGxhbWJkYSAtIGxhbWJkYTApLFxuICAgICAgY29zRGVsdGEgPSBjb3MoZGVsdGEpLFxuICAgICAgc2luRGVsdGEgPSBzaW4oZGVsdGEpLFxuICAgICAgeCA9IGNvc1BoaSAqIHNpbkRlbHRhLFxuICAgICAgeSA9IGNvc1BoaTAgKiBzaW5QaGkgLSBzaW5QaGkwICogY29zUGhpICogY29zRGVsdGEsXG4gICAgICB6ID0gc2luUGhpMCAqIHNpblBoaSArIGNvc1BoaTAgKiBjb3NQaGkgKiBjb3NEZWx0YTtcbiAgbGVuZ3RoU3VtLmFkZChhdGFuMihzcXJ0KHggKiB4ICsgeSAqIHkpLCB6KSk7XG4gIGxhbWJkYTAgPSBsYW1iZGEsIHNpblBoaTAgPSBzaW5QaGksIGNvc1BoaTAgPSBjb3NQaGk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iamVjdCkge1xuICBsZW5ndGhTdW0gPSBuZXcgQWRkZXIoKTtcbiAgc3RyZWFtKG9iamVjdCwgbGVuZ3RoU3RyZWFtKTtcbiAgcmV0dXJuICtsZW5ndGhTdW07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiLCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYnggPSBiWzBdLFxuICAgICAgYnkgPSBiWzFdLFxuICAgICAgdDAgPSAwLFxuICAgICAgdDEgPSAxLFxuICAgICAgZHggPSBieCAtIGF4LFxuICAgICAgZHkgPSBieSAtIGF5LFxuICAgICAgcjtcblxuICByID0geDAgLSBheDtcbiAgaWYgKCFkeCAmJiByID4gMCkgcmV0dXJuO1xuICByIC89IGR4O1xuICBpZiAoZHggPCAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9XG5cbiAgciA9IHgxIC0gYXg7XG4gIGlmICghZHggJiYgciA8IDApIHJldHVybjtcbiAgciAvPSBkeDtcbiAgaWYgKGR4IDwgMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH0gZWxzZSBpZiAoZHggPiAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfVxuXG4gIHIgPSB5MCAtIGF5O1xuICBpZiAoIWR5ICYmIHIgPiAwKSByZXR1cm47XG4gIHIgLz0gZHk7XG4gIGlmIChkeSA8IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH1cblxuICByID0geTEgLSBheTtcbiAgaWYgKCFkeSAmJiByIDwgMCkgcmV0dXJuO1xuICByIC89IGR5O1xuICBpZiAoZHkgPCAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9XG5cbiAgaWYgKHQwID4gMCkgYVswXSA9IGF4ICsgdDAgKiBkeCwgYVsxXSA9IGF5ICsgdDAgKiBkeTtcbiAgaWYgKHQxIDwgMSkgYlswXSA9IGF4ICsgdDEgKiBkeCwgYlsxXSA9IGF5ICsgdDEgKiBkeTtcbiAgcmV0dXJuIHRydWU7XG59XG4iLCJpbXBvcnQgY2xpcFJlY3RhbmdsZSBmcm9tIFwiLi9yZWN0YW5nbGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB4MCA9IDAsXG4gICAgICB5MCA9IDAsXG4gICAgICB4MSA9IDk2MCxcbiAgICAgIHkxID0gNTAwLFxuICAgICAgY2FjaGUsXG4gICAgICBjYWNoZVN0cmVhbSxcbiAgICAgIGNsaXA7XG5cbiAgcmV0dXJuIGNsaXAgPSB7XG4gICAgc3RyZWFtOiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgIHJldHVybiBjYWNoZSAmJiBjYWNoZVN0cmVhbSA9PT0gc3RyZWFtID8gY2FjaGUgOiBjYWNoZSA9IGNsaXBSZWN0YW5nbGUoeDAsIHkwLCB4MSwgeTEpKGNhY2hlU3RyZWFtID0gc3RyZWFtKTtcbiAgICB9LFxuICAgIGV4dGVudDogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSArX1swXVswXSwgeTAgPSArX1swXVsxXSwgeDEgPSArX1sxXVswXSwgeTEgPSArX1sxXVsxXSwgY2FjaGUgPSBjYWNoZVN0cmVhbSA9IG51bGwsIGNsaXApIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IGxlbmd0aCBmcm9tIFwiLi9sZW5ndGguanNcIjtcblxudmFyIGNvb3JkaW5hdGVzID0gW251bGwsIG51bGxdLFxuICAgIG9iamVjdCA9IHt0eXBlOiBcIkxpbmVTdHJpbmdcIiwgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzfTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICBjb29yZGluYXRlc1swXSA9IGE7XG4gIGNvb3JkaW5hdGVzWzFdID0gYjtcbiAgcmV0dXJuIGxlbmd0aChvYmplY3QpO1xufVxuIiwiaW1wb3J0IHtkZWZhdWx0IGFzIHBvbHlnb25Db250YWluc30gZnJvbSBcIi4vcG9seWdvbkNvbnRhaW5zLmpzXCI7XG5pbXBvcnQge2RlZmF1bHQgYXMgZGlzdGFuY2V9IGZyb20gXCIuL2Rpc3RhbmNlLmpzXCI7XG5pbXBvcnQge2Vwc2lsb24yLCByYWRpYW5zfSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbnZhciBjb250YWluc09iamVjdFR5cGUgPSB7XG4gIEZlYXR1cmU6IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICByZXR1cm4gY29udGFpbnNHZW9tZXRyeShvYmplY3QuZ2VvbWV0cnksIHBvaW50KTtcbiAgfSxcbiAgRmVhdHVyZUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICB2YXIgZmVhdHVyZXMgPSBvYmplY3QuZmVhdHVyZXMsIGkgPSAtMSwgbiA9IGZlYXR1cmVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKGNvbnRhaW5zR2VvbWV0cnkoZmVhdHVyZXNbaV0uZ2VvbWV0cnksIHBvaW50KSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG52YXIgY29udGFpbnNHZW9tZXRyeVR5cGUgPSB7XG4gIFNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIFBvaW50OiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zUG9pbnQob2JqZWN0LmNvb3JkaW5hdGVzLCBwb2ludCk7XG4gIH0sXG4gIE11bHRpUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKGNvbnRhaW5zUG9pbnQoY29vcmRpbmF0ZXNbaV0sIHBvaW50KSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zTGluZShvYmplY3QuY29vcmRpbmF0ZXMsIHBvaW50KTtcbiAgfSxcbiAgTXVsdGlMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmIChjb250YWluc0xpbmUoY29vcmRpbmF0ZXNbaV0sIHBvaW50KSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zUG9seWdvbihvYmplY3QuY29vcmRpbmF0ZXMsIHBvaW50KTtcbiAgfSxcbiAgTXVsdGlQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmIChjb250YWluc1BvbHlnb24oY29vcmRpbmF0ZXNbaV0sIHBvaW50KSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBHZW9tZXRyeUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICB2YXIgZ2VvbWV0cmllcyA9IG9iamVjdC5nZW9tZXRyaWVzLCBpID0gLTEsIG4gPSBnZW9tZXRyaWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKGNvbnRhaW5zR2VvbWV0cnkoZ2VvbWV0cmllc1tpXSwgcG9pbnQpKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNvbnRhaW5zR2VvbWV0cnkoZ2VvbWV0cnksIHBvaW50KSB7XG4gIHJldHVybiBnZW9tZXRyeSAmJiBjb250YWluc0dlb21ldHJ5VHlwZS5oYXNPd25Qcm9wZXJ0eShnZW9tZXRyeS50eXBlKVxuICAgICAgPyBjb250YWluc0dlb21ldHJ5VHlwZVtnZW9tZXRyeS50eXBlXShnZW9tZXRyeSwgcG9pbnQpXG4gICAgICA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjb250YWluc1BvaW50KGNvb3JkaW5hdGVzLCBwb2ludCkge1xuICByZXR1cm4gZGlzdGFuY2UoY29vcmRpbmF0ZXMsIHBvaW50KSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gY29udGFpbnNMaW5lKGNvb3JkaW5hdGVzLCBwb2ludCkge1xuICB2YXIgYW8sIGJvLCBhYjtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICBibyA9IGRpc3RhbmNlKGNvb3JkaW5hdGVzW2ldLCBwb2ludCk7XG4gICAgaWYgKGJvID09PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoaSA+IDApIHtcbiAgICAgIGFiID0gZGlzdGFuY2UoY29vcmRpbmF0ZXNbaV0sIGNvb3JkaW5hdGVzW2kgLSAxXSk7XG4gICAgICBpZiAoXG4gICAgICAgIGFiID4gMCAmJlxuICAgICAgICBhbyA8PSBhYiAmJlxuICAgICAgICBibyA8PSBhYiAmJlxuICAgICAgICAoYW8gKyBibyAtIGFiKSAqICgxIC0gTWF0aC5wb3coKGFvIC0gYm8pIC8gYWIsIDIpKSA8IGVwc2lsb24yICogYWJcbiAgICAgIClcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGFvID0gYm87XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjb250YWluc1BvbHlnb24oY29vcmRpbmF0ZXMsIHBvaW50KSB7XG4gIHJldHVybiAhIXBvbHlnb25Db250YWlucyhjb29yZGluYXRlcy5tYXAocmluZ1JhZGlhbnMpLCBwb2ludFJhZGlhbnMocG9pbnQpKTtcbn1cblxuZnVuY3Rpb24gcmluZ1JhZGlhbnMocmluZykge1xuICByZXR1cm4gcmluZyA9IHJpbmcubWFwKHBvaW50UmFkaWFucyksIHJpbmcucG9wKCksIHJpbmc7XG59XG5cbmZ1bmN0aW9uIHBvaW50UmFkaWFucyhwb2ludCkge1xuICByZXR1cm4gW3BvaW50WzBdICogcmFkaWFucywgcG9pbnRbMV0gKiByYWRpYW5zXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICByZXR1cm4gKG9iamVjdCAmJiBjb250YWluc09iamVjdFR5cGUuaGFzT3duUHJvcGVydHkob2JqZWN0LnR5cGUpXG4gICAgICA/IGNvbnRhaW5zT2JqZWN0VHlwZVtvYmplY3QudHlwZV1cbiAgICAgIDogY29udGFpbnNHZW9tZXRyeSkob2JqZWN0LCBwb2ludCk7XG59XG4iLCJpbXBvcnQge3JhbmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7YWJzLCBjZWlsLCBlcHNpbG9ufSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIGdyYXRpY3VsZVgoeTAsIHkxLCBkeSkge1xuICB2YXIgeSA9IHJhbmdlKHkwLCB5MSAtIGVwc2lsb24sIGR5KS5jb25jYXQoeTEpO1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4geS5tYXAoZnVuY3Rpb24oeSkgeyByZXR1cm4gW3gsIHldOyB9KTsgfTtcbn1cblxuZnVuY3Rpb24gZ3JhdGljdWxlWSh4MCwgeDEsIGR4KSB7XG4gIHZhciB4ID0gcmFuZ2UoeDAsIHgxIC0gZXBzaWxvbiwgZHgpLmNvbmNhdCh4MSk7XG4gIHJldHVybiBmdW5jdGlvbih5KSB7IHJldHVybiB4Lm1hcChmdW5jdGlvbih4KSB7IHJldHVybiBbeCwgeV07IH0pOyB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBncmF0aWN1bGUoKSB7XG4gIHZhciB4MSwgeDAsIFgxLCBYMCxcbiAgICAgIHkxLCB5MCwgWTEsIFkwLFxuICAgICAgZHggPSAxMCwgZHkgPSBkeCwgRFggPSA5MCwgRFkgPSAzNjAsXG4gICAgICB4LCB5LCBYLCBZLFxuICAgICAgcHJlY2lzaW9uID0gMi41O1xuXG4gIGZ1bmN0aW9uIGdyYXRpY3VsZSgpIHtcbiAgICByZXR1cm4ge3R5cGU6IFwiTXVsdGlMaW5lU3RyaW5nXCIsIGNvb3JkaW5hdGVzOiBsaW5lcygpfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVzKCkge1xuICAgIHJldHVybiByYW5nZShjZWlsKFgwIC8gRFgpICogRFgsIFgxLCBEWCkubWFwKFgpXG4gICAgICAgIC5jb25jYXQocmFuZ2UoY2VpbChZMCAvIERZKSAqIERZLCBZMSwgRFkpLm1hcChZKSlcbiAgICAgICAgLmNvbmNhdChyYW5nZShjZWlsKHgwIC8gZHgpICogZHgsIHgxLCBkeCkuZmlsdGVyKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIGFicyh4ICUgRFgpID4gZXBzaWxvbjsgfSkubWFwKHgpKVxuICAgICAgICAuY29uY2F0KHJhbmdlKGNlaWwoeTAgLyBkeSkgKiBkeSwgeTEsIGR5KS5maWx0ZXIoZnVuY3Rpb24oeSkgeyByZXR1cm4gYWJzKHkgJSBEWSkgPiBlcHNpbG9uOyB9KS5tYXAoeSkpO1xuICB9XG5cbiAgZ3JhdGljdWxlLmxpbmVzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGxpbmVzKCkubWFwKGZ1bmN0aW9uKGNvb3JkaW5hdGVzKSB7IHJldHVybiB7dHlwZTogXCJMaW5lU3RyaW5nXCIsIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc307IH0pO1xuICB9O1xuXG4gIGdyYXRpY3VsZS5vdXRsaW5lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiUG9seWdvblwiLFxuICAgICAgY29vcmRpbmF0ZXM6IFtcbiAgICAgICAgWChYMCkuY29uY2F0KFxuICAgICAgICBZKFkxKS5zbGljZSgxKSxcbiAgICAgICAgWChYMSkucmV2ZXJzZSgpLnNsaWNlKDEpLFxuICAgICAgICBZKFkwKS5yZXZlcnNlKCkuc2xpY2UoMSkpXG4gICAgICBdXG4gICAgfTtcbiAgfTtcblxuICBncmF0aWN1bGUuZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGdyYXRpY3VsZS5leHRlbnRNaW5vcigpO1xuICAgIHJldHVybiBncmF0aWN1bGUuZXh0ZW50TWFqb3IoXykuZXh0ZW50TWlub3IoXyk7XG4gIH07XG5cbiAgZ3JhdGljdWxlLmV4dGVudE1ham9yID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtbWDAsIFkwXSwgW1gxLCBZMV1dO1xuICAgIFgwID0gK19bMF1bMF0sIFgxID0gK19bMV1bMF07XG4gICAgWTAgPSArX1swXVsxXSwgWTEgPSArX1sxXVsxXTtcbiAgICBpZiAoWDAgPiBYMSkgXyA9IFgwLCBYMCA9IFgxLCBYMSA9IF87XG4gICAgaWYgKFkwID4gWTEpIF8gPSBZMCwgWTAgPSBZMSwgWTEgPSBfO1xuICAgIHJldHVybiBncmF0aWN1bGUucHJlY2lzaW9uKHByZWNpc2lvbik7XG4gIH07XG5cbiAgZ3JhdGljdWxlLmV4dGVudE1pbm9yID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICAgIHgwID0gK19bMF1bMF0sIHgxID0gK19bMV1bMF07XG4gICAgeTAgPSArX1swXVsxXSwgeTEgPSArX1sxXVsxXTtcbiAgICBpZiAoeDAgPiB4MSkgXyA9IHgwLCB4MCA9IHgxLCB4MSA9IF87XG4gICAgaWYgKHkwID4geTEpIF8gPSB5MCwgeTAgPSB5MSwgeTEgPSBfO1xuICAgIHJldHVybiBncmF0aWN1bGUucHJlY2lzaW9uKHByZWNpc2lvbik7XG4gIH07XG5cbiAgZ3JhdGljdWxlLnN0ZXAgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZ3JhdGljdWxlLnN0ZXBNaW5vcigpO1xuICAgIHJldHVybiBncmF0aWN1bGUuc3RlcE1ham9yKF8pLnN0ZXBNaW5vcihfKTtcbiAgfTtcblxuICBncmF0aWN1bGUuc3RlcE1ham9yID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtEWCwgRFldO1xuICAgIERYID0gK19bMF0sIERZID0gK19bMV07XG4gICAgcmV0dXJuIGdyYXRpY3VsZTtcbiAgfTtcblxuICBncmF0aWN1bGUuc3RlcE1pbm9yID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtkeCwgZHldO1xuICAgIGR4ID0gK19bMF0sIGR5ID0gK19bMV07XG4gICAgcmV0dXJuIGdyYXRpY3VsZTtcbiAgfTtcblxuICBncmF0aWN1bGUucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHByZWNpc2lvbjtcbiAgICBwcmVjaXNpb24gPSArXztcbiAgICB4ID0gZ3JhdGljdWxlWCh5MCwgeTEsIDkwKTtcbiAgICB5ID0gZ3JhdGljdWxlWSh4MCwgeDEsIHByZWNpc2lvbik7XG4gICAgWCA9IGdyYXRpY3VsZVgoWTAsIFkxLCA5MCk7XG4gICAgWSA9IGdyYXRpY3VsZVkoWDAsIFgxLCBwcmVjaXNpb24pO1xuICAgIHJldHVybiBncmF0aWN1bGU7XG4gIH07XG5cbiAgcmV0dXJuIGdyYXRpY3VsZVxuICAgICAgLmV4dGVudE1ham9yKFtbLTE4MCwgLTkwICsgZXBzaWxvbl0sIFsxODAsIDkwIC0gZXBzaWxvbl1dKVxuICAgICAgLmV4dGVudE1pbm9yKFtbLTE4MCwgLTgwIC0gZXBzaWxvbl0sIFsxODAsIDgwICsgZXBzaWxvbl1dKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyYXRpY3VsZTEwKCkge1xuICByZXR1cm4gZ3JhdGljdWxlKCkoKTtcbn1cbiIsImltcG9ydCB7YXNpbiwgYXRhbjIsIGNvcywgZGVncmVlcywgaGF2ZXJzaW4sIHJhZGlhbnMsIHNpbiwgc3FydH0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciB4MCA9IGFbMF0gKiByYWRpYW5zLFxuICAgICAgeTAgPSBhWzFdICogcmFkaWFucyxcbiAgICAgIHgxID0gYlswXSAqIHJhZGlhbnMsXG4gICAgICB5MSA9IGJbMV0gKiByYWRpYW5zLFxuICAgICAgY3kwID0gY29zKHkwKSxcbiAgICAgIHN5MCA9IHNpbih5MCksXG4gICAgICBjeTEgPSBjb3MoeTEpLFxuICAgICAgc3kxID0gc2luKHkxKSxcbiAgICAgIGt4MCA9IGN5MCAqIGNvcyh4MCksXG4gICAgICBreTAgPSBjeTAgKiBzaW4oeDApLFxuICAgICAga3gxID0gY3kxICogY29zKHgxKSxcbiAgICAgIGt5MSA9IGN5MSAqIHNpbih4MSksXG4gICAgICBkID0gMiAqIGFzaW4oc3FydChoYXZlcnNpbih5MSAtIHkwKSArIGN5MCAqIGN5MSAqIGhhdmVyc2luKHgxIC0geDApKSksXG4gICAgICBrID0gc2luKGQpO1xuXG4gIHZhciBpbnRlcnBvbGF0ZSA9IGQgPyBmdW5jdGlvbih0KSB7XG4gICAgdmFyIEIgPSBzaW4odCAqPSBkKSAvIGssXG4gICAgICAgIEEgPSBzaW4oZCAtIHQpIC8gayxcbiAgICAgICAgeCA9IEEgKiBreDAgKyBCICoga3gxLFxuICAgICAgICB5ID0gQSAqIGt5MCArIEIgKiBreTEsXG4gICAgICAgIHogPSBBICogc3kwICsgQiAqIHN5MTtcbiAgICByZXR1cm4gW1xuICAgICAgYXRhbjIoeSwgeCkgKiBkZWdyZWVzLFxuICAgICAgYXRhbjIoeiwgc3FydCh4ICogeCArIHkgKiB5KSkgKiBkZWdyZWVzXG4gICAgXTtcbiAgfSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBbeDAgKiBkZWdyZWVzLCB5MCAqIGRlZ3JlZXNdO1xuICB9O1xuXG4gIGludGVycG9sYXRlLmRpc3RhbmNlID0gZDtcblxuICByZXR1cm4gaW50ZXJwb2xhdGU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCB4ID0+IHg7XG4iLCJpbXBvcnQge0FkZGVyfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7YWJzfSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3AuanNcIjtcblxudmFyIGFyZWFTdW0gPSBuZXcgQWRkZXIoKSxcbiAgICBhcmVhUmluZ1N1bSA9IG5ldyBBZGRlcigpLFxuICAgIHgwMCxcbiAgICB5MDAsXG4gICAgeDAsXG4gICAgeTA7XG5cbnZhciBhcmVhU3RyZWFtID0ge1xuICBwb2ludDogbm9vcCxcbiAgbGluZVN0YXJ0OiBub29wLFxuICBsaW5lRW5kOiBub29wLFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGFyZWFTdHJlYW0ubGluZVN0YXJ0ID0gYXJlYVJpbmdTdGFydDtcbiAgICBhcmVhU3RyZWFtLmxpbmVFbmQgPSBhcmVhUmluZ0VuZDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgYXJlYVN0cmVhbS5saW5lU3RhcnQgPSBhcmVhU3RyZWFtLmxpbmVFbmQgPSBhcmVhU3RyZWFtLnBvaW50ID0gbm9vcDtcbiAgICBhcmVhU3VtLmFkZChhYnMoYXJlYVJpbmdTdW0pKTtcbiAgICBhcmVhUmluZ1N1bSA9IG5ldyBBZGRlcigpO1xuICB9LFxuICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmVhID0gYXJlYVN1bSAvIDI7XG4gICAgYXJlYVN1bSA9IG5ldyBBZGRlcigpO1xuICAgIHJldHVybiBhcmVhO1xuICB9XG59O1xuXG5mdW5jdGlvbiBhcmVhUmluZ1N0YXJ0KCkge1xuICBhcmVhU3RyZWFtLnBvaW50ID0gYXJlYVBvaW50Rmlyc3Q7XG59XG5cbmZ1bmN0aW9uIGFyZWFQb2ludEZpcnN0KHgsIHkpIHtcbiAgYXJlYVN0cmVhbS5wb2ludCA9IGFyZWFQb2ludDtcbiAgeDAwID0geDAgPSB4LCB5MDAgPSB5MCA9IHk7XG59XG5cbmZ1bmN0aW9uIGFyZWFQb2ludCh4LCB5KSB7XG4gIGFyZWFSaW5nU3VtLmFkZCh5MCAqIHggLSB4MCAqIHkpO1xuICB4MCA9IHgsIHkwID0geTtcbn1cblxuZnVuY3Rpb24gYXJlYVJpbmdFbmQoKSB7XG4gIGFyZWFQb2ludCh4MDAsIHkwMCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFyZWFTdHJlYW07XG4iLCJpbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcC5qc1wiO1xuXG52YXIgeDAgPSBJbmZpbml0eSxcbiAgICB5MCA9IHgwLFxuICAgIHgxID0gLXgwLFxuICAgIHkxID0geDE7XG5cbnZhciBib3VuZHNTdHJlYW0gPSB7XG4gIHBvaW50OiBib3VuZHNQb2ludCxcbiAgbGluZVN0YXJ0OiBub29wLFxuICBsaW5lRW5kOiBub29wLFxuICBwb2x5Z29uU3RhcnQ6IG5vb3AsXG4gIHBvbHlnb25FbmQ6IG5vb3AsXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJvdW5kcyA9IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICAgIHgxID0geTEgPSAtKHkwID0geDAgPSBJbmZpbml0eSk7XG4gICAgcmV0dXJuIGJvdW5kcztcbiAgfVxufTtcblxuZnVuY3Rpb24gYm91bmRzUG9pbnQoeCwgeSkge1xuICBpZiAoeCA8IHgwKSB4MCA9IHg7XG4gIGlmICh4ID4geDEpIHgxID0geDtcbiAgaWYgKHkgPCB5MCkgeTAgPSB5O1xuICBpZiAoeSA+IHkxKSB5MSA9IHk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJvdW5kc1N0cmVhbTtcbiIsImltcG9ydCB7c3FydH0gZnJvbSBcIi4uL21hdGguanNcIjtcblxuLy8gVE9ETyBFbmZvcmNlIHBvc2l0aXZlIGFyZWEgZm9yIGV4dGVyaW9yLCBuZWdhdGl2ZSBhcmVhIGZvciBpbnRlcmlvcj9cblxudmFyIFgwID0gMCxcbiAgICBZMCA9IDAsXG4gICAgWjAgPSAwLFxuICAgIFgxID0gMCxcbiAgICBZMSA9IDAsXG4gICAgWjEgPSAwLFxuICAgIFgyID0gMCxcbiAgICBZMiA9IDAsXG4gICAgWjIgPSAwLFxuICAgIHgwMCxcbiAgICB5MDAsXG4gICAgeDAsXG4gICAgeTA7XG5cbnZhciBjZW50cm9pZFN0cmVhbSA9IHtcbiAgcG9pbnQ6IGNlbnRyb2lkUG9pbnQsXG4gIGxpbmVTdGFydDogY2VudHJvaWRMaW5lU3RhcnQsXG4gIGxpbmVFbmQ6IGNlbnRyb2lkTGluZUVuZCxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lU3RhcnQgPSBjZW50cm9pZFJpbmdTdGFydDtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lRW5kID0gY2VudHJvaWRSaW5nRW5kO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnQ7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZVN0YXJ0ID0gY2VudHJvaWRMaW5lU3RhcnQ7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZUVuZCA9IGNlbnRyb2lkTGluZUVuZDtcbiAgfSxcbiAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2VudHJvaWQgPSBaMiA/IFtYMiAvIFoyLCBZMiAvIFoyXVxuICAgICAgICA6IFoxID8gW1gxIC8gWjEsIFkxIC8gWjFdXG4gICAgICAgIDogWjAgPyBbWDAgLyBaMCwgWTAgLyBaMF1cbiAgICAgICAgOiBbTmFOLCBOYU5dO1xuICAgIFgwID0gWTAgPSBaMCA9XG4gICAgWDEgPSBZMSA9IFoxID1cbiAgICBYMiA9IFkyID0gWjIgPSAwO1xuICAgIHJldHVybiBjZW50cm9pZDtcbiAgfVxufTtcblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludCh4LCB5KSB7XG4gIFgwICs9IHg7XG4gIFkwICs9IHk7XG4gICsrWjA7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZVN0YXJ0KCkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnRGaXJzdExpbmU7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRGaXJzdExpbmUoeCwgeSkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnRMaW5lO1xuICBjZW50cm9pZFBvaW50KHgwID0geCwgeTAgPSB5KTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludExpbmUoeCwgeSkge1xuICB2YXIgZHggPSB4IC0geDAsIGR5ID0geSAtIHkwLCB6ID0gc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gIFgxICs9IHogKiAoeDAgKyB4KSAvIDI7XG4gIFkxICs9IHogKiAoeTAgKyB5KSAvIDI7XG4gIFoxICs9IHo7XG4gIGNlbnRyb2lkUG9pbnQoeDAgPSB4LCB5MCA9IHkpO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZExpbmVFbmQoKSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludDtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRSaW5nU3RhcnQoKSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludEZpcnN0UmluZztcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRSaW5nRW5kKCkge1xuICBjZW50cm9pZFBvaW50UmluZyh4MDAsIHkwMCk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRGaXJzdFJpbmcoeCwgeSkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnRSaW5nO1xuICBjZW50cm9pZFBvaW50KHgwMCA9IHgwID0geCwgeTAwID0geTAgPSB5KTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludFJpbmcoeCwgeSkge1xuICB2YXIgZHggPSB4IC0geDAsXG4gICAgICBkeSA9IHkgLSB5MCxcbiAgICAgIHogPSBzcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcblxuICBYMSArPSB6ICogKHgwICsgeCkgLyAyO1xuICBZMSArPSB6ICogKHkwICsgeSkgLyAyO1xuICBaMSArPSB6O1xuXG4gIHogPSB5MCAqIHggLSB4MCAqIHk7XG4gIFgyICs9IHogKiAoeDAgKyB4KTtcbiAgWTIgKz0geiAqICh5MCArIHkpO1xuICBaMiArPSB6ICogMztcbiAgY2VudHJvaWRQb2ludCh4MCA9IHgsIHkwID0geSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNlbnRyb2lkU3RyZWFtO1xuIiwiaW1wb3J0IHt0YXV9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQYXRoQ29udGV4dChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5QYXRoQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gIF9yYWRpdXM6IDQuNSxcbiAgcG9pbnRSYWRpdXM6IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gdGhpcy5fcmFkaXVzID0gXywgdGhpcztcbiAgfSxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lID09PSAwKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX3BvaW50ID0gTmFOO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDoge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgICAgICAgdGhpcy5fcG9pbnQgPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHggKyB0aGlzLl9yYWRpdXMsIHkpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmFyYyh4LCB5LCB0aGlzLl9yYWRpdXMsIDAsIHRhdSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcmVzdWx0OiBub29wXG59O1xuIiwiaW1wb3J0IHtBZGRlcn0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3NxcnR9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcC5qc1wiO1xuXG52YXIgbGVuZ3RoU3VtID0gbmV3IEFkZGVyKCksXG4gICAgbGVuZ3RoUmluZyxcbiAgICB4MDAsXG4gICAgeTAwLFxuICAgIHgwLFxuICAgIHkwO1xuXG52YXIgbGVuZ3RoU3RyZWFtID0ge1xuICBwb2ludDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludEZpcnN0O1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAobGVuZ3RoUmluZykgbGVuZ3RoUG9pbnQoeDAwLCB5MDApO1xuICAgIGxlbmd0aFN0cmVhbS5wb2ludCA9IG5vb3A7XG4gIH0sXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgbGVuZ3RoUmluZyA9IHRydWU7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGxlbmd0aFJpbmcgPSBudWxsO1xuICB9LFxuICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZW5ndGggPSArbGVuZ3RoU3VtO1xuICAgIGxlbmd0aFN1bSA9IG5ldyBBZGRlcigpO1xuICAgIHJldHVybiBsZW5ndGg7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGxlbmd0aFBvaW50Rmlyc3QoeCwgeSkge1xuICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludDtcbiAgeDAwID0geDAgPSB4LCB5MDAgPSB5MCA9IHk7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aFBvaW50KHgsIHkpIHtcbiAgeDAgLT0geCwgeTAgLT0geTtcbiAgbGVuZ3RoU3VtLmFkZChzcXJ0KHgwICogeDAgKyB5MCAqIHkwKSk7XG4gIHgwID0geCwgeTAgPSB5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBsZW5ndGhTdHJlYW07XG4iLCIvLyBTaW1wbGUgY2FjaGluZyBmb3IgY29uc3RhbnQtcmFkaXVzIHBvaW50cy5cbmxldCBjYWNoZURpZ2l0cywgY2FjaGVBcHBlbmQsIGNhY2hlUmFkaXVzLCBjYWNoZUNpcmNsZTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF0aFN0cmluZyB7XG4gIGNvbnN0cnVjdG9yKGRpZ2l0cykge1xuICAgIHRoaXMuX2FwcGVuZCA9IGRpZ2l0cyA9PSBudWxsID8gYXBwZW5kIDogYXBwZW5kUm91bmQoZGlnaXRzKTtcbiAgICB0aGlzLl9yYWRpdXMgPSA0LjU7XG4gICAgdGhpcy5fID0gXCJcIjtcbiAgfVxuICBwb2ludFJhZGl1cyhfKSB7XG4gICAgdGhpcy5fcmFkaXVzID0gK187XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgcG9seWdvblN0YXJ0KCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9XG4gIHBvbHlnb25FbmQoKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfVxuICBsaW5lU3RhcnQoKSB7XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9XG4gIGxpbmVFbmQoKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgPT09IDApIHRoaXMuXyArPSBcIlpcIjtcbiAgICB0aGlzLl9wb2ludCA9IE5hTjtcbiAgfVxuICBwb2ludCh4LCB5KSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB7XG4gICAgICAgIHRoaXMuX2FwcGVuZGBNJHt4fSwke3l9YDtcbiAgICAgICAgdGhpcy5fcG9pbnQgPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9hcHBlbmRgTCR7eH0sJHt5fWA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICB0aGlzLl9hcHBlbmRgTSR7eH0sJHt5fWA7XG4gICAgICAgIGlmICh0aGlzLl9yYWRpdXMgIT09IGNhY2hlUmFkaXVzIHx8IHRoaXMuX2FwcGVuZCAhPT0gY2FjaGVBcHBlbmQpIHtcbiAgICAgICAgICBjb25zdCByID0gdGhpcy5fcmFkaXVzO1xuICAgICAgICAgIGNvbnN0IHMgPSB0aGlzLl87XG4gICAgICAgICAgdGhpcy5fID0gXCJcIjsgLy8gc3Rhc2ggdGhlIG9sZCBzdHJpbmcgc28gd2UgY2FuIGNhY2hlIHRoZSBjaXJjbGUgcGF0aCBmcmFnbWVudFxuICAgICAgICAgIHRoaXMuX2FwcGVuZGBtMCwke3J9YSR7cn0sJHtyfSAwIDEsMSAwLCR7LTIgKiByfWEke3J9LCR7cn0gMCAxLDEgMCwkezIgKiByfXpgO1xuICAgICAgICAgIGNhY2hlUmFkaXVzID0gcjtcbiAgICAgICAgICBjYWNoZUFwcGVuZCA9IHRoaXMuX2FwcGVuZDtcbiAgICAgICAgICBjYWNoZUNpcmNsZSA9IHRoaXMuXztcbiAgICAgICAgICB0aGlzLl8gPSBzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuXyArPSBjYWNoZUNpcmNsZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJlc3VsdCgpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLl87XG4gICAgdGhpcy5fID0gXCJcIjtcbiAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA/IHJlc3VsdCA6IG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwZW5kKHN0cmluZ3MpIHtcbiAgbGV0IGkgPSAxO1xuICB0aGlzLl8gKz0gc3RyaW5nc1swXTtcbiAgZm9yIChjb25zdCBqID0gc3RyaW5ncy5sZW5ndGg7IGkgPCBqOyArK2kpIHtcbiAgICB0aGlzLl8gKz0gYXJndW1lbnRzW2ldICsgc3RyaW5nc1tpXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBlbmRSb3VuZChkaWdpdHMpIHtcbiAgY29uc3QgZCA9IE1hdGguZmxvb3IoZGlnaXRzKTtcbiAgaWYgKCEoZCA+PSAwKSkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYGludmFsaWQgZGlnaXRzOiAke2RpZ2l0c31gKTtcbiAgaWYgKGQgPiAxNSkgcmV0dXJuIGFwcGVuZDtcbiAgaWYgKGQgIT09IGNhY2hlRGlnaXRzKSB7XG4gICAgY29uc3QgayA9IDEwICoqIGQ7XG4gICAgY2FjaGVEaWdpdHMgPSBkO1xuICAgIGNhY2hlQXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kKHN0cmluZ3MpIHtcbiAgICAgIGxldCBpID0gMTtcbiAgICAgIHRoaXMuXyArPSBzdHJpbmdzWzBdO1xuICAgICAgZm9yIChjb25zdCBqID0gc3RyaW5ncy5sZW5ndGg7IGkgPCBqOyArK2kpIHtcbiAgICAgICAgdGhpcy5fICs9IE1hdGgucm91bmQoYXJndW1lbnRzW2ldICogaykgLyBrICsgc3RyaW5nc1tpXTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiBjYWNoZUFwcGVuZDtcbn1cbiIsImltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi4vaWRlbnRpdHkuanNcIjtcbmltcG9ydCBzdHJlYW0gZnJvbSBcIi4uL3N0cmVhbS5qc1wiO1xuaW1wb3J0IHBhdGhBcmVhIGZyb20gXCIuL2FyZWEuanNcIjtcbmltcG9ydCBwYXRoQm91bmRzIGZyb20gXCIuL2JvdW5kcy5qc1wiO1xuaW1wb3J0IHBhdGhDZW50cm9pZCBmcm9tIFwiLi9jZW50cm9pZC5qc1wiO1xuaW1wb3J0IFBhdGhDb250ZXh0IGZyb20gXCIuL2NvbnRleHQuanNcIjtcbmltcG9ydCBwYXRoTWVhc3VyZSBmcm9tIFwiLi9tZWFzdXJlLmpzXCI7XG5pbXBvcnQgUGF0aFN0cmluZyBmcm9tIFwiLi9zdHJpbmcuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocHJvamVjdGlvbiwgY29udGV4dCkge1xuICBsZXQgZGlnaXRzID0gMyxcbiAgICAgIHBvaW50UmFkaXVzID0gNC41LFxuICAgICAgcHJvamVjdGlvblN0cmVhbSxcbiAgICAgIGNvbnRleHRTdHJlYW07XG5cbiAgZnVuY3Rpb24gcGF0aChvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0KSB7XG4gICAgICBpZiAodHlwZW9mIHBvaW50UmFkaXVzID09PSBcImZ1bmN0aW9uXCIpIGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMoK3BvaW50UmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgc3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShjb250ZXh0U3RyZWFtKSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0U3RyZWFtLnJlc3VsdCgpO1xuICB9XG5cbiAgcGF0aC5hcmVhID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgc3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShwYXRoQXJlYSkpO1xuICAgIHJldHVybiBwYXRoQXJlYS5yZXN1bHQoKTtcbiAgfTtcblxuICBwYXRoLm1lYXN1cmUgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBzdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKHBhdGhNZWFzdXJlKSk7XG4gICAgcmV0dXJuIHBhdGhNZWFzdXJlLnJlc3VsdCgpO1xuICB9O1xuXG4gIHBhdGguYm91bmRzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgc3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShwYXRoQm91bmRzKSk7XG4gICAgcmV0dXJuIHBhdGhCb3VuZHMucmVzdWx0KCk7XG4gIH07XG5cbiAgcGF0aC5jZW50cm9pZCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHN0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0ocGF0aENlbnRyb2lkKSk7XG4gICAgcmV0dXJuIHBhdGhDZW50cm9pZC5yZXN1bHQoKTtcbiAgfTtcblxuICBwYXRoLnByb2plY3Rpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcHJvamVjdGlvbjtcbiAgICBwcm9qZWN0aW9uU3RyZWFtID0gXyA9PSBudWxsID8gKHByb2plY3Rpb24gPSBudWxsLCBpZGVudGl0eSkgOiAocHJvamVjdGlvbiA9IF8pLnN0cmVhbTtcbiAgICByZXR1cm4gcGF0aDtcbiAgfTtcblxuICBwYXRoLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY29udGV4dDtcbiAgICBjb250ZXh0U3RyZWFtID0gXyA9PSBudWxsID8gKGNvbnRleHQgPSBudWxsLCBuZXcgUGF0aFN0cmluZyhkaWdpdHMpKSA6IG5ldyBQYXRoQ29udGV4dChjb250ZXh0ID0gXyk7XG4gICAgaWYgKHR5cGVvZiBwb2ludFJhZGl1cyAhPT0gXCJmdW5jdGlvblwiKSBjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKHBvaW50UmFkaXVzKTtcbiAgICByZXR1cm4gcGF0aDtcbiAgfTtcblxuICBwYXRoLnBvaW50UmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHBvaW50UmFkaXVzO1xuICAgIHBvaW50UmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiAoY29udGV4dFN0cmVhbS5wb2ludFJhZGl1cygrXyksICtfKTtcbiAgICByZXR1cm4gcGF0aDtcbiAgfTtcblxuICBwYXRoLmRpZ2l0cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkaWdpdHM7XG4gICAgaWYgKF8gPT0gbnVsbCkgZGlnaXRzID0gbnVsbDtcbiAgICBlbHNlIHtcbiAgICAgIGNvbnN0IGQgPSBNYXRoLmZsb29yKF8pO1xuICAgICAgaWYgKCEoZCA+PSAwKSkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYGludmFsaWQgZGlnaXRzOiAke199YCk7XG4gICAgICBkaWdpdHMgPSBkO1xuICAgIH1cbiAgICBpZiAoY29udGV4dCA9PT0gbnVsbCkgY29udGV4dFN0cmVhbSA9IG5ldyBQYXRoU3RyaW5nKGRpZ2l0cyk7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH07XG5cbiAgcmV0dXJuIHBhdGgucHJvamVjdGlvbihwcm9qZWN0aW9uKS5kaWdpdHMoZGlnaXRzKS5jb250ZXh0KGNvbnRleHQpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWV0aG9kcykge1xuICByZXR1cm4ge1xuICAgIHN0cmVhbTogdHJhbnNmb3JtZXIobWV0aG9kcylcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybWVyKG1ldGhvZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHZhciBzID0gbmV3IFRyYW5zZm9ybVN0cmVhbTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykgc1trZXldID0gbWV0aG9kc1trZXldO1xuICAgIHMuc3RyZWFtID0gc3RyZWFtO1xuICAgIHJldHVybiBzO1xuICB9O1xufVxuXG5mdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW0oKSB7fVxuXG5UcmFuc2Zvcm1TdHJlYW0ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNmb3JtU3RyZWFtLFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLnN0cmVhbS5wb2ludCh4LCB5KTsgfSxcbiAgc3BoZXJlOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0uc3BoZXJlKCk7IH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLmxpbmVTdGFydCgpOyB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ubGluZUVuZCgpOyB9LFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5wb2x5Z29uU3RhcnQoKTsgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLnBvbHlnb25FbmQoKTsgfVxufTtcbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBnZW9TdHJlYW19IGZyb20gXCIuLi9zdHJlYW0uanNcIjtcbmltcG9ydCBib3VuZHNTdHJlYW0gZnJvbSBcIi4uL3BhdGgvYm91bmRzLmpzXCI7XG5cbmZ1bmN0aW9uIGZpdChwcm9qZWN0aW9uLCBmaXRCb3VuZHMsIG9iamVjdCkge1xuICB2YXIgY2xpcCA9IHByb2plY3Rpb24uY2xpcEV4dGVudCAmJiBwcm9qZWN0aW9uLmNsaXBFeHRlbnQoKTtcbiAgcHJvamVjdGlvbi5zY2FsZSgxNTApLnRyYW5zbGF0ZShbMCwgMF0pO1xuICBpZiAoY2xpcCAhPSBudWxsKSBwcm9qZWN0aW9uLmNsaXBFeHRlbnQobnVsbCk7XG4gIGdlb1N0cmVhbShvYmplY3QsIHByb2plY3Rpb24uc3RyZWFtKGJvdW5kc1N0cmVhbSkpO1xuICBmaXRCb3VuZHMoYm91bmRzU3RyZWFtLnJlc3VsdCgpKTtcbiAgaWYgKGNsaXAgIT0gbnVsbCkgcHJvamVjdGlvbi5jbGlwRXh0ZW50KGNsaXApO1xuICByZXR1cm4gcHJvamVjdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpdEV4dGVudChwcm9qZWN0aW9uLCBleHRlbnQsIG9iamVjdCkge1xuICByZXR1cm4gZml0KHByb2plY3Rpb24sIGZ1bmN0aW9uKGIpIHtcbiAgICB2YXIgdyA9IGV4dGVudFsxXVswXSAtIGV4dGVudFswXVswXSxcbiAgICAgICAgaCA9IGV4dGVudFsxXVsxXSAtIGV4dGVudFswXVsxXSxcbiAgICAgICAgayA9IE1hdGgubWluKHcgLyAoYlsxXVswXSAtIGJbMF1bMF0pLCBoIC8gKGJbMV1bMV0gLSBiWzBdWzFdKSksXG4gICAgICAgIHggPSArZXh0ZW50WzBdWzBdICsgKHcgLSBrICogKGJbMV1bMF0gKyBiWzBdWzBdKSkgLyAyLFxuICAgICAgICB5ID0gK2V4dGVudFswXVsxXSArIChoIC0gayAqIChiWzFdWzFdICsgYlswXVsxXSkpIC8gMjtcbiAgICBwcm9qZWN0aW9uLnNjYWxlKDE1MCAqIGspLnRyYW5zbGF0ZShbeCwgeV0pO1xuICB9LCBvYmplY3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZml0U2l6ZShwcm9qZWN0aW9uLCBzaXplLCBvYmplY3QpIHtcbiAgcmV0dXJuIGZpdEV4dGVudChwcm9qZWN0aW9uLCBbWzAsIDBdLCBzaXplXSwgb2JqZWN0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpdFdpZHRoKHByb2plY3Rpb24sIHdpZHRoLCBvYmplY3QpIHtcbiAgcmV0dXJuIGZpdChwcm9qZWN0aW9uLCBmdW5jdGlvbihiKSB7XG4gICAgdmFyIHcgPSArd2lkdGgsXG4gICAgICAgIGsgPSB3IC8gKGJbMV1bMF0gLSBiWzBdWzBdKSxcbiAgICAgICAgeCA9ICh3IC0gayAqIChiWzFdWzBdICsgYlswXVswXSkpIC8gMixcbiAgICAgICAgeSA9IC1rICogYlswXVsxXTtcbiAgICBwcm9qZWN0aW9uLnNjYWxlKDE1MCAqIGspLnRyYW5zbGF0ZShbeCwgeV0pO1xuICB9LCBvYmplY3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZml0SGVpZ2h0KHByb2plY3Rpb24sIGhlaWdodCwgb2JqZWN0KSB7XG4gIHJldHVybiBmaXQocHJvamVjdGlvbiwgZnVuY3Rpb24oYikge1xuICAgIHZhciBoID0gK2hlaWdodCxcbiAgICAgICAgayA9IGggLyAoYlsxXVsxXSAtIGJbMF1bMV0pLFxuICAgICAgICB4ID0gLWsgKiBiWzBdWzBdLFxuICAgICAgICB5ID0gKGggLSBrICogKGJbMV1bMV0gKyBiWzBdWzFdKSkgLyAyO1xuICAgIHByb2plY3Rpb24uc2NhbGUoMTUwICogaykudHJhbnNsYXRlKFt4LCB5XSk7XG4gIH0sIG9iamVjdCk7XG59XG4iLCJpbXBvcnQge2NhcnRlc2lhbn0gZnJvbSBcIi4uL2NhcnRlc2lhbi5qc1wiO1xuaW1wb3J0IHthYnMsIGFzaW4sIGF0YW4yLCBjb3MsIGVwc2lsb24sIHJhZGlhbnMsIHNxcnR9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQge3RyYW5zZm9ybWVyfSBmcm9tIFwiLi4vdHJhbnNmb3JtLmpzXCI7XG5cbnZhciBtYXhEZXB0aCA9IDE2LCAvLyBtYXhpbXVtIGRlcHRoIG9mIHN1YmRpdmlzaW9uXG4gICAgY29zTWluRGlzdGFuY2UgPSBjb3MoMzAgKiByYWRpYW5zKTsgLy8gY29zKG1pbmltdW0gYW5ndWxhciBkaXN0YW5jZSlcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocHJvamVjdCwgZGVsdGEyKSB7XG4gIHJldHVybiArZGVsdGEyID8gcmVzYW1wbGUocHJvamVjdCwgZGVsdGEyKSA6IHJlc2FtcGxlTm9uZShwcm9qZWN0KTtcbn1cblxuZnVuY3Rpb24gcmVzYW1wbGVOb25lKHByb2plY3QpIHtcbiAgcmV0dXJuIHRyYW5zZm9ybWVyKHtcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgeCA9IHByb2plY3QoeCwgeSk7XG4gICAgICB0aGlzLnN0cmVhbS5wb2ludCh4WzBdLCB4WzFdKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXNhbXBsZShwcm9qZWN0LCBkZWx0YTIpIHtcblxuICBmdW5jdGlvbiByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIGxhbWJkYTAsIGEwLCBiMCwgYzAsIHgxLCB5MSwgbGFtYmRhMSwgYTEsIGIxLCBjMSwgZGVwdGgsIHN0cmVhbSkge1xuICAgIHZhciBkeCA9IHgxIC0geDAsXG4gICAgICAgIGR5ID0geTEgLSB5MCxcbiAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICBpZiAoZDIgPiA0ICogZGVsdGEyICYmIGRlcHRoLS0pIHtcbiAgICAgIHZhciBhID0gYTAgKyBhMSxcbiAgICAgICAgICBiID0gYjAgKyBiMSxcbiAgICAgICAgICBjID0gYzAgKyBjMSxcbiAgICAgICAgICBtID0gc3FydChhICogYSArIGIgKiBiICsgYyAqIGMpLFxuICAgICAgICAgIHBoaTIgPSBhc2luKGMgLz0gbSksXG4gICAgICAgICAgbGFtYmRhMiA9IGFicyhhYnMoYykgLSAxKSA8IGVwc2lsb24gfHwgYWJzKGxhbWJkYTAgLSBsYW1iZGExKSA8IGVwc2lsb24gPyAobGFtYmRhMCArIGxhbWJkYTEpIC8gMiA6IGF0YW4yKGIsIGEpLFxuICAgICAgICAgIHAgPSBwcm9qZWN0KGxhbWJkYTIsIHBoaTIpLFxuICAgICAgICAgIHgyID0gcFswXSxcbiAgICAgICAgICB5MiA9IHBbMV0sXG4gICAgICAgICAgZHgyID0geDIgLSB4MCxcbiAgICAgICAgICBkeTIgPSB5MiAtIHkwLFxuICAgICAgICAgIGR6ID0gZHkgKiBkeDIgLSBkeCAqIGR5MjtcbiAgICAgIGlmIChkeiAqIGR6IC8gZDIgPiBkZWx0YTIgLy8gcGVycGVuZGljdWxhciBwcm9qZWN0ZWQgZGlzdGFuY2VcbiAgICAgICAgICB8fCBhYnMoKGR4ICogZHgyICsgZHkgKiBkeTIpIC8gZDIgLSAwLjUpID4gMC4zIC8vIG1pZHBvaW50IGNsb3NlIHRvIGFuIGVuZFxuICAgICAgICAgIHx8IGEwICogYTEgKyBiMCAqIGIxICsgYzAgKiBjMSA8IGNvc01pbkRpc3RhbmNlKSB7IC8vIGFuZ3VsYXIgZGlzdGFuY2VcbiAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MiwgeTIsIGxhbWJkYTIsIGEgLz0gbSwgYiAvPSBtLCBjLCBkZXB0aCwgc3RyZWFtKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHgyLCB5Mik7XG4gICAgICAgIHJlc2FtcGxlTGluZVRvKHgyLCB5MiwgbGFtYmRhMiwgYSwgYiwgYywgeDEsIHkxLCBsYW1iZGExLCBhMSwgYjEsIGMxLCBkZXB0aCwgc3RyZWFtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHZhciBsYW1iZGEwMCwgeDAwLCB5MDAsIGEwMCwgYjAwLCBjMDAsIC8vIGZpcnN0IHBvaW50XG4gICAgICAgIGxhbWJkYTAsIHgwLCB5MCwgYTAsIGIwLCBjMDsgLy8gcHJldmlvdXMgcG9pbnRcblxuICAgIHZhciByZXNhbXBsZVN0cmVhbSA9IHtcbiAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7IHN0cmVhbS5wb2x5Z29uU3RhcnQoKTsgcmVzYW1wbGVTdHJlYW0ubGluZVN0YXJ0ID0gcmluZ1N0YXJ0OyB9LFxuICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7IHN0cmVhbS5wb2x5Z29uRW5kKCk7IHJlc2FtcGxlU3RyZWFtLmxpbmVTdGFydCA9IGxpbmVTdGFydDsgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICB4ID0gcHJvamVjdCh4LCB5KTtcbiAgICAgIHN0cmVhbS5wb2ludCh4WzBdLCB4WzFdKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICB4MCA9IE5hTjtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xuICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVQb2ludChsYW1iZGEsIHBoaSkge1xuICAgICAgdmFyIGMgPSBjYXJ0ZXNpYW4oW2xhbWJkYSwgcGhpXSksIHAgPSBwcm9qZWN0KGxhbWJkYSwgcGhpKTtcbiAgICAgIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDAgPSBwWzBdLCB5MCA9IHBbMV0sIGxhbWJkYTAgPSBsYW1iZGEsIGEwID0gY1swXSwgYjAgPSBjWzFdLCBjMCA9IGNbMl0sIG1heERlcHRoLCBzdHJlYW0pO1xuICAgICAgc3RyZWFtLnBvaW50KHgwLCB5MCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLnBvaW50ID0gcG9pbnQ7XG4gICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcbiAgICAgIGxpbmVTdGFydCgpO1xuICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSByaW5nUG9pbnQ7XG4gICAgICByZXNhbXBsZVN0cmVhbS5saW5lRW5kID0gcmluZ0VuZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByaW5nUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICAgIGxpbmVQb2ludChsYW1iZGEwMCA9IGxhbWJkYSwgcGhpKSwgeDAwID0geDAsIHkwMCA9IHkwLCBhMDAgPSBhMCwgYjAwID0gYjAsIGMwMCA9IGMwO1xuICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcbiAgICAgIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDAwLCB5MDAsIGxhbWJkYTAwLCBhMDAsIGIwMCwgYzAwLCBtYXhEZXB0aCwgc3RyZWFtKTtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgbGluZUVuZCgpO1xuICAgIH1cblxuICAgIHJldHVybiByZXNhbXBsZVN0cmVhbTtcbiAgfTtcbn1cbiIsImltcG9ydCBjbGlwQW50aW1lcmlkaWFuIGZyb20gXCIuLi9jbGlwL2FudGltZXJpZGlhbi5qc1wiO1xuaW1wb3J0IGNsaXBDaXJjbGUgZnJvbSBcIi4uL2NsaXAvY2lyY2xlLmpzXCI7XG5pbXBvcnQgY2xpcFJlY3RhbmdsZSBmcm9tIFwiLi4vY2xpcC9yZWN0YW5nbGUuanNcIjtcbmltcG9ydCBjb21wb3NlIGZyb20gXCIuLi9jb21wb3NlLmpzXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4uL2lkZW50aXR5LmpzXCI7XG5pbXBvcnQge2NvcywgZGVncmVlcywgcmFkaWFucywgc2luLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IHtyb3RhdGVSYWRpYW5zfSBmcm9tIFwiLi4vcm90YXRpb24uanNcIjtcbmltcG9ydCB7dHJhbnNmb3JtZXJ9IGZyb20gXCIuLi90cmFuc2Zvcm0uanNcIjtcbmltcG9ydCB7Zml0RXh0ZW50LCBmaXRTaXplLCBmaXRXaWR0aCwgZml0SGVpZ2h0fSBmcm9tIFwiLi9maXQuanNcIjtcbmltcG9ydCByZXNhbXBsZSBmcm9tIFwiLi9yZXNhbXBsZS5qc1wiO1xuXG52YXIgdHJhbnNmb3JtUmFkaWFucyA9IHRyYW5zZm9ybWVyKHtcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLnN0cmVhbS5wb2ludCh4ICogcmFkaWFucywgeSAqIHJhZGlhbnMpO1xuICB9XG59KTtcblxuZnVuY3Rpb24gdHJhbnNmb3JtUm90YXRlKHJvdGF0ZSkge1xuICByZXR1cm4gdHJhbnNmb3JtZXIoe1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB2YXIgciA9IHJvdGF0ZSh4LCB5KTtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS5wb2ludChyWzBdLCByWzFdKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzY2FsZVRyYW5zbGF0ZShrLCBkeCwgZHksIHN4LCBzeSkge1xuICBmdW5jdGlvbiB0cmFuc2Zvcm0oeCwgeSkge1xuICAgIHggKj0gc3g7IHkgKj0gc3k7XG4gICAgcmV0dXJuIFtkeCArIGsgKiB4LCBkeSAtIGsgKiB5XTtcbiAgfVxuICB0cmFuc2Zvcm0uaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiBbKHggLSBkeCkgLyBrICogc3gsIChkeSAtIHkpIC8gayAqIHN5XTtcbiAgfTtcbiAgcmV0dXJuIHRyYW5zZm9ybTtcbn1cblxuZnVuY3Rpb24gc2NhbGVUcmFuc2xhdGVSb3RhdGUoaywgZHgsIGR5LCBzeCwgc3ksIGFscGhhKSB7XG4gIGlmICghYWxwaGEpIHJldHVybiBzY2FsZVRyYW5zbGF0ZShrLCBkeCwgZHksIHN4LCBzeSk7XG4gIHZhciBjb3NBbHBoYSA9IGNvcyhhbHBoYSksXG4gICAgICBzaW5BbHBoYSA9IHNpbihhbHBoYSksXG4gICAgICBhID0gY29zQWxwaGEgKiBrLFxuICAgICAgYiA9IHNpbkFscGhhICogayxcbiAgICAgIGFpID0gY29zQWxwaGEgLyBrLFxuICAgICAgYmkgPSBzaW5BbHBoYSAvIGssXG4gICAgICBjaSA9IChzaW5BbHBoYSAqIGR5IC0gY29zQWxwaGEgKiBkeCkgLyBrLFxuICAgICAgZmkgPSAoc2luQWxwaGEgKiBkeCArIGNvc0FscGhhICogZHkpIC8gaztcbiAgZnVuY3Rpb24gdHJhbnNmb3JtKHgsIHkpIHtcbiAgICB4ICo9IHN4OyB5ICo9IHN5O1xuICAgIHJldHVybiBbYSAqIHggLSBiICogeSArIGR4LCBkeSAtIGIgKiB4IC0gYSAqIHldO1xuICB9XG4gIHRyYW5zZm9ybS5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIFtzeCAqIChhaSAqIHggLSBiaSAqIHkgKyBjaSksIHN5ICogKGZpIC0gYmkgKiB4IC0gYWkgKiB5KV07XG4gIH07XG4gIHJldHVybiB0cmFuc2Zvcm07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb2plY3Rpb24ocHJvamVjdCkge1xuICByZXR1cm4gcHJvamVjdGlvbk11dGF0b3IoZnVuY3Rpb24oKSB7IHJldHVybiBwcm9qZWN0OyB9KSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvamVjdGlvbk11dGF0b3IocHJvamVjdEF0KSB7XG4gIHZhciBwcm9qZWN0LFxuICAgICAgayA9IDE1MCwgLy8gc2NhbGVcbiAgICAgIHggPSA0ODAsIHkgPSAyNTAsIC8vIHRyYW5zbGF0ZVxuICAgICAgbGFtYmRhID0gMCwgcGhpID0gMCwgLy8gY2VudGVyXG4gICAgICBkZWx0YUxhbWJkYSA9IDAsIGRlbHRhUGhpID0gMCwgZGVsdGFHYW1tYSA9IDAsIHJvdGF0ZSwgLy8gcHJlLXJvdGF0ZVxuICAgICAgYWxwaGEgPSAwLCAvLyBwb3N0LXJvdGF0ZSBhbmdsZVxuICAgICAgc3ggPSAxLCAvLyByZWZsZWN0WFxuICAgICAgc3kgPSAxLCAvLyByZWZsZWN0WFxuICAgICAgdGhldGEgPSBudWxsLCBwcmVjbGlwID0gY2xpcEFudGltZXJpZGlhbiwgLy8gcHJlLWNsaXAgYW5nbGVcbiAgICAgIHgwID0gbnVsbCwgeTAsIHgxLCB5MSwgcG9zdGNsaXAgPSBpZGVudGl0eSwgLy8gcG9zdC1jbGlwIGV4dGVudFxuICAgICAgZGVsdGEyID0gMC41LCAvLyBwcmVjaXNpb25cbiAgICAgIHByb2plY3RSZXNhbXBsZSxcbiAgICAgIHByb2plY3RUcmFuc2Zvcm0sXG4gICAgICBwcm9qZWN0Um90YXRlVHJhbnNmb3JtLFxuICAgICAgY2FjaGUsXG4gICAgICBjYWNoZVN0cmVhbTtcblxuICBmdW5jdGlvbiBwcm9qZWN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIHByb2plY3RSb3RhdGVUcmFuc2Zvcm0ocG9pbnRbMF0gKiByYWRpYW5zLCBwb2ludFsxXSAqIHJhZGlhbnMpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52ZXJ0KHBvaW50KSB7XG4gICAgcG9pbnQgPSBwcm9qZWN0Um90YXRlVHJhbnNmb3JtLmludmVydChwb2ludFswXSwgcG9pbnRbMV0pO1xuICAgIHJldHVybiBwb2ludCAmJiBbcG9pbnRbMF0gKiBkZWdyZWVzLCBwb2ludFsxXSAqIGRlZ3JlZXNdO1xuICB9XG5cbiAgcHJvamVjdGlvbi5zdHJlYW0gPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICByZXR1cm4gY2FjaGUgJiYgY2FjaGVTdHJlYW0gPT09IHN0cmVhbSA/IGNhY2hlIDogY2FjaGUgPSB0cmFuc2Zvcm1SYWRpYW5zKHRyYW5zZm9ybVJvdGF0ZShyb3RhdGUpKHByZWNsaXAocHJvamVjdFJlc2FtcGxlKHBvc3RjbGlwKGNhY2hlU3RyZWFtID0gc3RyZWFtKSkpKSk7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5wcmVjbGlwID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByZWNsaXAgPSBfLCB0aGV0YSA9IHVuZGVmaW5lZCwgcmVzZXQoKSkgOiBwcmVjbGlwO1xuICB9O1xuXG4gIHByb2plY3Rpb24ucG9zdGNsaXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocG9zdGNsaXAgPSBfLCB4MCA9IHkwID0geDEgPSB5MSA9IG51bGwsIHJlc2V0KCkpIDogcG9zdGNsaXA7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5jbGlwQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJlY2xpcCA9ICtfID8gY2xpcENpcmNsZSh0aGV0YSA9IF8gKiByYWRpYW5zKSA6ICh0aGV0YSA9IG51bGwsIGNsaXBBbnRpbWVyaWRpYW4pLCByZXNldCgpKSA6IHRoZXRhICogZGVncmVlcztcbiAgfTtcblxuICBwcm9qZWN0aW9uLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocG9zdGNsaXAgPSBfID09IG51bGwgPyAoeDAgPSB5MCA9IHgxID0geTEgPSBudWxsLCBpZGVudGl0eSkgOiBjbGlwUmVjdGFuZ2xlKHgwID0gK19bMF1bMF0sIHkwID0gK19bMF1bMV0sIHgxID0gK19bMV1bMF0sIHkxID0gK19bMV1bMV0pLCByZXNldCgpKSA6IHgwID09IG51bGwgPyBudWxsIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gIH07XG5cbiAgcHJvamVjdGlvbi5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChrID0gK18sIHJlY2VudGVyKCkpIDogaztcbiAgfTtcblxuICBwcm9qZWN0aW9uLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gK19bMF0sIHkgPSArX1sxXSwgcmVjZW50ZXIoKSkgOiBbeCwgeV07XG4gIH07XG5cbiAgcHJvamVjdGlvbi5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobGFtYmRhID0gX1swXSAlIDM2MCAqIHJhZGlhbnMsIHBoaSA9IF9bMV0gJSAzNjAgKiByYWRpYW5zLCByZWNlbnRlcigpKSA6IFtsYW1iZGEgKiBkZWdyZWVzLCBwaGkgKiBkZWdyZWVzXTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLnJvdGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWx0YUxhbWJkYSA9IF9bMF0gJSAzNjAgKiByYWRpYW5zLCBkZWx0YVBoaSA9IF9bMV0gJSAzNjAgKiByYWRpYW5zLCBkZWx0YUdhbW1hID0gXy5sZW5ndGggPiAyID8gX1syXSAlIDM2MCAqIHJhZGlhbnMgOiAwLCByZWNlbnRlcigpKSA6IFtkZWx0YUxhbWJkYSAqIGRlZ3JlZXMsIGRlbHRhUGhpICogZGVncmVlcywgZGVsdGFHYW1tYSAqIGRlZ3JlZXNdO1xuICB9O1xuXG4gIHByb2plY3Rpb24uYW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGEgPSBfICUgMzYwICogcmFkaWFucywgcmVjZW50ZXIoKSkgOiBhbHBoYSAqIGRlZ3JlZXM7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5yZWZsZWN0WCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzeCA9IF8gPyAtMSA6IDEsIHJlY2VudGVyKCkpIDogc3ggPCAwO1xuICB9O1xuXG4gIHByb2plY3Rpb24ucmVmbGVjdFkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3kgPSBfID8gLTEgOiAxLCByZWNlbnRlcigpKSA6IHN5IDwgMDtcbiAgfTtcblxuICBwcm9qZWN0aW9uLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcm9qZWN0UmVzYW1wbGUgPSByZXNhbXBsZShwcm9qZWN0VHJhbnNmb3JtLCBkZWx0YTIgPSBfICogXyksIHJlc2V0KCkpIDogc3FydChkZWx0YTIpO1xuICB9O1xuXG4gIHByb2plY3Rpb24uZml0RXh0ZW50ID0gZnVuY3Rpb24oZXh0ZW50LCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0RXh0ZW50KHByb2plY3Rpb24sIGV4dGVudCwgb2JqZWN0KTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmZpdFNpemUgPSBmdW5jdGlvbihzaXplLCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0U2l6ZShwcm9qZWN0aW9uLCBzaXplLCBvYmplY3QpO1xuICB9O1xuXG4gIHByb2plY3Rpb24uZml0V2lkdGggPSBmdW5jdGlvbih3aWR0aCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdFdpZHRoKHByb2plY3Rpb24sIHdpZHRoLCBvYmplY3QpO1xuICB9O1xuXG4gIHByb2plY3Rpb24uZml0SGVpZ2h0ID0gZnVuY3Rpb24oaGVpZ2h0LCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0SGVpZ2h0KHByb2plY3Rpb24sIGhlaWdodCwgb2JqZWN0KTtcbiAgfTtcblxuICBmdW5jdGlvbiByZWNlbnRlcigpIHtcbiAgICB2YXIgY2VudGVyID0gc2NhbGVUcmFuc2xhdGVSb3RhdGUoaywgMCwgMCwgc3gsIHN5LCBhbHBoYSkuYXBwbHkobnVsbCwgcHJvamVjdChsYW1iZGEsIHBoaSkpLFxuICAgICAgICB0cmFuc2Zvcm0gPSBzY2FsZVRyYW5zbGF0ZVJvdGF0ZShrLCB4IC0gY2VudGVyWzBdLCB5IC0gY2VudGVyWzFdLCBzeCwgc3ksIGFscGhhKTtcbiAgICByb3RhdGUgPSByb3RhdGVSYWRpYW5zKGRlbHRhTGFtYmRhLCBkZWx0YVBoaSwgZGVsdGFHYW1tYSk7XG4gICAgcHJvamVjdFRyYW5zZm9ybSA9IGNvbXBvc2UocHJvamVjdCwgdHJhbnNmb3JtKTtcbiAgICBwcm9qZWN0Um90YXRlVHJhbnNmb3JtID0gY29tcG9zZShyb3RhdGUsIHByb2plY3RUcmFuc2Zvcm0pO1xuICAgIHByb2plY3RSZXNhbXBsZSA9IHJlc2FtcGxlKHByb2plY3RUcmFuc2Zvcm0sIGRlbHRhMik7XG4gICAgcmV0dXJuIHJlc2V0KCk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBjYWNoZSA9IGNhY2hlU3RyZWFtID0gbnVsbDtcbiAgICByZXR1cm4gcHJvamVjdGlvbjtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBwcm9qZWN0ID0gcHJvamVjdEF0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcHJvamVjdGlvbi5pbnZlcnQgPSBwcm9qZWN0LmludmVydCAmJiBpbnZlcnQ7XG4gICAgcmV0dXJuIHJlY2VudGVyKCk7XG4gIH07XG59XG4iLCJpbXBvcnQge2RlZ3JlZXMsIHBpLCByYWRpYW5zfSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IHtwcm9qZWN0aW9uTXV0YXRvcn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmljUHJvamVjdGlvbihwcm9qZWN0QXQpIHtcbiAgdmFyIHBoaTAgPSAwLFxuICAgICAgcGhpMSA9IHBpIC8gMyxcbiAgICAgIG0gPSBwcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpLFxuICAgICAgcCA9IG0ocGhpMCwgcGhpMSk7XG5cbiAgcC5wYXJhbGxlbHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBtKHBoaTAgPSBfWzBdICogcmFkaWFucywgcGhpMSA9IF9bMV0gKiByYWRpYW5zKSA6IFtwaGkwICogZGVncmVlcywgcGhpMSAqIGRlZ3JlZXNdO1xuICB9O1xuXG4gIHJldHVybiBwO1xufVxuIiwiaW1wb3J0IHthYnMsIGFzaW4sIGF0YW4yLCBjb3MsIGVwc2lsb24sIHBpLCBzaWduLCBzaW4sIHNxcnR9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQge2NvbmljUHJvamVjdGlvbn0gZnJvbSBcIi4vY29uaWMuanNcIjtcbmltcG9ydCB7Y3lsaW5kcmljYWxFcXVhbEFyZWFSYXd9IGZyb20gXCIuL2N5bGluZHJpY2FsRXF1YWxBcmVhLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25pY0VxdWFsQXJlYVJhdyh5MCwgeTEpIHtcbiAgdmFyIHN5MCA9IHNpbih5MCksIG4gPSAoc3kwICsgc2luKHkxKSkgLyAyO1xuXG4gIC8vIEFyZSB0aGUgcGFyYWxsZWxzIHN5bW1ldHJpY2FsIGFyb3VuZCB0aGUgRXF1YXRvcj9cbiAgaWYgKGFicyhuKSA8IGVwc2lsb24pIHJldHVybiBjeWxpbmRyaWNhbEVxdWFsQXJlYVJhdyh5MCk7XG5cbiAgdmFyIGMgPSAxICsgc3kwICogKDIgKiBuIC0gc3kwKSwgcjAgPSBzcXJ0KGMpIC8gbjtcblxuICBmdW5jdGlvbiBwcm9qZWN0KHgsIHkpIHtcbiAgICB2YXIgciA9IHNxcnQoYyAtIDIgKiBuICogc2luKHkpKSAvIG47XG4gICAgcmV0dXJuIFtyICogc2luKHggKj0gbiksIHIwIC0gciAqIGNvcyh4KV07XG4gIH1cblxuICBwcm9qZWN0LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgcjB5ID0gcjAgLSB5LFxuICAgICAgICBsID0gYXRhbjIoeCwgYWJzKHIweSkpICogc2lnbihyMHkpO1xuICAgIGlmIChyMHkgKiBuIDwgMClcbiAgICAgIGwgLT0gcGkgKiBzaWduKHgpICogc2lnbihyMHkpO1xuICAgIHJldHVybiBbbCAvIG4sIGFzaW4oKGMgLSAoeCAqIHggKyByMHkgKiByMHkpICogbiAqIG4pIC8gKDIgKiBuKSldO1xuICB9O1xuXG4gIHJldHVybiBwcm9qZWN0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGNvbmljUHJvamVjdGlvbihjb25pY0VxdWFsQXJlYVJhdylcbiAgICAgIC5zY2FsZSgxNTUuNDI0KVxuICAgICAgLmNlbnRlcihbMCwgMzMuNjQ0Ml0pO1xufVxuIiwiaW1wb3J0IHthc2luLCBjb3MsIHNpbn0gZnJvbSBcIi4uL21hdGguanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGN5bGluZHJpY2FsRXF1YWxBcmVhUmF3KHBoaTApIHtcbiAgdmFyIGNvc1BoaTAgPSBjb3MocGhpMCk7XG5cbiAgZnVuY3Rpb24gZm9yd2FyZChsYW1iZGEsIHBoaSkge1xuICAgIHJldHVybiBbbGFtYmRhICogY29zUGhpMCwgc2luKHBoaSkgLyBjb3NQaGkwXTtcbiAgfVxuXG4gIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiBbeCAvIGNvc1BoaTAsIGFzaW4oeSAqIGNvc1BoaTApXTtcbiAgfTtcblxuICByZXR1cm4gZm9yd2FyZDtcbn1cbiIsImltcG9ydCBjb25pY0VxdWFsQXJlYSBmcm9tIFwiLi9jb25pY0VxdWFsQXJlYS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGNvbmljRXF1YWxBcmVhKClcbiAgICAgIC5wYXJhbGxlbHMoWzI5LjUsIDQ1LjVdKVxuICAgICAgLnNjYWxlKDEwNzApXG4gICAgICAudHJhbnNsYXRlKFs0ODAsIDI1MF0pXG4gICAgICAucm90YXRlKFs5NiwgMF0pXG4gICAgICAuY2VudGVyKFstMC42LCAzOC43XSk7XG59XG4iLCJpbXBvcnQge2Vwc2lsb259IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQgYWxiZXJzIGZyb20gXCIuL2FsYmVycy5qc1wiO1xuaW1wb3J0IGNvbmljRXF1YWxBcmVhIGZyb20gXCIuL2NvbmljRXF1YWxBcmVhLmpzXCI7XG5pbXBvcnQge2ZpdEV4dGVudCwgZml0U2l6ZSwgZml0V2lkdGgsIGZpdEhlaWdodH0gZnJvbSBcIi4vZml0LmpzXCI7XG5cbi8vIFRoZSBwcm9qZWN0aW9ucyBtdXN0IGhhdmUgbXV0dWFsbHkgZXhjbHVzaXZlIGNsaXAgcmVnaW9ucyBvbiB0aGUgc3BoZXJlLFxuLy8gYXMgdGhpcyB3aWxsIGF2b2lkIGVtaXR0aW5nIGludGVybGVhdmluZyBsaW5lcyBhbmQgcG9seWdvbnMuXG5mdW5jdGlvbiBtdWx0aXBsZXgoc3RyZWFtcykge1xuICB2YXIgbiA9IHN0cmVhbXMubGVuZ3RoO1xuICByZXR1cm4ge1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLnBvaW50KHgsIHkpOyB9LFxuICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLnNwaGVyZSgpOyB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLmxpbmVTdGFydCgpOyB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5saW5lRW5kKCk7IH0sXG4gICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHsgdmFyIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHN0cmVhbXNbaV0ucG9seWdvblN0YXJ0KCk7IH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLnBvbHlnb25FbmQoKTsgfVxuICB9O1xufVxuXG4vLyBBIGNvbXBvc2l0ZSBwcm9qZWN0aW9uIGZvciB0aGUgVW5pdGVkIFN0YXRlcywgY29uZmlndXJlZCBieSBkZWZhdWx0IGZvclxuLy8gOTYww5c1MDAuIFRoZSBwcm9qZWN0aW9uIGFsc28gd29ya3MgcXVpdGUgd2VsbCBhdCA5NjDDlzYwMCBpZiB5b3UgY2hhbmdlIHRoZVxuLy8gc2NhbGUgdG8gMTI4NSBhbmQgYWRqdXN0IHRoZSB0cmFuc2xhdGUgYWNjb3JkaW5nbHkuIFRoZSBzZXQgb2Ygc3RhbmRhcmRcbi8vIHBhcmFsbGVscyBmb3IgZWFjaCByZWdpb24gY29tZXMgZnJvbSBVU0dTLCB3aGljaCBpcyBwdWJsaXNoZWQgaGVyZTpcbi8vIGh0dHA6Ly9lZ3NjLnVzZ3MuZ292L2lzYi9wdWJzL01hcFByb2plY3Rpb25zL3Byb2plY3Rpb25zLmh0bWwjYWxiZXJzXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGNhY2hlLFxuICAgICAgY2FjaGVTdHJlYW0sXG4gICAgICBsb3dlcjQ4ID0gYWxiZXJzKCksIGxvd2VyNDhQb2ludCxcbiAgICAgIGFsYXNrYSA9IGNvbmljRXF1YWxBcmVhKCkucm90YXRlKFsxNTQsIDBdKS5jZW50ZXIoWy0yLCA1OC41XSkucGFyYWxsZWxzKFs1NSwgNjVdKSwgYWxhc2thUG9pbnQsIC8vIEVQU0c6MzMzOFxuICAgICAgaGF3YWlpID0gY29uaWNFcXVhbEFyZWEoKS5yb3RhdGUoWzE1NywgMF0pLmNlbnRlcihbLTMsIDE5LjldKS5wYXJhbGxlbHMoWzgsIDE4XSksIGhhd2FpaVBvaW50LCAvLyBFU1JJOjEwMjAwN1xuICAgICAgcG9pbnQsIHBvaW50U3RyZWFtID0ge3BvaW50OiBmdW5jdGlvbih4LCB5KSB7IHBvaW50ID0gW3gsIHldOyB9fTtcblxuICBmdW5jdGlvbiBhbGJlcnNVc2EoY29vcmRpbmF0ZXMpIHtcbiAgICB2YXIgeCA9IGNvb3JkaW5hdGVzWzBdLCB5ID0gY29vcmRpbmF0ZXNbMV07XG4gICAgcmV0dXJuIHBvaW50ID0gbnVsbCxcbiAgICAgICAgKGxvd2VyNDhQb2ludC5wb2ludCh4LCB5KSwgcG9pbnQpXG4gICAgICAgIHx8IChhbGFza2FQb2ludC5wb2ludCh4LCB5KSwgcG9pbnQpXG4gICAgICAgIHx8IChoYXdhaWlQb2ludC5wb2ludCh4LCB5KSwgcG9pbnQpO1xuICB9XG5cbiAgYWxiZXJzVXNhLmludmVydCA9IGZ1bmN0aW9uKGNvb3JkaW5hdGVzKSB7XG4gICAgdmFyIGsgPSBsb3dlcjQ4LnNjYWxlKCksXG4gICAgICAgIHQgPSBsb3dlcjQ4LnRyYW5zbGF0ZSgpLFxuICAgICAgICB4ID0gKGNvb3JkaW5hdGVzWzBdIC0gdFswXSkgLyBrLFxuICAgICAgICB5ID0gKGNvb3JkaW5hdGVzWzFdIC0gdFsxXSkgLyBrO1xuICAgIHJldHVybiAoeSA+PSAwLjEyMCAmJiB5IDwgMC4yMzQgJiYgeCA+PSAtMC40MjUgJiYgeCA8IC0wLjIxNCA/IGFsYXNrYVxuICAgICAgICA6IHkgPj0gMC4xNjYgJiYgeSA8IDAuMjM0ICYmIHggPj0gLTAuMjE0ICYmIHggPCAtMC4xMTUgPyBoYXdhaWlcbiAgICAgICAgOiBsb3dlcjQ4KS5pbnZlcnQoY29vcmRpbmF0ZXMpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS5zdHJlYW0gPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICByZXR1cm4gY2FjaGUgJiYgY2FjaGVTdHJlYW0gPT09IHN0cmVhbSA/IGNhY2hlIDogY2FjaGUgPSBtdWx0aXBsZXgoW2xvd2VyNDguc3RyZWFtKGNhY2hlU3RyZWFtID0gc3RyZWFtKSwgYWxhc2thLnN0cmVhbShzdHJlYW0pLCBoYXdhaWkuc3RyZWFtKHN0cmVhbSldKTtcbiAgfTtcblxuICBhbGJlcnNVc2EucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxvd2VyNDgucHJlY2lzaW9uKCk7XG4gICAgbG93ZXI0OC5wcmVjaXNpb24oXyksIGFsYXNrYS5wcmVjaXNpb24oXyksIGhhd2FpaS5wcmVjaXNpb24oXyk7XG4gICAgcmV0dXJuIHJlc2V0KCk7XG4gIH07XG5cbiAgYWxiZXJzVXNhLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxvd2VyNDguc2NhbGUoKTtcbiAgICBsb3dlcjQ4LnNjYWxlKF8pLCBhbGFza2Euc2NhbGUoXyAqIDAuMzUpLCBoYXdhaWkuc2NhbGUoXyk7XG4gICAgcmV0dXJuIGFsYmVyc1VzYS50cmFuc2xhdGUobG93ZXI0OC50cmFuc2xhdGUoKSk7XG4gIH07XG5cbiAgYWxiZXJzVXNhLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnRyYW5zbGF0ZSgpO1xuICAgIHZhciBrID0gbG93ZXI0OC5zY2FsZSgpLCB4ID0gK19bMF0sIHkgPSArX1sxXTtcblxuICAgIGxvd2VyNDhQb2ludCA9IGxvd2VyNDhcbiAgICAgICAgLnRyYW5zbGF0ZShfKVxuICAgICAgICAuY2xpcEV4dGVudChbW3ggLSAwLjQ1NSAqIGssIHkgLSAwLjIzOCAqIGtdLCBbeCArIDAuNDU1ICogaywgeSArIDAuMjM4ICoga11dKVxuICAgICAgICAuc3RyZWFtKHBvaW50U3RyZWFtKTtcblxuICAgIGFsYXNrYVBvaW50ID0gYWxhc2thXG4gICAgICAgIC50cmFuc2xhdGUoW3ggLSAwLjMwNyAqIGssIHkgKyAwLjIwMSAqIGtdKVxuICAgICAgICAuY2xpcEV4dGVudChbW3ggLSAwLjQyNSAqIGsgKyBlcHNpbG9uLCB5ICsgMC4xMjAgKiBrICsgZXBzaWxvbl0sIFt4IC0gMC4yMTQgKiBrIC0gZXBzaWxvbiwgeSArIDAuMjM0ICogayAtIGVwc2lsb25dXSlcbiAgICAgICAgLnN0cmVhbShwb2ludFN0cmVhbSk7XG5cbiAgICBoYXdhaWlQb2ludCA9IGhhd2FpaVxuICAgICAgICAudHJhbnNsYXRlKFt4IC0gMC4yMDUgKiBrLCB5ICsgMC4yMTIgKiBrXSlcbiAgICAgICAgLmNsaXBFeHRlbnQoW1t4IC0gMC4yMTQgKiBrICsgZXBzaWxvbiwgeSArIDAuMTY2ICogayArIGVwc2lsb25dLCBbeCAtIDAuMTE1ICogayAtIGVwc2lsb24sIHkgKyAwLjIzNCAqIGsgLSBlcHNpbG9uXV0pXG4gICAgICAgIC5zdHJlYW0ocG9pbnRTdHJlYW0pO1xuXG4gICAgcmV0dXJuIHJlc2V0KCk7XG4gIH07XG5cbiAgYWxiZXJzVXNhLmZpdEV4dGVudCA9IGZ1bmN0aW9uKGV4dGVudCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdEV4dGVudChhbGJlcnNVc2EsIGV4dGVudCwgb2JqZWN0KTtcbiAgfTtcblxuICBhbGJlcnNVc2EuZml0U2l6ZSA9IGZ1bmN0aW9uKHNpemUsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRTaXplKGFsYmVyc1VzYSwgc2l6ZSwgb2JqZWN0KTtcbiAgfTtcblxuICBhbGJlcnNVc2EuZml0V2lkdGggPSBmdW5jdGlvbih3aWR0aCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdFdpZHRoKGFsYmVyc1VzYSwgd2lkdGgsIG9iamVjdCk7XG4gIH07XG5cbiAgYWxiZXJzVXNhLmZpdEhlaWdodCA9IGZ1bmN0aW9uKGhlaWdodCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdEhlaWdodChhbGJlcnNVc2EsIGhlaWdodCwgb2JqZWN0KTtcbiAgfTtcblxuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBjYWNoZSA9IGNhY2hlU3RyZWFtID0gbnVsbDtcbiAgICByZXR1cm4gYWxiZXJzVXNhO1xuICB9XG5cbiAgcmV0dXJuIGFsYmVyc1VzYS5zY2FsZSgxMDcwKTtcbn1cbiIsImltcG9ydCB7YXNpbiwgYXRhbjIsIGNvcywgc2luLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gYXppbXV0aGFsUmF3KHNjYWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIGN4ID0gY29zKHgpLFxuICAgICAgICBjeSA9IGNvcyh5KSxcbiAgICAgICAgayA9IHNjYWxlKGN4ICogY3kpO1xuICAgICAgICBpZiAoayA9PT0gSW5maW5pdHkpIHJldHVybiBbMiwgMF07XG4gICAgcmV0dXJuIFtcbiAgICAgIGsgKiBjeSAqIHNpbih4KSxcbiAgICAgIGsgKiBzaW4oeSlcbiAgICBdO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhemltdXRoYWxJbnZlcnQoYW5nbGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgeiA9IHNxcnQoeCAqIHggKyB5ICogeSksXG4gICAgICAgIGMgPSBhbmdsZSh6KSxcbiAgICAgICAgc2MgPSBzaW4oYyksXG4gICAgICAgIGNjID0gY29zKGMpO1xuICAgIHJldHVybiBbXG4gICAgICBhdGFuMih4ICogc2MsIHogKiBjYyksXG4gICAgICBhc2luKHogJiYgeSAqIHNjIC8geilcbiAgICBdO1xuICB9XG59XG4iLCJpbXBvcnQge2FzaW4sIHNxcnR9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQge2F6aW11dGhhbFJhdywgYXppbXV0aGFsSW52ZXJ0fSBmcm9tIFwiLi9hemltdXRoYWwuanNcIjtcbmltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCB2YXIgYXppbXV0aGFsRXF1YWxBcmVhUmF3ID0gYXppbXV0aGFsUmF3KGZ1bmN0aW9uKGN4Y3kpIHtcbiAgcmV0dXJuIHNxcnQoMiAvICgxICsgY3hjeSkpO1xufSk7XG5cbmF6aW11dGhhbEVxdWFsQXJlYVJhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoZnVuY3Rpb24oeikge1xuICByZXR1cm4gMiAqIGFzaW4oeiAvIDIpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihhemltdXRoYWxFcXVhbEFyZWFSYXcpXG4gICAgICAuc2NhbGUoMTI0Ljc1KVxuICAgICAgLmNsaXBBbmdsZSgxODAgLSAxZS0zKTtcbn1cbiIsImltcG9ydCB7YWNvcywgc2lufSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IHthemltdXRoYWxSYXcsIGF6aW11dGhhbEludmVydH0gZnJvbSBcIi4vYXppbXV0aGFsLmpzXCI7XG5pbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgdmFyIGF6aW11dGhhbEVxdWlkaXN0YW50UmF3ID0gYXppbXV0aGFsUmF3KGZ1bmN0aW9uKGMpIHtcbiAgcmV0dXJuIChjID0gYWNvcyhjKSkgJiYgYyAvIHNpbihjKTtcbn0pO1xuXG5hemltdXRoYWxFcXVpZGlzdGFudFJhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoZnVuY3Rpb24oeikge1xuICByZXR1cm4gejtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24oYXppbXV0aGFsRXF1aWRpc3RhbnRSYXcpXG4gICAgICAuc2NhbGUoNzkuNDE4OClcbiAgICAgIC5jbGlwQW5nbGUoMTgwIC0gMWUtMyk7XG59XG4iLCJpbXBvcnQge2F0YW4sIGV4cCwgaGFsZlBpLCBsb2csIHBpLCB0YW4sIHRhdX0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCByb3RhdGlvbiBmcm9tIFwiLi4vcm90YXRpb24uanNcIjtcbmltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJjYXRvclJhdyhsYW1iZGEsIHBoaSkge1xuICByZXR1cm4gW2xhbWJkYSwgbG9nKHRhbigoaGFsZlBpICsgcGhpKSAvIDIpKV07XG59XG5cbm1lcmNhdG9yUmF3LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgcmV0dXJuIFt4LCAyICogYXRhbihleHAoeSkpIC0gaGFsZlBpXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbWVyY2F0b3JQcm9qZWN0aW9uKG1lcmNhdG9yUmF3KVxuICAgICAgLnNjYWxlKDk2MSAvIHRhdSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJjYXRvclByb2plY3Rpb24ocHJvamVjdCkge1xuICB2YXIgbSA9IHByb2plY3Rpb24ocHJvamVjdCksXG4gICAgICBjZW50ZXIgPSBtLmNlbnRlcixcbiAgICAgIHNjYWxlID0gbS5zY2FsZSxcbiAgICAgIHRyYW5zbGF0ZSA9IG0udHJhbnNsYXRlLFxuICAgICAgY2xpcEV4dGVudCA9IG0uY2xpcEV4dGVudCxcbiAgICAgIHgwID0gbnVsbCwgeTAsIHgxLCB5MTsgLy8gY2xpcCBleHRlbnRcblxuICBtLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlKF8pLCByZWNsaXAoKSkgOiBzY2FsZSgpO1xuICB9O1xuXG4gIG0udHJhbnNsYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRyYW5zbGF0ZShfKSwgcmVjbGlwKCkpIDogdHJhbnNsYXRlKCk7XG4gIH07XG5cbiAgbS5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2VudGVyKF8pLCByZWNsaXAoKSkgOiBjZW50ZXIoKTtcbiAgfTtcblxuICBtLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoKF8gPT0gbnVsbCA/IHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCA6ICh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdKSksIHJlY2xpcCgpKSA6IHgwID09IG51bGwgPyBudWxsIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVjbGlwKCkge1xuICAgIHZhciBrID0gcGkgKiBzY2FsZSgpLFxuICAgICAgICB0ID0gbShyb3RhdGlvbihtLnJvdGF0ZSgpKS5pbnZlcnQoWzAsIDBdKSk7XG4gICAgcmV0dXJuIGNsaXBFeHRlbnQoeDAgPT0gbnVsbFxuICAgICAgICA/IFtbdFswXSAtIGssIHRbMV0gLSBrXSwgW3RbMF0gKyBrLCB0WzFdICsga11dIDogcHJvamVjdCA9PT0gbWVyY2F0b3JSYXdcbiAgICAgICAgPyBbW01hdGgubWF4KHRbMF0gLSBrLCB4MCksIHkwXSwgW01hdGgubWluKHRbMF0gKyBrLCB4MSksIHkxXV1cbiAgICAgICAgOiBbW3gwLCBNYXRoLm1heCh0WzFdIC0gaywgeTApXSwgW3gxLCBNYXRoLm1pbih0WzFdICsgaywgeTEpXV0pO1xuICB9XG5cbiAgcmV0dXJuIHJlY2xpcCgpO1xufVxuIiwiaW1wb3J0IHthYnMsIGF0YW4sIGF0YW4yLCBjb3MsIGVwc2lsb24sIGhhbGZQaSwgbG9nLCBwaSwgcG93LCBzaWduLCBzaW4sIHNxcnQsIHRhbn0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCB7Y29uaWNQcm9qZWN0aW9ufSBmcm9tIFwiLi9jb25pYy5qc1wiO1xuaW1wb3J0IHttZXJjYXRvclJhd30gZnJvbSBcIi4vbWVyY2F0b3IuanNcIjtcblxuZnVuY3Rpb24gdGFueSh5KSB7XG4gIHJldHVybiB0YW4oKGhhbGZQaSArIHkpIC8gMik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25pY0NvbmZvcm1hbFJhdyh5MCwgeTEpIHtcbiAgdmFyIGN5MCA9IGNvcyh5MCksXG4gICAgICBuID0geTAgPT09IHkxID8gc2luKHkwKSA6IGxvZyhjeTAgLyBjb3MoeTEpKSAvIGxvZyh0YW55KHkxKSAvIHRhbnkoeTApKSxcbiAgICAgIGYgPSBjeTAgKiBwb3codGFueSh5MCksIG4pIC8gbjtcblxuICBpZiAoIW4pIHJldHVybiBtZXJjYXRvclJhdztcblxuICBmdW5jdGlvbiBwcm9qZWN0KHgsIHkpIHtcbiAgICBpZiAoZiA+IDApIHsgaWYgKHkgPCAtaGFsZlBpICsgZXBzaWxvbikgeSA9IC1oYWxmUGkgKyBlcHNpbG9uOyB9XG4gICAgZWxzZSB7IGlmICh5ID4gaGFsZlBpIC0gZXBzaWxvbikgeSA9IGhhbGZQaSAtIGVwc2lsb247IH1cbiAgICB2YXIgciA9IGYgLyBwb3codGFueSh5KSwgbik7XG4gICAgcmV0dXJuIFtyICogc2luKG4gKiB4KSwgZiAtIHIgKiBjb3MobiAqIHgpXTtcbiAgfVxuXG4gIHByb2plY3QuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciBmeSA9IGYgLSB5LCByID0gc2lnbihuKSAqIHNxcnQoeCAqIHggKyBmeSAqIGZ5KSxcbiAgICAgIGwgPSBhdGFuMih4LCBhYnMoZnkpKSAqIHNpZ24oZnkpO1xuICAgIGlmIChmeSAqIG4gPCAwKVxuICAgICAgbCAtPSBwaSAqIHNpZ24oeCkgKiBzaWduKGZ5KTtcbiAgICByZXR1cm4gW2wgLyBuLCAyICogYXRhbihwb3coZiAvIHIsIDEgLyBuKSkgLSBoYWxmUGldO1xuICB9O1xuXG4gIHJldHVybiBwcm9qZWN0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGNvbmljUHJvamVjdGlvbihjb25pY0NvbmZvcm1hbFJhdylcbiAgICAgIC5zY2FsZSgxMDkuNSlcbiAgICAgIC5wYXJhbGxlbHMoWzMwLCAzMF0pO1xufVxuIiwiaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWlyZWN0YW5ndWxhclJhdyhsYW1iZGEsIHBoaSkge1xuICByZXR1cm4gW2xhbWJkYSwgcGhpXTtcbn1cblxuZXF1aXJlY3Rhbmd1bGFyUmF3LmludmVydCA9IGVxdWlyZWN0YW5ndWxhclJhdztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKGVxdWlyZWN0YW5ndWxhclJhdylcbiAgICAgIC5zY2FsZSgxNTIuNjMpO1xufVxuIiwiaW1wb3J0IHthYnMsIGF0YW4yLCBjb3MsIGVwc2lsb24sIHBpLCBzaWduLCBzaW4sIHNxcnR9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQge2NvbmljUHJvamVjdGlvbn0gZnJvbSBcIi4vY29uaWMuanNcIjtcbmltcG9ydCB7ZXF1aXJlY3Rhbmd1bGFyUmF3fSBmcm9tIFwiLi9lcXVpcmVjdGFuZ3VsYXIuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmljRXF1aWRpc3RhbnRSYXcoeTAsIHkxKSB7XG4gIHZhciBjeTAgPSBjb3MoeTApLFxuICAgICAgbiA9IHkwID09PSB5MSA/IHNpbih5MCkgOiAoY3kwIC0gY29zKHkxKSkgLyAoeTEgLSB5MCksXG4gICAgICBnID0gY3kwIC8gbiArIHkwO1xuXG4gIGlmIChhYnMobikgPCBlcHNpbG9uKSByZXR1cm4gZXF1aXJlY3Rhbmd1bGFyUmF3O1xuXG4gIGZ1bmN0aW9uIHByb2plY3QoeCwgeSkge1xuICAgIHZhciBneSA9IGcgLSB5LCBueCA9IG4gKiB4O1xuICAgIHJldHVybiBbZ3kgKiBzaW4obngpLCBnIC0gZ3kgKiBjb3MobngpXTtcbiAgfVxuXG4gIHByb2plY3QuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciBneSA9IGcgLSB5LFxuICAgICAgICBsID0gYXRhbjIoeCwgYWJzKGd5KSkgKiBzaWduKGd5KTtcbiAgICBpZiAoZ3kgKiBuIDwgMClcbiAgICAgIGwgLT0gcGkgKiBzaWduKHgpICogc2lnbihneSk7XG4gICAgcmV0dXJuIFtsIC8gbiwgZyAtIHNpZ24obikgKiBzcXJ0KHggKiB4ICsgZ3kgKiBneSldO1xuICB9O1xuXG4gIHJldHVybiBwcm9qZWN0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGNvbmljUHJvamVjdGlvbihjb25pY0VxdWlkaXN0YW50UmF3KVxuICAgICAgLnNjYWxlKDEzMS4xNTQpXG4gICAgICAuY2VudGVyKFswLCAxMy45Mzg5XSk7XG59XG4iLCJpbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHthYnMsIGFzaW4sIGNvcywgZXBzaWxvbjIsIHNpbiwgc3FydH0gZnJvbSBcIi4uL21hdGguanNcIjtcblxudmFyIEExID0gMS4zNDAyNjQsXG4gICAgQTIgPSAtMC4wODExMDYsXG4gICAgQTMgPSAwLjAwMDg5MyxcbiAgICBBNCA9IDAuMDAzNzk2LFxuICAgIE0gPSBzcXJ0KDMpIC8gMixcbiAgICBpdGVyYXRpb25zID0gMTI7XG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbEVhcnRoUmF3KGxhbWJkYSwgcGhpKSB7XG4gIHZhciBsID0gYXNpbihNICogc2luKHBoaSkpLCBsMiA9IGwgKiBsLCBsNiA9IGwyICogbDIgKiBsMjtcbiAgcmV0dXJuIFtcbiAgICBsYW1iZGEgKiBjb3MobCkgLyAoTSAqIChBMSArIDMgKiBBMiAqIGwyICsgbDYgKiAoNyAqIEEzICsgOSAqIEE0ICogbDIpKSksXG4gICAgbCAqIChBMSArIEEyICogbDIgKyBsNiAqIChBMyArIEE0ICogbDIpKVxuICBdO1xufVxuXG5lcXVhbEVhcnRoUmF3LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgdmFyIGwgPSB5LCBsMiA9IGwgKiBsLCBsNiA9IGwyICogbDIgKiBsMjtcbiAgZm9yICh2YXIgaSA9IDAsIGRlbHRhLCBmeSwgZnB5OyBpIDwgaXRlcmF0aW9uczsgKytpKSB7XG4gICAgZnkgPSBsICogKEExICsgQTIgKiBsMiArIGw2ICogKEEzICsgQTQgKiBsMikpIC0geTtcbiAgICBmcHkgPSBBMSArIDMgKiBBMiAqIGwyICsgbDYgKiAoNyAqIEEzICsgOSAqIEE0ICogbDIpO1xuICAgIGwgLT0gZGVsdGEgPSBmeSAvIGZweSwgbDIgPSBsICogbCwgbDYgPSBsMiAqIGwyICogbDI7XG4gICAgaWYgKGFicyhkZWx0YSkgPCBlcHNpbG9uMikgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIFtcbiAgICBNICogeCAqIChBMSArIDMgKiBBMiAqIGwyICsgbDYgKiAoNyAqIEEzICsgOSAqIEE0ICogbDIpKSAvIGNvcyhsKSxcbiAgICBhc2luKHNpbihsKSAvIE0pXG4gIF07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24oZXF1YWxFYXJ0aFJhdylcbiAgICAgIC5zY2FsZSgxNzcuMTU4KTtcbn1cbiIsImltcG9ydCB7YXRhbiwgY29zLCBzaW59IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQge2F6aW11dGhhbEludmVydH0gZnJvbSBcIi4vYXppbXV0aGFsLmpzXCI7XG5pbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZ25vbW9uaWNSYXcoeCwgeSkge1xuICB2YXIgY3kgPSBjb3MoeSksIGsgPSBjb3MoeCkgKiBjeTtcbiAgcmV0dXJuIFtjeSAqIHNpbih4KSAvIGssIHNpbih5KSAvIGtdO1xufVxuXG5nbm9tb25pY1Jhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoYXRhbik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihnbm9tb25pY1JhdylcbiAgICAgIC5zY2FsZSgxNDQuMDQ5KVxuICAgICAgLmNsaXBBbmdsZSg2MCk7XG59XG4iLCJpbXBvcnQgY2xpcFJlY3RhbmdsZSBmcm9tIFwiLi4vY2xpcC9yZWN0YW5nbGUuanNcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi4vaWRlbnRpdHkuanNcIjtcbmltcG9ydCB7dHJhbnNmb3JtZXJ9IGZyb20gXCIuLi90cmFuc2Zvcm0uanNcIjtcbmltcG9ydCB7Zml0RXh0ZW50LCBmaXRTaXplLCBmaXRXaWR0aCwgZml0SGVpZ2h0fSBmcm9tIFwiLi9maXQuanNcIjtcbmltcG9ydCB7Y29zLCBkZWdyZWVzLCByYWRpYW5zLCBzaW59IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgayA9IDEsIHR4ID0gMCwgdHkgPSAwLCBzeCA9IDEsIHN5ID0gMSwgLy8gc2NhbGUsIHRyYW5zbGF0ZSBhbmQgcmVmbGVjdFxuICAgICAgYWxwaGEgPSAwLCBjYSwgc2EsIC8vIGFuZ2xlXG4gICAgICB4MCA9IG51bGwsIHkwLCB4MSwgeTEsIC8vIGNsaXAgZXh0ZW50XG4gICAgICBreCA9IDEsIGt5ID0gMSxcbiAgICAgIHRyYW5zZm9ybSA9IHRyYW5zZm9ybWVyKHtcbiAgICAgICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgICB2YXIgcCA9IHByb2plY3Rpb24oW3gsIHldKVxuICAgICAgICAgIHRoaXMuc3RyZWFtLnBvaW50KHBbMF0sIHBbMV0pO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIHBvc3RjbGlwID0gaWRlbnRpdHksXG4gICAgICBjYWNoZSxcbiAgICAgIGNhY2hlU3RyZWFtO1xuXG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGt4ID0gayAqIHN4O1xuICAgIGt5ID0gayAqIHN5O1xuICAgIGNhY2hlID0gY2FjaGVTdHJlYW0gPSBudWxsO1xuICAgIHJldHVybiBwcm9qZWN0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvamVjdGlvbiAocCkge1xuICAgIHZhciB4ID0gcFswXSAqIGt4LCB5ID0gcFsxXSAqIGt5O1xuICAgIGlmIChhbHBoYSkge1xuICAgICAgdmFyIHQgPSB5ICogY2EgLSB4ICogc2E7XG4gICAgICB4ID0geCAqIGNhICsgeSAqIHNhO1xuICAgICAgeSA9IHQ7XG4gICAgfSAgICBcbiAgICByZXR1cm4gW3ggKyB0eCwgeSArIHR5XTtcbiAgfVxuICBwcm9qZWN0aW9uLmludmVydCA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgeCA9IHBbMF0gLSB0eCwgeSA9IHBbMV0gLSB0eTtcbiAgICBpZiAoYWxwaGEpIHtcbiAgICAgIHZhciB0ID0geSAqIGNhICsgeCAqIHNhO1xuICAgICAgeCA9IHggKiBjYSAtIHkgKiBzYTtcbiAgICAgIHkgPSB0O1xuICAgIH1cbiAgICByZXR1cm4gW3ggLyBreCwgeSAvIGt5XTtcbiAgfTtcbiAgcHJvamVjdGlvbi5zdHJlYW0gPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICByZXR1cm4gY2FjaGUgJiYgY2FjaGVTdHJlYW0gPT09IHN0cmVhbSA/IGNhY2hlIDogY2FjaGUgPSB0cmFuc2Zvcm0ocG9zdGNsaXAoY2FjaGVTdHJlYW0gPSBzdHJlYW0pKTtcbiAgfTtcbiAgcHJvamVjdGlvbi5wb3N0Y2xpcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwb3N0Y2xpcCA9IF8sIHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCwgcmVzZXQoKSkgOiBwb3N0Y2xpcDtcbiAgfTtcbiAgcHJvamVjdGlvbi5jbGlwRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBvc3RjbGlwID0gXyA9PSBudWxsID8gKHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCwgaWRlbnRpdHkpIDogY2xpcFJlY3RhbmdsZSh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdKSwgcmVzZXQoKSkgOiB4MCA9PSBudWxsID8gbnVsbCA6IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICB9O1xuICBwcm9qZWN0aW9uLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGsgPSArXywgcmVzZXQoKSkgOiBrO1xuICB9O1xuICBwcm9qZWN0aW9uLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0eCA9ICtfWzBdLCB0eSA9ICtfWzFdLCByZXNldCgpKSA6IFt0eCwgdHldO1xuICB9XG4gIHByb2plY3Rpb24uYW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGEgPSBfICUgMzYwICogcmFkaWFucywgc2EgPSBzaW4oYWxwaGEpLCBjYSA9IGNvcyhhbHBoYSksIHJlc2V0KCkpIDogYWxwaGEgKiBkZWdyZWVzO1xuICB9O1xuICBwcm9qZWN0aW9uLnJlZmxlY3RYID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN4ID0gXyA/IC0xIDogMSwgcmVzZXQoKSkgOiBzeCA8IDA7XG4gIH07XG4gIHByb2plY3Rpb24ucmVmbGVjdFkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3kgPSBfID8gLTEgOiAxLCByZXNldCgpKSA6IHN5IDwgMDtcbiAgfTtcbiAgcHJvamVjdGlvbi5maXRFeHRlbnQgPSBmdW5jdGlvbihleHRlbnQsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRFeHRlbnQocHJvamVjdGlvbiwgZXh0ZW50LCBvYmplY3QpO1xuICB9O1xuICBwcm9qZWN0aW9uLmZpdFNpemUgPSBmdW5jdGlvbihzaXplLCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0U2l6ZShwcm9qZWN0aW9uLCBzaXplLCBvYmplY3QpO1xuICB9O1xuICBwcm9qZWN0aW9uLmZpdFdpZHRoID0gZnVuY3Rpb24od2lkdGgsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRXaWR0aChwcm9qZWN0aW9uLCB3aWR0aCwgb2JqZWN0KTtcbiAgfTtcbiAgcHJvamVjdGlvbi5maXRIZWlnaHQgPSBmdW5jdGlvbihoZWlnaHQsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRIZWlnaHQocHJvamVjdGlvbiwgaGVpZ2h0LCBvYmplY3QpO1xuICB9O1xuXG4gIHJldHVybiBwcm9qZWN0aW9uO1xufVxuIiwiaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCB7YWJzLCBlcHNpbG9ufSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gbmF0dXJhbEVhcnRoMVJhdyhsYW1iZGEsIHBoaSkge1xuICB2YXIgcGhpMiA9IHBoaSAqIHBoaSwgcGhpNCA9IHBoaTIgKiBwaGkyO1xuICByZXR1cm4gW1xuICAgIGxhbWJkYSAqICgwLjg3MDcgLSAwLjEzMTk3OSAqIHBoaTIgKyBwaGk0ICogKC0wLjAxMzc5MSArIHBoaTQgKiAoMC4wMDM5NzEgKiBwaGkyIC0gMC4wMDE1MjkgKiBwaGk0KSkpLFxuICAgIHBoaSAqICgxLjAwNzIyNiArIHBoaTIgKiAoMC4wMTUwODUgKyBwaGk0ICogKC0wLjA0NDQ3NSArIDAuMDI4ODc0ICogcGhpMiAtIDAuMDA1OTE2ICogcGhpNCkpKVxuICBdO1xufVxuXG5uYXR1cmFsRWFydGgxUmF3LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgdmFyIHBoaSA9IHksIGkgPSAyNSwgZGVsdGE7XG4gIGRvIHtcbiAgICB2YXIgcGhpMiA9IHBoaSAqIHBoaSwgcGhpNCA9IHBoaTIgKiBwaGkyO1xuICAgIHBoaSAtPSBkZWx0YSA9IChwaGkgKiAoMS4wMDcyMjYgKyBwaGkyICogKDAuMDE1MDg1ICsgcGhpNCAqICgtMC4wNDQ0NzUgKyAwLjAyODg3NCAqIHBoaTIgLSAwLjAwNTkxNiAqIHBoaTQpKSkgLSB5KSAvXG4gICAgICAgICgxLjAwNzIyNiArIHBoaTIgKiAoMC4wMTUwODUgKiAzICsgcGhpNCAqICgtMC4wNDQ0NzUgKiA3ICsgMC4wMjg4NzQgKiA5ICogcGhpMiAtIDAuMDA1OTE2ICogMTEgKiBwaGk0KSkpO1xuICB9IHdoaWxlIChhYnMoZGVsdGEpID4gZXBzaWxvbiAmJiAtLWkgPiAwKTtcbiAgcmV0dXJuIFtcbiAgICB4IC8gKDAuODcwNyArIChwaGkyID0gcGhpICogcGhpKSAqICgtMC4xMzE5NzkgKyBwaGkyICogKC0wLjAxMzc5MSArIHBoaTIgKiBwaGkyICogcGhpMiAqICgwLjAwMzk3MSAtIDAuMDAxNTI5ICogcGhpMikpKSksXG4gICAgcGhpXG4gIF07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24obmF0dXJhbEVhcnRoMVJhdylcbiAgICAgIC5zY2FsZSgxNzUuMjk1KTtcbn1cbiIsImltcG9ydCB7YXNpbiwgY29zLCBlcHNpbG9uLCBzaW59IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQge2F6aW11dGhhbEludmVydH0gZnJvbSBcIi4vYXppbXV0aGFsLmpzXCI7XG5pbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gb3J0aG9ncmFwaGljUmF3KHgsIHkpIHtcbiAgcmV0dXJuIFtjb3MoeSkgKiBzaW4oeCksIHNpbih5KV07XG59XG5cbm9ydGhvZ3JhcGhpY1Jhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoYXNpbik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihvcnRob2dyYXBoaWNSYXcpXG4gICAgICAuc2NhbGUoMjQ5LjUpXG4gICAgICAuY2xpcEFuZ2xlKDkwICsgZXBzaWxvbik7XG59XG4iLCJpbXBvcnQge2F0YW4sIGNvcywgc2lufSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IHthemltdXRoYWxJbnZlcnR9IGZyb20gXCIuL2F6aW11dGhhbC5qc1wiO1xuaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHN0ZXJlb2dyYXBoaWNSYXcoeCwgeSkge1xuICB2YXIgY3kgPSBjb3MoeSksIGsgPSAxICsgY29zKHgpICogY3k7XG4gIHJldHVybiBbY3kgKiBzaW4oeCkgLyBrLCBzaW4oeSkgLyBrXTtcbn1cblxuc3RlcmVvZ3JhcGhpY1Jhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoZnVuY3Rpb24oeikge1xuICByZXR1cm4gMiAqIGF0YW4oeik7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKHN0ZXJlb2dyYXBoaWNSYXcpXG4gICAgICAuc2NhbGUoMjUwKVxuICAgICAgLmNsaXBBbmdsZSgxNDIpO1xufVxuIiwiaW1wb3J0IHthdGFuLCBleHAsIGhhbGZQaSwgbG9nLCB0YW59IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQge21lcmNhdG9yUHJvamVjdGlvbn0gZnJvbSBcIi4vbWVyY2F0b3IuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zdmVyc2VNZXJjYXRvclJhdyhsYW1iZGEsIHBoaSkge1xuICByZXR1cm4gW2xvZyh0YW4oKGhhbGZQaSArIHBoaSkgLyAyKSksIC1sYW1iZGFdO1xufVxuXG50cmFuc3ZlcnNlTWVyY2F0b3JSYXcuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICByZXR1cm4gWy15LCAyICogYXRhbihleHAoeCkpIC0gaGFsZlBpXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbSA9IG1lcmNhdG9yUHJvamVjdGlvbih0cmFuc3ZlcnNlTWVyY2F0b3JSYXcpLFxuICAgICAgY2VudGVyID0gbS5jZW50ZXIsXG4gICAgICByb3RhdGUgPSBtLnJvdGF0ZTtcblxuICBtLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGNlbnRlcihbLV9bMV0sIF9bMF1dKSA6IChfID0gY2VudGVyKCksIFtfWzFdLCAtX1swXV0pO1xuICB9O1xuXG4gIG0ucm90YXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gcm90YXRlKFtfWzBdLCBfWzFdLCBfLmxlbmd0aCA+IDIgPyBfWzJdICsgOTAgOiA5MF0pIDogKF8gPSByb3RhdGUoKSwgW19bMF0sIF9bMV0sIF9bMl0gLSA5MF0pO1xuICB9O1xuXG4gIHJldHVybiByb3RhdGUoWzAsIDAsIDkwXSlcbiAgICAgIC5zY2FsZSgxNTkuMTU1KTtcbn1cbiIsImZ1bmN0aW9uIGRlZmF1bHRTZXBhcmF0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEucGFyZW50ID09PSBiLnBhcmVudCA/IDEgOiAyO1xufVxuXG5mdW5jdGlvbiBtZWFuWChjaGlsZHJlbikge1xuICByZXR1cm4gY2hpbGRyZW4ucmVkdWNlKG1lYW5YUmVkdWNlLCAwKSAvIGNoaWxkcmVuLmxlbmd0aDtcbn1cblxuZnVuY3Rpb24gbWVhblhSZWR1Y2UoeCwgYykge1xuICByZXR1cm4geCArIGMueDtcbn1cblxuZnVuY3Rpb24gbWF4WShjaGlsZHJlbikge1xuICByZXR1cm4gMSArIGNoaWxkcmVuLnJlZHVjZShtYXhZUmVkdWNlLCAwKTtcbn1cblxuZnVuY3Rpb24gbWF4WVJlZHVjZSh5LCBjKSB7XG4gIHJldHVybiBNYXRoLm1heCh5LCBjLnkpO1xufVxuXG5mdW5jdGlvbiBsZWFmTGVmdChub2RlKSB7XG4gIHZhciBjaGlsZHJlbjtcbiAgd2hpbGUgKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikgbm9kZSA9IGNoaWxkcmVuWzBdO1xuICByZXR1cm4gbm9kZTtcbn1cblxuZnVuY3Rpb24gbGVhZlJpZ2h0KG5vZGUpIHtcbiAgdmFyIGNoaWxkcmVuO1xuICB3aGlsZSAoY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuKSBub2RlID0gY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gIHJldHVybiBub2RlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNlcGFyYXRpb24gPSBkZWZhdWx0U2VwYXJhdGlvbixcbiAgICAgIGR4ID0gMSxcbiAgICAgIGR5ID0gMSxcbiAgICAgIG5vZGVTaXplID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gY2x1c3Rlcihyb290KSB7XG4gICAgdmFyIHByZXZpb3VzTm9kZSxcbiAgICAgICAgeCA9IDA7XG5cbiAgICAvLyBGaXJzdCB3YWxrLCBjb21wdXRpbmcgdGhlIGluaXRpYWwgeCAmIHkgdmFsdWVzLlxuICAgIHJvb3QuZWFjaEFmdGVyKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgbm9kZS54ID0gbWVhblgoY2hpbGRyZW4pO1xuICAgICAgICBub2RlLnkgPSBtYXhZKGNoaWxkcmVuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUueCA9IHByZXZpb3VzTm9kZSA/IHggKz0gc2VwYXJhdGlvbihub2RlLCBwcmV2aW91c05vZGUpIDogMDtcbiAgICAgICAgbm9kZS55ID0gMDtcbiAgICAgICAgcHJldmlvdXNOb2RlID0gbm9kZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciBsZWZ0ID0gbGVhZkxlZnQocm9vdCksXG4gICAgICAgIHJpZ2h0ID0gbGVhZlJpZ2h0KHJvb3QpLFxuICAgICAgICB4MCA9IGxlZnQueCAtIHNlcGFyYXRpb24obGVmdCwgcmlnaHQpIC8gMixcbiAgICAgICAgeDEgPSByaWdodC54ICsgc2VwYXJhdGlvbihyaWdodCwgbGVmdCkgLyAyO1xuXG4gICAgLy8gU2Vjb25kIHdhbGssIG5vcm1hbGl6aW5nIHggJiB5IHRvIHRoZSBkZXNpcmVkIHNpemUuXG4gICAgcmV0dXJuIHJvb3QuZWFjaEFmdGVyKG5vZGVTaXplID8gZnVuY3Rpb24obm9kZSkge1xuICAgICAgbm9kZS54ID0gKG5vZGUueCAtIHJvb3QueCkgKiBkeDtcbiAgICAgIG5vZGUueSA9IChyb290LnkgLSBub2RlLnkpICogZHk7XG4gICAgfSA6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIG5vZGUueCA9IChub2RlLnggLSB4MCkgLyAoeDEgLSB4MCkgKiBkeDtcbiAgICAgIG5vZGUueSA9ICgxIC0gKHJvb3QueSA/IG5vZGUueSAvIHJvb3QueSA6IDEpKSAqIGR5O1xuICAgIH0pO1xuICB9XG5cbiAgY2x1c3Rlci5zZXBhcmF0aW9uID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNlcGFyYXRpb24gPSB4LCBjbHVzdGVyKSA6IHNlcGFyYXRpb247XG4gIH07XG5cbiAgY2x1c3Rlci5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVTaXplID0gZmFsc2UsIGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIGNsdXN0ZXIpIDogKG5vZGVTaXplID8gbnVsbCA6IFtkeCwgZHldKTtcbiAgfTtcblxuICBjbHVzdGVyLm5vZGVTaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVTaXplID0gdHJ1ZSwgZHggPSAreFswXSwgZHkgPSAreFsxXSwgY2x1c3RlcikgOiAobm9kZVNpemUgPyBbZHgsIGR5XSA6IG51bGwpO1xuICB9O1xuXG4gIHJldHVybiBjbHVzdGVyO1xufVxuIiwiZnVuY3Rpb24gY291bnQobm9kZSkge1xuICB2YXIgc3VtID0gMCxcbiAgICAgIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbixcbiAgICAgIGkgPSBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGg7XG4gIGlmICghaSkgc3VtID0gMTtcbiAgZWxzZSB3aGlsZSAoLS1pID49IDApIHN1bSArPSBjaGlsZHJlbltpXS52YWx1ZTtcbiAgbm9kZS52YWx1ZSA9IHN1bTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2hBZnRlcihjb3VudCk7XG59XG4iLCJpbXBvcnQgbm9kZV9jb3VudCBmcm9tIFwiLi9jb3VudC5qc1wiO1xuaW1wb3J0IG5vZGVfZWFjaCBmcm9tIFwiLi9lYWNoLmpzXCI7XG5pbXBvcnQgbm9kZV9lYWNoQmVmb3JlIGZyb20gXCIuL2VhY2hCZWZvcmUuanNcIjtcbmltcG9ydCBub2RlX2VhY2hBZnRlciBmcm9tIFwiLi9lYWNoQWZ0ZXIuanNcIjtcbmltcG9ydCBub2RlX2ZpbmQgZnJvbSBcIi4vZmluZC5qc1wiO1xuaW1wb3J0IG5vZGVfc3VtIGZyb20gXCIuL3N1bS5qc1wiO1xuaW1wb3J0IG5vZGVfc29ydCBmcm9tIFwiLi9zb3J0LmpzXCI7XG5pbXBvcnQgbm9kZV9wYXRoIGZyb20gXCIuL3BhdGguanNcIjtcbmltcG9ydCBub2RlX2FuY2VzdG9ycyBmcm9tIFwiLi9hbmNlc3RvcnMuanNcIjtcbmltcG9ydCBub2RlX2Rlc2NlbmRhbnRzIGZyb20gXCIuL2Rlc2NlbmRhbnRzLmpzXCI7XG5pbXBvcnQgbm9kZV9sZWF2ZXMgZnJvbSBcIi4vbGVhdmVzLmpzXCI7XG5pbXBvcnQgbm9kZV9saW5rcyBmcm9tIFwiLi9saW5rcy5qc1wiO1xuaW1wb3J0IG5vZGVfaXRlcmF0b3IgZnJvbSBcIi4vaXRlcmF0b3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGllcmFyY2h5KGRhdGEsIGNoaWxkcmVuKSB7XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgZGF0YSA9IFt1bmRlZmluZWQsIGRhdGFdO1xuICAgIGlmIChjaGlsZHJlbiA9PT0gdW5kZWZpbmVkKSBjaGlsZHJlbiA9IG1hcENoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuID09PSB1bmRlZmluZWQpIHtcbiAgICBjaGlsZHJlbiA9IG9iamVjdENoaWxkcmVuO1xuICB9XG5cbiAgdmFyIHJvb3QgPSBuZXcgTm9kZShkYXRhKSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlcyA9IFtyb290XSxcbiAgICAgIGNoaWxkLFxuICAgICAgY2hpbGRzLFxuICAgICAgaSxcbiAgICAgIG47XG5cbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGlmICgoY2hpbGRzID0gY2hpbGRyZW4obm9kZS5kYXRhKSkgJiYgKG4gPSAoY2hpbGRzID0gQXJyYXkuZnJvbShjaGlsZHMpKS5sZW5ndGgpKSB7XG4gICAgICBub2RlLmNoaWxkcmVuID0gY2hpbGRzO1xuICAgICAgZm9yIChpID0gbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIG5vZGVzLnB1c2goY2hpbGQgPSBjaGlsZHNbaV0gPSBuZXcgTm9kZShjaGlsZHNbaV0pKTtcbiAgICAgICAgY2hpbGQucGFyZW50ID0gbm9kZTtcbiAgICAgICAgY2hpbGQuZGVwdGggPSBub2RlLmRlcHRoICsgMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcm9vdC5lYWNoQmVmb3JlKGNvbXB1dGVIZWlnaHQpO1xufVxuXG5mdW5jdGlvbiBub2RlX2NvcHkoKSB7XG4gIHJldHVybiBoaWVyYXJjaHkodGhpcykuZWFjaEJlZm9yZShjb3B5RGF0YSk7XG59XG5cbmZ1bmN0aW9uIG9iamVjdENoaWxkcmVuKGQpIHtcbiAgcmV0dXJuIGQuY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIG1hcENoaWxkcmVuKGQpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZCkgPyBkWzFdIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gY29weURhdGEobm9kZSkge1xuICBpZiAobm9kZS5kYXRhLnZhbHVlICE9PSB1bmRlZmluZWQpIG5vZGUudmFsdWUgPSBub2RlLmRhdGEudmFsdWU7XG4gIG5vZGUuZGF0YSA9IG5vZGUuZGF0YS5kYXRhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUhlaWdodChub2RlKSB7XG4gIHZhciBoZWlnaHQgPSAwO1xuICBkbyBub2RlLmhlaWdodCA9IGhlaWdodDtcbiAgd2hpbGUgKChub2RlID0gbm9kZS5wYXJlbnQpICYmIChub2RlLmhlaWdodCA8ICsraGVpZ2h0KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBOb2RlKGRhdGEpIHtcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5kZXB0aCA9XG4gIHRoaXMuaGVpZ2h0ID0gMDtcbiAgdGhpcy5wYXJlbnQgPSBudWxsO1xufVxuXG5Ob2RlLnByb3RvdHlwZSA9IGhpZXJhcmNoeS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBOb2RlLFxuICBjb3VudDogbm9kZV9jb3VudCxcbiAgZWFjaDogbm9kZV9lYWNoLFxuICBlYWNoQWZ0ZXI6IG5vZGVfZWFjaEFmdGVyLFxuICBlYWNoQmVmb3JlOiBub2RlX2VhY2hCZWZvcmUsXG4gIGZpbmQ6IG5vZGVfZmluZCxcbiAgc3VtOiBub2RlX3N1bSxcbiAgc29ydDogbm9kZV9zb3J0LFxuICBwYXRoOiBub2RlX3BhdGgsXG4gIGFuY2VzdG9yczogbm9kZV9hbmNlc3RvcnMsXG4gIGRlc2NlbmRhbnRzOiBub2RlX2Rlc2NlbmRhbnRzLFxuICBsZWF2ZXM6IG5vZGVfbGVhdmVzLFxuICBsaW5rczogbm9kZV9saW5rcyxcbiAgY29weTogbm9kZV9jb3B5LFxuICBbU3ltYm9sLml0ZXJhdG9yXTogbm9kZV9pdGVyYXRvclxufTtcbiIsImV4cG9ydCBmdW5jdGlvbiBvcHRpb25hbChmKSB7XG4gIHJldHVybiBmID09IG51bGwgPyBudWxsIDogcmVxdWlyZWQoZik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXF1aXJlZChmKSB7XG4gIGlmICh0eXBlb2YgZiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGNvbnN0YW50WmVybygpIHtcbiAgcmV0dXJuIDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2ssIHRoYXQpIHtcbiAgbGV0IGluZGV4ID0gLTE7XG4gIGZvciAoY29uc3Qgbm9kZSBvZiB0aGlzKSB7XG4gICAgY2FsbGJhY2suY2FsbCh0aGF0LCBub2RlLCArK2luZGV4LCB0aGlzKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGF0KSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV0sIG5leHQgPSBbXSwgY2hpbGRyZW4sIGksIG4sIGluZGV4ID0gLTE7XG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBuZXh0LnB1c2gobm9kZSk7XG4gICAgaWYgKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikge1xuICAgICAgZm9yIChpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2Rlcy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgd2hpbGUgKG5vZGUgPSBuZXh0LnBvcCgpKSB7XG4gICAgY2FsbGJhY2suY2FsbCh0aGF0LCBub2RlLCArK2luZGV4LCB0aGlzKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGF0KSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV0sIGNoaWxkcmVuLCBpLCBpbmRleCA9IC0xO1xuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgY2FsbGJhY2suY2FsbCh0aGF0LCBub2RlLCArK2luZGV4LCB0aGlzKTtcbiAgICBpZiAoY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuKSB7XG4gICAgICBmb3IgKGkgPSBjaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBub2Rlcy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaywgdGhhdCkge1xuICBsZXQgaW5kZXggPSAtMTtcbiAgZm9yIChjb25zdCBub2RlIG9mIHRoaXMpIHtcbiAgICBpZiAoY2FsbGJhY2suY2FsbCh0aGF0LCBub2RlLCArK2luZGV4LCB0aGlzKSkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5lYWNoQWZ0ZXIoZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBzdW0gPSArdmFsdWUobm9kZS5kYXRhKSB8fCAwLFxuICAgICAgICBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sXG4gICAgICAgIGkgPSBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGg7XG4gICAgd2hpbGUgKC0taSA+PSAwKSBzdW0gKz0gY2hpbGRyZW5baV0udmFsdWU7XG4gICAgbm9kZS52YWx1ZSA9IHN1bTtcbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIHJldHVybiB0aGlzLmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBub2RlLmNoaWxkcmVuLnNvcnQoY29tcGFyZSk7XG4gICAgfVxuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVuZCkge1xuICB2YXIgc3RhcnQgPSB0aGlzLFxuICAgICAgYW5jZXN0b3IgPSBsZWFzdENvbW1vbkFuY2VzdG9yKHN0YXJ0LCBlbmQpLFxuICAgICAgbm9kZXMgPSBbc3RhcnRdO1xuICB3aGlsZSAoc3RhcnQgIT09IGFuY2VzdG9yKSB7XG4gICAgc3RhcnQgPSBzdGFydC5wYXJlbnQ7XG4gICAgbm9kZXMucHVzaChzdGFydCk7XG4gIH1cbiAgdmFyIGsgPSBub2Rlcy5sZW5ndGg7XG4gIHdoaWxlIChlbmQgIT09IGFuY2VzdG9yKSB7XG4gICAgbm9kZXMuc3BsaWNlKGssIDAsIGVuZCk7XG4gICAgZW5kID0gZW5kLnBhcmVudDtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG5cbmZ1bmN0aW9uIGxlYXN0Q29tbW9uQW5jZXN0b3IoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIGE7XG4gIHZhciBhTm9kZXMgPSBhLmFuY2VzdG9ycygpLFxuICAgICAgYk5vZGVzID0gYi5hbmNlc3RvcnMoKSxcbiAgICAgIGMgPSBudWxsO1xuICBhID0gYU5vZGVzLnBvcCgpO1xuICBiID0gYk5vZGVzLnBvcCgpO1xuICB3aGlsZSAoYSA9PT0gYikge1xuICAgIGMgPSBhO1xuICAgIGEgPSBhTm9kZXMucG9wKCk7XG4gICAgYiA9IGJOb2Rlcy5wb3AoKTtcbiAgfVxuICByZXR1cm4gYztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdO1xuICB3aGlsZSAobm9kZSA9IG5vZGUucGFyZW50KSB7XG4gICAgbm9kZXMucHVzaChub2RlKTtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20odGhpcyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGxlYXZlcyA9IFtdO1xuICB0aGlzLmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5jaGlsZHJlbikge1xuICAgICAgbGVhdmVzLnB1c2gobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxlYXZlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgcm9vdCA9IHRoaXMsIGxpbmtzID0gW107XG4gIHJvb3QuZWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUgIT09IHJvb3QpIHsgLy8gRG9u4oCZdCBpbmNsdWRlIHRoZSByb2904oCZcyBwYXJlbnQsIGlmIGFueS5cbiAgICAgIGxpbmtzLnB1c2goe3NvdXJjZTogbm9kZS5wYXJlbnQsIHRhcmdldDogbm9kZX0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsaW5rcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKigpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBjdXJyZW50LCBuZXh0ID0gW25vZGVdLCBjaGlsZHJlbiwgaSwgbjtcbiAgZG8ge1xuICAgIGN1cnJlbnQgPSBuZXh0LnJldmVyc2UoKSwgbmV4dCA9IFtdO1xuICAgIHdoaWxlIChub2RlID0gY3VycmVudC5wb3AoKSkge1xuICAgICAgeWllbGQgbm9kZTtcbiAgICAgIGlmIChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgZm9yIChpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIG5leHQucHVzaChjaGlsZHJlbltpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gd2hpbGUgKG5leHQubGVuZ3RoKTtcbn1cbiIsIi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpbmVhcl9jb25ncnVlbnRpYWxfZ2VuZXJhdG9yI1BhcmFtZXRlcnNfaW5fY29tbW9uX3VzZVxuY29uc3QgYSA9IDE2NjQ1MjU7XG5jb25zdCBjID0gMTAxMzkwNDIyMztcbmNvbnN0IG0gPSA0Mjk0OTY3Mjk2OyAvLyAyXjMyXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICBsZXQgcyA9IDE7XG4gIHJldHVybiAoKSA9PiAocyA9IChhICogcyArIGMpICUgbSkgLyBtO1xufVxuIiwiaW1wb3J0IHtzaHVmZmxlfSBmcm9tIFwiLi4vYXJyYXkuanNcIjtcbmltcG9ydCBsY2cgZnJvbSBcIi4uL2xjZy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjaXJjbGVzKSB7XG4gIHJldHVybiBwYWNrRW5jbG9zZVJhbmRvbShjaXJjbGVzLCBsY2coKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWNrRW5jbG9zZVJhbmRvbShjaXJjbGVzLCByYW5kb20pIHtcbiAgdmFyIGkgPSAwLCBuID0gKGNpcmNsZXMgPSBzaHVmZmxlKEFycmF5LmZyb20oY2lyY2xlcyksIHJhbmRvbSkpLmxlbmd0aCwgQiA9IFtdLCBwLCBlO1xuXG4gIHdoaWxlIChpIDwgbikge1xuICAgIHAgPSBjaXJjbGVzW2ldO1xuICAgIGlmIChlICYmIGVuY2xvc2VzV2VhayhlLCBwKSkgKytpO1xuICAgIGVsc2UgZSA9IGVuY2xvc2VCYXNpcyhCID0gZXh0ZW5kQmFzaXMoQiwgcCkpLCBpID0gMDtcbiAgfVxuXG4gIHJldHVybiBlO1xufVxuXG5mdW5jdGlvbiBleHRlbmRCYXNpcyhCLCBwKSB7XG4gIHZhciBpLCBqO1xuXG4gIGlmIChlbmNsb3Nlc1dlYWtBbGwocCwgQikpIHJldHVybiBbcF07XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgdGhlbiBCIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgZWxlbWVudC5cbiAgZm9yIChpID0gMDsgaSA8IEIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoZW5jbG9zZXNOb3QocCwgQltpXSlcbiAgICAgICAgJiYgZW5jbG9zZXNXZWFrQWxsKGVuY2xvc2VCYXNpczIoQltpXSwgcCksIEIpKSB7XG4gICAgICByZXR1cm4gW0JbaV0sIHBdO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIHdlIGdldCBoZXJlIHRoZW4gQiBtdXN0IGhhdmUgYXQgbGVhc3QgdHdvIGVsZW1lbnRzLlxuICBmb3IgKGkgPSAwOyBpIDwgQi5sZW5ndGggLSAxOyArK2kpIHtcbiAgICBmb3IgKGogPSBpICsgMTsgaiA8IEIubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChlbmNsb3Nlc05vdChlbmNsb3NlQmFzaXMyKEJbaV0sIEJbal0pLCBwKVxuICAgICAgICAgICYmIGVuY2xvc2VzTm90KGVuY2xvc2VCYXNpczIoQltpXSwgcCksIEJbal0pXG4gICAgICAgICAgJiYgZW5jbG9zZXNOb3QoZW5jbG9zZUJhc2lzMihCW2pdLCBwKSwgQltpXSlcbiAgICAgICAgICAmJiBlbmNsb3Nlc1dlYWtBbGwoZW5jbG9zZUJhc2lzMyhCW2ldLCBCW2pdLCBwKSwgQikpIHtcbiAgICAgICAgcmV0dXJuIFtCW2ldLCBCW2pdLCBwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBJZiB3ZSBnZXQgaGVyZSB0aGVuIHNvbWV0aGluZyBpcyB2ZXJ5IHdyb25nLlxuICB0aHJvdyBuZXcgRXJyb3I7XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VzTm90KGEsIGIpIHtcbiAgdmFyIGRyID0gYS5yIC0gYi5yLCBkeCA9IGIueCAtIGEueCwgZHkgPSBiLnkgLSBhLnk7XG4gIHJldHVybiBkciA8IDAgfHwgZHIgKiBkciA8IGR4ICogZHggKyBkeSAqIGR5O1xufVxuXG5mdW5jdGlvbiBlbmNsb3Nlc1dlYWsoYSwgYikge1xuICB2YXIgZHIgPSBhLnIgLSBiLnIgKyBNYXRoLm1heChhLnIsIGIuciwgMSkgKiAxZS05LCBkeCA9IGIueCAtIGEueCwgZHkgPSBiLnkgLSBhLnk7XG4gIHJldHVybiBkciA+IDAgJiYgZHIgKiBkciA+IGR4ICogZHggKyBkeSAqIGR5O1xufVxuXG5mdW5jdGlvbiBlbmNsb3Nlc1dlYWtBbGwoYSwgQikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IEIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoIWVuY2xvc2VzV2VhayhhLCBCW2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZUJhc2lzKEIpIHtcbiAgc3dpdGNoIChCLmxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGVuY2xvc2VCYXNpczEoQlswXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gZW5jbG9zZUJhc2lzMihCWzBdLCBCWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiBlbmNsb3NlQmFzaXMzKEJbMF0sIEJbMV0sIEJbMl0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VCYXNpczEoYSkge1xuICByZXR1cm4ge1xuICAgIHg6IGEueCxcbiAgICB5OiBhLnksXG4gICAgcjogYS5yXG4gIH07XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VCYXNpczIoYSwgYikge1xuICB2YXIgeDEgPSBhLngsIHkxID0gYS55LCByMSA9IGEucixcbiAgICAgIHgyID0gYi54LCB5MiA9IGIueSwgcjIgPSBiLnIsXG4gICAgICB4MjEgPSB4MiAtIHgxLCB5MjEgPSB5MiAtIHkxLCByMjEgPSByMiAtIHIxLFxuICAgICAgbCA9IE1hdGguc3FydCh4MjEgKiB4MjEgKyB5MjEgKiB5MjEpO1xuICByZXR1cm4ge1xuICAgIHg6ICh4MSArIHgyICsgeDIxIC8gbCAqIHIyMSkgLyAyLFxuICAgIHk6ICh5MSArIHkyICsgeTIxIC8gbCAqIHIyMSkgLyAyLFxuICAgIHI6IChsICsgcjEgKyByMikgLyAyXG4gIH07XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VCYXNpczMoYSwgYiwgYykge1xuICB2YXIgeDEgPSBhLngsIHkxID0gYS55LCByMSA9IGEucixcbiAgICAgIHgyID0gYi54LCB5MiA9IGIueSwgcjIgPSBiLnIsXG4gICAgICB4MyA9IGMueCwgeTMgPSBjLnksIHIzID0gYy5yLFxuICAgICAgYTIgPSB4MSAtIHgyLFxuICAgICAgYTMgPSB4MSAtIHgzLFxuICAgICAgYjIgPSB5MSAtIHkyLFxuICAgICAgYjMgPSB5MSAtIHkzLFxuICAgICAgYzIgPSByMiAtIHIxLFxuICAgICAgYzMgPSByMyAtIHIxLFxuICAgICAgZDEgPSB4MSAqIHgxICsgeTEgKiB5MSAtIHIxICogcjEsXG4gICAgICBkMiA9IGQxIC0geDIgKiB4MiAtIHkyICogeTIgKyByMiAqIHIyLFxuICAgICAgZDMgPSBkMSAtIHgzICogeDMgLSB5MyAqIHkzICsgcjMgKiByMyxcbiAgICAgIGFiID0gYTMgKiBiMiAtIGEyICogYjMsXG4gICAgICB4YSA9IChiMiAqIGQzIC0gYjMgKiBkMikgLyAoYWIgKiAyKSAtIHgxLFxuICAgICAgeGIgPSAoYjMgKiBjMiAtIGIyICogYzMpIC8gYWIsXG4gICAgICB5YSA9IChhMyAqIGQyIC0gYTIgKiBkMykgLyAoYWIgKiAyKSAtIHkxLFxuICAgICAgeWIgPSAoYTIgKiBjMyAtIGEzICogYzIpIC8gYWIsXG4gICAgICBBID0geGIgKiB4YiArIHliICogeWIgLSAxLFxuICAgICAgQiA9IDIgKiAocjEgKyB4YSAqIHhiICsgeWEgKiB5YiksXG4gICAgICBDID0geGEgKiB4YSArIHlhICogeWEgLSByMSAqIHIxLFxuICAgICAgciA9IC0oTWF0aC5hYnMoQSkgPiAxZS02ID8gKEIgKyBNYXRoLnNxcnQoQiAqIEIgLSA0ICogQSAqIEMpKSAvICgyICogQSkgOiBDIC8gQik7XG4gIHJldHVybiB7XG4gICAgeDogeDEgKyB4YSArIHhiICogcixcbiAgICB5OiB5MSArIHlhICsgeWIgKiByLFxuICAgIHI6IHJcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSBcIm9iamVjdFwiICYmIFwibGVuZ3RoXCIgaW4geFxuICAgID8geCAvLyBBcnJheSwgVHlwZWRBcnJheSwgTm9kZUxpc3QsIGFycmF5LWxpa2VcbiAgICA6IEFycmF5LmZyb20oeCk7IC8vIE1hcCwgU2V0LCBpdGVyYWJsZSwgc3RyaW5nLCBvciBhbnl0aGluZyBlbHNlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaHVmZmxlKGFycmF5LCByYW5kb20pIHtcbiAgbGV0IG0gPSBhcnJheS5sZW5ndGgsXG4gICAgICB0LFxuICAgICAgaTtcblxuICB3aGlsZSAobSkge1xuICAgIGkgPSByYW5kb20oKSAqIG0tLSB8IDA7XG4gICAgdCA9IGFycmF5W21dO1xuICAgIGFycmF5W21dID0gYXJyYXlbaV07XG4gICAgYXJyYXlbaV0gPSB0O1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuIiwiaW1wb3J0IGFycmF5IGZyb20gXCIuLi9hcnJheS5qc1wiO1xuaW1wb3J0IGxjZyBmcm9tIFwiLi4vbGNnLmpzXCI7XG5pbXBvcnQge3BhY2tFbmNsb3NlUmFuZG9tfSBmcm9tIFwiLi9lbmNsb3NlLmpzXCI7XG5cbmZ1bmN0aW9uIHBsYWNlKGIsIGEsIGMpIHtcbiAgdmFyIGR4ID0gYi54IC0gYS54LCB4LCBhMixcbiAgICAgIGR5ID0gYi55IC0gYS55LCB5LCBiMixcbiAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gIGlmIChkMikge1xuICAgIGEyID0gYS5yICsgYy5yLCBhMiAqPSBhMjtcbiAgICBiMiA9IGIuciArIGMuciwgYjIgKj0gYjI7XG4gICAgaWYgKGEyID4gYjIpIHtcbiAgICAgIHggPSAoZDIgKyBiMiAtIGEyKSAvICgyICogZDIpO1xuICAgICAgeSA9IE1hdGguc3FydChNYXRoLm1heCgwLCBiMiAvIGQyIC0geCAqIHgpKTtcbiAgICAgIGMueCA9IGIueCAtIHggKiBkeCAtIHkgKiBkeTtcbiAgICAgIGMueSA9IGIueSAtIHggKiBkeSArIHkgKiBkeDtcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IChkMiArIGEyIC0gYjIpIC8gKDIgKiBkMik7XG4gICAgICB5ID0gTWF0aC5zcXJ0KE1hdGgubWF4KDAsIGEyIC8gZDIgLSB4ICogeCkpO1xuICAgICAgYy54ID0gYS54ICsgeCAqIGR4IC0geSAqIGR5O1xuICAgICAgYy55ID0gYS55ICsgeCAqIGR5ICsgeSAqIGR4O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjLnggPSBhLnggKyBjLnI7XG4gICAgYy55ID0gYS55O1xuICB9XG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdHMoYSwgYikge1xuICB2YXIgZHIgPSBhLnIgKyBiLnIgLSAxZS02LCBkeCA9IGIueCAtIGEueCwgZHkgPSBiLnkgLSBhLnk7XG4gIHJldHVybiBkciA+IDAgJiYgZHIgKiBkciA+IGR4ICogZHggKyBkeSAqIGR5O1xufVxuXG5mdW5jdGlvbiBzY29yZShub2RlKSB7XG4gIHZhciBhID0gbm9kZS5fLFxuICAgICAgYiA9IG5vZGUubmV4dC5fLFxuICAgICAgYWIgPSBhLnIgKyBiLnIsXG4gICAgICBkeCA9IChhLnggKiBiLnIgKyBiLnggKiBhLnIpIC8gYWIsXG4gICAgICBkeSA9IChhLnkgKiBiLnIgKyBiLnkgKiBhLnIpIC8gYWI7XG4gIHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeTtcbn1cblxuZnVuY3Rpb24gTm9kZShjaXJjbGUpIHtcbiAgdGhpcy5fID0gY2lyY2xlO1xuICB0aGlzLm5leHQgPSBudWxsO1xuICB0aGlzLnByZXZpb3VzID0gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhY2tTaWJsaW5nc1JhbmRvbShjaXJjbGVzLCByYW5kb20pIHtcbiAgaWYgKCEobiA9IChjaXJjbGVzID0gYXJyYXkoY2lyY2xlcykpLmxlbmd0aCkpIHJldHVybiAwO1xuXG4gIHZhciBhLCBiLCBjLCBuLCBhYSwgY2EsIGksIGosIGssIHNqLCBzaztcblxuICAvLyBQbGFjZSB0aGUgZmlyc3QgY2lyY2xlLlxuICBhID0gY2lyY2xlc1swXSwgYS54ID0gMCwgYS55ID0gMDtcbiAgaWYgKCEobiA+IDEpKSByZXR1cm4gYS5yO1xuXG4gIC8vIFBsYWNlIHRoZSBzZWNvbmQgY2lyY2xlLlxuICBiID0gY2lyY2xlc1sxXSwgYS54ID0gLWIuciwgYi54ID0gYS5yLCBiLnkgPSAwO1xuICBpZiAoIShuID4gMikpIHJldHVybiBhLnIgKyBiLnI7XG5cbiAgLy8gUGxhY2UgdGhlIHRoaXJkIGNpcmNsZS5cbiAgcGxhY2UoYiwgYSwgYyA9IGNpcmNsZXNbMl0pO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIGZyb250LWNoYWluIHVzaW5nIHRoZSBmaXJzdCB0aHJlZSBjaXJjbGVzIGEsIGIgYW5kIGMuXG4gIGEgPSBuZXcgTm9kZShhKSwgYiA9IG5ldyBOb2RlKGIpLCBjID0gbmV3IE5vZGUoYyk7XG4gIGEubmV4dCA9IGMucHJldmlvdXMgPSBiO1xuICBiLm5leHQgPSBhLnByZXZpb3VzID0gYztcbiAgYy5uZXh0ID0gYi5wcmV2aW91cyA9IGE7XG5cbiAgLy8gQXR0ZW1wdCB0byBwbGFjZSBlYWNoIHJlbWFpbmluZyBjaXJjbGXigKZcbiAgcGFjazogZm9yIChpID0gMzsgaSA8IG47ICsraSkge1xuICAgIHBsYWNlKGEuXywgYi5fLCBjID0gY2lyY2xlc1tpXSksIGMgPSBuZXcgTm9kZShjKTtcblxuICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3QgaW50ZXJzZWN0aW5nIGNpcmNsZSBvbiB0aGUgZnJvbnQtY2hhaW4sIGlmIGFueS5cbiAgICAvLyDigJxDbG9zZW5lc3PigJ0gaXMgZGV0ZXJtaW5lZCBieSBsaW5lYXIgZGlzdGFuY2UgYWxvbmcgdGhlIGZyb250LWNoYWluLlxuICAgIC8vIOKAnEFoZWFk4oCdIG9yIOKAnGJlaGluZOKAnSBpcyBsaWtld2lzZSBkZXRlcm1pbmVkIGJ5IGxpbmVhciBkaXN0YW5jZS5cbiAgICBqID0gYi5uZXh0LCBrID0gYS5wcmV2aW91cywgc2ogPSBiLl8uciwgc2sgPSBhLl8ucjtcbiAgICBkbyB7XG4gICAgICBpZiAoc2ogPD0gc2spIHtcbiAgICAgICAgaWYgKGludGVyc2VjdHMoai5fLCBjLl8pKSB7XG4gICAgICAgICAgYiA9IGosIGEubmV4dCA9IGIsIGIucHJldmlvdXMgPSBhLCAtLWk7XG4gICAgICAgICAgY29udGludWUgcGFjaztcbiAgICAgICAgfVxuICAgICAgICBzaiArPSBqLl8uciwgaiA9IGoubmV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpbnRlcnNlY3RzKGsuXywgYy5fKSkge1xuICAgICAgICAgIGEgPSBrLCBhLm5leHQgPSBiLCBiLnByZXZpb3VzID0gYSwgLS1pO1xuICAgICAgICAgIGNvbnRpbnVlIHBhY2s7XG4gICAgICAgIH1cbiAgICAgICAgc2sgKz0gay5fLnIsIGsgPSBrLnByZXZpb3VzO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKGogIT09IGsubmV4dCk7XG5cbiAgICAvLyBTdWNjZXNzISBJbnNlcnQgdGhlIG5ldyBjaXJjbGUgYyBiZXR3ZWVuIGEgYW5kIGIuXG4gICAgYy5wcmV2aW91cyA9IGEsIGMubmV4dCA9IGIsIGEubmV4dCA9IGIucHJldmlvdXMgPSBiID0gYztcblxuICAgIC8vIENvbXB1dGUgdGhlIG5ldyBjbG9zZXN0IGNpcmNsZSBwYWlyIHRvIHRoZSBjZW50cm9pZC5cbiAgICBhYSA9IHNjb3JlKGEpO1xuICAgIHdoaWxlICgoYyA9IGMubmV4dCkgIT09IGIpIHtcbiAgICAgIGlmICgoY2EgPSBzY29yZShjKSkgPCBhYSkge1xuICAgICAgICBhID0gYywgYWEgPSBjYTtcbiAgICAgIH1cbiAgICB9XG4gICAgYiA9IGEubmV4dDtcbiAgfVxuXG4gIC8vIENvbXB1dGUgdGhlIGVuY2xvc2luZyBjaXJjbGUgb2YgdGhlIGZyb250IGNoYWluLlxuICBhID0gW2IuX10sIGMgPSBiOyB3aGlsZSAoKGMgPSBjLm5leHQpICE9PSBiKSBhLnB1c2goYy5fKTsgYyA9IHBhY2tFbmNsb3NlUmFuZG9tKGEsIHJhbmRvbSk7XG5cbiAgLy8gVHJhbnNsYXRlIHRoZSBjaXJjbGVzIHRvIHB1dCB0aGUgZW5jbG9zaW5nIGNpcmNsZSBhcm91bmQgdGhlIG9yaWdpbi5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgYSA9IGNpcmNsZXNbaV0sIGEueCAtPSBjLngsIGEueSAtPSBjLnk7XG5cbiAgcmV0dXJuIGMucjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2lyY2xlcykge1xuICBwYWNrU2libGluZ3NSYW5kb20oY2lyY2xlcywgbGNnKCkpO1xuICByZXR1cm4gY2lyY2xlcztcbn1cbiIsImltcG9ydCB7b3B0aW9uYWx9IGZyb20gXCIuLi9hY2Nlc3NvcnMuanNcIjtcbmltcG9ydCBjb25zdGFudCwge2NvbnN0YW50WmVyb30gZnJvbSBcIi4uL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgbGNnIGZyb20gXCIuLi9sY2cuanNcIjtcbmltcG9ydCB7cGFja1NpYmxpbmdzUmFuZG9tfSBmcm9tIFwiLi9zaWJsaW5ncy5qc1wiO1xuXG5mdW5jdGlvbiBkZWZhdWx0UmFkaXVzKGQpIHtcbiAgcmV0dXJuIE1hdGguc3FydChkLnZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciByYWRpdXMgPSBudWxsLFxuICAgICAgZHggPSAxLFxuICAgICAgZHkgPSAxLFxuICAgICAgcGFkZGluZyA9IGNvbnN0YW50WmVybztcblxuICBmdW5jdGlvbiBwYWNrKHJvb3QpIHtcbiAgICBjb25zdCByYW5kb20gPSBsY2coKTtcbiAgICByb290LnggPSBkeCAvIDIsIHJvb3QueSA9IGR5IC8gMjtcbiAgICBpZiAocmFkaXVzKSB7XG4gICAgICByb290LmVhY2hCZWZvcmUocmFkaXVzTGVhZihyYWRpdXMpKVxuICAgICAgICAgIC5lYWNoQWZ0ZXIocGFja0NoaWxkcmVuUmFuZG9tKHBhZGRpbmcsIDAuNSwgcmFuZG9tKSlcbiAgICAgICAgICAuZWFjaEJlZm9yZSh0cmFuc2xhdGVDaGlsZCgxKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3QuZWFjaEJlZm9yZShyYWRpdXNMZWFmKGRlZmF1bHRSYWRpdXMpKVxuICAgICAgICAgIC5lYWNoQWZ0ZXIocGFja0NoaWxkcmVuUmFuZG9tKGNvbnN0YW50WmVybywgMSwgcmFuZG9tKSlcbiAgICAgICAgICAuZWFjaEFmdGVyKHBhY2tDaGlsZHJlblJhbmRvbShwYWRkaW5nLCByb290LnIgLyBNYXRoLm1pbihkeCwgZHkpLCByYW5kb20pKVxuICAgICAgICAgIC5lYWNoQmVmb3JlKHRyYW5zbGF0ZUNoaWxkKE1hdGgubWluKGR4LCBkeSkgLyAoMiAqIHJvb3QucikpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cblxuICBwYWNrLnJhZGl1cyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSBvcHRpb25hbCh4KSwgcGFjaykgOiByYWRpdXM7XG4gIH07XG5cbiAgcGFjay5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHBhY2spIDogW2R4LCBkeV07XG4gIH07XG5cbiAgcGFjay5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmcgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50KCt4KSwgcGFjaykgOiBwYWRkaW5nO1xuICB9O1xuXG4gIHJldHVybiBwYWNrO1xufVxuXG5mdW5jdGlvbiByYWRpdXNMZWFmKHJhZGl1cykge1xuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5jaGlsZHJlbikge1xuICAgICAgbm9kZS5yID0gTWF0aC5tYXgoMCwgK3JhZGl1cyhub2RlKSB8fCAwKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhY2tDaGlsZHJlblJhbmRvbShwYWRkaW5nLCBrLCByYW5kb20pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuKSB7XG4gICAgICB2YXIgY2hpbGRyZW4sXG4gICAgICAgICAgaSxcbiAgICAgICAgICBuID0gY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgICAgIHIgPSBwYWRkaW5nKG5vZGUpICogayB8fCAwLFxuICAgICAgICAgIGU7XG5cbiAgICAgIGlmIChyKSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjaGlsZHJlbltpXS5yICs9IHI7XG4gICAgICBlID0gcGFja1NpYmxpbmdzUmFuZG9tKGNoaWxkcmVuLCByYW5kb20pO1xuICAgICAgaWYgKHIpIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGNoaWxkcmVuW2ldLnIgLT0gcjtcbiAgICAgIG5vZGUuciA9IGUgKyByO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlQ2hpbGQoaykge1xuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudDtcbiAgICBub2RlLnIgKj0gaztcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBub2RlLnggPSBwYXJlbnQueCArIGsgKiBub2RlLng7XG4gICAgICBub2RlLnkgPSBwYXJlbnQueSArIGsgKiBub2RlLnk7XG4gICAgfVxuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICBub2RlLngwID0gTWF0aC5yb3VuZChub2RlLngwKTtcbiAgbm9kZS55MCA9IE1hdGgucm91bmQobm9kZS55MCk7XG4gIG5vZGUueDEgPSBNYXRoLnJvdW5kKG5vZGUueDEpO1xuICBub2RlLnkxID0gTWF0aC5yb3VuZChub2RlLnkxKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIG5vZGVzID0gcGFyZW50LmNoaWxkcmVuLFxuICAgICAgbm9kZSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICBrID0gcGFyZW50LnZhbHVlICYmICh4MSAtIHgwKSAvIHBhcmVudC52YWx1ZTtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS55MCA9IHkwLCBub2RlLnkxID0geTE7XG4gICAgbm9kZS54MCA9IHgwLCBub2RlLngxID0geDAgKz0gbm9kZS52YWx1ZSAqIGs7XG4gIH1cbn1cbiIsImltcG9ydCByb3VuZE5vZGUgZnJvbSBcIi4vdHJlZW1hcC9yb3VuZC5qc1wiO1xuaW1wb3J0IHRyZWVtYXBEaWNlIGZyb20gXCIuL3RyZWVtYXAvZGljZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGR4ID0gMSxcbiAgICAgIGR5ID0gMSxcbiAgICAgIHBhZGRpbmcgPSAwLFxuICAgICAgcm91bmQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBwYXJ0aXRpb24ocm9vdCkge1xuICAgIHZhciBuID0gcm9vdC5oZWlnaHQgKyAxO1xuICAgIHJvb3QueDAgPVxuICAgIHJvb3QueTAgPSBwYWRkaW5nO1xuICAgIHJvb3QueDEgPSBkeDtcbiAgICByb290LnkxID0gZHkgLyBuO1xuICAgIHJvb3QuZWFjaEJlZm9yZShwb3NpdGlvbk5vZGUoZHksIG4pKTtcbiAgICBpZiAocm91bmQpIHJvb3QuZWFjaEJlZm9yZShyb3VuZE5vZGUpO1xuICAgIHJldHVybiByb290O1xuICB9XG5cbiAgZnVuY3Rpb24gcG9zaXRpb25Ob2RlKGR5LCBuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIHRyZWVtYXBEaWNlKG5vZGUsIG5vZGUueDAsIGR5ICogKG5vZGUuZGVwdGggKyAxKSAvIG4sIG5vZGUueDEsIGR5ICogKG5vZGUuZGVwdGggKyAyKSAvIG4pO1xuICAgICAgfVxuICAgICAgdmFyIHgwID0gbm9kZS54MCxcbiAgICAgICAgICB5MCA9IG5vZGUueTAsXG4gICAgICAgICAgeDEgPSBub2RlLngxIC0gcGFkZGluZyxcbiAgICAgICAgICB5MSA9IG5vZGUueTEgLSBwYWRkaW5nO1xuICAgICAgaWYgKHgxIDwgeDApIHgwID0geDEgPSAoeDAgKyB4MSkgLyAyO1xuICAgICAgaWYgKHkxIDwgeTApIHkwID0geTEgPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgbm9kZS54MCA9IHgwO1xuICAgICAgbm9kZS55MCA9IHkwO1xuICAgICAgbm9kZS54MSA9IHgxO1xuICAgICAgbm9kZS55MSA9IHkxO1xuICAgIH07XG4gIH1cblxuICBwYXJ0aXRpb24ucm91bmQgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIXgsIHBhcnRpdGlvbikgOiByb3VuZDtcbiAgfTtcblxuICBwYXJ0aXRpb24uc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCBwYXJ0aXRpb24pIDogW2R4LCBkeV07XG4gIH07XG5cbiAgcGFydGl0aW9uLnBhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZyA9ICt4LCBwYXJ0aXRpb24pIDogcGFkZGluZztcbiAgfTtcblxuICByZXR1cm4gcGFydGl0aW9uO1xufVxuIiwiaW1wb3J0IHtvcHRpb25hbH0gZnJvbSBcIi4vYWNjZXNzb3JzLmpzXCI7XG5pbXBvcnQge05vZGUsIGNvbXB1dGVIZWlnaHR9IGZyb20gXCIuL2hpZXJhcmNoeS9pbmRleC5qc1wiO1xuXG52YXIgcHJlcm9vdCA9IHtkZXB0aDogLTF9LFxuICAgIGFtYmlndW91cyA9IHt9LFxuICAgIGltcHV0ZWQgPSB7fTtcblxuZnVuY3Rpb24gZGVmYXVsdElkKGQpIHtcbiAgcmV0dXJuIGQuaWQ7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQYXJlbnRJZChkKSB7XG4gIHJldHVybiBkLnBhcmVudElkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGlkID0gZGVmYXVsdElkLFxuICAgICAgcGFyZW50SWQgPSBkZWZhdWx0UGFyZW50SWQsXG4gICAgICBwYXRoO1xuXG4gIGZ1bmN0aW9uIHN0cmF0aWZ5KGRhdGEpIHtcbiAgICB2YXIgbm9kZXMgPSBBcnJheS5mcm9tKGRhdGEpLFxuICAgICAgICBjdXJyZW50SWQgPSBpZCxcbiAgICAgICAgY3VycmVudFBhcmVudElkID0gcGFyZW50SWQsXG4gICAgICAgIG4sXG4gICAgICAgIGQsXG4gICAgICAgIGksXG4gICAgICAgIHJvb3QsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgbm9kZSxcbiAgICAgICAgbm9kZUlkLFxuICAgICAgICBub2RlS2V5LFxuICAgICAgICBub2RlQnlLZXkgPSBuZXcgTWFwO1xuXG4gICAgaWYgKHBhdGggIT0gbnVsbCkge1xuICAgICAgY29uc3QgSSA9IG5vZGVzLm1hcCgoZCwgaSkgPT4gbm9ybWFsaXplKHBhdGgoZCwgaSwgZGF0YSkpKTtcbiAgICAgIGNvbnN0IFAgPSBJLm1hcChwYXJlbnRvZik7XG4gICAgICBjb25zdCBTID0gbmV3IFNldChJKS5hZGQoXCJcIik7XG4gICAgICBmb3IgKGNvbnN0IGkgb2YgUCkge1xuICAgICAgICBpZiAoIVMuaGFzKGkpKSB7XG4gICAgICAgICAgUy5hZGQoaSk7XG4gICAgICAgICAgSS5wdXNoKGkpO1xuICAgICAgICAgIFAucHVzaChwYXJlbnRvZihpKSk7XG4gICAgICAgICAgbm9kZXMucHVzaChpbXB1dGVkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY3VycmVudElkID0gKF8sIGkpID0+IElbaV07XG4gICAgICBjdXJyZW50UGFyZW50SWQgPSAoXywgaSkgPT4gUFtpXTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBkID0gbm9kZXNbaV0sIG5vZGUgPSBub2Rlc1tpXSA9IG5ldyBOb2RlKGQpO1xuICAgICAgaWYgKChub2RlSWQgPSBjdXJyZW50SWQoZCwgaSwgZGF0YSkpICE9IG51bGwgJiYgKG5vZGVJZCArPSBcIlwiKSkge1xuICAgICAgICBub2RlS2V5ID0gbm9kZS5pZCA9IG5vZGVJZDtcbiAgICAgICAgbm9kZUJ5S2V5LnNldChub2RlS2V5LCBub2RlQnlLZXkuaGFzKG5vZGVLZXkpID8gYW1iaWd1b3VzIDogbm9kZSk7XG4gICAgICB9XG4gICAgICBpZiAoKG5vZGVJZCA9IGN1cnJlbnRQYXJlbnRJZChkLCBpLCBkYXRhKSkgIT0gbnVsbCAmJiAobm9kZUlkICs9IFwiXCIpKSB7XG4gICAgICAgIG5vZGUucGFyZW50ID0gbm9kZUlkO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgIGlmIChub2RlSWQgPSBub2RlLnBhcmVudCkge1xuICAgICAgICBwYXJlbnQgPSBub2RlQnlLZXkuZ2V0KG5vZGVJZCk7XG4gICAgICAgIGlmICghcGFyZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJtaXNzaW5nOiBcIiArIG5vZGVJZCk7XG4gICAgICAgIGlmIChwYXJlbnQgPT09IGFtYmlndW91cykgdGhyb3cgbmV3IEVycm9yKFwiYW1iaWd1b3VzOiBcIiArIG5vZGVJZCk7XG4gICAgICAgIGlmIChwYXJlbnQuY2hpbGRyZW4pIHBhcmVudC5jaGlsZHJlbi5wdXNoKG5vZGUpO1xuICAgICAgICBlbHNlIHBhcmVudC5jaGlsZHJlbiA9IFtub2RlXTtcbiAgICAgICAgbm9kZS5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocm9vdCkgdGhyb3cgbmV3IEVycm9yKFwibXVsdGlwbGUgcm9vdHNcIik7XG4gICAgICAgIHJvb3QgPSBub2RlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcm9vdCkgdGhyb3cgbmV3IEVycm9yKFwibm8gcm9vdFwiKTtcblxuICAgIC8vIFdoZW4gaW1wdXRpbmcgaW50ZXJuYWwgbm9kZXMsIG9ubHkgaW50cm9kdWNlIHJvb3RzIGlmIG5lZWRlZC5cbiAgICAvLyBUaGVuIHJlcGxhY2UgdGhlIGltcHV0ZWQgbWFya2VyIGRhdGEgd2l0aCBudWxsLlxuICAgIGlmIChwYXRoICE9IG51bGwpIHtcbiAgICAgIHdoaWxlIChyb290LmRhdGEgPT09IGltcHV0ZWQgJiYgcm9vdC5jaGlsZHJlbi5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcm9vdCA9IHJvb3QuY2hpbGRyZW5bMF0sIC0tbjtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSBub2Rlcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChub2RlLmRhdGEgIT09IGltcHV0ZWQpIGJyZWFrO1xuICAgICAgICBub2RlLmRhdGEgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJvb3QucGFyZW50ID0gcHJlcm9vdDtcbiAgICByb290LmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkgeyBub2RlLmRlcHRoID0gbm9kZS5wYXJlbnQuZGVwdGggKyAxOyAtLW47IH0pLmVhY2hCZWZvcmUoY29tcHV0ZUhlaWdodCk7XG4gICAgcm9vdC5wYXJlbnQgPSBudWxsO1xuICAgIGlmIChuID4gMCkgdGhyb3cgbmV3IEVycm9yKFwiY3ljbGVcIik7XG5cbiAgICByZXR1cm4gcm9vdDtcbiAgfVxuXG4gIHN0cmF0aWZ5LmlkID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGlkID0gb3B0aW9uYWwoeCksIHN0cmF0aWZ5KSA6IGlkO1xuICB9O1xuXG4gIHN0cmF0aWZ5LnBhcmVudElkID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhcmVudElkID0gb3B0aW9uYWwoeCksIHN0cmF0aWZ5KSA6IHBhcmVudElkO1xuICB9O1xuXG4gIHN0cmF0aWZ5LnBhdGggPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGF0aCA9IG9wdGlvbmFsKHgpLCBzdHJhdGlmeSkgOiBwYXRoO1xuICB9O1xuXG4gIHJldHVybiBzdHJhdGlmeTtcbn1cblxuLy8gVG8gbm9ybWFsaXplIGEgcGF0aCwgd2UgY29lcmNlIHRvIGEgc3RyaW5nLCBzdHJpcCB0aGUgdHJhaWxpbmcgc2xhc2ggaWYgYW55XG4vLyAoYXMgbG9uZyBhcyB0aGUgdHJhaWxpbmcgc2xhc2ggaXMgbm90IGltbWVkaWF0ZWx5IHByZWNlZGVkIGJ5IGFub3RoZXIgc2xhc2gpLFxuLy8gYW5kIGFkZCBsZWFkaW5nIHNsYXNoIGlmIG1pc3NpbmcuXG5mdW5jdGlvbiBub3JtYWxpemUocGF0aCkge1xuICBwYXRoID0gYCR7cGF0aH1gO1xuICBsZXQgaSA9IHBhdGgubGVuZ3RoO1xuICBpZiAoc2xhc2gocGF0aCwgaSAtIDEpICYmICFzbGFzaChwYXRoLCBpIC0gMikpIHBhdGggPSBwYXRoLnNsaWNlKDAsIC0xKTtcbiAgcmV0dXJuIHBhdGhbMF0gPT09IFwiL1wiID8gcGF0aCA6IGAvJHtwYXRofWA7XG59XG5cbi8vIFdhbGsgYmFja3dhcmRzIHRvIGZpbmQgdGhlIGZpcnN0IHNsYXNoIHRoYXQgaXMgbm90IHRoZSBsZWFkaW5nIHNsYXNoLCBlLmcuOlxuLy8gXCIvZm9vL2JhclwiIOKHpSBcIi9mb29cIiwgXCIvZm9vXCIg4oelIFwiL1wiLCBcIi9cIiDihqYgXCJcIi4gKFRoZSByb290IGlzIHNwZWNpYWwtY2FzZWRcbi8vIGJlY2F1c2UgdGhlIGlkIG9mIHRoZSByb290IG11c3QgYmUgYSB0cnV0aHkgdmFsdWUuKVxuZnVuY3Rpb24gcGFyZW50b2YocGF0aCkge1xuICBsZXQgaSA9IHBhdGgubGVuZ3RoO1xuICBpZiAoaSA8IDIpIHJldHVybiBcIlwiO1xuICB3aGlsZSAoLS1pID4gMSkgaWYgKHNsYXNoKHBhdGgsIGkpKSBicmVhaztcbiAgcmV0dXJuIHBhdGguc2xpY2UoMCwgaSk7XG59XG5cbi8vIFNsYXNoZXMgY2FuIGJlIGVzY2FwZWQ7IHRvIGRldGVybWluZSB3aGV0aGVyIGEgc2xhc2ggaXMgYSBwYXRoIGRlbGltaXRlciwgd2Vcbi8vIGNvdW50IHRoZSBudW1iZXIgb2YgcHJlY2VkaW5nIGJhY2tzbGFzaGVzIGVzY2FwaW5nIHRoZSBmb3J3YXJkIHNsYXNoOiBhbiBvZGRcbi8vIG51bWJlciBpbmRpY2F0ZXMgYW4gZXNjYXBlZCBmb3J3YXJkIHNsYXNoLlxuZnVuY3Rpb24gc2xhc2gocGF0aCwgaSkge1xuICBpZiAocGF0aFtpXSA9PT0gXCIvXCIpIHtcbiAgICBsZXQgayA9IDA7XG4gICAgd2hpbGUgKGkgPiAwICYmIHBhdGhbLS1pXSA9PT0gXCJcXFxcXCIpICsraztcbiAgICBpZiAoKGsgJiAxKSA9PT0gMCkgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuIiwiaW1wb3J0IHtOb2RlfSBmcm9tIFwiLi9oaWVyYXJjaHkvaW5kZXguanNcIjtcblxuZnVuY3Rpb24gZGVmYXVsdFNlcGFyYXRpb24oYSwgYikge1xuICByZXR1cm4gYS5wYXJlbnQgPT09IGIucGFyZW50ID8gMSA6IDI7XG59XG5cbi8vIGZ1bmN0aW9uIHJhZGlhbFNlcGFyYXRpb24oYSwgYikge1xuLy8gICByZXR1cm4gKGEucGFyZW50ID09PSBiLnBhcmVudCA/IDEgOiAyKSAvIGEuZGVwdGg7XG4vLyB9XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byB0cmF2ZXJzZSB0aGUgbGVmdCBjb250b3VyIG9mIGEgc3VidHJlZSAob3Jcbi8vIHN1YmZvcmVzdCkuIEl0IHJldHVybnMgdGhlIHN1Y2Nlc3NvciBvZiB2IG9uIHRoaXMgY29udG91ci4gVGhpcyBzdWNjZXNzb3IgaXNcbi8vIGVpdGhlciBnaXZlbiBieSB0aGUgbGVmdG1vc3QgY2hpbGQgb2YgdiBvciBieSB0aGUgdGhyZWFkIG9mIHYuIFRoZSBmdW5jdGlvblxuLy8gcmV0dXJucyBudWxsIGlmIGFuZCBvbmx5IGlmIHYgaXMgb24gdGhlIGhpZ2hlc3QgbGV2ZWwgb2YgaXRzIHN1YnRyZWUuXG5mdW5jdGlvbiBuZXh0TGVmdCh2KSB7XG4gIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW47XG4gIHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuWzBdIDogdi50O1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIHdvcmtzIGFuYWxvZ291c2x5IHRvIG5leHRMZWZ0LlxuZnVuY3Rpb24gbmV4dFJpZ2h0KHYpIHtcbiAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbjtcbiAgcmV0dXJuIGNoaWxkcmVuID8gY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0gOiB2LnQ7XG59XG5cbi8vIFNoaWZ0cyB0aGUgY3VycmVudCBzdWJ0cmVlIHJvb3RlZCBhdCB3Ky4gVGhpcyBpcyBkb25lIGJ5IGluY3JlYXNpbmdcbi8vIHByZWxpbSh3KykgYW5kIG1vZCh3KykgYnkgc2hpZnQuXG5mdW5jdGlvbiBtb3ZlU3VidHJlZSh3bSwgd3AsIHNoaWZ0KSB7XG4gIHZhciBjaGFuZ2UgPSBzaGlmdCAvICh3cC5pIC0gd20uaSk7XG4gIHdwLmMgLT0gY2hhbmdlO1xuICB3cC5zICs9IHNoaWZ0O1xuICB3bS5jICs9IGNoYW5nZTtcbiAgd3AueiArPSBzaGlmdDtcbiAgd3AubSArPSBzaGlmdDtcbn1cblxuLy8gQWxsIG90aGVyIHNoaWZ0cywgYXBwbGllZCB0byB0aGUgc21hbGxlciBzdWJ0cmVlcyBiZXR3ZWVuIHctIGFuZCB3KywgYXJlXG4vLyBwZXJmb3JtZWQgYnkgdGhpcyBmdW5jdGlvbi4gVG8gcHJlcGFyZSB0aGUgc2hpZnRzLCB3ZSBoYXZlIHRvIGFkanVzdFxuLy8gY2hhbmdlKHcrKSwgc2hpZnQodyspLCBhbmQgY2hhbmdlKHctKS5cbmZ1bmN0aW9uIGV4ZWN1dGVTaGlmdHModikge1xuICB2YXIgc2hpZnQgPSAwLFxuICAgICAgY2hhbmdlID0gMCxcbiAgICAgIGNoaWxkcmVuID0gdi5jaGlsZHJlbixcbiAgICAgIGkgPSBjaGlsZHJlbi5sZW5ndGgsXG4gICAgICB3O1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICB3ID0gY2hpbGRyZW5baV07XG4gICAgdy56ICs9IHNoaWZ0O1xuICAgIHcubSArPSBzaGlmdDtcbiAgICBzaGlmdCArPSB3LnMgKyAoY2hhbmdlICs9IHcuYyk7XG4gIH1cbn1cblxuLy8gSWYgdmkt4oCZcyBhbmNlc3RvciBpcyBhIHNpYmxpbmcgb2YgdiwgcmV0dXJucyB2aS3igJlzIGFuY2VzdG9yLiBPdGhlcndpc2UsXG4vLyByZXR1cm5zIHRoZSBzcGVjaWZpZWQgKGRlZmF1bHQpIGFuY2VzdG9yLlxuZnVuY3Rpb24gbmV4dEFuY2VzdG9yKHZpbSwgdiwgYW5jZXN0b3IpIHtcbiAgcmV0dXJuIHZpbS5hLnBhcmVudCA9PT0gdi5wYXJlbnQgPyB2aW0uYSA6IGFuY2VzdG9yO1xufVxuXG5mdW5jdGlvbiBUcmVlTm9kZShub2RlLCBpKSB7XG4gIHRoaXMuXyA9IG5vZGU7XG4gIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgdGhpcy5jaGlsZHJlbiA9IG51bGw7XG4gIHRoaXMuQSA9IG51bGw7IC8vIGRlZmF1bHQgYW5jZXN0b3JcbiAgdGhpcy5hID0gdGhpczsgLy8gYW5jZXN0b3JcbiAgdGhpcy56ID0gMDsgLy8gcHJlbGltXG4gIHRoaXMubSA9IDA7IC8vIG1vZFxuICB0aGlzLmMgPSAwOyAvLyBjaGFuZ2VcbiAgdGhpcy5zID0gMDsgLy8gc2hpZnRcbiAgdGhpcy50ID0gbnVsbDsgLy8gdGhyZWFkXG4gIHRoaXMuaSA9IGk7IC8vIG51bWJlclxufVxuXG5UcmVlTm9kZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE5vZGUucHJvdG90eXBlKTtcblxuZnVuY3Rpb24gdHJlZVJvb3Qocm9vdCkge1xuICB2YXIgdHJlZSA9IG5ldyBUcmVlTm9kZShyb290LCAwKSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlcyA9IFt0cmVlXSxcbiAgICAgIGNoaWxkLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBpLFxuICAgICAgbjtcblxuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgaWYgKGNoaWxkcmVuID0gbm9kZS5fLmNoaWxkcmVuKSB7XG4gICAgICBub2RlLmNoaWxkcmVuID0gbmV3IEFycmF5KG4gPSBjaGlsZHJlbi5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIG5vZGVzLnB1c2goY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldID0gbmV3IFRyZWVOb2RlKGNoaWxkcmVuW2ldLCBpKSk7XG4gICAgICAgIGNoaWxkLnBhcmVudCA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgKHRyZWUucGFyZW50ID0gbmV3IFRyZWVOb2RlKG51bGwsIDApKS5jaGlsZHJlbiA9IFt0cmVlXTtcbiAgcmV0dXJuIHRyZWU7XG59XG5cbi8vIE5vZGUtbGluayB0cmVlIGRpYWdyYW0gdXNpbmcgdGhlIFJlaW5nb2xkLVRpbGZvcmQgXCJ0aWR5XCIgYWxnb3JpdGhtXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNlcGFyYXRpb24gPSBkZWZhdWx0U2VwYXJhdGlvbixcbiAgICAgIGR4ID0gMSxcbiAgICAgIGR5ID0gMSxcbiAgICAgIG5vZGVTaXplID0gbnVsbDtcblxuICBmdW5jdGlvbiB0cmVlKHJvb3QpIHtcbiAgICB2YXIgdCA9IHRyZWVSb290KHJvb3QpO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgbGF5b3V0IHVzaW5nIEJ1Y2hoZWltIGV0IGFsLuKAmXMgYWxnb3JpdGhtLlxuICAgIHQuZWFjaEFmdGVyKGZpcnN0V2FsayksIHQucGFyZW50Lm0gPSAtdC56O1xuICAgIHQuZWFjaEJlZm9yZShzZWNvbmRXYWxrKTtcblxuICAgIC8vIElmIGEgZml4ZWQgbm9kZSBzaXplIGlzIHNwZWNpZmllZCwgc2NhbGUgeCBhbmQgeS5cbiAgICBpZiAobm9kZVNpemUpIHJvb3QuZWFjaEJlZm9yZShzaXplTm9kZSk7XG5cbiAgICAvLyBJZiBhIGZpeGVkIHRyZWUgc2l6ZSBpcyBzcGVjaWZpZWQsIHNjYWxlIHggYW5kIHkgYmFzZWQgb24gdGhlIGV4dGVudC5cbiAgICAvLyBDb21wdXRlIHRoZSBsZWZ0LW1vc3QsIHJpZ2h0LW1vc3QsIGFuZCBkZXB0aC1tb3N0IG5vZGVzIGZvciBleHRlbnRzLlxuICAgIGVsc2Uge1xuICAgICAgdmFyIGxlZnQgPSByb290LFxuICAgICAgICAgIHJpZ2h0ID0gcm9vdCxcbiAgICAgICAgICBib3R0b20gPSByb290O1xuICAgICAgcm9vdC5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUueCA8IGxlZnQueCkgbGVmdCA9IG5vZGU7XG4gICAgICAgIGlmIChub2RlLnggPiByaWdodC54KSByaWdodCA9IG5vZGU7XG4gICAgICAgIGlmIChub2RlLmRlcHRoID4gYm90dG9tLmRlcHRoKSBib3R0b20gPSBub2RlO1xuICAgICAgfSk7XG4gICAgICB2YXIgcyA9IGxlZnQgPT09IHJpZ2h0ID8gMSA6IHNlcGFyYXRpb24obGVmdCwgcmlnaHQpIC8gMixcbiAgICAgICAgICB0eCA9IHMgLSBsZWZ0LngsXG4gICAgICAgICAga3ggPSBkeCAvIChyaWdodC54ICsgcyArIHR4KSxcbiAgICAgICAgICBreSA9IGR5IC8gKGJvdHRvbS5kZXB0aCB8fCAxKTtcbiAgICAgIHJvb3QuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIG5vZGUueCA9IChub2RlLnggKyB0eCkgKiBreDtcbiAgICAgICAgbm9kZS55ID0gbm9kZS5kZXB0aCAqIGt5O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cblxuICAvLyBDb21wdXRlcyBhIHByZWxpbWluYXJ5IHgtY29vcmRpbmF0ZSBmb3Igdi4gQmVmb3JlIHRoYXQsIEZJUlNUIFdBTEsgaXNcbiAgLy8gYXBwbGllZCByZWN1cnNpdmVseSB0byB0aGUgY2hpbGRyZW4gb2YgdiwgYXMgd2VsbCBhcyB0aGUgZnVuY3Rpb25cbiAgLy8gQVBQT1JUSU9OLiBBZnRlciBzcGFjaW5nIG91dCB0aGUgY2hpbGRyZW4gYnkgY2FsbGluZyBFWEVDVVRFIFNISUZUUywgdGhlXG4gIC8vIG5vZGUgdiBpcyBwbGFjZWQgdG8gdGhlIG1pZHBvaW50IG9mIGl0cyBvdXRlcm1vc3QgY2hpbGRyZW4uXG4gIGZ1bmN0aW9uIGZpcnN0V2Fsayh2KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbixcbiAgICAgICAgc2libGluZ3MgPSB2LnBhcmVudC5jaGlsZHJlbixcbiAgICAgICAgdyA9IHYuaSA/IHNpYmxpbmdzW3YuaSAtIDFdIDogbnVsbDtcbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIGV4ZWN1dGVTaGlmdHModik7XG4gICAgICB2YXIgbWlkcG9pbnQgPSAoY2hpbGRyZW5bMF0ueiArIGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLnopIC8gMjtcbiAgICAgIGlmICh3KSB7XG4gICAgICAgIHYueiA9IHcueiArIHNlcGFyYXRpb24odi5fLCB3Ll8pO1xuICAgICAgICB2Lm0gPSB2LnogLSBtaWRwb2ludDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHYueiA9IG1pZHBvaW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodykge1xuICAgICAgdi56ID0gdy56ICsgc2VwYXJhdGlvbih2Ll8sIHcuXyk7XG4gICAgfVxuICAgIHYucGFyZW50LkEgPSBhcHBvcnRpb24odiwgdywgdi5wYXJlbnQuQSB8fCBzaWJsaW5nc1swXSk7XG4gIH1cblxuICAvLyBDb21wdXRlcyBhbGwgcmVhbCB4LWNvb3JkaW5hdGVzIGJ5IHN1bW1pbmcgdXAgdGhlIG1vZGlmaWVycyByZWN1cnNpdmVseS5cbiAgZnVuY3Rpb24gc2Vjb25kV2Fsayh2KSB7XG4gICAgdi5fLnggPSB2LnogKyB2LnBhcmVudC5tO1xuICAgIHYubSArPSB2LnBhcmVudC5tO1xuICB9XG5cbiAgLy8gVGhlIGNvcmUgb2YgdGhlIGFsZ29yaXRobS4gSGVyZSwgYSBuZXcgc3VidHJlZSBpcyBjb21iaW5lZCB3aXRoIHRoZVxuICAvLyBwcmV2aW91cyBzdWJ0cmVlcy4gVGhyZWFkcyBhcmUgdXNlZCB0byB0cmF2ZXJzZSB0aGUgaW5zaWRlIGFuZCBvdXRzaWRlXG4gIC8vIGNvbnRvdXJzIG9mIHRoZSBsZWZ0IGFuZCByaWdodCBzdWJ0cmVlIHVwIHRvIHRoZSBoaWdoZXN0IGNvbW1vbiBsZXZlbC4gVGhlXG4gIC8vIHZlcnRpY2VzIHVzZWQgZm9yIHRoZSB0cmF2ZXJzYWxzIGFyZSB2aSssIHZpLSwgdm8tLCBhbmQgdm8rLCB3aGVyZSB0aGVcbiAgLy8gc3VwZXJzY3JpcHQgbyBtZWFucyBvdXRzaWRlIGFuZCBpIG1lYW5zIGluc2lkZSwgdGhlIHN1YnNjcmlwdCAtIG1lYW5zIGxlZnRcbiAgLy8gc3VidHJlZSBhbmQgKyBtZWFucyByaWdodCBzdWJ0cmVlLiBGb3Igc3VtbWluZyB1cCB0aGUgbW9kaWZpZXJzIGFsb25nIHRoZVxuICAvLyBjb250b3VyLCB3ZSB1c2UgcmVzcGVjdGl2ZSB2YXJpYWJsZXMgc2krLCBzaS0sIHNvLSwgYW5kIHNvKy4gV2hlbmV2ZXIgdHdvXG4gIC8vIG5vZGVzIG9mIHRoZSBpbnNpZGUgY29udG91cnMgY29uZmxpY3QsIHdlIGNvbXB1dGUgdGhlIGxlZnQgb25lIG9mIHRoZVxuICAvLyBncmVhdGVzdCB1bmNvbW1vbiBhbmNlc3RvcnMgdXNpbmcgdGhlIGZ1bmN0aW9uIEFOQ0VTVE9SIGFuZCBjYWxsIE1PVkVcbiAgLy8gU1VCVFJFRSB0byBzaGlmdCB0aGUgc3VidHJlZSBhbmQgcHJlcGFyZSB0aGUgc2hpZnRzIG9mIHNtYWxsZXIgc3VidHJlZXMuXG4gIC8vIEZpbmFsbHksIHdlIGFkZCBhIG5ldyB0aHJlYWQgKGlmIG5lY2Vzc2FyeSkuXG4gIGZ1bmN0aW9uIGFwcG9ydGlvbih2LCB3LCBhbmNlc3Rvcikge1xuICAgIGlmICh3KSB7XG4gICAgICB2YXIgdmlwID0gdixcbiAgICAgICAgICB2b3AgPSB2LFxuICAgICAgICAgIHZpbSA9IHcsXG4gICAgICAgICAgdm9tID0gdmlwLnBhcmVudC5jaGlsZHJlblswXSxcbiAgICAgICAgICBzaXAgPSB2aXAubSxcbiAgICAgICAgICBzb3AgPSB2b3AubSxcbiAgICAgICAgICBzaW0gPSB2aW0ubSxcbiAgICAgICAgICBzb20gPSB2b20ubSxcbiAgICAgICAgICBzaGlmdDtcbiAgICAgIHdoaWxlICh2aW0gPSBuZXh0UmlnaHQodmltKSwgdmlwID0gbmV4dExlZnQodmlwKSwgdmltICYmIHZpcCkge1xuICAgICAgICB2b20gPSBuZXh0TGVmdCh2b20pO1xuICAgICAgICB2b3AgPSBuZXh0UmlnaHQodm9wKTtcbiAgICAgICAgdm9wLmEgPSB2O1xuICAgICAgICBzaGlmdCA9IHZpbS56ICsgc2ltIC0gdmlwLnogLSBzaXAgKyBzZXBhcmF0aW9uKHZpbS5fLCB2aXAuXyk7XG4gICAgICAgIGlmIChzaGlmdCA+IDApIHtcbiAgICAgICAgICBtb3ZlU3VidHJlZShuZXh0QW5jZXN0b3IodmltLCB2LCBhbmNlc3RvciksIHYsIHNoaWZ0KTtcbiAgICAgICAgICBzaXAgKz0gc2hpZnQ7XG4gICAgICAgICAgc29wICs9IHNoaWZ0O1xuICAgICAgICB9XG4gICAgICAgIHNpbSArPSB2aW0ubTtcbiAgICAgICAgc2lwICs9IHZpcC5tO1xuICAgICAgICBzb20gKz0gdm9tLm07XG4gICAgICAgIHNvcCArPSB2b3AubTtcbiAgICAgIH1cbiAgICAgIGlmICh2aW0gJiYgIW5leHRSaWdodCh2b3ApKSB7XG4gICAgICAgIHZvcC50ID0gdmltO1xuICAgICAgICB2b3AubSArPSBzaW0gLSBzb3A7XG4gICAgICB9XG4gICAgICBpZiAodmlwICYmICFuZXh0TGVmdCh2b20pKSB7XG4gICAgICAgIHZvbS50ID0gdmlwO1xuICAgICAgICB2b20ubSArPSBzaXAgLSBzb207XG4gICAgICAgIGFuY2VzdG9yID0gdjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFuY2VzdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gc2l6ZU5vZGUobm9kZSkge1xuICAgIG5vZGUueCAqPSBkeDtcbiAgICBub2RlLnkgPSBub2RlLmRlcHRoICogZHk7XG4gIH1cblxuICB0cmVlLnNlcGFyYXRpb24gPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2VwYXJhdGlvbiA9IHgsIHRyZWUpIDogc2VwYXJhdGlvbjtcbiAgfTtcblxuICB0cmVlLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSBmYWxzZSwgZHggPSAreFswXSwgZHkgPSAreFsxXSwgdHJlZSkgOiAobm9kZVNpemUgPyBudWxsIDogW2R4LCBkeV0pO1xuICB9O1xuXG4gIHRyZWUubm9kZVNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSB0cnVlLCBkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCB0cmVlKSA6IChub2RlU2l6ZSA/IFtkeCwgZHldIDogbnVsbCk7XG4gIH07XG5cbiAgcmV0dXJuIHRyZWU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgIG5vZGUsXG4gICAgICBpID0gLTEsXG4gICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgayA9IHBhcmVudC52YWx1ZSAmJiAoeTEgLSB5MCkgLyBwYXJlbnQudmFsdWU7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUueDAgPSB4MCwgbm9kZS54MSA9IHgxO1xuICAgIG5vZGUueTAgPSB5MCwgbm9kZS55MSA9IHkwICs9IG5vZGUudmFsdWUgKiBrO1xuICB9XG59XG4iLCJpbXBvcnQgdHJlZW1hcERpY2UgZnJvbSBcIi4vZGljZS5qc1wiO1xuaW1wb3J0IHRyZWVtYXBTbGljZSBmcm9tIFwiLi9zbGljZS5qc1wiO1xuXG5leHBvcnQgdmFyIHBoaSA9ICgxICsgTWF0aC5zcXJ0KDUpKSAvIDI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciByb3dzID0gW10sXG4gICAgICBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgIHJvdyxcbiAgICAgIG5vZGVWYWx1ZSxcbiAgICAgIGkwID0gMCxcbiAgICAgIGkxID0gMCxcbiAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICBkeCwgZHksXG4gICAgICB2YWx1ZSA9IHBhcmVudC52YWx1ZSxcbiAgICAgIHN1bVZhbHVlLFxuICAgICAgbWluVmFsdWUsXG4gICAgICBtYXhWYWx1ZSxcbiAgICAgIG5ld1JhdGlvLFxuICAgICAgbWluUmF0aW8sXG4gICAgICBhbHBoYSxcbiAgICAgIGJldGE7XG5cbiAgd2hpbGUgKGkwIDwgbikge1xuICAgIGR4ID0geDEgLSB4MCwgZHkgPSB5MSAtIHkwO1xuXG4gICAgLy8gRmluZCB0aGUgbmV4dCBub24tZW1wdHkgbm9kZS5cbiAgICBkbyBzdW1WYWx1ZSA9IG5vZGVzW2kxKytdLnZhbHVlOyB3aGlsZSAoIXN1bVZhbHVlICYmIGkxIDwgbik7XG4gICAgbWluVmFsdWUgPSBtYXhWYWx1ZSA9IHN1bVZhbHVlO1xuICAgIGFscGhhID0gTWF0aC5tYXgoZHkgLyBkeCwgZHggLyBkeSkgLyAodmFsdWUgKiByYXRpbyk7XG4gICAgYmV0YSA9IHN1bVZhbHVlICogc3VtVmFsdWUgKiBhbHBoYTtcbiAgICBtaW5SYXRpbyA9IE1hdGgubWF4KG1heFZhbHVlIC8gYmV0YSwgYmV0YSAvIG1pblZhbHVlKTtcblxuICAgIC8vIEtlZXAgYWRkaW5nIG5vZGVzIHdoaWxlIHRoZSBhc3BlY3QgcmF0aW8gbWFpbnRhaW5zIG9yIGltcHJvdmVzLlxuICAgIGZvciAoOyBpMSA8IG47ICsraTEpIHtcbiAgICAgIHN1bVZhbHVlICs9IG5vZGVWYWx1ZSA9IG5vZGVzW2kxXS52YWx1ZTtcbiAgICAgIGlmIChub2RlVmFsdWUgPCBtaW5WYWx1ZSkgbWluVmFsdWUgPSBub2RlVmFsdWU7XG4gICAgICBpZiAobm9kZVZhbHVlID4gbWF4VmFsdWUpIG1heFZhbHVlID0gbm9kZVZhbHVlO1xuICAgICAgYmV0YSA9IHN1bVZhbHVlICogc3VtVmFsdWUgKiBhbHBoYTtcbiAgICAgIG5ld1JhdGlvID0gTWF0aC5tYXgobWF4VmFsdWUgLyBiZXRhLCBiZXRhIC8gbWluVmFsdWUpO1xuICAgICAgaWYgKG5ld1JhdGlvID4gbWluUmF0aW8pIHsgc3VtVmFsdWUgLT0gbm9kZVZhbHVlOyBicmVhazsgfVxuICAgICAgbWluUmF0aW8gPSBuZXdSYXRpbztcbiAgICB9XG5cbiAgICAvLyBQb3NpdGlvbiBhbmQgcmVjb3JkIHRoZSByb3cgb3JpZW50YXRpb24uXG4gICAgcm93cy5wdXNoKHJvdyA9IHt2YWx1ZTogc3VtVmFsdWUsIGRpY2U6IGR4IDwgZHksIGNoaWxkcmVuOiBub2Rlcy5zbGljZShpMCwgaTEpfSk7XG4gICAgaWYgKHJvdy5kaWNlKSB0cmVlbWFwRGljZShyb3csIHgwLCB5MCwgeDEsIHZhbHVlID8geTAgKz0gZHkgKiBzdW1WYWx1ZSAvIHZhbHVlIDogeTEpO1xuICAgIGVsc2UgdHJlZW1hcFNsaWNlKHJvdywgeDAsIHkwLCB2YWx1ZSA/IHgwICs9IGR4ICogc3VtVmFsdWUgLyB2YWx1ZSA6IHgxLCB5MSk7XG4gICAgdmFsdWUgLT0gc3VtVmFsdWUsIGkwID0gaTE7XG4gIH1cblxuICByZXR1cm4gcm93cztcbn1cblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShyYXRpbykge1xuXG4gIGZ1bmN0aW9uIHNxdWFyaWZ5KHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKTtcbiAgfVxuXG4gIHNxdWFyaWZ5LnJhdGlvID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBjdXN0b20oKHggPSAreCkgPiAxID8geCA6IDEpO1xuICB9O1xuXG4gIHJldHVybiBzcXVhcmlmeTtcbn0pKHBoaSk7XG4iLCJpbXBvcnQgcm91bmROb2RlIGZyb20gXCIuL3JvdW5kLmpzXCI7XG5pbXBvcnQgc3F1YXJpZnkgZnJvbSBcIi4vc3F1YXJpZnkuanNcIjtcbmltcG9ydCB7cmVxdWlyZWR9IGZyb20gXCIuLi9hY2Nlc3NvcnMuanNcIjtcbmltcG9ydCBjb25zdGFudCwge2NvbnN0YW50WmVyb30gZnJvbSBcIi4uL2NvbnN0YW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgdGlsZSA9IHNxdWFyaWZ5LFxuICAgICAgcm91bmQgPSBmYWxzZSxcbiAgICAgIGR4ID0gMSxcbiAgICAgIGR5ID0gMSxcbiAgICAgIHBhZGRpbmdTdGFjayA9IFswXSxcbiAgICAgIHBhZGRpbmdJbm5lciA9IGNvbnN0YW50WmVybyxcbiAgICAgIHBhZGRpbmdUb3AgPSBjb25zdGFudFplcm8sXG4gICAgICBwYWRkaW5nUmlnaHQgPSBjb25zdGFudFplcm8sXG4gICAgICBwYWRkaW5nQm90dG9tID0gY29uc3RhbnRaZXJvLFxuICAgICAgcGFkZGluZ0xlZnQgPSBjb25zdGFudFplcm87XG5cbiAgZnVuY3Rpb24gdHJlZW1hcChyb290KSB7XG4gICAgcm9vdC54MCA9XG4gICAgcm9vdC55MCA9IDA7XG4gICAgcm9vdC54MSA9IGR4O1xuICAgIHJvb3QueTEgPSBkeTtcbiAgICByb290LmVhY2hCZWZvcmUocG9zaXRpb25Ob2RlKTtcbiAgICBwYWRkaW5nU3RhY2sgPSBbMF07XG4gICAgaWYgKHJvdW5kKSByb290LmVhY2hCZWZvcmUocm91bmROb2RlKTtcbiAgICByZXR1cm4gcm9vdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvc2l0aW9uTm9kZShub2RlKSB7XG4gICAgdmFyIHAgPSBwYWRkaW5nU3RhY2tbbm9kZS5kZXB0aF0sXG4gICAgICAgIHgwID0gbm9kZS54MCArIHAsXG4gICAgICAgIHkwID0gbm9kZS55MCArIHAsXG4gICAgICAgIHgxID0gbm9kZS54MSAtIHAsXG4gICAgICAgIHkxID0gbm9kZS55MSAtIHA7XG4gICAgaWYgKHgxIDwgeDApIHgwID0geDEgPSAoeDAgKyB4MSkgLyAyO1xuICAgIGlmICh5MSA8IHkwKSB5MCA9IHkxID0gKHkwICsgeTEpIC8gMjtcbiAgICBub2RlLngwID0geDA7XG4gICAgbm9kZS55MCA9IHkwO1xuICAgIG5vZGUueDEgPSB4MTtcbiAgICBub2RlLnkxID0geTE7XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIHAgPSBwYWRkaW5nU3RhY2tbbm9kZS5kZXB0aCArIDFdID0gcGFkZGluZ0lubmVyKG5vZGUpIC8gMjtcbiAgICAgIHgwICs9IHBhZGRpbmdMZWZ0KG5vZGUpIC0gcDtcbiAgICAgIHkwICs9IHBhZGRpbmdUb3Aobm9kZSkgLSBwO1xuICAgICAgeDEgLT0gcGFkZGluZ1JpZ2h0KG5vZGUpIC0gcDtcbiAgICAgIHkxIC09IHBhZGRpbmdCb3R0b20obm9kZSkgLSBwO1xuICAgICAgaWYgKHgxIDwgeDApIHgwID0geDEgPSAoeDAgKyB4MSkgLyAyO1xuICAgICAgaWYgKHkxIDwgeTApIHkwID0geTEgPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgdGlsZShub2RlLCB4MCwgeTAsIHgxLCB5MSk7XG4gICAgfVxuICB9XG5cbiAgdHJlZW1hcC5yb3VuZCA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEheCwgdHJlZW1hcCkgOiByb3VuZDtcbiAgfTtcblxuICB0cmVlbWFwLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHggPSAreFswXSwgZHkgPSAreFsxXSwgdHJlZW1hcCkgOiBbZHgsIGR5XTtcbiAgfTtcblxuICB0cmVlbWFwLnRpbGUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlsZSA9IHJlcXVpcmVkKHgpLCB0cmVlbWFwKSA6IHRpbGU7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdHJlZW1hcC5wYWRkaW5nSW5uZXIoeCkucGFkZGluZ091dGVyKHgpIDogdHJlZW1hcC5wYWRkaW5nSW5uZXIoKTtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdJbm5lciA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nT3V0ZXIgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0cmVlbWFwLnBhZGRpbmdUb3AoeCkucGFkZGluZ1JpZ2h0KHgpLnBhZGRpbmdCb3R0b20oeCkucGFkZGluZ0xlZnQoeCkgOiB0cmVlbWFwLnBhZGRpbmdUb3AoKTtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdUb3AgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ1RvcCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdUb3A7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nUmlnaHQgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ1JpZ2h0ID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCgreCksIHRyZWVtYXApIDogcGFkZGluZ1JpZ2h0O1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZ0JvdHRvbSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nQm90dG9tID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCgreCksIHRyZWVtYXApIDogcGFkZGluZ0JvdHRvbTtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdMZWZ0ID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdMZWZ0ID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCgreCksIHRyZWVtYXApIDogcGFkZGluZ0xlZnQ7XG4gIH07XG5cbiAgcmV0dXJuIHRyZWVtYXA7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgIGksIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICBzdW0sIHN1bXMgPSBuZXcgQXJyYXkobiArIDEpO1xuXG4gIGZvciAoc3Vtc1swXSA9IHN1bSA9IGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgc3Vtc1tpICsgMV0gPSBzdW0gKz0gbm9kZXNbaV0udmFsdWU7XG4gIH1cblxuICBwYXJ0aXRpb24oMCwgbiwgcGFyZW50LnZhbHVlLCB4MCwgeTAsIHgxLCB5MSk7XG5cbiAgZnVuY3Rpb24gcGFydGl0aW9uKGksIGosIHZhbHVlLCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIGlmIChpID49IGogLSAxKSB7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgbm9kZS54MCA9IHgwLCBub2RlLnkwID0geTA7XG4gICAgICBub2RlLngxID0geDEsIG5vZGUueTEgPSB5MTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWVPZmZzZXQgPSBzdW1zW2ldLFxuICAgICAgICB2YWx1ZVRhcmdldCA9ICh2YWx1ZSAvIDIpICsgdmFsdWVPZmZzZXQsXG4gICAgICAgIGsgPSBpICsgMSxcbiAgICAgICAgaGkgPSBqIC0gMTtcblxuICAgIHdoaWxlIChrIDwgaGkpIHtcbiAgICAgIHZhciBtaWQgPSBrICsgaGkgPj4+IDE7XG4gICAgICBpZiAoc3Vtc1ttaWRdIDwgdmFsdWVUYXJnZXQpIGsgPSBtaWQgKyAxO1xuICAgICAgZWxzZSBoaSA9IG1pZDtcbiAgICB9XG5cbiAgICBpZiAoKHZhbHVlVGFyZ2V0IC0gc3Vtc1trIC0gMV0pIDwgKHN1bXNba10gLSB2YWx1ZVRhcmdldCkgJiYgaSArIDEgPCBrKSAtLWs7XG5cbiAgICB2YXIgdmFsdWVMZWZ0ID0gc3Vtc1trXSAtIHZhbHVlT2Zmc2V0LFxuICAgICAgICB2YWx1ZVJpZ2h0ID0gdmFsdWUgLSB2YWx1ZUxlZnQ7XG5cbiAgICBpZiAoKHgxIC0geDApID4gKHkxIC0geTApKSB7XG4gICAgICB2YXIgeGsgPSB2YWx1ZSA/ICh4MCAqIHZhbHVlUmlnaHQgKyB4MSAqIHZhbHVlTGVmdCkgLyB2YWx1ZSA6IHgxO1xuICAgICAgcGFydGl0aW9uKGksIGssIHZhbHVlTGVmdCwgeDAsIHkwLCB4aywgeTEpO1xuICAgICAgcGFydGl0aW9uKGssIGosIHZhbHVlUmlnaHQsIHhrLCB5MCwgeDEsIHkxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHlrID0gdmFsdWUgPyAoeTAgKiB2YWx1ZVJpZ2h0ICsgeTEgKiB2YWx1ZUxlZnQpIC8gdmFsdWUgOiB5MTtcbiAgICAgIHBhcnRpdGlvbihpLCBrLCB2YWx1ZUxlZnQsIHgwLCB5MCwgeDEsIHlrKTtcbiAgICAgIHBhcnRpdGlvbihrLCBqLCB2YWx1ZVJpZ2h0LCB4MCwgeWssIHgxLCB5MSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgZGljZSBmcm9tIFwiLi9kaWNlLmpzXCI7XG5pbXBvcnQgc2xpY2UgZnJvbSBcIi4vc2xpY2UuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICAocGFyZW50LmRlcHRoICYgMSA/IHNsaWNlIDogZGljZSkocGFyZW50LCB4MCwgeTAsIHgxLCB5MSk7XG59XG4iLCJpbXBvcnQgdHJlZW1hcERpY2UgZnJvbSBcIi4vZGljZS5qc1wiO1xuaW1wb3J0IHRyZWVtYXBTbGljZSBmcm9tIFwiLi9zbGljZS5qc1wiO1xuaW1wb3J0IHtwaGksIHNxdWFyaWZ5UmF0aW99IGZyb20gXCIuL3NxdWFyaWZ5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20ocmF0aW8pIHtcblxuICBmdW5jdGlvbiByZXNxdWFyaWZ5KHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICBpZiAoKHJvd3MgPSBwYXJlbnQuX3NxdWFyaWZ5KSAmJiAocm93cy5yYXRpbyA9PT0gcmF0aW8pKSB7XG4gICAgICB2YXIgcm93cyxcbiAgICAgICAgICByb3csXG4gICAgICAgICAgbm9kZXMsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBqID0gLTEsXG4gICAgICAgICAgbixcbiAgICAgICAgICBtID0gcm93cy5sZW5ndGgsXG4gICAgICAgICAgdmFsdWUgPSBwYXJlbnQudmFsdWU7XG5cbiAgICAgIHdoaWxlICgrK2ogPCBtKSB7XG4gICAgICAgIHJvdyA9IHJvd3Nbal0sIG5vZGVzID0gcm93LmNoaWxkcmVuO1xuICAgICAgICBmb3IgKGkgPSByb3cudmFsdWUgPSAwLCBuID0gbm9kZXMubGVuZ3RoOyBpIDwgbjsgKytpKSByb3cudmFsdWUgKz0gbm9kZXNbaV0udmFsdWU7XG4gICAgICAgIGlmIChyb3cuZGljZSkgdHJlZW1hcERpY2Uocm93LCB4MCwgeTAsIHgxLCB2YWx1ZSA/IHkwICs9ICh5MSAtIHkwKSAqIHJvdy52YWx1ZSAvIHZhbHVlIDogeTEpO1xuICAgICAgICBlbHNlIHRyZWVtYXBTbGljZShyb3csIHgwLCB5MCwgdmFsdWUgPyB4MCArPSAoeDEgLSB4MCkgKiByb3cudmFsdWUgLyB2YWx1ZSA6IHgxLCB5MSk7XG4gICAgICAgIHZhbHVlIC09IHJvdy52YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50Ll9zcXVhcmlmeSA9IHJvd3MgPSBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKTtcbiAgICAgIHJvd3MucmF0aW8gPSByYXRpbztcbiAgICB9XG4gIH1cblxuICByZXNxdWFyaWZ5LnJhdGlvID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBjdXN0b20oKHggPSAreCkgPiAxID8geCA6IDEpO1xuICB9O1xuXG4gIHJldHVybiByZXNxdWFyaWZ5O1xufSkocGhpKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJhbmdlKSB7XG4gIHZhciBuID0gcmFuZ2UubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiByYW5nZVtNYXRoLm1heCgwLCBNYXRoLm1pbihuIC0gMSwgTWF0aC5mbG9vcih0ICogbikpKV07XG4gIH07XG59XG4iLCJpbXBvcnQge2h1ZX0gZnJvbSBcIi4vY29sb3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgaSA9IGh1ZSgrYSwgK2IpO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciB4ID0gaSh0KTtcbiAgICByZXR1cm4geCAtIDM2MCAqIE1hdGguZmxvb3IoeCAvIDM2MCk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgPSArYiwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKGEgKiAoMSAtIHQpICsgYiAqIHQpO1xuICB9O1xufVxuIiwidmFyIGVwc2lsb24yID0gMWUtMTI7XG5cbmZ1bmN0aW9uIGNvc2goeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpICsgMSAvIHgpIC8gMjtcbn1cblxuZnVuY3Rpb24gc2luaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgLSAxIC8geCkgLyAyO1xufVxuXG5mdW5jdGlvbiB0YW5oKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKDIgKiB4KSkgLSAxKSAvICh4ICsgMSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiB6b29tUmhvKHJobywgcmhvMiwgcmhvNCkge1xuXG4gIC8vIHAwID0gW3V4MCwgdXkwLCB3MF1cbiAgLy8gcDEgPSBbdXgxLCB1eTEsIHcxXVxuICBmdW5jdGlvbiB6b29tKHAwLCBwMSkge1xuICAgIHZhciB1eDAgPSBwMFswXSwgdXkwID0gcDBbMV0sIHcwID0gcDBbMl0sXG4gICAgICAgIHV4MSA9IHAxWzBdLCB1eTEgPSBwMVsxXSwgdzEgPSBwMVsyXSxcbiAgICAgICAgZHggPSB1eDEgLSB1eDAsXG4gICAgICAgIGR5ID0gdXkxIC0gdXkwLFxuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5LFxuICAgICAgICBpLFxuICAgICAgICBTO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciB1MCDiiYUgdTEuXG4gICAgaWYgKGQyIDwgZXBzaWxvbjIpIHtcbiAgICAgIFMgPSBNYXRoLmxvZyh3MSAvIHcwKSAvIHJobztcbiAgICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgdXgwICsgdCAqIGR4LFxuICAgICAgICAgIHV5MCArIHQgKiBkeSxcbiAgICAgICAgICB3MCAqIE1hdGguZXhwKHJobyAqIHQgKiBTKVxuICAgICAgICBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdlbmVyYWwgY2FzZS5cbiAgICBlbHNlIHtcbiAgICAgIHZhciBkMSA9IE1hdGguc3FydChkMiksXG4gICAgICAgICAgYjAgPSAodzEgKiB3MSAtIHcwICogdzAgKyByaG80ICogZDIpIC8gKDIgKiB3MCAqIHJobzIgKiBkMSksXG4gICAgICAgICAgYjEgPSAodzEgKiB3MSAtIHcwICogdzAgLSByaG80ICogZDIpIC8gKDIgKiB3MSAqIHJobzIgKiBkMSksXG4gICAgICAgICAgcjAgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjAgKiBiMCArIDEpIC0gYjApLFxuICAgICAgICAgIHIxID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIxICogYjEgKyAxKSAtIGIxKTtcbiAgICAgIFMgPSAocjEgLSByMCkgLyByaG87XG4gICAgICBpID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgcyA9IHQgKiBTLFxuICAgICAgICAgICAgY29zaHIwID0gY29zaChyMCksXG4gICAgICAgICAgICB1ID0gdzAgLyAocmhvMiAqIGQxKSAqIChjb3NocjAgKiB0YW5oKHJobyAqIHMgKyByMCkgLSBzaW5oKHIwKSk7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgdXgwICsgdSAqIGR4LFxuICAgICAgICAgIHV5MCArIHUgKiBkeSxcbiAgICAgICAgICB3MCAqIGNvc2hyMCAvIGNvc2gocmhvICogcyArIHIwKVxuICAgICAgICBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGkuZHVyYXRpb24gPSBTICogMTAwMCAqIHJobyAvIE1hdGguU1FSVDI7XG5cbiAgICByZXR1cm4gaTtcbiAgfVxuXG4gIHpvb20ucmhvID0gZnVuY3Rpb24oXykge1xuICAgIHZhciBfMSA9IE1hdGgubWF4KDFlLTMsICtfKSwgXzIgPSBfMSAqIF8xLCBfNCA9IF8yICogXzI7XG4gICAgcmV0dXJuIHpvb21SaG8oXzEsIF8yLCBfNCk7XG4gIH07XG5cbiAgcmV0dXJuIHpvb207XG59KShNYXRoLlNRUlQyLCAyLCA0KTtcbiIsImltcG9ydCB7aHNsIGFzIGNvbG9ySHNsfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciwge2h1ZX0gZnJvbSBcIi4vY29sb3IuanNcIjtcblxuZnVuY3Rpb24gaHNsKGh1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHZhciBoID0gaHVlKChzdGFydCA9IGNvbG9ySHNsKHN0YXJ0KSkuaCwgKGVuZCA9IGNvbG9ySHNsKGVuZCkpLmgpLFxuICAgICAgICBzID0gY29sb3Ioc3RhcnQucywgZW5kLnMpLFxuICAgICAgICBsID0gY29sb3Ioc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICBvcGFjaXR5ID0gY29sb3Ioc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgIHN0YXJ0LnMgPSBzKHQpO1xuICAgICAgc3RhcnQubCA9IGwodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBoc2woaHVlKTtcbmV4cG9ydCB2YXIgaHNsTG9uZyA9IGhzbChjb2xvcik7XG4iLCJpbXBvcnQge2xhYiBhcyBjb2xvckxhYn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgY29sb3IgZnJvbSBcIi4vY29sb3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGFiKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGwgPSBjb2xvcigoc3RhcnQgPSBjb2xvckxhYihzdGFydCkpLmwsIChlbmQgPSBjb2xvckxhYihlbmQpKS5sKSxcbiAgICAgIGEgPSBjb2xvcihzdGFydC5hLCBlbmQuYSksXG4gICAgICBiID0gY29sb3Ioc3RhcnQuYiwgZW5kLmIpLFxuICAgICAgb3BhY2l0eSA9IGNvbG9yKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBzdGFydC5sID0gbCh0KTtcbiAgICBzdGFydC5hID0gYSh0KTtcbiAgICBzdGFydC5iID0gYih0KTtcbiAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICB9O1xufVxuIiwiaW1wb3J0IHtoY2wgYXMgY29sb3JIY2x9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGNvbG9yLCB7aHVlfSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuXG5mdW5jdGlvbiBoY2woaHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gY29sb3JIY2woc3RhcnQpKS5oLCAoZW5kID0gY29sb3JIY2woZW5kKSkuaCksXG4gICAgICAgIGMgPSBjb2xvcihzdGFydC5jLCBlbmQuYyksXG4gICAgICAgIGwgPSBjb2xvcihzdGFydC5sLCBlbmQubCksXG4gICAgICAgIG9wYWNpdHkgPSBjb2xvcihzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgc3RhcnQuYyA9IGModCk7XG4gICAgICBzdGFydC5sID0gbCh0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhjbChodWUpO1xuZXhwb3J0IHZhciBoY2xMb25nID0gaGNsKGNvbG9yKTtcbiIsImltcG9ydCB7Y3ViZWhlbGl4IGFzIGNvbG9yQ3ViZWhlbGl4fSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciwge2h1ZX0gZnJvbSBcIi4vY29sb3IuanNcIjtcblxuZnVuY3Rpb24gY3ViZWhlbGl4KGh1ZSkge1xuICByZXR1cm4gKGZ1bmN0aW9uIGN1YmVoZWxpeEdhbW1hKHkpIHtcbiAgICB5ID0gK3k7XG5cbiAgICBmdW5jdGlvbiBjdWJlaGVsaXgoc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gY29sb3JDdWJlaGVsaXgoc3RhcnQpKS5oLCAoZW5kID0gY29sb3JDdWJlaGVsaXgoZW5kKSkuaCksXG4gICAgICAgICAgcyA9IGNvbG9yKHN0YXJ0LnMsIGVuZC5zKSxcbiAgICAgICAgICBsID0gY29sb3Ioc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICAgIG9wYWNpdHkgPSBjb2xvcihzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgICAgc3RhcnQucyA9IHModCk7XG4gICAgICAgIHN0YXJ0LmwgPSBsKE1hdGgucG93KHQsIHkpKTtcbiAgICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGN1YmVoZWxpeC5nYW1tYSA9IGN1YmVoZWxpeEdhbW1hO1xuXG4gICAgcmV0dXJuIGN1YmVoZWxpeDtcbiAgfSkoMSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGN1YmVoZWxpeChodWUpO1xuZXhwb3J0IHZhciBjdWJlaGVsaXhMb25nID0gY3ViZWhlbGl4KGNvbG9yKTtcbiIsImltcG9ydCB7ZGVmYXVsdCBhcyB2YWx1ZX0gZnJvbSBcIi4vdmFsdWUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGllY2V3aXNlKGludGVycG9sYXRlLCB2YWx1ZXMpIHtcbiAgaWYgKHZhbHVlcyA9PT0gdW5kZWZpbmVkKSB2YWx1ZXMgPSBpbnRlcnBvbGF0ZSwgaW50ZXJwb2xhdGUgPSB2YWx1ZTtcbiAgdmFyIGkgPSAwLCBuID0gdmFsdWVzLmxlbmd0aCAtIDEsIHYgPSB2YWx1ZXNbMF0sIEkgPSBuZXcgQXJyYXkobiA8IDAgPyAwIDogbik7XG4gIHdoaWxlIChpIDwgbikgSVtpXSA9IGludGVycG9sYXRlKHYsIHYgPSB2YWx1ZXNbKytpXSk7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihuIC0gMSwgTWF0aC5mbG9vcih0ICo9IG4pKSk7XG4gICAgcmV0dXJuIElbaV0odCAtIGkpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW50ZXJwb2xhdG9yLCBuKSB7XG4gIHZhciBzYW1wbGVzID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkgc2FtcGxlc1tpXSA9IGludGVycG9sYXRvcihpIC8gKG4gLSAxKSk7XG4gIHJldHVybiBzYW1wbGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocG9seWdvbikge1xuICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IHBvbHlnb24ubGVuZ3RoLFxuICAgICAgYSxcbiAgICAgIGIgPSBwb2x5Z29uW24gLSAxXSxcbiAgICAgIGFyZWEgPSAwO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgYSA9IGI7XG4gICAgYiA9IHBvbHlnb25baV07XG4gICAgYXJlYSArPSBhWzFdICogYlswXSAtIGFbMF0gKiBiWzFdO1xuICB9XG5cbiAgcmV0dXJuIGFyZWEgLyAyO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocG9seWdvbikge1xuICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IHBvbHlnb24ubGVuZ3RoLFxuICAgICAgeCA9IDAsXG4gICAgICB5ID0gMCxcbiAgICAgIGEsXG4gICAgICBiID0gcG9seWdvbltuIC0gMV0sXG4gICAgICBjLFxuICAgICAgayA9IDA7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBhID0gYjtcbiAgICBiID0gcG9seWdvbltpXTtcbiAgICBrICs9IGMgPSBhWzBdICogYlsxXSAtIGJbMF0gKiBhWzFdO1xuICAgIHggKz0gKGFbMF0gKyBiWzBdKSAqIGM7XG4gICAgeSArPSAoYVsxXSArIGJbMV0pICogYztcbiAgfVxuXG4gIHJldHVybiBrICo9IDMsIFt4IC8gaywgeSAvIGtdO1xufVxuIiwiLy8gUmV0dXJucyB0aGUgMkQgY3Jvc3MgcHJvZHVjdCBvZiBBQiBhbmQgQUMgdmVjdG9ycywgaS5lLiwgdGhlIHotY29tcG9uZW50IG9mXG4vLyB0aGUgM0QgY3Jvc3MgcHJvZHVjdCBpbiBhIHF1YWRyYW50IEkgQ2FydGVzaWFuIGNvb3JkaW5hdGUgc3lzdGVtICgreCBpc1xuLy8gcmlnaHQsICt5IGlzIHVwKS4gUmV0dXJucyBhIHBvc2l0aXZlIHZhbHVlIGlmIEFCQyBpcyBjb3VudGVyLWNsb2Nrd2lzZSxcbi8vIG5lZ2F0aXZlIGlmIGNsb2Nrd2lzZSwgYW5kIHplcm8gaWYgdGhlIHBvaW50cyBhcmUgY29sbGluZWFyLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYiwgYykge1xuICByZXR1cm4gKGJbMF0gLSBhWzBdKSAqIChjWzFdIC0gYVsxXSkgLSAoYlsxXSAtIGFbMV0pICogKGNbMF0gLSBhWzBdKTtcbn1cbiIsImltcG9ydCBjcm9zcyBmcm9tIFwiLi9jcm9zcy5qc1wiO1xuXG5mdW5jdGlvbiBsZXhpY29ncmFwaGljT3JkZXIoYSwgYikge1xuICByZXR1cm4gYVswXSAtIGJbMF0gfHwgYVsxXSAtIGJbMV07XG59XG5cbi8vIENvbXB1dGVzIHRoZSB1cHBlciBjb252ZXggaHVsbCBwZXIgdGhlIG1vbm90b25lIGNoYWluIGFsZ29yaXRobS5cbi8vIEFzc3VtZXMgcG9pbnRzLmxlbmd0aCA+PSAzLCBpcyBzb3J0ZWQgYnkgeCwgdW5pcXVlIGluIHkuXG4vLyBSZXR1cm5zIGFuIGFycmF5IG9mIGluZGljZXMgaW50byBwb2ludHMgaW4gbGVmdC10by1yaWdodCBvcmRlci5cbmZ1bmN0aW9uIGNvbXB1dGVVcHBlckh1bGxJbmRleGVzKHBvaW50cykge1xuICBjb25zdCBuID0gcG9pbnRzLmxlbmd0aCxcbiAgICAgIGluZGV4ZXMgPSBbMCwgMV07XG4gIGxldCBzaXplID0gMiwgaTtcblxuICBmb3IgKGkgPSAyOyBpIDwgbjsgKytpKSB7XG4gICAgd2hpbGUgKHNpemUgPiAxICYmIGNyb3NzKHBvaW50c1tpbmRleGVzW3NpemUgLSAyXV0sIHBvaW50c1tpbmRleGVzW3NpemUgLSAxXV0sIHBvaW50c1tpXSkgPD0gMCkgLS1zaXplO1xuICAgIGluZGV4ZXNbc2l6ZSsrXSA9IGk7XG4gIH1cblxuICByZXR1cm4gaW5kZXhlcy5zbGljZSgwLCBzaXplKTsgLy8gcmVtb3ZlIHBvcHBlZCBwb2ludHNcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocG9pbnRzKSB7XG4gIGlmICgobiA9IHBvaW50cy5sZW5ndGgpIDwgMykgcmV0dXJuIG51bGw7XG5cbiAgdmFyIGksXG4gICAgICBuLFxuICAgICAgc29ydGVkUG9pbnRzID0gbmV3IEFycmF5KG4pLFxuICAgICAgZmxpcHBlZFBvaW50cyA9IG5ldyBBcnJheShuKTtcblxuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBzb3J0ZWRQb2ludHNbaV0gPSBbK3BvaW50c1tpXVswXSwgK3BvaW50c1tpXVsxXSwgaV07XG4gIHNvcnRlZFBvaW50cy5zb3J0KGxleGljb2dyYXBoaWNPcmRlcik7XG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGZsaXBwZWRQb2ludHNbaV0gPSBbc29ydGVkUG9pbnRzW2ldWzBdLCAtc29ydGVkUG9pbnRzW2ldWzFdXTtcblxuICB2YXIgdXBwZXJJbmRleGVzID0gY29tcHV0ZVVwcGVySHVsbEluZGV4ZXMoc29ydGVkUG9pbnRzKSxcbiAgICAgIGxvd2VySW5kZXhlcyA9IGNvbXB1dGVVcHBlckh1bGxJbmRleGVzKGZsaXBwZWRQb2ludHMpO1xuXG4gIC8vIENvbnN0cnVjdCB0aGUgaHVsbCBwb2x5Z29uLCByZW1vdmluZyBwb3NzaWJsZSBkdXBsaWNhdGUgZW5kcG9pbnRzLlxuICB2YXIgc2tpcExlZnQgPSBsb3dlckluZGV4ZXNbMF0gPT09IHVwcGVySW5kZXhlc1swXSxcbiAgICAgIHNraXBSaWdodCA9IGxvd2VySW5kZXhlc1tsb3dlckluZGV4ZXMubGVuZ3RoIC0gMV0gPT09IHVwcGVySW5kZXhlc1t1cHBlckluZGV4ZXMubGVuZ3RoIC0gMV0sXG4gICAgICBodWxsID0gW107XG5cbiAgLy8gQWRkIHVwcGVyIGh1bGwgaW4gcmlnaHQtdG8tbCBvcmRlci5cbiAgLy8gVGhlbiBhZGQgbG93ZXIgaHVsbCBpbiBsZWZ0LXRvLXJpZ2h0IG9yZGVyLlxuICBmb3IgKGkgPSB1cHBlckluZGV4ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIGh1bGwucHVzaChwb2ludHNbc29ydGVkUG9pbnRzW3VwcGVySW5kZXhlc1tpXV1bMl1dKTtcbiAgZm9yIChpID0gK3NraXBMZWZ0OyBpIDwgbG93ZXJJbmRleGVzLmxlbmd0aCAtIHNraXBSaWdodDsgKytpKSBodWxsLnB1c2gocG9pbnRzW3NvcnRlZFBvaW50c1tsb3dlckluZGV4ZXNbaV1dWzJdXSk7XG5cbiAgcmV0dXJuIGh1bGw7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2x5Z29uLCBwb2ludCkge1xuICB2YXIgbiA9IHBvbHlnb24ubGVuZ3RoLFxuICAgICAgcCA9IHBvbHlnb25bbiAtIDFdLFxuICAgICAgeCA9IHBvaW50WzBdLCB5ID0gcG9pbnRbMV0sXG4gICAgICB4MCA9IHBbMF0sIHkwID0gcFsxXSxcbiAgICAgIHgxLCB5MSxcbiAgICAgIGluc2lkZSA9IGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgcCA9IHBvbHlnb25baV0sIHgxID0gcFswXSwgeTEgPSBwWzFdO1xuICAgIGlmICgoKHkxID4geSkgIT09ICh5MCA+IHkpKSAmJiAoeCA8ICh4MCAtIHgxKSAqICh5IC0geTEpIC8gKHkwIC0geTEpICsgeDEpKSBpbnNpZGUgPSAhaW5zaWRlO1xuICAgIHgwID0geDEsIHkwID0geTE7XG4gIH1cblxuICByZXR1cm4gaW5zaWRlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocG9seWdvbikge1xuICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IHBvbHlnb24ubGVuZ3RoLFxuICAgICAgYiA9IHBvbHlnb25bbiAtIDFdLFxuICAgICAgeGEsXG4gICAgICB5YSxcbiAgICAgIHhiID0gYlswXSxcbiAgICAgIHliID0gYlsxXSxcbiAgICAgIHBlcmltZXRlciA9IDA7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICB4YSA9IHhiO1xuICAgIHlhID0geWI7XG4gICAgYiA9IHBvbHlnb25baV07XG4gICAgeGIgPSBiWzBdO1xuICAgIHliID0gYlsxXTtcbiAgICB4YSAtPSB4YjtcbiAgICB5YSAtPSB5YjtcbiAgICBwZXJpbWV0ZXIgKz0gTWF0aC5oeXBvdCh4YSwgeWEpO1xuICB9XG5cbiAgcmV0dXJuIHBlcmltZXRlcjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IE1hdGgucmFuZG9tO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tVW5pZm9ybShzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tVW5pZm9ybShtaW4sIG1heCkge1xuICAgIG1pbiA9IG1pbiA9PSBudWxsID8gMCA6ICttaW47XG4gICAgbWF4ID0gbWF4ID09IG51bGwgPyAxIDogK21heDtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkgbWF4ID0gbWluLCBtaW4gPSAwO1xuICAgIGVsc2UgbWF4IC09IG1pbjtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc291cmNlKCkgKiBtYXggKyBtaW47XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbVVuaWZvcm0uc291cmNlID0gc291cmNlUmFuZG9tVW5pZm9ybTtcblxuICByZXR1cm4gcmFuZG9tVW5pZm9ybTtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tSW50KHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21JbnQobWluLCBtYXgpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIG1heCA9IG1pbiwgbWluID0gMDtcbiAgICBtaW4gPSBNYXRoLmZsb29yKG1pbik7XG4gICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpIC0gbWluO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKHNvdXJjZSgpICogbWF4ICsgbWluKTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tSW50LnNvdXJjZSA9IHNvdXJjZVJhbmRvbUludDtcblxuICByZXR1cm4gcmFuZG9tSW50O1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21Ob3JtYWwoc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbU5vcm1hbChtdSwgc2lnbWEpIHtcbiAgICB2YXIgeCwgcjtcbiAgICBtdSA9IG11ID09IG51bGwgPyAwIDogK211O1xuICAgIHNpZ21hID0gc2lnbWEgPT0gbnVsbCA/IDEgOiArc2lnbWE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHk7XG5cbiAgICAgIC8vIElmIGF2YWlsYWJsZSwgdXNlIHRoZSBzZWNvbmQgcHJldmlvdXNseS1nZW5lcmF0ZWQgdW5pZm9ybSByYW5kb20uXG4gICAgICBpZiAoeCAhPSBudWxsKSB5ID0geCwgeCA9IG51bGw7XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgZ2VuZXJhdGUgYSBuZXcgeCBhbmQgeS5cbiAgICAgIGVsc2UgZG8ge1xuICAgICAgICB4ID0gc291cmNlKCkgKiAyIC0gMTtcbiAgICAgICAgeSA9IHNvdXJjZSgpICogMiAtIDE7XG4gICAgICAgIHIgPSB4ICogeCArIHkgKiB5O1xuICAgICAgfSB3aGlsZSAoIXIgfHwgciA+IDEpO1xuXG4gICAgICByZXR1cm4gbXUgKyBzaWdtYSAqIHkgKiBNYXRoLnNxcnQoLTIgKiBNYXRoLmxvZyhyKSAvIHIpO1xuICAgIH07XG4gIH1cblxuICByYW5kb21Ob3JtYWwuc291cmNlID0gc291cmNlUmFuZG9tTm9ybWFsO1xuXG4gIHJldHVybiByYW5kb21Ob3JtYWw7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2UuanNcIjtcbmltcG9ydCBub3JtYWwgZnJvbSBcIi4vbm9ybWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21Mb2dOb3JtYWwoc291cmNlKSB7XG4gIHZhciBOID0gbm9ybWFsLnNvdXJjZShzb3VyY2UpO1xuXG4gIGZ1bmN0aW9uIHJhbmRvbUxvZ05vcm1hbCgpIHtcbiAgICB2YXIgcmFuZG9tTm9ybWFsID0gTi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBNYXRoLmV4cChyYW5kb21Ob3JtYWwoKSk7XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbUxvZ05vcm1hbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21Mb2dOb3JtYWw7XG5cbiAgcmV0dXJuIHJhbmRvbUxvZ05vcm1hbDtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tSXJ3aW5IYWxsKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21JcndpbkhhbGwobikge1xuICAgIGlmICgobiA9ICtuKSA8PSAwKSByZXR1cm4gKCkgPT4gMDtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBzdW0gPSAwLCBpID0gbjsgaSA+IDE7IC0taSkgc3VtICs9IHNvdXJjZSgpO1xuICAgICAgcmV0dXJuIHN1bSArIGkgKiBzb3VyY2UoKTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tSXJ3aW5IYWxsLnNvdXJjZSA9IHNvdXJjZVJhbmRvbUlyd2luSGFsbDtcblxuICByZXR1cm4gcmFuZG9tSXJ3aW5IYWxsO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlLmpzXCI7XG5pbXBvcnQgaXJ3aW5IYWxsIGZyb20gXCIuL2lyd2luSGFsbC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tQmF0ZXMoc291cmNlKSB7XG4gIHZhciBJID0gaXJ3aW5IYWxsLnNvdXJjZShzb3VyY2UpO1xuXG4gIGZ1bmN0aW9uIHJhbmRvbUJhdGVzKG4pIHtcbiAgICAvLyB1c2UgbGltaXRpbmcgZGlzdHJpYnV0aW9uIGF0IG4gPT09IDBcbiAgICBpZiAoKG4gPSArbikgPT09IDApIHJldHVybiBzb3VyY2U7XG4gICAgdmFyIHJhbmRvbUlyd2luSGFsbCA9IEkobik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJhbmRvbUlyd2luSGFsbCgpIC8gbjtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tQmF0ZXMuc291cmNlID0gc291cmNlUmFuZG9tQmF0ZXM7XG5cbiAgcmV0dXJuIHJhbmRvbUJhdGVzO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21FeHBvbmVudGlhbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tRXhwb25lbnRpYWwobGFtYmRhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIC1NYXRoLmxvZzFwKC1zb3VyY2UoKSkgLyBsYW1iZGE7XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbUV4cG9uZW50aWFsLnNvdXJjZSA9IHNvdXJjZVJhbmRvbUV4cG9uZW50aWFsO1xuXG4gIHJldHVybiByYW5kb21FeHBvbmVudGlhbDtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tUGFyZXRvKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21QYXJldG8oYWxwaGEpIHtcbiAgICBpZiAoKGFscGhhID0gK2FscGhhKSA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKFwiaW52YWxpZCBhbHBoYVwiKTtcbiAgICBhbHBoYSA9IDEgLyAtYWxwaGE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE1hdGgucG93KDEgLSBzb3VyY2UoKSwgYWxwaGEpO1xuICAgIH07XG4gIH1cblxuICByYW5kb21QYXJldG8uc291cmNlID0gc291cmNlUmFuZG9tUGFyZXRvO1xuXG4gIHJldHVybiByYW5kb21QYXJldG87XG59KShkZWZhdWx0U291cmNlKTtcbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2UuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbUJlcm5vdWxsaShzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tQmVybm91bGxpKHApIHtcbiAgICBpZiAoKHAgPSArcCkgPCAwIHx8IHAgPiAxKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcImludmFsaWQgcFwiKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcihzb3VyY2UoKSArIHApO1xuICAgIH07XG4gIH1cblxuICByYW5kb21CZXJub3VsbGkuc291cmNlID0gc291cmNlUmFuZG9tQmVybm91bGxpO1xuXG4gIHJldHVybiByYW5kb21CZXJub3VsbGk7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2UuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbUdlb21ldHJpYyhzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tR2VvbWV0cmljKHApIHtcbiAgICBpZiAoKHAgPSArcCkgPCAwIHx8IHAgPiAxKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcImludmFsaWQgcFwiKTtcbiAgICBpZiAocCA9PT0gMCkgcmV0dXJuICgpID0+IEluZmluaXR5O1xuICAgIGlmIChwID09PSAxKSByZXR1cm4gKCkgPT4gMTtcbiAgICBwID0gTWF0aC5sb2cxcCgtcCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIDEgKyBNYXRoLmZsb29yKE1hdGgubG9nMXAoLXNvdXJjZSgpKSAvIHApO1xuICAgIH07XG4gIH1cblxuICByYW5kb21HZW9tZXRyaWMuc291cmNlID0gc291cmNlUmFuZG9tR2VvbWV0cmljO1xuXG4gIHJldHVybiByYW5kb21HZW9tZXRyaWM7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2UuanNcIjtcbmltcG9ydCBub3JtYWwgZnJvbSBcIi4vbm9ybWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21HYW1tYShzb3VyY2UpIHtcbiAgdmFyIHJhbmRvbU5vcm1hbCA9IG5vcm1hbC5zb3VyY2Uoc291cmNlKSgpO1xuXG4gIGZ1bmN0aW9uIHJhbmRvbUdhbW1hKGssIHRoZXRhKSB7XG4gICAgaWYgKChrID0gK2spIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJpbnZhbGlkIGtcIik7XG4gICAgLy8gZGVnZW5lcmF0ZSBkaXN0cmlidXRpb24gaWYgayA9PT0gMFxuICAgIGlmIChrID09PSAwKSByZXR1cm4gKCkgPT4gMDtcbiAgICB0aGV0YSA9IHRoZXRhID09IG51bGwgPyAxIDogK3RoZXRhO1xuICAgIC8vIGV4cG9uZW50aWFsIGRpc3RyaWJ1dGlvbiBpZiBrID09PSAxXG4gICAgaWYgKGsgPT09IDEpIHJldHVybiAoKSA9PiAtTWF0aC5sb2cxcCgtc291cmNlKCkpICogdGhldGE7XG5cbiAgICB2YXIgZCA9IChrIDwgMSA/IGsgKyAxIDogaykgLSAxIC8gMyxcbiAgICAgICAgYyA9IDEgLyAoMyAqIE1hdGguc3FydChkKSksXG4gICAgICAgIG11bHRpcGxpZXIgPSBrIDwgMSA/ICgpID0+IE1hdGgucG93KHNvdXJjZSgpLCAxIC8gaykgOiAoKSA9PiAxO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIHZhciB4ID0gcmFuZG9tTm9ybWFsKCksXG4gICAgICAgICAgICAgIHYgPSAxICsgYyAqIHg7XG4gICAgICAgIH0gd2hpbGUgKHYgPD0gMCk7XG4gICAgICAgIHYgKj0gdiAqIHY7XG4gICAgICAgIHZhciB1ID0gMSAtIHNvdXJjZSgpO1xuICAgICAgfSB3aGlsZSAodSA+PSAxIC0gMC4wMzMxICogeCAqIHggKiB4ICogeCAmJiBNYXRoLmxvZyh1KSA+PSAwLjUgKiB4ICogeCArIGQgKiAoMSAtIHYgKyBNYXRoLmxvZyh2KSkpO1xuICAgICAgcmV0dXJuIGQgKiB2ICogbXVsdGlwbGllcigpICogdGhldGE7XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbUdhbW1hLnNvdXJjZSA9IHNvdXJjZVJhbmRvbUdhbW1hO1xuXG4gIHJldHVybiByYW5kb21HYW1tYTtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZS5qc1wiO1xuaW1wb3J0IGdhbW1hIGZyb20gXCIuL2dhbW1hLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21CZXRhKHNvdXJjZSkge1xuICB2YXIgRyA9IGdhbW1hLnNvdXJjZShzb3VyY2UpO1xuXG4gIGZ1bmN0aW9uIHJhbmRvbUJldGEoYWxwaGEsIGJldGEpIHtcbiAgICB2YXIgWCA9IEcoYWxwaGEpLFxuICAgICAgICBZID0gRyhiZXRhKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeCA9IFgoKTtcbiAgICAgIHJldHVybiB4ID09PSAwID8gMCA6IHggLyAoeCArIFkoKSk7XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbUJldGEuc291cmNlID0gc291cmNlUmFuZG9tQmV0YTtcblxuICByZXR1cm4gcmFuZG9tQmV0YTtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZS5qc1wiO1xuaW1wb3J0IGJldGEgZnJvbSBcIi4vYmV0YS5qc1wiO1xuaW1wb3J0IGdlb21ldHJpYyBmcm9tIFwiLi9nZW9tZXRyaWMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbUJpbm9taWFsKHNvdXJjZSkge1xuICB2YXIgRyA9IGdlb21ldHJpYy5zb3VyY2Uoc291cmNlKSxcbiAgICAgIEIgPSBiZXRhLnNvdXJjZShzb3VyY2UpO1xuXG4gIGZ1bmN0aW9uIHJhbmRvbUJpbm9taWFsKG4sIHApIHtcbiAgICBuID0gK247XG4gICAgaWYgKChwID0gK3ApID49IDEpIHJldHVybiAoKSA9PiBuO1xuICAgIGlmIChwIDw9IDApIHJldHVybiAoKSA9PiAwO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhY2MgPSAwLCBubiA9IG4sIHBwID0gcDtcbiAgICAgIHdoaWxlIChubiAqIHBwID4gMTYgJiYgbm4gKiAoMSAtIHBwKSA+IDE2KSB7XG4gICAgICAgIHZhciBpID0gTWF0aC5mbG9vcigobm4gKyAxKSAqIHBwKSxcbiAgICAgICAgICAgIHkgPSBCKGksIG5uIC0gaSArIDEpKCk7XG4gICAgICAgIGlmICh5IDw9IHBwKSB7XG4gICAgICAgICAgYWNjICs9IGk7XG4gICAgICAgICAgbm4gLT0gaTtcbiAgICAgICAgICBwcCA9IChwcCAtIHkpIC8gKDEgLSB5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBubiA9IGkgLSAxO1xuICAgICAgICAgIHBwIC89IHk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBzaWduID0gcHAgPCAwLjUsXG4gICAgICAgICAgcEZpbmFsID0gc2lnbiA/IHBwIDogMSAtIHBwLFxuICAgICAgICAgIGcgPSBHKHBGaW5hbCk7XG4gICAgICBmb3IgKHZhciBzID0gZygpLCBrID0gMDsgcyA8PSBubjsgKytrKSBzICs9IGcoKTtcbiAgICAgIHJldHVybiBhY2MgKyAoc2lnbiA/IGsgOiBubiAtIGspO1xuICAgIH07XG4gIH1cblxuICByYW5kb21CaW5vbWlhbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21CaW5vbWlhbDtcblxuICByZXR1cm4gcmFuZG9tQmlub21pYWw7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2UuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbVdlaWJ1bGwoc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbVdlaWJ1bGwoaywgYSwgYikge1xuICAgIHZhciBvdXRlckZ1bmM7XG4gICAgaWYgKChrID0gK2spID09PSAwKSB7XG4gICAgICBvdXRlckZ1bmMgPSB4ID0+IC1NYXRoLmxvZyh4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgayA9IDEgLyBrO1xuICAgICAgb3V0ZXJGdW5jID0geCA9PiBNYXRoLnBvdyh4LCBrKTtcbiAgICB9XG4gICAgYSA9IGEgPT0gbnVsbCA/IDAgOiArYTtcbiAgICBiID0gYiA9PSBudWxsID8gMSA6ICtiO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBhICsgYiAqIG91dGVyRnVuYygtTWF0aC5sb2cxcCgtc291cmNlKCkpKTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tV2VpYnVsbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21XZWlidWxsO1xuXG4gIHJldHVybiByYW5kb21XZWlidWxsO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21DYXVjaHkoc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbUNhdWNoeShhLCBiKSB7XG4gICAgYSA9IGEgPT0gbnVsbCA/IDAgOiArYTtcbiAgICBiID0gYiA9PSBudWxsID8gMSA6ICtiO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBhICsgYiAqIE1hdGgudGFuKE1hdGguUEkgKiBzb3VyY2UoKSk7XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbUNhdWNoeS5zb3VyY2UgPSBzb3VyY2VSYW5kb21DYXVjaHk7XG5cbiAgcmV0dXJuIHJhbmRvbUNhdWNoeTtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tTG9naXN0aWMoc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbUxvZ2lzdGljKGEsIGIpIHtcbiAgICBhID0gYSA9PSBudWxsID8gMCA6ICthO1xuICAgIGIgPSBiID09IG51bGwgPyAxIDogK2I7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHUgPSBzb3VyY2UoKTtcbiAgICAgIHJldHVybiBhICsgYiAqIE1hdGgubG9nKHUgLyAoMSAtIHUpKTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tTG9naXN0aWMuc291cmNlID0gc291cmNlUmFuZG9tTG9naXN0aWM7XG5cbiAgcmV0dXJuIHJhbmRvbUxvZ2lzdGljO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlLmpzXCI7XG5pbXBvcnQgYmlub21pYWwgZnJvbSBcIi4vYmlub21pYWwuanNcIjtcbmltcG9ydCBnYW1tYSBmcm9tIFwiLi9nYW1tYS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tUG9pc3Nvbihzb3VyY2UpIHtcbiAgdmFyIEcgPSBnYW1tYS5zb3VyY2Uoc291cmNlKSxcbiAgICAgIEIgPSBiaW5vbWlhbC5zb3VyY2Uoc291cmNlKTtcblxuICBmdW5jdGlvbiByYW5kb21Qb2lzc29uKGxhbWJkYSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhY2MgPSAwLCBsID0gbGFtYmRhO1xuICAgICAgd2hpbGUgKGwgPiAxNikge1xuICAgICAgICB2YXIgbiA9IE1hdGguZmxvb3IoMC44NzUgKiBsKSxcbiAgICAgICAgICAgIHQgPSBHKG4pKCk7XG4gICAgICAgIGlmICh0ID4gbCkgcmV0dXJuIGFjYyArIEIobiAtIDEsIGwgLyB0KSgpO1xuICAgICAgICBhY2MgKz0gbjtcbiAgICAgICAgbCAtPSB0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgcyA9IC1NYXRoLmxvZzFwKC1zb3VyY2UoKSksIGsgPSAwOyBzIDw9IGw7ICsraykgcyAtPSBNYXRoLmxvZzFwKC1zb3VyY2UoKSk7XG4gICAgICByZXR1cm4gYWNjICsgaztcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tUG9pc3Nvbi5zb3VyY2UgPSBzb3VyY2VSYW5kb21Qb2lzc29uO1xuXG4gIHJldHVybiByYW5kb21Qb2lzc29uO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCIvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaW5lYXJfY29uZ3J1ZW50aWFsX2dlbmVyYXRvciNQYXJhbWV0ZXJzX2luX2NvbW1vbl91c2VcbmNvbnN0IG11bCA9IDB4MTk2NjBEO1xuY29uc3QgaW5jID0gMHgzQzZFRjM1RjtcbmNvbnN0IGVwcyA9IDEgLyAweDEwMDAwMDAwMDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGNnKHNlZWQgPSBNYXRoLnJhbmRvbSgpKSB7XG4gIGxldCBzdGF0ZSA9ICgwIDw9IHNlZWQgJiYgc2VlZCA8IDEgPyBzZWVkIC8gZXBzIDogTWF0aC5hYnMoc2VlZCkpIHwgMDtcbiAgcmV0dXJuICgpID0+IChzdGF0ZSA9IG11bCAqIHN0YXRlICsgaW5jIHwgMCwgZXBzICogKHN0YXRlID4+PiAwKSk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gaW5pdFJhbmdlKGRvbWFpbiwgcmFuZ2UpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiBicmVhaztcbiAgICBjYXNlIDE6IHRoaXMucmFuZ2UoZG9tYWluKTsgYnJlYWs7XG4gICAgZGVmYXVsdDogdGhpcy5yYW5nZShyYW5nZSkuZG9tYWluKGRvbWFpbik7IGJyZWFrO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdEludGVycG9sYXRvcihkb21haW4sIGludGVycG9sYXRvcikge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IGJyZWFrO1xuICAgIGNhc2UgMToge1xuICAgICAgaWYgKHR5cGVvZiBkb21haW4gPT09IFwiZnVuY3Rpb25cIikgdGhpcy5pbnRlcnBvbGF0b3IoZG9tYWluKTtcbiAgICAgIGVsc2UgdGhpcy5yYW5nZShkb21haW4pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHRoaXMuZG9tYWluKGRvbWFpbik7XG4gICAgICBpZiAodHlwZW9mIGludGVycG9sYXRvciA9PT0gXCJmdW5jdGlvblwiKSB0aGlzLmludGVycG9sYXRvcihpbnRlcnBvbGF0b3IpO1xuICAgICAgZWxzZSB0aGlzLnJhbmdlKGludGVycG9sYXRvcik7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQge0ludGVybk1hcH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuXG5leHBvcnQgY29uc3QgaW1wbGljaXQgPSBTeW1ib2woXCJpbXBsaWNpdFwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3JkaW5hbCgpIHtcbiAgdmFyIGluZGV4ID0gbmV3IEludGVybk1hcCgpLFxuICAgICAgZG9tYWluID0gW10sXG4gICAgICByYW5nZSA9IFtdLFxuICAgICAgdW5rbm93biA9IGltcGxpY2l0O1xuXG4gIGZ1bmN0aW9uIHNjYWxlKGQpIHtcbiAgICBsZXQgaSA9IGluZGV4LmdldChkKTtcbiAgICBpZiAoaSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodW5rbm93biAhPT0gaW1wbGljaXQpIHJldHVybiB1bmtub3duO1xuICAgICAgaW5kZXguc2V0KGQsIGkgPSBkb21haW4ucHVzaChkKSAtIDEpO1xuICAgIH1cbiAgICByZXR1cm4gcmFuZ2VbaSAlIHJhbmdlLmxlbmd0aF07XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgZG9tYWluID0gW10sIGluZGV4ID0gbmV3IEludGVybk1hcCgpO1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgXykge1xuICAgICAgaWYgKGluZGV4Lmhhcyh2YWx1ZSkpIGNvbnRpbnVlO1xuICAgICAgaW5kZXguc2V0KHZhbHVlLCBkb21haW4ucHVzaCh2YWx1ZSkgLSAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gQXJyYXkuZnJvbShfKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gb3JkaW5hbChkb21haW4sIHJhbmdlKS51bmtub3duKHVua25vd24pO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gc2NhbGU7XG59XG4iLCJpbXBvcnQge3JhbmdlIGFzIHNlcXVlbmNlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0LmpzXCI7XG5pbXBvcnQgb3JkaW5hbCBmcm9tIFwiLi9vcmRpbmFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJhbmQoKSB7XG4gIHZhciBzY2FsZSA9IG9yZGluYWwoKS51bmtub3duKHVuZGVmaW5lZCksXG4gICAgICBkb21haW4gPSBzY2FsZS5kb21haW4sXG4gICAgICBvcmRpbmFsUmFuZ2UgPSBzY2FsZS5yYW5nZSxcbiAgICAgIHIwID0gMCxcbiAgICAgIHIxID0gMSxcbiAgICAgIHN0ZXAsXG4gICAgICBiYW5kd2lkdGgsXG4gICAgICByb3VuZCA9IGZhbHNlLFxuICAgICAgcGFkZGluZ0lubmVyID0gMCxcbiAgICAgIHBhZGRpbmdPdXRlciA9IDAsXG4gICAgICBhbGlnbiA9IDAuNTtcblxuICBkZWxldGUgc2NhbGUudW5rbm93bjtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHZhciBuID0gZG9tYWluKCkubGVuZ3RoLFxuICAgICAgICByZXZlcnNlID0gcjEgPCByMCxcbiAgICAgICAgc3RhcnQgPSByZXZlcnNlID8gcjEgOiByMCxcbiAgICAgICAgc3RvcCA9IHJldmVyc2UgPyByMCA6IHIxO1xuICAgIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDEsIG4gLSBwYWRkaW5nSW5uZXIgKyBwYWRkaW5nT3V0ZXIgKiAyKTtcbiAgICBpZiAocm91bmQpIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgIHN0YXJ0ICs9IChzdG9wIC0gc3RhcnQgLSBzdGVwICogKG4gLSBwYWRkaW5nSW5uZXIpKSAqIGFsaWduO1xuICAgIGJhbmR3aWR0aCA9IHN0ZXAgKiAoMSAtIHBhZGRpbmdJbm5lcik7XG4gICAgaWYgKHJvdW5kKSBzdGFydCA9IE1hdGgucm91bmQoc3RhcnQpLCBiYW5kd2lkdGggPSBNYXRoLnJvdW5kKGJhbmR3aWR0aCk7XG4gICAgdmFyIHZhbHVlcyA9IHNlcXVlbmNlKG4pLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBzdGFydCArIHN0ZXAgKiBpOyB9KTtcbiAgICByZXR1cm4gb3JkaW5hbFJhbmdlKHJldmVyc2UgPyB2YWx1ZXMucmV2ZXJzZSgpIDogdmFsdWVzKTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4oXyksIHJlc2NhbGUoKSkgOiBkb21haW4oKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChbcjAsIHIxXSA9IF8sIHIwID0gK3IwLCByMSA9ICtyMSwgcmVzY2FsZSgpKSA6IFtyMCwgcjFdO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIFtyMCwgcjFdID0gXywgcjAgPSArcjAsIHIxID0gK3IxLCByb3VuZCA9IHRydWUsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5iYW5kd2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYmFuZHdpZHRoO1xuICB9O1xuXG4gIHNjYWxlLnN0ZXAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc3RlcDtcbiAgfTtcblxuICBzY2FsZS5yb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEhXywgcmVzY2FsZSgpKSA6IHJvdW5kO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gTWF0aC5taW4oMSwgcGFkZGluZ091dGVyID0gK18pLCByZXNjYWxlKCkpIDogcGFkZGluZ0lubmVyO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmdJbm5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSBNYXRoLm1pbigxLCBfKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdJbm5lcjtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nT3V0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ091dGVyID0gK18sIHJlc2NhbGUoKSkgOiBwYWRkaW5nT3V0ZXI7XG4gIH07XG5cbiAgc2NhbGUuYWxpZ24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxpZ24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBhbGlnbjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGJhbmQoZG9tYWluKCksIFtyMCwgcjFdKVxuICAgICAgICAucm91bmQocm91bmQpXG4gICAgICAgIC5wYWRkaW5nSW5uZXIocGFkZGluZ0lubmVyKVxuICAgICAgICAucGFkZGluZ091dGVyKHBhZGRpbmdPdXRlcilcbiAgICAgICAgLmFsaWduKGFsaWduKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KHJlc2NhbGUoKSwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gcG9pbnRpc2goc2NhbGUpIHtcbiAgdmFyIGNvcHkgPSBzY2FsZS5jb3B5O1xuXG4gIHNjYWxlLnBhZGRpbmcgPSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG4gIGRlbGV0ZSBzY2FsZS5wYWRkaW5nSW5uZXI7XG4gIGRlbGV0ZSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBwb2ludGlzaChjb3B5KCkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50KCkge1xuICByZXR1cm4gcG9pbnRpc2goYmFuZC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhZGRpbmdJbm5lcigxKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBudW1iZXIoeCkge1xuICByZXR1cm4gK3g7XG59XG4iLCJpbXBvcnQge2Jpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2ludGVycG9sYXRlIGFzIGludGVycG9sYXRlVmFsdWUsIGludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJvdW5kfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcblxudmFyIHVuaXQgPSBbMCwgMV07XG5cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gIHJldHVybiB4O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemUoYSwgYikge1xuICByZXR1cm4gKGIgLT0gKGEgPSArYSkpXG4gICAgICA/IGZ1bmN0aW9uKHgpIHsgcmV0dXJuICh4IC0gYSkgLyBiOyB9XG4gICAgICA6IGNvbnN0YW50KGlzTmFOKGIpID8gTmFOIDogMC41KTtcbn1cblxuZnVuY3Rpb24gY2xhbXBlcihhLCBiKSB7XG4gIHZhciB0O1xuICBpZiAoYSA+IGIpIHQgPSBhLCBhID0gYiwgYiA9IHQ7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLm1heChhLCBNYXRoLm1pbihiLCB4KSk7IH07XG59XG5cbi8vIG5vcm1hbGl6ZShhLCBiKSh4KSB0YWtlcyBhIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlciB0IGluIFswLDFdLlxuLy8gaW50ZXJwb2xhdGUoYSwgYikodCkgdGFrZXMgYSBwYXJhbWV0ZXIgdCBpbiBbMCwxXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByYW5nZSB2YWx1ZSB4IGluIFthLGJdLlxuZnVuY3Rpb24gYmltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGQwID0gZG9tYWluWzBdLCBkMSA9IGRvbWFpblsxXSwgcjAgPSByYW5nZVswXSwgcjEgPSByYW5nZVsxXTtcbiAgaWYgKGQxIDwgZDApIGQwID0gbm9ybWFsaXplKGQxLCBkMCksIHIwID0gaW50ZXJwb2xhdGUocjEsIHIwKTtcbiAgZWxzZSBkMCA9IG5vcm1hbGl6ZShkMCwgZDEpLCByMCA9IGludGVycG9sYXRlKHIwLCByMSk7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiByMChkMCh4KSk7IH07XG59XG5cbmZ1bmN0aW9uIHBvbHltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGogPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpIC0gMSxcbiAgICAgIGQgPSBuZXcgQXJyYXkoaiksXG4gICAgICByID0gbmV3IEFycmF5KGopLFxuICAgICAgaSA9IC0xO1xuXG4gIC8vIFJldmVyc2UgZGVzY2VuZGluZyBkb21haW5zLlxuICBpZiAoZG9tYWluW2pdIDwgZG9tYWluWzBdKSB7XG4gICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIHJhbmdlID0gcmFuZ2Uuc2xpY2UoKS5yZXZlcnNlKCk7XG4gIH1cblxuICB3aGlsZSAoKytpIDwgaikge1xuICAgIGRbaV0gPSBub3JtYWxpemUoZG9tYWluW2ldLCBkb21haW5baSArIDFdKTtcbiAgICByW2ldID0gaW50ZXJwb2xhdGUocmFuZ2VbaV0sIHJhbmdlW2kgKyAxXSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHZhciBpID0gYmlzZWN0KGRvbWFpbiwgeCwgMSwgaikgLSAxO1xuICAgIHJldHVybiByW2ldKGRbaV0oeCkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weShzb3VyY2UsIHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0XG4gICAgICAuZG9tYWluKHNvdXJjZS5kb21haW4oKSlcbiAgICAgIC5yYW5nZShzb3VyY2UucmFuZ2UoKSlcbiAgICAgIC5pbnRlcnBvbGF0ZShzb3VyY2UuaW50ZXJwb2xhdGUoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSlcbiAgICAgIC51bmtub3duKHNvdXJjZS51bmtub3duKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtZXIoKSB7XG4gIHZhciBkb21haW4gPSB1bml0LFxuICAgICAgcmFuZ2UgPSB1bml0LFxuICAgICAgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVZhbHVlLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgdW50cmFuc2Zvcm0sXG4gICAgICB1bmtub3duLFxuICAgICAgY2xhbXAgPSBpZGVudGl0eSxcbiAgICAgIHBpZWNld2lzZSxcbiAgICAgIG91dHB1dCxcbiAgICAgIGlucHV0O1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgdmFyIG4gPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpO1xuICAgIGlmIChjbGFtcCAhPT0gaWRlbnRpdHkpIGNsYW1wID0gY2xhbXBlcihkb21haW5bMF0sIGRvbWFpbltuIC0gMV0pO1xuICAgIHBpZWNld2lzZSA9IG4gPiAyID8gcG9seW1hcCA6IGJpbWFwO1xuICAgIG91dHB1dCA9IGlucHV0ID0gbnVsbDtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIHggPT0gbnVsbCB8fCBpc05hTih4ID0gK3gpID8gdW5rbm93biA6IChvdXRwdXQgfHwgKG91dHB1dCA9IHBpZWNld2lzZShkb21haW4ubWFwKHRyYW5zZm9ybSksIHJhbmdlLCBpbnRlcnBvbGF0ZSkpKSh0cmFuc2Zvcm0oY2xhbXAoeCkpKTtcbiAgfVxuXG4gIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gY2xhbXAodW50cmFuc2Zvcm0oKGlucHV0IHx8IChpbnB1dCA9IHBpZWNld2lzZShyYW5nZSwgZG9tYWluLm1hcCh0cmFuc2Zvcm0pLCBpbnRlcnBvbGF0ZU51bWJlcikpKSh5KSkpO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBBcnJheS5mcm9tKF8sIG51bWJlciksIHJlc2NhbGUoKSkgOiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IEFycmF5LmZyb20oXyksIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIHJhbmdlID0gQXJyYXkuZnJvbShfKSwgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVJvdW5kLCByZXNjYWxlKCk7XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSBfID8gdHJ1ZSA6IGlkZW50aXR5LCByZXNjYWxlKCkpIDogY2xhbXAgIT09IGlkZW50aXR5O1xuICB9O1xuXG4gIHNjYWxlLmludGVycG9sYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRlID0gXywgcmVzY2FsZSgpKSA6IGludGVycG9sYXRlO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQsIHUpIHtcbiAgICB0cmFuc2Zvcm0gPSB0LCB1bnRyYW5zZm9ybSA9IHU7XG4gICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGludW91cygpIHtcbiAgcmV0dXJuIHRyYW5zZm9ybWVyKCkoaWRlbnRpdHksIGlkZW50aXR5KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnN0YW50cyh4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCB7dGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtmb3JtYXQsIGZvcm1hdFByZWZpeCwgZm9ybWF0U3BlY2lmaWVyLCBwcmVjaXNpb25GaXhlZCwgcHJlY2lzaW9uUHJlZml4LCBwcmVjaXNpb25Sb3VuZH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aWNrRm9ybWF0KHN0YXJ0LCBzdG9wLCBjb3VudCwgc3BlY2lmaWVyKSB7XG4gIHZhciBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSxcbiAgICAgIHByZWNpc2lvbjtcbiAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciA9PSBudWxsID8gXCIsZlwiIDogc3BlY2lmaWVyKTtcbiAgc3dpdGNoIChzcGVjaWZpZXIudHlwZSkge1xuICAgIGNhc2UgXCJzXCI6IHtcbiAgICAgIHZhciB2YWx1ZSA9IE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpO1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUHJlZml4KHN0ZXAsIHZhbHVlKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb247XG4gICAgICByZXR1cm4gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpO1xuICAgIH1cbiAgICBjYXNlIFwiXCI6XG4gICAgY2FzZSBcImVcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcInJcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUm91bmQoc3RlcCwgTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSkpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCJlXCIpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJmXCI6XG4gICAgY2FzZSBcIiVcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uRml4ZWQoc3RlcCkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcIiVcIikgKiAyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXQoc3BlY2lmaWVyKTtcbn1cbiIsImltcG9ydCB7dGlja3MsIHRpY2tJbmNyZW1lbnR9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IGNvbnRpbnVvdXMsIHtjb3B5fSBmcm9tIFwiLi9jb250aW51b3VzLmpzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuaW1wb3J0IHRpY2tGb3JtYXQgZnJvbSBcIi4vdGlja0Zvcm1hdC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gbGluZWFyaXNoKHNjYWxlKSB7XG4gIHZhciBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIHRpY2tzKGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja0Zvcm1hdChkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50LCBzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIGlmIChjb3VudCA9PSBudWxsKSBjb3VudCA9IDEwO1xuXG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICB2YXIgaTAgPSAwO1xuICAgIHZhciBpMSA9IGQubGVuZ3RoIC0gMTtcbiAgICB2YXIgc3RhcnQgPSBkW2kwXTtcbiAgICB2YXIgc3RvcCA9IGRbaTFdO1xuICAgIHZhciBwcmVzdGVwO1xuICAgIHZhciBzdGVwO1xuICAgIHZhciBtYXhJdGVyID0gMTA7XG5cbiAgICBpZiAoc3RvcCA8IHN0YXJ0KSB7XG4gICAgICBzdGVwID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IHN0ZXA7XG4gICAgICBzdGVwID0gaTAsIGkwID0gaTEsIGkxID0gc3RlcDtcbiAgICB9XG4gICAgXG4gICAgd2hpbGUgKG1heEl0ZXItLSA+IDApIHtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgICBpZiAoc3RlcCA9PT0gcHJlc3RlcCkge1xuICAgICAgICBkW2kwXSA9IHN0YXJ0XG4gICAgICAgIGRbaTFdID0gc3RvcFxuICAgICAgICByZXR1cm4gZG9tYWluKGQpO1xuICAgICAgfSBlbHNlIGlmIChzdGVwID4gMCkge1xuICAgICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHByZXN0ZXAgPSBzdGVwO1xuICAgIH1cblxuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpbmVhcigpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cygpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbGluZWFyKCkpO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cbiIsImltcG9ydCB7bGluZWFyaXNofSBmcm9tIFwiLi9saW5lYXIuanNcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlkZW50aXR5KGRvbWFpbikge1xuICB2YXIgdW5rbm93bjtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIHggPT0gbnVsbCB8fCBpc05hTih4ID0gK3gpID8gdW5rbm93biA6IHg7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBzY2FsZTtcblxuICBzY2FsZS5kb21haW4gPSBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBBcnJheS5mcm9tKF8sIG51bWJlciksIHNjYWxlKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBpZGVudGl0eShkb21haW4pLnVua25vd24odW5rbm93bik7XG4gIH07XG5cbiAgZG9tYWluID0gYXJndW1lbnRzLmxlbmd0aCA/IEFycmF5LmZyb20oZG9tYWluLCBudW1iZXIpIDogWzAsIDFdO1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbmljZShkb21haW4sIGludGVydmFsKSB7XG4gIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpO1xuXG4gIHZhciBpMCA9IDAsXG4gICAgICBpMSA9IGRvbWFpbi5sZW5ndGggLSAxLFxuICAgICAgeDAgPSBkb21haW5baTBdLFxuICAgICAgeDEgPSBkb21haW5baTFdLFxuICAgICAgdDtcblxuICBpZiAoeDEgPCB4MCkge1xuICAgIHQgPSBpMCwgaTAgPSBpMSwgaTEgPSB0O1xuICAgIHQgPSB4MCwgeDAgPSB4MSwgeDEgPSB0O1xuICB9XG5cbiAgZG9tYWluW2kwXSA9IGludGVydmFsLmZsb29yKHgwKTtcbiAgZG9tYWluW2kxXSA9IGludGVydmFsLmNlaWwoeDEpO1xuICByZXR1cm4gZG9tYWluO1xufVxuIiwiaW1wb3J0IHt0aWNrc30gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2Zvcm1hdCwgZm9ybWF0U3BlY2lmaWVyfSBmcm9tIFwiZDMtZm9ybWF0XCI7XG5pbXBvcnQgbmljZSBmcm9tIFwiLi9uaWNlLmpzXCI7XG5pbXBvcnQge2NvcHksIHRyYW5zZm9ybWVyfSBmcm9tIFwiLi9jb250aW51b3VzLmpzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Mb2coeCkge1xuICByZXR1cm4gTWF0aC5sb2coeCk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUV4cCh4KSB7XG4gIHJldHVybiBNYXRoLmV4cCh4KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtTG9nbih4KSB7XG4gIHJldHVybiAtTWF0aC5sb2coLXgpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1FeHBuKHgpIHtcbiAgcmV0dXJuIC1NYXRoLmV4cCgteCk7XG59XG5cbmZ1bmN0aW9uIHBvdzEwKHgpIHtcbiAgcmV0dXJuIGlzRmluaXRlKHgpID8gKyhcIjFlXCIgKyB4KSA6IHggPCAwID8gMCA6IHg7XG59XG5cbmZ1bmN0aW9uIHBvd3AoYmFzZSkge1xuICByZXR1cm4gYmFzZSA9PT0gMTAgPyBwb3cxMFxuICAgICAgOiBiYXNlID09PSBNYXRoLkUgPyBNYXRoLmV4cFxuICAgICAgOiB4ID0+IE1hdGgucG93KGJhc2UsIHgpO1xufVxuXG5mdW5jdGlvbiBsb2dwKGJhc2UpIHtcbiAgcmV0dXJuIGJhc2UgPT09IE1hdGguRSA/IE1hdGgubG9nXG4gICAgICA6IGJhc2UgPT09IDEwICYmIE1hdGgubG9nMTBcbiAgICAgIHx8IGJhc2UgPT09IDIgJiYgTWF0aC5sb2cyXG4gICAgICB8fCAoYmFzZSA9IE1hdGgubG9nKGJhc2UpLCB4ID0+IE1hdGgubG9nKHgpIC8gYmFzZSk7XG59XG5cbmZ1bmN0aW9uIHJlZmxlY3QoZikge1xuICByZXR1cm4gKHgsIGspID0+IC1mKC14LCBrKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvZ2dpc2godHJhbnNmb3JtKSB7XG4gIGNvbnN0IHNjYWxlID0gdHJhbnNmb3JtKHRyYW5zZm9ybUxvZywgdHJhbnNmb3JtRXhwKTtcbiAgY29uc3QgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuICBsZXQgYmFzZSA9IDEwO1xuICBsZXQgbG9ncztcbiAgbGV0IHBvd3M7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICBsb2dzID0gbG9ncChiYXNlKSwgcG93cyA9IHBvd3AoYmFzZSk7XG4gICAgaWYgKGRvbWFpbigpWzBdIDwgMCkge1xuICAgICAgbG9ncyA9IHJlZmxlY3QobG9ncyksIHBvd3MgPSByZWZsZWN0KHBvd3MpO1xuICAgICAgdHJhbnNmb3JtKHRyYW5zZm9ybUxvZ24sIHRyYW5zZm9ybUV4cG4pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2Zvcm0odHJhbnNmb3JtTG9nLCB0cmFuc2Zvcm1FeHApO1xuICAgIH1cbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBzY2FsZS5iYXNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGJhc2UgPSArXywgcmVzY2FsZSgpKSA6IGJhc2U7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbihfKSwgcmVzY2FsZSgpKSA6IGRvbWFpbigpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tzID0gY291bnQgPT4ge1xuICAgIGNvbnN0IGQgPSBkb21haW4oKTtcbiAgICBsZXQgdSA9IGRbMF07XG4gICAgbGV0IHYgPSBkW2QubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgciA9IHYgPCB1O1xuXG4gICAgaWYgKHIpIChbdSwgdl0gPSBbdiwgdV0pO1xuXG4gICAgbGV0IGkgPSBsb2dzKHUpO1xuICAgIGxldCBqID0gbG9ncyh2KTtcbiAgICBsZXQgaztcbiAgICBsZXQgdDtcbiAgICBjb25zdCBuID0gY291bnQgPT0gbnVsbCA/IDEwIDogK2NvdW50O1xuICAgIGxldCB6ID0gW107XG5cbiAgICBpZiAoIShiYXNlICUgMSkgJiYgaiAtIGkgPCBuKSB7XG4gICAgICBpID0gTWF0aC5mbG9vcihpKSwgaiA9IE1hdGguY2VpbChqKTtcbiAgICAgIGlmICh1ID4gMCkgZm9yICg7IGkgPD0gajsgKytpKSB7XG4gICAgICAgIGZvciAoayA9IDE7IGsgPCBiYXNlOyArK2spIHtcbiAgICAgICAgICB0ID0gaSA8IDAgPyBrIC8gcG93cygtaSkgOiBrICogcG93cyhpKTtcbiAgICAgICAgICBpZiAodCA8IHUpIGNvbnRpbnVlO1xuICAgICAgICAgIGlmICh0ID4gdikgYnJlYWs7XG4gICAgICAgICAgei5wdXNoKHQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgZm9yICg7IGkgPD0gajsgKytpKSB7XG4gICAgICAgIGZvciAoayA9IGJhc2UgLSAxOyBrID49IDE7IC0taykge1xuICAgICAgICAgIHQgPSBpID4gMCA/IGsgLyBwb3dzKC1pKSA6IGsgKiBwb3dzKGkpO1xuICAgICAgICAgIGlmICh0IDwgdSkgY29udGludWU7XG4gICAgICAgICAgaWYgKHQgPiB2KSBicmVhaztcbiAgICAgICAgICB6LnB1c2godCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh6Lmxlbmd0aCAqIDIgPCBuKSB6ID0gdGlja3ModSwgdiwgbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHogPSB0aWNrcyhpLCBqLCBNYXRoLm1pbihqIC0gaSwgbikpLm1hcChwb3dzKTtcbiAgICB9XG4gICAgcmV0dXJuIHIgPyB6LnJldmVyc2UoKSA6IHo7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IChjb3VudCwgc3BlY2lmaWVyKSA9PiB7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG4gICAgaWYgKHNwZWNpZmllciA9PSBudWxsKSBzcGVjaWZpZXIgPSBiYXNlID09PSAxMCA/IFwic1wiIDogXCIsXCI7XG4gICAgaWYgKHR5cGVvZiBzcGVjaWZpZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgaWYgKCEoYmFzZSAlIDEpICYmIChzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSkucHJlY2lzaW9uID09IG51bGwpIHNwZWNpZmllci50cmltID0gdHJ1ZTtcbiAgICAgIHNwZWNpZmllciA9IGZvcm1hdChzcGVjaWZpZXIpO1xuICAgIH1cbiAgICBpZiAoY291bnQgPT09IEluZmluaXR5KSByZXR1cm4gc3BlY2lmaWVyO1xuICAgIGNvbnN0IGsgPSBNYXRoLm1heCgxLCBiYXNlICogY291bnQgLyBzY2FsZS50aWNrcygpLmxlbmd0aCk7IC8vIFRPRE8gZmFzdCBlc3RpbWF0ZT9cbiAgICByZXR1cm4gZCA9PiB7XG4gICAgICBsZXQgaSA9IGQgLyBwb3dzKE1hdGgucm91bmQobG9ncyhkKSkpO1xuICAgICAgaWYgKGkgKiBiYXNlIDwgYmFzZSAtIDAuNSkgaSAqPSBiYXNlO1xuICAgICAgcmV0dXJuIGkgPD0gayA/IHNwZWNpZmllcihkKSA6IFwiXCI7XG4gICAgfTtcbiAgfTtcblxuICBzY2FsZS5uaWNlID0gKCkgPT4ge1xuICAgIHJldHVybiBkb21haW4obmljZShkb21haW4oKSwge1xuICAgICAgZmxvb3I6IHggPT4gcG93cyhNYXRoLmZsb29yKGxvZ3MoeCkpKSxcbiAgICAgIGNlaWw6IHggPT4gcG93cyhNYXRoLmNlaWwobG9ncyh4KSkpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9nKCkge1xuICBjb25zdCBzY2FsZSA9IGxvZ2dpc2godHJhbnNmb3JtZXIoKSkuZG9tYWluKFsxLCAxMF0pO1xuICBzY2FsZS5jb3B5ID0gKCkgPT4gY29weShzY2FsZSwgbG9nKCkpLmJhc2Uoc2NhbGUuYmFzZSgpKTtcbiAgaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xuICByZXR1cm4gc2NhbGU7XG59XG4iLCJpbXBvcnQge2xpbmVhcmlzaH0gZnJvbSBcIi4vbGluZWFyLmpzXCI7XG5pbXBvcnQge2NvcHksIHRyYW5zZm9ybWVyfSBmcm9tIFwiLi9jb250aW51b3VzLmpzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1TeW1sb2coYykge1xuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBNYXRoLnNpZ24oeCkgKiBNYXRoLmxvZzFwKE1hdGguYWJzKHggLyBjKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVN5bWV4cChjKSB7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIE1hdGguc2lnbih4KSAqIE1hdGguZXhwbTEoTWF0aC5hYnMoeCkpICogYztcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN5bWxvZ2lzaCh0cmFuc2Zvcm0pIHtcbiAgdmFyIGMgPSAxLCBzY2FsZSA9IHRyYW5zZm9ybSh0cmFuc2Zvcm1TeW1sb2coYyksIHRyYW5zZm9ybVN5bWV4cChjKSk7XG5cbiAgc2NhbGUuY29uc3RhbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0cmFuc2Zvcm0odHJhbnNmb3JtU3ltbG9nKGMgPSArXyksIHRyYW5zZm9ybVN5bWV4cChjKSkgOiBjO1xuICB9O1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1sb2coKSB7XG4gIHZhciBzY2FsZSA9IHN5bWxvZ2lzaCh0cmFuc2Zvcm1lcigpKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIHN5bWxvZygpKS5jb25zdGFudChzY2FsZS5jb25zdGFudCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuIiwiaW1wb3J0IHtsaW5lYXJpc2h9IGZyb20gXCIuL2xpbmVhci5qc1wiO1xuaW1wb3J0IHtjb3B5LCBpZGVudGl0eSwgdHJhbnNmb3JtZXJ9IGZyb20gXCIuL2NvbnRpbnVvdXMuanNcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0LmpzXCI7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVBvdyhleHBvbmVudCkge1xuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4IDwgMCA/IC1NYXRoLnBvdygteCwgZXhwb25lbnQpIDogTWF0aC5wb3coeCwgZXhwb25lbnQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1TcXJ0KHgpIHtcbiAgcmV0dXJuIHggPCAwID8gLU1hdGguc3FydCgteCkgOiBNYXRoLnNxcnQoeCk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVNxdWFyZSh4KSB7XG4gIHJldHVybiB4IDwgMCA/IC14ICogeCA6IHggKiB4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG93aXNoKHRyYW5zZm9ybSkge1xuICB2YXIgc2NhbGUgPSB0cmFuc2Zvcm0oaWRlbnRpdHksIGlkZW50aXR5KSxcbiAgICAgIGV4cG9uZW50ID0gMTtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHJldHVybiBleHBvbmVudCA9PT0gMSA/IHRyYW5zZm9ybShpZGVudGl0eSwgaWRlbnRpdHkpXG4gICAgICAgIDogZXhwb25lbnQgPT09IDAuNSA/IHRyYW5zZm9ybSh0cmFuc2Zvcm1TcXJ0LCB0cmFuc2Zvcm1TcXVhcmUpXG4gICAgICAgIDogdHJhbnNmb3JtKHRyYW5zZm9ybVBvdyhleHBvbmVudCksIHRyYW5zZm9ybVBvdygxIC8gZXhwb25lbnQpKTtcbiAgfVxuXG4gIHNjYWxlLmV4cG9uZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4cG9uZW50ID0gK18sIHJlc2NhbGUoKSkgOiBleHBvbmVudDtcbiAgfTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcG93KCkge1xuICB2YXIgc2NhbGUgPSBwb3dpc2godHJhbnNmb3JtZXIoKSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBwb3coKSkuZXhwb25lbnQoc2NhbGUuZXhwb25lbnQoKSk7XG4gIH07XG5cbiAgaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNxcnQoKSB7XG4gIHJldHVybiBwb3cuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5leHBvbmVudCgwLjUpO1xufVxuIiwiaW1wb3J0IGNvbnRpbnVvdXMgZnJvbSBcIi4vY29udGludW91cy5qc1wiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXQuanNcIjtcbmltcG9ydCB7bGluZWFyaXNofSBmcm9tIFwiLi9saW5lYXIuanNcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbmZ1bmN0aW9uIHNxdWFyZSh4KSB7XG4gIHJldHVybiBNYXRoLnNpZ24oeCkgKiB4ICogeDtcbn1cblxuZnVuY3Rpb24gdW5zcXVhcmUoeCkge1xuICByZXR1cm4gTWF0aC5zaWduKHgpICogTWF0aC5zcXJ0KE1hdGguYWJzKHgpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmFkaWFsKCkge1xuICB2YXIgc3F1YXJlZCA9IGNvbnRpbnVvdXMoKSxcbiAgICAgIHJhbmdlID0gWzAsIDFdLFxuICAgICAgcm91bmQgPSBmYWxzZSxcbiAgICAgIHVua25vd247XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHZhciB5ID0gdW5zcXVhcmUoc3F1YXJlZCh4KSk7XG4gICAgcmV0dXJuIGlzTmFOKHkpID8gdW5rbm93biA6IHJvdW5kID8gTWF0aC5yb3VuZCh5KSA6IHk7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIHNxdWFyZWQuaW52ZXJ0KHNxdWFyZSh5KSk7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNxdWFyZWQuZG9tYWluKF8pLCBzY2FsZSkgOiBzcXVhcmVkLmRvbWFpbigpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNxdWFyZWQucmFuZ2UoKHJhbmdlID0gQXJyYXkuZnJvbShfLCBudW1iZXIpKS5tYXAoc3F1YXJlKSksIHNjYWxlKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gc2NhbGUucmFuZ2UoXykucm91bmQodHJ1ZSk7XG4gIH07XG5cbiAgc2NhbGUucm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIV8sIHNjYWxlKSA6IHJvdW5kO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNxdWFyZWQuY2xhbXAoXyksIHNjYWxlKSA6IHNxdWFyZWQuY2xhbXAoKTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcmFkaWFsKHNxdWFyZWQuZG9tYWluKCksIHJhbmdlKVxuICAgICAgICAucm91bmQocm91bmQpXG4gICAgICAgIC5jbGFtcChzcXVhcmVkLmNsYW1wKCkpXG4gICAgICAgIC51bmtub3duKHVua25vd24pO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cbiIsImltcG9ydCB7YXNjZW5kaW5nLCBiaXNlY3QsIHF1YW50aWxlU29ydGVkIGFzIHRocmVzaG9sZH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBxdWFudGlsZSgpIHtcbiAgdmFyIGRvbWFpbiA9IFtdLFxuICAgICAgcmFuZ2UgPSBbXSxcbiAgICAgIHRocmVzaG9sZHMgPSBbXSxcbiAgICAgIHVua25vd247XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICB2YXIgaSA9IDAsIG4gPSBNYXRoLm1heCgxLCByYW5nZS5sZW5ndGgpO1xuICAgIHRocmVzaG9sZHMgPSBuZXcgQXJyYXkobiAtIDEpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aHJlc2hvbGRzW2kgLSAxXSA9IHRocmVzaG9sZChkb21haW4sIGkgLyBuKTtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIHggPT0gbnVsbCB8fCBpc05hTih4ID0gK3gpID8gdW5rbm93biA6IHJhbmdlW2Jpc2VjdCh0aHJlc2hvbGRzLCB4KV07XG4gIH1cblxuICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XG4gICAgdmFyIGkgPSByYW5nZS5pbmRleE9mKHkpO1xuICAgIHJldHVybiBpIDwgMCA/IFtOYU4sIE5hTl0gOiBbXG4gICAgICBpID4gMCA/IHRocmVzaG9sZHNbaSAtIDFdIDogZG9tYWluWzBdLFxuICAgICAgaSA8IHRocmVzaG9sZHMubGVuZ3RoID8gdGhyZXNob2xkc1tpXSA6IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV1cbiAgICBdO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgICBkb21haW4gPSBbXTtcbiAgICBmb3IgKGxldCBkIG9mIF8pIGlmIChkICE9IG51bGwgJiYgIWlzTmFOKGQgPSArZCkpIGRvbWFpbi5wdXNoKGQpO1xuICAgIGRvbWFpbi5zb3J0KGFzY2VuZGluZyk7XG4gICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IEFycmF5LmZyb20oXyksIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgc2NhbGUucXVhbnRpbGVzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRocmVzaG9sZHMuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHF1YW50aWxlKClcbiAgICAgICAgLmRvbWFpbihkb21haW4pXG4gICAgICAgIC5yYW5nZShyYW5nZSlcbiAgICAgICAgLnVua25vd24odW5rbm93bik7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cbiIsImltcG9ydCB7YmlzZWN0fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7bGluZWFyaXNofSBmcm9tIFwiLi9saW5lYXIuanNcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHF1YW50aXplKCkge1xuICB2YXIgeDAgPSAwLFxuICAgICAgeDEgPSAxLFxuICAgICAgbiA9IDEsXG4gICAgICBkb21haW4gPSBbMC41XSxcbiAgICAgIHJhbmdlID0gWzAsIDFdLFxuICAgICAgdW5rbm93bjtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIHggIT0gbnVsbCAmJiB4IDw9IHggPyByYW5nZVtiaXNlY3QoZG9tYWluLCB4LCAwLCBuKV0gOiB1bmtub3duO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICB2YXIgaSA9IC0xO1xuICAgIGRvbWFpbiA9IG5ldyBBcnJheShuKTtcbiAgICB3aGlsZSAoKytpIDwgbikgZG9tYWluW2ldID0gKChpICsgMSkgKiB4MSAtIChpIC0gbikgKiB4MCkgLyAobiArIDEpO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChbeDAsIHgxXSA9IF8sIHgwID0gK3gwLCB4MSA9ICt4MSwgcmVzY2FsZSgpKSA6IFt4MCwgeDFdO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG4gPSAocmFuZ2UgPSBBcnJheS5mcm9tKF8pKS5sZW5ndGggLSAxLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XG4gICAgdmFyIGkgPSByYW5nZS5pbmRleE9mKHkpO1xuICAgIHJldHVybiBpIDwgMCA/IFtOYU4sIE5hTl1cbiAgICAgICAgOiBpIDwgMSA/IFt4MCwgZG9tYWluWzBdXVxuICAgICAgICA6IGkgPj0gbiA/IFtkb21haW5bbiAtIDFdLCB4MV1cbiAgICAgICAgOiBbZG9tYWluW2kgLSAxXSwgZG9tYWluW2ldXTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS50aHJlc2hvbGRzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcXVhbnRpemUoKVxuICAgICAgICAuZG9tYWluKFt4MCwgeDFdKVxuICAgICAgICAucmFuZ2UocmFuZ2UpXG4gICAgICAgIC51bmtub3duKHVua25vd24pO1xuICB9O1xuXG4gIHJldHVybiBpbml0UmFuZ2UuYXBwbHkobGluZWFyaXNoKHNjYWxlKSwgYXJndW1lbnRzKTtcbn1cbiIsImltcG9ydCB7YmlzZWN0fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRocmVzaG9sZCgpIHtcbiAgdmFyIGRvbWFpbiA9IFswLjVdLFxuICAgICAgcmFuZ2UgPSBbMCwgMV0sXG4gICAgICB1bmtub3duLFxuICAgICAgbiA9IDE7XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiB4ICE9IG51bGwgJiYgeCA8PSB4ID8gcmFuZ2VbYmlzZWN0KGRvbWFpbiwgeCwgMCwgbildIDogdW5rbm93bjtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBBcnJheS5mcm9tKF8pLCBuID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoIC0gMSksIHNjYWxlKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gQXJyYXkuZnJvbShfKSwgbiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCAtIDEpLCBzY2FsZSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLmludmVydEV4dGVudCA9IGZ1bmN0aW9uKHkpIHtcbiAgICB2YXIgaSA9IHJhbmdlLmluZGV4T2YoeSk7XG4gICAgcmV0dXJuIFtkb21haW5baSAtIDFdLCBkb21haW5baV1dO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aHJlc2hvbGQoKVxuICAgICAgICAuZG9tYWluKGRvbWFpbilcbiAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuIiwiZXhwb3J0IGNvbnN0IGR1cmF0aW9uU2Vjb25kID0gMTAwMDtcbmV4cG9ydCBjb25zdCBkdXJhdGlvbk1pbnV0ZSA9IGR1cmF0aW9uU2Vjb25kICogNjA7XG5leHBvcnQgY29uc3QgZHVyYXRpb25Ib3VyID0gZHVyYXRpb25NaW51dGUgKiA2MDtcbmV4cG9ydCBjb25zdCBkdXJhdGlvbkRheSA9IGR1cmF0aW9uSG91ciAqIDI0O1xuZXhwb3J0IGNvbnN0IGR1cmF0aW9uV2VlayA9IGR1cmF0aW9uRGF5ICogNztcbmV4cG9ydCBjb25zdCBkdXJhdGlvbk1vbnRoID0gZHVyYXRpb25EYXkgKiAzMDtcbmV4cG9ydCBjb25zdCBkdXJhdGlvblllYXIgPSBkdXJhdGlvbkRheSAqIDM2NTtcbiIsImNvbnN0IHQwID0gbmV3IERhdGUsIHQxID0gbmV3IERhdGU7XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lSW50ZXJ2YWwoZmxvb3JpLCBvZmZzZXRpLCBjb3VudCwgZmllbGQpIHtcblxuICBmdW5jdGlvbiBpbnRlcnZhbChkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMCA/IG5ldyBEYXRlIDogbmV3IERhdGUoK2RhdGUpKSwgZGF0ZTtcbiAgfVxuXG4gIGludGVydmFsLmZsb29yID0gKGRhdGUpID0+IHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSkpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLmNlaWwgPSAoZGF0ZSkgPT4ge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IG5ldyBEYXRlKGRhdGUgLSAxKSksIG9mZnNldGkoZGF0ZSwgMSksIGZsb29yaShkYXRlKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5yb3VuZCA9IChkYXRlKSA9PiB7XG4gICAgY29uc3QgZDAgPSBpbnRlcnZhbChkYXRlKSwgZDEgPSBpbnRlcnZhbC5jZWlsKGRhdGUpO1xuICAgIHJldHVybiBkYXRlIC0gZDAgPCBkMSAtIGRhdGUgPyBkMCA6IGQxO1xuICB9O1xuXG4gIGludGVydmFsLm9mZnNldCA9IChkYXRlLCBzdGVwKSA9PiB7XG4gICAgcmV0dXJuIG9mZnNldGkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSwgc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCkpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJhbmdlID0gKHN0YXJ0LCBzdG9wLCBzdGVwKSA9PiB7XG4gICAgY29uc3QgcmFuZ2UgPSBbXTtcbiAgICBzdGFydCA9IGludGVydmFsLmNlaWwoc3RhcnQpO1xuICAgIHN0ZXAgPSBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKTtcbiAgICBpZiAoIShzdGFydCA8IHN0b3ApIHx8ICEoc3RlcCA+IDApKSByZXR1cm4gcmFuZ2U7IC8vIGFsc28gaGFuZGxlcyBJbnZhbGlkIERhdGVcbiAgICBsZXQgcHJldmlvdXM7XG4gICAgZG8gcmFuZ2UucHVzaChwcmV2aW91cyA9IG5ldyBEYXRlKCtzdGFydCkpLCBvZmZzZXRpKHN0YXJ0LCBzdGVwKSwgZmxvb3JpKHN0YXJ0KTtcbiAgICB3aGlsZSAocHJldmlvdXMgPCBzdGFydCAmJiBzdGFydCA8IHN0b3ApO1xuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICBpbnRlcnZhbC5maWx0ZXIgPSAodGVzdCkgPT4ge1xuICAgIHJldHVybiB0aW1lSW50ZXJ2YWwoKGRhdGUpID0+IHtcbiAgICAgIGlmIChkYXRlID49IGRhdGUpIHdoaWxlIChmbG9vcmkoZGF0ZSksICF0ZXN0KGRhdGUpKSBkYXRlLnNldFRpbWUoZGF0ZSAtIDEpO1xuICAgIH0sIChkYXRlLCBzdGVwKSA9PiB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB7XG4gICAgICAgIGlmIChzdGVwIDwgMCkgd2hpbGUgKCsrc3RlcCA8PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgLTEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9IGVsc2Ugd2hpbGUgKC0tc3RlcCA+PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgKzEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgaWYgKGNvdW50KSB7XG4gICAgaW50ZXJ2YWwuY291bnQgPSAoc3RhcnQsIGVuZCkgPT4ge1xuICAgICAgdDAuc2V0VGltZSgrc3RhcnQpLCB0MS5zZXRUaW1lKCtlbmQpO1xuICAgICAgZmxvb3JpKHQwKSwgZmxvb3JpKHQxKTtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKGNvdW50KHQwLCB0MSkpO1xuICAgIH07XG5cbiAgICBpbnRlcnZhbC5ldmVyeSA9IChzdGVwKSA9PiB7XG4gICAgICBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICAgIHJldHVybiAhaXNGaW5pdGUoc3RlcCkgfHwgIShzdGVwID4gMCkgPyBudWxsXG4gICAgICAgICAgOiAhKHN0ZXAgPiAxKSA/IGludGVydmFsXG4gICAgICAgICAgOiBpbnRlcnZhbC5maWx0ZXIoZmllbGRcbiAgICAgICAgICAgICAgPyAoZCkgPT4gZmllbGQoZCkgJSBzdGVwID09PSAwXG4gICAgICAgICAgICAgIDogKGQpID0+IGludGVydmFsLmNvdW50KDAsIGQpICUgc3RlcCA9PT0gMCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBpbnRlcnZhbDtcbn1cbiIsImltcG9ydCB7dGltZUludGVydmFsfSBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG5leHBvcnQgY29uc3QgbWlsbGlzZWNvbmQgPSB0aW1lSW50ZXJ2YWwoKCkgPT4ge1xuICAvLyBub29wXG59LCAoZGF0ZSwgc3RlcCkgPT4ge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwKTtcbn0sIChzdGFydCwgZW5kKSA9PiB7XG4gIHJldHVybiBlbmQgLSBzdGFydDtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG5taWxsaXNlY29uZC5ldmVyeSA9IChrKSA9PiB7XG4gIGsgPSBNYXRoLmZsb29yKGspO1xuICBpZiAoIWlzRmluaXRlKGspIHx8ICEoayA+IDApKSByZXR1cm4gbnVsbDtcbiAgaWYgKCEoayA+IDEpKSByZXR1cm4gbWlsbGlzZWNvbmQ7XG4gIHJldHVybiB0aW1lSW50ZXJ2YWwoKGRhdGUpID0+IHtcbiAgICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gaykgKiBrKTtcbiAgfSwgKGRhdGUsIHN0ZXApID0+IHtcbiAgICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogayk7XG4gIH0sIChzdGFydCwgZW5kKSA9PiB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBrO1xuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBtaWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZC5yYW5nZTtcbiIsImltcG9ydCB7dGltZUludGVydmFsfSBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvblNlY29uZH0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxuZXhwb3J0IGNvbnN0IHNlY29uZCA9IHRpbWVJbnRlcnZhbCgoZGF0ZSkgPT4ge1xuICBkYXRlLnNldFRpbWUoZGF0ZSAtIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpO1xufSwgKGRhdGUsIHN0ZXApID0+IHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uU2Vjb25kKTtcbn0sIChzdGFydCwgZW5kKSA9PiB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25TZWNvbmQ7XG59LCAoZGF0ZSkgPT4ge1xuICByZXR1cm4gZGF0ZS5nZXRVVENTZWNvbmRzKCk7XG59KTtcblxuZXhwb3J0IGNvbnN0IHNlY29uZHMgPSBzZWNvbmQucmFuZ2U7XG4iLCJpbXBvcnQge3RpbWVJbnRlcnZhbH0gZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG5leHBvcnQgY29uc3QgdGltZU1pbnV0ZSA9IHRpbWVJbnRlcnZhbCgoZGF0ZSkgPT4ge1xuICBkYXRlLnNldFRpbWUoZGF0ZSAtIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkgLSBkYXRlLmdldFNlY29uZHMoKSAqIGR1cmF0aW9uU2Vjb25kKTtcbn0sIChkYXRlLCBzdGVwKSA9PiB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCAoc3RhcnQsIGVuZCkgPT4ge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgKGRhdGUpID0+IHtcbiAgcmV0dXJuIGRhdGUuZ2V0TWludXRlcygpO1xufSk7XG5cbmV4cG9ydCBjb25zdCB0aW1lTWludXRlcyA9IHRpbWVNaW51dGUucmFuZ2U7XG5cbmV4cG9ydCBjb25zdCB1dGNNaW51dGUgPSB0aW1lSW50ZXJ2YWwoKGRhdGUpID0+IHtcbiAgZGF0ZS5zZXRVVENTZWNvbmRzKDAsIDApO1xufSwgKGRhdGUsIHN0ZXApID0+IHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbn0sIChzdGFydCwgZW5kKSA9PiB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGU7XG59LCAoZGF0ZSkgPT4ge1xuICByZXR1cm4gZGF0ZS5nZXRVVENNaW51dGVzKCk7XG59KTtcblxuZXhwb3J0IGNvbnN0IHV0Y01pbnV0ZXMgPSB1dGNNaW51dGUucmFuZ2U7XG4iLCJpbXBvcnQge3RpbWVJbnRlcnZhbH0gZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25Ib3VyLCBkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbmV4cG9ydCBjb25zdCB0aW1lSG91ciA9IHRpbWVJbnRlcnZhbCgoZGF0ZSkgPT4ge1xuICBkYXRlLnNldFRpbWUoZGF0ZSAtIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkgLSBkYXRlLmdldFNlY29uZHMoKSAqIGR1cmF0aW9uU2Vjb25kIC0gZGF0ZS5nZXRNaW51dGVzKCkgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCAoZGF0ZSwgc3RlcCkgPT4ge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbn0sIChzdGFydCwgZW5kKSA9PiB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xufSwgKGRhdGUpID0+IHtcbiAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKTtcbn0pO1xuXG5leHBvcnQgY29uc3QgdGltZUhvdXJzID0gdGltZUhvdXIucmFuZ2U7XG5cbmV4cG9ydCBjb25zdCB1dGNIb3VyID0gdGltZUludGVydmFsKChkYXRlKSA9PiB7XG4gIGRhdGUuc2V0VVRDTWludXRlcygwLCAwLCAwKTtcbn0sIChkYXRlLCBzdGVwKSA9PiB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbkhvdXIpO1xufSwgKHN0YXJ0LCBlbmQpID0+IHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG59LCAoZGF0ZSkgPT4ge1xuICByZXR1cm4gZGF0ZS5nZXRVVENIb3VycygpO1xufSk7XG5cbmV4cG9ydCBjb25zdCB1dGNIb3VycyA9IHV0Y0hvdXIucmFuZ2U7XG4iLCJpbXBvcnQge3RpbWVJbnRlcnZhbH0gZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25EYXksIGR1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG5leHBvcnQgY29uc3QgdGltZURheSA9IHRpbWVJbnRlcnZhbChcbiAgZGF0ZSA9PiBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApLFxuICAoZGF0ZSwgc3RlcCkgPT4gZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCksXG4gIChzdGFydCwgZW5kKSA9PiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uRGF5LFxuICBkYXRlID0+IGRhdGUuZ2V0RGF0ZSgpIC0gMVxuKTtcblxuZXhwb3J0IGNvbnN0IHRpbWVEYXlzID0gdGltZURheS5yYW5nZTtcblxuZXhwb3J0IGNvbnN0IHV0Y0RheSA9IHRpbWVJbnRlcnZhbCgoZGF0ZSkgPT4ge1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgKGRhdGUsIHN0ZXApID0+IHtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgc3RlcCk7XG59LCAoc3RhcnQsIGVuZCkgPT4ge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uRGF5O1xufSwgKGRhdGUpID0+IHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDRGF0ZSgpIC0gMTtcbn0pO1xuXG5leHBvcnQgY29uc3QgdXRjRGF5cyA9IHV0Y0RheS5yYW5nZTtcblxuZXhwb3J0IGNvbnN0IHVuaXhEYXkgPSB0aW1lSW50ZXJ2YWwoKGRhdGUpID0+IHtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIChkYXRlLCBzdGVwKSA9PiB7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXApO1xufSwgKHN0YXJ0LCBlbmQpID0+IHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkRheTtcbn0sIChkYXRlKSA9PiB7XG4gIHJldHVybiBNYXRoLmZsb29yKGRhdGUgLyBkdXJhdGlvbkRheSk7XG59KTtcblxuZXhwb3J0IGNvbnN0IHVuaXhEYXlzID0gdW5peERheS5yYW5nZTtcbiIsImltcG9ydCB7dGltZUludGVydmFsfSBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25XZWVrfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG5mdW5jdGlvbiB0aW1lV2Vla2RheShpKSB7XG4gIHJldHVybiB0aW1lSW50ZXJ2YWwoKGRhdGUpID0+IHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIChkYXRlLCBzdGVwKSA9PiB7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCAqIDcpO1xuICB9LCAoc3RhcnQsIGVuZCkgPT4ge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCBjb25zdCB0aW1lU3VuZGF5ID0gdGltZVdlZWtkYXkoMCk7XG5leHBvcnQgY29uc3QgdGltZU1vbmRheSA9IHRpbWVXZWVrZGF5KDEpO1xuZXhwb3J0IGNvbnN0IHRpbWVUdWVzZGF5ID0gdGltZVdlZWtkYXkoMik7XG5leHBvcnQgY29uc3QgdGltZVdlZG5lc2RheSA9IHRpbWVXZWVrZGF5KDMpO1xuZXhwb3J0IGNvbnN0IHRpbWVUaHVyc2RheSA9IHRpbWVXZWVrZGF5KDQpO1xuZXhwb3J0IGNvbnN0IHRpbWVGcmlkYXkgPSB0aW1lV2Vla2RheSg1KTtcbmV4cG9ydCBjb25zdCB0aW1lU2F0dXJkYXkgPSB0aW1lV2Vla2RheSg2KTtcblxuZXhwb3J0IGNvbnN0IHRpbWVTdW5kYXlzID0gdGltZVN1bmRheS5yYW5nZTtcbmV4cG9ydCBjb25zdCB0aW1lTW9uZGF5cyA9IHRpbWVNb25kYXkucmFuZ2U7XG5leHBvcnQgY29uc3QgdGltZVR1ZXNkYXlzID0gdGltZVR1ZXNkYXkucmFuZ2U7XG5leHBvcnQgY29uc3QgdGltZVdlZG5lc2RheXMgPSB0aW1lV2VkbmVzZGF5LnJhbmdlO1xuZXhwb3J0IGNvbnN0IHRpbWVUaHVyc2RheXMgPSB0aW1lVGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgY29uc3QgdGltZUZyaWRheXMgPSB0aW1lRnJpZGF5LnJhbmdlO1xuZXhwb3J0IGNvbnN0IHRpbWVTYXR1cmRheXMgPSB0aW1lU2F0dXJkYXkucmFuZ2U7XG5cbmZ1bmN0aW9uIHV0Y1dlZWtkYXkoaSkge1xuICByZXR1cm4gdGltZUludGVydmFsKChkYXRlKSA9PiB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gKGRhdGUuZ2V0VVRDRGF5KCkgKyA3IC0gaSkgJSA3KTtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCAoZGF0ZSwgc3RlcCkgPT4ge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXAgKiA3KTtcbiAgfSwgKHN0YXJ0LCBlbmQpID0+IHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCBjb25zdCB1dGNTdW5kYXkgPSB1dGNXZWVrZGF5KDApO1xuZXhwb3J0IGNvbnN0IHV0Y01vbmRheSA9IHV0Y1dlZWtkYXkoMSk7XG5leHBvcnQgY29uc3QgdXRjVHVlc2RheSA9IHV0Y1dlZWtkYXkoMik7XG5leHBvcnQgY29uc3QgdXRjV2VkbmVzZGF5ID0gdXRjV2Vla2RheSgzKTtcbmV4cG9ydCBjb25zdCB1dGNUaHVyc2RheSA9IHV0Y1dlZWtkYXkoNCk7XG5leHBvcnQgY29uc3QgdXRjRnJpZGF5ID0gdXRjV2Vla2RheSg1KTtcbmV4cG9ydCBjb25zdCB1dGNTYXR1cmRheSA9IHV0Y1dlZWtkYXkoNik7XG5cbmV4cG9ydCBjb25zdCB1dGNTdW5kYXlzID0gdXRjU3VuZGF5LnJhbmdlO1xuZXhwb3J0IGNvbnN0IHV0Y01vbmRheXMgPSB1dGNNb25kYXkucmFuZ2U7XG5leHBvcnQgY29uc3QgdXRjVHVlc2RheXMgPSB1dGNUdWVzZGF5LnJhbmdlO1xuZXhwb3J0IGNvbnN0IHV0Y1dlZG5lc2RheXMgPSB1dGNXZWRuZXNkYXkucmFuZ2U7XG5leHBvcnQgY29uc3QgdXRjVGh1cnNkYXlzID0gdXRjVGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgY29uc3QgdXRjRnJpZGF5cyA9IHV0Y0ZyaWRheS5yYW5nZTtcbmV4cG9ydCBjb25zdCB1dGNTYXR1cmRheXMgPSB1dGNTYXR1cmRheS5yYW5nZTtcbiIsImltcG9ydCB7dGltZUludGVydmFsfSBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG5leHBvcnQgY29uc3QgdGltZU1vbnRoID0gdGltZUludGVydmFsKChkYXRlKSA9PiB7XG4gIGRhdGUuc2V0RGF0ZSgxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIChkYXRlLCBzdGVwKSA9PiB7XG4gIGRhdGUuc2V0TW9udGgoZGF0ZS5nZXRNb250aCgpICsgc3RlcCk7XG59LCAoc3RhcnQsIGVuZCkgPT4ge1xuICByZXR1cm4gZW5kLmdldE1vbnRoKCkgLSBzdGFydC5nZXRNb250aCgpICsgKGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKSkgKiAxMjtcbn0sIChkYXRlKSA9PiB7XG4gIHJldHVybiBkYXRlLmdldE1vbnRoKCk7XG59KTtcblxuZXhwb3J0IGNvbnN0IHRpbWVNb250aHMgPSB0aW1lTW9udGgucmFuZ2U7XG5cbmV4cG9ydCBjb25zdCB1dGNNb250aCA9IHRpbWVJbnRlcnZhbCgoZGF0ZSkgPT4ge1xuICBkYXRlLnNldFVUQ0RhdGUoMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCAoZGF0ZSwgc3RlcCkgPT4ge1xuICBkYXRlLnNldFVUQ01vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSArIHN0ZXApO1xufSwgKHN0YXJ0LCBlbmQpID0+IHtcbiAgcmV0dXJuIGVuZC5nZXRVVENNb250aCgpIC0gc3RhcnQuZ2V0VVRDTW9udGgoKSArIChlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCkpICogMTI7XG59LCAoZGF0ZSkgPT4ge1xuICByZXR1cm4gZGF0ZS5nZXRVVENNb250aCgpO1xufSk7XG5cbmV4cG9ydCBjb25zdCB1dGNNb250aHMgPSB1dGNNb250aC5yYW5nZTtcbiIsImltcG9ydCB7dGltZUludGVydmFsfSBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG5leHBvcnQgY29uc3QgdGltZVllYXIgPSB0aW1lSW50ZXJ2YWwoKGRhdGUpID0+IHtcbiAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIChkYXRlLCBzdGVwKSA9PiB7XG4gIGRhdGUuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpICsgc3RlcCk7XG59LCAoc3RhcnQsIGVuZCkgPT4ge1xuICByZXR1cm4gZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpO1xufSwgKGRhdGUpID0+IHtcbiAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG50aW1lWWVhci5ldmVyeSA9IChrKSA9PiB7XG4gIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IHRpbWVJbnRlcnZhbCgoZGF0ZSkgPT4ge1xuICAgIGRhdGUuc2V0RnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldEZ1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0TW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgKGRhdGUsIHN0ZXApID0+IHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgdGltZVllYXJzID0gdGltZVllYXIucmFuZ2U7XG5cbmV4cG9ydCBjb25zdCB1dGNZZWFyID0gdGltZUludGVydmFsKChkYXRlKSA9PiB7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCAoZGF0ZSwgc3RlcCkgPT4ge1xuICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHN0ZXApO1xufSwgKHN0YXJ0LCBlbmQpID0+IHtcbiAgcmV0dXJuIGVuZC5nZXRVVENGdWxsWWVhcigpIC0gc3RhcnQuZ2V0VVRDRnVsbFllYXIoKTtcbn0sIChkYXRlKSA9PiB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxudXRjWWVhci5ldmVyeSA9IChrKSA9PiB7XG4gIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IHRpbWVJbnRlcnZhbCgoZGF0ZSkgPT4ge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgKGRhdGUsIHN0ZXApID0+IHtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgdXRjWWVhcnMgPSB1dGNZZWFyLnJhbmdlO1xuIiwiaW1wb3J0IHtiaXNlY3RvciwgdGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtkdXJhdGlvbkRheSwgZHVyYXRpb25Ib3VyLCBkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25Nb250aCwgZHVyYXRpb25TZWNvbmQsIGR1cmF0aW9uV2VlaywgZHVyYXRpb25ZZWFyfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuaW1wb3J0IHttaWxsaXNlY29uZH0gZnJvbSBcIi4vbWlsbGlzZWNvbmQuanNcIjtcbmltcG9ydCB7c2Vjb25kfSBmcm9tIFwiLi9zZWNvbmQuanNcIjtcbmltcG9ydCB7dGltZU1pbnV0ZSwgdXRjTWludXRlfSBmcm9tIFwiLi9taW51dGUuanNcIjtcbmltcG9ydCB7dGltZUhvdXIsIHV0Y0hvdXJ9IGZyb20gXCIuL2hvdXIuanNcIjtcbmltcG9ydCB7dGltZURheSwgdW5peERheX0gZnJvbSBcIi4vZGF5LmpzXCI7XG5pbXBvcnQge3RpbWVTdW5kYXksIHV0Y1N1bmRheX0gZnJvbSBcIi4vd2Vlay5qc1wiO1xuaW1wb3J0IHt0aW1lTW9udGgsIHV0Y01vbnRofSBmcm9tIFwiLi9tb250aC5qc1wiO1xuaW1wb3J0IHt0aW1lWWVhciwgdXRjWWVhcn0gZnJvbSBcIi4veWVhci5qc1wiO1xuXG5mdW5jdGlvbiB0aWNrZXIoeWVhciwgbW9udGgsIHdlZWssIGRheSwgaG91ciwgbWludXRlKSB7XG5cbiAgY29uc3QgdGlja0ludGVydmFscyA9IFtcbiAgICBbc2Vjb25kLCAgMSwgICAgICBkdXJhdGlvblNlY29uZF0sXG4gICAgW3NlY29uZCwgIDUsICA1ICogZHVyYXRpb25TZWNvbmRdLFxuICAgIFtzZWNvbmQsIDE1LCAxNSAqIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbc2Vjb25kLCAzMCwgMzAgKiBkdXJhdGlvblNlY29uZF0sXG4gICAgW21pbnV0ZSwgIDEsICAgICAgZHVyYXRpb25NaW51dGVdLFxuICAgIFttaW51dGUsICA1LCAgNSAqIGR1cmF0aW9uTWludXRlXSxcbiAgICBbbWludXRlLCAxNSwgMTUgKiBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgW21pbnV0ZSwgMzAsIDMwICogZHVyYXRpb25NaW51dGVdLFxuICAgIFsgIGhvdXIsICAxLCAgICAgIGR1cmF0aW9uSG91ciAgXSxcbiAgICBbICBob3VyLCAgMywgIDMgKiBkdXJhdGlvbkhvdXIgIF0sXG4gICAgWyAgaG91ciwgIDYsICA2ICogZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgIGhvdXIsIDEyLCAxMiAqIGR1cmF0aW9uSG91ciAgXSxcbiAgICBbICAgZGF5LCAgMSwgICAgICBkdXJhdGlvbkRheSAgIF0sXG4gICAgWyAgIGRheSwgIDIsICAyICogZHVyYXRpb25EYXkgICBdLFxuICAgIFsgIHdlZWssICAxLCAgICAgIGR1cmF0aW9uV2VlayAgXSxcbiAgICBbIG1vbnRoLCAgMSwgICAgICBkdXJhdGlvbk1vbnRoIF0sXG4gICAgWyBtb250aCwgIDMsICAzICogZHVyYXRpb25Nb250aCBdLFxuICAgIFsgIHllYXIsICAxLCAgICAgIGR1cmF0aW9uWWVhciAgXVxuICBdO1xuXG4gIGZ1bmN0aW9uIHRpY2tzKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICAgIGNvbnN0IHJldmVyc2UgPSBzdG9wIDwgc3RhcnQ7XG4gICAgaWYgKHJldmVyc2UpIFtzdGFydCwgc3RvcF0gPSBbc3RvcCwgc3RhcnRdO1xuICAgIGNvbnN0IGludGVydmFsID0gY291bnQgJiYgdHlwZW9mIGNvdW50LnJhbmdlID09PSBcImZ1bmN0aW9uXCIgPyBjb3VudCA6IHRpY2tJbnRlcnZhbChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIGNvbnN0IHRpY2tzID0gaW50ZXJ2YWwgPyBpbnRlcnZhbC5yYW5nZShzdGFydCwgK3N0b3AgKyAxKSA6IFtdOyAvLyBpbmNsdXNpdmUgc3RvcFxuICAgIHJldHVybiByZXZlcnNlID8gdGlja3MucmV2ZXJzZSgpIDogdGlja3M7XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrSW50ZXJ2YWwoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gTWF0aC5hYnMoc3RvcCAtIHN0YXJ0KSAvIGNvdW50O1xuICAgIGNvbnN0IGkgPSBiaXNlY3RvcigoWywsIHN0ZXBdKSA9PiBzdGVwKS5yaWdodCh0aWNrSW50ZXJ2YWxzLCB0YXJnZXQpO1xuICAgIGlmIChpID09PSB0aWNrSW50ZXJ2YWxzLmxlbmd0aCkgcmV0dXJuIHllYXIuZXZlcnkodGlja1N0ZXAoc3RhcnQgLyBkdXJhdGlvblllYXIsIHN0b3AgLyBkdXJhdGlvblllYXIsIGNvdW50KSk7XG4gICAgaWYgKGkgPT09IDApIHJldHVybiBtaWxsaXNlY29uZC5ldmVyeShNYXRoLm1heCh0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpLCAxKSk7XG4gICAgY29uc3QgW3QsIHN0ZXBdID0gdGlja0ludGVydmFsc1t0YXJnZXQgLyB0aWNrSW50ZXJ2YWxzW2kgLSAxXVsyXSA8IHRpY2tJbnRlcnZhbHNbaV1bMl0gLyB0YXJnZXQgPyBpIC0gMSA6IGldO1xuICAgIHJldHVybiB0LmV2ZXJ5KHN0ZXApO1xuICB9XG5cbiAgcmV0dXJuIFt0aWNrcywgdGlja0ludGVydmFsXTtcbn1cblxuY29uc3QgW3V0Y1RpY2tzLCB1dGNUaWNrSW50ZXJ2YWxdID0gdGlja2VyKHV0Y1llYXIsIHV0Y01vbnRoLCB1dGNTdW5kYXksIHVuaXhEYXksIHV0Y0hvdXIsIHV0Y01pbnV0ZSk7XG5jb25zdCBbdGltZVRpY2tzLCB0aW1lVGlja0ludGVydmFsXSA9IHRpY2tlcih0aW1lWWVhciwgdGltZU1vbnRoLCB0aW1lU3VuZGF5LCB0aW1lRGF5LCB0aW1lSG91ciwgdGltZU1pbnV0ZSk7XG5cbmV4cG9ydCB7dXRjVGlja3MsIHV0Y1RpY2tJbnRlcnZhbCwgdGltZVRpY2tzLCB0aW1lVGlja0ludGVydmFsfTtcbiIsImltcG9ydCB7XG4gIHRpbWVEYXksXG4gIHRpbWVTdW5kYXksXG4gIHRpbWVNb25kYXksXG4gIHRpbWVUaHVyc2RheSxcbiAgdGltZVllYXIsXG4gIHV0Y0RheSxcbiAgdXRjU3VuZGF5LFxuICB1dGNNb25kYXksXG4gIHV0Y1RodXJzZGF5LFxuICB1dGNZZWFyXG59IGZyb20gXCJkMy10aW1lXCI7XG5cbmZ1bmN0aW9uIGxvY2FsRGF0ZShkKSB7XG4gIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG59XG5cbmZ1bmN0aW9uIHV0Y0RhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQygtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZC55KTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG59XG5cbmZ1bmN0aW9uIG5ld0RhdGUoeSwgbSwgZCkge1xuICByZXR1cm4ge3k6IHksIG06IG0sIGQ6IGQsIEg6IDAsIE06IDAsIFM6IDAsIEw6IDB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRMb2NhbGUobG9jYWxlKSB7XG4gIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsXG4gICAgICBsb2NhbGVfZGF0ZSA9IGxvY2FsZS5kYXRlLFxuICAgICAgbG9jYWxlX3RpbWUgPSBsb2NhbGUudGltZSxcbiAgICAgIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsXG4gICAgICBsb2NhbGVfd2Vla2RheXMgPSBsb2NhbGUuZGF5cyxcbiAgICAgIGxvY2FsZV9zaG9ydFdlZWtkYXlzID0gbG9jYWxlLnNob3J0RGF5cyxcbiAgICAgIGxvY2FsZV9tb250aHMgPSBsb2NhbGUubW9udGhzLFxuICAgICAgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuXG4gIHZhciBwZXJpb2RSZSA9IGZvcm1hdFJlKGxvY2FsZV9wZXJpb2RzKSxcbiAgICAgIHBlcmlvZExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfcGVyaW9kcyksXG4gICAgICB3ZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgd2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICBzaG9ydFdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgbW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9tb250aHMpLFxuICAgICAgbW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksXG4gICAgICBzaG9ydE1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRNb250aHMpLFxuICAgICAgc2hvcnRNb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRNb250aHMpO1xuXG4gIHZhciBmb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFdlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFNob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdE1vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRNaWNyb3NlY29uZHMsXG4gICAgXCJnXCI6IGZvcm1hdFllYXJJU08sXG4gICAgXCJHXCI6IGZvcm1hdEZ1bGxZZWFySVNPLFxuICAgIFwiSFwiOiBmb3JtYXRIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdEhvdXIxMixcbiAgICBcImpcIjogZm9ybWF0RGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdE1vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRQZXJpb2QsXG4gICAgXCJxXCI6IGZvcm1hdFF1YXJ0ZXIsXG4gICAgXCJRXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBmb3JtYXRTZWNvbmRzLFxuICAgIFwidVwiOiBmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBmb3JtYXRXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBudWxsLFxuICAgIFwiWFwiOiBudWxsLFxuICAgIFwieVwiOiBmb3JtYXRZZWFyLFxuICAgIFwiWVwiOiBmb3JtYXRGdWxsWWVhcixcbiAgICBcIlpcIjogZm9ybWF0Wm9uZSxcbiAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICB2YXIgdXRjRm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0VVRDU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRVVENXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRVVENTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRVVENNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0VVRDTWljcm9zZWNvbmRzLFxuICAgIFwiZ1wiOiBmb3JtYXRVVENZZWFySVNPLFxuICAgIFwiR1wiOiBmb3JtYXRVVENGdWxsWWVhcklTTyxcbiAgICBcIkhcIjogZm9ybWF0VVRDSG91cjI0LFxuICAgIFwiSVwiOiBmb3JtYXRVVENIb3VyMTIsXG4gICAgXCJqXCI6IGZvcm1hdFVUQ0RheU9mWWVhcixcbiAgICBcIkxcIjogZm9ybWF0VVRDTWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBmb3JtYXRVVENNb250aE51bWJlcixcbiAgICBcIk1cIjogZm9ybWF0VVRDTWludXRlcyxcbiAgICBcInBcIjogZm9ybWF0VVRDUGVyaW9kLFxuICAgIFwicVwiOiBmb3JtYXRVVENRdWFydGVyLFxuICAgIFwiUVwiOiBmb3JtYXRVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogZm9ybWF0VVRDU2Vjb25kcyxcbiAgICBcInVcIjogZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogZm9ybWF0VVRDV2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogZm9ybWF0VVRDV2Vla051bWJlcklTTyxcbiAgICBcIndcIjogZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogZm9ybWF0VVRDV2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogbnVsbCxcbiAgICBcIlhcIjogbnVsbCxcbiAgICBcInlcIjogZm9ybWF0VVRDWWVhcixcbiAgICBcIllcIjogZm9ybWF0VVRDRnVsbFllYXIsXG4gICAgXCJaXCI6IGZvcm1hdFVUQ1pvbmUsXG4gICAgXCIlXCI6IGZvcm1hdExpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgdmFyIHBhcnNlcyA9IHtcbiAgICBcImFcIjogcGFyc2VTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IHBhcnNlV2Vla2RheSxcbiAgICBcImJcIjogcGFyc2VTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBwYXJzZU1vbnRoLFxuICAgIFwiY1wiOiBwYXJzZUxvY2FsZURhdGVUaW1lLFxuICAgIFwiZFwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJlXCI6IHBhcnNlRGF5T2ZNb250aCxcbiAgICBcImZcIjogcGFyc2VNaWNyb3NlY29uZHMsXG4gICAgXCJnXCI6IHBhcnNlWWVhcixcbiAgICBcIkdcIjogcGFyc2VGdWxsWWVhcixcbiAgICBcIkhcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJJXCI6IHBhcnNlSG91cjI0LFxuICAgIFwialwiOiBwYXJzZURheU9mWWVhcixcbiAgICBcIkxcIjogcGFyc2VNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IHBhcnNlTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IHBhcnNlTWludXRlcyxcbiAgICBcInBcIjogcGFyc2VQZXJpb2QsXG4gICAgXCJxXCI6IHBhcnNlUXVhcnRlcixcbiAgICBcIlFcIjogcGFyc2VVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBwYXJzZVNlY29uZHMsXG4gICAgXCJ1XCI6IHBhcnNlV2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogcGFyc2VXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBwYXJzZVdlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IHBhcnNlV2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogcGFyc2VXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBwYXJzZUxvY2FsZURhdGUsXG4gICAgXCJYXCI6IHBhcnNlTG9jYWxlVGltZSxcbiAgICBcInlcIjogcGFyc2VZZWFyLFxuICAgIFwiWVwiOiBwYXJzZUZ1bGxZZWFyLFxuICAgIFwiWlwiOiBwYXJzZVpvbmUsXG4gICAgXCIlXCI6IHBhcnNlTGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICAvLyBUaGVzZSByZWN1cnNpdmUgZGlyZWN0aXZlIGRlZmluaXRpb25zIG11c3QgYmUgZGVmZXJyZWQuXG4gIGZvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIGZvcm1hdHMpO1xuICB1dGNGb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCB1dGNGb3JtYXRzKTtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyLCBmb3JtYXRzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBbXSxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgICAgYyxcbiAgICAgICAgICBwYWQsXG4gICAgICAgICAgZm9ybWF0O1xuXG4gICAgICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSk7XG5cbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmIChzcGVjaWZpZXIuY2hhckNvZGVBdChpKSA9PT0gMzcpIHtcbiAgICAgICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgICAgIGlmICgocGFkID0gcGFkc1tjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpXSkgIT0gbnVsbCkgYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKTtcbiAgICAgICAgICBlbHNlIHBhZCA9IGMgPT09IFwiZVwiID8gXCIgXCIgOiBcIjBcIjtcbiAgICAgICAgICBpZiAoZm9ybWF0ID0gZm9ybWF0c1tjXSkgYyA9IGZvcm1hdChkYXRlLCBwYWQpO1xuICAgICAgICAgIHN0cmluZy5wdXNoKGMpO1xuICAgICAgICAgIGogPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgcmV0dXJuIHN0cmluZy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBuZXdQYXJzZShzcGVjaWZpZXIsIFopIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgZCA9IG5ld0RhdGUoMTkwMCwgdW5kZWZpbmVkLCAxKSxcbiAgICAgICAgICBpID0gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcgKz0gXCJcIiwgMCksXG4gICAgICAgICAgd2VlaywgZGF5O1xuICAgICAgaWYgKGkgIT0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgIC8vIElmIGEgVU5JWCB0aW1lc3RhbXAgaXMgc3BlY2lmaWVkLCByZXR1cm4gaXQuXG4gICAgICBpZiAoXCJRXCIgaW4gZCkgcmV0dXJuIG5ldyBEYXRlKGQuUSk7XG4gICAgICBpZiAoXCJzXCIgaW4gZCkgcmV0dXJuIG5ldyBEYXRlKGQucyAqIDEwMDAgKyAoXCJMXCIgaW4gZCA/IGQuTCA6IDApKTtcblxuICAgICAgLy8gSWYgdGhpcyBpcyB1dGNQYXJzZSwgbmV2ZXIgdXNlIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAgICAgIGlmIChaICYmICEoXCJaXCIgaW4gZCkpIGQuWiA9IDA7XG5cbiAgICAgIC8vIFRoZSBhbS1wbSBmbGFnIGlzIDAgZm9yIEFNLCBhbmQgMSBmb3IgUE0uXG4gICAgICBpZiAoXCJwXCIgaW4gZCkgZC5IID0gZC5IICUgMTIgKyBkLnAgKiAxMjtcblxuICAgICAgLy8gSWYgdGhlIG1vbnRoIHdhcyBub3Qgc3BlY2lmaWVkLCBpbmhlcml0IGZyb20gdGhlIHF1YXJ0ZXIuXG4gICAgICBpZiAoZC5tID09PSB1bmRlZmluZWQpIGQubSA9IFwicVwiIGluIGQgPyBkLnEgOiAwO1xuXG4gICAgICAvLyBDb252ZXJ0IGRheS1vZi13ZWVrIGFuZCB3ZWVrLW9mLXllYXIgdG8gZGF5LW9mLXllYXIuXG4gICAgICBpZiAoXCJWXCIgaW4gZCkge1xuICAgICAgICBpZiAoZC5WIDwgMSB8fCBkLlYgPiA1MykgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSAxO1xuICAgICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICAgIHdlZWsgPSB1dGNEYXRlKG5ld0RhdGUoZC55LCAwLCAxKSksIGRheSA9IHdlZWsuZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgd2VlayA9IGRheSA+IDQgfHwgZGF5ID09PSAwID8gdXRjTW9uZGF5LmNlaWwod2VlaykgOiB1dGNNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHV0Y0RheS5vZmZzZXQod2VlaywgKGQuViAtIDEpICogNyk7XG4gICAgICAgICAgZC55ID0gd2Vlay5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgICAgIGQubSA9IHdlZWsuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICBkLmQgPSB3ZWVrLmdldFVUQ0RhdGUoKSArIChkLncgKyA2KSAlIDc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2VlayA9IGxvY2FsRGF0ZShuZXdEYXRlKGQueSwgMCwgMSkpLCBkYXkgPSB3ZWVrLmdldERheSgpO1xuICAgICAgICAgIHdlZWsgPSBkYXkgPiA0IHx8IGRheSA9PT0gMCA/IHRpbWVNb25kYXkuY2VpbCh3ZWVrKSA6IHRpbWVNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHRpbWVEYXkub2Zmc2V0KHdlZWssIChkLlYgLSAxKSAqIDcpO1xuICAgICAgICAgIGQueSA9IHdlZWsuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICBkLm0gPSB3ZWVrLmdldE1vbnRoKCk7XG4gICAgICAgICAgZC5kID0gd2Vlay5nZXREYXRlKCkgKyAoZC53ICsgNikgJSA3O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFwiV1wiIGluIGQgfHwgXCJVXCIgaW4gZCkge1xuICAgICAgICBpZiAoIShcIndcIiBpbiBkKSkgZC53ID0gXCJ1XCIgaW4gZCA/IGQudSAlIDcgOiBcIldcIiBpbiBkID8gMSA6IDA7XG4gICAgICAgIGRheSA9IFwiWlwiIGluIGQgPyB1dGNEYXRlKG5ld0RhdGUoZC55LCAwLCAxKSkuZ2V0VVRDRGF5KCkgOiBsb2NhbERhdGUobmV3RGF0ZShkLnksIDAsIDEpKS5nZXREYXkoKTtcbiAgICAgICAgZC5tID0gMDtcbiAgICAgICAgZC5kID0gXCJXXCIgaW4gZCA/IChkLncgKyA2KSAlIDcgKyBkLlcgKiA3IC0gKGRheSArIDUpICUgNyA6IGQudyArIGQuVSAqIDcgLSAoZGF5ICsgNikgJSA3O1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBhIHRpbWUgem9uZSBpcyBzcGVjaWZpZWQsIGFsbCBmaWVsZHMgYXJlIGludGVycHJldGVkIGFzIFVUQyBhbmQgdGhlblxuICAgICAgLy8gb2Zmc2V0IGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIHRpbWUgem9uZS5cbiAgICAgIGlmIChcIlpcIiBpbiBkKSB7XG4gICAgICAgIGQuSCArPSBkLlogLyAxMDAgfCAwO1xuICAgICAgICBkLk0gKz0gZC5aICUgMTAwO1xuICAgICAgICByZXR1cm4gdXRjRGF0ZShkKTtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCBhbGwgZmllbGRzIGFyZSBpbiBsb2NhbCB0aW1lLlxuICAgICAgcmV0dXJuIGxvY2FsRGF0ZShkKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcsIGopIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICBtID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgYyxcbiAgICAgICAgcGFyc2U7XG5cbiAgICB3aGlsZSAoaSA8IG4pIHtcbiAgICAgIGlmIChqID49IG0pIHJldHVybiAtMTtcbiAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckNvZGVBdChpKyspO1xuICAgICAgaWYgKGMgPT09IDM3KSB7XG4gICAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckF0KGkrKyk7XG4gICAgICAgIHBhcnNlID0gcGFyc2VzW2MgaW4gcGFkcyA/IHNwZWNpZmllci5jaGFyQXQoaSsrKSA6IGNdO1xuICAgICAgICBpZiAoIXBhcnNlIHx8ICgoaiA9IHBhcnNlKGQsIHN0cmluZywgaikpIDwgMCkpIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gajtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUGVyaW9kKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gcGVyaW9kUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQucCA9IHBlcmlvZExvb2t1cC5nZXQoblswXS50b0xvd2VyQ2FzZSgpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTaG9ydFdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBzaG9ydFdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC53ID0gc2hvcnRXZWVrZGF5TG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSB3ZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHdlZWtkYXlMb29rdXAuZ2V0KG5bMF0udG9Mb3dlckNhc2UoKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0TW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gc2hvcnRNb250aExvb2t1cC5nZXQoblswXS50b0xvd2VyQ2FzZSgpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQubSA9IG1vbnRoTG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZVRpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfdGltZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldE1vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldEhvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFF1YXJ0ZXIoZCkge1xuICAgIHJldHVybiAxICsgfn4oZC5nZXRNb250aCgpIC8gMyk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1BlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRVVENIb3VycygpID49IDEyKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENRdWFydGVyKGQpIHtcbiAgICByZXR1cm4gMSArIH5+KGQuZ2V0VVRDTW9udGgoKSAvIDMpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIGYgPSBuZXdGb3JtYXQoc3BlY2lmaWVyICs9IFwiXCIsIGZvcm1hdHMpO1xuICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIGY7XG4gICAgfSxcbiAgICBwYXJzZTogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgcCA9IG5ld1BhcnNlKHNwZWNpZmllciArPSBcIlwiLCBmYWxzZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9LFxuICAgIHV0Y0Zvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgdXRjRm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHV0Y1BhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIHRydWUpO1xuICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICB9O1xufVxuXG52YXIgcGFkcyA9IHtcIi1cIjogXCJcIiwgXCJfXCI6IFwiIFwiLCBcIjBcIjogXCIwXCJ9LFxuICAgIG51bWJlclJlID0gL15cXHMqXFxkKy8sIC8vIG5vdGU6IGlnbm9yZXMgbmV4dCBkaXJlY3RpdmVcbiAgICBwZXJjZW50UmUgPSAvXiUvLFxuICAgIHJlcXVvdGVSZSA9IC9bXFxcXF4kKis/fFtcXF0oKS57fV0vZztcblxuZnVuY3Rpb24gcGFkKHZhbHVlLCBmaWxsLCB3aWR0aCkge1xuICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IFwiLVwiIDogXCJcIixcbiAgICAgIHN0cmluZyA9IChzaWduID8gLXZhbHVlIDogdmFsdWUpICsgXCJcIixcbiAgICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG59XG5cbmZ1bmN0aW9uIHJlcXVvdGUocykge1xuICByZXR1cm4gcy5yZXBsYWNlKHJlcXVvdGVSZSwgXCJcXFxcJCZcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFJlKG5hbWVzKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKHJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TG9va3VwKG5hbWVzKSB7XG4gIHJldHVybiBuZXcgTWFwKG5hbWVzLm1hcCgobmFtZSwgaSkgPT4gW25hbWUudG9Mb3dlckNhc2UoKSwgaV0pKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQudyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLnUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5VID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVySVNPKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuViA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlcgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUZ1bGxZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA0KSk7XG4gIHJldHVybiBuID8gKGQueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSArICgrblswXSA+IDY4ID8gMTkwMCA6IDIwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWm9uZShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSAvXihaKXwoWystXVxcZFxcZCkoPzo6PyhcXGRcXGQpKT8vLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuWiA9IG5bMV0gPyAwIDogLShuWzJdICsgKG5bM10gfHwgXCIwMFwiKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VRdWFydGVyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQucSA9IG5bMF0gKiAzIC0gMywgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1vbnRoTnVtYmVyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQubSA9IG5bMF0gLSAxLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF5T2ZNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLm0gPSAwLCBkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUhvdXIyNChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLkggPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbnV0ZXMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5NID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuUyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWlsbGlzZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gIHJldHVybiBuID8gKGQuTCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWljcm9zZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuTCA9IE1hdGguZmxvb3IoblswXSAvIDEwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTGl0ZXJhbFBlcmNlbnQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gcGVyY2VudFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gaSArIG5bMF0ubGVuZ3RoIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gIHJldHVybiBuID8gKGQuUSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICByZXR1cm4gbiA/IChkLnMgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZk1vbnRoKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldERhdGUoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIyNChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SG91cjEyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERheU9mWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoMSArIHRpbWVEYXkuY291bnQodGltZVllYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgcmV0dXJuIGRheSA9PT0gMCA/IDcgOiBkYXk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVTdW5kYXkuY291bnQodGltZVllYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGRJU08oZCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgcmV0dXJuIChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdGltZVRodXJzZGF5KGQpIDogdGltZVRodXJzZGF5LmNlaWwoZCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJJU08oZCwgcCkge1xuICBkID0gZElTTyhkKTtcbiAgcmV0dXJuIHBhZCh0aW1lVGh1cnNkYXkuY291bnQodGltZVllYXIoZCksIGQpICsgKHRpbWVZZWFyKGQpLmdldERheSgpID09PSA0KSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkoZCkge1xuICByZXR1cm4gZC5nZXREYXkoKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodGltZU1vbmRheS5jb3VudCh0aW1lWWVhcihkKSAtIDEsIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0WWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0WWVhcklTTyhkLCBwKSB7XG4gIGQgPSBkSVNPKGQpO1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEZ1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEZ1bGxZZWFySVNPKGQsIHApIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIGQgPSAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHRpbWVUaHVyc2RheShkKSA6IHRpbWVUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0Wm9uZShkKSB7XG4gIHZhciB6ID0gZC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICByZXR1cm4gKHogPiAwID8gXCItXCIgOiAoeiAqPSAtMSwgXCIrXCIpKVxuICAgICAgKyBwYWQoeiAvIDYwIHwgMCwgXCIwXCIsIDIpXG4gICAgICArIHBhZCh6ICUgNjAsIFwiMFwiLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENEYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0hvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENEYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyB1dGNEYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWxsaXNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWNyb3NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApICsgXCIwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTW9udGhOdW1iZXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTW9udGgoKSArIDEsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaW51dGVzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbnV0ZXMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDU2Vjb25kcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheShkKSB7XG4gIHZhciBkb3cgPSBkLmdldFVUQ0RheSgpO1xuICByZXR1cm4gZG93ID09PSAwID8gNyA6IGRvdztcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodXRjU3VuZGF5LmNvdW50KHV0Y1llYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIFVUQ2RJU08oZCkge1xuICB2YXIgZGF5ID0gZC5nZXRVVENEYXkoKTtcbiAgcmV0dXJuIChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdXRjVGh1cnNkYXkoZCkgOiB1dGNUaHVyc2RheS5jZWlsKGQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVySVNPKGQsIHApIHtcbiAgZCA9IFVUQ2RJU08oZCk7XG4gIHJldHVybiBwYWQodXRjVGh1cnNkYXkuY291bnQodXRjWWVhcihkKSwgZCkgKyAodXRjWWVhcihkKS5nZXRVVENEYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0VVRDRGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y01vbmRheS5jb3VudCh1dGNZZWFyKGQpIC0gMSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENZZWFySVNPKGQsIHApIHtcbiAgZCA9IFVUQ2RJU08oZCk7XG4gIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRnVsbFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRnVsbFllYXJJU08oZCwgcCkge1xuICB2YXIgZGF5ID0gZC5nZXRVVENEYXkoKTtcbiAgZCA9IChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdXRjVGh1cnNkYXkoZCkgOiB1dGNUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDWm9uZSgpIHtcbiAgcmV0dXJuIFwiKzAwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TGl0ZXJhbFBlcmNlbnQoKSB7XG4gIHJldHVybiBcIiVcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5peFRpbWVzdGFtcChkKSB7XG4gIHJldHVybiArZDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMoZCkge1xuICByZXR1cm4gTWF0aC5mbG9vcigrZCAvIDEwMDApO1xufVxuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGUuanNcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgdGltZUZvcm1hdDtcbmV4cG9ydCB2YXIgdGltZVBhcnNlO1xuZXhwb3J0IHZhciB1dGNGb3JtYXQ7XG5leHBvcnQgdmFyIHV0Y1BhcnNlO1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGF0ZVRpbWU6IFwiJXgsICVYXCIsXG4gIGRhdGU6IFwiJS1tLyUtZC8lWVwiLFxuICB0aW1lOiBcIiUtSTolTTolUyAlcFwiLFxuICBwZXJpb2RzOiBbXCJBTVwiLCBcIlBNXCJdLFxuICBkYXlzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXSxcbiAgc2hvcnREYXlzOiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG4gIG1vbnRoczogW1wiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIl0sXG4gIHNob3J0TW9udGhzOiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICB0aW1lRm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgdGltZVBhcnNlID0gbG9jYWxlLnBhcnNlO1xuICB1dGNGb3JtYXQgPSBsb2NhbGUudXRjRm9ybWF0O1xuICB1dGNQYXJzZSA9IGxvY2FsZS51dGNQYXJzZTtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImltcG9ydCB7dGltZVllYXIsIHRpbWVNb250aCwgdGltZVdlZWssIHRpbWVEYXksIHRpbWVIb3VyLCB0aW1lTWludXRlLCB0aW1lU2Vjb25kLCB0aW1lVGlja3MsIHRpbWVUaWNrSW50ZXJ2YWx9IGZyb20gXCJkMy10aW1lXCI7XG5pbXBvcnQge3RpbWVGb3JtYXR9IGZyb20gXCJkMy10aW1lLWZvcm1hdFwiO1xuaW1wb3J0IGNvbnRpbnVvdXMsIHtjb3B5fSBmcm9tIFwiLi9jb250aW51b3VzLmpzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuaW1wb3J0IG5pY2UgZnJvbSBcIi4vbmljZS5qc1wiO1xuXG5mdW5jdGlvbiBkYXRlKHQpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKHQpO1xufVxuXG5mdW5jdGlvbiBudW1iZXIodCkge1xuICByZXR1cm4gdCBpbnN0YW5jZW9mIERhdGUgPyArdCA6ICtuZXcgRGF0ZSgrdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxlbmRhcih0aWNrcywgdGlja0ludGVydmFsLCB5ZWFyLCBtb250aCwgd2VlaywgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgZm9ybWF0KSB7XG4gIHZhciBzY2FsZSA9IGNvbnRpbnVvdXMoKSxcbiAgICAgIGludmVydCA9IHNjYWxlLmludmVydCxcbiAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICB2YXIgZm9ybWF0TWlsbGlzZWNvbmQgPSBmb3JtYXQoXCIuJUxcIiksXG4gICAgICBmb3JtYXRTZWNvbmQgPSBmb3JtYXQoXCI6JVNcIiksXG4gICAgICBmb3JtYXRNaW51dGUgPSBmb3JtYXQoXCIlSTolTVwiKSxcbiAgICAgIGZvcm1hdEhvdXIgPSBmb3JtYXQoXCIlSSAlcFwiKSxcbiAgICAgIGZvcm1hdERheSA9IGZvcm1hdChcIiVhICVkXCIpLFxuICAgICAgZm9ybWF0V2VlayA9IGZvcm1hdChcIiViICVkXCIpLFxuICAgICAgZm9ybWF0TW9udGggPSBmb3JtYXQoXCIlQlwiKSxcbiAgICAgIGZvcm1hdFllYXIgPSBmb3JtYXQoXCIlWVwiKTtcblxuICBmdW5jdGlvbiB0aWNrRm9ybWF0KGRhdGUpIHtcbiAgICByZXR1cm4gKHNlY29uZChkYXRlKSA8IGRhdGUgPyBmb3JtYXRNaWxsaXNlY29uZFxuICAgICAgICA6IG1pbnV0ZShkYXRlKSA8IGRhdGUgPyBmb3JtYXRTZWNvbmRcbiAgICAgICAgOiBob3VyKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdE1pbnV0ZVxuICAgICAgICA6IGRheShkYXRlKSA8IGRhdGUgPyBmb3JtYXRIb3VyXG4gICAgICAgIDogbW9udGgoZGF0ZSkgPCBkYXRlID8gKHdlZWsoZGF0ZSkgPCBkYXRlID8gZm9ybWF0RGF5IDogZm9ybWF0V2VlaylcbiAgICAgICAgOiB5ZWFyKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdE1vbnRoXG4gICAgICAgIDogZm9ybWF0WWVhcikoZGF0ZSk7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGludmVydCh5KSk7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gZG9tYWluKEFycmF5LmZyb20oXywgbnVtYmVyKSkgOiBkb21haW4oKS5tYXAoZGF0ZSk7XG4gIH07XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihpbnRlcnZhbCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIHRpY2tzKGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgaW50ZXJ2YWwgPT0gbnVsbCA/IDEwIDogaW50ZXJ2YWwpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgcmV0dXJuIHNwZWNpZmllciA9PSBudWxsID8gdGlja0Zvcm1hdCA6IGZvcm1hdChzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihpbnRlcnZhbCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgaWYgKCFpbnRlcnZhbCB8fCB0eXBlb2YgaW50ZXJ2YWwucmFuZ2UgIT09IFwiZnVuY3Rpb25cIikgaW50ZXJ2YWwgPSB0aWNrSW50ZXJ2YWwoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBpbnRlcnZhbCA9PSBudWxsID8gMTAgOiBpbnRlcnZhbCk7XG4gICAgcmV0dXJuIGludGVydmFsID8gZG9tYWluKG5pY2UoZCwgaW50ZXJ2YWwpKSA6IHNjYWxlO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgY2FsZW5kYXIodGlja3MsIHRpY2tJbnRlcnZhbCwgeWVhciwgbW9udGgsIHdlZWssIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIGZvcm1hdCkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGltZSgpIHtcbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShjYWxlbmRhcih0aW1lVGlja3MsIHRpbWVUaWNrSW50ZXJ2YWwsIHRpbWVZZWFyLCB0aW1lTW9udGgsIHRpbWVXZWVrLCB0aW1lRGF5LCB0aW1lSG91ciwgdGltZU1pbnV0ZSwgdGltZVNlY29uZCwgdGltZUZvcm1hdCkuZG9tYWluKFtuZXcgRGF0ZSgyMDAwLCAwLCAxKSwgbmV3IERhdGUoMjAwMCwgMCwgMildKSwgYXJndW1lbnRzKTtcbn1cbiIsImltcG9ydCB7dXRjWWVhciwgdXRjTW9udGgsIHV0Y1dlZWssIHV0Y0RheSwgdXRjSG91ciwgdXRjTWludXRlLCB1dGNTZWNvbmQsIHV0Y1RpY2tzLCB1dGNUaWNrSW50ZXJ2YWx9IGZyb20gXCJkMy10aW1lXCI7XG5pbXBvcnQge3V0Y0Zvcm1hdH0gZnJvbSBcImQzLXRpbWUtZm9ybWF0XCI7XG5pbXBvcnQge2NhbGVuZGFyfSBmcm9tIFwiLi90aW1lLmpzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1dGNUaW1lKCkge1xuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KGNhbGVuZGFyKHV0Y1RpY2tzLCB1dGNUaWNrSW50ZXJ2YWwsIHV0Y1llYXIsIHV0Y01vbnRoLCB1dGNXZWVrLCB1dGNEYXksIHV0Y0hvdXIsIHV0Y01pbnV0ZSwgdXRjU2Vjb25kLCB1dGNGb3JtYXQpLmRvbWFpbihbRGF0ZS5VVEMoMjAwMCwgMCwgMSksIERhdGUuVVRDKDIwMDAsIDAsIDIpXSksIGFyZ3VtZW50cyk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlLCBpbnRlcnBvbGF0ZVJvdW5kfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7aWRlbnRpdHl9IGZyb20gXCIuL2NvbnRpbnVvdXMuanNcIjtcbmltcG9ydCB7aW5pdEludGVycG9sYXRvcn0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuaW1wb3J0IHtsaW5lYXJpc2h9IGZyb20gXCIuL2xpbmVhci5qc1wiO1xuaW1wb3J0IHtsb2dnaXNofSBmcm9tIFwiLi9sb2cuanNcIjtcbmltcG9ydCB7c3ltbG9naXNofSBmcm9tIFwiLi9zeW1sb2cuanNcIjtcbmltcG9ydCB7cG93aXNofSBmcm9tIFwiLi9wb3cuanNcIjtcblxuZnVuY3Rpb24gdHJhbnNmb3JtZXIoKSB7XG4gIHZhciB4MCA9IDAsXG4gICAgICB4MSA9IDEsXG4gICAgICB0MCxcbiAgICAgIHQxLFxuICAgICAgazEwLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgaW50ZXJwb2xhdG9yID0gaWRlbnRpdHksXG4gICAgICBjbGFtcCA9IGZhbHNlLFxuICAgICAgdW5rbm93bjtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIHggPT0gbnVsbCB8fCBpc05hTih4ID0gK3gpID8gdW5rbm93biA6IGludGVycG9sYXRvcihrMTAgPT09IDAgPyAwLjUgOiAoeCA9ICh0cmFuc2Zvcm0oeCkgLSB0MCkgKiBrMTAsIGNsYW1wID8gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgeCkpIDogeCkpO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKFt4MCwgeDFdID0gXywgdDAgPSB0cmFuc2Zvcm0oeDAgPSAreDApLCB0MSA9IHRyYW5zZm9ybSh4MSA9ICt4MSksIGsxMCA9IHQwID09PSB0MSA/IDAgOiAxIC8gKHQxIC0gdDApLCBzY2FsZSkgOiBbeDAsIHgxXTtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9ICEhXywgc2NhbGUpIDogY2xhbXA7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdG9yID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRvciA9IF8sIHNjYWxlKSA6IGludGVycG9sYXRvcjtcbiAgfTtcblxuICBmdW5jdGlvbiByYW5nZShpbnRlcnBvbGF0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihfKSB7XG4gICAgICB2YXIgcjAsIHIxO1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoW3IwLCByMV0gPSBfLCBpbnRlcnBvbGF0b3IgPSBpbnRlcnBvbGF0ZShyMCwgcjEpLCBzY2FsZSkgOiBbaW50ZXJwb2xhdG9yKDApLCBpbnRlcnBvbGF0b3IoMSldO1xuICAgIH07XG4gIH1cblxuICBzY2FsZS5yYW5nZSA9IHJhbmdlKGludGVycG9sYXRlKTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gcmFuZ2UoaW50ZXJwb2xhdGVSb3VuZCk7XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHQwID0gdCh4MCksIHQxID0gdCh4MSksIGsxMCA9IHQwID09PSB0MSA/IDAgOiAxIC8gKHQxIC0gdDApO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkoc291cmNlLCB0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldFxuICAgICAgLmRvbWFpbihzb3VyY2UuZG9tYWluKCkpXG4gICAgICAuaW50ZXJwb2xhdG9yKHNvdXJjZS5pbnRlcnBvbGF0b3IoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSlcbiAgICAgIC51bmtub3duKHNvdXJjZS51bmtub3duKCkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXF1ZW50aWFsKCkge1xuICB2YXIgc2NhbGUgPSBsaW5lYXJpc2godHJhbnNmb3JtZXIoKShpZGVudGl0eSkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc2VxdWVudGlhbCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbnRpYWxMb2coKSB7XG4gIHZhciBzY2FsZSA9IGxvZ2dpc2godHJhbnNmb3JtZXIoKSkuZG9tYWluKFsxLCAxMF0pO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc2VxdWVudGlhbExvZygpKS5iYXNlKHNjYWxlLmJhc2UoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXF1ZW50aWFsU3ltbG9nKCkge1xuICB2YXIgc2NhbGUgPSBzeW1sb2dpc2godHJhbnNmb3JtZXIoKSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBzZXF1ZW50aWFsU3ltbG9nKCkpLmNvbnN0YW50KHNjYWxlLmNvbnN0YW50KCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VxdWVudGlhbFBvdygpIHtcbiAgdmFyIHNjYWxlID0gcG93aXNoKHRyYW5zZm9ybWVyKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc2VxdWVudGlhbFBvdygpKS5leHBvbmVudChzY2FsZS5leHBvbmVudCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbnRpYWxTcXJ0KCkge1xuICByZXR1cm4gc2VxdWVudGlhbFBvdy5hcHBseShudWxsLCBhcmd1bWVudHMpLmV4cG9uZW50KDAuNSk7XG59XG4iLCJpbXBvcnQge2FzY2VuZGluZywgYmlzZWN0LCBxdWFudGlsZX0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2lkZW50aXR5fSBmcm9tIFwiLi9jb250aW51b3VzLmpzXCI7XG5pbXBvcnQge2luaXRJbnRlcnBvbGF0b3J9IGZyb20gXCIuL2luaXQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2VxdWVudGlhbFF1YW50aWxlKCkge1xuICB2YXIgZG9tYWluID0gW10sXG4gICAgICBpbnRlcnBvbGF0b3IgPSBpZGVudGl0eTtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgaWYgKHggIT0gbnVsbCAmJiAhaXNOYU4oeCA9ICt4KSkgcmV0dXJuIGludGVycG9sYXRvcigoYmlzZWN0KGRvbWFpbiwgeCwgMSkgLSAxKSAvIChkb21haW4ubGVuZ3RoIC0gMSkpO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbi5zbGljZSgpO1xuICAgIGRvbWFpbiA9IFtdO1xuICAgIGZvciAobGV0IGQgb2YgXykgaWYgKGQgIT0gbnVsbCAmJiAhaXNOYU4oZCA9ICtkKSkgZG9tYWluLnB1c2goZCk7XG4gICAgZG9tYWluLnNvcnQoYXNjZW5kaW5nKTtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdG9yID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRvciA9IF8sIHNjYWxlKSA6IGludGVycG9sYXRvcjtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkb21haW4ubWFwKChkLCBpKSA9PiBpbnRlcnBvbGF0b3IoaSAvIChkb21haW4ubGVuZ3RoIC0gMSkpKTtcbiAgfTtcblxuICBzY2FsZS5xdWFudGlsZXMgPSBmdW5jdGlvbihuKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oe2xlbmd0aDogbiArIDF9LCAoXywgaSkgPT4gcXVhbnRpbGUoZG9tYWluLCBpIC8gbikpO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2VxdWVudGlhbFF1YW50aWxlKGludGVycG9sYXRvcikuZG9tYWluKGRvbWFpbik7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlLCBpbnRlcnBvbGF0ZVJvdW5kLCBwaWVjZXdpc2V9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtpZGVudGl0eX0gZnJvbSBcIi4vY29udGludW91cy5qc1wiO1xuaW1wb3J0IHtpbml0SW50ZXJwb2xhdG9yfSBmcm9tIFwiLi9pbml0LmpzXCI7XG5pbXBvcnQge2xpbmVhcmlzaH0gZnJvbSBcIi4vbGluZWFyLmpzXCI7XG5pbXBvcnQge2xvZ2dpc2h9IGZyb20gXCIuL2xvZy5qc1wiO1xuaW1wb3J0IHtjb3B5fSBmcm9tIFwiLi9zZXF1ZW50aWFsLmpzXCI7XG5pbXBvcnQge3N5bWxvZ2lzaH0gZnJvbSBcIi4vc3ltbG9nLmpzXCI7XG5pbXBvcnQge3Bvd2lzaH0gZnJvbSBcIi4vcG93LmpzXCI7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybWVyKCkge1xuICB2YXIgeDAgPSAwLFxuICAgICAgeDEgPSAwLjUsXG4gICAgICB4MiA9IDEsXG4gICAgICBzID0gMSxcbiAgICAgIHQwLFxuICAgICAgdDEsXG4gICAgICB0MixcbiAgICAgIGsxMCxcbiAgICAgIGsyMSxcbiAgICAgIGludGVycG9sYXRvciA9IGlkZW50aXR5LFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgY2xhbXAgPSBmYWxzZSxcbiAgICAgIHVua25vd247XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiBpc05hTih4ID0gK3gpID8gdW5rbm93biA6ICh4ID0gMC41ICsgKCh4ID0gK3RyYW5zZm9ybSh4KSkgLSB0MSkgKiAocyAqIHggPCBzICogdDEgPyBrMTAgOiBrMjEpLCBpbnRlcnBvbGF0b3IoY2xhbXAgPyBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB4KSkgOiB4KSk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoW3gwLCB4MSwgeDJdID0gXywgdDAgPSB0cmFuc2Zvcm0oeDAgPSAreDApLCB0MSA9IHRyYW5zZm9ybSh4MSA9ICt4MSksIHQyID0gdHJhbnNmb3JtKHgyID0gK3gyKSwgazEwID0gdDAgPT09IHQxID8gMCA6IDAuNSAvICh0MSAtIHQwKSwgazIxID0gdDEgPT09IHQyID8gMCA6IDAuNSAvICh0MiAtIHQxKSwgcyA9IHQxIDwgdDAgPyAtMSA6IDEsIHNjYWxlKSA6IFt4MCwgeDEsIHgyXTtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9ICEhXywgc2NhbGUpIDogY2xhbXA7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdG9yID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRvciA9IF8sIHNjYWxlKSA6IGludGVycG9sYXRvcjtcbiAgfTtcblxuICBmdW5jdGlvbiByYW5nZShpbnRlcnBvbGF0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihfKSB7XG4gICAgICB2YXIgcjAsIHIxLCByMjtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKFtyMCwgcjEsIHIyXSA9IF8sIGludGVycG9sYXRvciA9IHBpZWNld2lzZShpbnRlcnBvbGF0ZSwgW3IwLCByMSwgcjJdKSwgc2NhbGUpIDogW2ludGVycG9sYXRvcigwKSwgaW50ZXJwb2xhdG9yKDAuNSksIGludGVycG9sYXRvcigxKV07XG4gICAgfTtcbiAgfVxuXG4gIHNjYWxlLnJhbmdlID0gcmFuZ2UoaW50ZXJwb2xhdGUpO1xuXG4gIHNjYWxlLnJhbmdlUm91bmQgPSByYW5nZShpbnRlcnBvbGF0ZVJvdW5kKTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdHJhbnNmb3JtID0gdCwgdDAgPSB0KHgwKSwgdDEgPSB0KHgxKSwgdDIgPSB0KHgyKSwgazEwID0gdDAgPT09IHQxID8gMCA6IDAuNSAvICh0MSAtIHQwKSwgazIxID0gdDEgPT09IHQyID8gMCA6IDAuNSAvICh0MiAtIHQxKSwgcyA9IHQxIDwgdDAgPyAtMSA6IDE7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaXZlcmdpbmcoKSB7XG4gIHZhciBzY2FsZSA9IGxpbmVhcmlzaCh0cmFuc2Zvcm1lcigpKGlkZW50aXR5KSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBkaXZlcmdpbmcoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXZlcmdpbmdMb2coKSB7XG4gIHZhciBzY2FsZSA9IGxvZ2dpc2godHJhbnNmb3JtZXIoKSkuZG9tYWluKFswLjEsIDEsIDEwXSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBkaXZlcmdpbmdMb2coKSkuYmFzZShzY2FsZS5iYXNlKCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGl2ZXJnaW5nU3ltbG9nKCkge1xuICB2YXIgc2NhbGUgPSBzeW1sb2dpc2godHJhbnNmb3JtZXIoKSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBkaXZlcmdpbmdTeW1sb2coKSkuY29uc3RhbnQoc2NhbGUuY29uc3RhbnQoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXZlcmdpbmdQb3coKSB7XG4gIHZhciBzY2FsZSA9IHBvd2lzaCh0cmFuc2Zvcm1lcigpKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIGRpdmVyZ2luZ1BvdygpKS5leHBvbmVudChzY2FsZS5leHBvbmVudCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpdmVyZ2luZ1NxcnQoKSB7XG4gIHJldHVybiBkaXZlcmdpbmdQb3cuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5leHBvbmVudCgwLjUpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gIHZhciBuID0gc3BlY2lmaWVyLmxlbmd0aCAvIDYgfCAwLCBjb2xvcnMgPSBuZXcgQXJyYXkobiksIGkgPSAwO1xuICB3aGlsZSAoaSA8IG4pIGNvbG9yc1tpXSA9IFwiI1wiICsgc3BlY2lmaWVyLnNsaWNlKGkgKiA2LCArK2kgKiA2KTtcbiAgcmV0dXJuIGNvbG9ycztcbn1cbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCIxZjc3YjRmZjdmMGUyY2EwMmNkNjI3Mjg5NDY3YmQ4YzU2NGJlMzc3YzI3ZjdmN2ZiY2JkMjIxN2JlY2ZcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiN2ZjOTdmYmVhZWQ0ZmRjMDg2ZmZmZjk5Mzg2Y2IwZjAwMjdmYmY1YjE3NjY2NjY2XCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjFiOWU3N2Q5NWYwMjc1NzBiM2U3Mjk4YTY2YTYxZWU2YWIwMmE2NzYxZDY2NjY2NlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCI0MjY5ZDBlZmIxMThmZjcyNWM2Y2M1YjAzY2E5NTFmZjhhYjdhNDYzZjI5N2JiZjU5YzZiNGU5NDk4YTBcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiYTZjZWUzMWY3OGI0YjJkZjhhMzNhMDJjZmI5YTk5ZTMxYTFjZmRiZjZmZmY3ZjAwY2FiMmQ2NmEzZDlhZmZmZjk5YjE1OTI4XCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcImZiYjRhZWIzY2RlM2NjZWJjNWRlY2JlNGZlZDlhNmZmZmZjY2U1ZDhiZGZkZGFlY2YyZjJmMlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCJiM2UyY2RmZGNkYWNjYmQ1ZThmNGNhZTRlNmY1YzlmZmYyYWVmMWUyY2NjY2NjY2NcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiZTQxYTFjMzc3ZWI4NGRhZjRhOTg0ZWEzZmY3ZjAwZmZmZjMzYTY1NjI4Zjc4MWJmOTk5OTk5XCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjY2YzJhNWZjOGQ2MjhkYTBjYmU3OGFjM2E2ZDg1NGZmZDkyZmU1YzQ5NGIzYjNiM1wiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCI4ZGQzYzdmZmZmYjNiZWJhZGFmYjgwNzI4MGIxZDNmZGI0NjJiM2RlNjlmY2NkZTVkOWQ5ZDliYzgwYmRjY2ViYzVmZmVkNmZcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiNGU3OWE3ZjI4ZTJjZTE1NzU5NzZiN2IyNTlhMTRmZWRjOTQ5YWY3YWExZmY5ZGE3OWM3NTVmYmFiMGFiXCIpO1xuIiwiaW1wb3J0IHtpbnRlcnBvbGF0ZVJnYkJhc2lzfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgc2NoZW1lID0+IGludGVycG9sYXRlUmdiQmFzaXMoc2NoZW1lW3NjaGVtZS5sZW5ndGggLSAxXSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJkOGIzNjVmNWY1ZjU1YWI0YWNcIixcbiAgXCJhNjYxMWFkZmMyN2Q4MGNkYzEwMTg1NzFcIixcbiAgXCJhNjYxMWFkZmMyN2RmNWY1ZjU4MGNkYzEwMTg1NzFcIixcbiAgXCI4YzUxMGFkOGIzNjVmNmU4YzNjN2VhZTU1YWI0YWMwMTY2NWVcIixcbiAgXCI4YzUxMGFkOGIzNjVmNmU4YzNmNWY1ZjVjN2VhZTU1YWI0YWMwMTY2NWVcIixcbiAgXCI4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWVcIixcbiAgXCI4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNmNWY1ZjVjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWVcIixcbiAgXCI1NDMwMDU4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWUwMDNjMzBcIixcbiAgXCI1NDMwMDU4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNmNWY1ZjVjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWUwMDNjMzBcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiYWY4ZGMzZjdmN2Y3N2ZiZjdiXCIsXG4gIFwiN2IzMjk0YzJhNWNmYTZkYmEwMDA4ODM3XCIsXG4gIFwiN2IzMjk0YzJhNWNmZjdmN2Y3YTZkYmEwMDA4ODM3XCIsXG4gIFwiNzYyYTgzYWY4ZGMzZTdkNGU4ZDlmMGQzN2ZiZjdiMWI3ODM3XCIsXG4gIFwiNzYyYTgzYWY4ZGMzZTdkNGU4ZjdmN2Y3ZDlmMGQzN2ZiZjdiMWI3ODM3XCIsXG4gIFwiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3XCIsXG4gIFwiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZjdmN2Y3ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3XCIsXG4gIFwiNDAwMDRiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3MDA0NDFiXCIsXG4gIFwiNDAwMDRiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZjdmN2Y3ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3MDA0NDFiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU5YTNjOWY3ZjdmN2ExZDc2YVwiLFxuICBcImQwMWM4YmYxYjZkYWI4ZTE4NjRkYWMyNlwiLFxuICBcImQwMWM4YmYxYjZkYWY3ZjdmN2I4ZTE4NjRkYWMyNlwiLFxuICBcImM1MWI3ZGU5YTNjOWZkZTBlZmU2ZjVkMGExZDc2YTRkOTIyMVwiLFxuICBcImM1MWI3ZGU5YTNjOWZkZTBlZmY3ZjdmN2U2ZjVkMGExZDc2YTRkOTIyMVwiLFxuICBcImM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmU2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMVwiLFxuICBcImM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmY3ZjdmN2U2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMVwiLFxuICBcIjhlMDE1MmM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmU2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMTI3NjQxOVwiLFxuICBcIjhlMDE1MmM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmY3ZjdmN2U2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMTI3NjQxOVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCI5OThlYzNmN2Y3ZjdmMWEzNDBcIixcbiAgXCI1ZTNjOTliMmFiZDJmZGI4NjNlNjYxMDFcIixcbiAgXCI1ZTNjOTliMmFiZDJmN2Y3ZjdmZGI4NjNlNjYxMDFcIixcbiAgXCI1NDI3ODg5OThlYzNkOGRhZWJmZWUwYjZmMWEzNDBiMzU4MDZcIixcbiAgXCI1NDI3ODg5OThlYzNkOGRhZWJmN2Y3ZjdmZWUwYjZmMWEzNDBiMzU4MDZcIixcbiAgXCI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDZcIixcbiAgXCI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmN2Y3ZjdmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDZcIixcbiAgXCIyZDAwNGI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDY3ZjNiMDhcIixcbiAgXCIyZDAwNGI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmN2Y3ZjdmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDY3ZjNiMDhcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWY4YTYyZjdmN2Y3NjdhOWNmXCIsXG4gIFwiY2EwMDIwZjRhNTgyOTJjNWRlMDU3MWIwXCIsXG4gIFwiY2EwMDIwZjRhNTgyZjdmN2Y3OTJjNWRlMDU3MWIwXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZDFlNWYwNjdhOWNmMjE2NmFjXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZjdmN2Y3ZDFlNWYwNjdhOWNmMjE2NmFjXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZjdmN2Y3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjMDUzMDYxXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZjdmN2Y3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjMDUzMDYxXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVmOGE2MmZmZmZmZjk5OTk5OVwiLFxuICBcImNhMDAyMGY0YTU4MmJhYmFiYTQwNDA0MFwiLFxuICBcImNhMDAyMGY0YTU4MmZmZmZmZmJhYmFiYTQwNDA0MFwiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2UwZTBlMDk5OTk5OTRkNGQ0ZFwiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2ZmZmZmZmUwZTBlMDk5OTk5OTRkNGQ0ZFwiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2UwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZFwiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2ZmZmZmZmUwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZFwiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2UwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZDFhMWExYVwiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2ZmZmZmZmUwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZDFhMWExYVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmYzhkNTlmZmZmYmY5MWJmZGJcIixcbiAgXCJkNzE5MWNmZGFlNjFhYmQ5ZTkyYzdiYjZcIixcbiAgXCJkNzE5MWNmZGFlNjFmZmZmYmZhYmQ5ZTkyYzdiYjZcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOTBlMGYzZjg5MWJmZGI0NTc1YjRcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOTBmZmZmYmZlMGYzZjg5MWJmZGI0NTc1YjRcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjRcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBmZmZmYmZlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjRcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjQzMTM2OTVcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBmZmZmYmZlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjQzMTM2OTVcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmM4ZDU5ZmZmZmJmOTFjZjYwXCIsXG4gIFwiZDcxOTFjZmRhZTYxYTZkOTZhMWE5NjQxXCIsXG4gIFwiZDcxOTFjZmRhZTYxZmZmZmJmYTZkOTZhMWE5NjQxXCIsXG4gIFwiZDczMDI3ZmM4ZDU5ZmVlMDhiZDllZjhiOTFjZjYwMWE5ODUwXCIsXG4gIFwiZDczMDI3ZmM4ZDU5ZmVlMDhiZmZmZmJmZDllZjhiOTFjZjYwMWE5ODUwXCIsXG4gIFwiZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwXCIsXG4gIFwiZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwXCIsXG4gIFwiYTUwMDI2ZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwMDA2ODM3XCIsXG4gIFwiYTUwMDI2ZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwMDA2ODM3XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZjOGQ1OWZmZmZiZjk5ZDU5NFwiLFxuICBcImQ3MTkxY2ZkYWU2MWFiZGRhNDJiODNiYVwiLFxuICBcImQ3MTkxY2ZkYWU2MWZmZmZiZmFiZGRhNDJiODNiYVwiLFxuICBcImQ1M2U0ZmZjOGQ1OWZlZTA4YmU2ZjU5ODk5ZDU5NDMyODhiZFwiLFxuICBcImQ1M2U0ZmZjOGQ1OWZlZTA4YmZmZmZiZmU2ZjU5ODk5ZDU5NDMyODhiZFwiLFxuICBcImQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZFwiLFxuICBcImQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmZmZmZiZmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZFwiLFxuICBcIjllMDE0MmQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZDVlNGZhMlwiLFxuICBcIjllMDE0MmQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmZmZmZiZmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZDVlNGZhMlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlNWY1Zjk5OWQ4YzkyY2EyNWZcIixcbiAgXCJlZGY4ZmJiMmUyZTI2NmMyYTQyMzhiNDVcIixcbiAgXCJlZGY4ZmJiMmUyZTI2NmMyYTQyY2EyNWYwMDZkMmNcIixcbiAgXCJlZGY4ZmJjY2VjZTY5OWQ4Yzk2NmMyYTQyY2EyNWYwMDZkMmNcIixcbiAgXCJlZGY4ZmJjY2VjZTY5OWQ4Yzk2NmMyYTQ0MWFlNzYyMzhiNDUwMDU4MjRcIixcbiAgXCJmN2ZjZmRlNWY1ZjljY2VjZTY5OWQ4Yzk2NmMyYTQ0MWFlNzYyMzhiNDUwMDU4MjRcIixcbiAgXCJmN2ZjZmRlNWY1ZjljY2VjZTY5OWQ4Yzk2NmMyYTQ0MWFlNzYyMzhiNDUwMDZkMmMwMDQ0MWJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTBlY2Y0OWViY2RhODg1NmE3XCIsXG4gIFwiZWRmOGZiYjNjZGUzOGM5NmM2ODg0MTlkXCIsXG4gIFwiZWRmOGZiYjNjZGUzOGM5NmM2ODg1NmE3ODEwZjdjXCIsXG4gIFwiZWRmOGZiYmZkM2U2OWViY2RhOGM5NmM2ODg1NmE3ODEwZjdjXCIsXG4gIFwiZWRmOGZiYmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkNmUwMTZiXCIsXG4gIFwiZjdmY2ZkZTBlY2Y0YmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkNmUwMTZiXCIsXG4gIFwiZjdmY2ZkZTBlY2Y0YmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkODEwZjdjNGQwMDRiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImUwZjNkYmE4ZGRiNTQzYTJjYVwiLFxuICBcImYwZjllOGJhZTRiYzdiY2NjNDJiOGNiZVwiLFxuICBcImYwZjllOGJhZTRiYzdiY2NjNDQzYTJjYTA4NjhhY1wiLFxuICBcImYwZjllOGNjZWJjNWE4ZGRiNTdiY2NjNDQzYTJjYTA4NjhhY1wiLFxuICBcImYwZjllOGNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NTg5ZVwiLFxuICBcImY3ZmNmMGUwZjNkYmNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NTg5ZVwiLFxuICBcImY3ZmNmMGUwZjNkYmNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NjhhYzA4NDA4MVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZWU4YzhmZGJiODRlMzRhMzNcIixcbiAgXCJmZWYwZDlmZGNjOGFmYzhkNTlkNzMwMWZcIixcbiAgXCJmZWYwZDlmZGNjOGFmYzhkNTllMzRhMzNiMzAwMDBcIixcbiAgXCJmZWYwZDlmZGQ0OWVmZGJiODRmYzhkNTllMzRhMzNiMzAwMDBcIixcbiAgXCJmZWYwZDlmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWY5OTAwMDBcIixcbiAgXCJmZmY3ZWNmZWU4YzhmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWY5OTAwMDBcIixcbiAgXCJmZmY3ZWNmZWU4YzhmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWZiMzAwMDA3ZjAwMDBcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWNlMmYwYTZiZGRiMWM5MDk5XCIsXG4gIFwiZjZlZmY3YmRjOWUxNjdhOWNmMDI4MThhXCIsXG4gIFwiZjZlZmY3YmRjOWUxNjdhOWNmMWM5MDk5MDE2YzU5XCIsXG4gIFwiZjZlZmY3ZDBkMWU2YTZiZGRiNjdhOWNmMWM5MDk5MDE2YzU5XCIsXG4gIFwiZjZlZmY3ZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2NDUwXCIsXG4gIFwiZmZmN2ZiZWNlMmYwZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2NDUwXCIsXG4gIFwiZmZmN2ZiZWNlMmYwZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2YzU5MDE0NjM2XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVjZTdmMmE2YmRkYjJiOGNiZVwiLFxuICBcImYxZWVmNmJkYzllMTc0YTljZjA1NzBiMFwiLFxuICBcImYxZWVmNmJkYzllMTc0YTljZjJiOGNiZTA0NWE4ZFwiLFxuICBcImYxZWVmNmQwZDFlNmE2YmRkYjc0YTljZjJiOGNiZTA0NWE4ZFwiLFxuICBcImYxZWVmNmQwZDFlNmE2YmRkYjc0YTljZjM2OTBjMDA1NzBiMDAzNGU3YlwiLFxuICBcImZmZjdmYmVjZTdmMmQwZDFlNmE2YmRkYjc0YTljZjM2OTBjMDA1NzBiMDAzNGU3YlwiLFxuICBcImZmZjdmYmVjZTdmMmQwZDFlNmE2YmRkYjc0YTljZjM2OTBjMDA1NzBiMDA0NWE4ZDAyMzg1OFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlN2UxZWZjOTk0YzdkZDFjNzdcIixcbiAgXCJmMWVlZjZkN2I1ZDhkZjY1YjBjZTEyNTZcIixcbiAgXCJmMWVlZjZkN2I1ZDhkZjY1YjBkZDFjNzc5ODAwNDNcIixcbiAgXCJmMWVlZjZkNGI5ZGFjOTk0YzdkZjY1YjBkZDFjNzc5ODAwNDNcIixcbiAgXCJmMWVlZjZkNGI5ZGFjOTk0YzdkZjY1YjBlNzI5OGFjZTEyNTY5MTAwM2ZcIixcbiAgXCJmN2Y0ZjllN2UxZWZkNGI5ZGFjOTk0YzdkZjY1YjBlNzI5OGFjZTEyNTY5MTAwM2ZcIixcbiAgXCJmN2Y0ZjllN2UxZWZkNGI5ZGFjOTk0YzdkZjY1YjBlNzI5OGFjZTEyNTY5ODAwNDM2NzAwMWZcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmRlMGRkZmE5ZmI1YzUxYjhhXCIsXG4gIFwiZmVlYmUyZmJiNGI5Zjc2OGExYWUwMTdlXCIsXG4gIFwiZmVlYmUyZmJiNGI5Zjc2OGExYzUxYjhhN2EwMTc3XCIsXG4gIFwiZmVlYmUyZmNjNWMwZmE5ZmI1Zjc2OGExYzUxYjhhN2EwMTc3XCIsXG4gIFwiZmVlYmUyZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3XCIsXG4gIFwiZmZmN2YzZmRlMGRkZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3XCIsXG4gIFwiZmZmN2YzZmRlMGRkZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3NDkwMDZhXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVkZjhiMTdmY2RiYjJjN2ZiOFwiLFxuICBcImZmZmZjY2ExZGFiNDQxYjZjNDIyNWVhOFwiLFxuICBcImZmZmZjY2ExZGFiNDQxYjZjNDJjN2ZiODI1MzQ5NFwiLFxuICBcImZmZmZjY2M3ZTliNDdmY2RiYjQxYjZjNDJjN2ZiODI1MzQ5NFwiLFxuICBcImZmZmZjY2M3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODBjMmM4NFwiLFxuICBcImZmZmZkOWVkZjhiMWM3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODBjMmM4NFwiLFxuICBcImZmZmZkOWVkZjhiMWM3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODI1MzQ5NDA4MWQ1OFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmN2ZjYjlhZGRkOGUzMWEzNTRcIixcbiAgXCJmZmZmY2NjMmU2OTk3OGM2NzkyMzg0NDNcIixcbiAgXCJmZmZmY2NjMmU2OTk3OGM2NzkzMWEzNTQwMDY4MzdcIixcbiAgXCJmZmZmY2NkOWYwYTNhZGRkOGU3OGM2NzkzMWEzNTQwMDY4MzdcIixcbiAgXCJmZmZmY2NkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDVhMzJcIixcbiAgXCJmZmZmZTVmN2ZjYjlkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDVhMzJcIixcbiAgXCJmZmZmZTVmN2ZjYjlkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDY4MzcwMDQ1MjlcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmZmN2JjZmVjNDRmZDk1ZjBlXCIsXG4gIFwiZmZmZmQ0ZmVkOThlZmU5OTI5Y2M0YzAyXCIsXG4gIFwiZmZmZmQ0ZmVkOThlZmU5OTI5ZDk1ZjBlOTkzNDA0XCIsXG4gIFwiZmZmZmQ0ZmVlMzkxZmVjNDRmZmU5OTI5ZDk1ZjBlOTkzNDA0XCIsXG4gIFwiZmZmZmQ0ZmVlMzkxZmVjNDRmZmU5OTI5ZWM3MDE0Y2M0YzAyOGMyZDA0XCIsXG4gIFwiZmZmZmU1ZmZmN2JjZmVlMzkxZmVjNDRmZmU5OTI5ZWM3MDE0Y2M0YzAyOGMyZDA0XCIsXG4gIFwiZmZmZmU1ZmZmN2JjZmVlMzkxZmVjNDRmZmU5OTI5ZWM3MDE0Y2M0YzAyOTkzNDA0NjYyNTA2XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZmZWRhMGZlYjI0Y2YwM2IyMFwiLFxuICBcImZmZmZiMmZlY2M1Y2ZkOGQzY2UzMWExY1wiLFxuICBcImZmZmZiMmZlY2M1Y2ZkOGQzY2YwM2IyMGJkMDAyNlwiLFxuICBcImZmZmZiMmZlZDk3NmZlYjI0Y2ZkOGQzY2YwM2IyMGJkMDAyNlwiLFxuICBcImZmZmZiMmZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2IxMDAyNlwiLFxuICBcImZmZmZjY2ZmZWRhMGZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2IxMDAyNlwiLFxuICBcImZmZmZjY2ZmZWRhMGZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2JkMDAyNjgwMDAyNlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJkZWViZjc5ZWNhZTEzMTgyYmRcIixcbiAgXCJlZmYzZmZiZGQ3ZTc2YmFlZDYyMTcxYjVcIixcbiAgXCJlZmYzZmZiZGQ3ZTc2YmFlZDYzMTgyYmQwODUxOWNcIixcbiAgXCJlZmYzZmZjNmRiZWY5ZWNhZTE2YmFlZDYzMTgyYmQwODUxOWNcIixcbiAgXCJlZmYzZmZjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODQ1OTRcIixcbiAgXCJmN2ZiZmZkZWViZjdjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODQ1OTRcIixcbiAgXCJmN2ZiZmZkZWViZjdjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODUxOWMwODMwNmJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTVmNWUwYTFkOTliMzFhMzU0XCIsXG4gIFwiZWRmOGU5YmFlNGIzNzRjNDc2MjM4YjQ1XCIsXG4gIFwiZWRmOGU5YmFlNGIzNzRjNDc2MzFhMzU0MDA2ZDJjXCIsXG4gIFwiZWRmOGU5YzdlOWMwYTFkOTliNzRjNDc2MzFhMzU0MDA2ZDJjXCIsXG4gIFwiZWRmOGU5YzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA1YTMyXCIsXG4gIFwiZjdmY2Y1ZTVmNWUwYzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA1YTMyXCIsXG4gIFwiZjdmY2Y1ZTVmNWUwYzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA2ZDJjMDA0NDFiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImYwZjBmMGJkYmRiZDYzNjM2M1wiLFxuICBcImY3ZjdmN2NjY2NjYzk2OTY5NjUyNTI1MlwiLFxuICBcImY3ZjdmN2NjY2NjYzk2OTY5NjYzNjM2MzI1MjUyNVwiLFxuICBcImY3ZjdmN2Q5ZDlkOWJkYmRiZDk2OTY5NjYzNjM2MzI1MjUyNVwiLFxuICBcImY3ZjdmN2Q5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNVwiLFxuICBcImZmZmZmZmYwZjBmMGQ5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNVwiLFxuICBcImZmZmZmZmYwZjBmMGQ5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNTAwMDAwMFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlZmVkZjViY2JkZGM3NTZiYjFcIixcbiAgXCJmMmYwZjdjYmM5ZTI5ZTlhYzg2YTUxYTNcIixcbiAgXCJmMmYwZjdjYmM5ZTI5ZTlhYzg3NTZiYjE1NDI3OGZcIixcbiAgXCJmMmYwZjdkYWRhZWJiY2JkZGM5ZTlhYzg3NTZiYjE1NDI3OGZcIixcbiAgXCJmMmYwZjdkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM0YTE0ODZcIixcbiAgXCJmY2ZiZmRlZmVkZjVkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM0YTE0ODZcIixcbiAgXCJmY2ZiZmRlZmVkZjVkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM1NDI3OGYzZjAwN2RcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmVlMGQyZmM5MjcyZGUyZDI2XCIsXG4gIFwiZmVlNWQ5ZmNhZTkxZmI2YTRhY2IxODFkXCIsXG4gIFwiZmVlNWQ5ZmNhZTkxZmI2YTRhZGUyZDI2YTUwZjE1XCIsXG4gIFwiZmVlNWQ5ZmNiYmExZmM5MjcyZmI2YTRhZGUyZDI2YTUwZjE1XCIsXG4gIFwiZmVlNWQ5ZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkOTkwMDBkXCIsXG4gIFwiZmZmNWYwZmVlMGQyZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkOTkwMDBkXCIsXG4gIFwiZmZmNWYwZmVlMGQyZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkYTUwZjE1NjcwMDBkXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZlZTZjZWZkYWU2YmU2NTUwZFwiLFxuICBcImZlZWRkZWZkYmU4NWZkOGQzY2Q5NDcwMVwiLFxuICBcImZlZWRkZWZkYmU4NWZkOGQzY2U2NTUwZGE2MzYwM1wiLFxuICBcImZlZWRkZWZkZDBhMmZkYWU2YmZkOGQzY2U2NTUwZGE2MzYwM1wiLFxuICBcImZlZWRkZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMThjMmQwNFwiLFxuICBcImZmZjVlYmZlZTZjZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMThjMmQwNFwiLFxuICBcImZmZjVlYmZlZTZjZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMWE2MzYwMzdmMjcwNFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0KSB7XG4gIHQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB0KSk7XG4gIHJldHVybiBcInJnYihcIlxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQoLTQuNTQgLSB0ICogKDM1LjM0IC0gdCAqICgyMzgxLjczIC0gdCAqICg2NDAyLjcgLSB0ICogKDcwMjQuNzIgLSB0ICogMjcxMC41NykpKSkpKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKDMyLjQ5ICsgdCAqICgxNzAuNzMgKyB0ICogKDUyLjgyIC0gdCAqICgxMzEuNDYgLSB0ICogKDE3Ni41OCAtIHQgKiA2Ny4zNykpKSkpKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKDgxLjI0ICsgdCAqICg0NDIuMzYgLSB0ICogKDI0ODIuNDMgLSB0ICogKDYxNjcuMjQgLSB0ICogKDY2MTQuOTQgLSB0ICogMjQ3NS42NykpKSkpKSlcbiAgICAgICsgXCIpXCI7XG59XG4iLCJpbXBvcnQge2N1YmVoZWxpeH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlQ3ViZWhlbGl4TG9uZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoMzAwLCAwLjUsIDAuMCksIGN1YmVoZWxpeCgtMjQwLCAwLjUsIDEuMCkpO1xuIiwiaW1wb3J0IHtjdWJlaGVsaXh9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmd9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgdmFyIHdhcm0gPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KC0xMDAsIDAuNzUsIDAuMzUpLCBjdWJlaGVsaXgoODAsIDEuNTAsIDAuOCkpO1xuXG5leHBvcnQgdmFyIGNvb2wgPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KDI2MCwgMC43NSwgMC4zNSksIGN1YmVoZWxpeCg4MCwgMS41MCwgMC44KSk7XG5cbnZhciBjID0gY3ViZWhlbGl4KCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHQpIHtcbiAgaWYgKHQgPCAwIHx8IHQgPiAxKSB0IC09IE1hdGguZmxvb3IodCk7XG4gIHZhciB0cyA9IE1hdGguYWJzKHQgLSAwLjUpO1xuICBjLmggPSAzNjAgKiB0IC0gMTAwO1xuICBjLnMgPSAxLjUgLSAxLjUgKiB0cztcbiAgYy5sID0gMC44IC0gMC45ICogdHM7XG4gIHJldHVybiBjICsgXCJcIjtcbn1cbiIsImltcG9ydCB7cmdifSBmcm9tIFwiZDMtY29sb3JcIjtcblxudmFyIGMgPSByZ2IoKSxcbiAgICBwaV8xXzMgPSBNYXRoLlBJIC8gMyxcbiAgICBwaV8yXzMgPSBNYXRoLlBJICogMiAvIDM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHQpIHtcbiAgdmFyIHg7XG4gIHQgPSAoMC41IC0gdCkgKiBNYXRoLlBJO1xuICBjLnIgPSAyNTUgKiAoeCA9IE1hdGguc2luKHQpKSAqIHg7XG4gIGMuZyA9IDI1NSAqICh4ID0gTWF0aC5zaW4odCArIHBpXzFfMykpICogeDtcbiAgYy5iID0gMjU1ICogKHggPSBNYXRoLnNpbih0ICsgcGlfMl8zKSkgKiB4O1xuICByZXR1cm4gYyArIFwiXCI7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0KSB7XG4gIHQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB0KSk7XG4gIHJldHVybiBcInJnYihcIlxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQoMzQuNjEgKyB0ICogKDExNzIuMzMgLSB0ICogKDEwNzkzLjU2IC0gdCAqICgzMzMwMC4xMiAtIHQgKiAoMzgzOTQuNDkgLSB0ICogMTQ4MjUuMDUpKSkpKSkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCgyMy4zMSArIHQgKiAoNTU3LjMzICsgdCAqICgxMjI1LjMzIC0gdCAqICgzNTc0Ljk2IC0gdCAqICgxMDczLjc3ICsgdCAqIDcwNy41NikpKSkpKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKDI3LjIgKyB0ICogKDMyMTEuMSAtIHQgKiAoMTUzMjcuOTcgLSB0ICogKDI3ODE0IC0gdCAqICgyMjU2OS4xOCAtIHQgKiA2ODM4LjY2KSkpKSkpKVxuICAgICAgKyBcIilcIjtcbn1cbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5mdW5jdGlvbiByYW1wKHJhbmdlKSB7XG4gIHZhciBuID0gcmFuZ2UubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiByYW5nZVtNYXRoLm1heCgwLCBNYXRoLm1pbihuIC0gMSwgTWF0aC5mbG9vcih0ICogbikpKV07XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoY29sb3JzKFwiNDQwMTU0NDQwMjU2NDUwNDU3NDUwNTU5NDYwNzVhNDYwODVjNDYwYTVkNDYwYjVlNDcwZDYwNDcwZTYxNDcxMDYzNDcxMTY0NDcxMzY1NDgxNDY3NDgxNjY4NDgxNzY5NDgxODZhNDgxYTZjNDgxYjZkNDgxYzZlNDgxZDZmNDgxZjcwNDgyMDcxNDgyMTczNDgyMzc0NDgyNDc1NDgyNTc2NDgyNjc3NDgyODc4NDgyOTc5NDcyYTdhNDcyYzdhNDcyZDdiNDcyZTdjNDcyZjdkNDYzMDdlNDYzMjdlNDYzMzdmNDYzNDgwNDUzNTgxNDUzNzgxNDUzODgyNDQzOTgzNDQzYTgzNDQzYjg0NDMzZDg0NDMzZTg1NDIzZjg1NDI0MDg2NDI0MTg2NDE0Mjg3NDE0NDg3NDA0NTg4NDA0Njg4M2Y0Nzg4M2Y0ODg5M2U0OTg5M2U0YTg5M2U0YzhhM2Q0ZDhhM2Q0ZThhM2M0ZjhhM2M1MDhiM2I1MThiM2I1MjhiM2E1MzhiM2E1NDhjMzk1NThjMzk1NjhjMzg1ODhjMzg1OThjMzc1YThjMzc1YjhkMzY1YzhkMzY1ZDhkMzU1ZThkMzU1ZjhkMzQ2MDhkMzQ2MThkMzM2MjhkMzM2MzhkMzI2NDhlMzI2NThlMzE2NjhlMzE2NzhlMzE2ODhlMzA2OThlMzA2YThlMmY2YjhlMmY2YzhlMmU2ZDhlMmU2ZThlMmU2ZjhlMmQ3MDhlMmQ3MThlMmM3MThlMmM3MjhlMmM3MzhlMmI3NDhlMmI3NThlMmE3NjhlMmE3NzhlMmE3ODhlMjk3OThlMjk3YThlMjk3YjhlMjg3YzhlMjg3ZDhlMjc3ZThlMjc3ZjhlMjc4MDhlMjY4MThlMjY4MjhlMjY4MjhlMjU4MzhlMjU4NDhlMjU4NThlMjQ4NjhlMjQ4NzhlMjM4ODhlMjM4OThlMjM4YThkMjI4YjhkMjI4YzhkMjI4ZDhkMjE4ZThkMjE4ZjhkMjE5MDhkMjE5MThjMjA5MjhjMjA5MjhjMjA5MzhjMWY5NDhjMWY5NThiMWY5NjhiMWY5NzhiMWY5ODhiMWY5OThhMWY5YThhMWU5YjhhMWU5Yzg5MWU5ZDg5MWY5ZTg5MWY5Zjg4MWZhMDg4MWZhMTg4MWZhMTg3MWZhMjg3MjBhMzg2MjBhNDg2MjFhNTg1MjFhNjg1MjJhNzg1MjJhODg0MjNhOTgzMjRhYTgzMjVhYjgyMjVhYzgyMjZhZDgxMjdhZDgxMjhhZTgwMjlhZjdmMmFiMDdmMmNiMTdlMmRiMjdkMmViMzdjMmZiNDdjMzFiNTdiMzJiNjdhMzRiNjc5MzViNzc5MzdiODc4MzhiOTc3M2FiYTc2M2JiYjc1M2RiYzc0M2ZiYzczNDBiZDcyNDJiZTcxNDRiZjcwNDZjMDZmNDhjMTZlNGFjMTZkNGNjMjZjNGVjMzZiNTBjNDZhNTJjNTY5NTRjNTY4NTZjNjY3NThjNzY1NWFjODY0NWNjODYzNWVjOTYyNjBjYTYwNjNjYjVmNjVjYjVlNjdjYzVjNjljZDViNmNjZDVhNmVjZTU4NzBjZjU3NzNkMDU2NzVkMDU0NzdkMTUzN2FkMTUxN2NkMjUwN2ZkMzRlODFkMzRkODRkNDRiODZkNTQ5ODlkNTQ4OGJkNjQ2OGVkNjQ1OTBkNzQzOTNkNzQxOTVkODQwOThkODNlOWJkOTNjOWRkOTNiYTBkYTM5YTJkYTM3YTVkYjM2YThkYjM0YWFkYzMyYWRkYzMwYjBkZDJmYjJkZDJkYjVkZTJiYjhkZTI5YmFkZTI4YmRkZjI2YzBkZjI1YzJkZjIzYzVlMDIxYzhlMDIwY2FlMTFmY2RlMTFkZDBlMTFjZDJlMjFiZDVlMjFhZDhlMjE5ZGFlMzE5ZGRlMzE4ZGZlMzE4ZTJlNDE4ZTVlNDE5ZTdlNDE5ZWFlNTFhZWNlNTFiZWZlNTFjZjFlNTFkZjRlNjFlZjZlNjIwZjhlNjIxZmJlNzIzZmRlNzI1XCIpKTtcblxuZXhwb3J0IHZhciBtYWdtYSA9IHJhbXAoY29sb3JzKFwiMDAwMDA0MDEwMDA1MDEwMTA2MDEwMTA4MDIwMTA5MDIwMjBiMDIwMjBkMDMwMzBmMDMwMzEyMDQwNDE0MDUwNDE2MDYwNTE4MDYwNTFhMDcwNjFjMDgwNzFlMDkwNzIwMGEwODIyMGIwOTI0MGMwOTI2MGQwYTI5MGUwYjJiMTAwYjJkMTEwYzJmMTIwZDMxMTMwZDM0MTQwZTM2MTUwZTM4MTYwZjNiMTgwZjNkMTkxMDNmMWExMDQyMWMxMDQ0MWQxMTQ3MWUxMTQ5MjAxMTRiMjExMTRlMjIxMTUwMjQxMjUzMjUxMjU1MjcxMjU4MjkxMTVhMmExMTVjMmMxMTVmMmQxMTYxMmYxMTYzMzExMTY1MzMxMDY3MzQxMDY5MzYxMDZiMzgxMDZjMzkwZjZlM2IwZjcwM2QwZjcxM2YwZjcyNDAwZjc0NDIwZjc1NDQwZjc2NDUxMDc3NDcxMDc4NDkxMDc4NGExMDc5NGMxMTdhNGUxMTdiNGYxMjdiNTExMjdjNTIxMzdjNTQxMzdkNTYxNDdkNTcxNTdlNTkxNTdlNWExNjdlNWMxNjdmNWQxNzdmNWYxODdmNjAxODgwNjIxOTgwNjQxYTgwNjUxYTgwNjcxYjgwNjgxYzgxNmExYzgxNmIxZDgxNmQxZDgxNmUxZTgxNzAxZjgxNzIxZjgxNzMyMDgxNzUyMTgxNzYyMTgxNzgyMjgxNzkyMjgyN2IyMzgyN2MyMzgyN2UyNDgyODAyNTgyODEyNTgxODMyNjgxODQyNjgxODYyNzgxODgyNzgxODkyODgxOGIyOTgxOGMyOTgxOGUyYTgxOTAyYTgxOTEyYjgxOTMyYjgwOTQyYzgwOTYyYzgwOTgyZDgwOTkyZDgwOWIyZTdmOWMyZTdmOWUyZjdmYTAyZjdmYTEzMDdlYTMzMDdlYTUzMTdlYTYzMTdkYTgzMjdkYWEzMzdkYWIzMzdjYWQzNDdjYWUzNDdiYjAzNTdiYjIzNTdiYjMzNjdhYjUzNjdhYjczNzc5YjgzNzc5YmEzODc4YmMzOTc4YmQzOTc3YmYzYTc3YzAzYTc2YzIzYjc1YzQzYzc1YzUzYzc0YzczZDczYzgzZTczY2EzZTcyY2MzZjcxY2Q0MDcxY2Y0MDcwZDA0MTZmZDI0MjZmZDM0MzZlZDU0NDZkZDY0NTZjZDg0NTZjZDk0NjZiZGI0NzZhZGM0ODY5ZGU0OTY4ZGY0YTY4ZTA0YzY3ZTI0ZDY2ZTM0ZTY1ZTQ0ZjY0ZTU1MDY0ZTc1MjYzZTg1MzYyZTk1NDYyZWE1NjYxZWI1NzYwZWM1ODYwZWQ1YTVmZWU1YjVlZWY1ZDVlZjA1ZjVlZjE2MDVkZjI2MjVkZjI2NDVjZjM2NTVjZjQ2NzVjZjQ2OTVjZjU2YjVjZjY2YzVjZjY2ZTVjZjc3MDVjZjc3MjVjZjg3NDVjZjg3NjVjZjk3ODVkZjk3OTVkZjk3YjVkZmE3ZDVlZmE3ZjVlZmE4MTVmZmI4MzVmZmI4NTYwZmI4NzYxZmM4OTYxZmM4YTYyZmM4YzYzZmM4ZTY0ZmM5MDY1ZmQ5MjY2ZmQ5NDY3ZmQ5NjY4ZmQ5ODY5ZmQ5YTZhZmQ5YjZiZmU5ZDZjZmU5ZjZkZmVhMTZlZmVhMzZmZmVhNTcxZmVhNzcyZmVhOTczZmVhYTc0ZmVhYzc2ZmVhZTc3ZmViMDc4ZmViMjdhZmViNDdiZmViNjdjZmViNzdlZmViOTdmZmViYjgxZmViZDgyZmViZjg0ZmVjMTg1ZmVjMjg3ZmVjNDg4ZmVjNjhhZmVjODhjZmVjYThkZmVjYzhmZmVjZDkwZmVjZjkyZmVkMTk0ZmVkMzk1ZmVkNTk3ZmVkNzk5ZmVkODlhZmRkYTljZmRkYzllZmRkZWEwZmRlMGExZmRlMmEzZmRlM2E1ZmRlNWE3ZmRlN2E5ZmRlOWFhZmRlYmFjZmNlY2FlZmNlZWIwZmNmMGIyZmNmMmI0ZmNmNGI2ZmNmNmI4ZmNmN2I5ZmNmOWJiZmNmYmJkZmNmZGJmXCIpKTtcblxuZXhwb3J0IHZhciBpbmZlcm5vID0gcmFtcChjb2xvcnMoXCIwMDAwMDQwMTAwMDUwMTAxMDYwMTAxMDgwMjAxMGEwMjAyMGMwMjAyMGUwMzAyMTAwNDAzMTIwNDAzMTQwNTA0MTcwNjA0MTkwNzA1MWIwODA1MWQwOTA2MWYwYTA3MjIwYjA3MjQwYzA4MjYwZDA4MjkwZTA5MmIxMDA5MmQxMTBhMzAxMjBhMzIxNDBiMzQxNTBiMzcxNjBiMzkxODBjM2MxOTBjM2UxYjBjNDExYzBjNDMxZTBjNDUxZjBjNDgyMTBjNGEyMzBjNGMyNDBjNGYyNjBjNTEyODBiNTMyOTBiNTUyYjBiNTcyZDBiNTkyZjBhNWIzMTBhNWMzMjBhNWUzNDBhNWYzNjA5NjEzODA5NjIzOTA5NjMzYjA5NjQzZDA5NjUzZTA5NjY0MDBhNjc0MjBhNjg0NDBhNjg0NTBhNjk0NzBiNmE0OTBiNmE0YTBjNmI0YzBjNmI0ZDBkNmM0ZjBkNmM1MTBlNmM1MjBlNmQ1NDBmNmQ1NTBmNmQ1NzEwNmU1OTEwNmU1YTExNmU1YzEyNmU1ZDEyNmU1ZjEzNmU2MTEzNmU2MjE0NmU2NDE1NmU2NTE1NmU2NzE2NmU2OTE2NmU2YTE3NmU2YzE4NmU2ZDE4NmU2ZjE5NmU3MTE5NmU3MjFhNmU3NDFhNmU3NTFiNmU3NzFjNmQ3ODFjNmQ3YTFkNmQ3YzFkNmQ3ZDFlNmQ3ZjFlNmM4MDFmNmM4MjIwNmM4NDIwNmI4NTIxNmI4NzIxNmI4ODIyNmE4YTIyNmE4YzIzNjk4ZDIzNjk4ZjI0Njk5MDI1Njg5MjI1Njg5MzI2Njc5NTI2Njc5NzI3NjY5ODI3NjY5YTI4NjU5YjI5NjQ5ZDI5NjQ5ZjJhNjNhMDJhNjNhMjJiNjJhMzJjNjFhNTJjNjBhNjJkNjBhODJlNWZhOTJlNWVhYjJmNWVhZDMwNWRhZTMwNWNiMDMxNWJiMTMyNWFiMzMyNWFiNDMzNTliNjM0NThiNzM1NTdiOTM1NTZiYTM2NTViYzM3NTRiZDM4NTNiZjM5NTJjMDNhNTFjMTNhNTBjMzNiNGZjNDNjNGVjNjNkNGRjNzNlNGNjODNmNGJjYTQwNGFjYjQxNDljYzQyNDhjZTQzNDdjZjQ0NDZkMDQ1NDVkMjQ2NDRkMzQ3NDNkNDQ4NDJkNTRhNDFkNzRiM2ZkODRjM2VkOTRkM2RkYTRlM2NkYjUwM2JkZDUxM2FkZTUyMzhkZjUzMzdlMDU1MzZlMTU2MzVlMjU3MzRlMzU5MzNlNDVhMzFlNTVjMzBlNjVkMmZlNzVlMmVlODYwMmRlOTYxMmJlYTYzMmFlYjY0MjllYjY2MjhlYzY3MjZlZDY5MjVlZTZhMjRlZjZjMjNlZjZlMjFmMDZmMjBmMTcxMWZmMTczMWRmMjc0MWNmMzc2MWJmMzc4MTlmNDc5MThmNTdiMTdmNTdkMTVmNjdlMTRmNjgwMTNmNzgyMTJmNzg0MTBmODg1MGZmODg3MGVmODg5MGNmOThiMGJmOThjMGFmOThlMDlmYTkwMDhmYTkyMDdmYTk0MDdmYjk2MDZmYjk3MDZmYjk5MDZmYjliMDZmYjlkMDdmYzlmMDdmY2ExMDhmY2EzMDlmY2E1MGFmY2E2MGNmY2E4MGRmY2FhMGZmY2FjMTFmY2FlMTJmY2IwMTRmY2IyMTZmY2I0MThmYmI2MWFmYmI4MWRmYmJhMWZmYmJjMjFmYmJlMjNmYWMwMjZmYWMyMjhmYWM0MmFmYWM2MmRmOWM3MmZmOWM5MzJmOWNiMzVmOGNkMzdmOGNmM2FmN2QxM2RmN2QzNDBmNmQ1NDNmNmQ3NDZmNWQ5NDlmNWRiNGNmNGRkNGZmNGRmNTNmNGUxNTZmM2UzNWFmM2U1NWRmMmU2NjFmMmU4NjVmMmVhNjlmMWVjNmRmMWVkNzFmMWVmNzVmMWYxNzlmMmYyN2RmMmY0ODJmM2Y1ODZmM2Y2OGFmNGY4OGVmNWY5OTJmNmZhOTZmOGZiOWFmOWZjOWRmYWZkYTFmY2ZmYTRcIikpO1xuXG5leHBvcnQgdmFyIHBsYXNtYSA9IHJhbXAoY29sb3JzKFwiMGQwODg3MTAwNzg4MTMwNzg5MTYwNzhhMTkwNjhjMWIwNjhkMWQwNjhlMjAwNjhmMjIwNjkwMjQwNjkxMjYwNTkxMjgwNTkyMmEwNTkzMmMwNTk0MmUwNTk1MmYwNTk2MzEwNTk3MzMwNTk3MzUwNDk4MzcwNDk5MzgwNDlhM2EwNDlhM2MwNDliM2UwNDljM2YwNDljNDEwNDlkNDMwMzllNDQwMzllNDYwMzlmNDgwMzlmNDkwM2EwNGIwM2ExNGMwMmExNGUwMmEyNTAwMmEyNTEwMmEzNTMwMmEzNTUwMmE0NTYwMWE0NTgwMWE0NTkwMWE1NWIwMWE1NWMwMWE2NWUwMWE2NjAwMWE2NjEwMGE3NjMwMGE3NjQwMGE3NjYwMGE3NjcwMGE4NjkwMGE4NmEwMGE4NmMwMGE4NmUwMGE4NmYwMGE4NzEwMGE4NzIwMWE4NzQwMWE4NzUwMWE4NzcwMWE4NzgwMWE4N2EwMmE4N2IwMmE4N2QwM2E4N2UwM2E4ODAwNGE4ODEwNGE3ODMwNWE3ODQwNWE3ODYwNmE2ODcwN2E2ODgwOGE2OGEwOWE1OGIwYWE1OGQwYmE1OGUwY2E0OGYwZGE0OTEwZWEzOTIwZmEzOTQxMGEyOTUxMWExOTYxM2ExOTgxNGEwOTkxNTlmOWExNjlmOWMxNzllOWQxODlkOWUxOTlkYTAxYTljYTExYjliYTIxZDlhYTMxZTlhYTUxZjk5YTYyMDk4YTcyMTk3YTgyMjk2YWEyMzk1YWIyNDk0YWMyNjk0YWQyNzkzYWUyODkyYjAyOTkxYjEyYTkwYjIyYjhmYjMyYzhlYjQyZThkYjUyZjhjYjYzMDhiYjczMThhYjgzMjg5YmEzMzg4YmIzNDg4YmMzNTg3YmQzNzg2YmUzODg1YmYzOTg0YzAzYTgzYzEzYjgyYzIzYzgxYzMzZDgwYzQzZTdmYzU0MDdlYzY0MTdkYzc0MjdjYzg0MzdiYzk0NDdhY2E0NTdhY2I0Njc5Y2M0Nzc4Y2M0OTc3Y2Q0YTc2Y2U0Yjc1Y2Y0Yzc0ZDA0ZDczZDE0ZTcyZDI0ZjcxZDM1MTcxZDQ1MjcwZDU1MzZmZDU1NDZlZDY1NTZkZDc1NjZjZDg1NzZiZDk1ODZhZGE1YTZhZGE1YjY5ZGI1YzY4ZGM1ZDY3ZGQ1ZTY2ZGU1ZjY1ZGU2MTY0ZGY2MjYzZTA2MzYzZTE2NDYyZTI2NTYxZTI2NjYwZTM2ODVmZTQ2OTVlZTU2YTVkZTU2YjVkZTY2YzVjZTc2ZTViZTc2ZjVhZTg3MDU5ZTk3MTU4ZTk3MjU3ZWE3NDU3ZWI3NTU2ZWI3NjU1ZWM3NzU0ZWQ3OTUzZWQ3YTUyZWU3YjUxZWY3YzUxZWY3ZTUwZjA3ZjRmZjA4MDRlZjE4MTRkZjE4MzRjZjI4NDRiZjM4NTRiZjM4NzRhZjQ4ODQ5ZjQ4OTQ4ZjU4YjQ3ZjU4YzQ2ZjY4ZDQ1ZjY4ZjQ0Zjc5MDQ0Zjc5MTQzZjc5MzQyZjg5NDQxZjg5NTQwZjk5NzNmZjk5ODNlZjk5YTNlZmE5YjNkZmE5YzNjZmE5ZTNiZmI5ZjNhZmJhMTM5ZmJhMjM4ZmNhMzM4ZmNhNTM3ZmNhNjM2ZmNhODM1ZmNhOTM0ZmRhYjMzZmRhYzMzZmRhZTMyZmRhZjMxZmRiMTMwZmRiMjJmZmRiNDJmZmRiNTJlZmViNzJkZmViODJjZmViYTJjZmViYjJiZmViZDJhZmViZTJhZmVjMDI5ZmRjMjI5ZmRjMzI4ZmRjNTI3ZmRjNjI3ZmRjODI3ZmRjYTI2ZmRjYjI2ZmNjZDI1ZmNjZTI1ZmNkMDI1ZmNkMjI1ZmJkMzI0ZmJkNTI0ZmJkNzI0ZmFkODI0ZmFkYTI0ZjlkYzI0ZjlkZDI1ZjhkZjI1ZjhlMTI1ZjdlMjI1ZjdlNDI1ZjZlNjI2ZjZlODI2ZjVlOTI2ZjVlYjI3ZjRlZDI3ZjNlZTI3ZjNmMDI3ZjJmMjI3ZjFmNDI2ZjFmNTI1ZjBmNzI0ZjBmOTIxXCIpKTtcbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuL2NyZWF0b3IuanNcIjtcbmltcG9ydCBzZWxlY3QgZnJvbSBcIi4vc2VsZWN0LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHNlbGVjdChjcmVhdG9yKG5hbWUpLmNhbGwoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSk7XG59XG4iLCJ2YXIgbmV4dElkID0gMDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9jYWwoKSB7XG4gIHJldHVybiBuZXcgTG9jYWw7XG59XG5cbmZ1bmN0aW9uIExvY2FsKCkge1xuICB0aGlzLl8gPSBcIkBcIiArICgrK25leHRJZCkudG9TdHJpbmcoMzYpO1xufVxuXG5Mb2NhbC5wcm90b3R5cGUgPSBsb2NhbC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBMb2NhbCxcbiAgZ2V0OiBmdW5jdGlvbihub2RlKSB7XG4gICAgdmFyIGlkID0gdGhpcy5fO1xuICAgIHdoaWxlICghKGlkIGluIG5vZGUpKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICAgIHJldHVybiBub2RlW2lkXTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihub2RlLCB2YWx1ZSkge1xuICAgIHJldHVybiBub2RlW3RoaXMuX10gPSB2YWx1ZTtcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIHRoaXMuXyBpbiBub2RlICYmIGRlbGV0ZSBub2RlW3RoaXMuX107XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fO1xuICB9XG59O1xuIiwiaW1wb3J0IHBvaW50ZXIgZnJvbSBcIi4vcG9pbnRlci5qc1wiO1xuaW1wb3J0IHNvdXJjZUV2ZW50IGZyb20gXCIuL3NvdXJjZUV2ZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGV2ZW50cywgbm9kZSkge1xuICBpZiAoZXZlbnRzLnRhcmdldCkgeyAvLyBpLmUuLCBpbnN0YW5jZW9mIEV2ZW50LCBub3QgVG91Y2hMaXN0IG9yIGl0ZXJhYmxlXG4gICAgZXZlbnRzID0gc291cmNlRXZlbnQoZXZlbnRzKTtcbiAgICBpZiAobm9kZSA9PT0gdW5kZWZpbmVkKSBub2RlID0gZXZlbnRzLmN1cnJlbnRUYXJnZXQ7XG4gICAgZXZlbnRzID0gZXZlbnRzLnRvdWNoZXMgfHwgW2V2ZW50c107XG4gIH1cbiAgcmV0dXJuIEFycmF5LmZyb20oZXZlbnRzLCBldmVudCA9PiBwb2ludGVyKGV2ZW50LCBub2RlKSk7XG59XG4iLCJpbXBvcnQgYXJyYXkgZnJvbSBcIi4vYXJyYXkuanNcIjtcbmltcG9ydCB7U2VsZWN0aW9uLCByb290fSBmcm9tIFwiLi9zZWxlY3Rpb24vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBuZXcgU2VsZWN0aW9uKFtkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKV0sIFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdKVxuICAgICAgOiBuZXcgU2VsZWN0aW9uKFthcnJheShzZWxlY3RvcildLCByb290KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbnN0YW50KCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IGNvbnN0IGFicyA9IE1hdGguYWJzO1xuZXhwb3J0IGNvbnN0IGF0YW4yID0gTWF0aC5hdGFuMjtcbmV4cG9ydCBjb25zdCBjb3MgPSBNYXRoLmNvcztcbmV4cG9ydCBjb25zdCBtYXggPSBNYXRoLm1heDtcbmV4cG9ydCBjb25zdCBtaW4gPSBNYXRoLm1pbjtcbmV4cG9ydCBjb25zdCBzaW4gPSBNYXRoLnNpbjtcbmV4cG9ydCBjb25zdCBzcXJ0ID0gTWF0aC5zcXJ0O1xuXG5leHBvcnQgY29uc3QgZXBzaWxvbiA9IDFlLTEyO1xuZXhwb3J0IGNvbnN0IHBpID0gTWF0aC5QSTtcbmV4cG9ydCBjb25zdCBoYWxmUGkgPSBwaSAvIDI7XG5leHBvcnQgY29uc3QgdGF1ID0gMiAqIHBpO1xuXG5leHBvcnQgZnVuY3Rpb24gYWNvcyh4KSB7XG4gIHJldHVybiB4ID4gMSA/IDAgOiB4IDwgLTEgPyBwaSA6IE1hdGguYWNvcyh4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzaW4oeCkge1xuICByZXR1cm4geCA+PSAxID8gaGFsZlBpIDogeCA8PSAtMSA/IC1oYWxmUGkgOiBNYXRoLmFzaW4oeCk7XG59XG4iLCJpbXBvcnQge1BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aXRoUGF0aChzaGFwZSkge1xuICBsZXQgZGlnaXRzID0gMztcblxuICBzaGFwZS5kaWdpdHMgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZGlnaXRzO1xuICAgIGlmIChfID09IG51bGwpIHtcbiAgICAgIGRpZ2l0cyA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGQgPSBNYXRoLmZsb29yKF8pO1xuICAgICAgaWYgKCEoZCA+PSAwKSkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYGludmFsaWQgZGlnaXRzOiAke199YCk7XG4gICAgICBkaWdpdHMgPSBkO1xuICAgIH1cbiAgICByZXR1cm4gc2hhcGU7XG4gIH07XG5cbiAgcmV0dXJuICgpID0+IG5ldyBQYXRoKGRpZ2l0cyk7XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCB7YWJzLCBhY29zLCBhc2luLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBoYWxmUGksIG1heCwgbWluLCBwaSwgc2luLCBzcXJ0LCB0YXV9IGZyb20gXCIuL21hdGguanNcIjtcbmltcG9ydCB7d2l0aFBhdGh9IGZyb20gXCIuL3BhdGguanNcIjtcblxuZnVuY3Rpb24gYXJjSW5uZXJSYWRpdXMoZCkge1xuICByZXR1cm4gZC5pbm5lclJhZGl1cztcbn1cblxuZnVuY3Rpb24gYXJjT3V0ZXJSYWRpdXMoZCkge1xuICByZXR1cm4gZC5vdXRlclJhZGl1cztcbn1cblxuZnVuY3Rpb24gYXJjU3RhcnRBbmdsZShkKSB7XG4gIHJldHVybiBkLnN0YXJ0QW5nbGU7XG59XG5cbmZ1bmN0aW9uIGFyY0VuZEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQuZW5kQW5nbGU7XG59XG5cbmZ1bmN0aW9uIGFyY1BhZEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQgJiYgZC5wYWRBbmdsZTsgLy8gTm90ZTogb3B0aW9uYWwhXG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdCh4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpIHtcbiAgdmFyIHgxMCA9IHgxIC0geDAsIHkxMCA9IHkxIC0geTAsXG4gICAgICB4MzIgPSB4MyAtIHgyLCB5MzIgPSB5MyAtIHkyLFxuICAgICAgdCA9IHkzMiAqIHgxMCAtIHgzMiAqIHkxMDtcbiAgaWYgKHQgKiB0IDwgZXBzaWxvbikgcmV0dXJuO1xuICB0ID0gKHgzMiAqICh5MCAtIHkyKSAtIHkzMiAqICh4MCAtIHgyKSkgLyB0O1xuICByZXR1cm4gW3gwICsgdCAqIHgxMCwgeTAgKyB0ICogeTEwXTtcbn1cblxuLy8gQ29tcHV0ZSBwZXJwZW5kaWN1bGFyIG9mZnNldCBsaW5lIG9mIGxlbmd0aCByYy5cbi8vIGh0dHA6Ly9tYXRod29ybGQud29sZnJhbS5jb20vQ2lyY2xlLUxpbmVJbnRlcnNlY3Rpb24uaHRtbFxuZnVuY3Rpb24gY29ybmVyVGFuZ2VudHMoeDAsIHkwLCB4MSwgeTEsIHIxLCByYywgY3cpIHtcbiAgdmFyIHgwMSA9IHgwIC0geDEsXG4gICAgICB5MDEgPSB5MCAtIHkxLFxuICAgICAgbG8gPSAoY3cgPyByYyA6IC1yYykgLyBzcXJ0KHgwMSAqIHgwMSArIHkwMSAqIHkwMSksXG4gICAgICBveCA9IGxvICogeTAxLFxuICAgICAgb3kgPSAtbG8gKiB4MDEsXG4gICAgICB4MTEgPSB4MCArIG94LFxuICAgICAgeTExID0geTAgKyBveSxcbiAgICAgIHgxMCA9IHgxICsgb3gsXG4gICAgICB5MTAgPSB5MSArIG95LFxuICAgICAgeDAwID0gKHgxMSArIHgxMCkgLyAyLFxuICAgICAgeTAwID0gKHkxMSArIHkxMCkgLyAyLFxuICAgICAgZHggPSB4MTAgLSB4MTEsXG4gICAgICBkeSA9IHkxMCAtIHkxMSxcbiAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHksXG4gICAgICByID0gcjEgLSByYyxcbiAgICAgIEQgPSB4MTEgKiB5MTAgLSB4MTAgKiB5MTEsXG4gICAgICBkID0gKGR5IDwgMCA/IC0xIDogMSkgKiBzcXJ0KG1heCgwLCByICogciAqIGQyIC0gRCAqIEQpKSxcbiAgICAgIGN4MCA9IChEICogZHkgLSBkeCAqIGQpIC8gZDIsXG4gICAgICBjeTAgPSAoLUQgKiBkeCAtIGR5ICogZCkgLyBkMixcbiAgICAgIGN4MSA9IChEICogZHkgKyBkeCAqIGQpIC8gZDIsXG4gICAgICBjeTEgPSAoLUQgKiBkeCArIGR5ICogZCkgLyBkMixcbiAgICAgIGR4MCA9IGN4MCAtIHgwMCxcbiAgICAgIGR5MCA9IGN5MCAtIHkwMCxcbiAgICAgIGR4MSA9IGN4MSAtIHgwMCxcbiAgICAgIGR5MSA9IGN5MSAtIHkwMDtcblxuICAvLyBQaWNrIHRoZSBjbG9zZXIgb2YgdGhlIHR3byBpbnRlcnNlY3Rpb24gcG9pbnRzLlxuICAvLyBUT0RPIElzIHRoZXJlIGEgZmFzdGVyIHdheSB0byBkZXRlcm1pbmUgd2hpY2ggaW50ZXJzZWN0aW9uIHRvIHVzZT9cbiAgaWYgKGR4MCAqIGR4MCArIGR5MCAqIGR5MCA+IGR4MSAqIGR4MSArIGR5MSAqIGR5MSkgY3gwID0gY3gxLCBjeTAgPSBjeTE7XG5cbiAgcmV0dXJuIHtcbiAgICBjeDogY3gwLFxuICAgIGN5OiBjeTAsXG4gICAgeDAxOiAtb3gsXG4gICAgeTAxOiAtb3ksXG4gICAgeDExOiBjeDAgKiAocjEgLyByIC0gMSksXG4gICAgeTExOiBjeTAgKiAocjEgLyByIC0gMSlcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBpbm5lclJhZGl1cyA9IGFyY0lubmVyUmFkaXVzLFxuICAgICAgb3V0ZXJSYWRpdXMgPSBhcmNPdXRlclJhZGl1cyxcbiAgICAgIGNvcm5lclJhZGl1cyA9IGNvbnN0YW50KDApLFxuICAgICAgcGFkUmFkaXVzID0gbnVsbCxcbiAgICAgIHN0YXJ0QW5nbGUgPSBhcmNTdGFydEFuZ2xlLFxuICAgICAgZW5kQW5nbGUgPSBhcmNFbmRBbmdsZSxcbiAgICAgIHBhZEFuZ2xlID0gYXJjUGFkQW5nbGUsXG4gICAgICBjb250ZXh0ID0gbnVsbCxcbiAgICAgIHBhdGggPSB3aXRoUGF0aChhcmMpO1xuXG4gIGZ1bmN0aW9uIGFyYygpIHtcbiAgICB2YXIgYnVmZmVyLFxuICAgICAgICByLFxuICAgICAgICByMCA9ICtpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICByMSA9ICtvdXRlclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICBhMCA9IHN0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGhhbGZQaSxcbiAgICAgICAgYTEgPSBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZlBpLFxuICAgICAgICBkYSA9IGFicyhhMSAtIGEwKSxcbiAgICAgICAgY3cgPSBhMSA+IGEwO1xuXG4gICAgaWYgKCFjb250ZXh0KSBjb250ZXh0ID0gYnVmZmVyID0gcGF0aCgpO1xuXG4gICAgLy8gRW5zdXJlIHRoYXQgdGhlIG91dGVyIHJhZGl1cyBpcyBhbHdheXMgbGFyZ2VyIHRoYW4gdGhlIGlubmVyIHJhZGl1cy5cbiAgICBpZiAocjEgPCByMCkgciA9IHIxLCByMSA9IHIwLCByMCA9IHI7XG5cbiAgICAvLyBJcyBpdCBhIHBvaW50P1xuICAgIGlmICghKHIxID4gZXBzaWxvbikpIGNvbnRleHQubW92ZVRvKDAsIDApO1xuXG4gICAgLy8gT3IgaXMgaXQgYSBjaXJjbGUgb3IgYW5udWx1cz9cbiAgICBlbHNlIGlmIChkYSA+IHRhdSAtIGVwc2lsb24pIHtcbiAgICAgIGNvbnRleHQubW92ZVRvKHIxICogY29zKGEwKSwgcjEgKiBzaW4oYTApKTtcbiAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIxLCBhMCwgYTEsICFjdyk7XG4gICAgICBpZiAocjAgPiBlcHNpbG9uKSB7XG4gICAgICAgIGNvbnRleHQubW92ZVRvKHIwICogY29zKGExKSwgcjAgKiBzaW4oYTEpKTtcbiAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjAsIGExLCBhMCwgY3cpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE9yIGlzIGl0IGEgY2lyY3VsYXIgb3IgYW5udWxhciBzZWN0b3I/XG4gICAgZWxzZSB7XG4gICAgICB2YXIgYTAxID0gYTAsXG4gICAgICAgICAgYTExID0gYTEsXG4gICAgICAgICAgYTAwID0gYTAsXG4gICAgICAgICAgYTEwID0gYTEsXG4gICAgICAgICAgZGEwID0gZGEsXG4gICAgICAgICAgZGExID0gZGEsXG4gICAgICAgICAgYXAgPSBwYWRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC8gMixcbiAgICAgICAgICBycCA9IChhcCA+IGVwc2lsb24pICYmIChwYWRSYWRpdXMgPyArcGFkUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBzcXJ0KHIwICogcjAgKyByMSAqIHIxKSksXG4gICAgICAgICAgcmMgPSBtaW4oYWJzKHIxIC0gcjApIC8gMiwgK2Nvcm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSxcbiAgICAgICAgICByYzAgPSByYyxcbiAgICAgICAgICByYzEgPSByYyxcbiAgICAgICAgICB0MCxcbiAgICAgICAgICB0MTtcblxuICAgICAgLy8gQXBwbHkgcGFkZGluZz8gTm90ZSB0aGF0IHNpbmNlIHIxIOKJpSByMCwgZGExIOKJpSBkYTAuXG4gICAgICBpZiAocnAgPiBlcHNpbG9uKSB7XG4gICAgICAgIHZhciBwMCA9IGFzaW4ocnAgLyByMCAqIHNpbihhcCkpLFxuICAgICAgICAgICAgcDEgPSBhc2luKHJwIC8gcjEgKiBzaW4oYXApKTtcbiAgICAgICAgaWYgKChkYTAgLT0gcDAgKiAyKSA+IGVwc2lsb24pIHAwICo9IChjdyA/IDEgOiAtMSksIGEwMCArPSBwMCwgYTEwIC09IHAwO1xuICAgICAgICBlbHNlIGRhMCA9IDAsIGEwMCA9IGExMCA9IChhMCArIGExKSAvIDI7XG4gICAgICAgIGlmICgoZGExIC09IHAxICogMikgPiBlcHNpbG9uKSBwMSAqPSAoY3cgPyAxIDogLTEpLCBhMDEgKz0gcDEsIGExMSAtPSBwMTtcbiAgICAgICAgZWxzZSBkYTEgPSAwLCBhMDEgPSBhMTEgPSAoYTAgKyBhMSkgLyAyO1xuICAgICAgfVxuXG4gICAgICB2YXIgeDAxID0gcjEgKiBjb3MoYTAxKSxcbiAgICAgICAgICB5MDEgPSByMSAqIHNpbihhMDEpLFxuICAgICAgICAgIHgxMCA9IHIwICogY29zKGExMCksXG4gICAgICAgICAgeTEwID0gcjAgKiBzaW4oYTEwKTtcblxuICAgICAgLy8gQXBwbHkgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgaWYgKHJjID4gZXBzaWxvbikge1xuICAgICAgICB2YXIgeDExID0gcjEgKiBjb3MoYTExKSxcbiAgICAgICAgICAgIHkxMSA9IHIxICogc2luKGExMSksXG4gICAgICAgICAgICB4MDAgPSByMCAqIGNvcyhhMDApLFxuICAgICAgICAgICAgeTAwID0gcjAgKiBzaW4oYTAwKSxcbiAgICAgICAgICAgIG9jO1xuXG4gICAgICAgIC8vIFJlc3RyaWN0IHRoZSBjb3JuZXIgcmFkaXVzIGFjY29yZGluZyB0byB0aGUgc2VjdG9yIGFuZ2xlLiBJZiB0aGlzXG4gICAgICAgIC8vIGludGVyc2VjdGlvbiBmYWlscywgaXTigJlzIHByb2JhYmx5IGJlY2F1c2UgdGhlIGFyYyBpcyB0b28gc21hbGwsIHNvXG4gICAgICAgIC8vIGRpc2FibGUgdGhlIGNvcm5lciByYWRpdXMgZW50aXJlbHkuXG4gICAgICAgIGlmIChkYSA8IHBpKSB7XG4gICAgICAgICAgaWYgKG9jID0gaW50ZXJzZWN0KHgwMSwgeTAxLCB4MDAsIHkwMCwgeDExLCB5MTEsIHgxMCwgeTEwKSkge1xuICAgICAgICAgICAgdmFyIGF4ID0geDAxIC0gb2NbMF0sXG4gICAgICAgICAgICAgICAgYXkgPSB5MDEgLSBvY1sxXSxcbiAgICAgICAgICAgICAgICBieCA9IHgxMSAtIG9jWzBdLFxuICAgICAgICAgICAgICAgIGJ5ID0geTExIC0gb2NbMV0sXG4gICAgICAgICAgICAgICAga2MgPSAxIC8gc2luKGFjb3MoKGF4ICogYnggKyBheSAqIGJ5KSAvIChzcXJ0KGF4ICogYXggKyBheSAqIGF5KSAqIHNxcnQoYnggKiBieCArIGJ5ICogYnkpKSkgLyAyKSxcbiAgICAgICAgICAgICAgICBsYyA9IHNxcnQob2NbMF0gKiBvY1swXSArIG9jWzFdICogb2NbMV0pO1xuICAgICAgICAgICAgcmMwID0gbWluKHJjLCAocjAgLSBsYykgLyAoa2MgLSAxKSk7XG4gICAgICAgICAgICByYzEgPSBtaW4ocmMsIChyMSAtIGxjKSAvIChrYyArIDEpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmMwID0gcmMxID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSXMgdGhlIHNlY3RvciBjb2xsYXBzZWQgdG8gYSBsaW5lP1xuICAgICAgaWYgKCEoZGExID4gZXBzaWxvbikpIGNvbnRleHQubW92ZVRvKHgwMSwgeTAxKTtcblxuICAgICAgLy8gRG9lcyB0aGUgc2VjdG9y4oCZcyBvdXRlciByaW5nIGhhdmUgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgZWxzZSBpZiAocmMxID4gZXBzaWxvbikge1xuICAgICAgICB0MCA9IGNvcm5lclRhbmdlbnRzKHgwMCwgeTAwLCB4MDEsIHkwMSwgcjEsIHJjMSwgY3cpO1xuICAgICAgICB0MSA9IGNvcm5lclRhbmdlbnRzKHgxMSwgeTExLCB4MTAsIHkxMCwgcjEsIHJjMSwgY3cpO1xuXG4gICAgICAgIGNvbnRleHQubW92ZVRvKHQwLmN4ICsgdDAueDAxLCB0MC5jeSArIHQwLnkwMSk7XG5cbiAgICAgICAgLy8gSGF2ZSB0aGUgY29ybmVycyBtZXJnZWQ/XG4gICAgICAgIGlmIChyYzEgPCByYykgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzEsIGF0YW4yKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgZHJhdyB0aGUgdHdvIGNvcm5lcnMgYW5kIHRoZSByaW5nLlxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMSwgYXRhbjIodDAueTAxLCB0MC54MDEpLCBhdGFuMih0MC55MTEsIHQwLngxMSksICFjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjEsIGF0YW4yKHQwLmN5ICsgdDAueTExLCB0MC5jeCArIHQwLngxMSksIGF0YW4yKHQxLmN5ICsgdDEueTExLCB0MS5jeCArIHQxLngxMSksICFjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmModDEuY3gsIHQxLmN5LCByYzEsIGF0YW4yKHQxLnkxMSwgdDEueDExKSwgYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE9yIGlzIHRoZSBvdXRlciByaW5nIGp1c3QgYSBjaXJjdWxhciBhcmM/XG4gICAgICBlbHNlIGNvbnRleHQubW92ZVRvKHgwMSwgeTAxKSwgY29udGV4dC5hcmMoMCwgMCwgcjEsIGEwMSwgYTExLCAhY3cpO1xuXG4gICAgICAvLyBJcyB0aGVyZSBubyBpbm5lciByaW5nLCBhbmQgaXTigJlzIGEgY2lyY3VsYXIgc2VjdG9yP1xuICAgICAgLy8gT3IgcGVyaGFwcyBpdOKAmXMgYW4gYW5udWxhciBzZWN0b3IgY29sbGFwc2VkIGR1ZSB0byBwYWRkaW5nP1xuICAgICAgaWYgKCEocjAgPiBlcHNpbG9uKSB8fCAhKGRhMCA+IGVwc2lsb24pKSBjb250ZXh0LmxpbmVUbyh4MTAsIHkxMCk7XG5cbiAgICAgIC8vIERvZXMgdGhlIHNlY3RvcuKAmXMgaW5uZXIgcmluZyAob3IgcG9pbnQpIGhhdmUgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgZWxzZSBpZiAocmMwID4gZXBzaWxvbikge1xuICAgICAgICB0MCA9IGNvcm5lclRhbmdlbnRzKHgxMCwgeTEwLCB4MTEsIHkxMSwgcjAsIC1yYzAsIGN3KTtcbiAgICAgICAgdDEgPSBjb3JuZXJUYW5nZW50cyh4MDEsIHkwMSwgeDAwLCB5MDAsIHIwLCAtcmMwLCBjdyk7XG5cbiAgICAgICAgY29udGV4dC5saW5lVG8odDAuY3ggKyB0MC54MDEsIHQwLmN5ICsgdDAueTAxKTtcblxuICAgICAgICAvLyBIYXZlIHRoZSBjb3JuZXJzIG1lcmdlZD9cbiAgICAgICAgaWYgKHJjMCA8IHJjKSBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMCwgYXRhbjIodDAueTAxLCB0MC54MDEpLCBhdGFuMih0MS55MDEsIHQxLngwMSksICFjdyk7XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBkcmF3IHRoZSB0d28gY29ybmVycyBhbmQgdGhlIHJpbmcuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMwLCBhdGFuMih0MC55MDEsIHQwLngwMSksIGF0YW4yKHQwLnkxMSwgdDAueDExKSwgIWN3KTtcbiAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMCwgYXRhbjIodDAuY3kgKyB0MC55MTEsIHQwLmN4ICsgdDAueDExKSwgYXRhbjIodDEuY3kgKyB0MS55MTEsIHQxLmN4ICsgdDEueDExKSwgY3cpO1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQxLmN4LCB0MS5jeSwgcmMwLCBhdGFuMih0MS55MTEsIHQxLngxMSksIGF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBPciBpcyB0aGUgaW5uZXIgcmluZyBqdXN0IGEgY2lyY3VsYXIgYXJjP1xuICAgICAgZWxzZSBjb250ZXh0LmFyYygwLCAwLCByMCwgYTEwLCBhMDAsIGN3KTtcbiAgICB9XG5cbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBhcmMuY2VudHJvaWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgciA9ICgraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtvdXRlclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIsXG4gICAgICAgIGEgPSAoK3N0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIgLSBwaSAvIDI7XG4gICAgcmV0dXJuIFtjb3MoYSkgKiByLCBzaW4oYSkgKiByXTtcbiAgfTtcblxuICBhcmMuaW5uZXJSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW5uZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IGlubmVyUmFkaXVzO1xuICB9O1xuXG4gIGFyYy5vdXRlclJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChvdXRlclJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogb3V0ZXJSYWRpdXM7XG4gIH07XG5cbiAgYXJjLmNvcm5lclJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb3JuZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IGNvcm5lclJhZGl1cztcbiAgfTtcblxuICBhcmMucGFkUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZFJhZGl1cyA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IHBhZFJhZGl1cztcbiAgfTtcblxuICBhcmMuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdGFydEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBzdGFydEFuZ2xlO1xuICB9O1xuXG4gIGFyYy5lbmRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChlbmRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogZW5kQW5nbGU7XG4gIH07XG5cbiAgYXJjLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBwYWRBbmdsZTtcbiAgfTtcblxuICBhcmMuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICgoY29udGV4dCA9IF8gPT0gbnVsbCA/IG51bGwgOiBfKSwgYXJjKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGFyYztcbn1cbiIsImV4cG9ydCB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSBcIm9iamVjdFwiICYmIFwibGVuZ3RoXCIgaW4geFxuICAgID8geCAvLyBBcnJheSwgVHlwZWRBcnJheSwgTm9kZUxpc3QsIGFycmF5LWxpa2VcbiAgICA6IEFycmF5LmZyb20oeCk7IC8vIE1hcCwgU2V0LCBpdGVyYWJsZSwgc3RyaW5nLCBvciBhbnl0aGluZyBlbHNlXG59XG4iLCJmdW5jdGlvbiBMaW5lYXIoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTGluZWFyLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyAvLyBmYWxscyB0aHJvdWdoXG4gICAgICBkZWZhdWx0OiB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTGluZWFyKGNvbnRleHQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHgocCkge1xuICByZXR1cm4gcFswXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHkocCkge1xuICByZXR1cm4gcFsxXTtcbn1cbiIsImltcG9ydCBhcnJheSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgY3VydmVMaW5lYXIgZnJvbSBcIi4vY3VydmUvbGluZWFyLmpzXCI7XG5pbXBvcnQge3dpdGhQYXRofSBmcm9tIFwiLi9wYXRoLmpzXCI7XG5pbXBvcnQge3ggYXMgcG9pbnRYLCB5IGFzIHBvaW50WX0gZnJvbSBcIi4vcG9pbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgeSkge1xuICB2YXIgZGVmaW5lZCA9IGNvbnN0YW50KHRydWUpLFxuICAgICAgY29udGV4dCA9IG51bGwsXG4gICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgb3V0cHV0ID0gbnVsbCxcbiAgICAgIHBhdGggPSB3aXRoUGF0aChsaW5lKTtcblxuICB4ID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiAoeCA9PT0gdW5kZWZpbmVkKSA/IHBvaW50WCA6IGNvbnN0YW50KHgpO1xuICB5ID0gdHlwZW9mIHkgPT09IFwiZnVuY3Rpb25cIiA/IHkgOiAoeSA9PT0gdW5kZWZpbmVkKSA/IHBvaW50WSA6IGNvbnN0YW50KHkpO1xuXG4gIGZ1bmN0aW9uIGxpbmUoZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0gKGRhdGEgPSBhcnJheShkYXRhKSkubGVuZ3RoLFxuICAgICAgICBkLFxuICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICBidWZmZXI7XG5cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgIGlmICghKGkgPCBuICYmIGRlZmluZWQoZCA9IGRhdGFbaV0sIGksIGRhdGEpKSA9PT0gZGVmaW5lZDApIHtcbiAgICAgICAgaWYgKGRlZmluZWQwID0gIWRlZmluZWQwKSBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgIGVsc2Ugb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkMCkgb3V0cHV0LnBvaW50KCt4KGQsIGksIGRhdGEpLCAreShkLCBpLCBkYXRhKSk7XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGxpbmUueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGxpbmUpIDogeDtcbiAgfTtcblxuICBsaW5lLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHk7XG4gIH07XG5cbiAgbGluZS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlZmluZWQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGxpbmUpIDogZGVmaW5lZDtcbiAgfTtcblxuICBsaW5lLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGxpbmUpIDogY3VydmU7XG4gIH07XG5cbiAgbGluZS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IGNvbnRleHQgPSBvdXRwdXQgPSBudWxsIDogb3V0cHV0ID0gY3VydmUoY29udGV4dCA9IF8pLCBsaW5lKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmU7XG59XG4iLCJpbXBvcnQgYXJyYXkgZnJvbSBcIi4vYXJyYXkuanNcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IGN1cnZlTGluZWFyIGZyb20gXCIuL2N1cnZlL2xpbmVhci5qc1wiO1xuaW1wb3J0IGxpbmUgZnJvbSBcIi4vbGluZS5qc1wiO1xuaW1wb3J0IHt3aXRoUGF0aH0gZnJvbSBcIi4vcGF0aC5qc1wiO1xuaW1wb3J0IHt4IGFzIHBvaW50WCwgeSBhcyBwb2ludFl9IGZyb20gXCIuL3BvaW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgwLCB5MCwgeTEpIHtcbiAgdmFyIHgxID0gbnVsbCxcbiAgICAgIGRlZmluZWQgPSBjb25zdGFudCh0cnVlKSxcbiAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgY3VydmUgPSBjdXJ2ZUxpbmVhcixcbiAgICAgIG91dHB1dCA9IG51bGwsXG4gICAgICBwYXRoID0gd2l0aFBhdGgoYXJlYSk7XG5cbiAgeDAgPSB0eXBlb2YgeDAgPT09IFwiZnVuY3Rpb25cIiA/IHgwIDogKHgwID09PSB1bmRlZmluZWQpID8gcG9pbnRYIDogY29uc3RhbnQoK3gwKTtcbiAgeTAgPSB0eXBlb2YgeTAgPT09IFwiZnVuY3Rpb25cIiA/IHkwIDogKHkwID09PSB1bmRlZmluZWQpID8gY29uc3RhbnQoMCkgOiBjb25zdGFudCgreTApO1xuICB5MSA9IHR5cGVvZiB5MSA9PT0gXCJmdW5jdGlvblwiID8geTEgOiAoeTEgPT09IHVuZGVmaW5lZCkgPyBwb2ludFkgOiBjb25zdGFudCgreTEpO1xuXG4gIGZ1bmN0aW9uIGFyZWEoZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBqLFxuICAgICAgICBrLFxuICAgICAgICBuID0gKGRhdGEgPSBhcnJheShkYXRhKSkubGVuZ3RoLFxuICAgICAgICBkLFxuICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICBidWZmZXIsXG4gICAgICAgIHgweiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgeTB6ID0gbmV3IEFycmF5KG4pO1xuXG4gICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgb3V0cHV0ID0gY3VydmUoYnVmZmVyID0gcGF0aCgpKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPD0gbjsgKytpKSB7XG4gICAgICBpZiAoIShpIDwgbiAmJiBkZWZpbmVkKGQgPSBkYXRhW2ldLCBpLCBkYXRhKSkgPT09IGRlZmluZWQwKSB7XG4gICAgICAgIGlmIChkZWZpbmVkMCA9ICFkZWZpbmVkMCkge1xuICAgICAgICAgIGogPSBpO1xuICAgICAgICAgIG91dHB1dC5hcmVhU3RhcnQoKTtcbiAgICAgICAgICBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgICAgICBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgICAgZm9yIChrID0gaSAtIDE7IGsgPj0gajsgLS1rKSB7XG4gICAgICAgICAgICBvdXRwdXQucG9pbnQoeDB6W2tdLCB5MHpba10pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXRwdXQubGluZUVuZCgpO1xuICAgICAgICAgIG91dHB1dC5hcmVhRW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkMCkge1xuICAgICAgICB4MHpbaV0gPSAreDAoZCwgaSwgZGF0YSksIHkweltpXSA9ICt5MChkLCBpLCBkYXRhKTtcbiAgICAgICAgb3V0cHV0LnBvaW50KHgxID8gK3gxKGQsIGksIGRhdGEpIDogeDB6W2ldLCB5MSA/ICt5MShkLCBpLCBkYXRhKSA6IHkweltpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyZWFsaW5lKCkge1xuICAgIHJldHVybiBsaW5lKCkuZGVmaW5lZChkZWZpbmVkKS5jdXJ2ZShjdXJ2ZSkuY29udGV4dChjb250ZXh0KTtcbiAgfVxuXG4gIGFyZWEueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCB4MSA9IG51bGwsIGFyZWEpIDogeDA7XG4gIH07XG5cbiAgYXJlYS54MCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHgwO1xuICB9O1xuXG4gIGFyZWEueDEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDEgPSBfID09IG51bGwgPyBudWxsIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeDE7XG4gIH07XG5cbiAgYXJlYS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHkxID0gbnVsbCwgYXJlYSkgOiB5MDtcbiAgfTtcblxuICBhcmVhLnkwID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeTA7XG4gIH07XG5cbiAgYXJlYS55MSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MSA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJlYSkgOiB5MTtcbiAgfTtcblxuICBhcmVhLmxpbmVYMCA9XG4gIGFyZWEubGluZVkwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MCkueSh5MCk7XG4gIH07XG5cbiAgYXJlYS5saW5lWTEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgwKS55KHkxKTtcbiAgfTtcblxuICBhcmVhLmxpbmVYMSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhcmVhbGluZSgpLngoeDEpLnkoeTApO1xuICB9O1xuXG4gIGFyZWEuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWZpbmVkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBhcmVhKSA6IGRlZmluZWQ7XG4gIH07XG5cbiAgYXJlYS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjdXJ2ZSA9IF8sIGNvbnRleHQgIT0gbnVsbCAmJiAob3V0cHV0ID0gY3VydmUoY29udGV4dCkpLCBhcmVhKSA6IGN1cnZlO1xuICB9O1xuXG4gIGFyZWEuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgYXJlYSkgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBhcmVhO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYiA8IGEgPyAtMSA6IGIgPiBhID8gMSA6IGIgPj0gYSA/IDAgOiBOYU47XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkKSB7XG4gIHJldHVybiBkO1xufVxuIiwiaW1wb3J0IGFycmF5IGZyb20gXCIuL2FycmF5LmpzXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBkZXNjZW5kaW5nIGZyb20gXCIuL2Rlc2NlbmRpbmcuanNcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eS5qc1wiO1xuaW1wb3J0IHt0YXV9IGZyb20gXCIuL21hdGguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB2YWx1ZSA9IGlkZW50aXR5LFxuICAgICAgc29ydFZhbHVlcyA9IGRlc2NlbmRpbmcsXG4gICAgICBzb3J0ID0gbnVsbCxcbiAgICAgIHN0YXJ0QW5nbGUgPSBjb25zdGFudCgwKSxcbiAgICAgIGVuZEFuZ2xlID0gY29uc3RhbnQodGF1KSxcbiAgICAgIHBhZEFuZ2xlID0gY29uc3RhbnQoMCk7XG5cbiAgZnVuY3Rpb24gcGllKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IChkYXRhID0gYXJyYXkoZGF0YSkpLmxlbmd0aCxcbiAgICAgICAgaixcbiAgICAgICAgayxcbiAgICAgICAgc3VtID0gMCxcbiAgICAgICAgaW5kZXggPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGFyY3MgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGEwID0gK3N0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgZGEgPSBNYXRoLm1pbih0YXUsIE1hdGgubWF4KC10YXUsIGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBhMCkpLFxuICAgICAgICBhMSxcbiAgICAgICAgcCA9IE1hdGgubWluKE1hdGguYWJzKGRhKSAvIG4sIHBhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLFxuICAgICAgICBwYSA9IHAgKiAoZGEgPCAwID8gLTEgOiAxKSxcbiAgICAgICAgdjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodiA9IGFyY3NbaW5kZXhbaV0gPSBpXSA9ICt2YWx1ZShkYXRhW2ldLCBpLCBkYXRhKSkgPiAwKSB7XG4gICAgICAgIHN1bSArPSB2O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE9wdGlvbmFsbHkgc29ydCB0aGUgYXJjcyBieSBwcmV2aW91c2x5LWNvbXB1dGVkIHZhbHVlcyBvciBieSBkYXRhLlxuICAgIGlmIChzb3J0VmFsdWVzICE9IG51bGwpIGluZGV4LnNvcnQoZnVuY3Rpb24oaSwgaikgeyByZXR1cm4gc29ydFZhbHVlcyhhcmNzW2ldLCBhcmNzW2pdKTsgfSk7XG4gICAgZWxzZSBpZiAoc29ydCAhPSBudWxsKSBpbmRleC5zb3J0KGZ1bmN0aW9uKGksIGopIHsgcmV0dXJuIHNvcnQoZGF0YVtpXSwgZGF0YVtqXSk7IH0pO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgYXJjcyEgVGhleSBhcmUgc3RvcmVkIGluIHRoZSBvcmlnaW5hbCBkYXRhJ3Mgb3JkZXIuXG4gICAgZm9yIChpID0gMCwgayA9IHN1bSA/IChkYSAtIG4gKiBwYSkgLyBzdW0gOiAwOyBpIDwgbjsgKytpLCBhMCA9IGExKSB7XG4gICAgICBqID0gaW5kZXhbaV0sIHYgPSBhcmNzW2pdLCBhMSA9IGEwICsgKHYgPiAwID8gdiAqIGsgOiAwKSArIHBhLCBhcmNzW2pdID0ge1xuICAgICAgICBkYXRhOiBkYXRhW2pdLFxuICAgICAgICBpbmRleDogaSxcbiAgICAgICAgdmFsdWU6IHYsXG4gICAgICAgIHN0YXJ0QW5nbGU6IGEwLFxuICAgICAgICBlbmRBbmdsZTogYTEsXG4gICAgICAgIHBhZEFuZ2xlOiBwXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBhcmNzO1xuICB9XG5cbiAgcGllLnZhbHVlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZhbHVlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHBpZSkgOiB2YWx1ZTtcbiAgfTtcblxuICBwaWUuc29ydFZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0VmFsdWVzID0gXywgc29ydCA9IG51bGwsIHBpZSkgOiBzb3J0VmFsdWVzO1xuICB9O1xuXG4gIHBpZS5zb3J0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvcnQgPSBfLCBzb3J0VmFsdWVzID0gbnVsbCwgcGllKSA6IHNvcnQ7XG4gIH07XG5cbiAgcGllLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RhcnRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBwaWUpIDogc3RhcnRBbmdsZTtcbiAgfTtcblxuICBwaWUuZW5kQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZW5kQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcGllKSA6IGVuZEFuZ2xlO1xuICB9O1xuXG4gIHBpZS5wYWRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBwaWUpIDogcGFkQW5nbGU7XG4gIH07XG5cbiAgcmV0dXJuIHBpZTtcbn1cbiIsImltcG9ydCBjdXJ2ZUxpbmVhciBmcm9tIFwiLi9saW5lYXIuanNcIjtcblxuZXhwb3J0IHZhciBjdXJ2ZVJhZGlhbExpbmVhciA9IGN1cnZlUmFkaWFsKGN1cnZlTGluZWFyKTtcblxuZnVuY3Rpb24gUmFkaWFsKGN1cnZlKSB7XG4gIHRoaXMuX2N1cnZlID0gY3VydmU7XG59XG5cblJhZGlhbC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY3VydmUuYXJlYVN0YXJ0KCk7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2N1cnZlLmFyZWFFbmQoKTtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9jdXJ2ZS5saW5lU3RhcnQoKTtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY3VydmUubGluZUVuZCgpO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oYSwgcikge1xuICAgIHRoaXMuX2N1cnZlLnBvaW50KHIgKiBNYXRoLnNpbihhKSwgciAqIC1NYXRoLmNvcyhhKSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGN1cnZlUmFkaWFsKGN1cnZlKSB7XG5cbiAgZnVuY3Rpb24gcmFkaWFsKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IFJhZGlhbChjdXJ2ZShjb250ZXh0KSk7XG4gIH1cblxuICByYWRpYWwuX2N1cnZlID0gY3VydmU7XG5cbiAgcmV0dXJuIHJhZGlhbDtcbn1cbiIsImltcG9ydCBjdXJ2ZVJhZGlhbCwge2N1cnZlUmFkaWFsTGluZWFyfSBmcm9tIFwiLi9jdXJ2ZS9yYWRpYWwuanNcIjtcbmltcG9ydCBsaW5lIGZyb20gXCIuL2xpbmUuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpbmVSYWRpYWwobCkge1xuICB2YXIgYyA9IGwuY3VydmU7XG5cbiAgbC5hbmdsZSA9IGwueCwgZGVsZXRlIGwueDtcbiAgbC5yYWRpdXMgPSBsLnksIGRlbGV0ZSBsLnk7XG5cbiAgbC5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGMoY3VydmVSYWRpYWwoXykpIDogYygpLl9jdXJ2ZTtcbiAgfTtcblxuICByZXR1cm4gbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBsaW5lUmFkaWFsKGxpbmUoKS5jdXJ2ZShjdXJ2ZVJhZGlhbExpbmVhcikpO1xufVxuIiwiaW1wb3J0IGN1cnZlUmFkaWFsLCB7Y3VydmVSYWRpYWxMaW5lYXJ9IGZyb20gXCIuL2N1cnZlL3JhZGlhbC5qc1wiO1xuaW1wb3J0IGFyZWEgZnJvbSBcIi4vYXJlYS5qc1wiO1xuaW1wb3J0IHtsaW5lUmFkaWFsfSBmcm9tIFwiLi9saW5lUmFkaWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgYSA9IGFyZWEoKS5jdXJ2ZShjdXJ2ZVJhZGlhbExpbmVhciksXG4gICAgICBjID0gYS5jdXJ2ZSxcbiAgICAgIHgwID0gYS5saW5lWDAsXG4gICAgICB4MSA9IGEubGluZVgxLFxuICAgICAgeTAgPSBhLmxpbmVZMCxcbiAgICAgIHkxID0gYS5saW5lWTE7XG5cbiAgYS5hbmdsZSA9IGEueCwgZGVsZXRlIGEueDtcbiAgYS5zdGFydEFuZ2xlID0gYS54MCwgZGVsZXRlIGEueDA7XG4gIGEuZW5kQW5nbGUgPSBhLngxLCBkZWxldGUgYS54MTtcbiAgYS5yYWRpdXMgPSBhLnksIGRlbGV0ZSBhLnk7XG4gIGEuaW5uZXJSYWRpdXMgPSBhLnkwLCBkZWxldGUgYS55MDtcbiAgYS5vdXRlclJhZGl1cyA9IGEueTEsIGRlbGV0ZSBhLnkxO1xuICBhLmxpbmVTdGFydEFuZ2xlID0gZnVuY3Rpb24oKSB7IHJldHVybiBsaW5lUmFkaWFsKHgwKCkpOyB9LCBkZWxldGUgYS5saW5lWDA7XG4gIGEubGluZUVuZEFuZ2xlID0gZnVuY3Rpb24oKSB7IHJldHVybiBsaW5lUmFkaWFsKHgxKCkpOyB9LCBkZWxldGUgYS5saW5lWDE7XG4gIGEubGluZUlubmVyUmFkaXVzID0gZnVuY3Rpb24oKSB7IHJldHVybiBsaW5lUmFkaWFsKHkwKCkpOyB9LCBkZWxldGUgYS5saW5lWTA7XG4gIGEubGluZU91dGVyUmFkaXVzID0gZnVuY3Rpb24oKSB7IHJldHVybiBsaW5lUmFkaWFsKHkxKCkpOyB9LCBkZWxldGUgYS5saW5lWTE7XG5cbiAgYS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGMoY3VydmVSYWRpYWwoXykpIDogYygpLl9jdXJ2ZTtcbiAgfTtcblxuICByZXR1cm4gYTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHkpIHtcbiAgcmV0dXJuIFsoeSA9ICt5KSAqIE1hdGguY29zKHggLT0gTWF0aC5QSSAvIDIpLCB5ICogTWF0aC5zaW4oeCldO1xufVxuIiwiaW1wb3J0IHBvaW50UmFkaWFsIGZyb20gXCIuLi9wb2ludFJhZGlhbC5qc1wiO1xuXG5jbGFzcyBCdW1wIHtcbiAgY29uc3RydWN0b3IoY29udGV4dCwgeCkge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgIHRoaXMuX3ggPSB4O1xuICB9XG4gIGFyZWFTdGFydCgpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfVxuICBhcmVhRW5kKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH1cbiAgbGluZVN0YXJ0KCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfVxuICBsaW5lRW5kKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH1cbiAgcG9pbnQoeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDoge1xuICAgICAgICB0aGlzLl9wb2ludCA9IDE7XG4gICAgICAgIGlmICh0aGlzLl9saW5lKSB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgZWxzZSB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBpZiAodGhpcy5feCkgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHRoaXMuX3gwID0gKHRoaXMuX3gwICsgeCkgLyAyLCB0aGlzLl95MCwgdGhpcy5feDAsIHksIHgsIHkpO1xuICAgICAgICBlbHNlIHRoaXMuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh0aGlzLl94MCwgdGhpcy5feTAgPSAodGhpcy5feTAgKyB5KSAvIDIsIHgsIHRoaXMuX3kwLCB4LCB5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3gwID0geCwgdGhpcy5feTAgPSB5O1xuICB9XG59XG5cbmNsYXNzIEJ1bXBSYWRpYWwge1xuICBjb25zdHJ1Y3Rvcihjb250ZXh0KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cbiAgbGluZVN0YXJ0KCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfVxuICBsaW5lRW5kKCkge31cbiAgcG9pbnQoeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIGlmICh0aGlzLl9wb2ludCA9PT0gMCkge1xuICAgICAgdGhpcy5fcG9pbnQgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwMCA9IHBvaW50UmFkaWFsKHRoaXMuX3gwLCB0aGlzLl95MCk7XG4gICAgICBjb25zdCBwMSA9IHBvaW50UmFkaWFsKHRoaXMuX3gwLCB0aGlzLl95MCA9ICh0aGlzLl95MCArIHkpIC8gMik7XG4gICAgICBjb25zdCBwMiA9IHBvaW50UmFkaWFsKHgsIHRoaXMuX3kwKTtcbiAgICAgIGNvbnN0IHAzID0gcG9pbnRSYWRpYWwoeCwgeSk7XG4gICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyguLi5wMCk7XG4gICAgICB0aGlzLl9jb250ZXh0LmJlemllckN1cnZlVG8oLi4ucDEsIC4uLnAyLCAuLi5wMyk7XG4gICAgfVxuICAgIHRoaXMuX3gwID0geCwgdGhpcy5feTAgPSB5O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidW1wWChjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgQnVtcChjb250ZXh0LCB0cnVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1bXBZKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBCdW1wKGNvbnRleHQsIGZhbHNlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1bXBSYWRpYWwoY29udGV4dCkge1xuICByZXR1cm4gbmV3IEJ1bXBSYWRpYWwoY29udGV4dCk7XG59XG4iLCJpbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQge2J1bXBYLCBidW1wWSwgYnVtcFJhZGlhbH0gZnJvbSBcIi4vY3VydmUvYnVtcC5qc1wiO1xuaW1wb3J0IHt3aXRoUGF0aH0gZnJvbSBcIi4vcGF0aC5qc1wiO1xuaW1wb3J0IHt4IGFzIHBvaW50WCwgeSBhcyBwb2ludFl9IGZyb20gXCIuL3BvaW50LmpzXCI7XG5cbmZ1bmN0aW9uIGxpbmtTb3VyY2UoZCkge1xuICByZXR1cm4gZC5zb3VyY2U7XG59XG5cbmZ1bmN0aW9uIGxpbmtUYXJnZXQoZCkge1xuICByZXR1cm4gZC50YXJnZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5rKGN1cnZlKSB7XG4gIGxldCBzb3VyY2UgPSBsaW5rU291cmNlLFxuICAgICAgdGFyZ2V0ID0gbGlua1RhcmdldCxcbiAgICAgIHggPSBwb2ludFgsXG4gICAgICB5ID0gcG9pbnRZLFxuICAgICAgY29udGV4dCA9IG51bGwsXG4gICAgICBvdXRwdXQgPSBudWxsLFxuICAgICAgcGF0aCA9IHdpdGhQYXRoKGxpbmspO1xuXG4gIGZ1bmN0aW9uIGxpbmsoKSB7XG4gICAgbGV0IGJ1ZmZlcjtcbiAgICBjb25zdCBhcmd2ID0gc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgIGNvbnN0IHMgPSBzb3VyY2UuYXBwbHkodGhpcywgYXJndik7XG4gICAgY29uc3QgdCA9IHRhcmdldC5hcHBseSh0aGlzLCBhcmd2KTtcbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuICAgIG91dHB1dC5saW5lU3RhcnQoKTtcbiAgICBhcmd2WzBdID0gcywgb3V0cHV0LnBvaW50KCt4LmFwcGx5KHRoaXMsIGFyZ3YpLCAreS5hcHBseSh0aGlzLCBhcmd2KSk7XG4gICAgYXJndlswXSA9IHQsIG91dHB1dC5wb2ludCgreC5hcHBseSh0aGlzLCBhcmd2KSwgK3kuYXBwbHkodGhpcywgYXJndikpO1xuICAgIG91dHB1dC5saW5lRW5kKCk7XG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGxpbmsuc291cmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvdXJjZSA9IF8sIGxpbmspIDogc291cmNlO1xuICB9O1xuXG4gIGxpbmsudGFyZ2V0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRhcmdldCA9IF8sIGxpbmspIDogdGFyZ2V0O1xuICB9O1xuXG4gIGxpbmsueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGxpbmspIDogeDtcbiAgfTtcblxuICBsaW5rLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5rKSA6IHk7XG4gIH07XG5cbiAgbGluay5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IGNvbnRleHQgPSBvdXRwdXQgPSBudWxsIDogb3V0cHV0ID0gY3VydmUoY29udGV4dCA9IF8pLCBsaW5rKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGxpbms7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5rSG9yaXpvbnRhbCgpIHtcbiAgcmV0dXJuIGxpbmsoYnVtcFgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlua1ZlcnRpY2FsKCkge1xuICByZXR1cm4gbGluayhidW1wWSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5rUmFkaWFsKCkge1xuICBjb25zdCBsID0gbGluayhidW1wUmFkaWFsKTtcbiAgbC5hbmdsZSA9IGwueCwgZGVsZXRlIGwueDtcbiAgbC5yYWRpdXMgPSBsLnksIGRlbGV0ZSBsLnk7XG4gIHJldHVybiBsO1xufVxuIiwiaW1wb3J0IHttaW4sIHNxcnR9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5cbmNvbnN0IHNxcnQzID0gc3FydCgzKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3KGNvbnRleHQsIHNpemUpIHtcbiAgICBjb25zdCByID0gc3FydChzaXplICsgbWluKHNpemUgLyAyOCwgMC43NSkpICogMC41OTQzNjtcbiAgICBjb25zdCB0ID0gciAvIDI7XG4gICAgY29uc3QgdSA9IHQgKiBzcXJ0MztcbiAgICBjb250ZXh0Lm1vdmVUbygwLCByKTtcbiAgICBjb250ZXh0LmxpbmVUbygwLCAtcik7XG4gICAgY29udGV4dC5tb3ZlVG8oLXUsIC10KTtcbiAgICBjb250ZXh0LmxpbmVUbyh1LCB0KTtcbiAgICBjb250ZXh0Lm1vdmVUbygtdSwgdCk7XG4gICAgY29udGV4dC5saW5lVG8odSwgLXQpO1xuICB9XG59O1xuIiwiaW1wb3J0IHtwaSwgc3FydCwgdGF1fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyYXcoY29udGV4dCwgc2l6ZSkge1xuICAgIGNvbnN0IHIgPSBzcXJ0KHNpemUgLyBwaSk7XG4gICAgY29udGV4dC5tb3ZlVG8ociwgMCk7XG4gICAgY29udGV4dC5hcmMoMCwgMCwgciwgMCwgdGF1KTtcbiAgfVxufTtcbiIsImltcG9ydCB7c3FydH0gZnJvbSBcIi4uL21hdGguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3KGNvbnRleHQsIHNpemUpIHtcbiAgICBjb25zdCByID0gc3FydChzaXplIC8gNSkgLyAyO1xuICAgIGNvbnRleHQubW92ZVRvKC0zICogciwgLXIpO1xuICAgIGNvbnRleHQubGluZVRvKC1yLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oLXIsIC0zICogcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgLTMgKiByKTtcbiAgICBjb250ZXh0LmxpbmVUbyhyLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oMyAqIHIsIC1yKTtcbiAgICBjb250ZXh0LmxpbmVUbygzICogciwgcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgMyAqIHIpO1xuICAgIGNvbnRleHQubGluZVRvKC1yLCAzICogcik7XG4gICAgY29udGV4dC5saW5lVG8oLXIsIHIpO1xuICAgIGNvbnRleHQubGluZVRvKC0zICogciwgcik7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcbiIsImltcG9ydCB7c3FydH0gZnJvbSBcIi4uL21hdGguanNcIjtcblxuY29uc3QgdGFuMzAgPSBzcXJ0KDEgLyAzKTtcbmNvbnN0IHRhbjMwXzIgPSB0YW4zMCAqIDI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdyhjb250ZXh0LCBzaXplKSB7XG4gICAgY29uc3QgeSA9IHNxcnQoc2l6ZSAvIHRhbjMwXzIpO1xuICAgIGNvbnN0IHggPSB5ICogdGFuMzA7XG4gICAgY29udGV4dC5tb3ZlVG8oMCwgLXkpO1xuICAgIGNvbnRleHQubGluZVRvKHgsIDApO1xuICAgIGNvbnRleHQubGluZVRvKDAsIHkpO1xuICAgIGNvbnRleHQubGluZVRvKC14LCAwKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9XG59O1xuIiwiaW1wb3J0IHtzcXJ0fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyYXcoY29udGV4dCwgc2l6ZSkge1xuICAgIGNvbnN0IHIgPSBzcXJ0KHNpemUpICogMC42MjYyNTtcbiAgICBjb250ZXh0Lm1vdmVUbygwLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgMCk7XG4gICAgY29udGV4dC5saW5lVG8oMCwgcik7XG4gICAgY29udGV4dC5saW5lVG8oLXIsIDApO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG4iLCJpbXBvcnQge21pbiwgc3FydH0gZnJvbSBcIi4uL21hdGguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3KGNvbnRleHQsIHNpemUpIHtcbiAgICBjb25zdCByID0gc3FydChzaXplIC0gbWluKHNpemUgLyA3LCAyKSkgKiAwLjg3NTU5O1xuICAgIGNvbnRleHQubW92ZVRvKC1yLCAwKTtcbiAgICBjb250ZXh0LmxpbmVUbyhyLCAwKTtcbiAgICBjb250ZXh0Lm1vdmVUbygwLCByKTtcbiAgICBjb250ZXh0LmxpbmVUbygwLCAtcik7XG4gIH1cbn07XG4iLCJpbXBvcnQge3NxcnR9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdyhjb250ZXh0LCBzaXplKSB7XG4gICAgY29uc3QgdyA9IHNxcnQoc2l6ZSk7XG4gICAgY29uc3QgeCA9IC13IC8gMjtcbiAgICBjb250ZXh0LnJlY3QoeCwgeCwgdywgdyk7XG4gIH1cbn07XG4iLCJpbXBvcnQge3NxcnR9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdyhjb250ZXh0LCBzaXplKSB7XG4gICAgY29uc3QgciA9IHNxcnQoc2l6ZSkgKiAwLjQ0MzE7XG4gICAgY29udGV4dC5tb3ZlVG8ociwgcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgLXIpO1xuICAgIGNvbnRleHQubGluZVRvKC1yLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oLXIsIHIpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG4iLCJpbXBvcnQge3NpbiwgY29zLCBzcXJ0LCBwaSwgdGF1fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuXG5jb25zdCBrYSA9IDAuODkwODEzMDkxNTI5Mjg1MjI4MTA7XG5jb25zdCBrciA9IHNpbihwaSAvIDEwKSAvIHNpbig3ICogcGkgLyAxMCk7XG5jb25zdCBreCA9IHNpbih0YXUgLyAxMCkgKiBrcjtcbmNvbnN0IGt5ID0gLWNvcyh0YXUgLyAxMCkgKiBrcjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3KGNvbnRleHQsIHNpemUpIHtcbiAgICBjb25zdCByID0gc3FydChzaXplICoga2EpO1xuICAgIGNvbnN0IHggPSBreCAqIHI7XG4gICAgY29uc3QgeSA9IGt5ICogcjtcbiAgICBjb250ZXh0Lm1vdmVUbygwLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCA1OyArK2kpIHtcbiAgICAgIGNvbnN0IGEgPSB0YXUgKiBpIC8gNTtcbiAgICAgIGNvbnN0IGMgPSBjb3MoYSk7XG4gICAgICBjb25zdCBzID0gc2luKGEpO1xuICAgICAgY29udGV4dC5saW5lVG8ocyAqIHIsIC1jICogcik7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeCAtIHMgKiB5LCBzICogeCArIGMgKiB5KTtcbiAgICB9XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcbiIsImltcG9ydCB7c3FydH0gZnJvbSBcIi4uL21hdGguanNcIjtcblxuY29uc3Qgc3FydDMgPSBzcXJ0KDMpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyYXcoY29udGV4dCwgc2l6ZSkge1xuICAgIGNvbnN0IHkgPSAtc3FydChzaXplIC8gKHNxcnQzICogMykpO1xuICAgIGNvbnRleHQubW92ZVRvKDAsIHkgKiAyKTtcbiAgICBjb250ZXh0LmxpbmVUbygtc3FydDMgKiB5LCAteSk7XG4gICAgY29udGV4dC5saW5lVG8oc3FydDMgKiB5LCAteSk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcbiIsImltcG9ydCB7c3FydH0gZnJvbSBcIi4uL21hdGguanNcIjtcblxuY29uc3Qgc3FydDMgPSBzcXJ0KDMpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyYXcoY29udGV4dCwgc2l6ZSkge1xuICAgIGNvbnN0IHMgPSBzcXJ0KHNpemUpICogMC42ODI0O1xuICAgIGNvbnN0IHQgPSBzICAvIDI7XG4gICAgY29uc3QgdSA9IChzICogc3FydDMpIC8gMjsgLy8gY29zKE1hdGguUEkgLyA2KVxuICAgIGNvbnRleHQubW92ZVRvKDAsIC1zKTtcbiAgICBjb250ZXh0LmxpbmVUbyh1LCB0KTtcbiAgICBjb250ZXh0LmxpbmVUbygtdSwgdCk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcbiIsImltcG9ydCB7c3FydH0gZnJvbSBcIi4uL21hdGguanNcIjtcblxuY29uc3QgYyA9IC0wLjU7XG5jb25zdCBzID0gc3FydCgzKSAvIDI7XG5jb25zdCBrID0gMSAvIHNxcnQoMTIpO1xuY29uc3QgYSA9IChrIC8gMiArIDEpICogMztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3KGNvbnRleHQsIHNpemUpIHtcbiAgICBjb25zdCByID0gc3FydChzaXplIC8gYSk7XG4gICAgY29uc3QgeDAgPSByIC8gMiwgeTAgPSByICogaztcbiAgICBjb25zdCB4MSA9IHgwLCB5MSA9IHIgKiBrICsgcjtcbiAgICBjb25zdCB4MiA9IC14MSwgeTIgPSB5MTtcbiAgICBjb250ZXh0Lm1vdmVUbyh4MCwgeTApO1xuICAgIGNvbnRleHQubGluZVRvKHgxLCB5MSk7XG4gICAgY29udGV4dC5saW5lVG8oeDIsIHkyKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDAgLSBzICogeTAsIHMgKiB4MCArIGMgKiB5MCk7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgxIC0gcyAqIHkxLCBzICogeDEgKyBjICogeTEpO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MiAtIHMgKiB5MiwgcyAqIHgyICsgYyAqIHkyKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDAgKyBzICogeTAsIGMgKiB5MCAtIHMgKiB4MCk7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgxICsgcyAqIHkxLCBjICogeTEgLSBzICogeDEpO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MiArIHMgKiB5MiwgYyAqIHkyIC0gcyAqIHgyKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9XG59O1xuIiwiaW1wb3J0IHttaW4sIHNxcnR9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdyhjb250ZXh0LCBzaXplKSB7XG4gICAgY29uc3QgciA9IHNxcnQoc2l6ZSAtIG1pbihzaXplIC8gNiwgMS43KSkgKiAwLjYxODk7XG4gICAgY29udGV4dC5tb3ZlVG8oLXIsIC1yKTtcbiAgICBjb250ZXh0LmxpbmVUbyhyLCByKTtcbiAgICBjb250ZXh0Lm1vdmVUbygtciwgcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgLXIpO1xuICB9XG59O1xuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQge3dpdGhQYXRofSBmcm9tIFwiLi9wYXRoLmpzXCI7XG5pbXBvcnQgYXN0ZXJpc2sgZnJvbSBcIi4vc3ltYm9sL2FzdGVyaXNrLmpzXCI7XG5pbXBvcnQgY2lyY2xlIGZyb20gXCIuL3N5bWJvbC9jaXJjbGUuanNcIjtcbmltcG9ydCBjcm9zcyBmcm9tIFwiLi9zeW1ib2wvY3Jvc3MuanNcIjtcbmltcG9ydCBkaWFtb25kIGZyb20gXCIuL3N5bWJvbC9kaWFtb25kLmpzXCI7XG5pbXBvcnQgZGlhbW9uZDIgZnJvbSBcIi4vc3ltYm9sL2RpYW1vbmQyLmpzXCI7XG5pbXBvcnQgcGx1cyBmcm9tIFwiLi9zeW1ib2wvcGx1cy5qc1wiO1xuaW1wb3J0IHNxdWFyZSBmcm9tIFwiLi9zeW1ib2wvc3F1YXJlLmpzXCI7XG5pbXBvcnQgc3F1YXJlMiBmcm9tIFwiLi9zeW1ib2wvc3F1YXJlMi5qc1wiO1xuaW1wb3J0IHN0YXIgZnJvbSBcIi4vc3ltYm9sL3N0YXIuanNcIjtcbmltcG9ydCB0cmlhbmdsZSBmcm9tIFwiLi9zeW1ib2wvdHJpYW5nbGUuanNcIjtcbmltcG9ydCB0cmlhbmdsZTIgZnJvbSBcIi4vc3ltYm9sL3RyaWFuZ2xlMi5qc1wiO1xuaW1wb3J0IHd5ZSBmcm9tIFwiLi9zeW1ib2wvd3llLmpzXCI7XG5pbXBvcnQgdGltZXMgZnJvbSBcIi4vc3ltYm9sL3RpbWVzLmpzXCI7XG5cbi8vIFRoZXNlIHN5bWJvbHMgYXJlIGRlc2lnbmVkIHRvIGJlIGZpbGxlZC5cbmV4cG9ydCBjb25zdCBzeW1ib2xzRmlsbCA9IFtcbiAgY2lyY2xlLFxuICBjcm9zcyxcbiAgZGlhbW9uZCxcbiAgc3F1YXJlLFxuICBzdGFyLFxuICB0cmlhbmdsZSxcbiAgd3llXG5dO1xuXG4vLyBUaGVzZSBzeW1ib2xzIGFyZSBkZXNpZ25lZCB0byBiZSBzdHJva2VkICh3aXRoIGEgd2lkdGggb2YgMS41cHggYW5kIHJvdW5kIGNhcHMpLlxuZXhwb3J0IGNvbnN0IHN5bWJvbHNTdHJva2UgPSBbXG4gIGNpcmNsZSxcbiAgcGx1cyxcbiAgdGltZXMsXG4gIHRyaWFuZ2xlMixcbiAgYXN0ZXJpc2ssXG4gIHNxdWFyZTIsXG4gIGRpYW1vbmQyXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTeW1ib2wodHlwZSwgc2l6ZSkge1xuICBsZXQgY29udGV4dCA9IG51bGwsXG4gICAgICBwYXRoID0gd2l0aFBhdGgoc3ltYm9sKTtcblxuICB0eXBlID0gdHlwZW9mIHR5cGUgPT09IFwiZnVuY3Rpb25cIiA/IHR5cGUgOiBjb25zdGFudCh0eXBlIHx8IGNpcmNsZSk7XG4gIHNpemUgPSB0eXBlb2Ygc2l6ZSA9PT0gXCJmdW5jdGlvblwiID8gc2l6ZSA6IGNvbnN0YW50KHNpemUgPT09IHVuZGVmaW5lZCA/IDY0IDogK3NpemUpO1xuXG4gIGZ1bmN0aW9uIHN5bWJvbCgpIHtcbiAgICBsZXQgYnVmZmVyO1xuICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcbiAgICB0eXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykuZHJhdyhjb250ZXh0LCArc2l6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gY29udGV4dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIHN5bWJvbC50eXBlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHR5cGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KF8pLCBzeW1ib2wpIDogdHlwZTtcbiAgfTtcblxuICBzeW1ib2wuc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzaXplID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHN5bWJvbCkgOiBzaXplO1xuICB9O1xuXG4gIHN5bWJvbC5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvbnRleHQgPSBfID09IG51bGwgPyBudWxsIDogXywgc3ltYm9sKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIHN5bWJvbDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge31cbiIsImV4cG9ydCBmdW5jdGlvbiBwb2ludCh0aGF0LCB4LCB5KSB7XG4gIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyhcbiAgICAoMiAqIHRoYXQuX3gwICsgdGhhdC5feDEpIC8gMyxcbiAgICAoMiAqIHRoYXQuX3kwICsgdGhhdC5feTEpIC8gMyxcbiAgICAodGhhdC5feDAgKyAyICogdGhhdC5feDEpIC8gMyxcbiAgICAodGhhdC5feTAgKyAyICogdGhhdC5feTEpIC8gMyxcbiAgICAodGhhdC5feDAgKyA0ICogdGhhdC5feDEgKyB4KSAvIDYsXG4gICAgKHRoYXQuX3kwICsgNCAqIHRoYXQuX3kxICsgeSkgLyA2XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCYXNpcyhjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5CYXNpcy5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMzogcG9pbnQodGhpcywgdGhpcy5feDEsIHRoaXMuX3kxKTsgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MSwgdGhpcy5feTEpOyBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX2NvbnRleHQubGluZVRvKCg1ICogdGhpcy5feDAgKyB0aGlzLl94MSkgLyA2LCAoNSAqIHRoaXMuX3kwICsgdGhpcy5feTEpIC8gNik7IC8vIGZhbGxzIHRocm91Z2hcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IEJhc2lzKGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3AuanNcIjtcbmltcG9ydCB7cG9pbnR9IGZyb20gXCIuL2Jhc2lzLmpzXCI7XG5cbmZ1bmN0aW9uIEJhc2lzQ2xvc2VkKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkJhc2lzQ2xvc2VkLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBub29wLFxuICBhcmVhRW5kOiBub29wLFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9IHRoaXMuX3gzID0gdGhpcy5feDQgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IHRoaXMuX3kzID0gdGhpcy5feTQgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDE6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDIsIHRoaXMuX3kyKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDI6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8oKHRoaXMuX3gyICsgMiAqIHRoaXMuX3gzKSAvIDMsICh0aGlzLl95MiArIDIgKiB0aGlzLl95MykgLyAzKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oKHRoaXMuX3gzICsgMiAqIHRoaXMuX3gyKSAvIDMsICh0aGlzLl95MyArIDIgKiB0aGlzLl95MikgLyAzKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDM6IHtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MiwgdGhpcy5feTIpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDQsIHRoaXMuX3k0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl94MiA9IHgsIHRoaXMuX3kyID0geTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgdGhpcy5feDMgPSB4LCB0aGlzLl95MyA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX3g0ID0geCwgdGhpcy5feTQgPSB5OyB0aGlzLl9jb250ZXh0Lm1vdmVUbygodGhpcy5feDAgKyA0ICogdGhpcy5feDEgKyB4KSAvIDYsICh0aGlzLl95MCArIDQgKiB0aGlzLl95MSArIHkpIC8gNik7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgQmFzaXNDbG9zZWQoY29udGV4dCk7XG59XG4iLCJpbXBvcnQge3BvaW50fSBmcm9tIFwiLi9iYXNpcy5qc1wiO1xuXG5mdW5jdGlvbiBCYXNpc09wZW4oY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuQmFzaXNPcGVuLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDMpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdmFyIHgwID0gKHRoaXMuX3gwICsgNCAqIHRoaXMuX3gxICsgeCkgLyA2LCB5MCA9ICh0aGlzLl95MCArIDQgKiB0aGlzLl95MSArIHkpIC8gNjsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgwLCB5MCkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4MCwgeTApOyBicmVhaztcbiAgICAgIGNhc2UgMzogdGhpcy5fcG9pbnQgPSA0OyAvLyBmYWxscyB0aHJvdWdoXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBCYXNpc09wZW4oY29udGV4dCk7XG59XG4iLCJpbXBvcnQge0Jhc2lzfSBmcm9tIFwiLi9iYXNpcy5qc1wiO1xuXG5mdW5jdGlvbiBCdW5kbGUoY29udGV4dCwgYmV0YSkge1xuICB0aGlzLl9iYXNpcyA9IG5ldyBCYXNpcyhjb250ZXh0KTtcbiAgdGhpcy5fYmV0YSA9IGJldGE7XG59XG5cbkJ1bmRsZS5wcm90b3R5cGUgPSB7XG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feCA9IFtdO1xuICAgIHRoaXMuX3kgPSBbXTtcbiAgICB0aGlzLl9iYXNpcy5saW5lU3RhcnQoKTtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHggPSB0aGlzLl94LFxuICAgICAgICB5ID0gdGhpcy5feSxcbiAgICAgICAgaiA9IHgubGVuZ3RoIC0gMTtcblxuICAgIGlmIChqID4gMCkge1xuICAgICAgdmFyIHgwID0geFswXSxcbiAgICAgICAgICB5MCA9IHlbMF0sXG4gICAgICAgICAgZHggPSB4W2pdIC0geDAsXG4gICAgICAgICAgZHkgPSB5W2pdIC0geTAsXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIHQ7XG5cbiAgICAgIHdoaWxlICgrK2kgPD0gaikge1xuICAgICAgICB0ID0gaSAvIGo7XG4gICAgICAgIHRoaXMuX2Jhc2lzLnBvaW50KFxuICAgICAgICAgIHRoaXMuX2JldGEgKiB4W2ldICsgKDEgLSB0aGlzLl9iZXRhKSAqICh4MCArIHQgKiBkeCksXG4gICAgICAgICAgdGhpcy5fYmV0YSAqIHlbaV0gKyAoMSAtIHRoaXMuX2JldGEpICogKHkwICsgdCAqIGR5KVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3ggPSB0aGlzLl95ID0gbnVsbDtcbiAgICB0aGlzLl9iYXNpcy5saW5lRW5kKCk7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5feC5wdXNoKCt4KTtcbiAgICB0aGlzLl95LnB1c2goK3kpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKGJldGEpIHtcblxuICBmdW5jdGlvbiBidW5kbGUoY29udGV4dCkge1xuICAgIHJldHVybiBiZXRhID09PSAxID8gbmV3IEJhc2lzKGNvbnRleHQpIDogbmV3IEJ1bmRsZShjb250ZXh0LCBiZXRhKTtcbiAgfVxuXG4gIGJ1bmRsZS5iZXRhID0gZnVuY3Rpb24oYmV0YSkge1xuICAgIHJldHVybiBjdXN0b20oK2JldGEpO1xuICB9O1xuXG4gIHJldHVybiBidW5kbGU7XG59KSgwLjg1KTtcbiIsImV4cG9ydCBmdW5jdGlvbiBwb2ludCh0aGF0LCB4LCB5KSB7XG4gIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyhcbiAgICB0aGF0Ll94MSArIHRoYXQuX2sgKiAodGhhdC5feDIgLSB0aGF0Ll94MCksXG4gICAgdGhhdC5feTEgKyB0aGF0Ll9rICogKHRoYXQuX3kyIC0gdGhhdC5feTApLFxuICAgIHRoYXQuX3gyICsgdGhhdC5fayAqICh0aGF0Ll94MSAtIHgpLFxuICAgIHRoYXQuX3kyICsgdGhhdC5fayAqICh0aGF0Ll95MSAtIHkpLFxuICAgIHRoYXQuX3gyLFxuICAgIHRoYXQuX3kyXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDYXJkaW5hbChjb250ZXh0LCB0ZW5zaW9uKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG59XG5cbkNhcmRpbmFsLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHBvaW50KHRoaXMsIHRoaXMuX3gxLCB0aGlzLl95MSk7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgdGhpcy5feDEgPSB4LCB0aGlzLl95MSA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IC8vIGZhbGxzIHRocm91Z2hcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgZnVuY3Rpb24gY2FyZGluYWwoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQ2FyZGluYWwoY29udGV4dCwgdGVuc2lvbik7XG4gIH1cblxuICBjYXJkaW5hbC50ZW5zaW9uID0gZnVuY3Rpb24odGVuc2lvbikge1xuICAgIHJldHVybiBjdXN0b20oK3RlbnNpb24pO1xuICB9O1xuXG4gIHJldHVybiBjYXJkaW5hbDtcbn0pKDApO1xuIiwiaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3AuanNcIjtcbmltcG9ydCB7cG9pbnR9IGZyb20gXCIuL2NhcmRpbmFsLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBDYXJkaW5hbENsb3NlZChjb250ZXh0LCB0ZW5zaW9uKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG59XG5cbkNhcmRpbmFsQ2xvc2VkLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBub29wLFxuICBhcmVhRW5kOiBub29wLFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9IHRoaXMuX3gzID0gdGhpcy5feDQgPSB0aGlzLl94NSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gdGhpcy5feTMgPSB0aGlzLl95NCA9IHRoaXMuX3k1ID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAzOiB7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NCwgdGhpcy5feTQpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g1LCB0aGlzLl95NSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDMgPSB4LCB0aGlzLl95MyA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3g0ID0geCwgdGhpcy5feTQgPSB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5feDUgPSB4LCB0aGlzLl95NSA9IHk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcblxuICBmdW5jdGlvbiBjYXJkaW5hbChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBDYXJkaW5hbENsb3NlZChjb250ZXh0LCB0ZW5zaW9uKTtcbiAgfVxuXG4gIGNhcmRpbmFsLnRlbnNpb24gPSBmdW5jdGlvbih0ZW5zaW9uKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrdGVuc2lvbik7XG4gIH07XG5cbiAgcmV0dXJuIGNhcmRpbmFsO1xufSkoMCk7XG4iLCJpbXBvcnQge3BvaW50fSBmcm9tIFwiLi9jYXJkaW5hbC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ2FyZGluYWxPcGVuKGNvbnRleHQsIHRlbnNpb24pIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2sgPSAoMSAtIHRlbnNpb24pIC8gNjtcbn1cblxuQ2FyZGluYWxPcGVuLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAzKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHRoaXMuX3BvaW50ID0gNDsgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcblxuICBmdW5jdGlvbiBjYXJkaW5hbChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBDYXJkaW5hbE9wZW4oY29udGV4dCwgdGVuc2lvbik7XG4gIH1cblxuICBjYXJkaW5hbC50ZW5zaW9uID0gZnVuY3Rpb24odGVuc2lvbikge1xuICAgIHJldHVybiBjdXN0b20oK3RlbnNpb24pO1xuICB9O1xuXG4gIHJldHVybiBjYXJkaW5hbDtcbn0pKDApO1xuIiwiaW1wb3J0IHtlcHNpbG9ufSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IHtDYXJkaW5hbH0gZnJvbSBcIi4vY2FyZGluYWwuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50KHRoYXQsIHgsIHkpIHtcbiAgdmFyIHgxID0gdGhhdC5feDEsXG4gICAgICB5MSA9IHRoYXQuX3kxLFxuICAgICAgeDIgPSB0aGF0Ll94MixcbiAgICAgIHkyID0gdGhhdC5feTI7XG5cbiAgaWYgKHRoYXQuX2wwMV9hID4gZXBzaWxvbikge1xuICAgIHZhciBhID0gMiAqIHRoYXQuX2wwMV8yYSArIDMgKiB0aGF0Ll9sMDFfYSAqIHRoYXQuX2wxMl9hICsgdGhhdC5fbDEyXzJhLFxuICAgICAgICBuID0gMyAqIHRoYXQuX2wwMV9hICogKHRoYXQuX2wwMV9hICsgdGhhdC5fbDEyX2EpO1xuICAgIHgxID0gKHgxICogYSAtIHRoYXQuX3gwICogdGhhdC5fbDEyXzJhICsgdGhhdC5feDIgKiB0aGF0Ll9sMDFfMmEpIC8gbjtcbiAgICB5MSA9ICh5MSAqIGEgLSB0aGF0Ll95MCAqIHRoYXQuX2wxMl8yYSArIHRoYXQuX3kyICogdGhhdC5fbDAxXzJhKSAvIG47XG4gIH1cblxuICBpZiAodGhhdC5fbDIzX2EgPiBlcHNpbG9uKSB7XG4gICAgdmFyIGIgPSAyICogdGhhdC5fbDIzXzJhICsgMyAqIHRoYXQuX2wyM19hICogdGhhdC5fbDEyX2EgKyB0aGF0Ll9sMTJfMmEsXG4gICAgICAgIG0gPSAzICogdGhhdC5fbDIzX2EgKiAodGhhdC5fbDIzX2EgKyB0aGF0Ll9sMTJfYSk7XG4gICAgeDIgPSAoeDIgKiBiICsgdGhhdC5feDEgKiB0aGF0Ll9sMjNfMmEgLSB4ICogdGhhdC5fbDEyXzJhKSAvIG07XG4gICAgeTIgPSAoeTIgKiBiICsgdGhhdC5feTEgKiB0aGF0Ll9sMjNfMmEgLSB5ICogdGhhdC5fbDEyXzJhKSAvIG07XG4gIH1cblxuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oeDEsIHkxLCB4MiwgeTIsIHRoYXQuX3gyLCB0aGF0Ll95Mik7XG59XG5cbmZ1bmN0aW9uIENhdG11bGxSb20oY29udGV4dCwgYWxwaGEpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2FscGhhID0gYWxwaGE7XG59XG5cbkNhdG11bGxSb20ucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYSA9XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhID1cbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHRoaXMucG9pbnQodGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG5cbiAgICBpZiAodGhpcy5fcG9pbnQpIHtcbiAgICAgIHZhciB4MjMgPSB0aGlzLl94MiAtIHgsXG4gICAgICAgICAgeTIzID0gdGhpcy5feTIgLSB5O1xuICAgICAgdGhpcy5fbDIzX2EgPSBNYXRoLnNxcnQodGhpcy5fbDIzXzJhID0gTWF0aC5wb3coeDIzICogeDIzICsgeTIzICogeTIzLCB0aGlzLl9hbHBoYSkpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhLCB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmE7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShhbHBoYSkge1xuXG4gIGZ1bmN0aW9uIGNhdG11bGxSb20oY29udGV4dCkge1xuICAgIHJldHVybiBhbHBoYSA/IG5ldyBDYXRtdWxsUm9tKGNvbnRleHQsIGFscGhhKSA6IG5ldyBDYXJkaW5hbChjb250ZXh0LCAwKTtcbiAgfVxuXG4gIGNhdG11bGxSb20uYWxwaGEgPSBmdW5jdGlvbihhbHBoYSkge1xuICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgfTtcblxuICByZXR1cm4gY2F0bXVsbFJvbTtcbn0pKDAuNSk7XG4iLCJpbXBvcnQge0NhcmRpbmFsQ2xvc2VkfSBmcm9tIFwiLi9jYXJkaW5hbENsb3NlZC5qc1wiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3AuanNcIjtcbmltcG9ydCB7cG9pbnR9IGZyb20gXCIuL2NhdG11bGxSb20uanNcIjtcblxuZnVuY3Rpb24gQ2F0bXVsbFJvbUNsb3NlZChjb250ZXh0LCBhbHBoYSkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fYWxwaGEgPSBhbHBoYTtcbn1cblxuQ2F0bXVsbFJvbUNsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCxcbiAgYXJlYUVuZDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID0gdGhpcy5feDUgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IHRoaXMuX3kzID0gdGhpcy5feTQgPSB0aGlzLl95NSA9IE5hTjtcbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2EgPVxuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDE6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDI6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDM6IHtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g0LCB0aGlzLl95NCk7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDUsIHRoaXMuX3k1KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuXG4gICAgaWYgKHRoaXMuX3BvaW50KSB7XG4gICAgICB2YXIgeDIzID0gdGhpcy5feDIgLSB4LFxuICAgICAgICAgIHkyMyA9IHRoaXMuX3kyIC0geTtcbiAgICAgIHRoaXMuX2wyM19hID0gTWF0aC5zcXJ0KHRoaXMuX2wyM18yYSA9IE1hdGgucG93KHgyMyAqIHgyMyArIHkyMyAqIHkyMywgdGhpcy5fYWxwaGEpKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDMgPSB4LCB0aGlzLl95MyA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3g0ID0geCwgdGhpcy5feTQgPSB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5feDUgPSB4LCB0aGlzLl95NSA9IHk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhLCB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmE7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShhbHBoYSkge1xuXG4gIGZ1bmN0aW9uIGNhdG11bGxSb20oY29udGV4dCkge1xuICAgIHJldHVybiBhbHBoYSA/IG5ldyBDYXRtdWxsUm9tQ2xvc2VkKGNvbnRleHQsIGFscGhhKSA6IG5ldyBDYXJkaW5hbENsb3NlZChjb250ZXh0LCAwKTtcbiAgfVxuXG4gIGNhdG11bGxSb20uYWxwaGEgPSBmdW5jdGlvbihhbHBoYSkge1xuICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgfTtcblxuICByZXR1cm4gY2F0bXVsbFJvbTtcbn0pKDAuNSk7XG4iLCJpbXBvcnQge0NhcmRpbmFsT3Blbn0gZnJvbSBcIi4vY2FyZGluYWxPcGVuLmpzXCI7XG5pbXBvcnQge3BvaW50fSBmcm9tIFwiLi9jYXRtdWxsUm9tLmpzXCI7XG5cbmZ1bmN0aW9uIENhdG11bGxSb21PcGVuKGNvbnRleHQsIGFscGhhKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9hbHBoYSA9IGFscGhhO1xufVxuXG5DYXRtdWxsUm9tT3Blbi5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hID1cbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmEgPVxuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDMpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcblxuICAgIGlmICh0aGlzLl9wb2ludCkge1xuICAgICAgdmFyIHgyMyA9IHRoaXMuX3gyIC0geCxcbiAgICAgICAgICB5MjMgPSB0aGlzLl95MiAtIHk7XG4gICAgICB0aGlzLl9sMjNfYSA9IE1hdGguc3FydCh0aGlzLl9sMjNfMmEgPSBNYXRoLnBvdyh4MjMgKiB4MjMgKyB5MjMgKiB5MjMsIHRoaXMuX2FscGhhKSk7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHRoaXMuX3BvaW50ID0gNDsgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhLCB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmE7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShhbHBoYSkge1xuXG4gIGZ1bmN0aW9uIGNhdG11bGxSb20oY29udGV4dCkge1xuICAgIHJldHVybiBhbHBoYSA/IG5ldyBDYXRtdWxsUm9tT3Blbihjb250ZXh0LCBhbHBoYSkgOiBuZXcgQ2FyZGluYWxPcGVuKGNvbnRleHQsIDApO1xuICB9XG5cbiAgY2F0bXVsbFJvbS5hbHBoYSA9IGZ1bmN0aW9uKGFscGhhKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrYWxwaGEpO1xuICB9O1xuXG4gIHJldHVybiBjYXRtdWxsUm9tO1xufSkoMC41KTtcbiIsImltcG9ydCBub29wIGZyb20gXCIuLi9ub29wLmpzXCI7XG5cbmZ1bmN0aW9uIExpbmVhckNsb3NlZChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5MaW5lYXJDbG9zZWQucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IG5vb3AsXG4gIGFyZWFFbmQ6IG5vb3AsXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fcG9pbnQpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgaWYgKHRoaXMuX3BvaW50KSB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICBlbHNlIHRoaXMuX3BvaW50ID0gMSwgdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBMaW5lYXJDbG9zZWQoY29udGV4dCk7XG59XG4iLCJmdW5jdGlvbiBzaWduKHgpIHtcbiAgcmV0dXJuIHggPCAwID8gLTEgOiAxO1xufVxuXG4vLyBDYWxjdWxhdGUgdGhlIHNsb3BlcyBvZiB0aGUgdGFuZ2VudHMgKEhlcm1pdGUtdHlwZSBpbnRlcnBvbGF0aW9uKSBiYXNlZCBvblxuLy8gdGhlIGZvbGxvd2luZyBwYXBlcjogU3RlZmZlbiwgTS4gMTk5MC4gQSBTaW1wbGUgTWV0aG9kIGZvciBNb25vdG9uaWNcbi8vIEludGVycG9sYXRpb24gaW4gT25lIERpbWVuc2lvbi4gQXN0cm9ub215IGFuZCBBc3Ryb3BoeXNpY3MsIFZvbC4gMjM5LCBOTy5cbi8vIE5PVihJSSksIFAuIDQ0MywgMTk5MC5cbmZ1bmN0aW9uIHNsb3BlMyh0aGF0LCB4MiwgeTIpIHtcbiAgdmFyIGgwID0gdGhhdC5feDEgLSB0aGF0Ll94MCxcbiAgICAgIGgxID0geDIgLSB0aGF0Ll94MSxcbiAgICAgIHMwID0gKHRoYXQuX3kxIC0gdGhhdC5feTApIC8gKGgwIHx8IGgxIDwgMCAmJiAtMCksXG4gICAgICBzMSA9ICh5MiAtIHRoYXQuX3kxKSAvIChoMSB8fCBoMCA8IDAgJiYgLTApLFxuICAgICAgcCA9IChzMCAqIGgxICsgczEgKiBoMCkgLyAoaDAgKyBoMSk7XG4gIHJldHVybiAoc2lnbihzMCkgKyBzaWduKHMxKSkgKiBNYXRoLm1pbihNYXRoLmFicyhzMCksIE1hdGguYWJzKHMxKSwgMC41ICogTWF0aC5hYnMocCkpIHx8IDA7XG59XG5cbi8vIENhbGN1bGF0ZSBhIG9uZS1zaWRlZCBzbG9wZS5cbmZ1bmN0aW9uIHNsb3BlMih0aGF0LCB0KSB7XG4gIHZhciBoID0gdGhhdC5feDEgLSB0aGF0Ll94MDtcbiAgcmV0dXJuIGggPyAoMyAqICh0aGF0Ll95MSAtIHRoYXQuX3kwKSAvIGggLSB0KSAvIDIgOiB0O1xufVxuXG4vLyBBY2NvcmRpbmcgdG8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3ViaWNfSGVybWl0ZV9zcGxpbmUjUmVwcmVzZW50YXRpb25zXG4vLyBcInlvdSBjYW4gZXhwcmVzcyBjdWJpYyBIZXJtaXRlIGludGVycG9sYXRpb24gaW4gdGVybXMgb2YgY3ViaWMgQsOpemllciBjdXJ2ZXNcbi8vIHdpdGggcmVzcGVjdCB0byB0aGUgZm91ciB2YWx1ZXMgcDAsIHAwICsgbTAgLyAzLCBwMSAtIG0xIC8gMywgcDFcIi5cbmZ1bmN0aW9uIHBvaW50KHRoYXQsIHQwLCB0MSkge1xuICB2YXIgeDAgPSB0aGF0Ll94MCxcbiAgICAgIHkwID0gdGhhdC5feTAsXG4gICAgICB4MSA9IHRoYXQuX3gxLFxuICAgICAgeTEgPSB0aGF0Ll95MSxcbiAgICAgIGR4ID0gKHgxIC0geDApIC8gMztcbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgwICsgZHgsIHkwICsgZHggKiB0MCwgeDEgLSBkeCwgeTEgLSBkeCAqIHQxLCB4MSwgeTEpO1xufVxuXG5mdW5jdGlvbiBNb25vdG9uZVgoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTW9ub3RvbmVYLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID1cbiAgICB0aGlzLl90MCA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHBvaW50KHRoaXMsIHRoaXMuX3QwLCBzbG9wZTIodGhpcywgdGhpcy5fdDApKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIHQxID0gTmFOO1xuXG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgaWYgKHggPT09IHRoaXMuX3gxICYmIHkgPT09IHRoaXMuX3kxKSByZXR1cm47IC8vIElnbm9yZSBjb2luY2lkZW50IHBvaW50cy5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHBvaW50KHRoaXMsIHNsb3BlMih0aGlzLCB0MSA9IHNsb3BlMyh0aGlzLCB4LCB5KSksIHQxKTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB0aGlzLl90MCwgdDEgPSBzbG9wZTModGhpcywgeCwgeSkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICAgIHRoaXMuX3QwID0gdDE7XG4gIH1cbn1cblxuZnVuY3Rpb24gTW9ub3RvbmVZKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IG5ldyBSZWZsZWN0Q29udGV4dChjb250ZXh0KTtcbn1cblxuKE1vbm90b25lWS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1vbm90b25lWC5wcm90b3R5cGUpKS5wb2ludCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgTW9ub3RvbmVYLnByb3RvdHlwZS5wb2ludC5jYWxsKHRoaXMsIHksIHgpO1xufTtcblxuZnVuY3Rpb24gUmVmbGVjdENvbnRleHQoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuUmVmbGVjdENvbnRleHQucHJvdG90eXBlID0ge1xuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5tb3ZlVG8oeSwgeCk7IH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7IHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7IH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLl9jb250ZXh0LmxpbmVUbyh5LCB4KTsgfSxcbiAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHsgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHkxLCB4MSwgeTIsIHgyLCB5LCB4KTsgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1vbm90b25lWChjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTW9ub3RvbmVYKGNvbnRleHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9ub3RvbmVZKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBNb25vdG9uZVkoY29udGV4dCk7XG59XG4iLCJmdW5jdGlvbiBOYXR1cmFsKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbk5hdHVyYWwucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3ggPSBbXTtcbiAgICB0aGlzLl95ID0gW107XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB4ID0gdGhpcy5feCxcbiAgICAgICAgeSA9IHRoaXMuX3ksXG4gICAgICAgIG4gPSB4Lmxlbmd0aDtcblxuICAgIGlmIChuKSB7XG4gICAgICB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeFswXSwgeVswXSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4WzBdLCB5WzBdKTtcbiAgICAgIGlmIChuID09PSAyKSB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHhbMV0sIHlbMV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHB4ID0gY29udHJvbFBvaW50cyh4KSxcbiAgICAgICAgICAgIHB5ID0gY29udHJvbFBvaW50cyh5KTtcbiAgICAgICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDE7IGkxIDwgbjsgKytpMCwgKytpMSkge1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyhweFswXVtpMF0sIHB5WzBdW2kwXSwgcHhbMV1baTBdLCBweVsxXVtpMF0sIHhbaTFdLCB5W2kxXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiBuID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gICAgdGhpcy5feCA9IHRoaXMuX3kgPSBudWxsO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuX3gucHVzaCgreCk7XG4gICAgdGhpcy5feS5wdXNoKCt5KTtcbiAgfVxufTtcblxuLy8gU2VlIGh0dHBzOi8vd3d3LnBhcnRpY2xlaW5jZWxsLmNvbS8yMDEyL2Jlemllci1zcGxpbmVzLyBmb3IgZGVyaXZhdGlvbi5cbmZ1bmN0aW9uIGNvbnRyb2xQb2ludHMoeCkge1xuICB2YXIgaSxcbiAgICAgIG4gPSB4Lmxlbmd0aCAtIDEsXG4gICAgICBtLFxuICAgICAgYSA9IG5ldyBBcnJheShuKSxcbiAgICAgIGIgPSBuZXcgQXJyYXkobiksXG4gICAgICByID0gbmV3IEFycmF5KG4pO1xuICBhWzBdID0gMCwgYlswXSA9IDIsIHJbMF0gPSB4WzBdICsgMiAqIHhbMV07XG4gIGZvciAoaSA9IDE7IGkgPCBuIC0gMTsgKytpKSBhW2ldID0gMSwgYltpXSA9IDQsIHJbaV0gPSA0ICogeFtpXSArIDIgKiB4W2kgKyAxXTtcbiAgYVtuIC0gMV0gPSAyLCBiW24gLSAxXSA9IDcsIHJbbiAtIDFdID0gOCAqIHhbbiAtIDFdICsgeFtuXTtcbiAgZm9yIChpID0gMTsgaSA8IG47ICsraSkgbSA9IGFbaV0gLyBiW2kgLSAxXSwgYltpXSAtPSBtLCByW2ldIC09IG0gKiByW2kgLSAxXTtcbiAgYVtuIC0gMV0gPSByW24gLSAxXSAvIGJbbiAtIDFdO1xuICBmb3IgKGkgPSBuIC0gMjsgaSA+PSAwOyAtLWkpIGFbaV0gPSAocltpXSAtIGFbaSArIDFdKSAvIGJbaV07XG4gIGJbbiAtIDFdID0gKHhbbl0gKyBhW24gLSAxXSkgLyAyO1xuICBmb3IgKGkgPSAwOyBpIDwgbiAtIDE7ICsraSkgYltpXSA9IDIgKiB4W2kgKyAxXSAtIGFbaSArIDFdO1xuICByZXR1cm4gW2EsIGJdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTmF0dXJhbChjb250ZXh0KTtcbn1cbiIsImZ1bmN0aW9uIFN0ZXAoY29udGV4dCwgdCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fdCA9IHQ7XG59XG5cblN0ZXAucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3ggPSB0aGlzLl95ID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKDAgPCB0aGlzLl90ICYmIHRoaXMuX3QgPCAxICYmIHRoaXMuX3BvaW50ID09PSAyKSB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94LCB0aGlzLl95KTtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgaWYgKHRoaXMuX2xpbmUgPj0gMCkgdGhpcy5fdCA9IDEgLSB0aGlzLl90LCB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyAvLyBmYWxscyB0aHJvdWdoXG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGlmICh0aGlzLl90IDw9IDApIHtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94LCB5KTtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgeDEgPSB0aGlzLl94ICogKDEgLSB0aGlzLl90KSArIHggKiB0aGlzLl90O1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgxLCB0aGlzLl95KTtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4MSwgeSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3ggPSB4LCB0aGlzLl95ID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IFN0ZXAoY29udGV4dCwgMC41KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0ZXBCZWZvcmUoY29udGV4dCkge1xuICByZXR1cm4gbmV3IFN0ZXAoY29udGV4dCwgMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGVwQWZ0ZXIoY29udGV4dCkge1xuICByZXR1cm4gbmV3IFN0ZXAoY29udGV4dCwgMSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMsIG9yZGVyKSB7XG4gIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAxKSkgcmV0dXJuO1xuICBmb3IgKHZhciBpID0gMSwgaiwgczAsIHMxID0gc2VyaWVzW29yZGVyWzBdXSwgbiwgbSA9IHMxLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIHMwID0gczEsIHMxID0gc2VyaWVzW29yZGVyW2ldXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICBzMVtqXVsxXSArPSBzMVtqXVswXSA9IGlzTmFOKHMwW2pdWzFdKSA/IHMwW2pdWzBdIDogczBbal1bMV07XG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMpIHtcbiAgdmFyIG4gPSBzZXJpZXMubGVuZ3RoLCBvID0gbmV3IEFycmF5KG4pO1xuICB3aGlsZSAoLS1uID49IDApIG9bbl0gPSBuO1xuICByZXR1cm4gbztcbn1cbiIsImltcG9ydCBhcnJheSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgb2Zmc2V0Tm9uZSBmcm9tIFwiLi9vZmZzZXQvbm9uZS5qc1wiO1xuaW1wb3J0IG9yZGVyTm9uZSBmcm9tIFwiLi9vcmRlci9ub25lLmpzXCI7XG5cbmZ1bmN0aW9uIHN0YWNrVmFsdWUoZCwga2V5KSB7XG4gIHJldHVybiBkW2tleV07XG59XG5cbmZ1bmN0aW9uIHN0YWNrU2VyaWVzKGtleSkge1xuICBjb25zdCBzZXJpZXMgPSBbXTtcbiAgc2VyaWVzLmtleSA9IGtleTtcbiAgcmV0dXJuIHNlcmllcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBrZXlzID0gY29uc3RhbnQoW10pLFxuICAgICAgb3JkZXIgPSBvcmRlck5vbmUsXG4gICAgICBvZmZzZXQgPSBvZmZzZXROb25lLFxuICAgICAgdmFsdWUgPSBzdGFja1ZhbHVlO1xuXG4gIGZ1bmN0aW9uIHN0YWNrKGRhdGEpIHtcbiAgICB2YXIgc3ogPSBBcnJheS5mcm9tKGtleXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgc3RhY2tTZXJpZXMpLFxuICAgICAgICBpLCBuID0gc3oubGVuZ3RoLCBqID0gLTEsXG4gICAgICAgIG96O1xuXG4gICAgZm9yIChjb25zdCBkIG9mIGRhdGEpIHtcbiAgICAgIGZvciAoaSA9IDAsICsrajsgaSA8IG47ICsraSkge1xuICAgICAgICAoc3pbaV1bal0gPSBbMCwgK3ZhbHVlKGQsIHN6W2ldLmtleSwgaiwgZGF0YSldKS5kYXRhID0gZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwLCBveiA9IGFycmF5KG9yZGVyKHN6KSk7IGkgPCBuOyArK2kpIHtcbiAgICAgIHN6W296W2ldXS5pbmRleCA9IGk7XG4gICAgfVxuXG4gICAgb2Zmc2V0KHN6LCBveik7XG4gICAgcmV0dXJuIHN6O1xuICB9XG5cbiAgc3RhY2sua2V5cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChrZXlzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChBcnJheS5mcm9tKF8pKSwgc3RhY2spIDoga2V5cztcbiAgfTtcblxuICBzdGFjay52YWx1ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2YWx1ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBzdGFjaykgOiB2YWx1ZTtcbiAgfTtcblxuICBzdGFjay5vcmRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChvcmRlciA9IF8gPT0gbnVsbCA/IG9yZGVyTm9uZSA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoQXJyYXkuZnJvbShfKSksIHN0YWNrKSA6IG9yZGVyO1xuICB9O1xuXG4gIHN0YWNrLm9mZnNldCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChvZmZzZXQgPSBfID09IG51bGwgPyBvZmZzZXROb25lIDogXywgc3RhY2spIDogb2Zmc2V0O1xuICB9O1xuXG4gIHJldHVybiBzdGFjaztcbn1cbiIsImltcG9ydCBub25lIGZyb20gXCIuL25vbmUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzLCBvcmRlcikge1xuICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMCkpIHJldHVybjtcbiAgZm9yICh2YXIgaSwgbiwgaiA9IDAsIG0gPSBzZXJpZXNbMF0ubGVuZ3RoLCB5OyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh5ID0gaSA9IDA7IGkgPCBuOyArK2kpIHkgKz0gc2VyaWVzW2ldW2pdWzFdIHx8IDA7XG4gICAgaWYgKHkpIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHNlcmllc1tpXVtqXVsxXSAvPSB5O1xuICB9XG4gIG5vbmUoc2VyaWVzLCBvcmRlcik7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMsIG9yZGVyKSB7XG4gIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAwKSkgcmV0dXJuO1xuICBmb3IgKHZhciBpLCBqID0gMCwgZCwgZHksIHlwLCB5biwgbiwgbSA9IHNlcmllc1tvcmRlclswXV0ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh5cCA9IHluID0gMCwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgoZHkgPSAoZCA9IHNlcmllc1tvcmRlcltpXV1bal0pWzFdIC0gZFswXSkgPiAwKSB7XG4gICAgICAgIGRbMF0gPSB5cCwgZFsxXSA9IHlwICs9IGR5O1xuICAgICAgfSBlbHNlIGlmIChkeSA8IDApIHtcbiAgICAgICAgZFsxXSA9IHluLCBkWzBdID0geW4gKz0gZHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkWzBdID0gMCwgZFsxXSA9IGR5O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IG5vbmUgZnJvbSBcIi4vbm9uZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMsIG9yZGVyKSB7XG4gIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAwKSkgcmV0dXJuO1xuICBmb3IgKHZhciBqID0gMCwgczAgPSBzZXJpZXNbb3JkZXJbMF1dLCBuLCBtID0gczAubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIHkgPSAwOyBpIDwgbjsgKytpKSB5ICs9IHNlcmllc1tpXVtqXVsxXSB8fCAwO1xuICAgIHMwW2pdWzFdICs9IHMwW2pdWzBdID0gLXkgLyAyO1xuICB9XG4gIG5vbmUoc2VyaWVzLCBvcmRlcik7XG59XG4iLCJpbXBvcnQgbm9uZSBmcm9tIFwiLi9ub25lLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcywgb3JkZXIpIHtcbiAgaWYgKCEoKG4gPSBzZXJpZXMubGVuZ3RoKSA+IDApIHx8ICEoKG0gPSAoczAgPSBzZXJpZXNbb3JkZXJbMF1dKS5sZW5ndGgpID4gMCkpIHJldHVybjtcbiAgZm9yICh2YXIgeSA9IDAsIGogPSAxLCBzMCwgbSwgbjsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGkgPSAwLCBzMSA9IDAsIHMyID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIHNpID0gc2VyaWVzW29yZGVyW2ldXSxcbiAgICAgICAgICBzaWowID0gc2lbal1bMV0gfHwgMCxcbiAgICAgICAgICBzaWoxID0gc2lbaiAtIDFdWzFdIHx8IDAsXG4gICAgICAgICAgczMgPSAoc2lqMCAtIHNpajEpIC8gMjtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgaTsgKytrKSB7XG4gICAgICAgIHZhciBzayA9IHNlcmllc1tvcmRlcltrXV0sXG4gICAgICAgICAgICBza2owID0gc2tbal1bMV0gfHwgMCxcbiAgICAgICAgICAgIHNrajEgPSBza1tqIC0gMV1bMV0gfHwgMDtcbiAgICAgICAgczMgKz0gc2tqMCAtIHNrajE7XG4gICAgICB9XG4gICAgICBzMSArPSBzaWowLCBzMiArPSBzMyAqIHNpajA7XG4gICAgfVxuICAgIHMwW2ogLSAxXVsxXSArPSBzMFtqIC0gMV1bMF0gPSB5O1xuICAgIGlmIChzMSkgeSAtPSBzMiAvIHMxO1xuICB9XG4gIHMwW2ogLSAxXVsxXSArPSBzMFtqIC0gMV1bMF0gPSB5O1xuICBub25lKHNlcmllcywgb3JkZXIpO1xufVxuIiwiaW1wb3J0IG5vbmUgZnJvbSBcIi4vbm9uZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMpIHtcbiAgdmFyIHBlYWtzID0gc2VyaWVzLm1hcChwZWFrKTtcbiAgcmV0dXJuIG5vbmUoc2VyaWVzKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHBlYWtzW2FdIC0gcGVha3NbYl07IH0pO1xufVxuXG5mdW5jdGlvbiBwZWFrKHNlcmllcykge1xuICB2YXIgaSA9IC0xLCBqID0gMCwgbiA9IHNlcmllcy5sZW5ndGgsIHZpLCB2aiA9IC1JbmZpbml0eTtcbiAgd2hpbGUgKCsraSA8IG4pIGlmICgodmkgPSArc2VyaWVzW2ldWzFdKSA+IHZqKSB2aiA9IHZpLCBqID0gaTtcbiAgcmV0dXJuIGo7XG59XG4iLCJpbXBvcnQgbm9uZSBmcm9tIFwiLi9ub25lLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcykge1xuICB2YXIgc3VtcyA9IHNlcmllcy5tYXAoc3VtKTtcbiAgcmV0dXJuIG5vbmUoc2VyaWVzKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHN1bXNbYV0gLSBzdW1zW2JdOyB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1bShzZXJpZXMpIHtcbiAgdmFyIHMgPSAwLCBpID0gLTEsIG4gPSBzZXJpZXMubGVuZ3RoLCB2O1xuICB3aGlsZSAoKytpIDwgbikgaWYgKHYgPSArc2VyaWVzW2ldWzFdKSBzICs9IHY7XG4gIHJldHVybiBzO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmcuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzKSB7XG4gIHJldHVybiBhc2NlbmRpbmcoc2VyaWVzKS5yZXZlcnNlKCk7XG59XG4iLCJpbXBvcnQgYXBwZWFyYW5jZSBmcm9tIFwiLi9hcHBlYXJhbmNlLmpzXCI7XG5pbXBvcnQge3N1bX0gZnJvbSBcIi4vYXNjZW5kaW5nLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcykge1xuICB2YXIgbiA9IHNlcmllcy5sZW5ndGgsXG4gICAgICBpLFxuICAgICAgaixcbiAgICAgIHN1bXMgPSBzZXJpZXMubWFwKHN1bSksXG4gICAgICBvcmRlciA9IGFwcGVhcmFuY2Uoc2VyaWVzKSxcbiAgICAgIHRvcCA9IDAsXG4gICAgICBib3R0b20gPSAwLFxuICAgICAgdG9wcyA9IFtdLFxuICAgICAgYm90dG9tcyA9IFtdO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICBqID0gb3JkZXJbaV07XG4gICAgaWYgKHRvcCA8IGJvdHRvbSkge1xuICAgICAgdG9wICs9IHN1bXNbal07XG4gICAgICB0b3BzLnB1c2goaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdHRvbSArPSBzdW1zW2pdO1xuICAgICAgYm90dG9tcy5wdXNoKGopO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3R0b21zLnJldmVyc2UoKS5jb25jYXQodG9wcyk7XG59XG4iLCJpbXBvcnQgbm9uZSBmcm9tIFwiLi9ub25lLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcykge1xuICByZXR1cm4gbm9uZShzZXJpZXMpLnJldmVyc2UoKTtcbn1cbiIsImltcG9ydCB7dXRjRm9ybWF0fSBmcm9tIFwiLi9kZWZhdWx0TG9jYWxlLmpzXCI7XG5cbmV4cG9ydCB2YXIgaXNvU3BlY2lmaWVyID0gXCIlWS0lbS0lZFQlSDolTTolUy4lTFpcIjtcblxuZnVuY3Rpb24gZm9ybWF0SXNvTmF0aXZlKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUudG9JU09TdHJpbmcoKTtcbn1cblxudmFyIGZvcm1hdElzbyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nXG4gICAgPyBmb3JtYXRJc29OYXRpdmVcbiAgICA6IHV0Y0Zvcm1hdChpc29TcGVjaWZpZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXRJc287XG4iLCJpbXBvcnQge2lzb1NwZWNpZmllcn0gZnJvbSBcIi4vaXNvRm9ybWF0LmpzXCI7XG5pbXBvcnQge3V0Y1BhcnNlfSBmcm9tIFwiLi9kZWZhdWx0TG9jYWxlLmpzXCI7XG5cbmZ1bmN0aW9uIHBhcnNlSXNvTmF0aXZlKHN0cmluZykge1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHN0cmluZyk7XG4gIHJldHVybiBpc05hTihkYXRlKSA/IG51bGwgOiBkYXRlO1xufVxuXG52YXIgcGFyc2VJc28gPSArbmV3IERhdGUoXCIyMDAwLTAxLTAxVDAwOjAwOjAwLjAwMFpcIilcbiAgICA/IHBhcnNlSXNvTmF0aXZlXG4gICAgOiB1dGNQYXJzZShpc29TcGVjaWZpZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBwYXJzZUlzbztcbiIsImltcG9ydCB7VGltZXIsIG5vd30gZnJvbSBcIi4vdGltZXIuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gIHZhciB0ID0gbmV3IFRpbWVyLCB0b3RhbCA9IGRlbGF5O1xuICBpZiAoZGVsYXkgPT0gbnVsbCkgcmV0dXJuIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpLCB0O1xuICB0Ll9yZXN0YXJ0ID0gdC5yZXN0YXJ0O1xuICB0LnJlc3RhcnQgPSBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICBkZWxheSA9ICtkZWxheSwgdGltZSA9IHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWU7XG4gICAgdC5fcmVzdGFydChmdW5jdGlvbiB0aWNrKGVsYXBzZWQpIHtcbiAgICAgIGVsYXBzZWQgKz0gdG90YWw7XG4gICAgICB0Ll9yZXN0YXJ0KHRpY2ssIHRvdGFsICs9IGRlbGF5LCB0aW1lKTtcbiAgICAgIGNhbGxiYWNrKGVsYXBzZWQpO1xuICAgIH0sIGRlbGF5LCB0aW1lKTtcbiAgfVxuICB0LnJlc3RhcnQoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG4iLCJleHBvcnQgZGVmYXVsdCB4ID0+ICgpID0+IHg7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBab29tRXZlbnQodHlwZSwge1xuICBzb3VyY2VFdmVudCxcbiAgdGFyZ2V0LFxuICB0cmFuc2Zvcm0sXG4gIGRpc3BhdGNoXG59KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICB0eXBlOiB7dmFsdWU6IHR5cGUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgc291cmNlRXZlbnQ6IHt2YWx1ZTogc291cmNlRXZlbnQsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgdGFyZ2V0OiB7dmFsdWU6IHRhcmdldCwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICB0cmFuc2Zvcm06IHt2YWx1ZTogdHJhbnNmb3JtLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIF86IHt2YWx1ZTogZGlzcGF0Y2h9XG4gIH0pO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIFRyYW5zZm9ybShrLCB4LCB5KSB7XG4gIHRoaXMuayA9IGs7XG4gIHRoaXMueCA9IHg7XG4gIHRoaXMueSA9IHk7XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2Zvcm0sXG4gIHNjYWxlOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIGsgPT09IDEgPyB0aGlzIDogbmV3IFRyYW5zZm9ybSh0aGlzLmsgKiBrLCB0aGlzLngsIHRoaXMueSk7XG4gIH0sXG4gIHRyYW5zbGF0ZTogZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiB4ID09PSAwICYgeSA9PT0gMCA/IHRoaXMgOiBuZXcgVHJhbnNmb3JtKHRoaXMuaywgdGhpcy54ICsgdGhpcy5rICogeCwgdGhpcy55ICsgdGhpcy5rICogeSk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBbcG9pbnRbMF0gKiB0aGlzLmsgKyB0aGlzLngsIHBvaW50WzFdICogdGhpcy5rICsgdGhpcy55XTtcbiAgfSxcbiAgYXBwbHlYOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHggKiB0aGlzLmsgKyB0aGlzLng7XG4gIH0sXG4gIGFwcGx5WTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiB5ICogdGhpcy5rICsgdGhpcy55O1xuICB9LFxuICBpbnZlcnQ6IGZ1bmN0aW9uKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIFsobG9jYXRpb25bMF0gLSB0aGlzLngpIC8gdGhpcy5rLCAobG9jYXRpb25bMV0gLSB0aGlzLnkpIC8gdGhpcy5rXTtcbiAgfSxcbiAgaW52ZXJ0WDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiAoeCAtIHRoaXMueCkgLyB0aGlzLms7XG4gIH0sXG4gIGludmVydFk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gKHkgLSB0aGlzLnkpIC8gdGhpcy5rO1xuICB9LFxuICByZXNjYWxlWDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4LmNvcHkoKS5kb21haW4oeC5yYW5nZSgpLm1hcCh0aGlzLmludmVydFgsIHRoaXMpLm1hcCh4LmludmVydCwgeCkpO1xuICB9LFxuICByZXNjYWxlWTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiB5LmNvcHkoKS5kb21haW4oeS5yYW5nZSgpLm1hcCh0aGlzLmludmVydFksIHRoaXMpLm1hcCh5LmludmVydCwgeSkpO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgdGhpcy54ICsgXCIsXCIgKyB0aGlzLnkgKyBcIikgc2NhbGUoXCIgKyB0aGlzLmsgKyBcIilcIjtcbiAgfVxufTtcblxuZXhwb3J0IHZhciBpZGVudGl0eSA9IG5ldyBUcmFuc2Zvcm0oMSwgMCwgMCk7XG5cbnRyYW5zZm9ybS5wcm90b3R5cGUgPSBUcmFuc2Zvcm0ucHJvdG90eXBlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm0obm9kZSkge1xuICB3aGlsZSAoIW5vZGUuX196b29tKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuIGlkZW50aXR5O1xuICByZXR1cm4gbm9kZS5fX3pvb207XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gbm9wcm9wYWdhdGlvbihldmVudCkge1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZXZlbnQpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7ZHJhZ0Rpc2FibGUsIGRyYWdFbmFibGV9IGZyb20gXCJkMy1kcmFnXCI7XG5pbXBvcnQge2ludGVycG9sYXRlWm9vbX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge3NlbGVjdCwgcG9pbnRlcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtpbnRlcnJ1cHR9IGZyb20gXCJkMy10cmFuc2l0aW9uXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBab29tRXZlbnQgZnJvbSBcIi4vZXZlbnQuanNcIjtcbmltcG9ydCB7VHJhbnNmb3JtLCBpZGVudGl0eX0gZnJvbSBcIi4vdHJhbnNmb3JtLmpzXCI7XG5pbXBvcnQgbm9ldmVudCwge25vcHJvcGFnYXRpb259IGZyb20gXCIuL25vZXZlbnQuanNcIjtcblxuLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXG4vLyBleGNlcHQgZm9yIHBpbmNoLXRvLXpvb20sIHdoaWNoIGlzIHNlbnQgYXMgYSB3aGVlbCtjdHJsS2V5IGV2ZW50XG5mdW5jdGlvbiBkZWZhdWx0RmlsdGVyKGV2ZW50KSB7XG4gIHJldHVybiAoIWV2ZW50LmN0cmxLZXkgfHwgZXZlbnQudHlwZSA9PT0gJ3doZWVsJykgJiYgIWV2ZW50LmJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEV4dGVudCgpIHtcbiAgdmFyIGUgPSB0aGlzO1xuICBpZiAoZSBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpIHtcbiAgICBlID0gZS5vd25lclNWR0VsZW1lbnQgfHwgZTtcbiAgICBpZiAoZS5oYXNBdHRyaWJ1dGUoXCJ2aWV3Qm94XCIpKSB7XG4gICAgICBlID0gZS52aWV3Qm94LmJhc2VWYWw7XG4gICAgICByZXR1cm4gW1tlLngsIGUueV0sIFtlLnggKyBlLndpZHRoLCBlLnkgKyBlLmhlaWdodF1dO1xuICAgIH1cbiAgICByZXR1cm4gW1swLCAwXSwgW2Uud2lkdGguYmFzZVZhbC52YWx1ZSwgZS5oZWlnaHQuYmFzZVZhbC52YWx1ZV1dO1xuICB9XG4gIHJldHVybiBbWzAsIDBdLCBbZS5jbGllbnRXaWR0aCwgZS5jbGllbnRIZWlnaHRdXTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRyYW5zZm9ybSgpIHtcbiAgcmV0dXJuIHRoaXMuX196b29tIHx8IGlkZW50aXR5O1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0V2hlZWxEZWx0YShldmVudCkge1xuICByZXR1cm4gLWV2ZW50LmRlbHRhWSAqIChldmVudC5kZWx0YU1vZGUgPT09IDEgPyAwLjA1IDogZXZlbnQuZGVsdGFNb2RlID8gMSA6IDAuMDAyKSAqIChldmVudC5jdHJsS2V5ID8gMTAgOiAxKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRvdWNoYWJsZSgpIHtcbiAgcmV0dXJuIG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyB8fCAoXCJvbnRvdWNoc3RhcnRcIiBpbiB0aGlzKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdENvbnN0cmFpbih0cmFuc2Zvcm0sIGV4dGVudCwgdHJhbnNsYXRlRXh0ZW50KSB7XG4gIHZhciBkeDAgPSB0cmFuc2Zvcm0uaW52ZXJ0WChleHRlbnRbMF1bMF0pIC0gdHJhbnNsYXRlRXh0ZW50WzBdWzBdLFxuICAgICAgZHgxID0gdHJhbnNmb3JtLmludmVydFgoZXh0ZW50WzFdWzBdKSAtIHRyYW5zbGF0ZUV4dGVudFsxXVswXSxcbiAgICAgIGR5MCA9IHRyYW5zZm9ybS5pbnZlcnRZKGV4dGVudFswXVsxXSkgLSB0cmFuc2xhdGVFeHRlbnRbMF1bMV0sXG4gICAgICBkeTEgPSB0cmFuc2Zvcm0uaW52ZXJ0WShleHRlbnRbMV1bMV0pIC0gdHJhbnNsYXRlRXh0ZW50WzFdWzFdO1xuICByZXR1cm4gdHJhbnNmb3JtLnRyYW5zbGF0ZShcbiAgICBkeDEgPiBkeDAgPyAoZHgwICsgZHgxKSAvIDIgOiBNYXRoLm1pbigwLCBkeDApIHx8IE1hdGgubWF4KDAsIGR4MSksXG4gICAgZHkxID4gZHkwID8gKGR5MCArIGR5MSkgLyAyIDogTWF0aC5taW4oMCwgZHkwKSB8fCBNYXRoLm1heCgwLCBkeTEpXG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgZmlsdGVyID0gZGVmYXVsdEZpbHRlcixcbiAgICAgIGV4dGVudCA9IGRlZmF1bHRFeHRlbnQsXG4gICAgICBjb25zdHJhaW4gPSBkZWZhdWx0Q29uc3RyYWluLFxuICAgICAgd2hlZWxEZWx0YSA9IGRlZmF1bHRXaGVlbERlbHRhLFxuICAgICAgdG91Y2hhYmxlID0gZGVmYXVsdFRvdWNoYWJsZSxcbiAgICAgIHNjYWxlRXh0ZW50ID0gWzAsIEluZmluaXR5XSxcbiAgICAgIHRyYW5zbGF0ZUV4dGVudCA9IFtbLUluZmluaXR5LCAtSW5maW5pdHldLCBbSW5maW5pdHksIEluZmluaXR5XV0sXG4gICAgICBkdXJhdGlvbiA9IDI1MCxcbiAgICAgIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVab29tLFxuICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcInpvb21cIiwgXCJlbmRcIiksXG4gICAgICB0b3VjaHN0YXJ0aW5nLFxuICAgICAgdG91Y2hmaXJzdCxcbiAgICAgIHRvdWNoZW5kaW5nLFxuICAgICAgdG91Y2hEZWxheSA9IDUwMCxcbiAgICAgIHdoZWVsRGVsYXkgPSAxNTAsXG4gICAgICBjbGlja0Rpc3RhbmNlMiA9IDAsXG4gICAgICB0YXBEaXN0YW5jZSA9IDEwO1xuXG4gIGZ1bmN0aW9uIHpvb20oc2VsZWN0aW9uKSB7XG4gICAgc2VsZWN0aW9uXG4gICAgICAgIC5wcm9wZXJ0eShcIl9fem9vbVwiLCBkZWZhdWx0VHJhbnNmb3JtKVxuICAgICAgICAub24oXCJ3aGVlbC56b29tXCIsIHdoZWVsZWQsIHtwYXNzaXZlOiBmYWxzZX0pXG4gICAgICAgIC5vbihcIm1vdXNlZG93bi56b29tXCIsIG1vdXNlZG93bmVkKVxuICAgICAgICAub24oXCJkYmxjbGljay56b29tXCIsIGRibGNsaWNrZWQpXG4gICAgICAuZmlsdGVyKHRvdWNoYWJsZSlcbiAgICAgICAgLm9uKFwidG91Y2hzdGFydC56b29tXCIsIHRvdWNoc3RhcnRlZClcbiAgICAgICAgLm9uKFwidG91Y2htb3ZlLnpvb21cIiwgdG91Y2htb3ZlZClcbiAgICAgICAgLm9uKFwidG91Y2hlbmQuem9vbSB0b3VjaGNhbmNlbC56b29tXCIsIHRvdWNoZW5kZWQpXG4gICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIik7XG4gIH1cblxuICB6b29tLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHRyYW5zZm9ybSwgcG9pbnQsIGV2ZW50KSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IGNvbGxlY3Rpb24uc2VsZWN0aW9uID8gY29sbGVjdGlvbi5zZWxlY3Rpb24oKSA6IGNvbGxlY3Rpb247XG4gICAgc2VsZWN0aW9uLnByb3BlcnR5KFwiX196b29tXCIsIGRlZmF1bHRUcmFuc2Zvcm0pO1xuICAgIGlmIChjb2xsZWN0aW9uICE9PSBzZWxlY3Rpb24pIHtcbiAgICAgIHNjaGVkdWxlKGNvbGxlY3Rpb24sIHRyYW5zZm9ybSwgcG9pbnQsIGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0aW9uLmludGVycnVwdCgpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIGdlc3R1cmUodGhpcywgYXJndW1lbnRzKVxuICAgICAgICAgIC5ldmVudChldmVudClcbiAgICAgICAgICAuc3RhcnQoKVxuICAgICAgICAgIC56b29tKG51bGwsIHR5cGVvZiB0cmFuc2Zvcm0gPT09IFwiZnVuY3Rpb25cIiA/IHRyYW5zZm9ybS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogdHJhbnNmb3JtKVxuICAgICAgICAgIC5lbmQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB6b29tLnNjYWxlQnkgPSBmdW5jdGlvbihzZWxlY3Rpb24sIGssIHAsIGV2ZW50KSB7XG4gICAgem9vbS5zY2FsZVRvKHNlbGVjdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgazAgPSB0aGlzLl9fem9vbS5rLFxuICAgICAgICAgIGsxID0gdHlwZW9mIGsgPT09IFwiZnVuY3Rpb25cIiA/IGsuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGs7XG4gICAgICByZXR1cm4gazAgKiBrMTtcbiAgICB9LCBwLCBldmVudCk7XG4gIH07XG5cbiAgem9vbS5zY2FsZVRvID0gZnVuY3Rpb24oc2VsZWN0aW9uLCBrLCBwLCBldmVudCkge1xuICAgIHpvb20udHJhbnNmb3JtKHNlbGVjdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZSA9IGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIHQwID0gdGhpcy5fX3pvb20sXG4gICAgICAgICAgcDAgPSBwID09IG51bGwgPyBjZW50cm9pZChlKSA6IHR5cGVvZiBwID09PSBcImZ1bmN0aW9uXCIgPyBwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBwLFxuICAgICAgICAgIHAxID0gdDAuaW52ZXJ0KHAwKSxcbiAgICAgICAgICBrMSA9IHR5cGVvZiBrID09PSBcImZ1bmN0aW9uXCIgPyBrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBrO1xuICAgICAgcmV0dXJuIGNvbnN0cmFpbih0cmFuc2xhdGUoc2NhbGUodDAsIGsxKSwgcDAsIHAxKSwgZSwgdHJhbnNsYXRlRXh0ZW50KTtcbiAgICB9LCBwLCBldmVudCk7XG4gIH07XG5cbiAgem9vbS50cmFuc2xhdGVCeSA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgeCwgeSwgZXZlbnQpIHtcbiAgICB6b29tLnRyYW5zZm9ybShzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGNvbnN0cmFpbih0aGlzLl9fem9vbS50cmFuc2xhdGUoXG4gICAgICAgIHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB4LFxuICAgICAgICB0eXBlb2YgeSA9PT0gXCJmdW5jdGlvblwiID8geS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogeVxuICAgICAgKSwgZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRyYW5zbGF0ZUV4dGVudCk7XG4gICAgfSwgbnVsbCwgZXZlbnQpO1xuICB9O1xuXG4gIHpvb20udHJhbnNsYXRlVG8gPSBmdW5jdGlvbihzZWxlY3Rpb24sIHgsIHksIHAsIGV2ZW50KSB7XG4gICAgem9vbS50cmFuc2Zvcm0oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlID0gZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgdCA9IHRoaXMuX196b29tLFxuICAgICAgICAgIHAwID0gcCA9PSBudWxsID8gY2VudHJvaWQoZSkgOiB0eXBlb2YgcCA9PT0gXCJmdW5jdGlvblwiID8gcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogcDtcbiAgICAgIHJldHVybiBjb25zdHJhaW4oaWRlbnRpdHkudHJhbnNsYXRlKHAwWzBdLCBwMFsxXSkuc2NhbGUodC5rKS50cmFuc2xhdGUoXG4gICAgICAgIHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyAteC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogLXgsXG4gICAgICAgIHR5cGVvZiB5ID09PSBcImZ1bmN0aW9uXCIgPyAteS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogLXlcbiAgICAgICksIGUsIHRyYW5zbGF0ZUV4dGVudCk7XG4gICAgfSwgcCwgZXZlbnQpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHRyYW5zZm9ybSwgaykge1xuICAgIGsgPSBNYXRoLm1heChzY2FsZUV4dGVudFswXSwgTWF0aC5taW4oc2NhbGVFeHRlbnRbMV0sIGspKTtcbiAgICByZXR1cm4gayA9PT0gdHJhbnNmb3JtLmsgPyB0cmFuc2Zvcm0gOiBuZXcgVHJhbnNmb3JtKGssIHRyYW5zZm9ybS54LCB0cmFuc2Zvcm0ueSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGUodHJhbnNmb3JtLCBwMCwgcDEpIHtcbiAgICB2YXIgeCA9IHAwWzBdIC0gcDFbMF0gKiB0cmFuc2Zvcm0uaywgeSA9IHAwWzFdIC0gcDFbMV0gKiB0cmFuc2Zvcm0uaztcbiAgICByZXR1cm4geCA9PT0gdHJhbnNmb3JtLnggJiYgeSA9PT0gdHJhbnNmb3JtLnkgPyB0cmFuc2Zvcm0gOiBuZXcgVHJhbnNmb3JtKHRyYW5zZm9ybS5rLCB4LCB5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkKGV4dGVudCkge1xuICAgIHJldHVybiBbKCtleHRlbnRbMF1bMF0gKyArZXh0ZW50WzFdWzBdKSAvIDIsICgrZXh0ZW50WzBdWzFdICsgK2V4dGVudFsxXVsxXSkgLyAyXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlKHRyYW5zaXRpb24sIHRyYW5zZm9ybSwgcG9pbnQsIGV2ZW50KSB7XG4gICAgdHJhbnNpdGlvblxuICAgICAgICAub24oXCJzdGFydC56b29tXCIsIGZ1bmN0aW9uKCkgeyBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cykuZXZlbnQoZXZlbnQpLnN0YXJ0KCk7IH0pXG4gICAgICAgIC5vbihcImludGVycnVwdC56b29tIGVuZC56b29tXCIsIGZ1bmN0aW9uKCkgeyBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cykuZXZlbnQoZXZlbnQpLmVuZCgpOyB9KVxuICAgICAgICAudHdlZW4oXCJ6b29tXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgZyA9IGdlc3R1cmUodGhhdCwgYXJncykuZXZlbnQoZXZlbnQpLFxuICAgICAgICAgICAgICBlID0gZXh0ZW50LmFwcGx5KHRoYXQsIGFyZ3MpLFxuICAgICAgICAgICAgICBwID0gcG9pbnQgPT0gbnVsbCA/IGNlbnRyb2lkKGUpIDogdHlwZW9mIHBvaW50ID09PSBcImZ1bmN0aW9uXCIgPyBwb2ludC5hcHBseSh0aGF0LCBhcmdzKSA6IHBvaW50LFxuICAgICAgICAgICAgICB3ID0gTWF0aC5tYXgoZVsxXVswXSAtIGVbMF1bMF0sIGVbMV1bMV0gLSBlWzBdWzFdKSxcbiAgICAgICAgICAgICAgYSA9IHRoYXQuX196b29tLFxuICAgICAgICAgICAgICBiID0gdHlwZW9mIHRyYW5zZm9ybSA9PT0gXCJmdW5jdGlvblwiID8gdHJhbnNmb3JtLmFwcGx5KHRoYXQsIGFyZ3MpIDogdHJhbnNmb3JtLFxuICAgICAgICAgICAgICBpID0gaW50ZXJwb2xhdGUoYS5pbnZlcnQocCkuY29uY2F0KHcgLyBhLmspLCBiLmludmVydChwKS5jb25jYXQodyAvIGIuaykpO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBpZiAodCA9PT0gMSkgdCA9IGI7IC8vIEF2b2lkIHJvdW5kaW5nIGVycm9yIG9uIGVuZC5cbiAgICAgICAgICAgIGVsc2UgeyB2YXIgbCA9IGkodCksIGsgPSB3IC8gbFsyXTsgdCA9IG5ldyBUcmFuc2Zvcm0oaywgcFswXSAtIGxbMF0gKiBrLCBwWzFdIC0gbFsxXSAqIGspOyB9XG4gICAgICAgICAgICBnLnpvb20obnVsbCwgdCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXN0dXJlKHRoYXQsIGFyZ3MsIGNsZWFuKSB7XG4gICAgcmV0dXJuICghY2xlYW4gJiYgdGhhdC5fX3pvb21pbmcpIHx8IG5ldyBHZXN0dXJlKHRoYXQsIGFyZ3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gR2VzdHVyZSh0aGF0LCBhcmdzKSB7XG4gICAgdGhpcy50aGF0ID0gdGhhdDtcbiAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgIHRoaXMuYWN0aXZlID0gMDtcbiAgICB0aGlzLnNvdXJjZUV2ZW50ID0gbnVsbDtcbiAgICB0aGlzLmV4dGVudCA9IGV4dGVudC5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICB0aGlzLnRhcHMgPSAwO1xuICB9XG5cbiAgR2VzdHVyZS5wcm90b3R5cGUgPSB7XG4gICAgZXZlbnQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQpIHRoaXMuc291cmNlRXZlbnQgPSBldmVudDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCsrdGhpcy5hY3RpdmUgPT09IDEpIHtcbiAgICAgICAgdGhpcy50aGF0Ll9fem9vbWluZyA9IHRoaXM7XG4gICAgICAgIHRoaXMuZW1pdChcInN0YXJ0XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICB6b29tOiBmdW5jdGlvbihrZXksIHRyYW5zZm9ybSkge1xuICAgICAgaWYgKHRoaXMubW91c2UgJiYga2V5ICE9PSBcIm1vdXNlXCIpIHRoaXMubW91c2VbMV0gPSB0cmFuc2Zvcm0uaW52ZXJ0KHRoaXMubW91c2VbMF0pO1xuICAgICAgaWYgKHRoaXMudG91Y2gwICYmIGtleSAhPT0gXCJ0b3VjaFwiKSB0aGlzLnRvdWNoMFsxXSA9IHRyYW5zZm9ybS5pbnZlcnQodGhpcy50b3VjaDBbMF0pO1xuICAgICAgaWYgKHRoaXMudG91Y2gxICYmIGtleSAhPT0gXCJ0b3VjaFwiKSB0aGlzLnRvdWNoMVsxXSA9IHRyYW5zZm9ybS5pbnZlcnQodGhpcy50b3VjaDFbMF0pO1xuICAgICAgdGhpcy50aGF0Ll9fem9vbSA9IHRyYW5zZm9ybTtcbiAgICAgIHRoaXMuZW1pdChcInpvb21cIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkge1xuICAgICAgICBkZWxldGUgdGhpcy50aGF0Ll9fem9vbWluZztcbiAgICAgICAgdGhpcy5lbWl0KFwiZW5kXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbWl0OiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICB2YXIgZCA9IHNlbGVjdCh0aGlzLnRoYXQpLmRhdHVtKCk7XG4gICAgICBsaXN0ZW5lcnMuY2FsbChcbiAgICAgICAgdHlwZSxcbiAgICAgICAgdGhpcy50aGF0LFxuICAgICAgICBuZXcgWm9vbUV2ZW50KHR5cGUsIHtcbiAgICAgICAgICBzb3VyY2VFdmVudDogdGhpcy5zb3VyY2VFdmVudCxcbiAgICAgICAgICB0YXJnZXQ6IHpvb20sXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICB0cmFuc2Zvcm06IHRoaXMudGhhdC5fX3pvb20sXG4gICAgICAgICAgZGlzcGF0Y2g6IGxpc3RlbmVyc1xuICAgICAgICB9KSxcbiAgICAgICAgZFxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gd2hlZWxlZChldmVudCwgLi4uYXJncykge1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJncykuZXZlbnQoZXZlbnQpLFxuICAgICAgICB0ID0gdGhpcy5fX3pvb20sXG4gICAgICAgIGsgPSBNYXRoLm1heChzY2FsZUV4dGVudFswXSwgTWF0aC5taW4oc2NhbGVFeHRlbnRbMV0sIHQuayAqIE1hdGgucG93KDIsIHdoZWVsRGVsdGEuYXBwbHkodGhpcywgYXJndW1lbnRzKSkpKSxcbiAgICAgICAgcCA9IHBvaW50ZXIoZXZlbnQpO1xuXG4gICAgLy8gSWYgdGhlIG1vdXNlIGlzIGluIHRoZSBzYW1lIGxvY2F0aW9uIGFzIGJlZm9yZSwgcmV1c2UgaXQuXG4gICAgLy8gSWYgdGhlcmUgd2VyZSByZWNlbnQgd2hlZWwgZXZlbnRzLCByZXNldCB0aGUgd2hlZWwgaWRsZSB0aW1lb3V0LlxuICAgIGlmIChnLndoZWVsKSB7XG4gICAgICBpZiAoZy5tb3VzZVswXVswXSAhPT0gcFswXSB8fCBnLm1vdXNlWzBdWzFdICE9PSBwWzFdKSB7XG4gICAgICAgIGcubW91c2VbMV0gPSB0LmludmVydChnLm1vdXNlWzBdID0gcCk7XG4gICAgICB9XG4gICAgICBjbGVhclRpbWVvdXQoZy53aGVlbCk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhpcyB3aGVlbCBldmVudCB3b27igJl0IHRyaWdnZXIgYSB0cmFuc2Zvcm0gY2hhbmdlLCBpZ25vcmUgaXQuXG4gICAgZWxzZSBpZiAodC5rID09PSBrKSByZXR1cm47XG5cbiAgICAvLyBPdGhlcndpc2UsIGNhcHR1cmUgdGhlIG1vdXNlIHBvaW50IGFuZCBsb2NhdGlvbiBhdCB0aGUgc3RhcnQuXG4gICAgZWxzZSB7XG4gICAgICBnLm1vdXNlID0gW3AsIHQuaW52ZXJ0KHApXTtcbiAgICAgIGludGVycnVwdCh0aGlzKTtcbiAgICAgIGcuc3RhcnQoKTtcbiAgICB9XG5cbiAgICBub2V2ZW50KGV2ZW50KTtcbiAgICBnLndoZWVsID0gc2V0VGltZW91dCh3aGVlbGlkbGVkLCB3aGVlbERlbGF5KTtcbiAgICBnLnpvb20oXCJtb3VzZVwiLCBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQsIGspLCBnLm1vdXNlWzBdLCBnLm1vdXNlWzFdKSwgZy5leHRlbnQsIHRyYW5zbGF0ZUV4dGVudCkpO1xuXG4gICAgZnVuY3Rpb24gd2hlZWxpZGxlZCgpIHtcbiAgICAgIGcud2hlZWwgPSBudWxsO1xuICAgICAgZy5lbmQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZWRvd25lZChldmVudCwgLi4uYXJncykge1xuICAgIGlmICh0b3VjaGVuZGluZyB8fCAhZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgY3VycmVudFRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQsXG4gICAgICAgIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3MsIHRydWUpLmV2ZW50KGV2ZW50KSxcbiAgICAgICAgdiA9IHNlbGVjdChldmVudC52aWV3KS5vbihcIm1vdXNlbW92ZS56b29tXCIsIG1vdXNlbW92ZWQsIHRydWUpLm9uKFwibW91c2V1cC56b29tXCIsIG1vdXNldXBwZWQsIHRydWUpLFxuICAgICAgICBwID0gcG9pbnRlcihldmVudCwgY3VycmVudFRhcmdldCksXG4gICAgICAgIHgwID0gZXZlbnQuY2xpZW50WCxcbiAgICAgICAgeTAgPSBldmVudC5jbGllbnRZO1xuXG4gICAgZHJhZ0Rpc2FibGUoZXZlbnQudmlldyk7XG4gICAgbm9wcm9wYWdhdGlvbihldmVudCk7XG4gICAgZy5tb3VzZSA9IFtwLCB0aGlzLl9fem9vbS5pbnZlcnQocCldO1xuICAgIGludGVycnVwdCh0aGlzKTtcbiAgICBnLnN0YXJ0KCk7XG5cbiAgICBmdW5jdGlvbiBtb3VzZW1vdmVkKGV2ZW50KSB7XG4gICAgICBub2V2ZW50KGV2ZW50KTtcbiAgICAgIGlmICghZy5tb3ZlZCkge1xuICAgICAgICB2YXIgZHggPSBldmVudC5jbGllbnRYIC0geDAsIGR5ID0gZXZlbnQuY2xpZW50WSAtIHkwO1xuICAgICAgICBnLm1vdmVkID0gZHggKiBkeCArIGR5ICogZHkgPiBjbGlja0Rpc3RhbmNlMjtcbiAgICAgIH1cbiAgICAgIGcuZXZlbnQoZXZlbnQpXG4gICAgICAgLnpvb20oXCJtb3VzZVwiLCBjb25zdHJhaW4odHJhbnNsYXRlKGcudGhhdC5fX3pvb20sIGcubW91c2VbMF0gPSBwb2ludGVyKGV2ZW50LCBjdXJyZW50VGFyZ2V0KSwgZy5tb3VzZVsxXSksIGcuZXh0ZW50LCB0cmFuc2xhdGVFeHRlbnQpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3VzZXVwcGVkKGV2ZW50KSB7XG4gICAgICB2Lm9uKFwibW91c2Vtb3ZlLnpvb20gbW91c2V1cC56b29tXCIsIG51bGwpO1xuICAgICAgZHJhZ0VuYWJsZShldmVudC52aWV3LCBnLm1vdmVkKTtcbiAgICAgIG5vZXZlbnQoZXZlbnQpO1xuICAgICAgZy5ldmVudChldmVudCkuZW5kKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGJsY2xpY2tlZChldmVudCwgLi4uYXJncykge1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgdDAgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgcDAgPSBwb2ludGVyKGV2ZW50LmNoYW5nZWRUb3VjaGVzID8gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gOiBldmVudCwgdGhpcyksXG4gICAgICAgIHAxID0gdDAuaW52ZXJ0KHAwKSxcbiAgICAgICAgazEgPSB0MC5rICogKGV2ZW50LnNoaWZ0S2V5ID8gMC41IDogMiksXG4gICAgICAgIHQxID0gY29uc3RyYWluKHRyYW5zbGF0ZShzY2FsZSh0MCwgazEpLCBwMCwgcDEpLCBleHRlbnQuYXBwbHkodGhpcywgYXJncyksIHRyYW5zbGF0ZUV4dGVudCk7XG5cbiAgICBub2V2ZW50KGV2ZW50KTtcbiAgICBpZiAoZHVyYXRpb24gPiAwKSBzZWxlY3QodGhpcykudHJhbnNpdGlvbigpLmR1cmF0aW9uKGR1cmF0aW9uKS5jYWxsKHNjaGVkdWxlLCB0MSwgcDAsIGV2ZW50KTtcbiAgICBlbHNlIHNlbGVjdCh0aGlzKS5jYWxsKHpvb20udHJhbnNmb3JtLCB0MSwgcDAsIGV2ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoc3RhcnRlZChldmVudCwgLi4uYXJncykge1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LnRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCxcbiAgICAgICAgZyA9IGdlc3R1cmUodGhpcywgYXJncywgZXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoID09PSBuKS5ldmVudChldmVudCksXG4gICAgICAgIHN0YXJ0ZWQsIGksIHQsIHA7XG5cbiAgICBub3Byb3BhZ2F0aW9uKGV2ZW50KTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB0ID0gdG91Y2hlc1tpXSwgcCA9IHBvaW50ZXIodCwgdGhpcyk7XG4gICAgICBwID0gW3AsIHRoaXMuX196b29tLmludmVydChwKSwgdC5pZGVudGlmaWVyXTtcbiAgICAgIGlmICghZy50b3VjaDApIGcudG91Y2gwID0gcCwgc3RhcnRlZCA9IHRydWUsIGcudGFwcyA9IDEgKyAhIXRvdWNoc3RhcnRpbmc7XG4gICAgICBlbHNlIGlmICghZy50b3VjaDEgJiYgZy50b3VjaDBbMl0gIT09IHBbMl0pIGcudG91Y2gxID0gcCwgZy50YXBzID0gMDtcbiAgICB9XG5cbiAgICBpZiAodG91Y2hzdGFydGluZykgdG91Y2hzdGFydGluZyA9IGNsZWFyVGltZW91dCh0b3VjaHN0YXJ0aW5nKTtcblxuICAgIGlmIChzdGFydGVkKSB7XG4gICAgICBpZiAoZy50YXBzIDwgMikgdG91Y2hmaXJzdCA9IHBbMF0sIHRvdWNoc3RhcnRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaHN0YXJ0aW5nID0gbnVsbDsgfSwgdG91Y2hEZWxheSk7XG4gICAgICBpbnRlcnJ1cHQodGhpcyk7XG4gICAgICBnLnN0YXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2htb3ZlZChldmVudCwgLi4uYXJncykge1xuICAgIGlmICghdGhpcy5fX3pvb21pbmcpIHJldHVybjtcbiAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJncykuZXZlbnQoZXZlbnQpLFxuICAgICAgICB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgdCwgcCwgbDtcblxuICAgIG5vZXZlbnQoZXZlbnQpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHQgPSB0b3VjaGVzW2ldLCBwID0gcG9pbnRlcih0LCB0aGlzKTtcbiAgICAgIGlmIChnLnRvdWNoMCAmJiBnLnRvdWNoMFsyXSA9PT0gdC5pZGVudGlmaWVyKSBnLnRvdWNoMFswXSA9IHA7XG4gICAgICBlbHNlIGlmIChnLnRvdWNoMSAmJiBnLnRvdWNoMVsyXSA9PT0gdC5pZGVudGlmaWVyKSBnLnRvdWNoMVswXSA9IHA7XG4gICAgfVxuICAgIHQgPSBnLnRoYXQuX196b29tO1xuICAgIGlmIChnLnRvdWNoMSkge1xuICAgICAgdmFyIHAwID0gZy50b3VjaDBbMF0sIGwwID0gZy50b3VjaDBbMV0sXG4gICAgICAgICAgcDEgPSBnLnRvdWNoMVswXSwgbDEgPSBnLnRvdWNoMVsxXSxcbiAgICAgICAgICBkcCA9IChkcCA9IHAxWzBdIC0gcDBbMF0pICogZHAgKyAoZHAgPSBwMVsxXSAtIHAwWzFdKSAqIGRwLFxuICAgICAgICAgIGRsID0gKGRsID0gbDFbMF0gLSBsMFswXSkgKiBkbCArIChkbCA9IGwxWzFdIC0gbDBbMV0pICogZGw7XG4gICAgICB0ID0gc2NhbGUodCwgTWF0aC5zcXJ0KGRwIC8gZGwpKTtcbiAgICAgIHAgPSBbKHAwWzBdICsgcDFbMF0pIC8gMiwgKHAwWzFdICsgcDFbMV0pIC8gMl07XG4gICAgICBsID0gWyhsMFswXSArIGwxWzBdKSAvIDIsIChsMFsxXSArIGwxWzFdKSAvIDJdO1xuICAgIH1cbiAgICBlbHNlIGlmIChnLnRvdWNoMCkgcCA9IGcudG91Y2gwWzBdLCBsID0gZy50b3VjaDBbMV07XG4gICAgZWxzZSByZXR1cm47XG5cbiAgICBnLnpvb20oXCJ0b3VjaFwiLCBjb25zdHJhaW4odHJhbnNsYXRlKHQsIHAsIGwpLCBnLmV4dGVudCwgdHJhbnNsYXRlRXh0ZW50KSk7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaGVuZGVkKGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgaWYgKCF0aGlzLl9fem9vbWluZykgcmV0dXJuO1xuICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmdzKS5ldmVudChldmVudCksXG4gICAgICAgIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCB0O1xuXG4gICAgbm9wcm9wYWdhdGlvbihldmVudCk7XG4gICAgaWYgKHRvdWNoZW5kaW5nKSBjbGVhclRpbWVvdXQodG91Y2hlbmRpbmcpO1xuICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCB0b3VjaERlbGF5KTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB0ID0gdG91Y2hlc1tpXTtcbiAgICAgIGlmIChnLnRvdWNoMCAmJiBnLnRvdWNoMFsyXSA9PT0gdC5pZGVudGlmaWVyKSBkZWxldGUgZy50b3VjaDA7XG4gICAgICBlbHNlIGlmIChnLnRvdWNoMSAmJiBnLnRvdWNoMVsyXSA9PT0gdC5pZGVudGlmaWVyKSBkZWxldGUgZy50b3VjaDE7XG4gICAgfVxuICAgIGlmIChnLnRvdWNoMSAmJiAhZy50b3VjaDApIGcudG91Y2gwID0gZy50b3VjaDEsIGRlbGV0ZSBnLnRvdWNoMTtcbiAgICBpZiAoZy50b3VjaDApIGcudG91Y2gwWzFdID0gdGhpcy5fX3pvb20uaW52ZXJ0KGcudG91Y2gwWzBdKTtcbiAgICBlbHNlIHtcbiAgICAgIGcuZW5kKCk7XG4gICAgICAvLyBJZiB0aGlzIHdhcyBhIGRibHRhcCwgcmVyb3V0ZSB0byB0aGUgKG9wdGlvbmFsKSBkYmxjbGljay56b29tIGhhbmRsZXIuXG4gICAgICBpZiAoZy50YXBzID09PSAyKSB7XG4gICAgICAgIHQgPSBwb2ludGVyKHQsIHRoaXMpO1xuICAgICAgICBpZiAoTWF0aC5oeXBvdCh0b3VjaGZpcnN0WzBdIC0gdFswXSwgdG91Y2hmaXJzdFsxXSAtIHRbMV0pIDwgdGFwRGlzdGFuY2UpIHtcbiAgICAgICAgICB2YXIgcCA9IHNlbGVjdCh0aGlzKS5vbihcImRibGNsaWNrLnpvb21cIik7XG4gICAgICAgICAgaWYgKHApIHAuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHpvb20ud2hlZWxEZWx0YSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh3aGVlbERlbHRhID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHpvb20pIDogd2hlZWxEZWx0YTtcbiAgfTtcblxuICB6b29tLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIHpvb20pIDogZmlsdGVyO1xuICB9O1xuXG4gIHpvb20udG91Y2hhYmxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRvdWNoYWJsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgem9vbSkgOiB0b3VjaGFibGU7XG4gIH07XG5cbiAgem9vbS5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChbWytfWzBdWzBdLCArX1swXVsxXV0sIFsrX1sxXVswXSwgK19bMV1bMV1dXSksIHpvb20pIDogZXh0ZW50O1xuICB9O1xuXG4gIHpvb20uc2NhbGVFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGVFeHRlbnRbMF0gPSArX1swXSwgc2NhbGVFeHRlbnRbMV0gPSArX1sxXSwgem9vbSkgOiBbc2NhbGVFeHRlbnRbMF0sIHNjYWxlRXh0ZW50WzFdXTtcbiAgfTtcblxuICB6b29tLnRyYW5zbGF0ZUV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0cmFuc2xhdGVFeHRlbnRbMF1bMF0gPSArX1swXVswXSwgdHJhbnNsYXRlRXh0ZW50WzFdWzBdID0gK19bMV1bMF0sIHRyYW5zbGF0ZUV4dGVudFswXVsxXSA9ICtfWzBdWzFdLCB0cmFuc2xhdGVFeHRlbnRbMV1bMV0gPSArX1sxXVsxXSwgem9vbSkgOiBbW3RyYW5zbGF0ZUV4dGVudFswXVswXSwgdHJhbnNsYXRlRXh0ZW50WzBdWzFdXSwgW3RyYW5zbGF0ZUV4dGVudFsxXVswXSwgdHJhbnNsYXRlRXh0ZW50WzFdWzFdXV07XG4gIH07XG5cbiAgem9vbS5jb25zdHJhaW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29uc3RyYWluID0gXywgem9vbSkgOiBjb25zdHJhaW47XG4gIH07XG5cbiAgem9vbS5kdXJhdGlvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkdXJhdGlvbiA9ICtfLCB6b29tKSA6IGR1cmF0aW9uO1xuICB9O1xuXG4gIHpvb20uaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCB6b29tKSA6IGludGVycG9sYXRlO1xuICB9O1xuXG4gIHpvb20ub24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gem9vbSA6IHZhbHVlO1xuICB9O1xuXG4gIHpvb20uY2xpY2tEaXN0YW5jZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGlja0Rpc3RhbmNlMiA9IChfID0gK18pICogXywgem9vbSkgOiBNYXRoLnNxcnQoY2xpY2tEaXN0YW5jZTIpO1xuICB9O1xuXG4gIHpvb20udGFwRGlzdGFuY2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGFwRGlzdGFuY2UgPSArXywgem9vbSkgOiB0YXBEaXN0YW5jZTtcbiAgfTtcblxuICByZXR1cm4gem9vbTtcbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XHJcbmltcG9ydCB7IGljZHQgfSBmcm9tIFwiLi4vLi4vc3JjL19JQ0RUL3Byb3RvdHlwZS9pY2R0XCI7XHJcbmltcG9ydCB7IGljZHRfUnVuIH0gZnJvbSBcIi4uLy4uL3NyYy9fSUNEVC9zY3JpcHQvcnVuXCI7XHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcclxuICAgIGljZHQuY29udGFpbmVyID0gJyNtYWluQ29udGFpbmVyJztcclxuICAgIGljZHQuc3ZnID0gJyNtYWluU3ZnJztcclxuXHJcbiAgICBpY2R0LmNvbmZpZyA9ICgoY29uZmlnKSA9PiB7XHJcbiAgICAgICAgbGV0IHsgZmlsZXVwbG9hZHVybCwgcmVhZGZpbGV1cGxvYWR1cmwgfSA9IGNvbmZpZztcclxuICAgICAgICByZXR1cm4geyBmaWxldXBsb2FkdXJsLCByZWFkZmlsZXVwbG9hZHVybCB9XHJcbiAgICB9KSh7XHJcbiAgICAgICAgXCJtYWRvbnZpXCI6IFwic2Nvcm1cIixcclxuICAgICAgICBcInRlbmR2XCI6IFwiW1NDT1JNXVwiLFxyXG4gICAgICAgIFwid2VidXJsXCI6IFwiaHR0cHM6Ly90YWJjYS52bi9cIixcclxuICAgICAgICBcImZpbGV1cGxvYWR1cmxcIjogXCIvXCIsXHJcbiAgICAgICAgXCJyZWFkZmlsZXVwbG9hZHVybFwiOiBcImZpbGVzL1wiLFxyXG4gICAgfSk7XHJcblxyXG4gICAgaWNkdF9SdW4uZGF0YSA9IF9ib2FyZF9jb250ZW50O1xyXG5cclxuICAgIC8vXHJcbiAgICBpY2R0X1J1bi5ydW5TbGlkZSgxKTtcclxufSkiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImUiLCJ0IiwibiIsInIiLCJzIiwibyIsInUiLCJpIiwiZiIsIkVycm9yIiwiY29kZSIsImwiLCJjYWxsIiwibGVuZ3RoIiwiX2RlcmVxXyIsImdsb2JhbCIsInNjaGVkdWxlRHJhaW4iLCJkcmFpbmluZyIsIk11dGF0aW9uIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJjYWxsZWQiLCJvYnNlcnZlciIsIm5leHRUaWNrIiwiZWxlbWVudCIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsImRhdGEiLCJzZXRJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsImNyZWF0ZUVsZW1lbnQiLCJzY3JpcHRFbCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImRvY3VtZW50RWxlbWVudCIsImFwcGVuZENoaWxkIiwic2V0VGltZW91dCIsImNoYW5uZWwiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvcnQyIiwicG9zdE1lc3NhZ2UiLCJxdWV1ZSIsIm9sZFF1ZXVlIiwibGVuIiwidGFzayIsInB1c2giLCJ0aGlzIiwiZyIsInNlbGYiLCJ3aW5kb3ciLCJpbW1lZGlhdGUiLCJJTlRFUk5BTCIsImhhbmRsZXJzIiwiUkVKRUNURUQiLCJGVUxGSUxMRUQiLCJQRU5ESU5HIiwiUHJvbWlzZSIsInJlc29sdmVyIiwiVHlwZUVycm9yIiwic3RhdGUiLCJvdXRjb21lIiwic2FmZWx5UmVzb2x2ZVRoZW5hYmxlIiwiUXVldWVJdGVtIiwicHJvbWlzZSIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhbGxGdWxmaWxsZWQiLCJvdGhlckNhbGxGdWxmaWxsZWQiLCJjYWxsUmVqZWN0ZWQiLCJvdGhlckNhbGxSZWplY3RlZCIsInVud3JhcCIsImZ1bmMiLCJ2YWx1ZSIsInJldHVyblZhbHVlIiwicmVqZWN0IiwicmVzb2x2ZSIsImdldFRoZW4iLCJvYmoiLCJ0aGVuIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJ0aGVuYWJsZSIsIm9uRXJyb3IiLCJvblN1Y2Nlc3MiLCJyZXN1bHQiLCJ0cnlDYXRjaCIsInN0YXR1cyIsIm91dCIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIiwiZXJyb3IiLCJyZWFzb24iLCJhbGwiLCJpdGVyYWJsZSIsIk9iamVjdCIsInRvU3RyaW5nIiwidmFsdWVzIiwiQXJyYXkiLCJyZXNvbHZlZCIsImFsbFJlc29sdmVyIiwib3V0VmFsdWUiLCJyYWNlIiwicmVzcG9uc2UiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJpZGIiLCJpbmRleGVkREIiLCJ3ZWJraXRJbmRleGVkREIiLCJtb3pJbmRleGVkREIiLCJPSW5kZXhlZERCIiwibXNJbmRleGVkREIiLCJnZXRJREIiLCJjcmVhdGVCbG9iIiwicGFydHMiLCJwcm9wZXJ0aWVzIiwiQmxvYiIsIm5hbWUiLCJidWlsZGVyIiwiQmxvYkJ1aWxkZXIiLCJNU0Jsb2JCdWlsZGVyIiwiTW96QmxvYkJ1aWxkZXIiLCJXZWJLaXRCbG9iQnVpbGRlciIsImFwcGVuZCIsImdldEJsb2IiLCJ0eXBlIiwiUHJvbWlzZSQxIiwiZXhlY3V0ZUNhbGxiYWNrIiwiY2FsbGJhY2siLCJleGVjdXRlVHdvQ2FsbGJhY2tzIiwiZXJyb3JDYWxsYmFjayIsIm5vcm1hbGl6ZUtleSIsImtleSIsImNvbnNvbGUiLCJ3YXJuIiwiU3RyaW5nIiwiZ2V0Q2FsbGJhY2siLCJERVRFQ1RfQkxPQl9TVVBQT1JUX1NUT1JFIiwic3VwcG9ydHNCbG9icyIsImRiQ29udGV4dHMiLCJSRUFEX09OTFkiLCJSRUFEX1dSSVRFIiwiX2JpblN0cmluZ1RvQXJyYXlCdWZmZXIiLCJiaW4iLCJidWYiLCJBcnJheUJ1ZmZlciIsImFyciIsIlVpbnQ4QXJyYXkiLCJjaGFyQ29kZUF0IiwiX2NoZWNrQmxvYlN1cHBvcnQiLCJ0eG4iLCJ0cmFuc2FjdGlvbiIsImJsb2IiLCJvYmplY3RTdG9yZSIsInB1dCIsIm9uYWJvcnQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsIm9uY29tcGxldGUiLCJtYXRjaGVkQ2hyb21lIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwibWF0Y2giLCJtYXRjaGVkRWRnZSIsInBhcnNlSW50IiwiX2NoZWNrQmxvYlN1cHBvcnRXaXRob3V0Q2FjaGluZyIsIl9kZWZlclJlYWRpbmVzcyIsImRiSW5mbyIsImRiQ29udGV4dCIsImRlZmVycmVkT3BlcmF0aW9uIiwiZGVmZXJyZWRPcGVyYXRpb25zIiwiZGJSZWFkeSIsIl9hZHZhbmNlUmVhZGluZXNzIiwicG9wIiwiX3JlamVjdFJlYWRpbmVzcyIsImVyciIsIl9nZXRDb25uZWN0aW9uIiwidXBncmFkZU5lZWRlZCIsImZvcmFnZXMiLCJkYiIsImNsb3NlIiwiZGJBcmdzIiwidmVyc2lvbiIsIm9wZW5yZXEiLCJvcGVuIiwib251cGdyYWRlbmVlZGVkIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJzdG9yZU5hbWUiLCJvbGRWZXJzaW9uIiwiZXgiLCJuZXdWZXJzaW9uIiwib25lcnJvciIsIm9uc3VjY2VzcyIsIm9udmVyc2lvbmNoYW5nZSIsInRhcmdldCIsIl9nZXRPcmlnaW5hbENvbm5lY3Rpb24iLCJfZ2V0VXBncmFkZWRDb25uZWN0aW9uIiwiX2lzVXBncmFkZU5lZWRlZCIsImRlZmF1bHRWZXJzaW9uIiwiaXNOZXdTdG9yZSIsIm9iamVjdFN0b3JlTmFtZXMiLCJjb250YWlucyIsImlzRG93bmdyYWRlIiwiaXNVcGdyYWRlIiwiaW5jVmVyc2lvbiIsIl9kZWNvZGVCbG9iIiwiZW5jb2RlZEJsb2IiLCJhdG9iIiwiX2lzRW5jb2RlZEJsb2IiLCJfX2xvY2FsX2ZvcmFnZV9lbmNvZGVkX2Jsb2IiLCJfZnVsbHlSZWFkeSIsIl9pbml0UmVhZHkiLCJfZGJJbmZvIiwiY3JlYXRlVHJhbnNhY3Rpb24iLCJtb2RlIiwicmV0cmllcyIsInVuZGVmaW5lZCIsInR4IiwiZm9yYWdlIiwiX3RyeVJlY29ubmVjdCIsImFzeW5jU3RvcmFnZSIsIl9kcml2ZXIiLCJfaW5pdFN0b3JhZ2UiLCJvcHRpb25zIiwicmVhZHkiLCJpbml0UHJvbWlzZXMiLCJpZ25vcmVFcnJvcnMiLCJqIiwic2xpY2UiLCJfZGVmYXVsdENvbmZpZyIsImsiLCJfc3VwcG9ydCIsImlzU2FmYXJpIiwib3BlbkRhdGFiYXNlIiwidGVzdCIsInBsYXRmb3JtIiwiaGFzRmV0Y2giLCJmZXRjaCIsImluZGV4T2YiLCJJREJLZXlSYW5nZSIsImlzSW5kZXhlZERCVmFsaWQiLCJpdGVyYXRlIiwicmVxIiwib3BlbkN1cnNvciIsIml0ZXJhdGlvbk51bWJlciIsImN1cnNvciIsImdldEl0ZW0iLCJnZXQiLCJzZXRJdGVtIiwiYmxvYlN1cHBvcnQiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkZW5kIiwiYmFzZTY0IiwiYnRvYSIsInJlYWRBc0JpbmFyeVN0cmluZyIsInN0b3JlIiwicmVtb3ZlSXRlbSIsImNsZWFyIiwiY291bnQiLCJhZHZhbmNlZCIsIm9wZW5LZXlDdXJzb3IiLCJhZHZhbmNlIiwia2V5cyIsImRyb3BJbnN0YW5jZSIsImN1cnJlbnRDb25maWciLCJjb25maWciLCJkYlByb21pc2UiLCJkcm9wT2JqZWN0UHJvbWlzZSIsImRlbGV0ZU9iamVjdFN0b3JlIiwiX2ZvcmFnZTIiLCJkcm9wREJQcm9taXNlIiwiZGVsZXRlRGF0YWJhc2UiLCJvbmJsb2NrZWQiLCJCQVNFX0NIQVJTIiwiQkxPQl9UWVBFX1BSRUZJWF9SRUdFWCIsIlNFUklBTElaRURfTUFSS0VSIiwiVFlQRV9BUlJBWUJVRkZFUiIsIlRZUEVfQkxPQiIsIlRZUEVfSU5UOEFSUkFZIiwiVFlQRV9VSU5UOEFSUkFZIiwiVFlQRV9VSU5UOENMQU1QRURBUlJBWSIsIlRZUEVfSU5UMTZBUlJBWSIsIlRZUEVfSU5UMzJBUlJBWSIsIlRZUEVfVUlOVDE2QVJSQVkiLCJUWVBFX1VJTlQzMkFSUkFZIiwiVFlQRV9GTE9BVDMyQVJSQVkiLCJUWVBFX0ZMT0FUNjRBUlJBWSIsInRvU3RyaW5nJDEiLCJzdHJpbmdUb0J1ZmZlciIsInNlcmlhbGl6ZWRTdHJpbmciLCJlbmNvZGVkMSIsImVuY29kZWQyIiwiZW5jb2RlZDMiLCJlbmNvZGVkNCIsImJ1ZmZlckxlbmd0aCIsInAiLCJidWZmZXIiLCJieXRlcyIsImJ1ZmZlclRvU3RyaW5nIiwiYmFzZTY0U3RyaW5nIiwic3Vic3RyaW5nIiwibG9jYWxmb3JhZ2VTZXJpYWxpemVyIiwic2VyaWFsaXplIiwidmFsdWVUeXBlIiwibWFya2VyIiwiZmlsZVJlYWRlciIsIm9ubG9hZCIsInN0ciIsInJlYWRBc0FycmF5QnVmZmVyIiwiSlNPTiIsInN0cmluZ2lmeSIsImRlc2VyaWFsaXplIiwicGFyc2UiLCJibG9iVHlwZSIsIlNFUklBTElaRURfTUFSS0VSX0xFTkdUSCIsIm1hdGNoZXIiLCJJbnQ4QXJyYXkiLCJVaW50OENsYW1wZWRBcnJheSIsIkludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJVaW50MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsImNyZWF0ZURiVGFibGUiLCJleGVjdXRlU3FsIiwidHJ5RXhlY3V0ZVNxbCIsInNxbFN0YXRlbWVudCIsImFyZ3MiLCJTWU5UQVhfRVJSIiwicmVzdWx0cyIsInJvd3MiLCJfc2V0SXRlbSIsInJldHJpZXNMZWZ0Iiwib3JpZ2luYWxWYWx1ZSIsInNlcmlhbGl6ZXIiLCJzcWxFcnJvciIsIlFVT1RBX0VSUiIsIndlYlNRTFN0b3JhZ2UiLCJkYkluZm9Qcm9taXNlIiwiZGVzY3JpcHRpb24iLCJzaXplIiwiaXRlbSIsImMiLCJzdG9yZU5hbWVzIiwiZ2V0QWxsU3RvcmVOYW1lcyIsIm9wZXJhdGlvbkluZm8iLCJkcm9wVGFibGUiLCJvcGVyYXRpb25zIiwiX2dldEtleVByZWZpeCIsImRlZmF1bHRDb25maWciLCJrZXlQcmVmaXgiLCJfaXNMb2NhbFN0b3JhZ2VVc2FibGUiLCJsb2NhbFN0b3JhZ2VUZXN0S2V5IiwibG9jYWxTdG9yYWdlIiwiY2hlY2tJZkxvY2FsU3RvcmFnZVRocm93cyIsImxvY2FsU3RvcmFnZVdyYXBwZXIiLCJpc0xvY2FsU3RvcmFnZVZhbGlkIiwia2V5UHJlZml4TGVuZ3RoIiwiaXRlbUtleSIsImluY2x1ZGVzIiwiYXJyYXkiLCJzZWFyY2hFbGVtZW50IiwieCIsInkiLCJpc05hTiIsImlzQXJyYXkiLCJhcmciLCJEZWZpbmVkRHJpdmVycyIsIkRyaXZlclN1cHBvcnQiLCJEZWZhdWx0RHJpdmVycyIsIklOREVYRUREQiIsIldFQlNRTCIsIkxPQ0FMU1RPUkFHRSIsIkRlZmF1bHREcml2ZXJPcmRlciIsIk9wdGlvbmFsRHJpdmVyTWV0aG9kcyIsIkxpYnJhcnlNZXRob2RzIiwiY29uY2F0IiwiRGVmYXVsdENvbmZpZyIsImRyaXZlciIsImNhbGxXaGVuUmVhZHkiLCJsb2NhbEZvcmFnZUluc3RhbmNlIiwibGlicmFyeU1ldGhvZCIsIl9hcmdzIiwiZXh0ZW5kIiwiX2tleSIsImhhc093blByb3BlcnR5IiwiTG9jYWxGb3JhZ2UiLCJkcml2ZXJUeXBlS2V5IiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9jbGFzc0NhbGxDaGVjayIsImRyaXZlck5hbWUiLCJkZWZpbmVEcml2ZXIiLCJfY29uZmlnIiwiX2RyaXZlclNldCIsIl9pbml0RHJpdmVyIiwiX3JlYWR5IiwiX3dyYXBMaWJyYXJ5TWV0aG9kc1dpdGhSZWFkeSIsInNldERyaXZlciIsInJlcGxhY2UiLCJkcml2ZXJPYmplY3QiLCJjb21wbGlhbmNlRXJyb3IiLCJkcml2ZXJNZXRob2RzIiwiZHJpdmVyTWV0aG9kTmFtZSIsIm1ldGhvZE5vdEltcGxlbWVudGVkRmFjdG9yeSIsIm1ldGhvZE5hbWUiLCJfaSIsIl9sZW4iLCJvcHRpb25hbERyaXZlck1ldGhvZCIsImNvbmZpZ3VyZU1pc3NpbmdNZXRob2RzIiwic2V0RHJpdmVyU3VwcG9ydCIsInN1cHBvcnQiLCJpbmZvIiwiZ2V0RHJpdmVyIiwiZ2V0RHJpdmVyUHJvbWlzZSIsImdldFNlcmlhbGl6ZXIiLCJzZXJpYWxpemVyUHJvbWlzZSIsImRyaXZlcnMiLCJzdXBwb3J0ZWREcml2ZXJzIiwiX2dldFN1cHBvcnRlZERyaXZlcnMiLCJzZXREcml2ZXJUb0NvbmZpZyIsImV4dGVuZFNlbGZXaXRoRHJpdmVyIiwiX2V4dGVuZCIsIm9sZERyaXZlclNldERvbmUiLCJjdXJyZW50RHJpdmVySW5kZXgiLCJkcml2ZXJQcm9taXNlTG9vcCIsImluaXREcml2ZXIiLCJzdXBwb3J0cyIsImxpYnJhcnlNZXRob2RzQW5kUHJvcGVydGllcyIsImNyZWF0ZUluc3RhbmNlIiwibG9jYWxmb3JhZ2VfanMiLCJzdmdDcmVhdGVfUmVjdENlbnRlckF0dHJpYnV0ZSIsImZpbGwiLCJzdHJva2UiLCJzdHJva2VXaWR0aCIsInN2Z0Rlc2lnbl9MaW5lQXR0cmlidXRlIiwic3Ryb2tlTGluZWNhcCIsInN0cm9rZURhc2hhcnJheXMiLCJzdmdEZXNpZ25fUmVjdEF0dHJpYnV0ZSIsIndpZHRoIiwiaGVpZ2h0Iiwic3ZnRGVzaWduX1JlY3RDZW50ZXJBdHRyaWJ1dGUiLCJzdmdTZWxlY3RfUmVjdE5vZGVBdHRyaWJ1dGUiLCJzdmdJbnRlcmFjdGl2ZV9MaW5lQXR0cmlidXRlIiwic3Ryb2tlRGFzaGFycmF5Iiwic3ZnSW50ZXJhY3RpdmVfUmVjdENlbnRlckF0dHJpYnV0ZSIsInN2Z1NldElkeF9SZWN0Tm9kZUF0dHJpYnV0ZSIsImljZHRfQWRhcHRlcl9QYXRoRF8yX1BvaW50TWFwcyIsImQiLCJzcGxpdCIsIm1hcCIsIm0iLCJwb2ludFR5cGUiLCJwb2ludHMiLCJ0cmltIiwiaWNkdF9Sb3VuZE51bWJlciIsInBhcnNlRmxvYXQiLCJpY2R0X0FkYXB0ZXJfUG9pbnRNYXBzXzJfUGF0aEQiLCJwb2ludE1hcHMiLCJwb2ludE1hcCIsImpvaW4iLCJpY2R0X0FkYXB0ZXJfUG9pbnRNYXBzX0V4dHJhY3RfTWluTWF4WFkiLCJhcnJfeCIsImFycl95IiwicG9pbnRfeCIsInBvaW50X3kiLCJmb3JFYWNoIiwicG9pbnQiLCJpZHgiLCJudW1YIiwibnVtWSIsIm51bSIsIm1pblgiLCJNYXRoIiwibWluIiwibWluWSIsIm1heFgiLCJtYXgiLCJtYXhZIiwiaWNkdF9BZGFwdGVyX1BvaW50TWFwc18yX1JhdGlvTWFwcyIsInJhdGlvcyIsImljZHRfQWRhcHRlcl9SYXRpb01hcHNfMl9QYXRoRCIsInJhdGlvTWFwcyIsInJhdGlvTWFwIiwicmF0aW8iLCJpY2R0X0FkYXB0ZXJfUG9seWdvblBvaW50c18yX1BvaW50cyIsImljZHRfQWRhcHRlcl9Qb2ludHNfRXh0cmFjdF9NaW5NYXhYWSIsImljZHRfQWRhcHRlcl9Qb2ludHNfMl9SYXRpb3MiLCJpY2R0X0FkYXB0ZXJfUmF0aW9zXzJfUG9seWdvblBvaW50cyIsImljZHRfQWRhcHRlcl9leHRyYWN0X21hdHJpeCIsIm1hdHJpeEFCQ0RFRiIsImFyck51bSIsImEiLCJiIiwiaWNkdF9BZGFwdGVyX01hcF9QYXRoRF9NYXRyaXgiLCJwYXRoRCIsIm1hdHJpeCIsIlNuYXAiLCJwYXRoIiwiTWF0cml4IiwiZXh0cmFjdFNvdXJjZVYxIiwiZXh0cmFjdFNvdXJjZSIsInVybCIsInNyYyIsInNVcmwiLCJzUGF0aCIsInNTcmMiLCJpY2R0IiwicmVhZGZpbGV1cGxvYWR1cmwiLCJleHRyYWN0RnJvbURhdGFWMSIsImRhdGFTb3VyY2UiLCJ2aWV3Qm94Iiwic2NyZWVuIiwidyIsImgiLCJzbGlkZXMiLCJjdXJyZW50RGF0YSIsInNsaWRlSWR4IiwidGVzdDIiLCJzbGlkZSIsImlkIiwibmV3U2xpZGVJZCIsInN2ZyIsIm5vZGVzIiwiYXVkaW90cnVlIiwiYXVkaW9mYWxzZSIsImVmZmVjdHRydWUiLCJlZmZlY3RmYWxzZSIsImljb250cnVlIiwiaWNvbmZhbHNlIiwiYmFja2dyb3VuZCIsIm1hdGNoQmFzZTY0IiwibWF0Y2hVcmwiLCJjb2xvciIsImpRdWVyeSIsImZpbmQiLCJlYWNoIiwiZWwiLCJwTm9kZSIsInBhcmVudHMiLCJub2RlSW5kZXgiLCJhdHRyIiwibm9kZVRpbWUiLCJub2RlSWQiLCJnZXRBdHRyaWJ1dGUiLCJub2RlIiwibm9kZU5hbWUiLCJ0aW1lIiwiVl9TaGFwZVR5cGUiLCJQT0xZR09OIiwiQ0lSQ0xFIiwiRUxMSVBTRSIsIkxJTkUiLCJSRUNUIiwiRk9SRUlHTk9CSkVDVCIsInJvdGF0ZSIsInh5IiwiY3giLCJjeSIsImV5IiwicngiLCJyeSIsIngxIiwieTEiLCJ4MiIsInkyIiwiYXNzaWduIiwiYXR0cmlidXRlIiwicmVzIiwic3Ryb2tlTGluZWpvaW4iLCJzdHlsZSIsInN2Z0NvbnRhaW5lciIsImJvcmRlcldpZHRoIiwiY3NzIiwiYm9yZGVyU3R5bGUiLCJsaWJfY29sb3JfZXh0cmFjdDJIZXhBbHBoYSIsImhleCIsImFscGhhIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJPcGFjaXR5IiwiYmFja2dyb3VuZENvbG9yIiwiYmFja2dyb3VuZE9wYWNpdHkiLCJzdmdFZGl0b3JDb250ZW50IiwiZGF0YVN0eWxlIiwiVGV4dENvbG9yIiwiZm9udEZhbWlseSIsIkZvbnRGYW1pbHkiLCJmb250U2l6ZSIsIkZvbnRTaXplIiwib3BhY2l0eSIsInNvdXJjZSIsImhhc0NsYXNzIiwidmFyaWFibGVLZXl3b3JkcyIsImh0bWxDb250ZW50IiwiaHRtbCIsImlucHV0IiwidGV4dGFyZWEiLCJub2RlVGVzdCIsInRydWVmYWxzZSIsImlzY29ycmVjdCIsInNpbmdsZWNob2ljZSIsIm11bHRpY2hvaWNlIiwiZmlsbEtleXdvcmRzIiwiZmlsdGVyIiwidiIsInZhbHMiLCJ0ZXh0IiwiTmFOIiwibWF0Y2hpbmciLCJzcGVlY2giLCJlbEltZyIsImltYWdlIiwiZWxJZnJhbWUiLCJpZnJhbWUiLCJlbFN2ZyIsInN2Z0NvbnRlbnQiLCJvdXRlckhUTUwiLCJtZWRpYUl0ZW0iLCJhdWRpbyIsInZpZGVvIiwiZmlsZSIsImxpbmsiLCJlbEltZ0NvdmVyIiwiYW5pbWF0ZSIsImFuaW1hdGVzIiwiZWxlbWVudElkIiwiaW50ZXJhY3RpdmUiLCJhY3Rpb25TaG93cyIsImFjdGlvbnMiLCJzaG93IiwiYWN0aXZlIiwiYWN0aW9uIiwiaXRlcmF0aW9uIiwiZmluaXNoIiwiZW5kIiwiYXN5bmMiLCJ0cmlnZ2Vyc2hvdyIsImlkcyIsInRyaWdnZXJydW4iLCJ0cmlnZ2VyaGlkZSIsImFjdGlvbkNsaWNrcyIsImNsaWNrIiwidmFyaWFibGUiLCJub2RlVmFyaWFibGUiLCJvcGVyYXRvciIsInZhbHVldHlwZSIsIkhFWF9SRUdFWCIsIlJHQkFfUkVHRVgiLCJSR0JfUkVHRVgiLCJyZ2JhIiwicmdiIiwiZ2V0RGlzdGFuY2UiLCJhWCIsImFZIiwiYlgiLCJiWSIsInNxcnQiLCJwb3ciLCJ3aXRoaW5DaXJjbGUiLCJjWCIsImNZIiwid2l0aGluQ2Fwc3VsZSIsInBYIiwicFkiLCJsb2NhdGlvbkluZGV4IiwidmVjX2FiIiwidmVjX2FwIiwidmVjX24iLCJtYWdfbiIsInVfdmVjX24iLCJtYWdfYWIiLCJ1X3ZlY19hYiIsImFwX3Byb2pfYWIiLCJhcF9wcm9qX24iLCJ3aXRoaW5Cb3giLCJnZXRQYXJhbGxlbFNlZ21lbnRzIiwidmVjX3YiLCJnZXRDaXJjbGVJbnRlcnNlY3Rpb24iLCJ2ZWNfYWMiLCJhY19wcm9qX2FiIiwicmlnaHRQb2ludCIsImRpc3RDVG9SaWdodFBvaW50IiwiaW50ZXJzZWN0aW9uIiwiZ2V0Q2lyY2xlSW50ZXJzZWN0aW9ucyIsIm1hZ19kIiwiY2xvc2VzdCIsImdldENsb3Nlc3RQb2ludE9uU2VnbWVudCIsImdldExlbmd0aCIsInZlY19jZCIsImludGVyc2VjdGlvbnMiLCJnZXRMaW5lSW50ZXJzZWN0aW9uIiwiZFgiLCJkWSIsInMxX3giLCJzMV95IiwiczJfeCIsInMyX3kiLCJnZXRDYXBzdWxlSW50ZXJzZWN0aW9uIiwiYzBfeCIsImMwX3kiLCJjMV94IiwiYzFfeSIsImJveCIsImdldENhcHN1bGVJbnRlcnNlY3Rpb25zIiwidG1wIiwiaW50ZXJzZWN0aW9uMCIsImludGVyc2VjdGlvbjEiLCJsaWJfZXJhc2UiLCJwYXRocyIsImVyYXNlUGF0aCIsImVyYXNlUmFkaXVzIiwibmV3UGF0aHMiLCJwb2ludEVyYXNlIiwiZVgiLCJlWSIsImxhc3QiLCJuZXdQYXRoIiwicDAiLCJwMSIsInAwX3dpdGhpbkNpcmNsZSIsInAxX3dpdGhpbkNpcmNsZSIsInBvc3NJbnRlcnNlY3RzIiwiY2Fwc3VsZUVyYXNlIiwiaWkiLCJlMCIsImUxIiwicDBfbG9jYXRpb25JbmRleCIsInAxX2xvY2F0aW9uSW5kZXgiLCJjbGVhbmVkIiwicENsZWFuIiwiY2xlYW5QYXRoIiwicnIiLCJyb3VuZCIsIlAiLCJBIiwiQiIsIkFCIiwiUEEiLCJsaWJfaGV4MnJnYmEiLCJsaWJfcmdiYTJoZXgiLCJoZXhzIiwic3BsaWNlIiwibG9jYWxGb3JhZ2UiLCJMb2NhbFN0b3JhZ2VfR2V0RGF0YSIsImRhdGFDb250ZXh0IiwiTG9jYWxTdG9yYWdlX1NldERhdGEiLCJwYXJhbXMiLCJMb2NhbFN0b3JhZ2VfR2V0Q29uZmlnIiwiTG9jYWxTdG9yYWdlX1NldENvbmZpZyIsIkxvY2FsU3RvcmFnZV9HZXRDbGlwYm9hcmQiLCJMb2NhbFN0b3JhZ2VfU2V0Q2xpcGJvYXJkIiwib3JpZyIsImlzQWxwaGEiLCJsb2ciLCJWX0lEIiwiUkVTSVpFX0dST1VQIiwiU0VMRUNUX0dST1VQIiwiU0NBTl9HUk9VUCIsIkNSRUFURV9HUk9VUCIsIklOVEVSQUNUSVZFX0dST1VQIiwiSU5ERVhfR1JPVVAiLCJCQUNLR1JPVU5EX0dST1VQIiwiVEVTVF9HUk9VUCIsIlZfS2V5Ym9hcmQiLCJEaWdpdDEiLCJEaWdpdDIiLCJEaWdpdDMiLCJEaWdpdDQiLCJEaWdpdDUiLCJEaWdpdDYiLCJEaWdpdDciLCJEaWdpdDgiLCJEaWdpdDkiLCJEaWdpdDAiLCJLZXlBIiwiS2V5QiIsIktleUMiLCJLZXlEIiwiS2V5RSIsIktleUYiLCJLZXlHIiwiS2V5SCIsIktleUkiLCJLZXlKIiwiS2V5SyIsIktleUwiLCJLZXlNIiwiS2V5TiIsIktleU8iLCJLZXlQIiwiS2V5USIsIktleVIiLCJLZXlTIiwiS2V5VCIsIktleVUiLCJLZXlWIiwiS2V5VyIsIktleVgiLCJLZXlZIiwiS2V5WiIsIkYxIiwiRjIiLCJGMyIsIkY0IiwiRjUiLCJGNiIsIkY3IiwiRjgiLCJGOSIsIkYxMCIsIkYxMSIsIkYxMiIsIkluc2VydCIsIkRlbGV0ZSIsIkhvbWUiLCJFbmQiLCJQYWdlVXAiLCJQYWdlRG93biIsIkFycm93VXAiLCJBcnJvd0Rvd24iLCJBcnJvd0xlZnQiLCJBcnJvd1JpZ2h0IiwiRXNjYXBlIiwiVGFiIiwiQmFja3NwYWNlIiwiRW50ZXIiLCJTcGFjZSIsIkJyYWNrZXRMZWZ0IiwiQnJhY2tldFJpZ2h0IiwiVl9QZW5UeXBlIiwiRFJBVyIsIkhJR0hUTElHSCIsIklOVEVSQUNUSVZFIiwiVl9Qb2ludGVyVHlwZSIsIlBPSU5URVIiLCJIQU5EIiwiUEVOIiwiU0hBUEUiLCJJTUFHRSIsIlRFWFQiLCJFUkFTRVIiLCJJTkRFWCIsIlZfUG9seWdvblJhdGlvIiwiVl9Qb2x5Z29uVHlwZSIsIlRSSUFOR0xFX0lTT1NDRUxFUyIsIlRSSUFOR0xFX0VRVUlMQVRFUkFMIiwiUkVDVEFOR0xFIiwiUEVOVEFHT04iLCJIRVhBR09OIiwiQk9PS01BUksiLCJDT01NRU5UIiwiQ1JPU1MiLCJBUlJPV19PTkVXQVkiLCJBUlJPV19UV09XQVkiLCJTVEFSX0ZPVVIiLCJTVEFSX0ZJVkUiLCJTVEFSX1NJWCIsIkdST1VQIiwiUEFUSCIsInZfbWVkaWF0eXBlIiwiQVVESU8iLCJWSURFTyIsIkxJTksiLCJaSVAiLCJIVE1MIiwiVFJBQ0siLCJPRkZJQ0UiLCJQREYiLCJQSEVUIiwiSU1BR0VfQU5JTUFUSU9OIiwiU0NPUk0iLCJ2X29zc3R5cGUiLCJPTkVEUklWRSIsIkdPT0dMRURSSVZFIiwiWU9VVFVCRSIsIk9USEVSIiwiX2NvbnRhaW5lciIsIl9zdmciLCJfc2NyZWVuIiwiaWNkdF9TY3JlZW5fTW9LYW0iLCJfZGF0YSIsImljZHRfRGF0YVNvdXJjZSIsIl9kYXRhU2VsZWN0IiwiaWNkdF9EYXRhU2VsZWN0IiwiX3NsaWRlIiwiaWNkdF9EYXRhU2xpZGUiLCJfaGlzdG9yeSIsImljZHRfSGlzdG9yeSIsIl9hdHRyaWJ1dGUiLCJpY2R0X1N2Z05vZGVBdHRyaWJ1dGVfVHJ1bUN1b2lYYUhvaSIsIl9wb2ludGVyIiwiaWNkdF9Qb2ludGVyVHlwZV9DaGlDaGlDaG9DaG8iLCJfdmFyaWFibGUiLCJpY2R0X1ZhcmlhYmxlX1RydW1DdW9pIiwib25jaGFuZ2VQb2ludGVyVHlwZSIsIm9uY2hhbmdlUG9pbnRlclR5cGVUZW1wIiwib25DaGFuZ2VTbGlkZSIsIm1vZHVsZXMiLCJyZXNvdXJjZXMiLCJnZXRSZXNvdXJjZSIsInNldCIsImlkRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJyZWxvYWRWaWV3Iiwib2Zmc2V0IiwibGVmdCIsInRvcCIsImluaXQiLCJjb250YWluZXIiLCJpY2R0X0luaXQiLCJpc2tleWJvYXJkIiwiaWNkdF9raWVuZGVwdHJhaSIsImljZHRfRXJhc2VyQ29tcG9uZW50IiwiZXZlbnRzIiwiaWNkdF9Qb2ludGVyRXZlbnRzIiwiaWNkdF9FcmFzZXIiLCJpY2R0X1N2Z1BhdGgiLCJjZWlsIiwicmFuZG9tIiwiaWNkdF9TeW5jU3ZnTm9kZUF0dHJpYnV0ZSIsInN0YXJ0IiwibW92ZSIsIm9mZnNldHMiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmUiLCJpY2R0X09mZnNldDJTaXplIiwiZ2V0Tm9kZUluQXJlYSIsImdldE5vZGUiLCJoYW5kbGVFcmFzZXIiLCJpY2R0X0ZvcmVpZ25PYmplY3RDb21wb25lbnQiLCJpY2R0X1N2Z0ZvcmVpZ25PYmplY3RDcmVhdGUiLCJpY2R0X0hhbmRDb21wb25lbnQiLCJpY2R0X0hhbmRfUG9pbnRlckV2ZW50IiwiZGlzbG9jYXRpb24iLCJoYW5kbGUiLCJpY2R0X0ltYWdlQ29tcG9uZW50IiwiaWNkdF9TdmdJbWFnZUNyZWF0ZSIsImljZHRfSW5kZXhDb21wb25lbnQiLCJtb3VzZUV2ZW50IiwidG91Y2hFdmVudCIsInRhcmdldElkIiwidGFyZ2V0TmFtZSIsInRhcmdldFBJZCIsImFsdEtleSIsImRhdGFTZWxlY3QiLCJidXR0b24iLCJpY2R0X1NjYW4iLCJoYW5kbGVJbmRleCIsInNoaWZ0S2V5IiwiaW5kZXgiLCJpZHhzIiwiZWxlR3JvdXAiLCJpY2R0X1N5bmNTdmdOb2RlNERlc2lnbiIsInN5bmNOb2RlSW5kZXgiLCJpY2R0X1NsaWRlQ2xlYXJOb2RlSW5kZXgiLCJzeW5jTm9kZVNjYW4iLCJjb21wb25lbnQiLCJfZm5DaGFuZ2VzIiwib25jaGFuZ2UiLCJmbiIsImRlbGV0ZU5vZGUiLCJwb2ludGVyIiwicG9pbnRlcl90eXBlX3RlbXAiLCJiYWNrU2xpZGUiLCJuZXh0U2xpZGUiLCJzaXplWCIsImljZHRfU2NhbGVOdW1iZXIiLCJpY2R0X1Jlc2l6ZSIsImljZHRfU2VsZWN0Iiwic2l6ZVkiLCJldmVudCIsInpvb21UbyIsImN0cmxLZXkiLCJnZXROb2RlQWxsIiwiaWNkdF9SZW5kZXJDb21wb25lbnQiLCJoaXN0b3J5IiwicmVkbyIsInVuZG8iLCJzZW5kVG9CYWNrIiwic2VuZFRvQmFja1N0ZXAiLCJzZW5kVG9CYWNrQXJlYSIsImJyaW5nVG9Gcm9udCIsImJyaW5nVG9Gcm9udFN0ZXAiLCJicmluZ1RvRnJvbnRBcmVhIiwia2V5Rm4iLCJldmVudFR5cGUiLCJldmVudEtleSIsImZucyIsImNoYW5nZSIsImtiRXZlbnQiLCJpY2R0X0tleWJvYXJkIiwiaWNkdF9LZXlib2FyZF9DdWN1YyIsImljZHRfS2V5Ym9hcmRDb21wb25lbnQiLCJrZXlDb2RlIiwid2hpY2giLCJjaGFyQ29kZSIsImljZHRfRHJhdyIsInRoaXNBdHRyaWJ1dGUiLCJkM19wYXRoIiwiZDNMaW5lQ3VydmUiLCJkMyIsImxpbmUiLCJjdXJ2ZSIsImN1cnZlQmFzaXMiLCJpY2R0X0hpZ2hsaWdodCIsInN0cm9rZU9wYWNpdHkiLCJpY2R0X0ludGVyYWN0aXZlIiwiX3NpemUiLCJnZXRFbGVtZW50QnlJZCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjcmVhdGVTaGFkb3dOb2RlIiwiaWNkdF9TdmdDaXJjbGUiLCJwcmVwZW5kIiwiZmlsbE9wYWNpdHkiLCJkX3BhdGgiLCJpbnRlcmFjdGl2ZVBvaW50cyIsImhhbmRsZUF0dHJpYnV0ZTMiLCJpY2R0X1NpemUyQXR0cmlidXRlIiwiaGFuZGxlQXR0cmlidXRlIiwiaWNkdF9QZW5Db21wb25lbnQiLCJwZW5fdHlwZSIsImljZHRfSW50ZXJhY3RpdmVDb21wb25lbnQiLCJzeW5jTm9kZUludGVyYWN0aXZlIiwiaWNkdF9Qb2ludGVyQ29tcG9uZW50Iiwic3luY05vZGVSZXNpemUiLCJhZGRFdmVudExpc3RlbmVyIiwicG9zVHlwZSIsImlzVG91Y2giLCJuZXdTaXplIiwiaGl4aWtlRnJvbSIsImlzTW92ZWQiLCJzdWJYIiwic3ViWSIsImFicyIsImZyb20iLCJ0byIsInN5bmNOb2RlU2VsZWN0Iiwic2l6ZXMiLCJoaXhpa2VGcm9tcyIsInN2Z0lkIiwidGhpc1dpbmRvdyIsImxvY2F0aW9uIiwiaG9zdG5hbWUiLCJlbXB0eSIsInN5bmNCYWNrZ3JvdW5kIiwicmVjdXJzaXZlTm9kZSIsInBJZCIsImlzZGVsZXRlZCIsImljZHRfU3ZnR3JvdXAiLCJpY2R0X1N2Z0VsbGlwc2UiLCJpY2R0X1N2Z0xpbmUiLCJpY2R0X1N2Z1JlY3QiLCJpY2R0X1N2Z1BvbHlnb24iLCJpY2R0X1N2Z0ZvcmVpZ25PYmplY3QiLCJpY2R0X1N2Z0ltYWdlIiwiaWNkdF9TdmdUZXh0IiwiaWNkdF9Tb3J0Q29tcG9uZW50IiwiYXBwZW5kVG8iLCJpY2R0X1NoYXBlQ29tcG9uZW50Iiwic2hhcGVfdHlwZSIsImljZHRfU3ZnQ2lyY2xlQ3JlYXRlIiwiaWNkdF9TdmdFbGxpcHNlQ3JlYXRlIiwiaWNkdF9TdmdMaW5lQ3JlYXRlIiwiaWNkdF9TdmdSZWN0Q3JlYXRlIiwiaWNkdF9TdmdQb2x5Z29uQ3JlYXRlIiwicG9seWdvbl90eXBlIiwiaWNkdF9TdmdQYXRoQ3JlYXRlIiwic3luY05vZGVDcmVhdGUiLCJpY2R0X1N5bmNTdmdOb2RlIiwiaWNkdF9TdmdHcm91cDIiLCJpbWciLCJJbWFnZSIsIm5hdHVyYWxXaWR0aCIsIm5hdHVyYWxIZWlnaHQiLCJwcmVzZXJ2ZUFzcGVjdFJhdGlvIiwiX3JhdGlvcyIsImljZHRfU3ZnVGV4dENyZWF0ZSIsInRleHRMZW5ndGgiLCJ0ZXh0Q29udGVudCIsImljZHRfVGV4dENvbXBvbmVudCIsInNoYXBlVHlwZSIsInRyYW5zZm9ybSIsInRyYW5zZm9ybU9yaWdpbiIsImljZHRfT2Zmc2V0U3dpdGNoIiwidmFsIiwiTnVtYmVyIiwiRVBTSUxPTiIsInNjYWxlIiwic2l6ZVdpZHRoIiwibG9ja1JhdGlvIiwic2l6ZUhlaWdodCIsInNpemVSb3RhdGUiLCJpY2R0X1N2ZyIsInBvaW50ZXJfbHYxIiwicG9pbnRlcl9sdjIiLCJwb2ludGVyX2x2MyIsIm9mZiIsIm9uIiwicG9pbnRlcl90eXBlIiwiZGVsdGEiLCJvcmlnaW5hbEV2ZW50IiwiZGVsdGFZIiwic2NhbGVUbyIsImljZHRfUG9pbnRlclNjYWxlIiwiY2xpZW50WCIsImNsaWVudFkiLCJhY3RpdmVkIiwiaWNkdEluaXQiLCJfbm9kZU5hbWUiLCJfc2VsZWN0ZWRfSWRzIiwiaXNmYWtlIiwiZGVsZXRlZElkIiwiZ3JvdXBOb2RlIiwibmV3SWRzIiwicGlkIiwiYWRkR3JvdXAiLCJ1bmdyb3VwTm9kZSIsInVuR3JvdXAiLCJjcmVhdGVOb2RlSW1hZ2UiLCJwb3MiLCJjcmVhdGVOb2RlSWZyYW1lIiwiY3JlYXRlTm9kZUVtYmVkIiwiZW1iZWQiLCJjcmVhdGVOb2RlTWVkaWEiLCJjb3ZlciIsIm1lZGlhIiwiaW5zZXJ0IiwiaW5zZXJ0U2xpZGUiLCJzbGlkZUlkIiwidGl0bGUiLCJwcm9tcHQiLCJfZGF0YVNvdXJjZSIsIl9zbGlkZUlkeCIsIl9mbkNoYW5nZVNsaWRlcyIsInJlY3Vyc2l2ZU5vZGVzIiwiZnJhbWVTaXplIiwidHJhY2siLCJ0b0xvd2VyQ2FzZSIsIl9kZWZhdWx0U2xpZGUiLCJpY2R0X1N2Z1JlbmV3IiwiY2hhbmdlU2xpZGUiLCJvcGVuU2xpZGUiLCJyZWZyZXNoU2xpZGUiLCJhZGRTbGlkZSIsInRyeVJlcGxhY2VTbGlkZSIsImZsYWciLCJkYXRhU2xpZGUiLCJjb3B5U2xpZGUiLCJuZXdTbGlkZUNvcHkiLCJtb3ZlU2xpZGUiLCJkZWxldGVTbGlkZSIsImRlbGV0ZVNsaWRlMSIsImlzdG9nZ2xlIiwidG90YWwiLCJmaW5kTm9kZSIsImdldE5vZGVPbkFyZWEiLCJuZXdJZCIsIm5vZGVQIiwic2V0Tm9kZVAiLCJzdGVwIiwiaW5kZXhNYXgiLCJzb3J0IiwiZ2V0TWF4U2l6ZU5vZGVzIiwibm9kZU9uQXJlYUlkcyIsImlkeE1heCIsImlkeE1pbiIsIl9pbmRleCIsInVuZG9FeGVjdXRlIiwiaWNkdF9TeW5jU3ZnTm9kZVN0eWxlIiwiaWNkdF9TeW5jU3ZnTm9kZVNvdXJjZSIsInJlZG9FeGVjdXRlIiwicmVuZXciLCJjdXJyZW50IiwiX3giLCJfeSIsIl93aWR0aCIsIl9oZWlnaHQiLCJfc2NhbGUiLCJfZGlzbG9jYXRpb24iLCJfb2Zmc2V0IiwiX3N2Z1NpemUiLCJfc3ZnVmlld0JveCIsIl9mcmFtZVNpemUiLCJfYWN0aXZlZCIsIl9mblpvb21DaGFuZ2VzIiwicmVzZXQiLCJvcHRpb24iLCJwb2ludGVyU2NhbGUiLCJyZXNldExvY2F0aW9uIiwicG9pbnRlclJhdGlvIiwic2l6ZUNoYW5nZSIsInpvb21DaGFuZ2UiLCJzdmdWaWV3Qm94Iiwic3ZnU2l6ZSIsInJlZlNjcmVlbiIsImljZHRfU3luY1N2Z1N0eWxlIiwiX2ZpbGwiLCJfc3Ryb2tlIiwiX3N0cm9rZVdpZHRoIiwiX3N0cm9rZUxpbmVjYXAiLCJfc3Ryb2tlTGluZWpvaW4iLCJfZm9udEZhbWlseSIsIl9mb250U2l6ZSIsIl90ZXh0TGVuZ3RoIiwiX2ZuQ2hhbmdlRmlsbHMiLCJfZm5DaGFuZ2VTdHJva2VzIiwiX2ZuQ2hhbmdlU3Ryb2tlV2lkdGhzIiwibG9hZENvbmZpZyIsImNoYW5nZUZpbGwiLCJjaGFuZ2VTdHJva2UiLCJjaGFuZ2VTdHJva2VXaWR0aCIsInNhdmVDb25maWciLCJjbG9uZU9iamVjdF9EZWVwQ2xvbmUiLCJkYXRhVmFyaWFibGVTeXN0ZW0iLCJkYXRhVmFyaWFibGVUZW1wIiwiZGF0YV92YXJpYWJsZV90ZW1wIiwiZGF0YV9jb25kaXRpb25fdGVtcCIsIl9kYXRhX3ZhcmlhYmxlcyIsIl9kYXRhX2NvbmRpdGlvbnMiLCJHZXRBY3Rpb25FeGVjdXRpbmdzIiwiR2V0QWN0aW9uRXhlY3V0ZWRzIiwiRnVuY0dldEV4ZWN1dGVkcyIsIk9uR2V0QWN0aW9uRXhlY3V0ZWQiLCJTZXRBY3Rpb25FeGVjdXRpbmdzIiwiRnVuY1NldEV4ZWN1dGluZ3MiLCJPblNldEFjdGlvbkV4ZWN1dGluZyIsIlNldEFjdGlvbkV4ZWN1dGVkcyIsIkZ1bmNTZXRFeGVjdXRlZHMiLCJPblNldEFjdGlvbkV4ZWN1dGVkIiwiZ2V0Q29uZGl0aW9uIiwiY29uZCIsImlmIiwiY2hlY2tWYWx1ZUNvbmRpdGlvbnMiLCJzZXRWYWx1ZU9wZXJhdG9ycyIsImVsc2UiLCJ2YXJpYWJsZXMiLCJjb25kaXRpb25zIiwianNvblBhcnNlIiwidmFyaWFibGVTeXN0ZW0iLCJ0aGlzVmFyaWFibGVzIiwidGhpc1ZhcmlhYmxlIiwicmVhZG9ubHkiLCJzeXN0ZW0iLCJnZXRWYXJpYWJsZVRlbXAiLCJnZXRDb25kaXRpb25UZW1wIiwiZ2V0S2V5cyIsImxvY2FsZUNvbXBhcmUiLCJnZXRWYXJpYWJsZUFsbCIsImFycmF5SnNvbiIsInNvcnRmaWVsZCIsImpzb25PYmplY3QiLCJzZXRWYXJpYWJsZUFsbCIsImdldFZhcmlhYmxlIiwic2V0VmFyaWFibGUiLCJJbmZpbml0eSIsImdldFZhbHVlIiwidGhpc1ZhbHVlIiwiT25HZXRBY3Rpb25FeGVjdXRpbmciLCJzZXRWYWx1ZSIsImdldENvbmRpdGlvbkFsbCIsInNldENvbmRpdGlvbkFsbCIsInN3aXRjaENvbmRpdGlvbiIsImNvbmRpdGlvbiIsInZhbHVlQSIsInZhbHVlQiIsInJlZHVjZSIsInN3aXRjaE9wZXJhdG9yIiwic3dpdGNoRm9ybXVsYSIsImZvcm11bGEiLCJ2YWx1ZUFyciIsInZhbHVlQVZHIiwic3dpdGNoVmFsdWVUeXBlX0NvbmRpdGlvbiIsIml0ZW1WYXJpYWJsZSIsInN3aXRjaFZhbHVlVHlwZV9PcGVyYXRvciIsInZhbHVlVmFyaWFibGVGb3JtdWxhIiwidmFsdWVmb3JtdWxhIiwiY2hlY2tWYWx1ZUNvbmRpdGlvbiIsImdldFZhbHVlT3BlcmF0b3IiLCJzZXRWYWx1ZU9wZXJhdG9yIiwiaXRlbVZhcmlhYmxlcyIsImFjY3VtdWxhdG9yIiwiY3VycmVudFZhbHVlIiwiaWNkdF9SdW4iLCJydW5TbGlkZSIsImljZHRfUnVuX0ludGVyYWN0aXZlX1RyaWdnZXJTaG93Iiwibm9kZVN0YXR1cyIsInNsaWRlU3RhdHVzIiwiaWNkdF9SdW5fSW50ZXJhY3RpdmVfTm9kZUNsaWNrIiwiRnVuY0dldEV4ZWN1dGluZ3MiLCJpY2R0X1BvaW50ZXJFdmVudCIsInBvc2l0aW9uIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJ0b3VjaGVzIiwiX2ZuIiwicG9pbnRlckhhbmRsZSIsImljZHRfUG9pbnRlckhhbmRsZSIsImhhbmRsZVRvdWNoTW92ZSIsImhhbmRsZVRvdWNoRW5kIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImhhbmRsZU1vdXNlTW92ZSIsImhhbmRsZU1vdXNlVXAiLCJfcG9pbnRzIiwiX29wdGlvbnMiLCJvZmZzZXRMYXN0IiwiX2ZuQ2hhbmdlUG9pbnRlclR5cGVzIiwiX2ZuQ2hhbmdlUG9pbnRlclR5cGVUZW1wcyIsIl9mbkNoYW5nZVBlblR5cGVzIiwiX2ZuQ2hhbmdlU2hhcGVUeXBlcyIsIl9mbkNoYW5nZVBvbHlnb25UeXBlcyIsIl9wb2ludGVyX3R5cGUiLCJfcG9pbnRlcl90eXBlX3RlbXAiLCJfcGVuX3R5cGUiLCJfc2hhcGVfdHlwZSIsIl9wb2x5Z29uX3R5cGUiLCJzZXRQb2ludGVyX25vY2hhbmdlIiwiY2hhbmdlUG9pbnRlclR5cGUiLCJjaGFuZ2VQb2ludGVyVHlwZVRlbXAiLCJjaGFuZ2VQZW5UeXBlIiwiY2hhbmdlU2hhcGVUeXBlIiwiY2hhbmdlUG9seWdvblR5cGUiLCJfbm9kZVN0YXR1cyIsIl9zbGlkZVN0YXR1cyIsInJlZnJlc2hOb2RlU3RhdHVzIiwiZmxvb3IiLCJyZWZyZXNoU2xpZGVTdGF0dXMiLCJzbGlkZVRvdGFsIiwic3luY1N2ZyIsImljZHRfUnVuX1NsaWRlIiwiaWNkdF9SdW5fQ2hheU5nYXlEaSIsImNvbnRhaW5lcklkIiwicmVOZXciLCJzdmdFbGVtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwic2V0QXR0cmlidXRlTlMiLCJuZXdXaWR0aCIsIm5ld0hlaWdodCIsIndpZHRoVmlldyIsImhlaWdodFZpZXciLCJyYXRpb1NsaWRlIiwiaWNkdF9SdW5fQW5pbWF0ZV9BbmltYXRpb24iLCJydW5BbmltYXRpb24iLCJzdWNjZXNzIiwiYW5pbWF0aW9uQ2xhc3MiLCJydW4iLCJsb29wTnVtIiwiYW5pbWF0ZWRDbGFzcyIsInJlbW92ZUFuaW1hdGlvbiIsIm9uZSIsImFkZENsYXNzIiwiYW5pbWF0ZWQxIiwiYW5pbWF0ZWQyIiwicmVtb3ZlQ2xhc3MiLCJjbGFzc0JrIiwicmVtb3ZlQXR0ciIsImljZHRfUnVuX0ludGVyYWN0aXZlX0FjdGlvbkFuaW1hdGlvbiIsImFuaW1hdGVkIiwiaWNkdF9SdW5fSW50ZXJhY3RpdmVfQWN0aW9uUG9pbnRzIiwiYW5pbWF0aW9uUG9pbnRzIiwiYmVmb3JlIiwiYWZ0ZXIiLCJzdWJ4Iiwic3VieSIsImZhY3RvciIsInNtb290aFBvaW50cyIsInNwZWVkIiwicmVjdXNpdmUiLCJpY2R0X1J1bl9JbnRlcmFjdGl2ZV9BdWRpbyIsImRhdGFBdWRpbyIsIndhaXRTdGF0dXMiLCJzdG9wQXVkaW8iLCJ0aGlzQXVkaW8iLCJwYXVzZSIsIkF1ZGlvIiwiYXV0b3BsYXkiLCJsb29wIiwicHJlbG9hZCIsImNvbnRyb2xzIiwic2V0QXR0cmlidXRlTm9kZSIsImNyZWF0ZUF0dHJpYnV0ZSIsInBsYXkiLCJjYXRjaCIsImNvdW50ZXIiLCJjbGlja1N1Y2Nlc3MiLCJpY2R0X1J1bl9JbnRlcmFjdGl2ZV9UcmlnZ2VyUnVuIiwiaWNkdF9SdW5fSW50ZXJhY3RpdmVfVHJpZ2dlckhpZGUiLCJub2RlU3VjY2VzcyIsImlmcmFtZVNyYyIsImdldE1lZGlhVmlld2VyVXJsIiwib3NzIiwiYm9keSIsImljZHRfUnVuX0ludGVyYWN0aXZlX05vZGVTaG93Iiwic2hvd1N1Y2Nlc3MiLCJzdWNjZXNzQWN0aW9uIiwidm9sdW1lIiwiaWNkdF9SdW5fTm9kZSIsIm9iakpzb24iLCJpY2R0X1J1bl9WYXJpYWJsZV9Ob2RlSW5wdXQiLCJpY2R0X1J1bl9WYXJpYWJsZV9Ob2RlQ2xpY2siLCJpY2R0X1J1bl9UZXN0IiwicmVjdXJzaXZlTm9kZUlkeCIsInNoaWZ0Iiwibm9kZUlkeHMiLCJtYXhUaW1lQ291bmRvd24iLCJpc1JlY3Vyc2l2ZSIsInRpbWVvdXRSZWN1cnNpdmUiLCJ1aWQiLCJub2RlU3RhdGljIiwiY2xlYXJUaW1lb3V0IiwiaWNkdF9SdW5fVGVzdF9Ob3RpZnlfRWZmZWN0IiwicmVuZGVyRWZmZWN0IiwiaWNkdF9SdW5fVGVzdF9Ob3RpZnlfSWNvbiIsInJlbmRlckljb24iLCJpbWdTaXplIiwiaWNkdF9SdW5fVGVzdF9Ob3RpZnlfU291bmQiLCJ0aGlzTm9kZSIsImljZHRfUnVuX1Rlc3RfVHJ1ZUZhbHNlIiwic2hvd3NlbGVjdGlvbiIsInN5bmNUZXN0IiwiaWNkdF9SdW5fVGVzdF9TaW5nbGVDaG9pY2UiLCJpY2R0X1J1bl9UZXN0X011bHRpQ2hvaWNlIiwiZGl2VyIsInZpc2liaWxpdHkiLCJmbG9hdCIsImJsdXIiLCJpY2R0X1J1bl9UZXN0X0ZpbGwiLCJrZW5kb0RyYWdnYWJsZSIsImhpbnQiLCJwcm9wIiwiZHJhZ3N0YXJ0IiwiaWNkdF9SdW5fVGVzdF9NYXRjaGluZ19DbGVhciIsImRyYWciLCJkcmFnZW5kIiwiZHJhZ2NhbmNlbCIsImtlbmRvRHJvcFRhcmdldCIsImRyYWdlbnRlciIsImRyb3BUYXJnZXQiLCJkcmFnbGVhdmUiLCJkcm9wIiwiZHJhZ1RhcmdldCIsImRyYWdnYWJsZSIsImN1cnJlbnRUYXJnZXQiLCJpcyIsIiQiLCJmaXJzdCIsImljZHRfUnVuX1Rlc3RfTWF0Y2hpbmciLCJpY2R0X1J1bl9UZXN0X1N1Ym1pdCIsImFuc3dlciIsImljZHRfUnVuX1Rlc3RfTm90aWZ5QW5zd2VyUmVzdWx0IiwidG9Mb2NhbGVMb3dlckNhc2UiLCJSZW5kZXJTbGlkZSIsImRpc3BsYXkiLCJpY2R0X1N5bmNTdmdCYWNrZ3JvdW5kIiwibm9kZVR5cGUiLCJmaWxsUnVsZSIsInN0cm9rZU1pdGVybGltaXQiLCJmb250V2VpZ2h0IiwicGFkZGluZyIsImJvcmRlclJhZGl1cyIsImtleXdvcmQiLCJjb250ZW50VmFyaWFibGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwbGFjZWhvbGRlciIsImlucHV0RmlsbCIsIlJlZ0V4cCIsImljZHRfU3luY1N2Z05vZGVTdHlsZUFjdGl2ZSIsImlzYWN0aXZlIiwic3ViIiwicmVjdENlbnRlckF0dHJpYnV0ZSIsInN1YjIiLCJzdWI1IiwibGluZUF0dHJpYnV0ZSIsInJlY3RBdHRyaWJ1dGUiLCJyZWN0Tm9kZUF0dHJpYnV0ZSIsImVsZVJlY3RDZW50ZXIiLCJjbGFzcyIsImNsYXNzTGlzdCIsImFkZCIsImdldFlvdXR1YmVFbWJlZFVybCIsInlvdXR1YmVJZCIsImdldFlvdXR1YmVJZCIsInBhcmFtIiwid21vZGUiLCJib3JkZXIiLCJoZCIsImF1dG9oaWRlIiwiZW5hYmxlanNhcGkiLCJtb2Rlc3RicmFuZGluZyIsImhsIiwicmVsIiwic2hvd2luZm8iLCJpdl9sb2FkX3BvbGljeSIsImFzY2VuZGluZyIsImRlc2NlbmRpbmciLCJiaXNlY3RvciIsImNvbXBhcmUxIiwiY29tcGFyZTIiLCJsbyIsImhpIiwibWlkIiwiemVybyIsImNlbnRlciIsInJpZ2h0IiwibnVtYmVyIiwiYXNjZW5kaW5nQmlzZWN0IiwiYmlzZWN0UmlnaHQiLCJiaXNlY3RMZWZ0IiwiYmlzZWN0Q2VudGVyIiwiUmFuZ2VFcnJvciIsImJsdXJmIiwidGVtcCIsImJsdXIyIiwiQmx1cjIiLCJibHVySW1hZ2UiLCJyYWRpdXMiLCJUIiwiUyIsInN0b3AiLCJibHVyeCIsImJsdXJ5IiwiYmx1cmgiLCJibHVydiIsInJhZGl1czAiLCJzdW0iLCJibHVyaSIsInMwIiwiczEiLCJ2YWx1ZW9mIiwiYXJyYXlpZnkiLCJjcm9zcyIsInJlZHVjZXIiLCJsZW5ndGhzIiwicHJvZHVjdCIsInNvbWUiLCJjdW1zdW0iLCJ2YXJpYW5jZSIsIm1lYW4iLCJkZXZpYXRpb24iLCJleHRlbnQiLCJBZGRlciIsIl9wYXJ0aWFscyIsIl9uIiwidmFsdWVPZiIsImZzdW0iLCJhZGRlciIsImZjdW1zdW0iLCJJbnRlcm5NYXAiLCJNYXAiLCJlbnRyaWVzIiwia2V5b2YiLCJzdXBlciIsImRlZmluZVByb3BlcnRpZXMiLCJfaW50ZXJuIiwiaW50ZXJuX2dldCIsImhhcyIsImludGVybl9zZXQiLCJkZWxldGUiLCJpbnRlcm5fZGVsZXRlIiwiSW50ZXJuU2V0IiwiU2V0IiwiaWRlbnRpdHkiLCJncm91cCIsIm5lc3QiLCJncm91cHMiLCJmbGF0dGVuIiwiZmxhdE1hcCIsImZsYXRHcm91cCIsImZsYXRSb2xsdXAiLCJyb2xsdXBzIiwicm9sbHVwIiwidW5pcXVlIiwiaW5kZXhlcyIsInJlZ3JvdXAiLCJwZXJtdXRlIiwiRiIsImFzY2VuZGluZ0RlZmluZWQiLCJjb21wYXJlRGVmaW5lZCIsImNvbXBhcmUiLCJncm91cFNvcnQiLCJhayIsImF2IiwiYmsiLCJidiIsImNvbnN0YW50IiwiZTEwIiwiZTUiLCJlMiIsInRpY2tTcGVjIiwicG93ZXIiLCJsb2cxMCIsImkxIiwiaTIiLCJpbmMiLCJ0aWNrcyIsInJldmVyc2UiLCJ0aWNrSW5jcmVtZW50IiwidGlja1N0ZXAiLCJuaWNlIiwicHJlc3RlcCIsImlzRmluaXRlIiwidGhyZXNob2xkU3R1cmdlcyIsIkxOMiIsImRvbWFpbiIsInRocmVzaG9sZCIsImhpc3RvZ3JhbSIsInh6IiwieDAiLCJ0eiIsInRuIiwiYmlucyIsImJpc2VjdCIsIl8iLCJ0aHJlc2hvbGRzIiwibWF4SW5kZXgiLCJtaW5JbmRleCIsInF1aWNrc2VsZWN0IiwieiIsImV4cCIsInNkIiwic3dhcCIsImdyZWF0ZXN0IiwiZGVmaW5lZCIsIm1heFZhbHVlIiwicXVhbnRpbGUiLCJudW1iZXJzIiwiaTAiLCJ2YWx1ZTAiLCJzdWJhcnJheSIsInF1YW50aWxlU29ydGVkIiwicXVhbnRpbGVJbmRleCIsInRocmVzaG9sZEZyZWVkbWFuRGlhY29uaXMiLCJ0aHJlc2hvbGRTY290dCIsImNicnQiLCJtZWRpYW4iLCJtZWRpYW5JbmRleCIsIm1lcmdlIiwiYXJyYXlzIiwiY291bnRzIiwibW9kZVZhbHVlIiwibW9kZUNvdW50IiwicGFpcnMiLCJwYWlyb2YiLCJwYWlyIiwicHJldmlvdXMiLCJyYW5nZSIsInJhbmsiLCJWIiwiUiIsImNvbXBhcmVJbmRleCIsImxlYXN0IiwibWluVmFsdWUiLCJsZWFzdEluZGV4IiwiZ3JlYXRlc3RJbmRleCIsInNjYW4iLCJzaHVmZmxlciIsInRyYW5zcG9zZSIsInJvdyIsInppcCIsImV2ZXJ5IiwibWFwcGVyIiwiZG9uZSIsIm5leHQiLCJkaWZmZXJlbmNlIiwib3RoZXJzIiwib3RoZXIiLCJkaXNqb2ludCIsInN1cGVyc2V0IiwiaW8iLCJpbnRlcm4iLCJpdmFsdWUiLCJzdWJzZXQiLCJ1bmlvbiIsImJvdHRvbSIsImVwc2lsb24iLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsImJhbmR3aWR0aCIsImVudGVyaW5nIiwiX19heGlzIiwiYXhpcyIsIm9yaWVudCIsInRpY2tBcmd1bWVudHMiLCJ0aWNrVmFsdWVzIiwidGlja0Zvcm1hdCIsInRpY2tTaXplSW5uZXIiLCJ0aWNrU2l6ZU91dGVyIiwidGlja1BhZGRpbmciLCJkZXZpY2VQaXhlbFJhdGlvIiwiY29udGV4dCIsImZvcm1hdCIsInNwYWNpbmciLCJyYW5nZTAiLCJyYW5nZTEiLCJjb3B5Iiwic2VsZWN0aW9uIiwic2VsZWN0QWxsIiwidGljayIsIm9yZGVyIiwidGlja0V4aXQiLCJleGl0IiwidGlja0VudGVyIiwiZW50ZXIiLCJzZWxlY3QiLCJ0cmFuc2l0aW9uIiwidGlja1NpemUiLCJheGlzVG9wIiwiYXhpc1JpZ2h0IiwiYXhpc0JvdHRvbSIsImF4aXNMZWZ0Iiwibm9vcCIsImRpc3BhdGNoIiwiRGlzcGF0Y2giLCJ0eXBlbmFtZSIsInR5cGVzIiwidGhhdCIsIm5vbmUiLCJzZWxlY3RvciIsIm1hdGNoZXMiLCJjaGlsZE1hdGNoZXIiLCJjaGlsZEZpcnN0IiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJjaGlsZHJlbiIsInVwZGF0ZSIsIkVudGVyTm9kZSIsInBhcmVudCIsImRhdHVtIiwib3duZXJEb2N1bWVudCIsIm5hbWVzcGFjZVVSSSIsIl9uZXh0IiwiX3BhcmVudCIsIl9fZGF0YV9fIiwiYmluZEluZGV4IiwiZ3JvdXBMZW5ndGgiLCJkYXRhTGVuZ3RoIiwiYmluZEtleSIsImtleVZhbHVlIiwibm9kZUJ5S2V5VmFsdWUiLCJrZXlWYWx1ZXMiLCJhcnJheWxpa2UiLCJjaGlsZCIsImluc2VydEJlZm9yZSIsInhodG1sIiwieGxpbmsiLCJ4bWwiLCJ4bWxucyIsInByZWZpeCIsIm5hbWVzcGFjZXMiLCJzcGFjZSIsImxvY2FsIiwiYXR0clJlbW92ZSIsImF0dHJSZW1vdmVOUyIsImZ1bGxuYW1lIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJhdHRyQ29uc3RhbnQiLCJhdHRyQ29uc3RhbnROUyIsImF0dHJGdW5jdGlvbiIsImF0dHJGdW5jdGlvbk5TIiwiZGVmYXVsdFZpZXciLCJzdHlsZVJlbW92ZSIsInJlbW92ZVByb3BlcnR5Iiwic3R5bGVDb25zdGFudCIsInByaW9yaXR5Iiwic2V0UHJvcGVydHkiLCJzdHlsZUZ1bmN0aW9uIiwic3R5bGVWYWx1ZSIsImdldFByb3BlcnR5VmFsdWUiLCJnZXRDb21wdXRlZFN0eWxlIiwicHJvcGVydHlSZW1vdmUiLCJwcm9wZXJ0eUNvbnN0YW50IiwicHJvcGVydHlGdW5jdGlvbiIsImNsYXNzQXJyYXkiLCJzdHJpbmciLCJDbGFzc0xpc3QiLCJfbm9kZSIsIl9uYW1lcyIsImNsYXNzZWRBZGQiLCJuYW1lcyIsImxpc3QiLCJjbGFzc2VkUmVtb3ZlIiwiY2xhc3NlZFRydWUiLCJjbGFzc2VkRmFsc2UiLCJjbGFzc2VkRnVuY3Rpb24iLCJ0ZXh0UmVtb3ZlIiwidGV4dENvbnN0YW50IiwidGV4dEZ1bmN0aW9uIiwiaHRtbFJlbW92ZSIsImlubmVySFRNTCIsImh0bWxDb25zdGFudCIsImh0bWxGdW5jdGlvbiIsInJhaXNlIiwibmV4dFNpYmxpbmciLCJsb3dlciIsInByZXZpb3VzU2libGluZyIsImZpcnN0Q2hpbGQiLCJjcmVhdG9ySW5oZXJpdCIsInVyaSIsImNyZWF0b3JGaXhlZCIsIm5hbWVzcGFjZSIsImNvbnN0YW50TnVsbCIsInNlbGVjdGlvbl9jbG9uZVNoYWxsb3ciLCJjbG9uZSIsImNsb25lTm9kZSIsInNlbGVjdGlvbl9jbG9uZURlZXAiLCJvblJlbW92ZSIsIl9fb24iLCJsaXN0ZW5lciIsIm9uQWRkIiwiY29udGV4dExpc3RlbmVyIiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRldGFpbCIsImRpc3BhdGNoQ29uc3RhbnQiLCJkaXNwYXRjaEZ1bmN0aW9uIiwicm9vdCIsIlNlbGVjdGlvbiIsIl9ncm91cHMiLCJfcGFyZW50cyIsInN1Ymdyb3VwcyIsInN1Ym5vZGUiLCJzdWJncm91cCIsImFycmF5QWxsIiwic2VsZWN0b3JBbGwiLCJzZWxlY3RDaGlsZCIsImNoaWxkRmluZCIsInNlbGVjdENoaWxkcmVuIiwiY2hpbGRyZW5GaWx0ZXIiLCJiaW5kIiwiZW50ZXJHcm91cCIsInVwZGF0ZUdyb3VwIiwiX2VudGVyIiwiX2V4aXQiLCJzcGFyc2UiLCJvbmVudGVyIiwib251cGRhdGUiLCJvbmV4aXQiLCJncm91cHMwIiwiZ3JvdXBzMSIsIm0wIiwibTEiLCJtZXJnZXMiLCJncm91cDAiLCJncm91cDEiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImNvbXBhcmVOb2RlIiwic29ydGdyb3VwcyIsInNvcnRncm91cCIsImdldEF0dHJpYnV0ZU5TIiwicHJvcGVydHkiLCJjbGFzc2VkIiwiY3JlYXRlIiwiY3JlYXRvciIsImRlZXAiLCJ0eXBlbmFtZXMiLCJub25wYXNzaXZlIiwicGFzc2l2ZSIsIm5vbnBhc3NpdmVjYXB0dXJlIiwiY2FwdHVyZSIsIm5vcHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJ2aWV3Iiwibm9ldmVudCIsIl9fbm9zZWxlY3QiLCJNb3pVc2VyU2VsZWN0IiwieWVzZHJhZyIsIm5vY2xpY2siLCJmYWN0b3J5IiwiZGVmaW5pdGlvbiIsIkNvbG9yIiwiZGFya2VyIiwiYnJpZ2h0ZXIiLCJyZUkiLCJyZU4iLCJyZVAiLCJyZUhleCIsInJlUmdiSW50ZWdlciIsInJlUmdiUGVyY2VudCIsInJlUmdiYUludGVnZXIiLCJyZVJnYmFQZXJjZW50IiwicmVIc2xQZXJjZW50IiwicmVIc2xhUGVyY2VudCIsIm5hbWVkIiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWUiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJjb2xvcl9mb3JtYXRIZXgiLCJmb3JtYXRIZXgiLCJjb2xvcl9mb3JtYXRSZ2IiLCJmb3JtYXRSZ2IiLCJleGVjIiwicmdibiIsIlJnYiIsImhzbGEiLCJyZ2JDb252ZXJ0IiwicmdiX2Zvcm1hdEhleCIsInJnYl9mb3JtYXRSZ2IiLCJjbGFtcGEiLCJjbGFtcGkiLCJIc2wiLCJoc2xDb252ZXJ0IiwiaHNsIiwiY2xhbXBoIiwiY2xhbXB0IiwiaHNsMnJnYiIsIm0yIiwiYmFzaXMiLCJ0MSIsInYwIiwidjEiLCJ2MiIsInYzIiwidDIiLCJ0MyIsImNoYW5uZWxzIiwiZGlzcGxheWFibGUiLCJmb3JtYXRIZXg4IiwiZm9ybWF0SHNsIiwiY2xhbXAiLCJsaW5lYXIiLCJodWUiLCJub2dhbW1hIiwicmdiR2FtbWEiLCJleHBvbmVudGlhbCIsImdhbW1hIiwicmdiU3BsaW5lIiwic3BsaW5lIiwiY29sb3JzIiwicmdiQmFzaXMiLCJyZ2JCYXNpc0Nsb3NlZCIsImJhc2lzQ2xvc2VkIiwiaXNOdW1iZXJBcnJheSIsImlzVmlldyIsIkRhdGFWaWV3IiwibnVtYmVyQXJyYXkiLCJnZW5lcmljQXJyYXkiLCJuYiIsIm5hIiwiRGF0ZSIsInNldFRpbWUiLCJyZUEiLCJyZUIiLCJhbSIsImJtIiwiYnMiLCJiaSIsImxhc3RJbmRleCIsInEiLCJkYXRlIiwib2JqZWN0Iiwic291cmNlRXZlbnQiLCJvd25lclNWR0VsZW1lbnQiLCJjcmVhdGVTVkdQb2ludCIsIm1hdHJpeFRyYW5zZm9ybSIsImdldFNjcmVlbkNUTSIsImludmVyc2UiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyZWN0IiwiY2xpZW50TGVmdCIsImNsaWVudFRvcCIsInBhZ2VYIiwicGFnZVkiLCJ0YXNrSGVhZCIsInRhc2tUYWlsIiwidGltZW91dCIsImludGVydmFsIiwicG9rZURlbGF5IiwiY2xvY2tMYXN0IiwiY2xvY2tOb3ciLCJjbG9ja1NrZXciLCJjbG9jayIsInBlcmZvcm1hbmNlIiwibm93Iiwic2V0RnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjbGVhck5vdyIsIlRpbWVyIiwiX2NhbGwiLCJfdGltZSIsInRpbWVyIiwiZGVsYXkiLCJyZXN0YXJ0IiwidGltZXJGbHVzaCIsIndha2UiLCJ0MCIsInNsZWVwIiwibmFwIiwicG9rZSIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImVsYXBzZWQiLCJlbXB0eU9uIiwiZW1wdHlUd2VlbiIsIkNSRUFURUQiLCJTQ0hFRFVMRUQiLCJTVEFSVElORyIsIlNUQVJURUQiLCJFTkRJTkciLCJFTkRFRCIsInRpbWluZyIsInNjaGVkdWxlcyIsIl9fdHJhbnNpdGlvbiIsInR3ZWVuIiwiZHVyYXRpb24iLCJlYXNlIiwic2NoZWR1bGUiLCJzdmdOb2RlIiwiZGVncmVlcyIsIlBJIiwic2tld1giLCJzY2FsZVgiLCJzY2FsZVkiLCJhdGFuMiIsImF0YW4iLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybSIsInB4Q29tbWEiLCJweFBhcmVuIiwiZGVnUGFyZW4iLCJ4YSIsInlhIiwieGIiLCJ5YiIsInRyYW5zbGF0ZSIsImludGVycG9sYXRlVHJhbnNmb3JtQ3NzIiwiRE9NTWF0cml4IiwiV2ViS2l0Q1NTTWF0cml4IiwiaXNJZGVudGl0eSIsImRlY29tcG9zZSIsImludGVycG9sYXRlVHJhbnNmb3JtU3ZnIiwiYmFzZVZhbCIsImNvbnNvbGlkYXRlIiwidHdlZW5SZW1vdmUiLCJ0d2VlbjAiLCJ0d2VlbjEiLCJ0d2VlbkZ1bmN0aW9uIiwidHdlZW5WYWx1ZSIsIl9pZCIsImludGVycG9sYXRlIiwidmFsdWUxIiwic3RyaW5nMDAiLCJpbnRlcnBvbGF0ZTAiLCJzdHJpbmcxIiwic3RyaW5nMCIsInN0cmluZzEwIiwiYXR0clR3ZWVuTlMiLCJhdHRySW50ZXJwb2xhdGVOUyIsIl92YWx1ZSIsImF0dHJUd2VlbiIsImF0dHJJbnRlcnBvbGF0ZSIsImRlbGF5RnVuY3Rpb24iLCJkZWxheUNvbnN0YW50IiwiZHVyYXRpb25GdW5jdGlvbiIsImR1cmF0aW9uQ29uc3RhbnQiLCJUcmFuc2l0aW9uIiwiX25hbWUiLCJzZWxlY3Rpb25fcHJvdG90eXBlIiwiY3ViaWNJbiIsImN1YmljT3V0IiwiY3ViaWNJbk91dCIsImluaGVyaXQiLCJpZDAiLCJpZDEiLCJvbjAiLCJvbjEiLCJzaXQiLCJvbkZ1bmN0aW9uIiwic3R5bGVUd2VlbiIsInN0eWxlTnVsbCIsImxpc3RlbmVyMCIsInN0eWxlTWF5YmVSZW1vdmUiLCJzdHlsZUludGVycG9sYXRlIiwidGV4dFR3ZWVuIiwidGV4dEludGVycG9sYXRlIiwicmVtb3ZlRnVuY3Rpb24iLCJlYXNlQ29uc3RhbnQiLCJlYXNlVmFyeWluZyIsImNhbmNlbCIsImludGVycnVwdCIsImRlZmF1bHRUaW1pbmciLCJCcnVzaEV2ZW50IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIk1PREVfRFJBRyIsIk1PREVfU1BBQ0UiLCJNT0RFX0hBTkRMRSIsIk1PREVfQ0VOVEVSIiwibnVtYmVyMSIsIm51bWJlcjIiLCJYIiwiaGFuZGxlcyIsIm91dHB1dCIsIlkiLCJYWSIsImN1cnNvcnMiLCJvdmVybGF5IiwibnciLCJuZSIsInNlIiwic3ciLCJmbGlwWCIsImZsaXBZIiwic2lnbnNYIiwic2lnbnNZIiwiZGVmYXVsdEZpbHRlciIsImRlZmF1bHRFeHRlbnQiLCJoYXNBdHRyaWJ1dGUiLCJkZWZhdWx0VG91Y2hhYmxlIiwibWF4VG91Y2hQb2ludHMiLCJfX2JydXNoIiwiYnJ1c2hTZWxlY3Rpb24iLCJkaW0iLCJicnVzaFgiLCJicnVzaFkiLCJ0b3VjaGVuZGluZyIsInRvdWNoYWJsZSIsImxpc3RlbmVycyIsImhhbmRsZVNpemUiLCJicnVzaCIsImluaXRpYWxpemUiLCJyZWRyYXciLCJzdGFydGVkIiwidG91Y2htb3ZlZCIsInRvdWNoZW5kZWQiLCJlbWl0dGVyIiwiY2xlYW4iLCJlbWl0IiwiRW1pdHRlciIsIncwIiwidzEiLCJuMCIsIm4xIiwibW92aW5nIiwibG9ja1giLCJsb2NrWSIsIm1ldGFLZXkiLCJzaWduWCIsInNpZ25ZIiwiVyIsIk4iLCJFIiwiZHgiLCJkeSIsInNoaWZ0aW5nIiwiaWRlbnRpZmllciIsInBvaW50MCIsImJlZm9yZXN0YXJ0IiwicHRzIiwibW92ZWQiLCJlbmRlZCIsImNoYW5nZWRUb3VjaGVzIiwiY3VyIiwic2VsZWN0aW9uMCIsInNlbGVjdGlvbjEiLCJzdGFydGluZyIsImtleU1vZGlmaWVycyIsImNvcyIsInNpbiIsInBpIiwiaGFsZlBpIiwidGF1IiwiY2hvcmRUcmFuc3Bvc2UiLCJjaG9yZERpcmVjdGVkIiwiZGlyZWN0ZWQiLCJwYWRBbmdsZSIsInNvcnRHcm91cHMiLCJzb3J0U3ViZ3JvdXBzIiwic29ydENob3JkcyIsImNob3JkIiwiZ3JvdXBTdW1zIiwiZ3JvdXBJbmRleCIsImNob3JkcyIsInN1Ymdyb3VwSW5kZXgiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJ0YXVFcHNpbG9uIiwic3RyaW5ncyIsIlBhdGgiLCJkaWdpdHMiLCJfeDAiLCJfeTAiLCJfeDEiLCJfeTEiLCJfYXBwZW5kIiwiYXBwZW5kUm91bmQiLCJtb3ZlVG8iLCJjbG9zZVBhdGgiLCJsaW5lVG8iLCJxdWFkcmF0aWNDdXJ2ZVRvIiwiYmV6aWVyQ3VydmVUbyIsImFyY1RvIiwieTAiLCJ4MjEiLCJ5MjEiLCJ4MDEiLCJ5MDEiLCJsMDFfMiIsIngyMCIsInkyMCIsImwyMV8yIiwibDIwXzIiLCJsMjEiLCJsMDEiLCJhY29zIiwidDAxIiwidDIxIiwiYXJjIiwiYTAiLCJhMSIsImNjdyIsImN3IiwiZGEiLCJwYXRoUm91bmQiLCJkZWZhdWx0U291cmNlIiwiZGVmYXVsdFRhcmdldCIsImRlZmF1bHRSYWRpdXMiLCJkZWZhdWx0U3RhcnRBbmdsZSIsImRlZmF1bHRFbmRBbmdsZSIsImRlZmF1bHRQYWRBbmdsZSIsImRlZmF1bHRBcnJvd2hlYWRSYWRpdXMiLCJyaWJib24iLCJoZWFkUmFkaXVzIiwic291cmNlUmFkaXVzIiwidGFyZ2V0UmFkaXVzIiwiYXAiLCJhcmd2Iiwic3IiLCJzYTAiLCJzYTEiLCJ0ciIsInRhMCIsInRhMSIsInRyMiIsInRhMiIsInJpYmJvbkFycm93IiwicmFkaWFucyIsIlhuIiwiWW4iLCJabiIsImxhYkNvbnZlcnQiLCJMYWIiLCJIY2wiLCJoY2wybGFiIiwicmdiMmxyZ2IiLCJ4eXoybGFiIiwibGFiIiwibGFiMnh5eiIsImxyZ2IycmdiIiwiaGNsQ29udmVydCIsImxjaCIsImhjbCIsIkMiLCJEIiwiRUQiLCJFQiIsIkJDX0RBIiwiQ3ViZWhlbGl4IiwiYmwiLCJjdWJlaGVsaXhDb252ZXJ0IiwiY29zaCIsInNpbmgiLCJyaW5nIiwiaG9sZSIsInJpbmdDb250YWlucyIsInhpIiwieWkiLCJwaiIsInhqIiwieWoiLCJzZWdtZW50Q29udGFpbnMiLCJjb2xsaW5lYXIiLCJjYXNlcyIsInNtb290aCIsInNtb290aExpbmVhciIsImNvbnRvdXJzIiwiZmluaXRlIiwiY29udG91ciIsInBvbHlnb25zIiwiaG9sZXMiLCJmcmFnbWVudEJ5U3RhcnQiLCJmcmFnbWVudEJ5RW5kIiwiYWJvdmUiLCJzdGl0Y2giLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJ1bnNoaWZ0IiwiaXNvcmluZ3MiLCJhcmVhIiwicG9seWdvbiIsImNvb3JkaW5hdGVzIiwieHQiLCJ5dCIsInZhbGlkIiwic21vb3RoMSIsIl8wIiwiXzEiLCJzaWduIiwiZGVmYXVsdFgiLCJkZWZhdWx0WSIsImRlZmF1bHRXZWlnaHQiLCJ3ZWlnaHQiLCJncmlkIiwicG93MmsiLCJ3aSIsImRlbnNpdHkiLCJwb3c0ayIsIk1JTl9WQUxVRSIsImdlb21ldHJ5IiwidHJhbnNmb3JtUG9seWdvbiIsInRyYW5zZm9ybVJpbmciLCJ0cmFuc2Zvcm1Qb2ludCIsInJlc2l6ZSIsImRlZmluZVByb3BlcnR5IiwiY2VsbFNpemUiLCJlbGVuIiwiZmxlbiIsIlEiLCJRbmV3IiwiaGgiLCJidmlydCIsImVub3ciLCJmbm93IiwiZWluZGV4IiwiZmluZGV4IiwiaGluZGV4IiwidmVjIiwiQzEiLCJDMiIsIm9yaWVudDJkIiwiYXgiLCJheSIsImJ4IiwiYnkiLCJkZXRsZWZ0IiwiZGV0cmlnaHQiLCJkZXQiLCJkZXRzdW0iLCJhY3h0YWlsIiwiYWN5dGFpbCIsImJjeHRhaWwiLCJiY3l0YWlsIiwiYWhpIiwiYWxvIiwiYmhpIiwiYmxvIiwiX2oiLCJ1MyIsImFjeCIsImJjeCIsImFjeSIsImJjeSIsImVycmJvdW5kIiwiQzFsZW4iLCJDMmxlbiIsIkRsZW4iLCJvcmllbnQyZGFkYXB0IiwiRURHRV9TVEFDSyIsIkRlbGF1bmF0b3IiLCJnZXRYIiwiZGVmYXVsdEdldFgiLCJnZXRZIiwiZGVmYXVsdEdldFkiLCJjb29yZHMiLCJtYXhUcmlhbmdsZXMiLCJfdHJpYW5nbGVzIiwiX2hhbGZlZGdlcyIsIl9oYXNoU2l6ZSIsIl9odWxsUHJldiIsIl9odWxsTmV4dCIsIl9odWxsVHJpIiwiX2h1bGxIYXNoIiwiX2lkcyIsIl9kaXN0cyIsImh1bGxQcmV2IiwiaHVsbE5leHQiLCJodWxsVHJpIiwiaHVsbEhhc2giLCJtaW5EaXN0IiwiZGlzdCIsImkweCIsImkweSIsImkxeCIsImkxeSIsIm1pblJhZGl1cyIsImNpcmN1bXJhZGl1cyIsImkyeCIsImkyeSIsInF1aWNrc29ydCIsImh1bGwiLCJkMCIsInRyaWFuZ2xlcyIsImhhbGZlZGdlcyIsImNsIiwiY2lyY3VtY2VudGVyIiwiX2N4IiwiX2N5IiwiX2h1bGxTdGFydCIsImh1bGxTaXplIiwiX2hhc2hLZXkiLCJ0cmlhbmdsZXNMZW4iLCJfYWRkVHJpYW5nbGUiLCJ4cCIsInlwIiwiX2xlZ2FsaXplIiwicHNldWRvQW5nbGUiLCJhciIsImIwIiwiYWwiLCJwciIsInBsIiwiaW5DaXJjbGUiLCJoYmwiLCJfbGluayIsImJyIiwicHgiLCJweSIsImZ4IiwiZnkiLCJicCIsImNwIiwiZGlzdHMiLCJ0ZW1wRGlzdCIsIlBvbHlnb24iLCJWb3Jvbm9pIiwiZGVsYXVuYXkiLCJ4bWluIiwieW1pbiIsInhtYXgiLCJ5bWF4IiwiX2NpcmN1bWNlbnRlcnMiLCJ2ZWN0b3JzIiwiX2luaXQiLCJjaXJjdW1jZW50ZXJzIiwieDMiLCJ5MyIsImFiIiwicmVuZGVyIiwiaW5lZGdlcyIsInRpIiwidGoiLCJfcmVuZGVyU2VnbWVudCIsImgwIiwiaDEiLCJfcHJvamVjdCIsInJlbmRlckJvdW5kcyIsInJlbmRlckNlbGwiLCJfY2xpcCIsImNlbGxQb2x5Z29ucyIsImNlbGwiLCJjZWxsUG9seWdvbiIsImMwIiwiX3JlZ2lvbmNvZGUiLCJjMSIsIl9jbGlwU2VnbWVudCIsIl9zdGVwIiwibmVpZ2hib3JzIiwiY2kiLCJjaiIsImFpIiwibGkiLCJhaiIsImxqIiwiX2NlbGwiLCJfc2ltcGxpZnkiLCJfY2xpcEluZmluaXRlIiwiX2NsaXBGaW5pdGUiLCJzeDAiLCJzeTAiLCJzeDEiLCJzeTEiLCJfZWRnZWNvZGUiLCJfZWRnZSIsImZsaXAiLCJ2eDAiLCJ2eTAiLCJ2eG4iLCJ2eW4iLCJ2eCIsInZ5IiwicG9pbnRYIiwicG9pbnRZIiwiaml0dGVyIiwiRGVsYXVuYXkiLCJmbGF0QXJyYXkiLCJmbGF0SXRlcmFibGUiLCJfZGVsYXVuYXRvciIsIl9odWxsSW5kZXgiLCJib3VuZHMiLCJoeXBvdCIsImh1bGxJbmRleCIsInZvcm9ub2kiLCJkYyIsImR0IiwicmVuZGVySHVsbCIsInJlbmRlclBvaW50cyIsImh1bGxQb2x5Z29uIiwicmVuZGVyVHJpYW5nbGUiLCJ0cmlhbmdsZVBvbHlnb25zIiwidHJpYW5nbGVQb2x5Z29uIiwiRHJhZ0V2ZW50Iiwic3ViamVjdCIsImRlZmF1bHRDb250YWluZXIiLCJkZWZhdWx0U3ViamVjdCIsIm1vdXNlZG93bngiLCJtb3VzZWRvd255IiwibW91c2Vtb3ZpbmciLCJnZXN0dXJlcyIsImNsaWNrRGlzdGFuY2UyIiwibW91c2Vkb3duZWQiLCJ0b3VjaHN0YXJ0ZWQiLCJnZXN0dXJlIiwibW91c2Vtb3ZlZCIsIm1vdXNldXBwZWQiLCJub2RyYWciLCJtb3VzZSIsInRvdWNoIiwiY2xpY2tEaXN0YW5jZSIsIkVPTCIsIkVPRiIsIlFVT1RFIiwiTkVXTElORSIsIlJFVFVSTiIsIm9iamVjdENvbnZlcnRlciIsImNvbHVtbnMiLCJGdW5jdGlvbiIsImluZmVyQ29sdW1ucyIsImNvbHVtblNldCIsImNvbHVtbiIsInBhZCIsImRlbGltaXRlciIsInJlRm9ybWF0IiwiREVMSU1JVEVSIiwicGFyc2VSb3dzIiwiSSIsImVvZiIsImVvbCIsInRva2VuIiwicHJlZm9ybWF0Qm9keSIsImZvcm1hdFZhbHVlIiwiZm9ybWF0Um93IiwieWVhciIsImhvdXJzIiwiZ2V0VVRDSG91cnMiLCJtaW51dGVzIiwiZ2V0VVRDTWludXRlcyIsInNlY29uZHMiLCJnZXRVVENTZWNvbmRzIiwibWlsbGlzZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJmb3JtYXREYXRlIiwiY29udmVydCIsImN1c3RvbUNvbnZlcnRlciIsImZvcm1hdEJvZHkiLCJmb3JtYXRSb3dzIiwiY3N2IiwiZHN2IiwiY3N2UGFyc2UiLCJjc3ZQYXJzZVJvd3MiLCJjc3ZGb3JtYXQiLCJjc3ZGb3JtYXRCb2R5IiwiY3N2Rm9ybWF0Um93cyIsImNzdkZvcm1hdFJvdyIsImNzdkZvcm1hdFZhbHVlIiwidHN2IiwidHN2UGFyc2UiLCJ0c3ZQYXJzZVJvd3MiLCJ0c3ZGb3JtYXQiLCJ0c3ZGb3JtYXRCb2R5IiwidHN2Rm9ybWF0Um93cyIsInRzdkZvcm1hdFJvdyIsInRzdkZvcm1hdFZhbHVlIiwiYXV0b1R5cGUiLCJmaXh0eiIsImdldEhvdXJzIiwicXVhZEluIiwicXVhZE91dCIsInF1YWRJbk91dCIsInBvbHlJbiIsImN1c3RvbSIsImV4cG9uZW50IiwicG9seU91dCIsInBvbHlJbk91dCIsInNpbkluIiwic2luT3V0Iiwic2luSW5PdXQiLCJ0cG10IiwiZXhwSW4iLCJleHBPdXQiLCJleHBJbk91dCIsImNpcmNsZUluIiwiY2lyY2xlT3V0IiwiY2lyY2xlSW5PdXQiLCJiMSIsImIyIiwiYjMiLCJiNCIsImI1IiwiYjYiLCJiNyIsImI4IiwiYjkiLCJib3VuY2VJbiIsImJvdW5jZU91dCIsImJvdW5jZUluT3V0Iiwib3ZlcnNob290IiwiYmFja0luIiwiYmFja091dCIsImJhY2tJbk91dCIsImVsYXN0aWNJbiIsImFzaW4iLCJhbXBsaXR1ZGUiLCJwZXJpb2QiLCJlbGFzdGljT3V0IiwiZWxhc3RpY0luT3V0IiwicmVzcG9uc2VCbG9iIiwib2siLCJzdGF0dXNUZXh0IiwicmVzcG9uc2VBcnJheUJ1ZmZlciIsImFycmF5QnVmZmVyIiwicmVzcG9uc2VUZXh0IiwiZHN2UGFyc2UiLCJyZXNwb25zZUpzb24iLCJqc29uIiwicGFyc2VyIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwic3RyZW5ndGgiLCJmb3JjZSIsInN4Iiwic3kiLCJ0cmVlIiwieG0iLCJ5bSIsIl9yb290IiwibGVhZiIsInF1YWR0cmVlIiwiUXVhZHRyZWUiLCJhZGRBbGwiLCJsZWFmX2NvcHkiLCJ0cmVlUHJvdG8iLCJyYWRpaSIsIml0ZXJhdGlvbnMiLCJyaSIsInJpMiIsInZpc2l0QWZ0ZXIiLCJwcmVwYXJlIiwidmlzaXQiLCJxdWFkIiwicmoiLCJqaWdnbGUiLCJfbm9kZXMiLCJfcmFuZG9tIiwibm9kZUJ5SWQiLCJsaW5rcyIsInN0cmVuZ3RocyIsImRpc3RhbmNlcyIsImJpYXMiLCJkaXN0YW5jZSIsImluaXRpYWxpemVTdHJlbmd0aCIsImluaXRpYWxpemVEaXN0YW5jZSIsInl6IiwicXVhZHMiLCJkMiIsInJldGFpbmVyIiwicmVtb3ZlQWxsIiwiaW5pdGlhbFJhZGl1cyIsImluaXRpYWxBbmdsZSIsInNpbXVsYXRpb24iLCJhbHBoYU1pbiIsImFscGhhRGVjYXkiLCJhbHBoYVRhcmdldCIsInZlbG9jaXR5RGVjYXkiLCJmb3JjZXMiLCJzdGVwcGVyIiwibGNnIiwiaW5pdGlhbGl6ZU5vZGVzIiwiYW5nbGUiLCJpbml0aWFsaXplRm9yY2UiLCJyYW5kb21Tb3VyY2UiLCJkaXN0YW5jZU1pbjIiLCJkaXN0YW5jZU1heDIiLCJ0aGV0YTIiLCJhY2N1bXVsYXRlIiwiZGlzdGFuY2VNaW4iLCJkaXN0YW5jZU1heCIsInRoZXRhIiwicmFkaXVzZXMiLCJmb3JtYXREZWNpbWFsUGFydHMiLCJ0b0V4cG9uZW50aWFsIiwiY29lZmZpY2llbnQiLCJwcmVmaXhFeHBvbmVudCIsInJlIiwiZm9ybWF0U3BlY2lmaWVyIiwic3BlY2lmaWVyIiwiRm9ybWF0U3BlY2lmaWVyIiwiYWxpZ24iLCJzeW1ib2wiLCJjb21tYSIsInByZWNpc2lvbiIsInRvRml4ZWQiLCJ0b0xvY2FsZVN0cmluZyIsInRvUHJlY2lzaW9uIiwiZm9ybWF0Um91bmRlZCIsInRvVXBwZXJDYXNlIiwiZm9ybWF0UHJlZml4IiwicHJlZml4ZXMiLCJsb2NhbGUiLCJncm91cGluZyIsInRob3VzYW5kcyIsImN1cnJlbmN5UHJlZml4IiwiY3VycmVuY3kiLCJjdXJyZW5jeVN1ZmZpeCIsImRlY2ltYWwiLCJudW1lcmFscyIsImZvcm1hdE51bWVyYWxzIiwicGVyY2VudCIsIm1pbnVzIiwibmFuIiwibmV3Rm9ybWF0IiwiZm9ybWF0VHlwZXMiLCJzdWZmaXgiLCJmb3JtYXRUeXBlIiwibWF5YmVTdWZmaXgiLCJ2YWx1ZVByZWZpeCIsInZhbHVlU3VmZml4IiwidmFsdWVOZWdhdGl2ZSIsImZvcm1hdFRyaW0iLCJkZWZhdWx0TG9jYWxlIiwiZXBzaWxvbjIiLCJxdWFydGVyUGkiLCJoYXZlcnNpbiIsInN0cmVhbUdlb21ldHJ5Iiwic3RyZWFtIiwic3RyZWFtR2VvbWV0cnlUeXBlIiwic3RyZWFtT2JqZWN0VHlwZSIsIkZlYXR1cmUiLCJGZWF0dXJlQ29sbGVjdGlvbiIsImZlYXR1cmVzIiwiU3BoZXJlIiwic3BoZXJlIiwiUG9pbnQiLCJNdWx0aVBvaW50IiwiTGluZVN0cmluZyIsInN0cmVhbUxpbmUiLCJNdWx0aUxpbmVTdHJpbmciLCJzdHJlYW1Qb2x5Z29uIiwiTXVsdGlQb2x5Z29uIiwiR2VvbWV0cnlDb2xsZWN0aW9uIiwiZ2VvbWV0cmllcyIsImNsb3NlZCIsImNvb3JkaW5hdGUiLCJsaW5lU3RhcnQiLCJsaW5lRW5kIiwicG9seWdvblN0YXJ0IiwicG9seWdvbkVuZCIsImxhbWJkYTAwIiwicGhpMDAiLCJsYW1iZGEwIiwiY29zUGhpMCIsInNpblBoaTAiLCJwaGkwIiwibGFtYmRhMSIsInBoaTEiLCJsYW1iZGEyIiwiZGVsdGFTdW0iLCJyYW5nZXMiLCJhcmVhUmluZ1N1bSIsImFyZWFTdW0iLCJhcmVhU3RyZWFtIiwiYXJlYVJpbmdTdGFydCIsImFyZWFSaW5nRW5kIiwiYXJlYVJpbmciLCJhcmVhUG9pbnRGaXJzdCIsImFyZWFQb2ludCIsImxhbWJkYSIsInBoaSIsImRMYW1iZGEiLCJzZExhbWJkYSIsImFkTGFtYmRhIiwiY29zUGhpIiwic2luUGhpIiwic3BoZXJpY2FsIiwiY2FydGVzaWFuIiwiY2FydGVzaWFuRG90IiwiY2FydGVzaWFuQ3Jvc3MiLCJjYXJ0ZXNpYW5BZGRJblBsYWNlIiwiY2FydGVzaWFuU2NhbGUiLCJ2ZWN0b3IiLCJjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlIiwiVzAiLCJXMSIsIlgwIiwiWTAiLCJaMCIsIlgxIiwiWTEiLCJaMSIsIlgyIiwiWTIiLCJaMiIsInowIiwiYm91bmRzU3RyZWFtIiwiYm91bmRzUG9pbnQiLCJib3VuZHNMaW5lU3RhcnQiLCJib3VuZHNMaW5lRW5kIiwiYm91bmRzUmluZ1BvaW50IiwiYm91bmRzUmluZ1N0YXJ0IiwiYm91bmRzUmluZ0VuZCIsImxpbmVQb2ludCIsIm5vcm1hbCIsImluZmxlY3Rpb24iLCJwaGlpIiwibGFtYmRhaSIsImFudGltZXJpZGlhbiIsInJhbmdlQ29tcGFyZSIsInJhbmdlQ29udGFpbnMiLCJmZWF0dXJlIiwibWVyZ2VkIiwiZGVsdGFNYXgiLCJjZW50cm9pZFN0cmVhbSIsImNlbnRyb2lkUG9pbnQiLCJjZW50cm9pZExpbmVTdGFydCIsImNlbnRyb2lkTGluZUVuZCIsImNlbnRyb2lkUmluZ1N0YXJ0IiwiY2VudHJvaWRSaW5nRW5kIiwiY2VudHJvaWRQb2ludENhcnRlc2lhbiIsImNlbnRyb2lkTGluZVBvaW50Rmlyc3QiLCJjZW50cm9pZExpbmVQb2ludCIsImNlbnRyb2lkUmluZ1BvaW50Rmlyc3QiLCJjZW50cm9pZFJpbmdQb2ludCIsImN6IiwiY29tcG9zZSIsImludmVydCIsInJvdGF0aW9uSWRlbnRpdHkiLCJyb3RhdGVSYWRpYW5zIiwiZGVsdGFMYW1iZGEiLCJkZWx0YVBoaSIsImRlbHRhR2FtbWEiLCJyb3RhdGlvbkxhbWJkYSIsInJvdGF0aW9uUGhpR2FtbWEiLCJmb3J3YXJkUm90YXRpb25MYW1iZGEiLCJyb3RhdGlvbiIsImNvc0RlbHRhUGhpIiwic2luRGVsdGFQaGkiLCJjb3NEZWx0YUdhbW1hIiwic2luRGVsdGFHYW1tYSIsImZvcndhcmQiLCJjaXJjbGVTdHJlYW0iLCJkaXJlY3Rpb24iLCJjb3NSYWRpdXMiLCJzaW5SYWRpdXMiLCJjaXJjbGVSYWRpdXMiLCJjaXJjbGUiLCJsaW5lcyIsInJlam9pbiIsIkludGVyc2VjdGlvbiIsImVudHJ5Iiwic2VnbWVudHMiLCJjb21wYXJlSW50ZXJzZWN0aW9uIiwic3RhcnRJbnNpZGUiLCJjbGlwIiwic2VnbWVudCIsInBvaW50RXF1YWwiLCJpc1N1YmplY3QiLCJsb25naXR1ZGUiLCJ3aW5kaW5nIiwic2luUGhpMSIsImNvc1BoaTEiLCJwb2ludDEiLCJhYnNEZWx0YSIsInBoaUFyYyIsInBvaW50VmlzaWJsZSIsImNsaXBMaW5lIiwic2luayIsInJpbmdCdWZmZXIiLCJyaW5nU2luayIsInBvbHlnb25TdGFydGVkIiwicG9pbnRSaW5nIiwicmluZ1N0YXJ0IiwicmluZ0VuZCIsInBvbHlnb25Db250YWlucyIsInBvaW50TGluZSIsInJpbmdTZWdtZW50cyIsInZhbGlkU2VnbWVudCIsInNpZ24wIiwic2lnbjEiLCJzaW5MYW1iZGEwTGFtYmRhMSIsImNsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QiLCJjciIsInNtYWxsUmFkaXVzIiwibm90SGVtaXNwaGVyZSIsInZpc2libGUiLCJpbnRlcnNlY3QiLCJ0d28iLCJuMiIsIm4ybjIiLCJuMW4yIiwiZGV0ZXJtaW5hbnQiLCJjMiIsIm4xeG4yIiwidXUiLCJwb2xhciIsInExIiwidjAwIiwicG9pbnQyIiwibGVuZ3RoU3VtIiwiY2xpcE1heCIsImNsaXBNaW4iLCJjbGlwUmVjdGFuZ2xlIiwiY29ybmVyIiwiY29tcGFyZVBvaW50IiwiY2EiLCJjYiIsInhfXyIsInlfXyIsInZfXyIsInhfIiwieV8iLCJ2XyIsImFjdGl2ZVN0cmVhbSIsImJ1ZmZlclN0cmVhbSIsImNsaXBTdHJlYW0iLCJwb2x5Z29uSW5zaWRlIiwiY2xlYW5JbnNpZGUiLCJjYWNoZSIsImNhY2hlU3RyZWFtIiwibGVuZ3RoU3RyZWFtIiwibGVuZ3RoUG9pbnRGaXJzdCIsImxlbmd0aExpbmVFbmQiLCJsZW5ndGhQb2ludCIsImNvc0RlbHRhIiwiY29udGFpbnNPYmplY3RUeXBlIiwiY29udGFpbnNHZW9tZXRyeSIsImNvbnRhaW5zR2VvbWV0cnlUeXBlIiwiY29udGFpbnNQb2ludCIsImNvbnRhaW5zTGluZSIsImNvbnRhaW5zUG9seWdvbiIsImFvIiwiYm8iLCJyaW5nUmFkaWFucyIsInBvaW50UmFkaWFucyIsImdyYXRpY3VsZVgiLCJncmF0aWN1bGVZIiwiZ3JhdGljdWxlIiwiRFgiLCJEWSIsIm91dGxpbmUiLCJleHRlbnRNYWpvciIsImV4dGVudE1pbm9yIiwic3RlcE1ham9yIiwic3RlcE1pbm9yIiwiZ3JhdGljdWxlMTAiLCJjeTAiLCJjeTEiLCJreDAiLCJreTAiLCJreDEiLCJreTEiLCJ4MDAiLCJ5MDAiLCJjZW50cm9pZCIsImNlbnRyb2lkUG9pbnRGaXJzdExpbmUiLCJjZW50cm9pZFBvaW50TGluZSIsImNlbnRyb2lkUG9pbnRGaXJzdFJpbmciLCJjZW50cm9pZFBvaW50UmluZyIsIlBhdGhDb250ZXh0IiwiX2NvbnRleHQiLCJfcmFkaXVzIiwicG9pbnRSYWRpdXMiLCJfbGluZSIsIl9wb2ludCIsImxlbmd0aFJpbmciLCJjYWNoZURpZ2l0cyIsImNhY2hlQXBwZW5kIiwiY2FjaGVSYWRpdXMiLCJjYWNoZUNpcmNsZSIsIlBhdGhTdHJpbmciLCJwcm9qZWN0aW9uIiwicHJvamVjdGlvblN0cmVhbSIsImNvbnRleHRTdHJlYW0iLCJtZWFzdXJlIiwibWV0aG9kcyIsInRyYW5zZm9ybWVyIiwiVHJhbnNmb3JtU3RyZWFtIiwiZml0IiwiZml0Qm91bmRzIiwiY2xpcEV4dGVudCIsImZpdEV4dGVudCIsImZpdFNpemUiLCJmaXRXaWR0aCIsImZpdEhlaWdodCIsIm1heERlcHRoIiwiY29zTWluRGlzdGFuY2UiLCJwcm9qZWN0IiwiZGVsdGEyIiwicmVzYW1wbGVMaW5lVG8iLCJkZXB0aCIsInBoaTIiLCJkeDIiLCJkeTIiLCJkeiIsImEwMCIsImIwMCIsImMwMCIsInJlc2FtcGxlU3RyZWFtIiwicmluZ1BvaW50IiwicmVzYW1wbGVOb25lIiwidHJhbnNmb3JtUmFkaWFucyIsInNjYWxlVHJhbnNsYXRlUm90YXRlIiwic2NhbGVUcmFuc2xhdGUiLCJjb3NBbHBoYSIsInNpbkFscGhhIiwiZmkiLCJwcm9qZWN0aW9uTXV0YXRvciIsInByb2plY3RBdCIsInByb2plY3RSZXNhbXBsZSIsInByb2plY3RUcmFuc2Zvcm0iLCJwcm9qZWN0Um90YXRlVHJhbnNmb3JtIiwicHJlY2xpcCIsInBvc3RjbGlwIiwicmVjZW50ZXIiLCJyZXNhbXBsZSIsInRyYW5zZm9ybVJvdGF0ZSIsImNsaXBBbmdsZSIsInJlZmxlY3RYIiwicmVmbGVjdFkiLCJjb25pY1Byb2plY3Rpb24iLCJwYXJhbGxlbHMiLCJjb25pY0VxdWFsQXJlYVJhdyIsImN5bGluZHJpY2FsRXF1YWxBcmVhUmF3IiwicjAiLCJyMHkiLCJjb25pY0VxdWFsQXJlYSIsImxvd2VyNDhQb2ludCIsImFsYXNrYVBvaW50IiwiaGF3YWlpUG9pbnQiLCJsb3dlcjQ4IiwiYWxiZXJzIiwiYWxhc2thIiwiaGF3YWlpIiwicG9pbnRTdHJlYW0iLCJhbGJlcnNVc2EiLCJzdHJlYW1zIiwiYXppbXV0aGFsUmF3IiwiYXppbXV0aGFsSW52ZXJ0Iiwic2MiLCJjYyIsImF6aW11dGhhbEVxdWFsQXJlYVJhdyIsImN4Y3kiLCJhemltdXRoYWxFcXVpZGlzdGFudFJhdyIsIm1lcmNhdG9yUmF3IiwibWVyY2F0b3JQcm9qZWN0aW9uIiwicmVjbGlwIiwidGFueSIsImNvbmljQ29uZm9ybWFsUmF3IiwiZXF1aXJlY3Rhbmd1bGFyUmF3IiwiY29uaWNFcXVpZGlzdGFudFJhdyIsImd5IiwibngiLCJBMSIsIkEyIiwiQTMiLCJBNCIsIk0iLCJlcXVhbEVhcnRoUmF3IiwibDIiLCJsNiIsImdub21vbmljUmF3Iiwic2EiLCJ0eSIsImt4Iiwia3kiLCJuYXR1cmFsRWFydGgxUmF3IiwicGhpNCIsIm9ydGhvZ3JhcGhpY1JhdyIsInN0ZXJlb2dyYXBoaWNSYXciLCJ0cmFuc3ZlcnNlTWVyY2F0b3JSYXciLCJkZWZhdWx0U2VwYXJhdGlvbiIsIm1lYW5YUmVkdWNlIiwibWF4WVJlZHVjZSIsInNlcGFyYXRpb24iLCJub2RlU2l6ZSIsImNsdXN0ZXIiLCJwcmV2aW91c05vZGUiLCJlYWNoQWZ0ZXIiLCJtZWFuWCIsImxlYWZMZWZ0IiwibGVhZlJpZ2h0IiwiaGllcmFyY2h5IiwibWFwQ2hpbGRyZW4iLCJvYmplY3RDaGlsZHJlbiIsImNoaWxkcyIsIk5vZGUiLCJlYWNoQmVmb3JlIiwiY29tcHV0ZUhlaWdodCIsImNvcHlEYXRhIiwib3B0aW9uYWwiLCJyZXF1aXJlZCIsImNvbnN0YW50WmVybyIsImFuY2VzdG9yIiwiYU5vZGVzIiwiYW5jZXN0b3JzIiwiYk5vZGVzIiwibGVhc3RDb21tb25BbmNlc3RvciIsImRlc2NlbmRhbnRzIiwibGVhdmVzIiwiY2lyY2xlcyIsInBhY2tFbmNsb3NlUmFuZG9tIiwiZW5jbG9zZXNXZWFrIiwiZW5jbG9zZUJhc2lzIiwiZXh0ZW5kQmFzaXMiLCJlbmNsb3Nlc1dlYWtBbGwiLCJlbmNsb3Nlc05vdCIsImVuY2xvc2VCYXNpczIiLCJlbmNsb3NlQmFzaXMzIiwiZHIiLCJlbmNsb3NlQmFzaXMxIiwicjEiLCJyMiIsInIyMSIsInIzIiwiYTIiLCJhMyIsImMzIiwiZDEiLCJwbGFjZSIsImludGVyc2VjdHMiLCJzY29yZSIsInBhY2tTaWJsaW5nc1JhbmRvbSIsImFhIiwic2oiLCJzayIsInBhY2siLCJyYWRpdXNMZWFmIiwicGFja0NoaWxkcmVuUmFuZG9tIiwidHJhbnNsYXRlQ2hpbGQiLCJwYXJ0aXRpb24iLCJwb3NpdGlvbk5vZGUiLCJwcmVyb290IiwiYW1iaWd1b3VzIiwiaW1wdXRlZCIsImRlZmF1bHRJZCIsImRlZmF1bHRQYXJlbnRJZCIsInBhcmVudElkIiwic3RyYXRpZnkiLCJub2RlS2V5IiwiY3VycmVudElkIiwiY3VycmVudFBhcmVudElkIiwibm9kZUJ5S2V5Iiwic2xhc2giLCJub3JtYWxpemUiLCJwYXJlbnRvZiIsIm5leHRMZWZ0IiwibmV4dFJpZ2h0IiwibW92ZVN1YnRyZWUiLCJ3bSIsIndwIiwibmV4dEFuY2VzdG9yIiwidmltIiwiVHJlZU5vZGUiLCJ0cmVlUm9vdCIsImZpcnN0V2FsayIsInNlY29uZFdhbGsiLCJzaXplTm9kZSIsInNpYmxpbmdzIiwiZXhlY3V0ZVNoaWZ0cyIsIm1pZHBvaW50IiwidmlwIiwidm9wIiwidm9tIiwic2lwIiwic29wIiwic2ltIiwic29tIiwiYXBwb3J0aW9uIiwic3F1YXJpZnlSYXRpbyIsIm5vZGVWYWx1ZSIsInN1bVZhbHVlIiwibmV3UmF0aW8iLCJtaW5SYXRpbyIsImJldGEiLCJkaWNlIiwic3F1YXJpZnkiLCJ0aWxlIiwicGFkZGluZ1N0YWNrIiwicGFkZGluZ0lubmVyIiwicGFkZGluZ1RvcCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdCb3R0b20iLCJwYWRkaW5nTGVmdCIsInRyZWVtYXAiLCJwYWRkaW5nT3V0ZXIiLCJzdW1zIiwidmFsdWVPZmZzZXQiLCJ2YWx1ZVRhcmdldCIsInZhbHVlTGVmdCIsInZhbHVlUmlnaHQiLCJ4ayIsInlrIiwicmVzcXVhcmlmeSIsIl9zcXVhcmlmeSIsInpvb21SaG8iLCJyaG8iLCJyaG8yIiwicmhvNCIsInpvb20iLCJ1eDAiLCJ1eTAiLCJ1eDEiLCJ1eTEiLCJjb3NocjAiLCJTUVJUMiIsIl8yIiwiaHNsTG9uZyIsImhjbExvbmciLCJjdWJlaGVsaXgiLCJjdWJlaGVsaXhHYW1tYSIsImN1YmVoZWxpeExvbmciLCJwaWVjZXdpc2UiLCJpbnRlcnBvbGF0b3IiLCJzYW1wbGVzIiwibGV4aWNvZ3JhcGhpY09yZGVyIiwiY29tcHV0ZVVwcGVySHVsbEluZGV4ZXMiLCJzb3J0ZWRQb2ludHMiLCJmbGlwcGVkUG9pbnRzIiwidXBwZXJJbmRleGVzIiwibG93ZXJJbmRleGVzIiwic2tpcExlZnQiLCJza2lwUmlnaHQiLCJpbnNpZGUiLCJwZXJpbWV0ZXIiLCJzb3VyY2VSYW5kb21Vbmlmb3JtIiwicmFuZG9tVW5pZm9ybSIsInNvdXJjZVJhbmRvbUludCIsInJhbmRvbUludCIsInNvdXJjZVJhbmRvbU5vcm1hbCIsInJhbmRvbU5vcm1hbCIsIm11Iiwic2lnbWEiLCJzb3VyY2VSYW5kb21Mb2dOb3JtYWwiLCJyYW5kb21Mb2dOb3JtYWwiLCJzb3VyY2VSYW5kb21JcndpbkhhbGwiLCJyYW5kb21JcndpbkhhbGwiLCJzb3VyY2VSYW5kb21CYXRlcyIsImlyd2luSGFsbCIsInJhbmRvbUJhdGVzIiwic291cmNlUmFuZG9tRXhwb25lbnRpYWwiLCJyYW5kb21FeHBvbmVudGlhbCIsImxvZzFwIiwic291cmNlUmFuZG9tUGFyZXRvIiwicmFuZG9tUGFyZXRvIiwic291cmNlUmFuZG9tQmVybm91bGxpIiwicmFuZG9tQmVybm91bGxpIiwic291cmNlUmFuZG9tR2VvbWV0cmljIiwicmFuZG9tR2VvbWV0cmljIiwic291cmNlUmFuZG9tR2FtbWEiLCJyYW5kb21HYW1tYSIsIm11bHRpcGxpZXIiLCJzb3VyY2VSYW5kb21CZXRhIiwiRyIsInJhbmRvbUJldGEiLCJzb3VyY2VSYW5kb21CaW5vbWlhbCIsImdlb21ldHJpYyIsInJhbmRvbUJpbm9taWFsIiwiYWNjIiwibm4iLCJwcCIsInNvdXJjZVJhbmRvbVdlaWJ1bGwiLCJyYW5kb21XZWlidWxsIiwib3V0ZXJGdW5jIiwic291cmNlUmFuZG9tQ2F1Y2h5IiwicmFuZG9tQ2F1Y2h5Iiwic291cmNlUmFuZG9tTG9naXN0aWMiLCJyYW5kb21Mb2dpc3RpYyIsInNvdXJjZVJhbmRvbVBvaXNzb24iLCJiaW5vbWlhbCIsInJhbmRvbVBvaXNzb24iLCJtdWwiLCJlcHMiLCJzZWVkIiwiaW5pdFJhbmdlIiwiaW5pdEludGVycG9sYXRvciIsImltcGxpY2l0Iiwib3JkaW5hbCIsInVua25vd24iLCJiYW5kIiwib3JkaW5hbFJhbmdlIiwicmVzY2FsZSIsInJhbmdlUm91bmQiLCJwb2ludGlzaCIsInVuaXQiLCJiaW1hcCIsInBvbHltYXAiLCJ1bnRyYW5zZm9ybSIsImNsYW1wZXIiLCJjb250aW51b3VzIiwicHJlY2lzaW9uUHJlZml4IiwicHJlY2lzaW9uUm91bmQiLCJwcmVjaXNpb25GaXhlZCIsImxpbmVhcmlzaCIsIm1heEl0ZXIiLCJ0cmFuc2Zvcm1Mb2ciLCJ0cmFuc2Zvcm1FeHAiLCJ0cmFuc2Zvcm1Mb2duIiwidHJhbnNmb3JtRXhwbiIsInBvdzEwIiwicmVmbGVjdCIsImxvZ2dpc2giLCJsb2dzIiwicG93cyIsImJhc2UiLCJsb2cyIiwibG9ncCIsInBvd3AiLCJ0cmFuc2Zvcm1TeW1sb2ciLCJ0cmFuc2Zvcm1TeW1leHAiLCJleHBtMSIsInN5bWxvZ2lzaCIsInN5bWxvZyIsInRyYW5zZm9ybVBvdyIsInRyYW5zZm9ybVNxcnQiLCJ0cmFuc2Zvcm1TcXVhcmUiLCJwb3dpc2giLCJzcXVhcmUiLCJzcXVhcmVkIiwidW5zcXVhcmUiLCJpbnZlcnRFeHRlbnQiLCJxdWFudGlsZXMiLCJkdXJhdGlvblNlY29uZCIsImR1cmF0aW9uTWludXRlIiwiZHVyYXRpb25Ib3VyIiwiZHVyYXRpb25EYXkiLCJkdXJhdGlvbldlZWsiLCJkdXJhdGlvblllYXIiLCJ0aW1lSW50ZXJ2YWwiLCJmbG9vcmkiLCJvZmZzZXRpIiwiZmllbGQiLCJtaWxsaXNlY29uZCIsInNlY29uZCIsImdldE1pbGxpc2Vjb25kcyIsInRpbWVNaW51dGUiLCJnZXRTZWNvbmRzIiwiZ2V0TWludXRlcyIsInRpbWVNaW51dGVzIiwidXRjTWludXRlIiwic2V0VVRDU2Vjb25kcyIsInV0Y01pbnV0ZXMiLCJ0aW1lSG91ciIsInRpbWVIb3VycyIsInV0Y0hvdXIiLCJzZXRVVENNaW51dGVzIiwidXRjSG91cnMiLCJ0aW1lRGF5Iiwic2V0SG91cnMiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0IiwidGltZURheXMiLCJ1dGNEYXkiLCJzZXRVVENIb3VycyIsInNldFVUQ0RhdGUiLCJ1dGNEYXlzIiwidW5peERheSIsInVuaXhEYXlzIiwidGltZVdlZWtkYXkiLCJnZXREYXkiLCJ0aW1lU3VuZGF5IiwidGltZU1vbmRheSIsInRpbWVUdWVzZGF5IiwidGltZVdlZG5lc2RheSIsInRpbWVUaHVyc2RheSIsInRpbWVGcmlkYXkiLCJ0aW1lU2F0dXJkYXkiLCJ0aW1lU3VuZGF5cyIsInRpbWVNb25kYXlzIiwidGltZVR1ZXNkYXlzIiwidGltZVdlZG5lc2RheXMiLCJ0aW1lVGh1cnNkYXlzIiwidGltZUZyaWRheXMiLCJ0aW1lU2F0dXJkYXlzIiwidXRjV2Vla2RheSIsImdldFVUQ0RheSIsInV0Y1N1bmRheSIsInV0Y01vbmRheSIsInV0Y1R1ZXNkYXkiLCJ1dGNXZWRuZXNkYXkiLCJ1dGNUaHVyc2RheSIsInV0Y0ZyaWRheSIsInV0Y1NhdHVyZGF5IiwidXRjU3VuZGF5cyIsInV0Y01vbmRheXMiLCJ1dGNUdWVzZGF5cyIsInV0Y1dlZG5lc2RheXMiLCJ1dGNUaHVyc2RheXMiLCJ1dGNGcmlkYXlzIiwidXRjU2F0dXJkYXlzIiwidGltZU1vbnRoIiwic2V0TW9udGgiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwidGltZU1vbnRocyIsInV0Y01vbnRoIiwic2V0VVRDTW9udGgiLCJ1dGNNb250aHMiLCJ0aW1lWWVhciIsInNldEZ1bGxZZWFyIiwidGltZVllYXJzIiwidXRjWWVhciIsInNldFVUQ0Z1bGxZZWFyIiwidXRjWWVhcnMiLCJ0aWNrZXIiLCJtb250aCIsIndlZWsiLCJkYXkiLCJob3VyIiwibWludXRlIiwidGlja0ludGVydmFscyIsInRpY2tJbnRlcnZhbCIsInV0Y1RpY2tzIiwidXRjVGlja0ludGVydmFsIiwidGltZVRpY2tzIiwidGltZVRpY2tJbnRlcnZhbCIsImxvY2FsRGF0ZSIsIkgiLCJMIiwidXRjRGF0ZSIsIlVUQyIsIm5ld0RhdGUiLCJmb3JtYXRMb2NhbGUiLCJsb2NhbGVfZGF0ZVRpbWUiLCJkYXRlVGltZSIsImxvY2FsZV9kYXRlIiwibG9jYWxlX3RpbWUiLCJsb2NhbGVfcGVyaW9kcyIsInBlcmlvZHMiLCJsb2NhbGVfd2Vla2RheXMiLCJkYXlzIiwibG9jYWxlX3Nob3J0V2Vla2RheXMiLCJzaG9ydERheXMiLCJsb2NhbGVfbW9udGhzIiwibW9udGhzIiwibG9jYWxlX3Nob3J0TW9udGhzIiwic2hvcnRNb250aHMiLCJwZXJpb2RSZSIsImZvcm1hdFJlIiwicGVyaW9kTG9va3VwIiwiZm9ybWF0TG9va3VwIiwid2Vla2RheVJlIiwid2Vla2RheUxvb2t1cCIsInNob3J0V2Vla2RheVJlIiwic2hvcnRXZWVrZGF5TG9va3VwIiwibW9udGhSZSIsIm1vbnRoTG9va3VwIiwic2hvcnRNb250aFJlIiwic2hvcnRNb250aExvb2t1cCIsImZvcm1hdHMiLCJmb3JtYXREYXlPZk1vbnRoIiwiZm9ybWF0TWljcm9zZWNvbmRzIiwiZm9ybWF0WWVhcklTTyIsImZvcm1hdEZ1bGxZZWFySVNPIiwiZm9ybWF0SG91cjI0IiwiZm9ybWF0SG91cjEyIiwiZm9ybWF0RGF5T2ZZZWFyIiwiZm9ybWF0TWlsbGlzZWNvbmRzIiwiZm9ybWF0TW9udGhOdW1iZXIiLCJmb3JtYXRNaW51dGVzIiwiZm9ybWF0VW5peFRpbWVzdGFtcCIsImZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzIiwiZm9ybWF0U2Vjb25kcyIsImZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXkiLCJmb3JtYXRXZWVrTnVtYmVyU3VuZGF5IiwiZm9ybWF0V2Vla051bWJlcklTTyIsImZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRXZWVrTnVtYmVyTW9uZGF5IiwiZm9ybWF0RnVsbFllYXIiLCJmb3JtYXRab25lIiwiZm9ybWF0TGl0ZXJhbFBlcmNlbnQiLCJ1dGNGb3JtYXRzIiwiZm9ybWF0VVRDRGF5T2ZNb250aCIsImZvcm1hdFVUQ01pY3Jvc2Vjb25kcyIsImZvcm1hdFVUQ1llYXJJU08iLCJmb3JtYXRVVENGdWxsWWVhcklTTyIsImZvcm1hdFVUQ0hvdXIyNCIsImZvcm1hdFVUQ0hvdXIxMiIsImZvcm1hdFVUQ0RheU9mWWVhciIsImZvcm1hdFVUQ01pbGxpc2Vjb25kcyIsImZvcm1hdFVUQ01vbnRoTnVtYmVyIiwiZm9ybWF0VVRDTWludXRlcyIsImZvcm1hdFVUQ1NlY29uZHMiLCJmb3JtYXRVVENXZWVrZGF5TnVtYmVyTW9uZGF5IiwiZm9ybWF0VVRDV2Vla051bWJlclN1bmRheSIsImZvcm1hdFVUQ1dlZWtOdW1iZXJJU08iLCJmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5IiwiZm9ybWF0VVRDV2Vla051bWJlck1vbmRheSIsImZvcm1hdFVUQ1llYXIiLCJmb3JtYXRVVENGdWxsWWVhciIsImZvcm1hdFVUQ1pvbmUiLCJwYXJzZXMiLCJwYXJzZVNwZWNpZmllciIsInBhcnNlRGF5T2ZNb250aCIsInBhcnNlTWljcm9zZWNvbmRzIiwicGFyc2VZZWFyIiwicGFyc2VGdWxsWWVhciIsInBhcnNlSG91cjI0IiwicGFyc2VEYXlPZlllYXIiLCJwYXJzZU1pbGxpc2Vjb25kcyIsInBhcnNlTW9udGhOdW1iZXIiLCJwYXJzZU1pbnV0ZXMiLCJwYXJzZVF1YXJ0ZXIiLCJwYXJzZVVuaXhUaW1lc3RhbXAiLCJwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzIiwicGFyc2VTZWNvbmRzIiwicGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5IiwicGFyc2VXZWVrTnVtYmVyU3VuZGF5IiwicGFyc2VXZWVrTnVtYmVySVNPIiwicGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5IiwicGFyc2VXZWVrTnVtYmVyTW9uZGF5IiwicGFyc2Vab25lIiwicGFyc2VMaXRlcmFsUGVyY2VudCIsInBhZHMiLCJjaGFyQXQiLCJuZXdQYXJzZSIsIloiLCJVIiwidXRjRm9ybWF0IiwidXRjUGFyc2UiLCJ0aW1lRm9ybWF0IiwidGltZVBhcnNlIiwibnVtYmVyUmUiLCJwZXJjZW50UmUiLCJyZXF1b3RlUmUiLCJyZXF1b3RlIiwiZElTTyIsImRvdyIsIlVUQ2RJU08iLCJjYWxlbmRhciIsImZvcm1hdE1pbGxpc2Vjb25kIiwiZm9ybWF0U2Vjb25kIiwiZm9ybWF0TWludXRlIiwiZm9ybWF0SG91ciIsImZvcm1hdERheSIsImZvcm1hdFdlZWsiLCJmb3JtYXRNb250aCIsImZvcm1hdFllYXIiLCJ1dGNUaW1lIiwiazEwIiwic2VxdWVudGlhbCIsInNlcXVlbnRpYWxMb2ciLCJzZXF1ZW50aWFsU3ltbG9nIiwic2VxdWVudGlhbFBvdyIsInNlcXVlbnRpYWxTcXJ0Iiwic2VxdWVudGlhbFF1YW50aWxlIiwiazIxIiwiZGl2ZXJnaW5nIiwiZGl2ZXJnaW5nTG9nIiwiZGl2ZXJnaW5nU3ltbG9nIiwiZGl2ZXJnaW5nUG93IiwiZGl2ZXJnaW5nU3FydCIsInNjaGVtZSIsInJhbXAiLCJ3YXJtIiwiY29vbCIsInRzIiwicGlfMV8zIiwicGlfMl8zIiwibWFnbWEiLCJpbmZlcm5vIiwicGxhc21hIiwibmV4dElkIiwiTG9jYWwiLCJ3aXRoUGF0aCIsInNoYXBlIiwiYXJjSW5uZXJSYWRpdXMiLCJpbm5lclJhZGl1cyIsImFyY091dGVyUmFkaXVzIiwib3V0ZXJSYWRpdXMiLCJhcmNTdGFydEFuZ2xlIiwiYXJjRW5kQW5nbGUiLCJhcmNQYWRBbmdsZSIsImNvcm5lclRhbmdlbnRzIiwicmMiLCJveCIsIm95IiwieDExIiwieTExIiwieDEwIiwieTEwIiwiY3gwIiwiY3gxIiwiZHgwIiwiZHkwIiwiZHgxIiwiZHkxIiwiY29ybmVyUmFkaXVzIiwicGFkUmFkaXVzIiwiYTAxIiwiYTExIiwiYTEwIiwiZGEwIiwiZGExIiwicnAiLCJyYzAiLCJyYzEiLCJvYyIsIngzMiIsInkzMiIsImtjIiwibGMiLCJMaW5lYXIiLCJkZWZpbmVkMCIsIngweiIsInkweiIsImFyZWFTdGFydCIsImFyZWFFbmQiLCJhcmVhbGluZSIsImxpbmVYMCIsImxpbmVZMCIsImxpbmVZMSIsImxpbmVYMSIsInNvcnRWYWx1ZXMiLCJwaWUiLCJhcmNzIiwicGEiLCJjdXJ2ZVJhZGlhbExpbmVhciIsImN1cnZlUmFkaWFsIiwiUmFkaWFsIiwiX2N1cnZlIiwicmFkaWFsIiwibGluZVJhZGlhbCIsImxpbmVTdGFydEFuZ2xlIiwibGluZUVuZEFuZ2xlIiwibGluZUlubmVyUmFkaXVzIiwibGluZU91dGVyUmFkaXVzIiwiQnVtcCIsIkJ1bXBSYWRpYWwiLCJwb2ludFJhZGlhbCIsInAyIiwicDMiLCJidW1wWCIsImJ1bXBZIiwiYnVtcFJhZGlhbCIsImxpbmtTb3VyY2UiLCJsaW5rVGFyZ2V0IiwibGlua0hvcml6b250YWwiLCJsaW5rVmVydGljYWwiLCJsaW5rUmFkaWFsIiwic3FydDMiLCJkcmF3IiwidGFuMzAiLCJ0YW4zMF8yIiwia3IiLCJzeW1ib2xzRmlsbCIsImRpYW1vbmQiLCJzdGFyIiwidHJpYW5nbGUiLCJ3eWUiLCJzeW1ib2xzU3Ryb2tlIiwicGx1cyIsInRpbWVzIiwidHJpYW5nbGUyIiwiYXN0ZXJpc2siLCJzcXVhcmUyIiwiZGlhbW9uZDIiLCJCYXNpcyIsIkJhc2lzQ2xvc2VkIiwiQmFzaXNPcGVuIiwiQnVuZGxlIiwiX2Jhc2lzIiwiX2JldGEiLCJfeDIiLCJfeDMiLCJfeDQiLCJfeTIiLCJfeTMiLCJfeTQiLCJidW5kbGUiLCJfayIsIkNhcmRpbmFsIiwidGVuc2lvbiIsImNhcmRpbmFsIiwiQ2FyZGluYWxDbG9zZWQiLCJfeDUiLCJfeTUiLCJDYXJkaW5hbE9wZW4iLCJfbDAxX2EiLCJfbDAxXzJhIiwiX2wxMl9hIiwiX2wxMl8yYSIsIl9sMjNfYSIsIl9sMjNfMmEiLCJDYXRtdWxsUm9tIiwiX2FscGhhIiwieDIzIiwieTIzIiwiY2F0bXVsbFJvbSIsIkNhdG11bGxSb21DbG9zZWQiLCJDYXRtdWxsUm9tT3BlbiIsIkxpbmVhckNsb3NlZCIsInNsb3BlMyIsInNsb3BlMiIsIk1vbm90b25lWCIsIk1vbm90b25lWSIsIlJlZmxlY3RDb250ZXh0IiwibW9ub3RvbmVYIiwibW9ub3RvbmVZIiwiTmF0dXJhbCIsImNvbnRyb2xQb2ludHMiLCJTdGVwIiwiX3QiLCJzdGVwQmVmb3JlIiwic3RlcEFmdGVyIiwic2VyaWVzIiwic3RhY2tWYWx1ZSIsInN0YWNrU2VyaWVzIiwic3RhY2siLCJveiIsInN6IiwieW4iLCJzMiIsInNpIiwic2lqMCIsInMzIiwicGVha3MiLCJwZWFrIiwidmkiLCJ2aiIsImFwcGVhcmFuY2UiLCJ0b3BzIiwiYm90dG9tcyIsIl90MCIsImlzb1NwZWNpZmllciIsImZvcm1hdElzbyIsInRvSVNPU3RyaW5nIiwicGFyc2VJc28iLCJfcmVzdGFydCIsIlpvb21FdmVudCIsIlRyYW5zZm9ybSIsImFwcGx5WCIsImFwcGx5WSIsImludmVydFgiLCJpbnZlcnRZIiwicmVzY2FsZVgiLCJyZXNjYWxlWSIsIl9fem9vbSIsIlNWR0VsZW1lbnQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImRlZmF1bHRUcmFuc2Zvcm0iLCJkZWZhdWx0V2hlZWxEZWx0YSIsImRlbHRhTW9kZSIsImRlZmF1bHRDb25zdHJhaW4iLCJ0cmFuc2xhdGVFeHRlbnQiLCJ0b3VjaHN0YXJ0aW5nIiwidG91Y2hmaXJzdCIsImNvbnN0cmFpbiIsIndoZWVsRGVsdGEiLCJzY2FsZUV4dGVudCIsInRvdWNoRGVsYXkiLCJ3aGVlbERlbGF5IiwidGFwRGlzdGFuY2UiLCJ3aGVlbGVkIiwiZGJsY2xpY2tlZCIsIl9fem9vbWluZyIsIkdlc3R1cmUiLCJ0YXBzIiwid2hlZWwiLCJrMSIsInRvdWNoMCIsInRvdWNoMSIsImwwIiwibDEiLCJkcCIsImRsIiwiY29sbGVjdGlvbiIsInNjYWxlQnkiLCJ0cmFuc2xhdGVCeSIsInRyYW5zbGF0ZVRvIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdsb2JhbFRoaXMiLCJ0b1N0cmluZ1RhZyIsImZpbGV1cGxvYWR1cmwiLCJfYm9hcmRfY29udGVudCJdLCJzb3VyY2VSb290IjoiIn0=